
Mikromedia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b0a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a670  0801b270  0801b270  0002b270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080258e0  080258e0  000402c8  2**0
                  CONTENTS
  4 .ARM          00000008  080258e0  080258e0  000358e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080258e8  080258e8  000402c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080258e8  080258e8  000358e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080258ec  080258ec  000358ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  080258f0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d428  200002c8  08025bb8  000402c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001d6f0  08025bb8  0004d6f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000402c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e5b2  00000000  00000000  000402f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004da5  00000000  00000000  0006e8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  00073650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  00074e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c397  00000000  00000000  000763a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b72a  00000000  00000000  000a273f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001084e4  00000000  00000000  000bde69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d5  00000000  00000000  001c634d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066dc  00000000  00000000  001c6424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002c8 	.word	0x200002c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801b258 	.word	0x0801b258

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002cc 	.word	0x200002cc
 800020c:	0801b258 	.word	0x0801b258

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb0:	f000 b96e 	b.w	8000f90 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9d08      	ldr	r5, [sp, #32]
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8083 	bne.w	8000de2 <__udivmoddi4+0x116>
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	d947      	bls.n	8000d72 <__udivmoddi4+0xa6>
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	b142      	cbz	r2, 8000cfa <__udivmoddi4+0x2e>
 8000ce8:	f1c2 0020 	rsb	r0, r2, #32
 8000cec:	fa24 f000 	lsr.w	r0, r4, r0
 8000cf0:	4091      	lsls	r1, r2
 8000cf2:	4097      	lsls	r7, r2
 8000cf4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf8:	4094      	lsls	r4, r2
 8000cfa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfe:	0c23      	lsrs	r3, r4, #16
 8000d00:	fbbc f6f8 	udiv	r6, ip, r8
 8000d04:	fa1f fe87 	uxth.w	lr, r7
 8000d08:	fb08 c116 	mls	r1, r8, r6, ip
 8000d0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d10:	fb06 f10e 	mul.w	r1, r6, lr
 8000d14:	4299      	cmp	r1, r3
 8000d16:	d909      	bls.n	8000d2c <__udivmoddi4+0x60>
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 8119 	bcs.w	8000f54 <__udivmoddi4+0x288>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 8116 	bls.w	8000f54 <__udivmoddi4+0x288>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	443b      	add	r3, r7
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x8c>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	f080 8105 	bcs.w	8000f58 <__udivmoddi4+0x28c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f240 8102 	bls.w	8000f58 <__udivmoddi4+0x28c>
 8000d54:	3802      	subs	r0, #2
 8000d56:	443c      	add	r4, r7
 8000d58:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5c:	eba4 040e 	sub.w	r4, r4, lr
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa0>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	b902      	cbnz	r2, 8000d76 <__udivmoddi4+0xaa>
 8000d74:	deff      	udf	#255	; 0xff
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	2a00      	cmp	r2, #0
 8000d7c:	d150      	bne.n	8000e20 <__udivmoddi4+0x154>
 8000d7e:	1bcb      	subs	r3, r1, r7
 8000d80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d84:	fa1f f887 	uxth.w	r8, r7
 8000d88:	2601      	movs	r6, #1
 8000d8a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8e:	0c21      	lsrs	r1, r4, #16
 8000d90:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d98:	fb08 f30c 	mul.w	r3, r8, ip
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0xe4>
 8000da0:	1879      	adds	r1, r7, r1
 8000da2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0xe2>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	f200 80e9 	bhi.w	8000f80 <__udivmoddi4+0x2b4>
 8000dae:	4684      	mov	ip, r0
 8000db0:	1ac9      	subs	r1, r1, r3
 8000db2:	b2a3      	uxth	r3, r4
 8000db4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dbc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dc0:	fb08 f800 	mul.w	r8, r8, r0
 8000dc4:	45a0      	cmp	r8, r4
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x10c>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x10a>
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	f200 80d9 	bhi.w	8000f88 <__udivmoddi4+0x2bc>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000de0:	e7bf      	b.n	8000d62 <__udivmoddi4+0x96>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d909      	bls.n	8000dfa <__udivmoddi4+0x12e>
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	f000 80b1 	beq.w	8000f4e <__udivmoddi4+0x282>
 8000dec:	2600      	movs	r6, #0
 8000dee:	e9c5 0100 	strd	r0, r1, [r5]
 8000df2:	4630      	mov	r0, r6
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	fab3 f683 	clz	r6, r3
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d14a      	bne.n	8000e98 <__udivmoddi4+0x1cc>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0x140>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 80b8 	bhi.w	8000f7c <__udivmoddi4+0x2b0>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	468c      	mov	ip, r1
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0a8      	beq.n	8000d6c <__udivmoddi4+0xa0>
 8000e1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1e:	e7a5      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f603 	lsr.w	r6, r0, r3
 8000e28:	4097      	lsls	r7, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e32:	40d9      	lsrs	r1, r3
 8000e34:	4330      	orrs	r0, r6
 8000e36:	0c03      	lsrs	r3, r0, #16
 8000e38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e3c:	fa1f f887 	uxth.w	r8, r7
 8000e40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f108 	mul.w	r1, r6, r8
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x19c>
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e5a:	f080 808d 	bcs.w	8000f78 <__udivmoddi4+0x2ac>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 808a 	bls.w	8000f78 <__udivmoddi4+0x2ac>
 8000e64:	3e02      	subs	r6, #2
 8000e66:	443b      	add	r3, r7
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	b281      	uxth	r1, r0
 8000e6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb00 f308 	mul.w	r3, r0, r8
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x1c4>
 8000e80:	1879      	adds	r1, r7, r1
 8000e82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e86:	d273      	bcs.n	8000f70 <__udivmoddi4+0x2a4>
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d971      	bls.n	8000f70 <__udivmoddi4+0x2a4>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4439      	add	r1, r7
 8000e90:	1acb      	subs	r3, r1, r3
 8000e92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e96:	e778      	b.n	8000d8a <__udivmoddi4+0xbe>
 8000e98:	f1c6 0c20 	rsb	ip, r6, #32
 8000e9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000ea0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea4:	431c      	orrs	r4, r3
 8000ea6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eaa:	fa01 f306 	lsl.w	r3, r1, r6
 8000eae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eb2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb6:	431f      	orrs	r7, r3
 8000eb8:	0c3b      	lsrs	r3, r7, #16
 8000eba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebe:	fa1f f884 	uxth.w	r8, r4
 8000ec2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eca:	fb09 fa08 	mul.w	sl, r9, r8
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x220>
 8000eda:	1861      	adds	r1, r4, r1
 8000edc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee0:	d248      	bcs.n	8000f74 <__udivmoddi4+0x2a8>
 8000ee2:	458a      	cmp	sl, r1
 8000ee4:	d946      	bls.n	8000f74 <__udivmoddi4+0x2a8>
 8000ee6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eea:	4421      	add	r1, r4
 8000eec:	eba1 010a 	sub.w	r1, r1, sl
 8000ef0:	b2bf      	uxth	r7, r7
 8000ef2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000efa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efe:	fb00 f808 	mul.w	r8, r0, r8
 8000f02:	45b8      	cmp	r8, r7
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x24a>
 8000f06:	19e7      	adds	r7, r4, r7
 8000f08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f0c:	d22e      	bcs.n	8000f6c <__udivmoddi4+0x2a0>
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d92c      	bls.n	8000f6c <__udivmoddi4+0x2a0>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4427      	add	r7, r4
 8000f16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f1a:	eba7 0708 	sub.w	r7, r7, r8
 8000f1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000f22:	454f      	cmp	r7, r9
 8000f24:	46c6      	mov	lr, r8
 8000f26:	4649      	mov	r1, r9
 8000f28:	d31a      	bcc.n	8000f60 <__udivmoddi4+0x294>
 8000f2a:	d017      	beq.n	8000f5c <__udivmoddi4+0x290>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x27a>
 8000f2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000f32:	eb67 0701 	sbc.w	r7, r7, r1
 8000f36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f3a:	40f2      	lsrs	r2, r6
 8000f3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f40:	40f7      	lsrs	r7, r6
 8000f42:	e9c5 2700 	strd	r2, r7, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	462e      	mov	r6, r5
 8000f50:	4628      	mov	r0, r5
 8000f52:	e70b      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000f54:	4606      	mov	r6, r0
 8000f56:	e6e9      	b.n	8000d2c <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fd      	b.n	8000d58 <__udivmoddi4+0x8c>
 8000f5c:	4543      	cmp	r3, r8
 8000f5e:	d2e5      	bcs.n	8000f2c <__udivmoddi4+0x260>
 8000f60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f64:	eb69 0104 	sbc.w	r1, r9, r4
 8000f68:	3801      	subs	r0, #1
 8000f6a:	e7df      	b.n	8000f2c <__udivmoddi4+0x260>
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	e7d2      	b.n	8000f16 <__udivmoddi4+0x24a>
 8000f70:	4660      	mov	r0, ip
 8000f72:	e78d      	b.n	8000e90 <__udivmoddi4+0x1c4>
 8000f74:	4681      	mov	r9, r0
 8000f76:	e7b9      	b.n	8000eec <__udivmoddi4+0x220>
 8000f78:	4666      	mov	r6, ip
 8000f7a:	e775      	b.n	8000e68 <__udivmoddi4+0x19c>
 8000f7c:	4630      	mov	r0, r6
 8000f7e:	e74a      	b.n	8000e16 <__udivmoddi4+0x14a>
 8000f80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f84:	4439      	add	r1, r7
 8000f86:	e713      	b.n	8000db0 <__udivmoddi4+0xe4>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	443c      	add	r4, r7
 8000f8c:	e724      	b.n	8000dd8 <__udivmoddi4+0x10c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8000f98:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <GUI_X_Config+0x18>)
 8000f9e:	f012 fcd3 	bl	8013948 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <GUI_X_Config+0x1c>)
 8000fa4:	f012 f836 	bl	8013014 <GUI_SetDefaultFont>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200002e4 	.word	0x200002e4
 8000fb0:	0801b6b4 	.word	0x0801b6b4

08000fb4 <GUI_X_GetTime>:
  Some timing dependent routines require a GetTime
  and delay function. Default time unit (tick), normally is
  1 ms.
*/

GUI_TIMER_TIME GUI_X_GetTime(void) { 
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return OS_TimeMS; 
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <GUI_X_GetTime+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2001d3b0 	.word	0x2001d3b0

08000fcc <GUI_X_Delay>:

void GUI_X_Delay(int ms) { 
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  int tEnd = OS_TimeMS + ms;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <GUI_X_Delay+0x30>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  while ((tEnd - OS_TimeMS) > 0);
 8000fde:	bf00      	nop
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <GUI_X_Delay+0x30>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	dcf9      	bgt.n	8000fe0 <GUI_X_Delay+0x14>
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2001d3b0 	.word	0x2001d3b0

08001000 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <GUI_TOUCH_X_ActivateX>:
*
**********************************************************************
*/

void GUI_TOUCH_X_ActivateX(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <GUI_TOUCH_X_ActivateY>:
void GUI_TOUCH_X_ActivateY(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <GUI_TOUCH_X_MeasureX>:
int  GUI_TOUCH_X_MeasureX(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
  return STMPE610_GetX_TOUCH_RAW();
 800102e:	f001 fe19 	bl	8002c64 <STMPE610_GetX_TOUCH_RAW>
 8001032:	4603      	mov	r3, r0
}
 8001034:	4618      	mov	r0, r3
 8001036:	bd80      	pop	{r7, pc}

08001038 <GUI_TOUCH_X_MeasureY>:
int  GUI_TOUCH_X_MeasureY(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  return STMPE610_GetY_TOUCH_RAW();
 800103c:	f001 fe1e 	bl	8002c7c <STMPE610_GetY_TOUCH_RAW>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b0a2      	sub	sp, #136	; 0x88
 800104c:	af02      	add	r7, sp, #8
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 800104e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
  GUI_PORT_API PortAPI = {0};
 800105e:	463b      	mov	r3, r7
 8001060:	2268      	movs	r2, #104	; 0x68
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f019 fbdb 	bl	801a820 <memset>
  //
  // Set display driver and color conversion
  //

//  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_565, 0, 0);
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565, 0, 0);
 800106a:	2300      	movs	r3, #0
 800106c:	2200      	movs	r2, #0
 800106e:	4920      	ldr	r1, [pc, #128]	; (80010f0 <LCD_X_Config+0xa8>)
 8001070:	4820      	ldr	r0, [pc, #128]	; (80010f4 <LCD_X_Config+0xac>)
 8001072:	f011 fe9d 	bl	8012db0 <GUI_DEVICE_CreateAndLink>
 8001076:	67f8      	str	r0, [r7, #124]	; 0x7c
  //

//  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
//  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);

  LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8001078:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800107c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001080:	2000      	movs	r0, #0
 8001082:	f00f f843 	bl	801010c <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS);
 8001086:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800108a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800108e:	2000      	movs	r0, #0
 8001090:	f00f f824 	bl	80100dc <LCD_SetVSizeEx>
  // Orientation
  //
//  Config.Orientation = GUI_SWAP_XY | GUI_MIRROR_Y;
//  GUIDRV_FlexColor_Config(pDevice, &Config);

  Config.Orientation = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	673b      	str	r3, [r7, #112]	; 0x70
  GUIDRV_FlexColor_Config(pDevice, &Config);
 8001098:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800109c:	4619      	mov	r1, r3
 800109e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80010a0:	f00e ffbb 	bl	801001a <GUIDRV_FlexColor_Config>
//  PortAPI.pfWriteM16_A1 = LcdWriteDataMultiple;
//  PortAPI.pfReadM16_A1  = LcdReadDataMultiple;
//  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66708, GUIDRV_FLEXCOLOR_M16C0B16);

  // Set controller and operation mode
  PortAPI.pfWrite16_A0 = SSD1963_WriteCommand;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <LCD_X_Config+0xb0>)
 80010a6:	623b      	str	r3, [r7, #32]
  PortAPI.pfWrite16_A1 = SSD1963_WriteData;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <LCD_X_Config+0xb4>)
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  PortAPI.pfWriteM16_A1 = SSD1963_WriteDataMultiple;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <LCD_X_Config+0xb8>)
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  // PortAPI.pfReadM16_A1 = SSD1963_ReadData;
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66720, GUIDRV_FLEXCOLOR_M16C0B16);
 80010b0:	4639      	mov	r1, r7
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <LCD_X_Config+0xbc>)
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <LCD_X_Config+0xc0>)
 80010b6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80010b8:	f00e ffcd 	bl	8010056 <GUIDRV_FlexColor_SetFunc>
  GUI_TOUCH_Calibrate(GUI_COORD_X, 0, 800, GUI_TOUCH_AD_LEFT , GUI_TOUCH_AD_RIGHT);
 80010bc:	f640 7374 	movw	r3, #3956	; 0xf74
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2392      	movs	r3, #146	; 0x92
 80010c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80010c8:	2100      	movs	r1, #0
 80010ca:	2000      	movs	r0, #0
 80010cc:	f010 fafe 	bl	80116cc <GUI_TOUCH_Calibrate>
  GUI_TOUCH_Calibrate(GUI_COORD_Y, 0, 480, GUI_TOUCH_AD_TOP, GUI_TOUCH_AD_BOTTOM);
 80010d0:	f640 7303 	movw	r3, #3843	; 0xf03
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80010da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80010de:	2100      	movs	r1, #0
 80010e0:	2001      	movs	r0, #1
 80010e2:	f010 faf3 	bl	80116cc <GUI_TOUCH_Calibrate>
}
 80010e6:	bf00      	nop
 80010e8:	3780      	adds	r7, #128	; 0x80
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	08020bd0 	.word	0x08020bd0
 80010f4:	080209fc 	.word	0x080209fc
 80010f8:	08002779 	.word	0x08002779
 80010fc:	080027f5 	.word	0x080027f5
 8001100:	08002871 	.word	0x08002871
 8001104:	0800fa21 	.word	0x0800fa21
 8001108:	0800f385 	.word	0x0800f385

0800110c <LCD_X_DisplayDriver>:
* Return Value:
*   < -1 - Error
*     -1 - Command not handled
*      0 - Ok
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d105      	bne.n	800112a <LCD_X_DisplayDriver+0x1e>
    // controller is not initialized by any external routine this needs
    // to be adapted by the customer...
    //
    // ...

	 SSD1963_Init();
 800111e:	f001 fbc1 	bl	80028a4 <SSD1963_Init>
	 STMPE610_Init();
 8001122:	f001 fd03 	bl	8002b2c <STMPE610_Init>
    return 0;
 8001126:	2300      	movs	r3, #0
 8001128:	e003      	b.n	8001132 <LCD_X_DisplayDriver+0x26>
  }
  default:
    r = -1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001130:	697b      	ldr	r3, [r7, #20]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113e:	b0a9      	sub	sp, #164	; 0xa4
 8001140:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001142:	f001 fda7 	bl	8002c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001146:	f000 f8b3 	bl	80012b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114a:	f000 f9d3 	bl	80014f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800114e:	f000 f991 	bl	8001474 <MX_I2C1_Init>
  MX_ADC3_Init();
 8001152:	f000 f93d 	bl	80013d0 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  Init_LCD_GPIO();
 8001156:	f001 fa7f 	bl	8002658 <Init_LCD_GPIO>
  Init_TOUCH_GPIO(hi2c1);
 800115a:	4e47      	ldr	r6, [pc, #284]	; (8001278 <main+0x13c>)
 800115c:	466d      	mov	r5, sp
 800115e:	f106 0410 	add.w	r4, r6, #16
 8001162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001172:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001176:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800117a:	f001 fc41 	bl	8002a00 <Init_TOUCH_GPIO>
  Init_ACCEL_GPIO(hi2c1);
 800117e:	4e3e      	ldr	r6, [pc, #248]	; (8001278 <main+0x13c>)
 8001180:	466d      	mov	r5, sp
 8001182:	f106 0410 	add.w	r4, r6, #16
 8001186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001192:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001196:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800119a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800119e:	f001 f98b 	bl	80024b8 <Init_ACCEL_GPIO>
  ADXL345_Init();
 80011a2:	f001 fa37 	bl	8002614 <ADXL345_Init>


  WM_SetCreateFlags(WM_CF_MEMDEV); // eliminise flickering
 80011a6:	2004      	movs	r0, #4
 80011a8:	f00b f974 	bl	800c494 <WM_SetCreateFlags>

  GUI_Init();
 80011ac:	f011 ffa4 	bl	80130f8 <GUI_Init>


   i=0;
 80011b0:	4b32      	ldr	r3, [pc, #200]	; (800127c <main+0x140>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of periodicTimer */
  osTimerDef(periodicTimer, PTCallback);
 80011b6:	4b32      	ldr	r3, [pc, #200]	; (8001280 <main+0x144>)
 80011b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);
 80011ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011be:	2200      	movs	r2, #0
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 fd64 	bl	8005c90 <osTimerCreate>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a2e      	ldr	r2, [pc, #184]	; (8001284 <main+0x148>)
 80011cc:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of keyPressedQ */
  osMessageQDef(keyPressedQ, 5, uint32_t);
 80011ce:	4a2e      	ldr	r2, [pc, #184]	; (8001288 <main+0x14c>)
 80011d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d8:	e883 0003 	stmia.w	r3, {r0, r1}
  keyPressedQHandle = osMessageCreate(osMessageQ(keyPressedQ), NULL);
 80011dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f004 fdf0 	bl	8005dc8 <osMessageCreate>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a28      	ldr	r2, [pc, #160]	; (800128c <main+0x150>)
 80011ec:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80011ee:	4b28      	ldr	r3, [pc, #160]	; (8001290 <main+0x154>)
 80011f0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80011f4:	461d      	mov	r5, r3
 80011f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fa:	682b      	ldr	r3, [r5, #0]
 80011fc:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f004 fd08 	bl	8005c1a <osThreadCreate>
 800120a:	4603      	mov	r3, r0
 800120c:	4a21      	ldr	r2, [pc, #132]	; (8001294 <main+0x158>)
 800120e:	6013      	str	r3, [r2, #0]

  /* definition and creation of acctempTask */
  osThreadDef(acctempTask, AccTemp_init, osPriorityBelowNormal, 0, 512);
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <main+0x15c>)
 8001212:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001216:	461d      	mov	r5, r3
 8001218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	6023      	str	r3, [r4, #0]
  acctempTaskHandle = osThreadCreate(osThread(acctempTask), NULL);
 8001220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f004 fcf7 	bl	8005c1a <osThreadCreate>
 800122c:	4603      	mov	r3, r0
 800122e:	4a1b      	ldr	r2, [pc, #108]	; (800129c <main+0x160>)
 8001230:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonTask */
  osThreadDef(buttonTask, ButtonTask_init, osPriorityIdle, 0, 512);
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <main+0x164>)
 8001234:	f107 0418 	add.w	r4, r7, #24
 8001238:	461d      	mov	r5, r3
 800123a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123e:	682b      	ldr	r3, [r5, #0]
 8001240:	6023      	str	r3, [r4, #0]
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f004 fce6 	bl	8005c1a <osThreadCreate>
 800124e:	4603      	mov	r3, r0
 8001250:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <main+0x168>)
 8001252:	6013      	str	r3, [r2, #0]

  /* definition and creation of tempRegTask */
  osThreadDef(tempRegTask, TempRegTask_init, osPriorityLow, 0, 128);
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <main+0x16c>)
 8001256:	1d3c      	adds	r4, r7, #4
 8001258:	461d      	mov	r5, r3
 800125a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125e:	682b      	ldr	r3, [r5, #0]
 8001260:	6023      	str	r3, [r4, #0]
  tempRegTaskHandle = osThreadCreate(osThread(tempRegTask), NULL);
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f004 fcd7 	bl	8005c1a <osThreadCreate>
 800126c:	4603      	mov	r3, r0
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <main+0x170>)
 8001270:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001272:	f004 fccb 	bl	8005c0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001276:	e7fe      	b.n	8001276 <main+0x13a>
 8001278:	2001d3c4 	.word	0x2001d3c4
 800127c:	200192e8 	.word	0x200192e8
 8001280:	08001c61 	.word	0x08001c61
 8001284:	2001d474 	.word	0x2001d474
 8001288:	0801b2a0 	.word	0x0801b2a0
 800128c:	2001d478 	.word	0x2001d478
 8001290:	0801b2a8 	.word	0x0801b2a8
 8001294:	2001d3bc 	.word	0x2001d3bc
 8001298:	0801b2bc 	.word	0x0801b2bc
 800129c:	2001d41c 	.word	0x2001d41c
 80012a0:	0801b2d0 	.word	0x0801b2d0
 80012a4:	2001d470 	.word	0x2001d470
 80012a8:	0801b2e4 	.word	0x0801b2e4
 80012ac:	2001d414 	.word	0x2001d414

080012b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b0b4      	sub	sp, #208	; 0xd0
 80012b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012ba:	2230      	movs	r2, #48	; 0x30
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f019 faae 	bl	801a820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	2284      	movs	r2, #132	; 0x84
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f019 fa9f 	bl	801a820 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b39      	ldr	r3, [pc, #228]	; (80013c8 <SystemClock_Config+0x118>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a38      	ldr	r2, [pc, #224]	; (80013c8 <SystemClock_Config+0x118>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <SystemClock_Config+0x118>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <SystemClock_Config+0x11c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a33      	ldr	r2, [pc, #204]	; (80013cc <SystemClock_Config+0x11c>)
 8001300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <SystemClock_Config+0x11c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001312:	2302      	movs	r3, #2
 8001314:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131e:	2310      	movs	r3, #16
 8001320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001330:	2308      	movs	r3, #8
 8001332:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001336:	23d8      	movs	r3, #216	; 0xd8
 8001338:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001348:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800134c:	4618      	mov	r0, r3
 800134e:	f003 f8cb 	bl	80044e8 <HAL_RCC_OscConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001358:	f000 fcbe 	bl	8001cd8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800135c:	f003 f874 	bl	8004448 <HAL_PWREx_EnableOverDrive>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001366:	f000 fcb7 	bl	8001cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001370:	2302      	movs	r3, #2
 8001372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800137c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800138c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001390:	2107      	movs	r1, #7
 8001392:	4618      	mov	r0, r3
 8001394:	f003 fb4c 	bl	8004a30 <HAL_RCC_ClockConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800139e:	f000 fc9b 	bl	8001cd8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013a6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 fd31 	bl	8004e18 <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80013bc:	f000 fc8c 	bl	8001cd8 <Error_Handler>
  }
}
 80013c0:	bf00      	nop
 80013c2:	37d0      	adds	r7, #208	; 0xd0
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40007000 	.word	0x40007000

080013d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013d6:	463b      	mov	r3, r7
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <MX_ADC3_Init+0x98>)
 80013e4:	4a21      	ldr	r2, [pc, #132]	; (800146c <MX_ADC3_Init+0x9c>)
 80013e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_ADC3_Init+0x98>)
 80013ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <MX_ADC3_Init+0x98>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <MX_ADC3_Init+0x98>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_ADC3_Init+0x98>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <MX_ADC3_Init+0x98>)
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_ADC3_Init+0x98>)
 800140c:	2200      	movs	r2, #0
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <MX_ADC3_Init+0x98>)
 8001412:	4a17      	ldr	r2, [pc, #92]	; (8001470 <MX_ADC3_Init+0xa0>)
 8001414:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_ADC3_Init+0x98>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_ADC3_Init+0x98>)
 800141e:	2201      	movs	r2, #1
 8001420:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_ADC3_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_ADC3_Init+0x98>)
 800142c:	2201      	movs	r2, #1
 800142e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_ADC3_Init+0x98>)
 8001432:	f001 fc81 	bl	8002d38 <HAL_ADC_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800143c:	f000 fc4c 	bl	8001cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001440:	2306      	movs	r3, #6
 8001442:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001444:	2301      	movs	r3, #1
 8001446:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800144c:	463b      	mov	r3, r7
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_ADC3_Init+0x98>)
 8001452:	f001 fe1b 	bl	800308c <HAL_ADC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800145c:	f000 fc3c 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2001d420 	.word	0x2001d420
 800146c:	40012200 	.word	0x40012200
 8001470:	0f000001 	.word	0x0f000001

08001474 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_I2C1_Init+0x74>)
 800147a:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <MX_I2C1_Init+0x78>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_I2C1_Init+0x74>)
 8001480:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <MX_I2C1_Init+0x7c>)
 8001482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_I2C1_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_I2C1_Init+0x74>)
 800148c:	2201      	movs	r2, #1
 800148e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_I2C1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_I2C1_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <MX_I2C1_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_I2C1_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_I2C1_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ae:	480e      	ldr	r0, [pc, #56]	; (80014e8 <MX_I2C1_Init+0x74>)
 80014b0:	f002 fad8 	bl	8003a64 <HAL_I2C_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014ba:	f000 fc0d 	bl	8001cd8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014be:	2100      	movs	r1, #0
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <MX_I2C1_Init+0x74>)
 80014c2:	f002 ff29 	bl	8004318 <HAL_I2CEx_ConfigAnalogFilter>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014cc:	f000 fc04 	bl	8001cd8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014d0:	2100      	movs	r1, #0
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_I2C1_Init+0x74>)
 80014d4:	f002 ff6b 	bl	80043ae <HAL_I2CEx_ConfigDigitalFilter>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014de:	f000 fbfb 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2001d3c4 	.word	0x2001d3c4
 80014ec:	40005400 	.word	0x40005400
 80014f0:	20404768 	.word	0x20404768

080014f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <MX_GPIO_Init+0xd0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a2d      	ldr	r2, [pc, #180]	; (80015c4 <MX_GPIO_Init+0xd0>)
 8001510:	f043 0320 	orr.w	r3, r3, #32
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <MX_GPIO_Init+0xd0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <MX_GPIO_Init+0xd0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <MX_GPIO_Init+0xd0>)
 8001528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <MX_GPIO_Init+0xd0>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <MX_GPIO_Init+0xd0>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <MX_GPIO_Init+0xd0>)
 8001540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <MX_GPIO_Init+0xd0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <MX_GPIO_Init+0xd0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <MX_GPIO_Init+0xd0>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <MX_GPIO_Init+0xd0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001570:	4815      	ldr	r0, [pc, #84]	; (80015c8 <MX_GPIO_Init+0xd4>)
 8001572:	f002 fa5d 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2118      	movs	r1, #24
 800157a:	4814      	ldr	r0, [pc, #80]	; (80015cc <MX_GPIO_Init+0xd8>)
 800157c:	f002 fa58 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	480b      	ldr	r0, [pc, #44]	; (80015c8 <MX_GPIO_Init+0xd4>)
 800159a:	f002 f89d 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800159e:	2318      	movs	r3, #24
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_GPIO_Init+0xd8>)
 80015b6:	f002 f88f 	bl	80036d8 <HAL_GPIO_Init>

}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40021800 	.word	0x40021800
 80015cc:	40020400 	.word	0x40020400

080015d0 <createMenuTemp>:

/* USER CODE BEGIN 4 */
void createMenuTemp()
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	WM_DeleteWindow(hWin);
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <createMenuTemp+0x44>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f00c f84f 	bl	800d67c <WM_DeleteWindow>
	hWin = CreateTempWin();
 80015de:	f000 ff27 	bl	8002430 <CreateTempWin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <createMenuTemp+0x44>)
 80015e6:	6013      	str	r3, [r2, #0]

	hWinList = WM_GetDialogItem(hWin, ID_LISTTEMP);
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <createMenuTemp+0x44>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f640 0104 	movw	r1, #2052	; 0x804
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00b fa0d 	bl	800ca10 <WM_GetDialogItem>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <createMenuTemp+0x48>)
 80015fa:	6013      	str	r3, [r2, #0]

	vTaskResume(acctempTaskHandle);
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <createMenuTemp+0x4c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f005 fcd5 	bl	8006fb0 <vTaskResume>

	state = ID_BTN_TEMP;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <createMenuTemp+0x50>)
 8001608:	f640 0201 	movw	r2, #2049	; 0x801
 800160c:	601a      	str	r2, [r3, #0]
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2001d3b8 	.word	0x2001d3b8
 8001618:	2001d3c0 	.word	0x2001d3c0
 800161c:	2001d41c 	.word	0x2001d41c
 8001620:	200192e4 	.word	0x200192e4

08001624 <menuTemp>:

void menuTemp()
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
	char* temp_val;
	uint16_t  tempInt;
	uint8_t ostatak ;

	temp_val = pvPortMalloc(4*sizeof(char));
 800162a:	2004      	movs	r0, #4
 800162c:	f007 f802 	bl	8008634 <pvPortMalloc>
 8001630:	60f8      	str	r0, [r7, #12]


	float temp2;
	temp2=temp*10.0;
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <menuTemp+0xa4>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800163c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001640:	edc7 7a02 	vstr	s15, [r7, #8]

	tempInt = (uint16_t)temp2;
 8001644:	edd7 7a02 	vldr	s15, [r7, #8]
 8001648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800164c:	ee17 3a90 	vmov	r3, s15
 8001650:	80fb      	strh	r3, [r7, #6]
	ostatak = tempInt%10;
 8001652:	88fa      	ldrh	r2, [r7, #6]
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <menuTemp+0xa8>)
 8001656:	fba3 1302 	umull	r1, r3, r3, r2
 800165a:	08d9      	lsrs	r1, r3, #3
 800165c:	460b      	mov	r3, r1
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	b29b      	uxth	r3, r3
 8001668:	717b      	strb	r3, [r7, #5]
	tempInt = (uint16_t)(temp2/10.0);
 800166a:	68b8      	ldr	r0, [r7, #8]
 800166c:	f7fe ff8c 	bl	8000588 <__aeabi_f2d>
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <menuTemp+0xac>)
 8001676:	f7ff f909 	bl	800088c <__aeabi_ddiv>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff fa9b 	bl	8000bbc <__aeabi_d2uiz>
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]

	hWinList = WM_GetDialogItem(hWin, ID_LISTTEMP);
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <menuTemp+0xb0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f640 0104 	movw	r1, #2052	; 0x804
 8001692:	4618      	mov	r0, r3
 8001694:	f00b f9bc 	bl	800ca10 <WM_GetDialogItem>
 8001698:	4603      	mov	r3, r0
 800169a:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <menuTemp+0xb4>)
 800169c:	6013      	str	r3, [r2, #0]
	sprintf((char*)temp_val, "%d.%d", tempInt,ostatak);
 800169e:	88fa      	ldrh	r2, [r7, #6]
 80016a0:	797b      	ldrb	r3, [r7, #5]
 80016a2:	490e      	ldr	r1, [pc, #56]	; (80016dc <menuTemp+0xb8>)
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f019 f8c3 	bl	801a830 <siprintf>

	LISTVIEW_SetItemText(hWinList, 0, 0,temp_val );
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <menuTemp+0xb4>)
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	f007 fd1c 	bl	80090f0 <LISTVIEW_SetItemText>


	vPortFree(temp_val);
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f007 f885 	bl	80087c8 <vPortFree>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200192f0 	.word	0x200192f0
 80016cc:	cccccccd 	.word	0xcccccccd
 80016d0:	40240000 	.word	0x40240000
 80016d4:	2001d3b8 	.word	0x2001d3b8
 80016d8:	2001d3c0 	.word	0x2001d3c0
 80016dc:	0801b2f8 	.word	0x0801b2f8

080016e0 <createMenuAccel>:
void createMenuAccel()
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	WM_DeleteWindow(hWin);
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <createMenuAccel+0x58>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00b ffc7 	bl	800d67c <WM_DeleteWindow>
	hWin = CreateAccWin();
 80016ee:	f000 fd65 	bl	80021bc <CreateAccWin>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a10      	ldr	r2, [pc, #64]	; (8001738 <createMenuAccel+0x58>)
 80016f6:	6013      	str	r3, [r2, #0]

	hWinText = WM_GetDialogItem(hWin, ID_TEXT_ACC);
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <createMenuAccel+0x58>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f640 0108 	movw	r1, #2056	; 0x808
 8001700:	4618      	mov	r0, r3
 8001702:	f00b f985 	bl	800ca10 <WM_GetDialogItem>
 8001706:	4603      	mov	r3, r0
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <createMenuAccel+0x5c>)
 800170a:	6013      	str	r3, [r2, #0]
	hWinList = WM_GetDialogItem(hWin, ID_LISTACC);
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <createMenuAccel+0x58>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f640 0105 	movw	r1, #2053	; 0x805
 8001714:	4618      	mov	r0, r3
 8001716:	f00b f97b 	bl	800ca10 <WM_GetDialogItem>
 800171a:	4603      	mov	r3, r0
 800171c:	4a08      	ldr	r2, [pc, #32]	; (8001740 <createMenuAccel+0x60>)
 800171e:	6013      	str	r3, [r2, #0]

	vTaskResume(acctempTaskHandle);
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <createMenuAccel+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f005 fc43 	bl	8006fb0 <vTaskResume>

	state = ID_BTN_ACC;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <createMenuAccel+0x68>)
 800172c:	f640 0202 	movw	r2, #2050	; 0x802
 8001730:	601a      	str	r2, [r3, #0]
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2001d3b8 	.word	0x2001d3b8
 800173c:	2001d3b4 	.word	0x2001d3b4
 8001740:	2001d3c0 	.word	0x2001d3c0
 8001744:	2001d41c 	.word	0x2001d41c
 8001748:	200192e4 	.word	0x200192e4

0800174c <menuAccel>:
void menuAccel()
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
	char* acc_x_val;
	char* acc_y_val;
	char* acc_z_val;

//	j = TEXT_SetText(hWinText, test_string);
	acc_x_val = pvPortMalloc(6*sizeof(char));
 8001752:	2006      	movs	r0, #6
 8001754:	f006 ff6e 	bl	8008634 <pvPortMalloc>
 8001758:	60f8      	str	r0, [r7, #12]
	acc_y_val = pvPortMalloc(6*sizeof(char));
 800175a:	2006      	movs	r0, #6
 800175c:	f006 ff6a 	bl	8008634 <pvPortMalloc>
 8001760:	60b8      	str	r0, [r7, #8]
	acc_z_val = pvPortMalloc(6*sizeof(char));
 8001762:	2006      	movs	r0, #6
 8001764:	f006 ff66 	bl	8008634 <pvPortMalloc>
 8001768:	6078      	str	r0, [r7, #4]

	hWinList = WM_GetDialogItem(hWin, ID_LISTACC);
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <menuAccel+0xa0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f640 0105 	movw	r1, #2053	; 0x805
 8001772:	4618      	mov	r0, r3
 8001774:	f00b f94c 	bl	800ca10 <WM_GetDialogItem>
 8001778:	4603      	mov	r3, r0
 800177a:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <menuAccel+0xa4>)
 800177c:	6013      	str	r3, [r2, #0]
	sprintf((char*)acc_x_val, "%d", accel_x);
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <menuAccel+0xa8>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	491c      	ldr	r1, [pc, #112]	; (80017f8 <menuAccel+0xac>)
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f019 f852 	bl	801a830 <siprintf>
	sprintf((char*)acc_y_val, "%d", accel_y);
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <menuAccel+0xb0>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4919      	ldr	r1, [pc, #100]	; (80017f8 <menuAccel+0xac>)
 8001794:	68b8      	ldr	r0, [r7, #8]
 8001796:	f019 f84b 	bl	801a830 <siprintf>
	sprintf((char*)acc_z_val, "%d", accel_z);
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <menuAccel+0xb4>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4915      	ldr	r1, [pc, #84]	; (80017f8 <menuAccel+0xac>)
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f019 f844 	bl	801a830 <siprintf>
	LISTVIEW_SetItemText(hWinList, 0, 0, acc_x_val);
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <menuAccel+0xa4>)
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	f007 fc9d 	bl	80090f0 <LISTVIEW_SetItemText>
	LISTVIEW_SetItemText(hWinList, 1, 0, acc_y_val);
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <menuAccel+0xa4>)
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2200      	movs	r2, #0
 80017be:	2101      	movs	r1, #1
 80017c0:	f007 fc96 	bl	80090f0 <LISTVIEW_SetItemText>
	LISTVIEW_SetItemText(hWinList, 2, 0, acc_z_val);
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <menuAccel+0xa4>)
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	2102      	movs	r1, #2
 80017ce:	f007 fc8f 	bl	80090f0 <LISTVIEW_SetItemText>


	vPortFree(acc_x_val);
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f006 fff8 	bl	80087c8 <vPortFree>
	vPortFree(acc_y_val);
 80017d8:	68b8      	ldr	r0, [r7, #8]
 80017da:	f006 fff5 	bl	80087c8 <vPortFree>
	vPortFree(acc_z_val);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f006 fff2 	bl	80087c8 <vPortFree>
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2001d3b8 	.word	0x2001d3b8
 80017f0:	2001d3c0 	.word	0x2001d3c0
 80017f4:	200192fc 	.word	0x200192fc
 80017f8:	0801b300 	.word	0x0801b300
 80017fc:	200192fe 	.word	0x200192fe
 8001800:	20019300 	.word	0x20019300

08001804 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	GUI_Clear();
 800180c:	f011 fc3a 	bl	8013084 <GUI_Clear>

	GUI_SetFont(&GUI_Font20_1);
 8001810:	4815      	ldr	r0, [pc, #84]	; (8001868 <StartDefaultTask+0x64>)
 8001812:	f010 fb2f 	bl	8011e74 <GUI_SetFont>
	GUI_SetColor(GUI_RED);
 8001816:	20ff      	movs	r0, #255	; 0xff
 8001818:	f010 fb5a 	bl	8011ed0 <GUI_SetColor>
	hWin = CreateMenu();
 800181c:	f000 fc40 	bl	80020a0 <CreateMenu>
 8001820:	4603      	mov	r3, r0
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <StartDefaultTask+0x68>)
 8001824:	6013      	str	r3, [r2, #0]

	vTaskSuspend(tempRegTaskHandle);
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <StartDefaultTask+0x6c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f005 faf8 	bl	8006e20 <vTaskSuspend>
	vTaskSuspend(acctempTaskHandle);
 8001830:	4b10      	ldr	r3, [pc, #64]	; (8001874 <StartDefaultTask+0x70>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f005 faf3 	bl	8006e20 <vTaskSuspend>
  /* Infinite loop */
	for (;;)
	{
		uint32_t btnPressed;

		STMPE610_read_xyz();
 800183a:	f001 f9c1 	bl	8002bc0 <STMPE610_read_xyz>
		GUI_TOUCH_Exec();
 800183e:	f00f ffa3 	bl	8011788 <GUI_TOUCH_Exec>
		btnPressed = GUI_GetKey();
 8001842:	f010 fc7f 	bl	8012144 <GUI_GetKey>
 8001846:	4603      	mov	r3, r0
 8001848:	60fb      	str	r3, [r7, #12]

		osMessagePut(keyPressedQHandle, (uint32_t)btnPressed, 50);
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <StartDefaultTask+0x74>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2232      	movs	r2, #50	; 0x32
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	4618      	mov	r0, r3
 8001854:	f004 faca 	bl	8005dec <osMessagePut>

		GUI_Delay(10);
 8001858:	200a      	movs	r0, #10
 800185a:	f00f ff23 	bl	80116a4 <GUI_Delay>
		osDelay(10);
 800185e:	200a      	movs	r0, #10
 8001860:	f004 fa02 	bl	8005c68 <osDelay>
	{
 8001864:	e7e9      	b.n	800183a <StartDefaultTask+0x36>
 8001866:	bf00      	nop
 8001868:	0801f580 	.word	0x0801f580
 800186c:	2001d3b8 	.word	0x2001d3b8
 8001870:	2001d414 	.word	0x2001d414
 8001874:	2001d41c 	.word	0x2001d41c
 8001878:	2001d478 	.word	0x2001d478

0800187c <AccTemp_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AccTemp_init */
void AccTemp_init(void const * argument)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AccTemp_init */
	vTaskResume(tempRegTaskHandle);
 8001884:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <AccTemp_init+0xf4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f005 fb91 	bl	8006fb0 <vTaskResume>
  /* Infinite loop */
  for(;;)
  {
	  	  uint16_t tempGraph;

	  	  ADXL345_read_xyz();
 800188e:	f000 fe77 	bl	8002580 <ADXL345_read_xyz>

	  	  HAL_ADC_Start(&hadc3);
 8001892:	4838      	ldr	r0, [pc, #224]	; (8001974 <AccTemp_init+0xf8>)
 8001894:	f001 fa94 	bl	8002dc0 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	4835      	ldr	r0, [pc, #212]	; (8001974 <AccTemp_init+0xf8>)
 800189e:	f001 fb5d 	bl	8002f5c <HAL_ADC_PollForConversion>
	  	  rawADC=HAL_ADC_GetValue(&hadc3);
 80018a2:	4834      	ldr	r0, [pc, #208]	; (8001974 <AccTemp_init+0xf8>)
 80018a4:	f001 fbe5 	bl	8003072 <HAL_ADC_GetValue>
 80018a8:	4603      	mov	r3, r0
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	4b32      	ldr	r3, [pc, #200]	; (8001978 <AccTemp_init+0xfc>)
 80018ae:	801a      	strh	r2, [r3, #0]
	  	  tempGraph = rawADC;
 80018b0:	4b31      	ldr	r3, [pc, #196]	; (8001978 <AccTemp_init+0xfc>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	81fb      	strh	r3, [r7, #14]
	  	  temp=(float)rawADC;
 80018b6:	4b30      	ldr	r3, [pc, #192]	; (8001978 <AccTemp_init+0xfc>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	ee07 3a90 	vmov	s15, r3
 80018be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018c2:	4b2e      	ldr	r3, [pc, #184]	; (800197c <AccTemp_init+0x100>)
 80018c4:	edc3 7a00 	vstr	s15, [r3]
	  	  temp=100.0*((temp)/(2048)-0.5);
 80018c8:	4b2c      	ldr	r3, [pc, #176]	; (800197c <AccTemp_init+0x100>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001980 <AccTemp_init+0x104>
 80018d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018d6:	ee16 0a90 	vmov	r0, s13
 80018da:	f7fe fe55 	bl	8000588 <__aeabi_f2d>
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	4b28      	ldr	r3, [pc, #160]	; (8001984 <AccTemp_init+0x108>)
 80018e4:	f7fe fcf0 	bl	80002c8 <__aeabi_dsub>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <AccTemp_init+0x10c>)
 80018f6:	f7fe fe9f 	bl	8000638 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f97b 	bl	8000bfc <__aeabi_d2f>
 8001906:	4603      	mov	r3, r0
 8001908:	4a1c      	ldr	r2, [pc, #112]	; (800197c <AccTemp_init+0x100>)
 800190a:	6013      	str	r3, [r2, #0]
	  	  tempGraph=(uint16_t)(temp*50.0);
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <AccTemp_init+0x100>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe39 	bl	8000588 <__aeabi_f2d>
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <AccTemp_init+0x110>)
 800191c:	f7fe fe8c 	bl	8000638 <__aeabi_dmul>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f948 	bl	8000bbc <__aeabi_d2uiz>
 800192c:	4603      	mov	r3, r0
 800192e:	81fb      	strh	r3, [r7, #14]
	  	  tempGraph=tempGraph-1100;
 8001930:	89fb      	ldrh	r3, [r7, #14]
 8001932:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8001936:	81fb      	strh	r3, [r7, #14]


	  	  if (state == ID_BTN_TEMP) {
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <AccTemp_init+0x114>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f640 0201 	movw	r2, #2049	; 0x801
 8001940:	4293      	cmp	r3, r2
 8001942:	d102      	bne.n	800194a <AccTemp_init+0xce>
	  		  menuTemp();
 8001944:	f7ff fe6e 	bl	8001624 <menuTemp>
 8001948:	e00d      	b.n	8001966 <AccTemp_init+0xea>
	  	  }
	  	  else if(state == ID_BTN_TEMP_GRAPH)
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <AccTemp_init+0x114>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f640 0211 	movw	r2, #2065	; 0x811
 8001952:	4293      	cmp	r3, r2
 8001954:	d107      	bne.n	8001966 <AccTemp_init+0xea>
	  	  {
	  		  GRAPH_DATA_YT_AddValue(hData, (uint16_t)((tempGraph)));
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <AccTemp_init+0x118>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f009 fd23 	bl	800b3ac <GRAPH_DATA_YT_AddValue>
	  	  }
	  	  osDelay(200);
 8001966:	20c8      	movs	r0, #200	; 0xc8
 8001968:	f004 f97e 	bl	8005c68 <osDelay>
  {
 800196c:	e78f      	b.n	800188e <AccTemp_init+0x12>
 800196e:	bf00      	nop
 8001970:	2001d414 	.word	0x2001d414
 8001974:	2001d420 	.word	0x2001d420
 8001978:	200192ec 	.word	0x200192ec
 800197c:	200192f0 	.word	0x200192f0
 8001980:	45000000 	.word	0x45000000
 8001984:	3fe00000 	.word	0x3fe00000
 8001988:	40590000 	.word	0x40590000
 800198c:	40490000 	.word	0x40490000
 8001990:	200192e4 	.word	0x200192e4
 8001994:	2001d468 	.word	0x2001d468

08001998 <ButtonTask_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonTask_init */
void ButtonTask_init(void const * argument)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	osEvent evt;
  /* Infinite loop */
  for(;;)
  {

	  evt = osMessageGet(keyPressedQHandle, 20);
 80019a0:	4b73      	ldr	r3, [pc, #460]	; (8001b70 <ButtonTask_init+0x1d8>)
 80019a2:	6819      	ldr	r1, [r3, #0]
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	2214      	movs	r2, #20
 80019aa:	4618      	mov	r0, r3
 80019ac:	f004 fa5e 	bl	8005e6c <osMessageGet>
	  uint32_t btnPressed;
	  btnPressed = (uint32_t)evt.value.p;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	617b      	str	r3, [r7, #20]
	  switch(btnPressed)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f640 0211 	movw	r2, #2065	; 0x811
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d830      	bhi.n	8001a20 <ButtonTask_init+0x88>
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019c4:	f240 80c8 	bls.w	8001b58 <ButtonTask_init+0x1c0>
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 80019ce:	2b10      	cmp	r3, #16
 80019d0:	f200 80c2 	bhi.w	8001b58 <ButtonTask_init+0x1c0>
 80019d4:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <ButtonTask_init+0x44>)
 80019d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019da:	bf00      	nop
 80019dc:	08001a2f 	.word	0x08001a2f
 80019e0:	08001aad 	.word	0x08001aad
 80019e4:	08001afb 	.word	0x08001afb
 80019e8:	08001b59 	.word	0x08001b59
 80019ec:	08001b59 	.word	0x08001b59
 80019f0:	08001ac7 	.word	0x08001ac7
 80019f4:	08001b59 	.word	0x08001b59
 80019f8:	08001b59 	.word	0x08001b59
 80019fc:	08001b59 	.word	0x08001b59
 8001a00:	08001b59 	.word	0x08001b59
 8001a04:	08001b59 	.word	0x08001b59
 8001a08:	08001b59 	.word	0x08001b59
 8001a0c:	08001b59 	.word	0x08001b59
 8001a10:	08001b59 	.word	0x08001b59
 8001a14:	08001b59 	.word	0x08001b59
 8001a18:	08001ab3 	.word	0x08001ab3
 8001a1c:	08001a35 	.word	0x08001a35
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f640 0243 	movw	r2, #2115	; 0x843
 8001a26:	4293      	cmp	r3, r2
 8001a28:	f000 8081 	beq.w	8001b2e <ButtonTask_init+0x196>
 8001a2c:	e094      	b.n	8001b58 <ButtonTask_init+0x1c0>
	  		{
				case ID_BTN_TEMP:
					createMenuTemp();
 8001a2e:	f7ff fdcf 	bl	80015d0 <createMenuTemp>

				break;
 8001a32:	e091      	b.n	8001b58 <ButtonTask_init+0x1c0>
	  			case ID_BTN_TEMP_GRAPH:

	  				WM_DeleteWindow(hWin);
 8001a34:	4b4f      	ldr	r3, [pc, #316]	; (8001b74 <ButtonTask_init+0x1dc>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f00b fe1f 	bl	800d67c <WM_DeleteWindow>
					state=ID_BTN_TEMP_GRAPH;
 8001a3e:	4b4e      	ldr	r3, [pc, #312]	; (8001b78 <ButtonTask_init+0x1e0>)
 8001a40:	f640 0211 	movw	r2, #2065	; 0x811
 8001a44:	601a      	str	r2, [r3, #0]
					hWin=CreateTempGraph();
 8001a46:	f000 fc65 	bl	8002314 <CreateTempGraph>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a49      	ldr	r2, [pc, #292]	; (8001b74 <ButtonTask_init+0x1dc>)
 8001a4e:	6013      	str	r3, [r2, #0]
					hData=GRAPH_DATA_YT_Create(GUI_BLUE, 700, 0,0);
 8001a50:	2300      	movs	r3, #0
 8001a52:	2200      	movs	r2, #0
 8001a54:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8001a58:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8001a5c:	f009 fc6c 	bl	800b338 <GRAPH_DATA_YT_Create>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4a46      	ldr	r2, [pc, #280]	; (8001b7c <ButtonTask_init+0x1e4>)
 8001a64:	6013      	str	r3, [r2, #0]

					GRAPH_AttachData(WM_GetDialogItem(hWin, (ID_GRAPH_0)), hData);
 8001a66:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <ButtonTask_init+0x1dc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f640 0141 	movw	r1, #2113	; 0x841
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f00a ffce 	bl	800ca10 <WM_GetDialogItem>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <ButtonTask_init+0x1e4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	f00a f859 	bl	800bb34 <GRAPH_AttachData>

					CHECKBOX_SetTextColor (WM_GetDialogItem(hWin, (ID_GRAPH_0)), GUI_RED);
 8001a82:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <ButtonTask_init+0x1dc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f640 0141 	movw	r1, #2113	; 0x841
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00a ffc0 	bl	800ca10 <WM_GetDialogItem>
 8001a90:	4603      	mov	r3, r0
 8001a92:	21ff      	movs	r1, #255	; 0xff
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00a f944 	bl	800bd22 <CHECKBOX_SetTextColor>
					vTaskResume(acctempTaskHandle);
 8001a9a:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <ButtonTask_init+0x1e8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f005 fa86 	bl	8006fb0 <vTaskResume>
					GUI_Delay(100);
 8001aa4:	2064      	movs	r0, #100	; 0x64
 8001aa6:	f00f fdfd 	bl	80116a4 <GUI_Delay>

	  			break;
 8001aaa:	e055      	b.n	8001b58 <ButtonTask_init+0x1c0>
	  			case ID_BTN_ACC:
	  				createMenuAccel();
 8001aac:	f7ff fe18 	bl	80016e0 <createMenuAccel>
	  			break;
 8001ab0:	e052      	b.n	8001b58 <ButtonTask_init+0x1c0>
	  			case ID_BTN_AUTO:
	  				createMenuAccel();
 8001ab2:	f7ff fe15 	bl	80016e0 <createMenuAccel>
	  				osTimerStart(periodicTimerHandle, PERIOD_TAJMER);
 8001ab6:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <ButtonTask_init+0x1ec>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f241 3188 	movw	r1, #5000	; 0x1388
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 f902 	bl	8005cc8 <osTimerStart>
	  			break;
 8001ac4:	e048      	b.n	8001b58 <ButtonTask_init+0x1c0>
	  			case ID_BTN_NAZAD:
	  				GUI_Clear();
 8001ac6:	f011 fadd 	bl	8013084 <GUI_Clear>
	  				WM_DeleteWindow(hWin);
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <ButtonTask_init+0x1dc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f00b fdd4 	bl	800d67c <WM_DeleteWindow>
	  				hWin = CreateMenu();
 8001ad4:	f000 fae4 	bl	80020a0 <CreateMenu>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <ButtonTask_init+0x1dc>)
 8001adc:	6013      	str	r3, [r2, #0]
	  				vTaskSuspend(acctempTaskHandle);
 8001ade:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <ButtonTask_init+0x1e8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f005 f99c 	bl	8006e20 <vTaskSuspend>
	  				state = 0;
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <ButtonTask_init+0x1e0>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

	  				osTimerStop(periodicTimerHandle);
 8001aee:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <ButtonTask_init+0x1ec>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f004 f92c 	bl	8005d50 <osTimerStop>

	  			break;
 8001af8:	e02e      	b.n	8001b58 <ButtonTask_init+0x1c0>
	  			case ID_BTN_NAZAD_TEMP:
	  				GUI_Clear();
 8001afa:	f011 fac3 	bl	8013084 <GUI_Clear>
	  				WM_DeleteWindow(hWin);
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <ButtonTask_init+0x1dc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f00b fdba 	bl	800d67c <WM_DeleteWindow>
	  				hWin = CreateMenu();
 8001b08:	f000 faca 	bl	80020a0 <CreateMenu>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <ButtonTask_init+0x1dc>)
 8001b10:	6013      	str	r3, [r2, #0]
	  				vTaskSuspend(acctempTaskHandle);
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <ButtonTask_init+0x1e8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f005 f982 	bl	8006e20 <vTaskSuspend>
	  				state = 0;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <ButtonTask_init+0x1e0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]

	  				osTimerStop(periodicTimerHandle);
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <ButtonTask_init+0x1ec>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 f912 	bl	8005d50 <osTimerStop>

	  			break;
 8001b2c:	e014      	b.n	8001b58 <ButtonTask_init+0x1c0>
	  			case ID_BTN_NAZAD_GRAPH:
					GUI_Clear();
 8001b2e:	f011 faa9 	bl	8013084 <GUI_Clear>
					WM_DeleteWindow(hWin);
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <ButtonTask_init+0x1dc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f00b fda0 	bl	800d67c <WM_DeleteWindow>
					hWin = CreateMenu();
 8001b3c:	f000 fab0 	bl	80020a0 <CreateMenu>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a0c      	ldr	r2, [pc, #48]	; (8001b74 <ButtonTask_init+0x1dc>)
 8001b44:	6013      	str	r3, [r2, #0]
					vTaskSuspend(acctempTaskHandle);
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <ButtonTask_init+0x1e8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f005 f968 	bl	8006e20 <vTaskSuspend>
					state = 0;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <ButtonTask_init+0x1e0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]


				break;
 8001b56:	bf00      	nop

	  	  	}
		if (state == ID_BTN_ACC)
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <ButtonTask_init+0x1e0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f640 0202 	movw	r2, #2050	; 0x802
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d101      	bne.n	8001b68 <ButtonTask_init+0x1d0>
		{
			menuAccel();
 8001b64:	f7ff fdf2 	bl	800174c <menuAccel>
		}


    osDelay(10);
 8001b68:	200a      	movs	r0, #10
 8001b6a:	f004 f87d 	bl	8005c68 <osDelay>
  {
 8001b6e:	e717      	b.n	80019a0 <ButtonTask_init+0x8>
 8001b70:	2001d478 	.word	0x2001d478
 8001b74:	2001d3b8 	.word	0x2001d3b8
 8001b78:	200192e4 	.word	0x200192e4
 8001b7c:	2001d468 	.word	0x2001d468
 8001b80:	2001d41c 	.word	0x2001d41c
 8001b84:	2001d474 	.word	0x2001d474

08001b88 <TempRegTask_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TempRegTask_init */
void TempRegTask_init(void const * argument)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TempRegTask_init */
	uint8_t stanje=0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {

	  if(temp<=MIN_TEMP)
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <TempRegTask_init+0xc8>)
 8001b96:	edd3 7a00 	vldr	s15, [r3]
 8001b9a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba6:	d810      	bhi.n	8001bca <TempRegTask_init+0x42>
	  {
		  if(stanje==0){
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d14c      	bne.n	8001c48 <TempRegTask_init+0xc0>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15,1); //pali se crveno svetlo diode
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb4:	4827      	ldr	r0, [pc, #156]	; (8001c54 <TempRegTask_init+0xcc>)
 8001bb6:	f001 ff3b 	bl	8003a30 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2110      	movs	r1, #16
 8001bbe:	4826      	ldr	r0, [pc, #152]	; (8001c58 <TempRegTask_init+0xd0>)
 8001bc0:	f001 ff36 	bl	8003a30 <HAL_GPIO_WritePin>
			  stanje=1;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	e03e      	b.n	8001c48 <TempRegTask_init+0xc0>
		  }
	  }else if(temp>=MAX_TEMP)
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <TempRegTask_init+0xc8>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001c5c <TempRegTask_init+0xd4>
 8001bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	db10      	blt.n	8001c00 <TempRegTask_init+0x78>
	  {
		  if(stanje==0){
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d131      	bne.n	8001c48 <TempRegTask_init+0xc0>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15,0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bea:	481a      	ldr	r0, [pc, #104]	; (8001c54 <TempRegTask_init+0xcc>)
 8001bec:	f001 ff20 	bl	8003a30 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,1); //pali se plavo svetlo diode
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2110      	movs	r1, #16
 8001bf4:	4818      	ldr	r0, [pc, #96]	; (8001c58 <TempRegTask_init+0xd0>)
 8001bf6:	f001 ff1b 	bl	8003a30 <HAL_GPIO_WritePin>
			  stanje=1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	e023      	b.n	8001c48 <TempRegTask_init+0xc0>
		  }
	  }else if (temp>=MIN_TEMP && temp<=MAX_TEMP)
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <TempRegTask_init+0xc8>)
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c12:	db19      	blt.n	8001c48 <TempRegTask_init+0xc0>
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <TempRegTask_init+0xc8>)
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c5c <TempRegTask_init+0xd4>
 8001c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	d80f      	bhi.n	8001c48 <TempRegTask_init+0xc0>
	  {
		  if(stanje==1){
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d10c      	bne.n	8001c48 <TempRegTask_init+0xc0>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15,0); //gasi se dioda
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c34:	4807      	ldr	r0, [pc, #28]	; (8001c54 <TempRegTask_init+0xcc>)
 8001c36:	f001 fefb 	bl	8003a30 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2110      	movs	r1, #16
 8001c3e:	4806      	ldr	r0, [pc, #24]	; (8001c58 <TempRegTask_init+0xd0>)
 8001c40:	f001 fef6 	bl	8003a30 <HAL_GPIO_WritePin>
			  stanje=0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]
		  }
	  }


    osDelay(200);
 8001c48:	20c8      	movs	r0, #200	; 0xc8
 8001c4a:	f004 f80d 	bl	8005c68 <osDelay>
	  if(temp<=MIN_TEMP)
 8001c4e:	e7a1      	b.n	8001b94 <TempRegTask_init+0xc>
 8001c50:	200192f0 	.word	0x200192f0
 8001c54:	40021800 	.word	0x40021800
 8001c58:	40020400 	.word	0x40020400
 8001c5c:	41d40000 	.word	0x41d40000

08001c60 <PTCallback>:
  /* USER CODE END TempRegTask_init */
}

/* PTCallback function */
void PTCallback(void const * argument)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PTCallback */
	if(ekran==0)
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <PTCallback+0x38>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d105      	bne.n	8001c7c <PTCallback+0x1c>
	{
		createMenuTemp();
 8001c70:	f7ff fcae 	bl	80015d0 <createMenuTemp>
		ekran=1;
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <PTCallback+0x38>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
	{
		createMenuAccel();
		ekran=0;
	}
  /* USER CODE END PTCallback */
}
 8001c7a:	e008      	b.n	8001c8e <PTCallback+0x2e>
	}else if(ekran==1)
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <PTCallback+0x38>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d104      	bne.n	8001c8e <PTCallback+0x2e>
		createMenuAccel();
 8001c84:	f7ff fd2c 	bl	80016e0 <createMenuAccel>
		ekran=0;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <PTCallback+0x38>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200192f4 	.word	0x200192f4

08001c9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cae:	f000 ffff 	bl	8002cb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d104      	bne.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x2a>
     OS_TimeMS++;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001cc4:	6013      	str	r3, [r2, #0]
   }
  /* USER CODE END Callback 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40001000 	.word	0x40001000
 8001cd4:	2001d3b0 	.word	0x2001d3b0

08001cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cdc:	b672      	cpsid	i
}
 8001cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <Error_Handler+0x8>
	...

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a10      	ldr	r2, [pc, #64]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	210f      	movs	r1, #15
 8001d1e:	f06f 0001 	mvn.w	r0, #1
 8001d22:	f001 fcaf 	bl	8003684 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800

08001d34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a15      	ldr	r2, [pc, #84]	; (8001da8 <HAL_ADC_MspInit+0x74>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d124      	bne.n	8001da0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_ADC_MspInit+0x78>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a14      	ldr	r2, [pc, #80]	; (8001dac <HAL_ADC_MspInit+0x78>)
 8001d5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_ADC_MspInit+0x78>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_ADC_MspInit+0x78>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_ADC_MspInit+0x78>)
 8001d74:	f043 0320 	orr.w	r3, r3, #32
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_ADC_MspInit+0x78>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0320 	and.w	r3, r3, #32
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <HAL_ADC_MspInit+0x7c>)
 8001d9c:	f001 fc9c 	bl	80036d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001da0:	bf00      	nop
 8001da2:	3728      	adds	r7, #40	; 0x28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40012200 	.word	0x40012200
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40021400 	.word	0x40021400

08001db4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <HAL_I2C_MspInit+0x7c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d127      	bne.n	8001e26 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_I2C_MspInit+0x80>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <HAL_I2C_MspInit+0x80>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_I2C_MspInit+0x80>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dee:	23c0      	movs	r3, #192	; 0xc0
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df2:	2312      	movs	r3, #18
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dfe:	2304      	movs	r3, #4
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	480b      	ldr	r0, [pc, #44]	; (8001e38 <HAL_I2C_MspInit+0x84>)
 8001e0a:	f001 fc65 	bl	80036d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_I2C_MspInit+0x80>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <HAL_I2C_MspInit+0x80>)
 8001e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_I2C_MspInit+0x80>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40005400 	.word	0x40005400
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020400 	.word	0x40020400

08001e3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	; 0x30
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	2036      	movs	r0, #54	; 0x36
 8001e52:	f001 fc17 	bl	8003684 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e56:	2036      	movs	r0, #54	; 0x36
 8001e58:	f001 fc30 	bl	80036bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <HAL_InitTick+0xa0>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <HAL_InitTick+0xa0>)
 8001e62:	f043 0310 	orr.w	r3, r3, #16
 8001e66:	6413      	str	r3, [r2, #64]	; 0x40
 8001e68:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_InitTick+0xa0>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e74:	f107 0210 	add.w	r2, r7, #16
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f002 ff98 	bl	8004db4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e84:	f002 ff82 	bl	8004d8c <HAL_RCC_GetPCLK1Freq>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e90:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <HAL_InitTick+0xa4>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	0c9b      	lsrs	r3, r3, #18
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_InitTick+0xa8>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <HAL_InitTick+0xac>)
 8001ea0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_InitTick+0xa8>)
 8001ea4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ea8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <HAL_InitTick+0xa8>)
 8001eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_InitTick+0xa8>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_InitTick+0xa8>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ebc:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <HAL_InitTick+0xa8>)
 8001ebe:	f003 fb9b 	bl	80055f8 <HAL_TIM_Base_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d104      	bne.n	8001ed2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ec8:	4806      	ldr	r0, [pc, #24]	; (8001ee4 <HAL_InitTick+0xa8>)
 8001eca:	f003 fbf7 	bl	80056bc <HAL_TIM_Base_Start_IT>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	e000      	b.n	8001ed4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3730      	adds	r7, #48	; 0x30
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	431bde83 	.word	0x431bde83
 8001ee4:	2001d47c 	.word	0x2001d47c
 8001ee8:	40001000 	.word	0x40001000

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <TIM6_DAC_IRQHandler+0x10>)
 8001f1e:	f003 fc45 	bl	80057ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2001d47c 	.word	0x2001d47c

08001f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f34:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <_sbrk+0x5c>)
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <_sbrk+0x60>)
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <_sbrk+0x64>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <_sbrk+0x68>)
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d207      	bcs.n	8001f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f5c:	f018 fc00 	bl	801a760 <__errno>
 8001f60:	4603      	mov	r3, r0
 8001f62:	220c      	movs	r2, #12
 8001f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e009      	b.n	8001f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <_sbrk+0x64>)
 8001f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20050000 	.word	0x20050000
 8001f8c:	00000400 	.word	0x00000400
 8001f90:	200192f8 	.word	0x200192f8
 8001f94:	2001d6f0 	.word	0x2001d6f0

08001f98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <SystemInit+0x20>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <SystemInit+0x20>)
 8001fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  int NCode;
  int Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b26      	cmp	r3, #38	; 0x26
 8001fca:	d15f      	bne.n	800208c <_cbDialog+0xd0>
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f00a fcd7 	bl	800c984 <WM_GetId>
 8001fd6:	60f8      	str	r0, [r7, #12]
    NCode = pMsg->Data.v;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	d855      	bhi.n	8002094 <_cbDialog+0xd8>
 8001fe8:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <_cbDialog+0x34>)
 8001fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fee:	bf00      	nop
 8001ff0:	08002035 	.word	0x08002035
 8001ff4:	08002047 	.word	0x08002047
 8001ff8:	08002095 	.word	0x08002095
 8001ffc:	08002095 	.word	0x08002095
 8002000:	08002095 	.word	0x08002095
 8002004:	08002095 	.word	0x08002095
 8002008:	08002095 	.word	0x08002095
 800200c:	08002095 	.word	0x08002095
 8002010:	08002095 	.word	0x08002095
 8002014:	08002095 	.word	0x08002095
 8002018:	08002095 	.word	0x08002095
 800201c:	08002095 	.word	0x08002095
 8002020:	08002095 	.word	0x08002095
 8002024:	08002095 	.word	0x08002095
 8002028:	08002095 	.word	0x08002095
 800202c:	08002059 	.word	0x08002059
 8002030:	0800206b 	.word	0x0800206b
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d003      	beq.n	8002042 <_cbDialog+0x86>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d11d      	bne.n	800207c <_cbDialog+0xc0>
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
 8002040:	e000      	b.n	8002044 <_cbDialog+0x88>
        break;
 8002042:	bf00      	nop
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
 8002044:	e01a      	b.n	800207c <_cbDialog+0xc0>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d003      	beq.n	8002054 <_cbDialog+0x98>
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d116      	bne.n	8002080 <_cbDialog+0xc4>
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
 8002052:	e000      	b.n	8002056 <_cbDialog+0x9a>
        break;
 8002054:	bf00      	nop
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
 8002056:	e013      	b.n	8002080 <_cbDialog+0xc4>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d003      	beq.n	8002066 <_cbDialog+0xaa>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d10f      	bne.n	8002084 <_cbDialog+0xc8>
		 // USER END
		 break;
		case WM_NOTIFICATION_RELEASED:
		 // USER START (Optionally insert code for reacting on notification message)
		 // USER END
		 break;
 8002064:	e000      	b.n	8002068 <_cbDialog+0xac>
		 break;
 8002066:	bf00      	nop
		// USER START (Optionally insert additional code for further notification handling)
		// USER END
		}
		break;
 8002068:	e00c      	b.n	8002084 <_cbDialog+0xc8>
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d003      	beq.n	8002078 <_cbDialog+0xbc>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d108      	bne.n	8002088 <_cbDialog+0xcc>
				 // USER END
				 break;
				case WM_NOTIFICATION_RELEASED:
				 // USER START (Optionally insert code for reacting on notification message)
				 // USER END
				 break;
 8002076:	e000      	b.n	800207a <_cbDialog+0xbe>
				 break;
 8002078:	bf00      	nop
			// USER START (Optionally insert additional code for further notification handling)
			// USER END
			}
		break;
 800207a:	e005      	b.n	8002088 <_cbDialog+0xcc>
      break;
 800207c:	bf00      	nop
 800207e:	e009      	b.n	8002094 <_cbDialog+0xd8>
      break;
 8002080:	bf00      	nop
 8002082:	e007      	b.n	8002094 <_cbDialog+0xd8>
		break;
 8002084:	bf00      	nop
 8002086:	e005      	b.n	8002094 <_cbDialog+0xd8>
		break;
 8002088:	bf00      	nop
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
 800208a:	e003      	b.n	8002094 <_cbDialog+0xd8>

  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f00b fe3b 	bl	800dd08 <WM_DefaultProc>
    break;
 8002092:	e000      	b.n	8002096 <_cbDialog+0xda>
    break;
 8002094:	bf00      	nop
  }
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop

080020a0 <CreateMenu>:
/*********************************************************************
*
*       CreateMenu
*/
WM_HWIN CreateMenu(void);
WM_HWIN CreateMenu(void) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af02      	add	r7, sp, #8
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 80020a6:	f00a fcb7 	bl	800ca18 <WM_GetDesktopWindow>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2200      	movs	r2, #0
 80020ae:	9201      	str	r2, [sp, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	9200      	str	r2, [sp, #0]
 80020b4:	4a05      	ldr	r2, [pc, #20]	; (80020cc <CreateMenu+0x2c>)
 80020b6:	2105      	movs	r1, #5
 80020b8:	4805      	ldr	r0, [pc, #20]	; (80020d0 <CreateMenu+0x30>)
 80020ba:	f009 fde0 	bl	800bc7e <GUI_CreateDialogBox>
 80020be:	6078      	str	r0, [r7, #4]
  return hWin;
 80020c0:	687b      	ldr	r3, [r7, #4]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	08001fbd 	.word	0x08001fbd
 80020d0:	0801b46c 	.word	0x0801b46c

080020d4 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  int     NCode;
  int     Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b1d      	cmp	r3, #29
 80020e2:	d002      	beq.n	80020ea <_cbDialog+0x16>
 80020e4:	2b26      	cmp	r3, #38	; 0x26
 80020e6:	d027      	beq.n	8002138 <_cbDialog+0x64>
 80020e8:	e058      	b.n	800219c <_cbDialog+0xc8>
  case WM_INIT_DIALOG:
    //
    // Initialization of 'Listview'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_LISTACC);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f640 0105 	movw	r1, #2053	; 0x805
 80020f2:	4618      	mov	r0, r3
 80020f4:	f00a fc8c 	bl	800ca10 <WM_GetDialogItem>
 80020f8:	60f8      	str	r0, [r7, #12]
    LISTVIEW_AddColumn(hItem, 150, "X", GUI_TA_HCENTER | GUI_TA_VCENTER);
 80020fa:	230e      	movs	r3, #14
 80020fc:	4a2b      	ldr	r2, [pc, #172]	; (80021ac <_cbDialog+0xd8>)
 80020fe:	2196      	movs	r1, #150	; 0x96
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f008 f93f 	bl	800a384 <LISTVIEW_AddColumn>
    LISTVIEW_AddColumn(hItem, 150, "Y", GUI_TA_HCENTER | GUI_TA_VCENTER);
 8002106:	230e      	movs	r3, #14
 8002108:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <_cbDialog+0xdc>)
 800210a:	2196      	movs	r1, #150	; 0x96
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f008 f939 	bl	800a384 <LISTVIEW_AddColumn>
    LISTVIEW_AddColumn(hItem, 150, "Z", GUI_TA_HCENTER | GUI_TA_VCENTER);
 8002112:	230e      	movs	r3, #14
 8002114:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <_cbDialog+0xe0>)
 8002116:	2196      	movs	r1, #150	; 0x96
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f008 f933 	bl	800a384 <LISTVIEW_AddColumn>
    LISTVIEW_AddRow(hItem, NULL);
 800211e:	2100      	movs	r1, #0
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f008 f981 	bl	800a428 <LISTVIEW_AddRow>
    LISTVIEW_SetGridVis(hItem, 1);
 8002126:	2101      	movs	r1, #1
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f007 f836 	bl	800919a <LISTVIEW_SetGridVis>
    LISTVIEW_SetFont(hItem, GUI_FONT_20_1);
 800212e:	4922      	ldr	r1, [pc, #136]	; (80021b8 <_cbDialog+0xe4>)
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f007 f84d 	bl	80091d0 <LISTVIEW_SetFont>
    // USER START (Optionally insert additional code for further widget initialization)
    // USER END
    break;
 8002136:	e035      	b.n	80021a4 <_cbDialog+0xd0>
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	4618      	mov	r0, r3
 800213e:	f00a fc21 	bl	800c984 <WM_GetId>
 8002142:	6178      	str	r0, [r7, #20]
    NCode = pMsg->Data.v;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f640 0205 	movw	r2, #2053	; 0x805
 8002150:	4293      	cmp	r3, r2
 8002152:	d005      	beq.n	8002160 <_cbDialog+0x8c>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f640 0206 	movw	r2, #2054	; 0x806
 800215a:	4293      	cmp	r3, r2
 800215c:	d011      	beq.n	8002182 <_cbDialog+0xae>
      }
      break;
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
 800215e:	e021      	b.n	80021a4 <_cbDialog+0xd0>
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b04      	cmp	r3, #4
 8002164:	d009      	beq.n	800217a <_cbDialog+0xa6>
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b04      	cmp	r3, #4
 800216a:	dc13      	bgt.n	8002194 <_cbDialog+0xc0>
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d005      	beq.n	800217e <_cbDialog+0xaa>
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d10d      	bne.n	8002194 <_cbDialog+0xc0>
        break;
 8002178:	e002      	b.n	8002180 <_cbDialog+0xac>
        break;
 800217a:	bf00      	nop
 800217c:	e00a      	b.n	8002194 <_cbDialog+0xc0>
        break;
 800217e:	bf00      	nop
      break;
 8002180:	e008      	b.n	8002194 <_cbDialog+0xc0>
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d003      	beq.n	8002190 <_cbDialog+0xbc>
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d104      	bne.n	8002198 <_cbDialog+0xc4>
        break;
 800218e:	e000      	b.n	8002192 <_cbDialog+0xbe>
        break;
 8002190:	bf00      	nop
      break;
 8002192:	e001      	b.n	8002198 <_cbDialog+0xc4>
      break;
 8002194:	bf00      	nop
 8002196:	e005      	b.n	80021a4 <_cbDialog+0xd0>
      break;
 8002198:	bf00      	nop
    break;
 800219a:	e003      	b.n	80021a4 <_cbDialog+0xd0>
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f00b fdb3 	bl	800dd08 <WM_DefaultProc>
    break;
 80021a2:	bf00      	nop
  }
}
 80021a4:	bf00      	nop
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	0801b374 	.word	0x0801b374
 80021b0:	0801b378 	.word	0x0801b378
 80021b4:	0801b37c 	.word	0x0801b37c
 80021b8:	0801f580 	.word	0x0801f580

080021bc <CreateAccWin>:
/*********************************************************************
*
*       CreateaccWin
*/
WM_HWIN CreateAccWin(void);
WM_HWIN CreateAccWin(void) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af02      	add	r7, sp, #8
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 80021c2:	f00a fc29 	bl	800ca18 <WM_GetDesktopWindow>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2200      	movs	r2, #0
 80021ca:	9201      	str	r2, [sp, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	9200      	str	r2, [sp, #0]
 80021d0:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <CreateAccWin+0x2c>)
 80021d2:	2104      	movs	r1, #4
 80021d4:	4805      	ldr	r0, [pc, #20]	; (80021ec <CreateAccWin+0x30>)
 80021d6:	f009 fd52 	bl	800bc7e <GUI_CreateDialogBox>
 80021da:	6078      	str	r0, [r7, #4]
  return hWin;
 80021dc:	687b      	ldr	r3, [r7, #4]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	080020d5 	.word	0x080020d5
 80021ec:	0801b4f8 	.word	0x0801b4f8

080021f0 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GRAPH_SCALE_Handle hScaleV;

  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b1d      	cmp	r3, #29
 80021fe:	d002      	beq.n	8002206 <_cbDialog+0x16>
 8002200:	2b26      	cmp	r3, #38	; 0x26
 8002202:	d05b      	beq.n	80022bc <_cbDialog+0xcc>
 8002204:	e072      	b.n	80022ec <_cbDialog+0xfc>
  case WM_INIT_DIALOG:
    //
    // Initialization of 'Graph'
    //
	WINDOW_SetBkColor(pMsg->hWin, GUI_DARKGRAY);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	493d      	ldr	r1, [pc, #244]	; (8002300 <_cbDialog+0x110>)
 800220c:	4618      	mov	r0, r3
 800220e:	f006 fc87 	bl	8008b20 <WINDOW_SetBkColor>

    hItem = WM_GetDialogItem(pMsg->hWin, ID_GRAPH_0);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f640 0141 	movw	r1, #2113	; 0x841
 800221a:	4618      	mov	r0, r3
 800221c:	f00a fbf8 	bl	800ca10 <WM_GetDialogItem>
 8002220:	60f8      	str	r0, [r7, #12]
//    GRAPH_SetBorder(hItem, 30, 10, 10, 30);

   GRAPH_SetColor (hItem, GUI_WHITE,     GRAPH_CI_BK);
 8002222:	2200      	movs	r2, #0
 8002224:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f009 fcc7 	bl	800bbbc <GRAPH_SetColor>

    //
    // Adjust grid
    //
    GRAPH_SetGridVis  (hItem, 1);
 800222e:	2101      	movs	r1, #1
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f009 fce0 	bl	800bbf6 <GRAPH_SetGridVis>
    GRAPH_SetGridDistX(hItem, GRID_DIST_X);
 8002236:	2164      	movs	r1, #100	; 0x64
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f009 fcf4 	bl	800bc26 <GRAPH_SetGridDistX>
    GRAPH_SetGridDistY(hItem, GRID_DIST_Y);
 800223e:	2119      	movs	r1, #25
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f009 fd06 	bl	800bc52 <GRAPH_SetGridDistY>


    hScaleV = GRAPH_SCALE_Create(30>>1, GUI_TA_HCENTER, GRAPH_SCALE_CF_VERTICAL,   TICK_DIST_V);
 8002246:	2319      	movs	r3, #25
 8002248:	2201      	movs	r2, #1
 800224a:	2102      	movs	r1, #2
 800224c:	200f      	movs	r0, #15
 800224e:	f008 ff2b 	bl	800b0a8 <GRAPH_SCALE_Create>
 8002252:	60b8      	str	r0, [r7, #8]
    GRAPH_SCALE_SetTextColor(hScaleV, GUI_ORANGE);
 8002254:	f24a 51ff 	movw	r1, #42495	; 0xa5ff
 8002258:	68b8      	ldr	r0, [r7, #8]
 800225a:	f008 ff67 	bl	800b12c <GRAPH_SCALE_SetTextColor>


	GRAPH_SCALE_SetNumDecs(hScaleV,2);
 800225e:	2102      	movs	r1, #2
 8002260:	68b8      	ldr	r0, [r7, #8]
 8002262:	f008 ff9d 	bl	800b1a0 <GRAPH_SCALE_SetNumDecs>
	GRAPH_SCALE_SetFactor(hScaleV,0.02);
 8002266:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8002304 <_cbDialog+0x114>
 800226a:	68b8      	ldr	r0, [r7, #8]
 800226c:	f008 ff72 	bl	800b154 <GRAPH_SCALE_SetFactor>
	GRAPH_SCALE_SetOff(hScaleV,-1100);
 8002270:	4925      	ldr	r1, [pc, #148]	; (8002308 <_cbDialog+0x118>)
 8002272:	68b8      	ldr	r0, [r7, #8]
 8002274:	f008 ff46 	bl	800b104 <GRAPH_SCALE_SetOff>

	GRAPH_AttachScale(hItem, hScaleV);
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f009 fc7c 	bl	800bb78 <GRAPH_AttachScale>

     //Show some graphs

    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f640 0142 	movw	r1, #2114	; 0x842
 8002288:	4618      	mov	r0, r3
 800228a:	f00a fbc1 	bl	800ca10 <WM_GetDialogItem>
 800228e:	60f8      	str	r0, [r7, #12]
    TEXT_SetFont(hItem, GUI_FONT_32B_1);
 8002290:	491e      	ldr	r1, [pc, #120]	; (800230c <_cbDialog+0x11c>)
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f006 fe55 	bl	8008f42 <TEXT_SetFont>
    TEXT_SetTextColor(hItem, GUI_ORANGE);
 8002298:	f24a 51ff 	movw	r1, #42495	; 0xa5ff
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f006 fe3d 	bl	8008f1c <TEXT_SetTextColor>

    hItem = WM_GetDialogItem(pMsg->hWin, ID_CHECKBOX_0);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f640 0144 	movw	r1, #2116	; 0x844
 80022aa:	4618      	mov	r0, r3
 80022ac:	f00a fbb0 	bl	800ca10 <WM_GetDialogItem>
 80022b0:	60f8      	str	r0, [r7, #12]
    CHECKBOX_SetText(hItem, "Log");
 80022b2:	4917      	ldr	r1, [pc, #92]	; (8002310 <_cbDialog+0x120>)
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f009 fd47 	bl	800bd48 <CHECKBOX_SetText>
    // USER START (Optionally insert additional code for further widget initialization)
    // USER END
    break;
 80022ba:	e01c      	b.n	80022f6 <_cbDialog+0x106>
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f00a fb5f 	bl	800c984 <WM_GetId>
 80022c6:	6178      	str	r0, [r7, #20]
    NCode = pMsg->Data.v;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f640 0243 	movw	r2, #2115	; 0x843
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d10d      	bne.n	80022f4 <_cbDialog+0x104>
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d003      	beq.n	80022e6 <_cbDialog+0xf6>
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d101      	bne.n	80022e8 <_cbDialog+0xf8>
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
 80022e4:	e000      	b.n	80022e8 <_cbDialog+0xf8>
        break;
 80022e6:	bf00      	nop
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
 80022e8:	bf00      	nop
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
 80022ea:	e003      	b.n	80022f4 <_cbDialog+0x104>
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f00b fd0b 	bl	800dd08 <WM_DefaultProc>
    break;
 80022f2:	e000      	b.n	80022f6 <_cbDialog+0x106>
    break;
 80022f4:	bf00      	nop
  }
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	00404040 	.word	0x00404040
 8002304:	3ca3d70a 	.word	0x3ca3d70a
 8002308:	fffffbb4 	.word	0xfffffbb4
 800230c:	0801c9b8 	.word	0x0801c9b8
 8002310:	0801b3b0 	.word	0x0801b3b0

08002314 <CreateTempGraph>:
/*********************************************************************
*
*       CreateACCEL
*/
WM_HWIN CreateTempGraph(void);
WM_HWIN CreateTempGraph(void) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af02      	add	r7, sp, #8
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 800231a:	f00a fb7d 	bl	800ca18 <WM_GetDesktopWindow>
 800231e:	4603      	mov	r3, r0
 8002320:	2200      	movs	r2, #0
 8002322:	9201      	str	r2, [sp, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	9200      	str	r2, [sp, #0]
 8002328:	4a05      	ldr	r2, [pc, #20]	; (8002340 <CreateTempGraph+0x2c>)
 800232a:	2104      	movs	r1, #4
 800232c:	4805      	ldr	r0, [pc, #20]	; (8002344 <CreateTempGraph+0x30>)
 800232e:	f009 fca6 	bl	800bc7e <GUI_CreateDialogBox>
 8002332:	6078      	str	r0, [r7, #4]
  return hWin;
 8002334:	687b      	ldr	r3, [r7, #4]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	080021f1 	.word	0x080021f1
 8002344:	0801b568 	.word	0x0801b568

08002348 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  int     NCode;
  int     Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b1d      	cmp	r3, #29
 8002356:	d002      	beq.n	800235e <_cbDialog+0x16>
 8002358:	2b26      	cmp	r3, #38	; 0x26
 800235a:	d027      	beq.n	80023ac <_cbDialog+0x64>
 800235c:	e058      	b.n	8002410 <_cbDialog+0xc8>
  case WM_INIT_DIALOG:
    //
    // Initialization of 'LIST_TEMPERATURA'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_LISTTEMP);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f640 0104 	movw	r1, #2052	; 0x804
 8002366:	4618      	mov	r0, r3
 8002368:	f00a fb52 	bl	800ca10 <WM_GetDialogItem>
 800236c:	60f8      	str	r0, [r7, #12]
    LISTVIEW_AddColumn(hItem, 150, "Temperatura", GUI_TA_HCENTER | GUI_TA_VCENTER);
 800236e:	230e      	movs	r3, #14
 8002370:	4a2b      	ldr	r2, [pc, #172]	; (8002420 <_cbDialog+0xd8>)
 8002372:	2196      	movs	r1, #150	; 0x96
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f008 f805 	bl	800a384 <LISTVIEW_AddColumn>
    LISTVIEW_AddColumn(hItem, 30, "Col 1", GUI_TA_HCENTER | GUI_TA_VCENTER);
 800237a:	230e      	movs	r3, #14
 800237c:	4a29      	ldr	r2, [pc, #164]	; (8002424 <_cbDialog+0xdc>)
 800237e:	211e      	movs	r1, #30
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f007 ffff 	bl	800a384 <LISTVIEW_AddColumn>
    LISTVIEW_AddColumn(hItem, 30, "Col 2", GUI_TA_HCENTER | GUI_TA_VCENTER);
 8002386:	230e      	movs	r3, #14
 8002388:	4a27      	ldr	r2, [pc, #156]	; (8002428 <_cbDialog+0xe0>)
 800238a:	211e      	movs	r1, #30
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f007 fff9 	bl	800a384 <LISTVIEW_AddColumn>
    LISTVIEW_AddRow(hItem, NULL);
 8002392:	2100      	movs	r1, #0
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f008 f847 	bl	800a428 <LISTVIEW_AddRow>
    LISTVIEW_SetGridVis(hItem, 0);
 800239a:	2100      	movs	r1, #0
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f006 fefc 	bl	800919a <LISTVIEW_SetGridVis>
    LISTVIEW_SetFont(hItem, GUI_FONT_24_1);
 80023a2:	4922      	ldr	r1, [pc, #136]	; (800242c <_cbDialog+0xe4>)
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f006 ff13 	bl	80091d0 <LISTVIEW_SetFont>
    // USER START (Optionally insert additional code for further widget initialization)
    // USER END
    break;
 80023aa:	e035      	b.n	8002418 <_cbDialog+0xd0>
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f00a fae7 	bl	800c984 <WM_GetId>
 80023b6:	6178      	str	r0, [r7, #20]
    NCode = pMsg->Data.v;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f640 0203 	movw	r2, #2051	; 0x803
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d005      	beq.n	80023d4 <_cbDialog+0x8c>
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f640 0204 	movw	r2, #2052	; 0x804
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d009      	beq.n	80023e6 <_cbDialog+0x9e>
      }
      break;
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
 80023d2:	e021      	b.n	8002418 <_cbDialog+0xd0>
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d003      	beq.n	80023e2 <_cbDialog+0x9a>
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d113      	bne.n	8002408 <_cbDialog+0xc0>
        break;
 80023e0:	e000      	b.n	80023e4 <_cbDialog+0x9c>
        break;
 80023e2:	bf00      	nop
      break;
 80023e4:	e010      	b.n	8002408 <_cbDialog+0xc0>
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d009      	beq.n	8002400 <_cbDialog+0xb8>
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	dc0c      	bgt.n	800240c <_cbDialog+0xc4>
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d005      	beq.n	8002404 <_cbDialog+0xbc>
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d106      	bne.n	800240c <_cbDialog+0xc4>
        break;
 80023fe:	e002      	b.n	8002406 <_cbDialog+0xbe>
        break;
 8002400:	bf00      	nop
 8002402:	e003      	b.n	800240c <_cbDialog+0xc4>
        break;
 8002404:	bf00      	nop
      break;
 8002406:	e001      	b.n	800240c <_cbDialog+0xc4>
      break;
 8002408:	bf00      	nop
 800240a:	e005      	b.n	8002418 <_cbDialog+0xd0>
      break;
 800240c:	bf00      	nop
    break;
 800240e:	e003      	b.n	8002418 <_cbDialog+0xd0>
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f00b fc79 	bl	800dd08 <WM_DefaultProc>
    break;
 8002416:	bf00      	nop
  }
}
 8002418:	bf00      	nop
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	0801b3d4 	.word	0x0801b3d4
 8002424:	0801b3e0 	.word	0x0801b3e0
 8002428:	0801b3e8 	.word	0x0801b3e8
 800242c:	0801ef8c 	.word	0x0801ef8c

08002430 <CreateTempWin>:
/*********************************************************************
*
*       CreateWindow
*/
WM_HWIN CreateTempWin(void);
WM_HWIN CreateTempWin(void) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af02      	add	r7, sp, #8
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 8002436:	f00a faef 	bl	800ca18 <WM_GetDesktopWindow>
 800243a:	4603      	mov	r3, r0
 800243c:	2200      	movs	r2, #0
 800243e:	9201      	str	r2, [sp, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	9200      	str	r2, [sp, #0]
 8002444:	4a05      	ldr	r2, [pc, #20]	; (800245c <CreateTempWin+0x2c>)
 8002446:	2103      	movs	r1, #3
 8002448:	4805      	ldr	r0, [pc, #20]	; (8002460 <CreateTempWin+0x30>)
 800244a:	f009 fc18 	bl	800bc7e <GUI_CreateDialogBox>
 800244e:	6078      	str	r0, [r7, #4]
  return hWin;
 8002450:	687b      	ldr	r3, [r7, #4]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	08002349 	.word	0x08002349
 8002460:	0801b5d8 	.word	0x0801b5d8

08002464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002464:	f8df d034 	ldr.w	sp, [pc, #52]	; 800249c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002468:	480d      	ldr	r0, [pc, #52]	; (80024a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800246a:	490e      	ldr	r1, [pc, #56]	; (80024a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800246c:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002470:	e002      	b.n	8002478 <LoopCopyDataInit>

08002472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002476:	3304      	adds	r3, #4

08002478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800247c:	d3f9      	bcc.n	8002472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247e:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002480:	4c0b      	ldr	r4, [pc, #44]	; (80024b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002484:	e001      	b.n	800248a <LoopFillZerobss>

08002486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002488:	3204      	adds	r2, #4

0800248a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800248c:	d3fb      	bcc.n	8002486 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800248e:	f7ff fd83 	bl	8001f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002492:	f018 f96b 	bl	801a76c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002496:	f7fe fe51 	bl	800113c <main>
  bx  lr    
 800249a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800249c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80024a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a4:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 80024a8:	080258f0 	.word	0x080258f0
  ldr r2, =_sbss
 80024ac:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 80024b0:	2001d6f0 	.word	0x2001d6f0

080024b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b4:	e7fe      	b.n	80024b4 <ADC_IRQHandler>
	...

080024b8 <Init_ACCEL_GPIO>:
unsigned char id=0;

I2C_HandleTypeDef hi2c;

void Init_ACCEL_GPIO(I2C_HandleTypeDef i2c_handle)
{
 80024b8:	b084      	sub	sp, #16
 80024ba:	b580      	push	{r7, lr}
 80024bc:	af00      	add	r7, sp, #0
 80024be:	f107 0c08 	add.w	ip, r7, #8
 80024c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=i2c_handle;
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <Init_ACCEL_GPIO+0x2c>)
 80024c8:	4618      	mov	r0, r3
 80024ca:	f107 0308 	add.w	r3, r7, #8
 80024ce:	224c      	movs	r2, #76	; 0x4c
 80024d0:	4619      	mov	r1, r3
 80024d2:	f018 f97d 	bl	801a7d0 <memcpy>
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024de:	b004      	add	sp, #16
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	2001d4c8 	.word	0x2001d4c8

080024e8 <ADXL345_Write>:



void ADXL345_Write(uint8_t reg, uint8_t val)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	4603      	mov	r3, r0
 80024f0:	460a      	mov	r2, r1
 80024f2:	71fb      	strb	r3, [r7, #7]
 80024f4:	4613      	mov	r3, r2
 80024f6:	71bb      	strb	r3, [r7, #6]
	uint8_t	txbuf[2];

	txbuf[0]=reg;
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	733b      	strb	r3, [r7, #12]
	txbuf[1]=val;
 80024fc:	79bb      	ldrb	r3, [r7, #6]
 80024fe:	737b      	strb	r3, [r7, #13]

	while(HAL_I2C_Master_Transmit(&hi2c, ADXL345_ADDR, (uint8_t *)txbuf, 2, ADXL345_TIMEOUT)!= HAL_OK);
 8002500:	bf00      	nop
 8002502:	f107 020c 	add.w	r2, r7, #12
 8002506:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2302      	movs	r3, #2
 800250e:	21a6      	movs	r1, #166	; 0xa6
 8002510:	4805      	ldr	r0, [pc, #20]	; (8002528 <ADXL345_Write+0x40>)
 8002512:	f001 fb37 	bl	8003b84 <HAL_I2C_Master_Transmit>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f2      	bne.n	8002502 <ADXL345_Write+0x1a>
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	2001d4c8 	.word	0x2001d4c8

0800252c <ADXL345_ReadByte>:


uint8_t ADXL345_ReadByte(uint8_t reg)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af02      	add	r7, sp, #8
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	uint8_t rxbuf[1];
	rxbuf[0] = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	733b      	strb	r3, [r7, #12]

	while(HAL_I2C_Master_Transmit(&hi2c, ADXL345_ADDR, &reg, 1, ADXL345_TIMEOUT)!= HAL_OK);
 800253a:	bf00      	nop
 800253c:	1dfa      	adds	r2, r7, #7
 800253e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2301      	movs	r3, #1
 8002546:	21a6      	movs	r1, #166	; 0xa6
 8002548:	480c      	ldr	r0, [pc, #48]	; (800257c <ADXL345_ReadByte+0x50>)
 800254a:	f001 fb1b 	bl	8003b84 <HAL_I2C_Master_Transmit>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f3      	bne.n	800253c <ADXL345_ReadByte+0x10>
	while(HAL_I2C_Master_Receive(&hi2c, ADXL345_ADDR, (uint8_t *)rxbuf, 1, ADXL345_TIMEOUT) != HAL_OK);
 8002554:	bf00      	nop
 8002556:	f107 020c 	add.w	r2, r7, #12
 800255a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2301      	movs	r3, #1
 8002562:	21a6      	movs	r1, #166	; 0xa6
 8002564:	4805      	ldr	r0, [pc, #20]	; (800257c <ADXL345_ReadByte+0x50>)
 8002566:	f001 fc01 	bl	8003d6c <HAL_I2C_Master_Receive>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f2      	bne.n	8002556 <ADXL345_ReadByte+0x2a>

	return rxbuf[0];
 8002570:	7b3b      	ldrb	r3, [r7, #12]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	2001d4c8 	.word	0x2001d4c8

08002580 <ADXL345_read_xyz>:



void ADXL345_read_xyz(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af02      	add	r7, sp, #8
	uint8_t rx[6];
	uint8_t address;

	address=ADXL345_DATAX0;
 8002586:	2332      	movs	r3, #50	; 0x32
 8002588:	71fb      	strb	r3, [r7, #7]
	
	while(HAL_I2C_Master_Transmit(&hi2c, ADXL345_ADDR, &address, 1, ADXL345_TIMEOUT)!= HAL_OK);
 800258a:	bf00      	nop
 800258c:	1dfa      	adds	r2, r7, #7
 800258e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2301      	movs	r3, #1
 8002596:	21a6      	movs	r1, #166	; 0xa6
 8002598:	481a      	ldr	r0, [pc, #104]	; (8002604 <ADXL345_read_xyz+0x84>)
 800259a:	f001 faf3 	bl	8003b84 <HAL_I2C_Master_Transmit>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f3      	bne.n	800258c <ADXL345_read_xyz+0xc>
	while(HAL_I2C_Master_Receive(&hi2c, ADXL345_ADDR, (uint8_t *)rx, 6, ADXL345_TIMEOUT) != HAL_OK);
 80025a4:	bf00      	nop
 80025a6:	f107 0208 	add.w	r2, r7, #8
 80025aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2306      	movs	r3, #6
 80025b2:	21a6      	movs	r1, #166	; 0xa6
 80025b4:	4813      	ldr	r0, [pc, #76]	; (8002604 <ADXL345_read_xyz+0x84>)
 80025b6:	f001 fbd9 	bl	8003d6c <HAL_I2C_Master_Receive>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f2      	bne.n	80025a6 <ADXL345_read_xyz+0x26>

	accel_x=(((uint16_t)rx[1]) << 8) | rx[0];
 80025c0:	7a7b      	ldrb	r3, [r7, #9]
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	b21a      	sxth	r2, r3
 80025c6:	7a3b      	ldrb	r3, [r7, #8]
 80025c8:	b21b      	sxth	r3, r3
 80025ca:	4313      	orrs	r3, r2
 80025cc:	b21b      	sxth	r3, r3
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <ADXL345_read_xyz+0x88>)
 80025d2:	801a      	strh	r2, [r3, #0]
	accel_y=(((uint16_t)rx[3]) << 8) | rx[2];
 80025d4:	7afb      	ldrb	r3, [r7, #11]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	b21a      	sxth	r2, r3
 80025da:	7abb      	ldrb	r3, [r7, #10]
 80025dc:	b21b      	sxth	r3, r3
 80025de:	4313      	orrs	r3, r2
 80025e0:	b21b      	sxth	r3, r3
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <ADXL345_read_xyz+0x8c>)
 80025e6:	801a      	strh	r2, [r3, #0]
	accel_z=(((uint16_t)rx[5]) << 8) | rx[4];
 80025e8:	7b7b      	ldrb	r3, [r7, #13]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	b21a      	sxth	r2, r3
 80025ee:	7b3b      	ldrb	r3, [r7, #12]
 80025f0:	b21b      	sxth	r3, r3
 80025f2:	4313      	orrs	r3, r2
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <ADXL345_read_xyz+0x90>)
 80025fa:	801a      	strh	r2, [r3, #0]

}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	2001d4c8 	.word	0x2001d4c8
 8002608:	200192fc 	.word	0x200192fc
 800260c:	200192fe 	.word	0x200192fe
 8002610:	20019300 	.word	0x20019300

08002614 <ADXL345_Init>:
{
	return accel_z;
}

void ADXL345_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0

  ADXL345_Write(ADXL345_POWER_CTL, 0x00);
 8002618:	2100      	movs	r1, #0
 800261a:	202d      	movs	r0, #45	; 0x2d
 800261c:	f7ff ff64 	bl	80024e8 <ADXL345_Write>
  id = ADXL345_ReadByte(0x00);
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff ff83 	bl	800252c <ADXL345_ReadByte>
 8002626:	4603      	mov	r3, r0
 8002628:	461a      	mov	r2, r3
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <ADXL345_Init+0x40>)
 800262c:	701a      	strb	r2, [r3, #0]

  ADXL345_Write(ADXL345_DATA_FORMAT, 0x08);       // Full resolution, +/-2g, 4mg/LSB, right justified
 800262e:	2108      	movs	r1, #8
 8002630:	2031      	movs	r0, #49	; 0x31
 8002632:	f7ff ff59 	bl	80024e8 <ADXL345_Write>
  ADXL345_Write(ADXL345_BW_RATE, 0x0A);           // Set 100 Hz data rate
 8002636:	210a      	movs	r1, #10
 8002638:	202c      	movs	r0, #44	; 0x2c
 800263a:	f7ff ff55 	bl	80024e8 <ADXL345_Write>
  ADXL345_Write(ADXL345_FIFO_CTL, 0x80);          // stream mode
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	2038      	movs	r0, #56	; 0x38
 8002642:	f7ff ff51 	bl	80024e8 <ADXL345_Write>
  ADXL345_Write(ADXL345_POWER_CTL, 0x08);         // POWER_CTL reg: measurement mode
 8002646:	2108      	movs	r1, #8
 8002648:	202d      	movs	r0, #45	; 0x2d
 800264a:	f7ff ff4d 	bl	80024e8 <ADXL345_Write>
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20019302 	.word	0x20019302

08002658 <Init_LCD_GPIO>:

//=============================================================================
// GPIO setup 
//=============================================================================
void Init_LCD_GPIO(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;

	  __HAL_RCC_CRC_CLK_ENABLE();
 800265e:	4b42      	ldr	r3, [pc, #264]	; (8002768 <Init_LCD_GPIO+0x110>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a41      	ldr	r2, [pc, #260]	; (8002768 <Init_LCD_GPIO+0x110>)
 8002664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b3f      	ldr	r3, [pc, #252]	; (8002768 <Init_LCD_GPIO+0x110>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002676:	4b3c      	ldr	r3, [pc, #240]	; (8002768 <Init_LCD_GPIO+0x110>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a3b      	ldr	r2, [pc, #236]	; (8002768 <Init_LCD_GPIO+0x110>)
 800267c:	f043 0310 	orr.w	r3, r3, #16
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b39      	ldr	r3, [pc, #228]	; (8002768 <Init_LCD_GPIO+0x110>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 800268e:	4b36      	ldr	r3, [pc, #216]	; (8002768 <Init_LCD_GPIO+0x110>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a35      	ldr	r2, [pc, #212]	; (8002768 <Init_LCD_GPIO+0x110>)
 8002694:	f043 0320 	orr.w	r3, r3, #32
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b33      	ldr	r3, [pc, #204]	; (8002768 <Init_LCD_GPIO+0x110>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026a6:	4b30      	ldr	r3, [pc, #192]	; (8002768 <Init_LCD_GPIO+0x110>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a2f      	ldr	r2, [pc, #188]	; (8002768 <Init_LCD_GPIO+0x110>)
 80026ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <Init_LCD_GPIO+0x110>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]


	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 80026be:	2200      	movs	r2, #0
 80026c0:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80026c4:	4829      	ldr	r0, [pc, #164]	; (800276c <Init_LCD_GPIO+0x114>)
 80026c6:	f001 f9b3 	bl	8003a30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
 80026ca:	2200      	movs	r2, #0
 80026cc:	21ff      	movs	r1, #255	; 0xff
 80026ce:	4828      	ldr	r0, [pc, #160]	; (8002770 <Init_LCD_GPIO+0x118>)
 80026d0:	f001 f9ae 	bl	8003a30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);
 80026d4:	2200      	movs	r2, #0
 80026d6:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80026da:	4826      	ldr	r0, [pc, #152]	; (8002774 <Init_LCD_GPIO+0x11c>)
 80026dc:	f001 f9a8 	bl	8003a30 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GCMD;
 80026e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026e4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e6:	2301      	movs	r3, #1
 80026e8:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ee:	2303      	movs	r3, #3
 80026f0:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GDISP_CMD_PORT, &GPIO_InitStruct);
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4619      	mov	r1, r3
 80026f8:	481c      	ldr	r0, [pc, #112]	; (800276c <Init_LCD_GPIO+0x114>)
 80026fa:	f000 ffed 	bl	80036d8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_LO;
 80026fe:	23ff      	movs	r3, #255	; 0xff
 8002700:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002702:	2301      	movs	r3, #1
 8002704:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270a:	2303      	movs	r3, #3
 800270c:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GDISP_DATA_LO_PORT, &GPIO_InitStruct);
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	4619      	mov	r1, r3
 8002714:	4816      	ldr	r0, [pc, #88]	; (8002770 <Init_LCD_GPIO+0x118>)
 8002716:	f000 ffdf 	bl	80036d8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_HI;
 800271a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800271e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002720:	2301      	movs	r3, #1
 8002722:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002728:	2303      	movs	r3, #3
 800272a:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GDISP_DATA_HI_PORT, &GPIO_InitStruct);
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4619      	mov	r1, r3
 8002732:	4810      	ldr	r0, [pc, #64]	; (8002774 <Init_LCD_GPIO+0x11c>)
 8002734:	f000 ffd0 	bl	80036d8 <HAL_GPIO_Init>

	  SET_CS; SET_WR; SET_RD; SET_DC; SET_RST;
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <Init_LCD_GPIO+0x114>)
 800273a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800273e:	619a      	str	r2, [r3, #24]
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <Init_LCD_GPIO+0x114>)
 8002742:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002746:	619a      	str	r2, [r3, #24]
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <Init_LCD_GPIO+0x114>)
 800274a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800274e:	619a      	str	r2, [r3, #24]
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <Init_LCD_GPIO+0x114>)
 8002752:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002756:	619a      	str	r2, [r3, #24]
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <Init_LCD_GPIO+0x114>)
 800275a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800275e:	619a      	str	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	3728      	adds	r7, #40	; 0x28
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	40021400 	.word	0x40021400
 8002770:	40021800 	.word	0x40021800
 8002774:	40021000 	.word	0x40021000

08002778 <SSD1963_WriteCommand>:
//=============================================================================
// Write command to display
//=============================================================================
void SSD1963_WriteCommand(uint16_t Data)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	80fb      	strh	r3, [r7, #6]
	uint16_t _Data=~Data;
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	43db      	mvns	r3, r3
 8002786:	81fb      	strh	r3, [r7, #14]

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8002788:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <SSD1963_WriteCommand+0x70>)
 800278a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800278e:	619a      	str	r2, [r3, #24]

	CLR_CS;
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <SSD1963_WriteCommand+0x74>)
 8002792:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002796:	619a      	str	r2, [r3, #24]
	CLR_DC;
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <SSD1963_WriteCommand+0x74>)
 800279a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800279e:	619a      	str	r2, [r3, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80027a0:	89fb      	ldrh	r3, [r7, #14]
 80027a2:	041b      	lsls	r3, r3, #16
 80027a4:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	4910      	ldr	r1, [pc, #64]	; (80027f0 <SSD1963_WriteCommand+0x78>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	618b      	str	r3, [r1, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <SSD1963_WriteCommand+0x70>)
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80027bc:	490a      	ldr	r1, [pc, #40]	; (80027e8 <SSD1963_WriteCommand+0x70>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	614b      	str	r3, [r1, #20]
	writeStrobe;
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <SSD1963_WriteCommand+0x74>)
 80027c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027c8:	619a      	str	r2, [r3, #24]
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <SSD1963_WriteCommand+0x74>)
 80027cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027d0:	619a      	str	r2, [r3, #24]
	SET_CS;
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <SSD1963_WriteCommand+0x74>)
 80027d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027d8:	619a      	str	r2, [r3, #24]
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40021400 	.word	0x40021400
 80027f0:	40021800 	.word	0x40021800

080027f4 <SSD1963_WriteData>:
//=============================================================================
// Write data to display
//=============================================================================

void SSD1963_WriteData(uint16_t Data)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	80fb      	strh	r3, [r7, #6]
	uint16_t _Data=~Data;
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	43db      	mvns	r3, r3
 8002802:	81fb      	strh	r3, [r7, #14]

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <SSD1963_WriteData+0x70>)
 8002806:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800280a:	619a      	str	r2, [r3, #24]

	CLR_CS;
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <SSD1963_WriteData+0x74>)
 800280e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002812:	619a      	str	r2, [r3, #24]
	SET_DC;
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <SSD1963_WriteData+0x74>)
 8002816:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800281a:	619a      	str	r2, [r3, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800281c:	89fb      	ldrh	r3, [r7, #14]
 800281e:	041b      	lsls	r3, r3, #16
 8002820:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4910      	ldr	r1, [pc, #64]	; (800286c <SSD1963_WriteData+0x78>)
 800282a:	4313      	orrs	r3, r2
 800282c:	618b      	str	r3, [r1, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <SSD1963_WriteData+0x70>)
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002838:	490a      	ldr	r1, [pc, #40]	; (8002864 <SSD1963_WriteData+0x70>)
 800283a:	4313      	orrs	r3, r2
 800283c:	614b      	str	r3, [r1, #20]
	writeStrobe;
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <SSD1963_WriteData+0x74>)
 8002840:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002844:	619a      	str	r2, [r3, #24]
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <SSD1963_WriteData+0x74>)
 8002848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800284c:	619a      	str	r2, [r3, #24]
	SET_CS;
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <SSD1963_WriteData+0x74>)
 8002850:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002854:	619a      	str	r2, [r3, #24]

}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	40021400 	.word	0x40021400
 800286c:	40021800 	.word	0x40021800

08002870 <SSD1963_WriteDataMultiple>:
//=============================================================================
// Write multiple data to display
//=============================================================================
void SSD1963_WriteDataMultiple(uint16_t * Data, int NumItems)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  while (NumItems)
 800287a:	e00a      	b.n	8002892 <SSD1963_WriteDataMultiple+0x22>
  {
	  SSD1963_WriteData(*Data);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ffb7 	bl	80027f4 <SSD1963_WriteData>
	  Data++;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3302      	adds	r3, #2
 800288a:	607b      	str	r3, [r7, #4]
	  NumItems--;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	3b01      	subs	r3, #1
 8002890:	603b      	str	r3, [r7, #0]
  while (NumItems)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f1      	bne.n	800287c <SSD1963_WriteDataMultiple+0xc>
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <SSD1963_Init>:
//=============================================================================
// Display initialization
//=============================================================================

void SSD1963_Init (void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	CLR_RST;  // reset
 80028a8:	4b54      	ldr	r3, [pc, #336]	; (80029fc <SSD1963_Init+0x158>)
 80028aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028ae:	619a      	str	r2, [r3, #24]
	HAL_Delay(500);
 80028b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028b4:	f000 fa1c 	bl	8002cf0 <HAL_Delay>
	SET_RST;
 80028b8:	4b50      	ldr	r3, [pc, #320]	; (80029fc <SSD1963_Init+0x158>)
 80028ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028be:	619a      	str	r2, [r3, #24]
	HAL_Delay(100);
 80028c0:	2064      	movs	r0, #100	; 0x64
 80028c2:	f000 fa15 	bl	8002cf0 <HAL_Delay>

	SSD1963_WriteCommand(SSD1963_SOFT_RESET);
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7ff ff56 	bl	8002778 <SSD1963_WriteCommand>
	HAL_Delay(10);
 80028cc:	200a      	movs	r0, #10
 80028ce:	f000 fa0f 	bl	8002cf0 <HAL_Delay>
	SSD1963_WriteCommand(SSD1963_SET_PLL_MN);
 80028d2:	20e2      	movs	r0, #226	; 0xe2
 80028d4:	f7ff ff50 	bl	8002778 <SSD1963_WriteCommand>
	SSD1963_WriteData(29);	// PLLclk = REFclk * 30 (300MHz)
 80028d8:	201d      	movs	r0, #29
 80028da:	f7ff ff8b 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(2);	// SYSclk = PLLclk / 3  (100MHz)
 80028de:	2002      	movs	r0, #2
 80028e0:	f7ff ff88 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(4);  	// dummy
 80028e4:	2004      	movs	r0, #4
 80028e6:	f7ff ff85 	bl	80027f4 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_PLL);
 80028ea:	20e0      	movs	r0, #224	; 0xe0
 80028ec:	f7ff ff44 	bl	8002778 <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0001);
 80028f0:	2001      	movs	r0, #1
 80028f2:	f7ff ff7f 	bl	80027f4 <SSD1963_WriteData>

	HAL_Delay(100);
 80028f6:	2064      	movs	r0, #100	; 0x64
 80028f8:	f000 f9fa 	bl	8002cf0 <HAL_Delay>

	SSD1963_WriteCommand(SSD1963_SET_PLL);
 80028fc:	20e0      	movs	r0, #224	; 0xe0
 80028fe:	f7ff ff3b 	bl	8002778 <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0003);
 8002902:	2003      	movs	r0, #3
 8002904:	f7ff ff76 	bl	80027f4 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_LCD_MODE);
 8002908:	20b0      	movs	r0, #176	; 0xb0
 800290a:	f7ff ff35 	bl	8002778 <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0020);
 800290e:	2020      	movs	r0, #32
 8002910:	f7ff ff70 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8002914:	2000      	movs	r0, #0
 8002916:	f7ff ff6d 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_WIDTH-1)));
 800291a:	2003      	movs	r0, #3
 800291c:	f7ff ff6a 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_WIDTH-1)));
 8002920:	201f      	movs	r0, #31
 8002922:	f7ff ff67 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_HEIGHT-1)));
 8002926:	2001      	movs	r0, #1
 8002928:	f7ff ff64 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_HEIGHT-1)));
 800292c:	20df      	movs	r0, #223	; 0xdf
 800292e:	f7ff ff61 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8002932:	2000      	movs	r0, #0
 8002934:	f7ff ff5e 	bl	80027f4 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_PIXEL_DATA_INTERFACE);
 8002938:	20f0      	movs	r0, #240	; 0xf0
 800293a:	f7ff ff1d 	bl	8002778 <SSD1963_WriteCommand>
	SSD1963_WriteData(SSD1963_PDI_16BIT565);
 800293e:	2003      	movs	r0, #3
 8002940:	f7ff ff58 	bl	80027f4 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_LSHIFT_FREQ);
 8002944:	20e6      	movs	r0, #230	; 0xe6
 8002946:	f7ff ff17 	bl	8002778 <SSD1963_WriteCommand>
	SSD1963_WriteData((LCD_FPR >> 16) & 0x00FF);
 800294a:	2004      	movs	r0, #4
 800294c:	f7ff ff52 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData((LCD_FPR >> 8) & 0x00FF);
 8002950:	200a      	movs	r0, #10
 8002952:	f7ff ff4f 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(LCD_FPR & 0x00FF);
 8002956:	205f      	movs	r0, #95	; 0x5f
 8002958:	f7ff ff4c 	bl	80027f4 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_HORI_PERIOD);
 800295c:	20b4      	movs	r0, #180	; 0xb4
 800295e:	f7ff ff0b 	bl	8002778 <SSD1963_WriteCommand>
	SSD1963_WriteData(mHIGH(TFT_HSYNC_PERIOD));
 8002962:	2003      	movs	r0, #3
 8002964:	f7ff ff46 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW(TFT_HSYNC_PERIOD));
 8002968:	2054      	movs	r0, #84	; 0x54
 800296a:	f7ff ff43 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_HSYNC_PULSE + TFT_HSYNC_BACK_PORCH)));
 800296e:	2000      	movs	r0, #0
 8002970:	f7ff ff40 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_HSYNC_PULSE + TFT_HSYNC_BACK_PORCH)));
 8002974:	202c      	movs	r0, #44	; 0x2c
 8002976:	f7ff ff3d 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(TFT_HSYNC_PULSE);
 800297a:	2002      	movs	r0, #2
 800297c:	f7ff ff3a 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8002980:	2000      	movs	r0, #0
 8002982:	f7ff ff37 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8002986:	2000      	movs	r0, #0
 8002988:	f7ff ff34 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 800298c:	2000      	movs	r0, #0
 800298e:	f7ff ff31 	bl	80027f4 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_VERT_PERIOD);
 8002992:	20b6      	movs	r0, #182	; 0xb6
 8002994:	f7ff fef0 	bl	8002778 <SSD1963_WriteCommand>
	SSD1963_WriteData(mHIGH(TFT_VSYNC_PERIOD));
 8002998:	2001      	movs	r0, #1
 800299a:	f7ff ff2b 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW(TFT_VSYNC_PERIOD));
 800299e:	20ee      	movs	r0, #238	; 0xee
 80029a0:	f7ff ff28 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_VSYNC_PULSE + TFT_VSYNC_BACK_PORCH)));
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7ff ff25 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_VSYNC_PULSE + TFT_VSYNC_BACK_PORCH)));
 80029aa:	200c      	movs	r0, #12
 80029ac:	f7ff ff22 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(TFT_VSYNC_PULSE);
 80029b0:	2006      	movs	r0, #6
 80029b2:	f7ff ff1f 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7ff ff1c 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7ff ff19 	bl	80027f4 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_DISPLAY_ON);//SET display on
 80029c2:	2029      	movs	r0, #41	; 0x29
 80029c4:	f7ff fed8 	bl	8002778 <SSD1963_WriteCommand>

	HAL_Delay(10);
 80029c8:	200a      	movs	r0, #10
 80029ca:	f000 f991 	bl	8002cf0 <HAL_Delay>
	SSD1963_WriteCommand(SSD1963_SET_PWM_CONF); //set PWM for Backlight. Manual p.53
 80029ce:	20be      	movs	r0, #190	; 0xbe
 80029d0:	f7ff fed2 	bl	8002778 <SSD1963_WriteCommand>
	// 6 parameters to be set
	SSD1963_WriteData(0x0004); 					// PWM Freq =100MHz/(256*(PWMF[7:0]+1))/256  PWMF[7:0]=4 PWM Freq=305Hz
 80029d4:	2004      	movs	r0, #4
 80029d6:	f7ff ff0d 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(0x00C0); 					// PWM duty cycle(50%)
 80029da:	20c0      	movs	r0, #192	; 0xc0
 80029dc:	f7ff ff0a 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(0x0001); 					// PWM controlled by host, PWM enabled
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7ff ff07 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(0x0040); 					// brightness level 0x00 - 0xFF
 80029e6:	2040      	movs	r0, #64	; 0x40
 80029e8:	f7ff ff04 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000); 					// minimum brightness level =  0x00 - 0xFF
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7ff ff01 	bl	80027f4 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);					// brightness prescalar 0x0 - 0xF
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7ff fefe 	bl	80027f4 <SSD1963_WriteData>


}
 80029f8:	bf00      	nop
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021400 	.word	0x40021400

08002a00 <Init_TOUCH_GPIO>:

I2C_HandleTypeDef hi2c;


void Init_TOUCH_GPIO(I2C_HandleTypeDef i2c_handle)
{
 8002a00:	b084      	sub	sp, #16
 8002a02:	b580      	push	{r7, lr}
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	f107 0c08 	add.w	ip, r7, #8
 8002a0a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=i2c_handle;
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <Init_TOUCH_GPIO+0x2c>)
 8002a10:	4618      	mov	r0, r3
 8002a12:	f107 0308 	add.w	r3, r7, #8
 8002a16:	224c      	movs	r2, #76	; 0x4c
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f017 fed9 	bl	801a7d0 <memcpy>
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a26:	b004      	add	sp, #16
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	2001d4c8 	.word	0x2001d4c8

08002a30 <STMPE610_Write>:
		return FALSE;
}


void STMPE610_Write(uint8_t reg, uint8_t val)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	4603      	mov	r3, r0
 8002a38:	460a      	mov	r2, r1
 8002a3a:	71fb      	strb	r3, [r7, #7]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	71bb      	strb	r3, [r7, #6]
	uint8_t	txbuf[2];

	txbuf[0]=reg;
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	733b      	strb	r3, [r7, #12]
	txbuf[1]=val;
 8002a44:	79bb      	ldrb	r3, [r7, #6]
 8002a46:	737b      	strb	r3, [r7, #13]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8002a48:	bf00      	nop
 8002a4a:	f107 020c 	add.w	r2, r7, #12
 8002a4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2302      	movs	r3, #2
 8002a56:	2188      	movs	r1, #136	; 0x88
 8002a58:	4805      	ldr	r0, [pc, #20]	; (8002a70 <STMPE610_Write+0x40>)
 8002a5a:	f001 f893 	bl	8003b84 <HAL_I2C_Master_Transmit>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f2      	bne.n	8002a4a <STMPE610_Write+0x1a>
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2001d4c8 	.word	0x2001d4c8

08002a74 <STMPE610_ReadByte>:

uint8_t STMPE610_ReadByte(uint8_t reg)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
	uint8_t rxbuf[1];
	rxbuf[0] = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	733b      	strb	r3, [r7, #12]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, &reg, 1, STMPE610_TIMEOUT)!= HAL_OK);
 8002a82:	bf00      	nop
 8002a84:	1dfa      	adds	r2, r7, #7
 8002a86:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	2188      	movs	r1, #136	; 0x88
 8002a90:	480c      	ldr	r0, [pc, #48]	; (8002ac4 <STMPE610_ReadByte+0x50>)
 8002a92:	f001 f877 	bl	8003b84 <HAL_I2C_Master_Transmit>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f3      	bne.n	8002a84 <STMPE610_ReadByte+0x10>
	while(HAL_I2C_Master_Receive(&hi2c, STMPE610_ADDR, (uint8_t *)rxbuf, 1, STMPE610_TIMEOUT) != HAL_OK);
 8002a9c:	bf00      	nop
 8002a9e:	f107 020c 	add.w	r2, r7, #12
 8002aa2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	2188      	movs	r1, #136	; 0x88
 8002aac:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <STMPE610_ReadByte+0x50>)
 8002aae:	f001 f95d 	bl	8003d6c <HAL_I2C_Master_Receive>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f2      	bne.n	8002a9e <STMPE610_ReadByte+0x2a>

	return rxbuf[0];
 8002ab8:	7b3b      	ldrb	r3, [r7, #12]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	2001d4c8 	.word	0x2001d4c8

08002ac8 <STMPE610_ReadWord>:

uint16_t STMPE610_ReadWord(uint8_t reg)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
	uint8_t	rxbuf[2];
	
	rxbuf[0] = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	733b      	strb	r3, [r7, #12]
	rxbuf[1] = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	737b      	strb	r3, [r7, #13]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, &reg, 1, 10000)!= HAL_OK);
 8002ada:	bf00      	nop
 8002adc:	1dfa      	adds	r2, r7, #7
 8002ade:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	2188      	movs	r1, #136	; 0x88
 8002ae8:	480f      	ldr	r0, [pc, #60]	; (8002b28 <STMPE610_ReadWord+0x60>)
 8002aea:	f001 f84b 	bl	8003b84 <HAL_I2C_Master_Transmit>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f3      	bne.n	8002adc <STMPE610_ReadWord+0x14>
	while(HAL_I2C_Master_Receive(&hi2c, STMPE610_ADDR, (uint8_t *)rxbuf, 2, 10000) != HAL_OK);
 8002af4:	bf00      	nop
 8002af6:	f107 020c 	add.w	r2, r7, #12
 8002afa:	f242 7310 	movw	r3, #10000	; 0x2710
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2302      	movs	r3, #2
 8002b02:	2188      	movs	r1, #136	; 0x88
 8002b04:	4808      	ldr	r0, [pc, #32]	; (8002b28 <STMPE610_ReadWord+0x60>)
 8002b06:	f001 f931 	bl	8003d6c <HAL_I2C_Master_Receive>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f2      	bne.n	8002af6 <STMPE610_ReadWord+0x2e>

	return (((uint16_t)rxbuf[0]) << 8) | rxbuf[1];
 8002b10:	7b3b      	ldrb	r3, [r7, #12]
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	b21a      	sxth	r2, r3
 8002b16:	7b7b      	ldrb	r3, [r7, #13]
 8002b18:	b21b      	sxth	r3, r3
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	b21b      	sxth	r3, r3
 8002b1e:	b29b      	uxth	r3, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	2001d4c8 	.word	0x2001d4c8

08002b2c <STMPE610_Init>:

void STMPE610_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
	STMPE610_Write(STMPE610_REG_SYS_CTRL1, 0x02);		// Software chip reset
 8002b30:	2102      	movs	r1, #2
 8002b32:	2003      	movs	r0, #3
 8002b34:	f7ff ff7c 	bl	8002a30 <STMPE610_Write>
	HAL_Delay(10);
 8002b38:	200a      	movs	r0, #10
 8002b3a:	f000 f8d9 	bl	8002cf0 <HAL_Delay>
	
	STMPE610_Write(STMPE610_REG_SYS_CTRL2, 0x04);		// Temperature sensor clock off, GPIO clock off, touch clock on, ADC clock on
 8002b3e:	2104      	movs	r1, #4
 8002b40:	2004      	movs	r0, #4
 8002b42:	f7ff ff75 	bl	8002a30 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_EN, 0x03);			// Interrupt on INT pin when there is a sample or a touch transition.
 8002b46:	2103      	movs	r1, #3
 8002b48:	200a      	movs	r0, #10
 8002b4a:	f7ff ff71 	bl	8002a30 <STMPE610_Write>
	//STMPE610_write_reg(STMPE610_REG_INT_EN, 0x00);						// Don't Interrupt on INT pin
	STMPE610_Write(STMPE610_REG_ADC_CTRL1, 0x48);		// ADC conversion time = 80 clock ticks, 12-bit ADC, internal voltage refernce
 8002b4e:	2148      	movs	r1, #72	; 0x48
 8002b50:	2020      	movs	r0, #32
 8002b52:	f7ff ff6d 	bl	8002a30 <STMPE610_Write>
	HAL_Delay(2);
 8002b56:	2002      	movs	r0, #2
 8002b58:	f000 f8ca 	bl	8002cf0 <HAL_Delay>
	
	STMPE610_Write(STMPE610_REG_ADC_CTRL2, 0x01);		// ADC speed 3.25MHz
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	2021      	movs	r0, #33	; 0x21
 8002b60:	f7ff ff66 	bl	8002a30 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_GPIO_AF, 0x00);			// GPIO alternate function - OFF
 8002b64:	2100      	movs	r1, #0
 8002b66:	2017      	movs	r0, #23
 8002b68:	f7ff ff62 	bl	8002a30 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_CFG, 0xA3);			// Averaging 4, touch detect delay 1ms, panel driver settling time 1ms
 8002b6c:	21a3      	movs	r1, #163	; 0xa3
 8002b6e:	2041      	movs	r0, #65	; 0x41
 8002b70:	f7ff ff5e 	bl	8002a30 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_TH, 0x01);			// FIFO threshold = 1
 8002b74:	2101      	movs	r1, #1
 8002b76:	204a      	movs	r0, #74	; 0x4a
 8002b78:	f7ff ff5a 	bl	8002a30 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x01);			// FIFO reset enable
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	204b      	movs	r0, #75	; 0x4b
 8002b80:	f7ff ff56 	bl	8002a30 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x00);			// FIFO reset disable
 8002b84:	2100      	movs	r1, #0
 8002b86:	204b      	movs	r0, #75	; 0x4b
 8002b88:	f7ff ff52 	bl	8002a30 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_FRACT_XYZ, 0x07);	// Z axis data format
 8002b8c:	2107      	movs	r1, #7
 8002b8e:	2056      	movs	r0, #86	; 0x56
 8002b90:	f7ff ff4e 	bl	8002a30 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_I_DRIVE, 0x01);		// max 50mA touchscreen line current
 8002b94:	2101      	movs	r1, #1
 8002b96:	2058      	movs	r0, #88	; 0x58
 8002b98:	f7ff ff4a 	bl	8002a30 <STMPE610_Write>

	STMPE610_Write(STMPE610_REG_TSC_CTRL, 0x30);			// X&Y&Z, 16 reading window
 8002b9c:	2130      	movs	r1, #48	; 0x30
 8002b9e:	2040      	movs	r0, #64	; 0x40
 8002ba0:	f7ff ff46 	bl	8002a30 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_CTRL, 0x31);			// X&Y&Z, 16 reading window, TSC enable
 8002ba4:	2131      	movs	r1, #49	; 0x31
 8002ba6:	2040      	movs	r0, #64	; 0x40
 8002ba8:	f7ff ff42 	bl	8002a30 <STMPE610_Write>
	//STMPE610_write_reg(STMPE610_REG_TSC_CTRL, 0x32);						// X&Y, 16 reading window
	//STMPE610_write_reg(TMPE610_REG_TSC_CTRL, 0x33);						// X&Y, 16 reading window, TSC enable

	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);		// Clear all interrupts
 8002bac:	21ff      	movs	r1, #255	; 0xff
 8002bae:	200b      	movs	r0, #11
 8002bb0:	f7ff ff3e 	bl	8002a30 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_CTRL, 0x01);		// Level interrupt, enable interrupts
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	2009      	movs	r0, #9
 8002bb8:	f7ff ff3a 	bl	8002a30 <STMPE610_Write>
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <STMPE610_read_xyz>:

uint8_t STMPE610_read_xyz(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
	uint8_t	status;

	// Is there something in the fifo
	status = STMPE610_ReadByte(STMPE610_REG_FIFO_STA);
 8002bc6:	204b      	movs	r0, #75	; 0x4b
 8002bc8:	f7ff ff54 	bl	8002a74 <STMPE610_ReadByte>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	71fb      	strb	r3, [r7, #7]
	if ((status & 0x20))
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d017      	beq.n	8002c0a <STMPE610_read_xyz+0x4a>
	{
		STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);
 8002bda:	21ff      	movs	r1, #255	; 0xff
 8002bdc:	200b      	movs	r0, #11
 8002bde:	f7ff ff27 	bl	8002a30 <STMPE610_Write>
		if (!(STMPE610_ReadByte(STMPE610_REG_TSC_CTRL) & 0x80))
 8002be2:	2040      	movs	r0, #64	; 0x40
 8002be4:	f7ff ff46 	bl	8002a74 <STMPE610_ReadByte>
 8002be8:	4603      	mov	r3, r0
 8002bea:	b25b      	sxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	db0a      	blt.n	8002c06 <STMPE610_read_xyz+0x46>
		{
			x=0;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <STMPE610_read_xyz+0x98>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	801a      	strh	r2, [r3, #0]
			y=0;
 8002bf6:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <STMPE610_read_xyz+0x9c>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	801a      	strh	r2, [r3, #0]
			z=0;
 8002bfc:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <STMPE610_read_xyz+0xa0>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	801a      	strh	r2, [r3, #0]
			return TRUE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e023      	b.n	8002c4e <STMPE610_read_xyz+0x8e>
		}
		return FALSE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e021      	b.n	8002c4e <STMPE610_read_xyz+0x8e>
	}

	// Time to get some readings
	x = STMPE610_ReadWord(STMPE610_REG_TSC_DATA_X);
 8002c0a:	204d      	movs	r0, #77	; 0x4d
 8002c0c:	f7ff ff5c 	bl	8002ac8 <STMPE610_ReadWord>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <STMPE610_read_xyz+0x98>)
 8002c16:	801a      	strh	r2, [r3, #0]
	y = STMPE610_ReadWord(STMPE610_REG_TSC_DATA_Y);
 8002c18:	204f      	movs	r0, #79	; 0x4f
 8002c1a:	f7ff ff55 	bl	8002ac8 <STMPE610_ReadWord>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <STMPE610_read_xyz+0x9c>)
 8002c24:	801a      	strh	r2, [r3, #0]
	z = STMPE610_ReadByte(STMPE610_REG_TSC_DATA_Z);
 8002c26:	2051      	movs	r0, #81	; 0x51
 8002c28:	f7ff ff24 	bl	8002a74 <STMPE610_ReadByte>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <STMPE610_read_xyz+0xa0>)
 8002c32:	801a      	strh	r2, [r3, #0]

	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x01);		// FIFO reset enable
 8002c34:	2101      	movs	r1, #1
 8002c36:	204b      	movs	r0, #75	; 0x4b
 8002c38:	f7ff fefa 	bl	8002a30 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x00);		// FIFO reset disable
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	204b      	movs	r0, #75	; 0x4b
 8002c40:	f7ff fef6 	bl	8002a30 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);
 8002c44:	21ff      	movs	r1, #255	; 0xff
 8002c46:	200b      	movs	r0, #11
 8002c48:	f7ff fef2 	bl	8002a30 <STMPE610_Write>

	return TRUE;
 8002c4c:	2301      	movs	r3, #1
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20019304 	.word	0x20019304
 8002c5c:	20019306 	.word	0x20019306
 8002c60:	20019308 	.word	0x20019308

08002c64 <STMPE610_GetX_TOUCH_RAW>:
	pom=100*(pom-GUI_TOUCH_AD_PMIN)/(GUI_TOUCH_AD_PMAX-GUI_TOUCH_AD_PMIN);
	return (uint16_t)pom;
}

uint16_t STMPE610_GetX_TOUCH_RAW(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
	return x;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <STMPE610_GetX_TOUCH_RAW+0x14>)
 8002c6a:	881b      	ldrh	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20019304 	.word	0x20019304

08002c7c <STMPE610_GetY_TOUCH_RAW>:
uint16_t STMPE610_GetY_TOUCH_RAW(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
	return y;
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <STMPE610_GetY_TOUCH_RAW+0x14>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	20019306 	.word	0x20019306

08002c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c98:	2003      	movs	r0, #3
 8002c9a:	f000 fce8 	bl	800366e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7ff f8cc 	bl	8001e3c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002ca4:	f7ff f81e 	bl	8001ce4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_IncTick+0x20>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_IncTick+0x24>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <HAL_IncTick+0x24>)
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000008 	.word	0x20000008
 8002cd4:	2001d514 	.word	0x2001d514

08002cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return uwTick;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <HAL_GetTick+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	2001d514 	.word	0x2001d514

08002cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf8:	f7ff ffee 	bl	8002cd8 <HAL_GetTick>
 8002cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d005      	beq.n	8002d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <HAL_Delay+0x44>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d16:	bf00      	nop
 8002d18:	f7ff ffde 	bl	8002cd8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d8f7      	bhi.n	8002d18 <HAL_Delay+0x28>
  {
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000008 	.word	0x20000008

08002d38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e031      	b.n	8002db2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fe ffec 	bl	8001d34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d116      	bne.n	8002da4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_ADC_Init+0x84>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	f043 0202 	orr.w	r2, r3, #2
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 faca 	bl	8003320 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f023 0303 	bic.w	r3, r3, #3
 8002d9a:	f043 0201 	orr.w	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
 8002da2:	e001      	b.n	8002da8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	ffffeefd 	.word	0xffffeefd

08002dc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_ADC_Start+0x1a>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e0ad      	b.n	8002f36 <HAL_ADC_Start+0x176>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d018      	beq.n	8002e22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002e00:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_ADC_Start+0x184>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a50      	ldr	r2, [pc, #320]	; (8002f48 <HAL_ADC_Start+0x188>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	0c9a      	lsrs	r2, r3, #18
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002e14:	e002      	b.n	8002e1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f9      	bne.n	8002e16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d175      	bne.n	8002f1c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e34:	4b45      	ldr	r3, [pc, #276]	; (8002f4c <HAL_ADC_Start+0x18c>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6a:	d106      	bne.n	8002e7a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	f023 0206 	bic.w	r2, r3, #6
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44
 8002e78:	e002      	b.n	8002e80 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e90:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002e92:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <HAL_ADC_Start+0x190>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10f      	bne.n	8002ebe <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d143      	bne.n	8002f34 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e03a      	b.n	8002f34 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a24      	ldr	r2, [pc, #144]	; (8002f54 <HAL_ADC_Start+0x194>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d10e      	bne.n	8002ee6 <HAL_ADC_Start+0x126>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d107      	bne.n	8002ee6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ee4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_ADC_Start+0x190>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d120      	bne.n	8002f34 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <HAL_ADC_Start+0x198>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d11b      	bne.n	8002f34 <HAL_ADC_Start+0x174>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d114      	bne.n	8002f34 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	e00b      	b.n	8002f34 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f043 0210 	orr.w	r2, r3, #16
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000000 	.word	0x20000000
 8002f48:	431bde83 	.word	0x431bde83
 8002f4c:	fffff8fe 	.word	0xfffff8fe
 8002f50:	40012300 	.word	0x40012300
 8002f54:	40012000 	.word	0x40012000
 8002f58:	40012200 	.word	0x40012200

08002f5c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f78:	d113      	bne.n	8002fa2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f88:	d10b      	bne.n	8002fa2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f043 0220 	orr.w	r2, r3, #32
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e063      	b.n	800306a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002fa2:	f7ff fe99 	bl	8002cd8 <HAL_GetTick>
 8002fa6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fa8:	e021      	b.n	8002fee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d01d      	beq.n	8002fee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_ADC_PollForConversion+0x6c>
 8002fb8:	f7ff fe8e 	bl	8002cd8 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d212      	bcs.n	8002fee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d00b      	beq.n	8002fee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f043 0204 	orr.w	r2, r3, #4
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e03d      	b.n	800306a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d1d6      	bne.n	8002faa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0212 	mvn.w	r2, #18
 8003004:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d123      	bne.n	8003068 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003024:	2b00      	cmp	r3, #0
 8003026:	d11f      	bne.n	8003068 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003032:	2b00      	cmp	r3, #0
 8003034:	d006      	beq.n	8003044 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003040:	2b00      	cmp	r3, #0
 8003042:	d111      	bne.n	8003068 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d105      	bne.n	8003068 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f043 0201 	orr.w	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x1c>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e12a      	b.n	80032fe <HAL_ADC_ConfigChannel+0x272>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b09      	cmp	r3, #9
 80030b6:	d93a      	bls.n	800312e <HAL_ADC_ConfigChannel+0xa2>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030c0:	d035      	beq.n	800312e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68d9      	ldr	r1, [r3, #12]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	3b1e      	subs	r3, #30
 80030d8:	2207      	movs	r2, #7
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43da      	mvns	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	400a      	ands	r2, r1
 80030e6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a87      	ldr	r2, [pc, #540]	; (800330c <HAL_ADC_ConfigChannel+0x280>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10a      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68d9      	ldr	r1, [r3, #12]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	061a      	lsls	r2, r3, #24
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003106:	e035      	b.n	8003174 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68d9      	ldr	r1, [r3, #12]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	4618      	mov	r0, r3
 800311a:	4603      	mov	r3, r0
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4403      	add	r3, r0
 8003120:	3b1e      	subs	r3, #30
 8003122:	409a      	lsls	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800312c:	e022      	b.n	8003174 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6919      	ldr	r1, [r3, #16]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	b29b      	uxth	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	2207      	movs	r2, #7
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43da      	mvns	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	400a      	ands	r2, r1
 8003150:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6919      	ldr	r1, [r3, #16]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	4618      	mov	r0, r3
 8003164:	4603      	mov	r3, r0
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4403      	add	r3, r0
 800316a:	409a      	lsls	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b06      	cmp	r3, #6
 800317a:	d824      	bhi.n	80031c6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	3b05      	subs	r3, #5
 800318e:	221f      	movs	r2, #31
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43da      	mvns	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	400a      	ands	r2, r1
 800319c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	4618      	mov	r0, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	3b05      	subs	r3, #5
 80031b8:	fa00 f203 	lsl.w	r2, r0, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	635a      	str	r2, [r3, #52]	; 0x34
 80031c4:	e04c      	b.n	8003260 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d824      	bhi.n	8003218 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	3b23      	subs	r3, #35	; 0x23
 80031e0:	221f      	movs	r2, #31
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43da      	mvns	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	400a      	ands	r2, r1
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	4618      	mov	r0, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	3b23      	subs	r3, #35	; 0x23
 800320a:	fa00 f203 	lsl.w	r2, r0, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
 8003216:	e023      	b.n	8003260 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	3b41      	subs	r3, #65	; 0x41
 800322a:	221f      	movs	r2, #31
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43da      	mvns	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	400a      	ands	r2, r1
 8003238:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	b29b      	uxth	r3, r3
 8003246:	4618      	mov	r0, r3
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	3b41      	subs	r3, #65	; 0x41
 8003254:	fa00 f203 	lsl.w	r2, r0, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a2a      	ldr	r2, [pc, #168]	; (8003310 <HAL_ADC_ConfigChannel+0x284>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10a      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1f4>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003272:	d105      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003274:	4b27      	ldr	r3, [pc, #156]	; (8003314 <HAL_ADC_ConfigChannel+0x288>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <HAL_ADC_ConfigChannel+0x288>)
 800327a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800327e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a22      	ldr	r2, [pc, #136]	; (8003310 <HAL_ADC_ConfigChannel+0x284>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d109      	bne.n	800329e <HAL_ADC_ConfigChannel+0x212>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b12      	cmp	r3, #18
 8003290:	d105      	bne.n	800329e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_ADC_ConfigChannel+0x288>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4a1f      	ldr	r2, [pc, #124]	; (8003314 <HAL_ADC_ConfigChannel+0x288>)
 8003298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800329c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <HAL_ADC_ConfigChannel+0x284>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d125      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x268>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a17      	ldr	r2, [pc, #92]	; (800330c <HAL_ADC_ConfigChannel+0x280>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d003      	beq.n	80032ba <HAL_ADC_ConfigChannel+0x22e>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b11      	cmp	r3, #17
 80032b8:	d11c      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80032ba:	4b16      	ldr	r3, [pc, #88]	; (8003314 <HAL_ADC_ConfigChannel+0x288>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4a15      	ldr	r2, [pc, #84]	; (8003314 <HAL_ADC_ConfigChannel+0x288>)
 80032c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032c4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a10      	ldr	r2, [pc, #64]	; (800330c <HAL_ADC_ConfigChannel+0x280>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d111      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_ADC_ConfigChannel+0x28c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a11      	ldr	r2, [pc, #68]	; (800331c <HAL_ADC_ConfigChannel+0x290>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	0c9a      	lsrs	r2, r3, #18
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80032e6:	e002      	b.n	80032ee <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f9      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	10000012 	.word	0x10000012
 8003310:	40012000 	.word	0x40012000
 8003314:	40012300 	.word	0x40012300
 8003318:	20000000 	.word	0x20000000
 800331c:	431bde83 	.word	0x431bde83

08003320 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003328:	4b78      	ldr	r3, [pc, #480]	; (800350c <ADC_Init+0x1ec>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a77      	ldr	r2, [pc, #476]	; (800350c <ADC_Init+0x1ec>)
 800332e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003332:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003334:	4b75      	ldr	r3, [pc, #468]	; (800350c <ADC_Init+0x1ec>)
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4973      	ldr	r1, [pc, #460]	; (800350c <ADC_Init+0x1ec>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	021a      	lsls	r2, r3, #8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6899      	ldr	r1, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	4a58      	ldr	r2, [pc, #352]	; (8003510 <ADC_Init+0x1f0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d022      	beq.n	80033fa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6899      	ldr	r1, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6899      	ldr	r1, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	e00f      	b.n	800341a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003418:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0202 	bic.w	r2, r2, #2
 8003428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	005a      	lsls	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01b      	beq.n	8003480 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003456:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003466:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	3b01      	subs	r3, #1
 8003474:	035a      	lsls	r2, r3, #13
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	e007      	b.n	8003490 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800348e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	051a      	lsls	r2, r3, #20
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6899      	ldr	r1, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034d2:	025a      	lsls	r2, r3, #9
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6899      	ldr	r1, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	029a      	lsls	r2, r3, #10
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	40012300 	.word	0x40012300
 8003510:	0f000001 	.word	0x0f000001

08003514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <__NVIC_SetPriorityGrouping+0x40>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003530:	4013      	ands	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <__NVIC_SetPriorityGrouping+0x44>)
 800353e:	4313      	orrs	r3, r2
 8003540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003542:	4a04      	ldr	r2, [pc, #16]	; (8003554 <__NVIC_SetPriorityGrouping+0x40>)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	60d3      	str	r3, [r2, #12]
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000ed00 	.word	0xe000ed00
 8003558:	05fa0000 	.word	0x05fa0000

0800355c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <__NVIC_GetPriorityGrouping+0x18>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 0307 	and.w	r3, r3, #7
}
 800356a:	4618      	mov	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	2b00      	cmp	r3, #0
 8003588:	db0b      	blt.n	80035a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	f003 021f 	and.w	r2, r3, #31
 8003590:	4907      	ldr	r1, [pc, #28]	; (80035b0 <__NVIC_EnableIRQ+0x38>)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	2001      	movs	r0, #1
 800359a:	fa00 f202 	lsl.w	r2, r0, r2
 800359e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000e100 	.word	0xe000e100

080035b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	db0a      	blt.n	80035de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	490c      	ldr	r1, [pc, #48]	; (8003600 <__NVIC_SetPriority+0x4c>)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	0112      	lsls	r2, r2, #4
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	440b      	add	r3, r1
 80035d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035dc:	e00a      	b.n	80035f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4908      	ldr	r1, [pc, #32]	; (8003604 <__NVIC_SetPriority+0x50>)
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	3b04      	subs	r3, #4
 80035ec:	0112      	lsls	r2, r2, #4
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	440b      	add	r3, r1
 80035f2:	761a      	strb	r2, [r3, #24]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000e100 	.word	0xe000e100
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f1c3 0307 	rsb	r3, r3, #7
 8003622:	2b04      	cmp	r3, #4
 8003624:	bf28      	it	cs
 8003626:	2304      	movcs	r3, #4
 8003628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3304      	adds	r3, #4
 800362e:	2b06      	cmp	r3, #6
 8003630:	d902      	bls.n	8003638 <NVIC_EncodePriority+0x30>
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3b03      	subs	r3, #3
 8003636:	e000      	b.n	800363a <NVIC_EncodePriority+0x32>
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363c:	f04f 32ff 	mov.w	r2, #4294967295
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43da      	mvns	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	401a      	ands	r2, r3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003650:	f04f 31ff 	mov.w	r1, #4294967295
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	43d9      	mvns	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003660:	4313      	orrs	r3, r2
         );
}
 8003662:	4618      	mov	r0, r3
 8003664:	3724      	adds	r7, #36	; 0x24
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ff4c 	bl	8003514 <__NVIC_SetPriorityGrouping>
}
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003696:	f7ff ff61 	bl	800355c <__NVIC_GetPriorityGrouping>
 800369a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	6978      	ldr	r0, [r7, #20]
 80036a2:	f7ff ffb1 	bl	8003608 <NVIC_EncodePriority>
 80036a6:	4602      	mov	r2, r0
 80036a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ac:	4611      	mov	r1, r2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff ff80 	bl	80035b4 <__NVIC_SetPriority>
}
 80036b4:	bf00      	nop
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff ff54 	bl	8003578 <__NVIC_EnableIRQ>
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d8:	b480      	push	{r7}
 80036da:	b089      	sub	sp, #36	; 0x24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	e175      	b.n	80039e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80036f8:	2201      	movs	r2, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	429a      	cmp	r2, r3
 8003712:	f040 8164 	bne.w	80039de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d00b      	beq.n	8003736 <HAL_GPIO_Init+0x5e>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d007      	beq.n	8003736 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800372a:	2b11      	cmp	r3, #17
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b12      	cmp	r3, #18
 8003734:	d130      	bne.n	8003798 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800376c:	2201      	movs	r2, #1
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 0201 	and.w	r2, r3, #1
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	2203      	movs	r2, #3
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x100>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b12      	cmp	r3, #18
 80037d6:	d123      	bne.n	8003820 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	08da      	lsrs	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3208      	adds	r2, #8
 80037e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	220f      	movs	r2, #15
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	08da      	lsrs	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3208      	adds	r2, #8
 800381a:	69b9      	ldr	r1, [r7, #24]
 800381c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0203 	and.w	r2, r3, #3
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80be 	beq.w	80039de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003862:	4b66      	ldr	r3, [pc, #408]	; (80039fc <HAL_GPIO_Init+0x324>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	4a65      	ldr	r2, [pc, #404]	; (80039fc <HAL_GPIO_Init+0x324>)
 8003868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800386c:	6453      	str	r3, [r2, #68]	; 0x44
 800386e:	4b63      	ldr	r3, [pc, #396]	; (80039fc <HAL_GPIO_Init+0x324>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800387a:	4a61      	ldr	r2, [pc, #388]	; (8003a00 <HAL_GPIO_Init+0x328>)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	3302      	adds	r3, #2
 8003882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	220f      	movs	r2, #15
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a58      	ldr	r2, [pc, #352]	; (8003a04 <HAL_GPIO_Init+0x32c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d037      	beq.n	8003916 <HAL_GPIO_Init+0x23e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a57      	ldr	r2, [pc, #348]	; (8003a08 <HAL_GPIO_Init+0x330>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d031      	beq.n	8003912 <HAL_GPIO_Init+0x23a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a56      	ldr	r2, [pc, #344]	; (8003a0c <HAL_GPIO_Init+0x334>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d02b      	beq.n	800390e <HAL_GPIO_Init+0x236>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a55      	ldr	r2, [pc, #340]	; (8003a10 <HAL_GPIO_Init+0x338>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d025      	beq.n	800390a <HAL_GPIO_Init+0x232>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a54      	ldr	r2, [pc, #336]	; (8003a14 <HAL_GPIO_Init+0x33c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d01f      	beq.n	8003906 <HAL_GPIO_Init+0x22e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a53      	ldr	r2, [pc, #332]	; (8003a18 <HAL_GPIO_Init+0x340>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d019      	beq.n	8003902 <HAL_GPIO_Init+0x22a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a52      	ldr	r2, [pc, #328]	; (8003a1c <HAL_GPIO_Init+0x344>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_GPIO_Init+0x226>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a51      	ldr	r2, [pc, #324]	; (8003a20 <HAL_GPIO_Init+0x348>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00d      	beq.n	80038fa <HAL_GPIO_Init+0x222>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a50      	ldr	r2, [pc, #320]	; (8003a24 <HAL_GPIO_Init+0x34c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <HAL_GPIO_Init+0x21e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a4f      	ldr	r2, [pc, #316]	; (8003a28 <HAL_GPIO_Init+0x350>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <HAL_GPIO_Init+0x21a>
 80038ee:	2309      	movs	r3, #9
 80038f0:	e012      	b.n	8003918 <HAL_GPIO_Init+0x240>
 80038f2:	230a      	movs	r3, #10
 80038f4:	e010      	b.n	8003918 <HAL_GPIO_Init+0x240>
 80038f6:	2308      	movs	r3, #8
 80038f8:	e00e      	b.n	8003918 <HAL_GPIO_Init+0x240>
 80038fa:	2307      	movs	r3, #7
 80038fc:	e00c      	b.n	8003918 <HAL_GPIO_Init+0x240>
 80038fe:	2306      	movs	r3, #6
 8003900:	e00a      	b.n	8003918 <HAL_GPIO_Init+0x240>
 8003902:	2305      	movs	r3, #5
 8003904:	e008      	b.n	8003918 <HAL_GPIO_Init+0x240>
 8003906:	2304      	movs	r3, #4
 8003908:	e006      	b.n	8003918 <HAL_GPIO_Init+0x240>
 800390a:	2303      	movs	r3, #3
 800390c:	e004      	b.n	8003918 <HAL_GPIO_Init+0x240>
 800390e:	2302      	movs	r3, #2
 8003910:	e002      	b.n	8003918 <HAL_GPIO_Init+0x240>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_GPIO_Init+0x240>
 8003916:	2300      	movs	r3, #0
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	f002 0203 	and.w	r2, r2, #3
 800391e:	0092      	lsls	r2, r2, #2
 8003920:	4093      	lsls	r3, r2
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003928:	4935      	ldr	r1, [pc, #212]	; (8003a00 <HAL_GPIO_Init+0x328>)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	089b      	lsrs	r3, r3, #2
 800392e:	3302      	adds	r3, #2
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003936:	4b3d      	ldr	r3, [pc, #244]	; (8003a2c <HAL_GPIO_Init+0x354>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800395a:	4a34      	ldr	r2, [pc, #208]	; (8003a2c <HAL_GPIO_Init+0x354>)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003960:	4b32      	ldr	r3, [pc, #200]	; (8003a2c <HAL_GPIO_Init+0x354>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003984:	4a29      	ldr	r2, [pc, #164]	; (8003a2c <HAL_GPIO_Init+0x354>)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800398a:	4b28      	ldr	r3, [pc, #160]	; (8003a2c <HAL_GPIO_Init+0x354>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039ae:	4a1f      	ldr	r2, [pc, #124]	; (8003a2c <HAL_GPIO_Init+0x354>)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_GPIO_Init+0x354>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039d8:	4a14      	ldr	r2, [pc, #80]	; (8003a2c <HAL_GPIO_Init+0x354>)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3301      	adds	r3, #1
 80039e2:	61fb      	str	r3, [r7, #28]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b0f      	cmp	r3, #15
 80039e8:	f67f ae86 	bls.w	80036f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	3724      	adds	r7, #36	; 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40013800 	.word	0x40013800
 8003a04:	40020000 	.word	0x40020000
 8003a08:	40020400 	.word	0x40020400
 8003a0c:	40020800 	.word	0x40020800
 8003a10:	40020c00 	.word	0x40020c00
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40021400 	.word	0x40021400
 8003a1c:	40021800 	.word	0x40021800
 8003a20:	40021c00 	.word	0x40021c00
 8003a24:	40022000 	.word	0x40022000
 8003a28:	40022400 	.word	0x40022400
 8003a2c:	40013c00 	.word	0x40013c00

08003a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a40:	787b      	ldrb	r3, [r7, #1]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a46:	887a      	ldrh	r2, [r7, #2]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a4c:	e003      	b.n	8003a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a4e:	887b      	ldrh	r3, [r7, #2]
 8003a50:	041a      	lsls	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	619a      	str	r2, [r3, #24]
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e07f      	b.n	8003b76 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fe f992 	bl	8001db4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2224      	movs	r2, #36	; 0x24
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ab4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ac4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d107      	bne.n	8003ade <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	e006      	b.n	8003aec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003aea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d104      	bne.n	8003afe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003afc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <HAL_I2C_Init+0x11c>)
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	ea42 0103 	orr.w	r1, r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	021a      	lsls	r2, r3, #8
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69d9      	ldr	r1, [r3, #28]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1a      	ldr	r2, [r3, #32]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	02008000 	.word	0x02008000

08003b84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	460b      	mov	r3, r1
 8003b92:	817b      	strh	r3, [r7, #10]
 8003b94:	4613      	mov	r3, r2
 8003b96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	f040 80da 	bne.w	8003d5a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2C_Master_Transmit+0x30>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e0d3      	b.n	8003d5c <HAL_I2C_Master_Transmit+0x1d8>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bbc:	f7ff f88c 	bl	8002cd8 <HAL_GetTick>
 8003bc0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	2319      	movs	r3, #25
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f9e6 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e0be      	b.n	8003d5c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2221      	movs	r2, #33	; 0x21
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2210      	movs	r2, #16
 8003bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	893a      	ldrh	r2, [r7, #8]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2bff      	cmp	r3, #255	; 0xff
 8003c0e:	d90e      	bls.n	8003c2e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	22ff      	movs	r2, #255	; 0xff
 8003c14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	8979      	ldrh	r1, [r7, #10]
 8003c1e:	4b51      	ldr	r3, [pc, #324]	; (8003d64 <HAL_I2C_Master_Transmit+0x1e0>)
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fb48 	bl	80042bc <I2C_TransferConfig>
 8003c2c:	e06c      	b.n	8003d08 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	8979      	ldrh	r1, [r7, #10]
 8003c40:	4b48      	ldr	r3, [pc, #288]	; (8003d64 <HAL_I2C_Master_Transmit+0x1e0>)
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fb37 	bl	80042bc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003c4e:	e05b      	b.n	8003d08 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	6a39      	ldr	r1, [r7, #32]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f9e3 	bl	8004020 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e07b      	b.n	8003d5c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	781a      	ldrb	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d034      	beq.n	8003d08 <HAL_I2C_Master_Transmit+0x184>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d130      	bne.n	8003d08 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f975 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e04d      	b.n	8003d5c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2bff      	cmp	r3, #255	; 0xff
 8003cc8:	d90e      	bls.n	8003ce8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	22ff      	movs	r2, #255	; 0xff
 8003cce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	8979      	ldrh	r1, [r7, #10]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 faeb 	bl	80042bc <I2C_TransferConfig>
 8003ce6:	e00f      	b.n	8003d08 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	8979      	ldrh	r1, [r7, #10]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fada 	bl	80042bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d19e      	bne.n	8003c50 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	6a39      	ldr	r1, [r7, #32]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f9c2 	bl	80040a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e01a      	b.n	8003d5c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_I2C_Master_Transmit+0x1e4>)
 8003d3a:	400b      	ands	r3, r1
 8003d3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
  }
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	80002000 	.word	0x80002000
 8003d68:	fe00e800 	.word	0xfe00e800

08003d6c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	461a      	mov	r2, r3
 8003d78:	460b      	mov	r3, r1
 8003d7a:	817b      	strh	r3, [r7, #10]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	f040 80db 	bne.w	8003f44 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_I2C_Master_Receive+0x30>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e0d4      	b.n	8003f46 <HAL_I2C_Master_Receive+0x1da>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003da4:	f7fe ff98 	bl	8002cd8 <HAL_GetTick>
 8003da8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	2319      	movs	r3, #25
 8003db0:	2201      	movs	r2, #1
 8003db2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f8f2 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e0bf      	b.n	8003f46 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2222      	movs	r2, #34	; 0x22
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2210      	movs	r2, #16
 8003dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	893a      	ldrh	r2, [r7, #8]
 8003de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2bff      	cmp	r3, #255	; 0xff
 8003df6:	d90e      	bls.n	8003e16 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	22ff      	movs	r2, #255	; 0xff
 8003dfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	8979      	ldrh	r1, [r7, #10]
 8003e06:	4b52      	ldr	r3, [pc, #328]	; (8003f50 <HAL_I2C_Master_Receive+0x1e4>)
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fa54 	bl	80042bc <I2C_TransferConfig>
 8003e14:	e06d      	b.n	8003ef2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	8979      	ldrh	r1, [r7, #10]
 8003e28:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <HAL_I2C_Master_Receive+0x1e4>)
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 fa43 	bl	80042bc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003e36:	e05c      	b.n	8003ef2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	6a39      	ldr	r1, [r7, #32]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f96b 	bl	8004118 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e07c      	b.n	8003f46 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d034      	beq.n	8003ef2 <HAL_I2C_Master_Receive+0x186>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d130      	bne.n	8003ef2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f880 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e04d      	b.n	8003f46 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2bff      	cmp	r3, #255	; 0xff
 8003eb2:	d90e      	bls.n	8003ed2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	22ff      	movs	r2, #255	; 0xff
 8003eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	8979      	ldrh	r1, [r7, #10]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f9f6 	bl	80042bc <I2C_TransferConfig>
 8003ed0:	e00f      	b.n	8003ef2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	8979      	ldrh	r1, [r7, #10]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f9e5 	bl	80042bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d19d      	bne.n	8003e38 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	6a39      	ldr	r1, [r7, #32]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f8cd 	bl	80040a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e01a      	b.n	8003f46 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2220      	movs	r2, #32
 8003f16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <HAL_I2C_Master_Receive+0x1e8>)
 8003f24:	400b      	ands	r3, r1
 8003f26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	e000      	b.n	8003f46 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
  }
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	80002400 	.word	0x80002400
 8003f54:	fe00e800 	.word	0xfe00e800

08003f58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d103      	bne.n	8003f76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d007      	beq.n	8003f94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	619a      	str	r2, [r3, #24]
  }
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fb0:	e022      	b.n	8003ff8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d01e      	beq.n	8003ff8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fba:	f7fe fe8d 	bl	8002cd8 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d302      	bcc.n	8003fd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d113      	bne.n	8003ff8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd4:	f043 0220 	orr.w	r2, r3, #32
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e00f      	b.n	8004018 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4013      	ands	r3, r2
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	429a      	cmp	r2, r3
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	429a      	cmp	r2, r3
 8004014:	d0cd      	beq.n	8003fb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800402c:	e02c      	b.n	8004088 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f8dc 	bl	80041f0 <I2C_IsAcknowledgeFailed>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e02a      	b.n	8004098 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004048:	d01e      	beq.n	8004088 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fe fe45 	bl	8002cd8 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d113      	bne.n	8004088 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e007      	b.n	8004098 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b02      	cmp	r3, #2
 8004094:	d1cb      	bne.n	800402e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040ac:	e028      	b.n	8004100 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f89c 	bl	80041f0 <I2C_IsAcknowledgeFailed>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e026      	b.n	8004110 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c2:	f7fe fe09 	bl	8002cd8 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d113      	bne.n	8004100 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e007      	b.n	8004110 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b20      	cmp	r3, #32
 800410c:	d1cf      	bne.n	80040ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004124:	e055      	b.n	80041d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f860 	bl	80041f0 <I2C_IsAcknowledgeFailed>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e053      	b.n	80041e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b20      	cmp	r3, #32
 8004146:	d129      	bne.n	800419c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b04      	cmp	r3, #4
 8004154:	d105      	bne.n	8004162 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e03f      	b.n	80041e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2220      	movs	r2, #32
 8004168:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6859      	ldr	r1, [r3, #4]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004176:	400b      	ands	r3, r1
 8004178:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e022      	b.n	80041e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419c:	f7fe fd9c 	bl	8002cd8 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d302      	bcc.n	80041b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10f      	bne.n	80041d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	f043 0220 	orr.w	r2, r3, #32
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e007      	b.n	80041e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d1a2      	bne.n	8004126 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	fe00e800 	.word	0xfe00e800

080041f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b10      	cmp	r3, #16
 8004208:	d151      	bne.n	80042ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800420a:	e022      	b.n	8004252 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d01e      	beq.n	8004252 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004214:	f7fe fd60 	bl	8002cd8 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	429a      	cmp	r2, r3
 8004222:	d302      	bcc.n	800422a <I2C_IsAcknowledgeFailed+0x3a>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d113      	bne.n	8004252 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	f043 0220 	orr.w	r2, r3, #32
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e02e      	b.n	80042b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b20      	cmp	r3, #32
 800425e:	d1d5      	bne.n	800420c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2210      	movs	r2, #16
 8004266:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2220      	movs	r2, #32
 800426e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f7ff fe71 	bl	8003f58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6859      	ldr	r1, [r3, #4]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8004282:	400b      	ands	r3, r1
 8004284:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	f043 0204 	orr.w	r2, r3, #4
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	fe00e800 	.word	0xfe00e800

080042bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	607b      	str	r3, [r7, #4]
 80042c6:	460b      	mov	r3, r1
 80042c8:	817b      	strh	r3, [r7, #10]
 80042ca:	4613      	mov	r3, r2
 80042cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	0d5b      	lsrs	r3, r3, #21
 80042d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <I2C_TransferConfig+0x58>)
 80042de:	430b      	orrs	r3, r1
 80042e0:	43db      	mvns	r3, r3
 80042e2:	ea02 0103 	and.w	r1, r2, r3
 80042e6:	897b      	ldrh	r3, [r7, #10]
 80042e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042ec:	7a7b      	ldrb	r3, [r7, #9]
 80042ee:	041b      	lsls	r3, r3, #16
 80042f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	03ff63ff 	.word	0x03ff63ff

08004318 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b20      	cmp	r3, #32
 800432c:	d138      	bne.n	80043a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004338:	2302      	movs	r3, #2
 800433a:	e032      	b.n	80043a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2224      	movs	r2, #36	; 0x24
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800436a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6819      	ldr	r1, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	e000      	b.n	80043a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043a0:	2302      	movs	r3, #2
  }
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d139      	bne.n	8004438 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e033      	b.n	800443a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2224      	movs	r2, #36	; 0x24
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0201 	bic.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004400:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	021b      	lsls	r3, r3, #8
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	e000      	b.n	800443a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004438:	2302      	movs	r3, #2
  }
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004452:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	4a22      	ldr	r2, [pc, #136]	; (80044e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445c:	6413      	str	r3, [r2, #64]	; 0x40
 800445e:	4b20      	ldr	r3, [pc, #128]	; (80044e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800446a:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1d      	ldr	r2, [pc, #116]	; (80044e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004474:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004476:	f7fe fc2f 	bl	8002cd8 <HAL_GetTick>
 800447a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800447c:	e009      	b.n	8004492 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800447e:	f7fe fc2b 	bl	8002cd8 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800448c:	d901      	bls.n	8004492 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e022      	b.n	80044d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004492:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449e:	d1ee      	bne.n	800447e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a0f      	ldr	r2, [pc, #60]	; (80044e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044ac:	f7fe fc14 	bl	8002cd8 <HAL_GetTick>
 80044b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044b2:	e009      	b.n	80044c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044b4:	f7fe fc10 	bl	8002cd8 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044c2:	d901      	bls.n	80044c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e007      	b.n	80044d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044d4:	d1ee      	bne.n	80044b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40007000 	.word	0x40007000

080044e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044f0:	2300      	movs	r3, #0
 80044f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e291      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 8087 	beq.w	800461a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800450c:	4b96      	ldr	r3, [pc, #600]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b04      	cmp	r3, #4
 8004516:	d00c      	beq.n	8004532 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004518:	4b93      	ldr	r3, [pc, #588]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 030c 	and.w	r3, r3, #12
 8004520:	2b08      	cmp	r3, #8
 8004522:	d112      	bne.n	800454a <HAL_RCC_OscConfig+0x62>
 8004524:	4b90      	ldr	r3, [pc, #576]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004530:	d10b      	bne.n	800454a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004532:	4b8d      	ldr	r3, [pc, #564]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d06c      	beq.n	8004618 <HAL_RCC_OscConfig+0x130>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d168      	bne.n	8004618 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e26b      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004552:	d106      	bne.n	8004562 <HAL_RCC_OscConfig+0x7a>
 8004554:	4b84      	ldr	r3, [pc, #528]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a83      	ldr	r2, [pc, #524]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 800455a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	e02e      	b.n	80045c0 <HAL_RCC_OscConfig+0xd8>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10c      	bne.n	8004584 <HAL_RCC_OscConfig+0x9c>
 800456a:	4b7f      	ldr	r3, [pc, #508]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a7e      	ldr	r2, [pc, #504]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b7c      	ldr	r3, [pc, #496]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a7b      	ldr	r2, [pc, #492]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 800457c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e01d      	b.n	80045c0 <HAL_RCC_OscConfig+0xd8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800458c:	d10c      	bne.n	80045a8 <HAL_RCC_OscConfig+0xc0>
 800458e:	4b76      	ldr	r3, [pc, #472]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a75      	ldr	r2, [pc, #468]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	4b73      	ldr	r3, [pc, #460]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a72      	ldr	r2, [pc, #456]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 80045a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e00b      	b.n	80045c0 <HAL_RCC_OscConfig+0xd8>
 80045a8:	4b6f      	ldr	r3, [pc, #444]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a6e      	ldr	r2, [pc, #440]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 80045ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	4b6c      	ldr	r3, [pc, #432]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a6b      	ldr	r2, [pc, #428]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 80045ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d013      	beq.n	80045f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fe fb86 	bl	8002cd8 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d0:	f7fe fb82 	bl	8002cd8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b64      	cmp	r3, #100	; 0x64
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e21f      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e2:	4b61      	ldr	r3, [pc, #388]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0xe8>
 80045ee:	e014      	b.n	800461a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fe fb72 	bl	8002cd8 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f8:	f7fe fb6e 	bl	8002cd8 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b64      	cmp	r3, #100	; 0x64
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e20b      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460a:	4b57      	ldr	r3, [pc, #348]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x110>
 8004616:	e000      	b.n	800461a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d069      	beq.n	80046fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004626:	4b50      	ldr	r3, [pc, #320]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00b      	beq.n	800464a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004632:	4b4d      	ldr	r3, [pc, #308]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 030c 	and.w	r3, r3, #12
 800463a:	2b08      	cmp	r3, #8
 800463c:	d11c      	bne.n	8004678 <HAL_RCC_OscConfig+0x190>
 800463e:	4b4a      	ldr	r3, [pc, #296]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d116      	bne.n	8004678 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464a:	4b47      	ldr	r3, [pc, #284]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_RCC_OscConfig+0x17a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d001      	beq.n	8004662 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e1df      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004662:	4b41      	ldr	r3, [pc, #260]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	493d      	ldr	r1, [pc, #244]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004676:	e040      	b.n	80046fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d023      	beq.n	80046c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004680:	4b39      	ldr	r3, [pc, #228]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a38      	ldr	r2, [pc, #224]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fe fb24 	bl	8002cd8 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004694:	f7fe fb20 	bl	8002cd8 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e1bd      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a6:	4b30      	ldr	r3, [pc, #192]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b2:	4b2d      	ldr	r3, [pc, #180]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4929      	ldr	r1, [pc, #164]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
 80046c6:	e018      	b.n	80046fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c8:	4b27      	ldr	r3, [pc, #156]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a26      	ldr	r2, [pc, #152]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 80046ce:	f023 0301 	bic.w	r3, r3, #1
 80046d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fe fb00 	bl	8002cd8 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046dc:	f7fe fafc 	bl	8002cd8 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e199      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ee:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f0      	bne.n	80046dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d038      	beq.n	8004778 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d019      	beq.n	8004742 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800470e:	4b16      	ldr	r3, [pc, #88]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004712:	4a15      	ldr	r2, [pc, #84]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fe fadd 	bl	8002cd8 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004722:	f7fe fad9 	bl	8002cd8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e176      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004734:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x23a>
 8004740:	e01a      	b.n	8004778 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004742:	4b09      	ldr	r3, [pc, #36]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004746:	4a08      	ldr	r2, [pc, #32]	; (8004768 <HAL_RCC_OscConfig+0x280>)
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474e:	f7fe fac3 	bl	8002cd8 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004756:	f7fe fabf 	bl	8002cd8 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d903      	bls.n	800476c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e15c      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
 8004768:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800476c:	4b91      	ldr	r3, [pc, #580]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 800476e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ee      	bne.n	8004756 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80a4 	beq.w	80048ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004786:	4b8b      	ldr	r3, [pc, #556]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10d      	bne.n	80047ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004792:	4b88      	ldr	r3, [pc, #544]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	4a87      	ldr	r2, [pc, #540]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479c:	6413      	str	r3, [r2, #64]	; 0x40
 800479e:	4b85      	ldr	r3, [pc, #532]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ae:	4b82      	ldr	r3, [pc, #520]	; (80049b8 <HAL_RCC_OscConfig+0x4d0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d118      	bne.n	80047ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80047ba:	4b7f      	ldr	r3, [pc, #508]	; (80049b8 <HAL_RCC_OscConfig+0x4d0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a7e      	ldr	r2, [pc, #504]	; (80049b8 <HAL_RCC_OscConfig+0x4d0>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c6:	f7fe fa87 	bl	8002cd8 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ce:	f7fe fa83 	bl	8002cd8 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b64      	cmp	r3, #100	; 0x64
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e120      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e0:	4b75      	ldr	r3, [pc, #468]	; (80049b8 <HAL_RCC_OscConfig+0x4d0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d106      	bne.n	8004802 <HAL_RCC_OscConfig+0x31a>
 80047f4:	4b6f      	ldr	r3, [pc, #444]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	4a6e      	ldr	r2, [pc, #440]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004800:	e02d      	b.n	800485e <HAL_RCC_OscConfig+0x376>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10c      	bne.n	8004824 <HAL_RCC_OscConfig+0x33c>
 800480a:	4b6a      	ldr	r3, [pc, #424]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	4a69      	ldr	r2, [pc, #420]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	6713      	str	r3, [r2, #112]	; 0x70
 8004816:	4b67      	ldr	r3, [pc, #412]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	4a66      	ldr	r2, [pc, #408]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 800481c:	f023 0304 	bic.w	r3, r3, #4
 8004820:	6713      	str	r3, [r2, #112]	; 0x70
 8004822:	e01c      	b.n	800485e <HAL_RCC_OscConfig+0x376>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b05      	cmp	r3, #5
 800482a:	d10c      	bne.n	8004846 <HAL_RCC_OscConfig+0x35e>
 800482c:	4b61      	ldr	r3, [pc, #388]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004830:	4a60      	ldr	r2, [pc, #384]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004832:	f043 0304 	orr.w	r3, r3, #4
 8004836:	6713      	str	r3, [r2, #112]	; 0x70
 8004838:	4b5e      	ldr	r3, [pc, #376]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483c:	4a5d      	ldr	r2, [pc, #372]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	6713      	str	r3, [r2, #112]	; 0x70
 8004844:	e00b      	b.n	800485e <HAL_RCC_OscConfig+0x376>
 8004846:	4b5b      	ldr	r3, [pc, #364]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484a:	4a5a      	ldr	r2, [pc, #360]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	6713      	str	r3, [r2, #112]	; 0x70
 8004852:	4b58      	ldr	r3, [pc, #352]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	4a57      	ldr	r2, [pc, #348]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004858:	f023 0304 	bic.w	r3, r3, #4
 800485c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d015      	beq.n	8004892 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004866:	f7fe fa37 	bl	8002cd8 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486c:	e00a      	b.n	8004884 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486e:	f7fe fa33 	bl	8002cd8 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f241 3288 	movw	r2, #5000	; 0x1388
 800487c:	4293      	cmp	r3, r2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e0ce      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004884:	4b4b      	ldr	r3, [pc, #300]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ee      	beq.n	800486e <HAL_RCC_OscConfig+0x386>
 8004890:	e014      	b.n	80048bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004892:	f7fe fa21 	bl	8002cd8 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004898:	e00a      	b.n	80048b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fe fa1d 	bl	8002cd8 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e0b8      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b0:	4b40      	ldr	r3, [pc, #256]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1ee      	bne.n	800489a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d105      	bne.n	80048ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c2:	4b3c      	ldr	r3, [pc, #240]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	4a3b      	ldr	r2, [pc, #236]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 80048c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80a4 	beq.w	8004a20 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048d8:	4b36      	ldr	r3, [pc, #216]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 030c 	and.w	r3, r3, #12
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d06b      	beq.n	80049bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d149      	bne.n	8004980 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ec:	4b31      	ldr	r3, [pc, #196]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a30      	ldr	r2, [pc, #192]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 80048f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f8:	f7fe f9ee 	bl	8002cd8 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004900:	f7fe f9ea 	bl	8002cd8 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e087      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004912:	4b28      	ldr	r3, [pc, #160]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f0      	bne.n	8004900 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69da      	ldr	r2, [r3, #28]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	019b      	lsls	r3, r3, #6
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004934:	085b      	lsrs	r3, r3, #1
 8004936:	3b01      	subs	r3, #1
 8004938:	041b      	lsls	r3, r3, #16
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	061b      	lsls	r3, r3, #24
 8004942:	4313      	orrs	r3, r2
 8004944:	4a1b      	ldr	r2, [pc, #108]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800494a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800494c:	4b19      	ldr	r3, [pc, #100]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a18      	ldr	r2, [pc, #96]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fe f9be 	bl	8002cd8 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004960:	f7fe f9ba 	bl	8002cd8 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e057      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x478>
 800497e:	e04f      	b.n	8004a20 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a0b      	ldr	r2, [pc, #44]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800498a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fe f9a4 	bl	8002cd8 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004994:	f7fe f9a0 	bl	8002cd8 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e03d      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a6:	4b03      	ldr	r3, [pc, #12]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x4ac>
 80049b2:	e035      	b.n	8004a20 <HAL_RCC_OscConfig+0x538>
 80049b4:	40023800 	.word	0x40023800
 80049b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80049bc:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <HAL_RCC_OscConfig+0x544>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d028      	beq.n	8004a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d121      	bne.n	8004a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d11a      	bne.n	8004a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049ec:	4013      	ands	r3, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d111      	bne.n	8004a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	085b      	lsrs	r3, r3, #1
 8004a04:	3b01      	subs	r3, #1
 8004a06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d107      	bne.n	8004a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023800 	.word	0x40023800

08004a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0d0      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a48:	4b6a      	ldr	r3, [pc, #424]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 030f 	and.w	r3, r3, #15
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d910      	bls.n	8004a78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b67      	ldr	r3, [pc, #412]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 020f 	bic.w	r2, r3, #15
 8004a5e:	4965      	ldr	r1, [pc, #404]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b63      	ldr	r3, [pc, #396]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0b8      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d020      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a90:	4b59      	ldr	r3, [pc, #356]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	4a58      	ldr	r2, [pc, #352]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa8:	4b53      	ldr	r3, [pc, #332]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a52      	ldr	r2, [pc, #328]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ab2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab4:	4b50      	ldr	r3, [pc, #320]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	494d      	ldr	r1, [pc, #308]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d040      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ada:	4b47      	ldr	r3, [pc, #284]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d115      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e07f      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af2:	4b41      	ldr	r3, [pc, #260]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e073      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b02:	4b3d      	ldr	r3, [pc, #244]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e06b      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b12:	4b39      	ldr	r3, [pc, #228]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f023 0203 	bic.w	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4936      	ldr	r1, [pc, #216]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b24:	f7fe f8d8 	bl	8002cd8 <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2c:	f7fe f8d4 	bl	8002cd8 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e053      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b42:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 020c 	and.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d1eb      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b54:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d210      	bcs.n	8004b84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 020f 	bic.w	r2, r3, #15
 8004b6a:	4922      	ldr	r1, [pc, #136]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b72:	4b20      	ldr	r3, [pc, #128]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e032      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b90:	4b19      	ldr	r3, [pc, #100]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	4916      	ldr	r1, [pc, #88]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bae:	4b12      	ldr	r3, [pc, #72]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	490e      	ldr	r1, [pc, #56]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bc2:	f000 f821 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	490a      	ldr	r1, [pc, #40]	; (8004bfc <HAL_RCC_ClockConfig+0x1cc>)
 8004bd4:	5ccb      	ldrb	r3, [r1, r3]
 8004bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bda:	4a09      	ldr	r2, [pc, #36]	; (8004c00 <HAL_RCC_ClockConfig+0x1d0>)
 8004bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bde:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <HAL_RCC_ClockConfig+0x1d4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fd f92a 	bl	8001e3c <HAL_InitTick>

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023c00 	.word	0x40023c00
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	0801b454 	.word	0x0801b454
 8004c00:	20000000 	.word	0x20000000
 8004c04:	20000004 	.word	0x20000004

08004c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c08:	b5b0      	push	{r4, r5, r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c0e:	2100      	movs	r1, #0
 8004c10:	6079      	str	r1, [r7, #4]
 8004c12:	2100      	movs	r1, #0
 8004c14:	60f9      	str	r1, [r7, #12]
 8004c16:	2100      	movs	r1, #0
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c1e:	4952      	ldr	r1, [pc, #328]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c20:	6889      	ldr	r1, [r1, #8]
 8004c22:	f001 010c 	and.w	r1, r1, #12
 8004c26:	2908      	cmp	r1, #8
 8004c28:	d00d      	beq.n	8004c46 <HAL_RCC_GetSysClockFreq+0x3e>
 8004c2a:	2908      	cmp	r1, #8
 8004c2c:	f200 8094 	bhi.w	8004d58 <HAL_RCC_GetSysClockFreq+0x150>
 8004c30:	2900      	cmp	r1, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_RCC_GetSysClockFreq+0x32>
 8004c34:	2904      	cmp	r1, #4
 8004c36:	d003      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x38>
 8004c38:	e08e      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c3a:	4b4c      	ldr	r3, [pc, #304]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x164>)
 8004c3c:	60bb      	str	r3, [r7, #8]
      break;
 8004c3e:	e08e      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c40:	4b4b      	ldr	r3, [pc, #300]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004c42:	60bb      	str	r3, [r7, #8]
      break;
 8004c44:	e08b      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c46:	4948      	ldr	r1, [pc, #288]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c48:	6849      	ldr	r1, [r1, #4]
 8004c4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004c4e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c50:	4945      	ldr	r1, [pc, #276]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c52:	6849      	ldr	r1, [r1, #4]
 8004c54:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004c58:	2900      	cmp	r1, #0
 8004c5a:	d024      	beq.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c5c:	4942      	ldr	r1, [pc, #264]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c5e:	6849      	ldr	r1, [r1, #4]
 8004c60:	0989      	lsrs	r1, r1, #6
 8004c62:	4608      	mov	r0, r1
 8004c64:	f04f 0100 	mov.w	r1, #0
 8004c68:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004c6c:	f04f 0500 	mov.w	r5, #0
 8004c70:	ea00 0204 	and.w	r2, r0, r4
 8004c74:	ea01 0305 	and.w	r3, r1, r5
 8004c78:	493d      	ldr	r1, [pc, #244]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004c7a:	fb01 f003 	mul.w	r0, r1, r3
 8004c7e:	2100      	movs	r1, #0
 8004c80:	fb01 f102 	mul.w	r1, r1, r2
 8004c84:	1844      	adds	r4, r0, r1
 8004c86:	493a      	ldr	r1, [pc, #232]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004c88:	fba2 0101 	umull	r0, r1, r2, r1
 8004c8c:	1863      	adds	r3, r4, r1
 8004c8e:	4619      	mov	r1, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	461a      	mov	r2, r3
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	f7fc f800 	bl	8000c9c <__aeabi_uldivmod>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e04a      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca6:	4b30      	ldr	r3, [pc, #192]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	099b      	lsrs	r3, r3, #6
 8004cac:	461a      	mov	r2, r3
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cb6:	f04f 0100 	mov.w	r1, #0
 8004cba:	ea02 0400 	and.w	r4, r2, r0
 8004cbe:	ea03 0501 	and.w	r5, r3, r1
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	014b      	lsls	r3, r1, #5
 8004cd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cd4:	0142      	lsls	r2, r0, #5
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	1b00      	subs	r0, r0, r4
 8004cdc:	eb61 0105 	sbc.w	r1, r1, r5
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	018b      	lsls	r3, r1, #6
 8004cea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004cee:	0182      	lsls	r2, r0, #6
 8004cf0:	1a12      	subs	r2, r2, r0
 8004cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8004cf6:	f04f 0000 	mov.w	r0, #0
 8004cfa:	f04f 0100 	mov.w	r1, #0
 8004cfe:	00d9      	lsls	r1, r3, #3
 8004d00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d04:	00d0      	lsls	r0, r2, #3
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	1912      	adds	r2, r2, r4
 8004d0c:	eb45 0303 	adc.w	r3, r5, r3
 8004d10:	f04f 0000 	mov.w	r0, #0
 8004d14:	f04f 0100 	mov.w	r1, #0
 8004d18:	0299      	lsls	r1, r3, #10
 8004d1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d1e:	0290      	lsls	r0, r2, #10
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4610      	mov	r0, r2
 8004d26:	4619      	mov	r1, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	f7fb ffb4 	bl	8000c9c <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4613      	mov	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	0c1b      	lsrs	r3, r3, #16
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	3301      	adds	r3, #1
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	60bb      	str	r3, [r7, #8]
      break;
 8004d56:	e002      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d58:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x164>)
 8004d5a:	60bb      	str	r3, [r7, #8]
      break;
 8004d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bdb0      	pop	{r4, r5, r7, pc}
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	00f42400 	.word	0x00f42400
 8004d70:	017d7840 	.word	0x017d7840

08004d74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d78:	4b03      	ldr	r3, [pc, #12]	; (8004d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000000 	.word	0x20000000

08004d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d90:	f7ff fff0 	bl	8004d74 <HAL_RCC_GetHCLKFreq>
 8004d94:	4602      	mov	r2, r0
 8004d96:	4b05      	ldr	r3, [pc, #20]	; (8004dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	0a9b      	lsrs	r3, r3, #10
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	4903      	ldr	r1, [pc, #12]	; (8004db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da2:	5ccb      	ldrb	r3, [r1, r3]
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40023800 	.word	0x40023800
 8004db0:	0801b464 	.word	0x0801b464

08004db4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	220f      	movs	r2, #15
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004dc4:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <HAL_RCC_GetClockConfig+0x5c>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 0203 	and.w	r2, r3, #3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004dd0:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <HAL_RCC_GetClockConfig+0x5c>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <HAL_RCC_GetClockConfig+0x5c>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004de8:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_RCC_GetClockConfig+0x5c>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	08db      	lsrs	r3, r3, #3
 8004dee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004df6:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <HAL_RCC_GetClockConfig+0x60>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 020f 	and.w	r2, r3, #15
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	601a      	str	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40023c00 	.word	0x40023c00

08004e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d012      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e40:	4b69      	ldr	r3, [pc, #420]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4a68      	ldr	r2, [pc, #416]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e4a:	6093      	str	r3, [r2, #8]
 8004e4c:	4b66      	ldr	r3, [pc, #408]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e54:	4964      	ldr	r1, [pc, #400]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d017      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e72:	4b5d      	ldr	r3, [pc, #372]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e80:	4959      	ldr	r1, [pc, #356]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e90:	d101      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e92:	2301      	movs	r3, #1
 8004e94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d017      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004eae:	4b4e      	ldr	r3, [pc, #312]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	494a      	ldr	r1, [pc, #296]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ecc:	d101      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004eda:	2301      	movs	r3, #1
 8004edc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004eea:	2301      	movs	r3, #1
 8004eec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 808b 	beq.w	8005012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004efc:	4b3a      	ldr	r3, [pc, #232]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	4a39      	ldr	r2, [pc, #228]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f06:	6413      	str	r3, [r2, #64]	; 0x40
 8004f08:	4b37      	ldr	r3, [pc, #220]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f14:	4b35      	ldr	r3, [pc, #212]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a34      	ldr	r2, [pc, #208]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f20:	f7fd feda 	bl	8002cd8 <HAL_GetTick>
 8004f24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f28:	f7fd fed6 	bl	8002cd8 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	; 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e357      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f3a:	4b2c      	ldr	r3, [pc, #176]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f46:	4b28      	ldr	r3, [pc, #160]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d035      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d02e      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f64:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f6e:	4b1e      	ldr	r3, [pc, #120]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	4a1d      	ldr	r2, [pc, #116]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7e:	4a1a      	ldr	r2, [pc, #104]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f86:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f8c:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d114      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7fd fe9e 	bl	8002cd8 <HAL_GetTick>
 8004f9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9e:	e00a      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa0:	f7fd fe9a 	bl	8002cd8 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e319      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb6:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0ee      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fce:	d111      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004fd0:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fdc:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fde:	400b      	ands	r3, r1
 8004fe0:	4901      	ldr	r1, [pc, #4]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
 8004fe6:	e00b      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	40007000 	.word	0x40007000
 8004ff0:	0ffffcff 	.word	0x0ffffcff
 8004ff4:	4bb1      	ldr	r3, [pc, #708]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	4ab0      	ldr	r2, [pc, #704]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ffa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ffe:	6093      	str	r3, [r2, #8]
 8005000:	4bae      	ldr	r3, [pc, #696]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500c:	49ab      	ldr	r1, [pc, #684]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800500e:	4313      	orrs	r3, r2
 8005010:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0310 	and.w	r3, r3, #16
 800501a:	2b00      	cmp	r3, #0
 800501c:	d010      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800501e:	4ba7      	ldr	r3, [pc, #668]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005024:	4aa5      	ldr	r2, [pc, #660]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800502a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800502e:	4ba3      	ldr	r3, [pc, #652]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005030:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	49a0      	ldr	r1, [pc, #640]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800504c:	4b9b      	ldr	r3, [pc, #620]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800505a:	4998      	ldr	r1, [pc, #608]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800506e:	4b93      	ldr	r3, [pc, #588]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005074:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800507c:	498f      	ldr	r1, [pc, #572]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005090:	4b8a      	ldr	r3, [pc, #552]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800509e:	4987      	ldr	r1, [pc, #540]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050b2:	4b82      	ldr	r3, [pc, #520]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c0:	497e      	ldr	r1, [pc, #504]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050d4:	4b79      	ldr	r3, [pc, #484]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f023 0203 	bic.w	r2, r3, #3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e2:	4976      	ldr	r1, [pc, #472]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050f6:	4b71      	ldr	r3, [pc, #452]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fc:	f023 020c 	bic.w	r2, r3, #12
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005104:	496d      	ldr	r1, [pc, #436]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005118:	4b68      	ldr	r3, [pc, #416]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005126:	4965      	ldr	r1, [pc, #404]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800513a:	4b60      	ldr	r3, [pc, #384]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005140:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005148:	495c      	ldr	r1, [pc, #368]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800515c:	4b57      	ldr	r3, [pc, #348]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516a:	4954      	ldr	r1, [pc, #336]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800517e:	4b4f      	ldr	r3, [pc, #316]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005184:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518c:	494b      	ldr	r1, [pc, #300]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80051a0:	4b46      	ldr	r3, [pc, #280]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ae:	4943      	ldr	r1, [pc, #268]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80051c2:	4b3e      	ldr	r3, [pc, #248]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d0:	493a      	ldr	r1, [pc, #232]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051e4:	4b35      	ldr	r3, [pc, #212]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051f2:	4932      	ldr	r1, [pc, #200]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d011      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005206:	4b2d      	ldr	r3, [pc, #180]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005214:	4929      	ldr	r1, [pc, #164]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005224:	d101      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005226:	2301      	movs	r3, #1
 8005228:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005236:	2301      	movs	r3, #1
 8005238:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005254:	4919      	ldr	r1, [pc, #100]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00b      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005268:	4b14      	ldr	r3, [pc, #80]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005278:	4910      	ldr	r1, [pc, #64]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d006      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 80d9 	beq.w	8005446 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005294:	4b09      	ldr	r3, [pc, #36]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a08      	ldr	r2, [pc, #32]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800529a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800529e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a0:	f7fd fd1a 	bl	8002cd8 <HAL_GetTick>
 80052a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052a6:	e00b      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052a8:	f7fd fd16 	bl	8002cd8 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b64      	cmp	r3, #100	; 0x64
 80052b4:	d904      	bls.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e197      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80052ba:	bf00      	nop
 80052bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052c0:	4b6c      	ldr	r3, [pc, #432]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1ed      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d021      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d11d      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052e0:	4b64      	ldr	r3, [pc, #400]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e6:	0c1b      	lsrs	r3, r3, #16
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052ee:	4b61      	ldr	r3, [pc, #388]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f4:	0e1b      	lsrs	r3, r3, #24
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	019a      	lsls	r2, r3, #6
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	431a      	orrs	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	061b      	lsls	r3, r3, #24
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	071b      	lsls	r3, r3, #28
 8005314:	4957      	ldr	r1, [pc, #348]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800533a:	2b00      	cmp	r3, #0
 800533c:	d02e      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005346:	d129      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005348:	4b4a      	ldr	r3, [pc, #296]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800534a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800534e:	0c1b      	lsrs	r3, r3, #16
 8005350:	f003 0303 	and.w	r3, r3, #3
 8005354:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005356:	4b47      	ldr	r3, [pc, #284]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800535c:	0f1b      	lsrs	r3, r3, #28
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	019a      	lsls	r2, r3, #6
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	041b      	lsls	r3, r3, #16
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	061b      	lsls	r3, r3, #24
 8005376:	431a      	orrs	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	071b      	lsls	r3, r3, #28
 800537c:	493d      	ldr	r1, [pc, #244]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005384:	4b3b      	ldr	r3, [pc, #236]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800538a:	f023 021f 	bic.w	r2, r3, #31
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	3b01      	subs	r3, #1
 8005394:	4937      	ldr	r1, [pc, #220]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01d      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053a8:	4b32      	ldr	r3, [pc, #200]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ae:	0e1b      	lsrs	r3, r3, #24
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053b6:	4b2f      	ldr	r3, [pc, #188]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053bc:	0f1b      	lsrs	r3, r3, #28
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	019a      	lsls	r2, r3, #6
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	041b      	lsls	r3, r3, #16
 80053d0:	431a      	orrs	r2, r3
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	061b      	lsls	r3, r3, #24
 80053d6:	431a      	orrs	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	071b      	lsls	r3, r3, #28
 80053dc:	4925      	ldr	r1, [pc, #148]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d011      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	019a      	lsls	r2, r3, #6
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	041b      	lsls	r3, r3, #16
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	061b      	lsls	r3, r3, #24
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	071b      	lsls	r3, r3, #28
 800540c:	4919      	ldr	r1, [pc, #100]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005414:	4b17      	ldr	r3, [pc, #92]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a16      	ldr	r2, [pc, #88]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800541a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800541e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005420:	f7fd fc5a 	bl	8002cd8 <HAL_GetTick>
 8005424:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005426:	e008      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005428:	f7fd fc56 	bl	8002cd8 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b64      	cmp	r3, #100	; 0x64
 8005434:	d901      	bls.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e0d7      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800543a:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2b01      	cmp	r3, #1
 800544a:	f040 80cd 	bne.w	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800544e:	4b09      	ldr	r3, [pc, #36]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a08      	ldr	r2, [pc, #32]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800545a:	f7fd fc3d 	bl	8002cd8 <HAL_GetTick>
 800545e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005460:	e00a      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005462:	f7fd fc39 	bl	8002cd8 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b64      	cmp	r3, #100	; 0x64
 800546e:	d903      	bls.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e0ba      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005474:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005478:	4b5e      	ldr	r3, [pc, #376]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005484:	d0ed      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d02e      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d12a      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054ae:	4b51      	ldr	r3, [pc, #324]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b4:	0c1b      	lsrs	r3, r3, #16
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054bc:	4b4d      	ldr	r3, [pc, #308]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c2:	0f1b      	lsrs	r3, r3, #28
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	019a      	lsls	r2, r3, #6
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	041b      	lsls	r3, r3, #16
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	061b      	lsls	r3, r3, #24
 80054dc:	431a      	orrs	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	071b      	lsls	r3, r3, #28
 80054e2:	4944      	ldr	r1, [pc, #272]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054ea:	4b42      	ldr	r3, [pc, #264]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	3b01      	subs	r3, #1
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	493d      	ldr	r1, [pc, #244]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d022      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005518:	d11d      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800551a:	4b36      	ldr	r3, [pc, #216]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	0e1b      	lsrs	r3, r3, #24
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005528:	4b32      	ldr	r3, [pc, #200]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	0f1b      	lsrs	r3, r3, #28
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	019a      	lsls	r2, r3, #6
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	431a      	orrs	r2, r3
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	061b      	lsls	r3, r3, #24
 8005548:	431a      	orrs	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	071b      	lsls	r3, r3, #28
 800554e:	4929      	ldr	r1, [pc, #164]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d028      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005562:	4b24      	ldr	r3, [pc, #144]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005568:	0e1b      	lsrs	r3, r3, #24
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005570:	4b20      	ldr	r3, [pc, #128]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005576:	0c1b      	lsrs	r3, r3, #16
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	019a      	lsls	r2, r3, #6
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	041b      	lsls	r3, r3, #16
 8005588:	431a      	orrs	r2, r3
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	061b      	lsls	r3, r3, #24
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	071b      	lsls	r3, r3, #28
 8005596:	4917      	ldr	r1, [pc, #92]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800559e:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	4911      	ldr	r1, [pc, #68]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055b4:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a0e      	ldr	r2, [pc, #56]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c0:	f7fd fb8a 	bl	8002cd8 <HAL_GetTick>
 80055c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055c8:	f7fd fb86 	bl	8002cd8 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b64      	cmp	r3, #100	; 0x64
 80055d4:	d901      	bls.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e007      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055da:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e6:	d1ef      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3720      	adds	r7, #32
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40023800 	.word	0x40023800

080055f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e049      	b.n	800569e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f841 	bl	80056a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3304      	adds	r3, #4
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f000 fa00 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d001      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e054      	b.n	800577e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a26      	ldr	r2, [pc, #152]	; (800578c <HAL_TIM_Base_Start_IT+0xd0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d022      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x80>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fe:	d01d      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x80>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a22      	ldr	r2, [pc, #136]	; (8005790 <HAL_TIM_Base_Start_IT+0xd4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d018      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x80>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a21      	ldr	r2, [pc, #132]	; (8005794 <HAL_TIM_Base_Start_IT+0xd8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d013      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x80>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1f      	ldr	r2, [pc, #124]	; (8005798 <HAL_TIM_Base_Start_IT+0xdc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00e      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x80>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1e      	ldr	r2, [pc, #120]	; (800579c <HAL_TIM_Base_Start_IT+0xe0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d009      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x80>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1c      	ldr	r2, [pc, #112]	; (80057a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x80>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1b      	ldr	r2, [pc, #108]	; (80057a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d115      	bne.n	8005768 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <HAL_TIM_Base_Start_IT+0xec>)
 8005744:	4013      	ands	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b06      	cmp	r3, #6
 800574c:	d015      	beq.n	800577a <HAL_TIM_Base_Start_IT+0xbe>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005754:	d011      	beq.n	800577a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0201 	orr.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005766:	e008      	b.n	800577a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	e000      	b.n	800577c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40010000 	.word	0x40010000
 8005790:	40000400 	.word	0x40000400
 8005794:	40000800 	.word	0x40000800
 8005798:	40000c00 	.word	0x40000c00
 800579c:	40010400 	.word	0x40010400
 80057a0:	40014000 	.word	0x40014000
 80057a4:	40001800 	.word	0x40001800
 80057a8:	00010007 	.word	0x00010007

080057ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d122      	bne.n	8005808 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d11b      	bne.n	8005808 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0202 	mvn.w	r2, #2
 80057d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f905 	bl	80059fe <HAL_TIM_IC_CaptureCallback>
 80057f4:	e005      	b.n	8005802 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f8f7 	bl	80059ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f908 	bl	8005a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b04      	cmp	r3, #4
 8005814:	d122      	bne.n	800585c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b04      	cmp	r3, #4
 8005822:	d11b      	bne.n	800585c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0204 	mvn.w	r2, #4
 800582c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f8db 	bl	80059fe <HAL_TIM_IC_CaptureCallback>
 8005848:	e005      	b.n	8005856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f8cd 	bl	80059ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f8de 	bl	8005a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b08      	cmp	r3, #8
 8005868:	d122      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d11b      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0208 	mvn.w	r2, #8
 8005880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2204      	movs	r2, #4
 8005886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f8b1 	bl	80059fe <HAL_TIM_IC_CaptureCallback>
 800589c:	e005      	b.n	80058aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f8a3 	bl	80059ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f8b4 	bl	8005a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b10      	cmp	r3, #16
 80058bc:	d122      	bne.n	8005904 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d11b      	bne.n	8005904 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0210 	mvn.w	r2, #16
 80058d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2208      	movs	r2, #8
 80058da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f887 	bl	80059fe <HAL_TIM_IC_CaptureCallback>
 80058f0:	e005      	b.n	80058fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f879 	bl	80059ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f88a 	bl	8005a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b01      	cmp	r3, #1
 8005910:	d10e      	bne.n	8005930 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	d107      	bne.n	8005930 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0201 	mvn.w	r2, #1
 8005928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fc f9b6 	bl	8001c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593a:	2b80      	cmp	r3, #128	; 0x80
 800593c:	d10e      	bne.n	800595c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005948:	2b80      	cmp	r3, #128	; 0x80
 800594a:	d107      	bne.n	800595c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f91a 	bl	8005b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596a:	d10e      	bne.n	800598a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005976:	2b80      	cmp	r3, #128	; 0x80
 8005978:	d107      	bne.n	800598a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f90d 	bl	8005ba4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d10e      	bne.n	80059b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a2:	2b40      	cmp	r3, #64	; 0x40
 80059a4:	d107      	bne.n	80059b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f838 	bl	8005a26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d10e      	bne.n	80059e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d107      	bne.n	80059e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f06f 0220 	mvn.w	r2, #32
 80059da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f8cd 	bl	8005b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
	...

08005a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a40      	ldr	r2, [pc, #256]	; (8005b50 <TIM_Base_SetConfig+0x114>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d013      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5a:	d00f      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a3d      	ldr	r2, [pc, #244]	; (8005b54 <TIM_Base_SetConfig+0x118>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00b      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a3c      	ldr	r2, [pc, #240]	; (8005b58 <TIM_Base_SetConfig+0x11c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d007      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a3b      	ldr	r2, [pc, #236]	; (8005b5c <TIM_Base_SetConfig+0x120>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a3a      	ldr	r2, [pc, #232]	; (8005b60 <TIM_Base_SetConfig+0x124>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d108      	bne.n	8005a8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a2f      	ldr	r2, [pc, #188]	; (8005b50 <TIM_Base_SetConfig+0x114>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d02b      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9c:	d027      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a2c      	ldr	r2, [pc, #176]	; (8005b54 <TIM_Base_SetConfig+0x118>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d023      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a2b      	ldr	r2, [pc, #172]	; (8005b58 <TIM_Base_SetConfig+0x11c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d01f      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a2a      	ldr	r2, [pc, #168]	; (8005b5c <TIM_Base_SetConfig+0x120>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d01b      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a29      	ldr	r2, [pc, #164]	; (8005b60 <TIM_Base_SetConfig+0x124>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d017      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a28      	ldr	r2, [pc, #160]	; (8005b64 <TIM_Base_SetConfig+0x128>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d013      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a27      	ldr	r2, [pc, #156]	; (8005b68 <TIM_Base_SetConfig+0x12c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00f      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a26      	ldr	r2, [pc, #152]	; (8005b6c <TIM_Base_SetConfig+0x130>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00b      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a25      	ldr	r2, [pc, #148]	; (8005b70 <TIM_Base_SetConfig+0x134>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d007      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a24      	ldr	r2, [pc, #144]	; (8005b74 <TIM_Base_SetConfig+0x138>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d003      	beq.n	8005aee <TIM_Base_SetConfig+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a23      	ldr	r2, [pc, #140]	; (8005b78 <TIM_Base_SetConfig+0x13c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d108      	bne.n	8005b00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a0a      	ldr	r2, [pc, #40]	; (8005b50 <TIM_Base_SetConfig+0x114>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_Base_SetConfig+0xf8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a0c      	ldr	r2, [pc, #48]	; (8005b60 <TIM_Base_SetConfig+0x124>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d103      	bne.n	8005b3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	615a      	str	r2, [r3, #20]
}
 8005b42:	bf00      	nop
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40010000 	.word	0x40010000
 8005b54:	40000400 	.word	0x40000400
 8005b58:	40000800 	.word	0x40000800
 8005b5c:	40000c00 	.word	0x40000c00
 8005b60:	40010400 	.word	0x40010400
 8005b64:	40014000 	.word	0x40014000
 8005b68:	40014400 	.word	0x40014400
 8005b6c:	40014800 	.word	0x40014800
 8005b70:	40001800 	.word	0x40001800
 8005b74:	40001c00 	.word	0x40001c00
 8005b78:	40002000 	.word	0x40002000

08005b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bca:	2b84      	cmp	r3, #132	; 0x84
 8005bcc:	d005      	beq.n	8005bda <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005bce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	3303      	adds	r3, #3
 8005bd8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005bda:	68fb      	ldr	r3, [r7, #12]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bee:	f3ef 8305 	mrs	r3, IPSR
 8005bf2:	607b      	str	r3, [r7, #4]
  return(result);
 8005bf4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	bf14      	ite	ne
 8005bfa:	2301      	movne	r3, #1
 8005bfc:	2300      	moveq	r3, #0
 8005bfe:	b2db      	uxtb	r3, r3
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005c10:	f001 fa2e 	bl	8007070 <vTaskStartScheduler>
  
  return osOK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c1c:	b087      	sub	sp, #28
 8005c1e:	af02      	add	r7, sp, #8
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685c      	ldr	r4, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c30:	b29e      	uxth	r6, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff ffbd 	bl	8005bb8 <makeFreeRtosPriority>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	f107 030c 	add.w	r3, r7, #12
 8005c44:	9301      	str	r3, [sp, #4]
 8005c46:	9200      	str	r2, [sp, #0]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	4632      	mov	r2, r6
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f000 ff7c 	bl	8006b4c <xTaskCreate>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d001      	beq.n	8005c5e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e000      	b.n	8005c60 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c68 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <osDelay+0x16>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	e000      	b.n	8005c80 <osDelay+0x18>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 f897 	bl	8006db4 <vTaskDelay>
  
  return osOK;
 8005c86:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	72fb      	strb	r3, [r7, #11]
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <osTimerCreate+0x18>
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	e000      	b.n	8005caa <osTimerCreate+0x1a>
 8005ca8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
  return xTimerCreate((const char *)"",
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	4803      	ldr	r0, [pc, #12]	; (8005cc4 <osTimerCreate+0x34>)
 8005cb6:	f001 ff39 	bl	8007b2c <xTimerCreate>
 8005cba:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	0801b3f0 	.word	0x0801b3f0

08005cc8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <osTimerStart+0x20>
    ticks = 1;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8005ce8:	f7ff ff7e 	bl	8005be8 <inHandlerMode>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d01a      	beq.n	8005d28 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8005cf2:	f107 030c 	add.w	r3, r7, #12
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	9200      	str	r2, [sp, #0]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	2109      	movs	r1, #9
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f001 ff72 	bl	8007be8 <xTimerGenericCommand>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d002      	beq.n	8005d10 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8005d0a:	23ff      	movs	r3, #255	; 0xff
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	e018      	b.n	8005d42 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d015      	beq.n	8005d42 <osTimerStart+0x7a>
 8005d16:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <osTimerStart+0x84>)
 8005d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	e00c      	b.n	8005d42 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	2104      	movs	r1, #4
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 ff58 	bl	8007be8 <xTimerGenericCommand>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d001      	beq.n	8005d42 <osTimerStart+0x7a>
      result = osErrorOS;
 8005d3e:	23ff      	movs	r3, #255	; 0xff
 8005d40:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8005d42:	697b      	ldr	r3, [r7, #20]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	e000ed04 	.word	0xe000ed04

08005d50 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8005d60:	f7ff ff42 	bl	8005be8 <inHandlerMode>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d019      	beq.n	8005d9e <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8005d6a:	f107 0308 	add.w	r3, r7, #8
 8005d6e:	2200      	movs	r2, #0
 8005d70:	9200      	str	r2, [sp, #0]
 8005d72:	2200      	movs	r2, #0
 8005d74:	2108      	movs	r1, #8
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f001 ff36 	bl	8007be8 <xTimerGenericCommand>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d001      	beq.n	8005d86 <osTimerStop+0x36>
      return osErrorOS;
 8005d82:	23ff      	movs	r3, #255	; 0xff
 8005d84:	e019      	b.n	8005dba <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d015      	beq.n	8005db8 <osTimerStop+0x68>
 8005d8c:	4b0d      	ldr	r3, [pc, #52]	; (8005dc4 <osTimerStop+0x74>)
 8005d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	e00c      	b.n	8005db8 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8005d9e:	2300      	movs	r3, #0
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	2300      	movs	r3, #0
 8005da4:	2200      	movs	r2, #0
 8005da6:	2103      	movs	r1, #3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f001 ff1d 	bl	8007be8 <xTimerGenericCommand>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d001      	beq.n	8005db8 <osTimerStop+0x68>
      result = osErrorOS;
 8005db4:	23ff      	movs	r3, #255	; 0xff
 8005db6:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8005db8:	68fb      	ldr	r3, [r7, #12]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	e000ed04 	.word	0xe000ed04

08005dc8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f000 f9d7 	bl	8006190 <xQueueGenericCreate>
 8005de2:	4603      	mov	r3, r0
#endif
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <osMessagePut+0x1e>
    ticks = 1;
 8005e06:	2301      	movs	r3, #1
 8005e08:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005e0a:	f7ff feed 	bl	8005be8 <inHandlerMode>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d018      	beq.n	8005e46 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005e14:	f107 0210 	add.w	r2, r7, #16
 8005e18:	f107 0108 	add.w	r1, r7, #8
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 fb1a 	bl	8006458 <xQueueGenericSendFromISR>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d001      	beq.n	8005e2e <osMessagePut+0x42>
      return osErrorOS;
 8005e2a:	23ff      	movs	r3, #255	; 0xff
 8005e2c:	e018      	b.n	8005e60 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d014      	beq.n	8005e5e <osMessagePut+0x72>
 8005e34:	4b0c      	ldr	r3, [pc, #48]	; (8005e68 <osMessagePut+0x7c>)
 8005e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	e00b      	b.n	8005e5e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005e46:	f107 0108 	add.w	r1, r7, #8
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 f9fc 	bl	800624c <xQueueGenericSend>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d001      	beq.n	8005e5e <osMessagePut+0x72>
      return osErrorOS;
 8005e5a:	23ff      	movs	r3, #255	; 0xff
 8005e5c:	e000      	b.n	8005e60 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005e6c:	b590      	push	{r4, r7, lr}
 8005e6e:	b08b      	sub	sp, #44	; 0x2c
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	617b      	str	r3, [r7, #20]
    return event;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	461c      	mov	r4, r3
 8005e8e:	f107 0314 	add.w	r3, r7, #20
 8005e92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e9a:	e054      	b.n	8005f46 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d103      	bne.n	8005eb4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005eac:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb2:	e009      	b.n	8005ec8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d006      	beq.n	8005ec8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <osMessageGet+0x5c>
      ticks = 1;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005ec8:	f7ff fe8e 	bl	8005be8 <inHandlerMode>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01c      	beq.n	8005f0c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005ed2:	f107 0220 	add.w	r2, r7, #32
 8005ed6:	f107 0314 	add.w	r3, r7, #20
 8005eda:	3304      	adds	r3, #4
 8005edc:	4619      	mov	r1, r3
 8005ede:	68b8      	ldr	r0, [r7, #8]
 8005ee0:	f000 fc40 	bl	8006764 <xQueueReceiveFromISR>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d102      	bne.n	8005ef0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005eea:	2310      	movs	r3, #16
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	e001      	b.n	8005ef4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01d      	beq.n	8005f36 <osMessageGet+0xca>
 8005efa:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <osMessageGet+0xe4>)
 8005efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	e014      	b.n	8005f36 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005f0c:	f107 0314 	add.w	r3, r7, #20
 8005f10:	3304      	adds	r3, #4
 8005f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f14:	4619      	mov	r1, r3
 8005f16:	68b8      	ldr	r0, [r7, #8]
 8005f18:	f000 fb3e 	bl	8006598 <xQueueReceive>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d102      	bne.n	8005f28 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005f22:	2310      	movs	r3, #16
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	e006      	b.n	8005f36 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <osMessageGet+0xc6>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e000      	b.n	8005f34 <osMessageGet+0xc8>
 8005f32:	2340      	movs	r3, #64	; 0x40
 8005f34:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	461c      	mov	r4, r3
 8005f3a:	f107 0314 	add.w	r3, r7, #20
 8005f3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	372c      	adds	r7, #44	; 0x2c
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd90      	pop	{r4, r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	e000ed04 	.word	0xe000ed04

08005f54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f103 0208 	add.w	r2, r3, #8
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f103 0208 	add.w	r2, r3, #8
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f103 0208 	add.w	r2, r3, #8
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	601a      	str	r2, [r3, #0]
}
 8005fea:	bf00      	nop
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b085      	sub	sp, #20
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d103      	bne.n	8006016 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e00c      	b.n	8006030 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3308      	adds	r3, #8
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e002      	b.n	8006024 <vListInsert+0x2e>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	429a      	cmp	r2, r3
 800602e:	d2f6      	bcs.n	800601e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	601a      	str	r2, [r3, #0]
}
 800605c:	bf00      	nop
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6892      	ldr	r2, [r2, #8]
 800607e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6852      	ldr	r2, [r2, #4]
 8006088:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	d103      	bne.n	800609c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	1e5a      	subs	r2, r3, #1
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10c      	bne.n	80060ea <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	b672      	cpsid	i
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	b662      	cpsie	i
 80060e4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80060ea:	f002 f977 	bl	80083dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f6:	68f9      	ldr	r1, [r7, #12]
 80060f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060fa:	fb01 f303 	mul.w	r3, r1, r3
 80060fe:	441a      	add	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611a:	3b01      	subs	r3, #1
 800611c:	68f9      	ldr	r1, [r7, #12]
 800611e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006120:	fb01 f303 	mul.w	r3, r1, r3
 8006124:	441a      	add	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	22ff      	movs	r2, #255	; 0xff
 800612e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	22ff      	movs	r2, #255	; 0xff
 8006136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d114      	bne.n	800616a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d01a      	beq.n	800617e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3310      	adds	r3, #16
 800614c:	4618      	mov	r0, r3
 800614e:	f001 fa09 	bl	8007564 <xTaskRemoveFromEventList>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d012      	beq.n	800617e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006158:	4b0c      	ldr	r3, [pc, #48]	; (800618c <xQueueGenericReset+0xd0>)
 800615a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	e009      	b.n	800617e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3310      	adds	r3, #16
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff fef0 	bl	8005f54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3324      	adds	r3, #36	; 0x24
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff feeb 	bl	8005f54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800617e:	f002 f961 	bl	8008444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006182:	2301      	movs	r3, #1
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	e000ed04 	.word	0xe000ed04

08006190 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10c      	bne.n	80061be <xQueueGenericCreate+0x2e>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	b672      	cpsid	i
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	b662      	cpsie	i
 80061b8:	613b      	str	r3, [r7, #16]
}
 80061ba:	bf00      	nop
 80061bc:	e7fe      	b.n	80061bc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	61fb      	str	r3, [r7, #28]
 80061c8:	e004      	b.n	80061d4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	fb02 f303 	mul.w	r3, r2, r3
 80061d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	3348      	adds	r3, #72	; 0x48
 80061d8:	4618      	mov	r0, r3
 80061da:	f002 fa2b 	bl	8008634 <pvPortMalloc>
 80061de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00d      	beq.n	8006202 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	3348      	adds	r3, #72	; 0x48
 80061ee:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061f0:	79fa      	ldrb	r2, [r7, #7]
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	4613      	mov	r3, r2
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 f805 	bl	800620c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006202:	69bb      	ldr	r3, [r7, #24]
	}
 8006204:	4618      	mov	r0, r3
 8006206:	3720      	adds	r7, #32
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e002      	b.n	800622e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800623a:	2101      	movs	r1, #1
 800623c:	69b8      	ldr	r0, [r7, #24]
 800623e:	f7ff ff3d 	bl	80060bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006242:	bf00      	nop
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08e      	sub	sp, #56	; 0x38
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800625a:	2300      	movs	r3, #0
 800625c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10c      	bne.n	8006282 <xQueueGenericSend+0x36>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	b672      	cpsid	i
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	b662      	cpsie	i
 800627c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <xQueueGenericSend+0x44>
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <xQueueGenericSend+0x48>
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <xQueueGenericSend+0x4a>
 8006294:	2300      	movs	r3, #0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10c      	bne.n	80062b4 <xQueueGenericSend+0x68>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	b672      	cpsid	i
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	b662      	cpsie	i
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d103      	bne.n	80062c2 <xQueueGenericSend+0x76>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <xQueueGenericSend+0x7a>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <xQueueGenericSend+0x7c>
 80062c6:	2300      	movs	r3, #0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10c      	bne.n	80062e6 <xQueueGenericSend+0x9a>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	b672      	cpsid	i
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	b662      	cpsie	i
 80062e0:	623b      	str	r3, [r7, #32]
}
 80062e2:	bf00      	nop
 80062e4:	e7fe      	b.n	80062e4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062e6:	f001 fadf 	bl	80078a8 <xTaskGetSchedulerState>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d102      	bne.n	80062f6 <xQueueGenericSend+0xaa>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <xQueueGenericSend+0xae>
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <xQueueGenericSend+0xb0>
 80062fa:	2300      	movs	r3, #0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10c      	bne.n	800631a <xQueueGenericSend+0xce>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	b672      	cpsid	i
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	b662      	cpsie	i
 8006314:	61fb      	str	r3, [r7, #28]
}
 8006316:	bf00      	nop
 8006318:	e7fe      	b.n	8006318 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800631a:	f002 f85f 	bl	80083dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006326:	429a      	cmp	r2, r3
 8006328:	d302      	bcc.n	8006330 <xQueueGenericSend+0xe4>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b02      	cmp	r3, #2
 800632e:	d129      	bne.n	8006384 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006336:	f000 fa9b 	bl	8006870 <prvCopyDataToQueue>
 800633a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	d010      	beq.n	8006366 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	3324      	adds	r3, #36	; 0x24
 8006348:	4618      	mov	r0, r3
 800634a:	f001 f90b 	bl	8007564 <xTaskRemoveFromEventList>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d013      	beq.n	800637c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006354:	4b3f      	ldr	r3, [pc, #252]	; (8006454 <xQueueGenericSend+0x208>)
 8006356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	e00a      	b.n	800637c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	2b00      	cmp	r3, #0
 800636a:	d007      	beq.n	800637c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800636c:	4b39      	ldr	r3, [pc, #228]	; (8006454 <xQueueGenericSend+0x208>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800637c:	f002 f862 	bl	8008444 <vPortExitCritical>
				return pdPASS;
 8006380:	2301      	movs	r3, #1
 8006382:	e063      	b.n	800644c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d103      	bne.n	8006392 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800638a:	f002 f85b 	bl	8008444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800638e:	2300      	movs	r3, #0
 8006390:	e05c      	b.n	800644c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006394:	2b00      	cmp	r3, #0
 8006396:	d106      	bne.n	80063a6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006398:	f107 0314 	add.w	r3, r7, #20
 800639c:	4618      	mov	r0, r3
 800639e:	f001 f945 	bl	800762c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063a2:	2301      	movs	r3, #1
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063a6:	f002 f84d 	bl	8008444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063aa:	f000 feb3 	bl	8007114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063ae:	f002 f815 	bl	80083dc <vPortEnterCritical>
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063b8:	b25b      	sxtb	r3, r3
 80063ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063be:	d103      	bne.n	80063c8 <xQueueGenericSend+0x17c>
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ce:	b25b      	sxtb	r3, r3
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d4:	d103      	bne.n	80063de <xQueueGenericSend+0x192>
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063de:	f002 f831 	bl	8008444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063e2:	1d3a      	adds	r2, r7, #4
 80063e4:	f107 0314 	add.w	r3, r7, #20
 80063e8:	4611      	mov	r1, r2
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 f934 	bl	8007658 <xTaskCheckForTimeOut>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d124      	bne.n	8006440 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063f8:	f000 fb32 	bl	8006a60 <prvIsQueueFull>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d018      	beq.n	8006434 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	3310      	adds	r3, #16
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	4611      	mov	r1, r2
 800640a:	4618      	mov	r0, r3
 800640c:	f001 f856 	bl	80074bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006412:	f000 fabd 	bl	8006990 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006416:	f000 fe8b 	bl	8007130 <xTaskResumeAll>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	f47f af7c 	bne.w	800631a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006422:	4b0c      	ldr	r3, [pc, #48]	; (8006454 <xQueueGenericSend+0x208>)
 8006424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	e772      	b.n	800631a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006436:	f000 faab 	bl	8006990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800643a:	f000 fe79 	bl	8007130 <xTaskResumeAll>
 800643e:	e76c      	b.n	800631a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006442:	f000 faa5 	bl	8006990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006446:	f000 fe73 	bl	8007130 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800644a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800644c:	4618      	mov	r0, r3
 800644e:	3738      	adds	r7, #56	; 0x38
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	e000ed04 	.word	0xe000ed04

08006458 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08e      	sub	sp, #56	; 0x38
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10c      	bne.n	800648a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	b672      	cpsid	i
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	b662      	cpsie	i
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006486:	bf00      	nop
 8006488:	e7fe      	b.n	8006488 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d103      	bne.n	8006498 <xQueueGenericSendFromISR+0x40>
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <xQueueGenericSendFromISR+0x44>
 8006498:	2301      	movs	r3, #1
 800649a:	e000      	b.n	800649e <xQueueGenericSendFromISR+0x46>
 800649c:	2300      	movs	r3, #0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10c      	bne.n	80064bc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	b672      	cpsid	i
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	b662      	cpsie	i
 80064b6:	623b      	str	r3, [r7, #32]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d103      	bne.n	80064ca <xQueueGenericSendFromISR+0x72>
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <xQueueGenericSendFromISR+0x76>
 80064ca:	2301      	movs	r3, #1
 80064cc:	e000      	b.n	80064d0 <xQueueGenericSendFromISR+0x78>
 80064ce:	2300      	movs	r3, #0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10c      	bne.n	80064ee <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	b672      	cpsid	i
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	b662      	cpsie	i
 80064e8:	61fb      	str	r3, [r7, #28]
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064ee:	f002 f85d 	bl	80085ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064f2:	f3ef 8211 	mrs	r2, BASEPRI
 80064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fa:	b672      	cpsid	i
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	b662      	cpsie	i
 800650a:	61ba      	str	r2, [r7, #24]
 800650c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800650e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006510:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651a:	429a      	cmp	r2, r3
 800651c:	d302      	bcc.n	8006524 <xQueueGenericSendFromISR+0xcc>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d12c      	bne.n	800657e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800652a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	68b9      	ldr	r1, [r7, #8]
 8006532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006534:	f000 f99c 	bl	8006870 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006538:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d112      	bne.n	8006568 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	2b00      	cmp	r3, #0
 8006548:	d016      	beq.n	8006578 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	3324      	adds	r3, #36	; 0x24
 800654e:	4618      	mov	r0, r3
 8006550:	f001 f808 	bl	8007564 <xTaskRemoveFromEventList>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00e      	beq.n	8006578 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	e007      	b.n	8006578 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006568:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800656c:	3301      	adds	r3, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	b25a      	sxtb	r2, r3
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006578:	2301      	movs	r3, #1
 800657a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800657c:	e001      	b.n	8006582 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800657e:	2300      	movs	r3, #0
 8006580:	637b      	str	r3, [r7, #52]	; 0x34
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800658c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006590:	4618      	mov	r0, r3
 8006592:	3738      	adds	r7, #56	; 0x38
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08c      	sub	sp, #48	; 0x30
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065a4:	2300      	movs	r3, #0
 80065a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10c      	bne.n	80065cc <xQueueReceive+0x34>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	b672      	cpsid	i
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	b662      	cpsie	i
 80065c6:	623b      	str	r3, [r7, #32]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d103      	bne.n	80065da <xQueueReceive+0x42>
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <xQueueReceive+0x46>
 80065da:	2301      	movs	r3, #1
 80065dc:	e000      	b.n	80065e0 <xQueueReceive+0x48>
 80065de:	2300      	movs	r3, #0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10c      	bne.n	80065fe <xQueueReceive+0x66>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	b672      	cpsid	i
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	b662      	cpsie	i
 80065f8:	61fb      	str	r3, [r7, #28]
}
 80065fa:	bf00      	nop
 80065fc:	e7fe      	b.n	80065fc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065fe:	f001 f953 	bl	80078a8 <xTaskGetSchedulerState>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d102      	bne.n	800660e <xQueueReceive+0x76>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <xQueueReceive+0x7a>
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <xQueueReceive+0x7c>
 8006612:	2300      	movs	r3, #0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10c      	bne.n	8006632 <xQueueReceive+0x9a>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661c:	b672      	cpsid	i
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	b662      	cpsie	i
 800662c:	61bb      	str	r3, [r7, #24]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006632:	f001 fed3 	bl	80083dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	2b00      	cmp	r3, #0
 8006640:	d01f      	beq.n	8006682 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006642:	68b9      	ldr	r1, [r7, #8]
 8006644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006646:	f000 f97d 	bl	8006944 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	1e5a      	subs	r2, r3, #1
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00f      	beq.n	800667a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	3310      	adds	r3, #16
 800665e:	4618      	mov	r0, r3
 8006660:	f000 ff80 	bl	8007564 <xTaskRemoveFromEventList>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800666a:	4b3d      	ldr	r3, [pc, #244]	; (8006760 <xQueueReceive+0x1c8>)
 800666c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800667a:	f001 fee3 	bl	8008444 <vPortExitCritical>
				return pdPASS;
 800667e:	2301      	movs	r3, #1
 8006680:	e069      	b.n	8006756 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d103      	bne.n	8006690 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006688:	f001 fedc 	bl	8008444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800668c:	2300      	movs	r3, #0
 800668e:	e062      	b.n	8006756 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006696:	f107 0310 	add.w	r3, r7, #16
 800669a:	4618      	mov	r0, r3
 800669c:	f000 ffc6 	bl	800762c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066a0:	2301      	movs	r3, #1
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066a4:	f001 fece 	bl	8008444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066a8:	f000 fd34 	bl	8007114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066ac:	f001 fe96 	bl	80083dc <vPortEnterCritical>
 80066b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066b6:	b25b      	sxtb	r3, r3
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d103      	bne.n	80066c6 <xQueueReceive+0x12e>
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066cc:	b25b      	sxtb	r3, r3
 80066ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d2:	d103      	bne.n	80066dc <xQueueReceive+0x144>
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066dc:	f001 feb2 	bl	8008444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066e0:	1d3a      	adds	r2, r7, #4
 80066e2:	f107 0310 	add.w	r3, r7, #16
 80066e6:	4611      	mov	r1, r2
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 ffb5 	bl	8007658 <xTaskCheckForTimeOut>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d123      	bne.n	800673c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066f6:	f000 f99d 	bl	8006a34 <prvIsQueueEmpty>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d017      	beq.n	8006730 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	3324      	adds	r3, #36	; 0x24
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	4611      	mov	r1, r2
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fed7 	bl	80074bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800670e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006710:	f000 f93e 	bl	8006990 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006714:	f000 fd0c 	bl	8007130 <xTaskResumeAll>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d189      	bne.n	8006632 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800671e:	4b10      	ldr	r3, [pc, #64]	; (8006760 <xQueueReceive+0x1c8>)
 8006720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	e780      	b.n	8006632 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006732:	f000 f92d 	bl	8006990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006736:	f000 fcfb 	bl	8007130 <xTaskResumeAll>
 800673a:	e77a      	b.n	8006632 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800673c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800673e:	f000 f927 	bl	8006990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006742:	f000 fcf5 	bl	8007130 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006748:	f000 f974 	bl	8006a34 <prvIsQueueEmpty>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	f43f af6f 	beq.w	8006632 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006754:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006756:	4618      	mov	r0, r3
 8006758:	3730      	adds	r7, #48	; 0x30
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	e000ed04 	.word	0xe000ed04

08006764 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08e      	sub	sp, #56	; 0x38
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10c      	bne.n	8006794 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	b672      	cpsid	i
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	b662      	cpsie	i
 800678e:	623b      	str	r3, [r7, #32]
}
 8006790:	bf00      	nop
 8006792:	e7fe      	b.n	8006792 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d103      	bne.n	80067a2 <xQueueReceiveFromISR+0x3e>
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <xQueueReceiveFromISR+0x42>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e000      	b.n	80067a8 <xQueueReceiveFromISR+0x44>
 80067a6:	2300      	movs	r3, #0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10c      	bne.n	80067c6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	b672      	cpsid	i
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	b662      	cpsie	i
 80067c0:	61fb      	str	r3, [r7, #28]
}
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067c6:	f001 fef1 	bl	80085ac <vPortValidateInterruptPriority>
	__asm volatile
 80067ca:	f3ef 8211 	mrs	r2, BASEPRI
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	b672      	cpsid	i
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	b662      	cpsie	i
 80067e2:	61ba      	str	r2, [r7, #24]
 80067e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80067e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d02f      	beq.n	8006856 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006804:	f000 f89e 	bl	8006944 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	1e5a      	subs	r2, r3, #1
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006810:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006818:	d112      	bne.n	8006840 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d016      	beq.n	8006850 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	3310      	adds	r3, #16
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fe9c 	bl	8007564 <xTaskRemoveFromEventList>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00e      	beq.n	8006850 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	e007      	b.n	8006850 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006844:	3301      	adds	r3, #1
 8006846:	b2db      	uxtb	r3, r3
 8006848:	b25a      	sxtb	r2, r3
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006850:	2301      	movs	r3, #1
 8006852:	637b      	str	r3, [r7, #52]	; 0x34
 8006854:	e001      	b.n	800685a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8006856:	2300      	movs	r3, #0
 8006858:	637b      	str	r3, [r7, #52]	; 0x34
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f383 8811 	msr	BASEPRI, r3
}
 8006864:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006868:	4618      	mov	r0, r3
 800686a:	3738      	adds	r7, #56	; 0x38
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10d      	bne.n	80068aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d14d      	bne.n	8006932 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	4618      	mov	r0, r3
 800689c:	f001 f822 	bl	80078e4 <xTaskPriorityDisinherit>
 80068a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	609a      	str	r2, [r3, #8]
 80068a8:	e043      	b.n	8006932 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d119      	bne.n	80068e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6858      	ldr	r0, [r3, #4]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	461a      	mov	r2, r3
 80068ba:	68b9      	ldr	r1, [r7, #8]
 80068bc:	f013 ff88 	bl	801a7d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	441a      	add	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d32b      	bcc.n	8006932 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	605a      	str	r2, [r3, #4]
 80068e2:	e026      	b.n	8006932 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	68d8      	ldr	r0, [r3, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	461a      	mov	r2, r3
 80068ee:	68b9      	ldr	r1, [r7, #8]
 80068f0:	f013 ff6e 	bl	801a7d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	425b      	negs	r3, r3
 80068fe:	441a      	add	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	429a      	cmp	r2, r3
 800690e:	d207      	bcs.n	8006920 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006918:	425b      	negs	r3, r3
 800691a:	441a      	add	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b02      	cmp	r3, #2
 8006924:	d105      	bne.n	8006932 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	3b01      	subs	r3, #1
 8006930:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800693a:	697b      	ldr	r3, [r7, #20]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	d018      	beq.n	8006988 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	441a      	add	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	429a      	cmp	r2, r3
 800696e:	d303      	bcc.n	8006978 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68d9      	ldr	r1, [r3, #12]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006980:	461a      	mov	r2, r3
 8006982:	6838      	ldr	r0, [r7, #0]
 8006984:	f013 ff24 	bl	801a7d0 <memcpy>
	}
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006998:	f001 fd20 	bl	80083dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069a4:	e011      	b.n	80069ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d012      	beq.n	80069d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	3324      	adds	r3, #36	; 0x24
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fdd6 	bl	8007564 <xTaskRemoveFromEventList>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069be:	f000 feb1 	bl	8007724 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	dce9      	bgt.n	80069a6 <prvUnlockQueue+0x16>
 80069d2:	e000      	b.n	80069d6 <prvUnlockQueue+0x46>
					break;
 80069d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	22ff      	movs	r2, #255	; 0xff
 80069da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069de:	f001 fd31 	bl	8008444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069e2:	f001 fcfb 	bl	80083dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069ee:	e011      	b.n	8006a14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d012      	beq.n	8006a1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3310      	adds	r3, #16
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 fdb1 	bl	8007564 <xTaskRemoveFromEventList>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a08:	f000 fe8c 	bl	8007724 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	dce9      	bgt.n	80069f0 <prvUnlockQueue+0x60>
 8006a1c:	e000      	b.n	8006a20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	22ff      	movs	r2, #255	; 0xff
 8006a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a28:	f001 fd0c 	bl	8008444 <vPortExitCritical>
}
 8006a2c:	bf00      	nop
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a3c:	f001 fcce 	bl	80083dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d102      	bne.n	8006a4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	e001      	b.n	8006a52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a52:	f001 fcf7 	bl	8008444 <vPortExitCritical>

	return xReturn;
 8006a56:	68fb      	ldr	r3, [r7, #12]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a68:	f001 fcb8 	bl	80083dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d102      	bne.n	8006a7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	e001      	b.n	8006a82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a82:	f001 fcdf 	bl	8008444 <vPortExitCritical>

	return xReturn;
 8006a86:	68fb      	ldr	r3, [r7, #12]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	e014      	b.n	8006aca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006aa0:	4a0f      	ldr	r2, [pc, #60]	; (8006ae0 <vQueueAddToRegistry+0x50>)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10b      	bne.n	8006ac4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006aac:	490c      	ldr	r1, [pc, #48]	; (8006ae0 <vQueueAddToRegistry+0x50>)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006ab6:	4a0a      	ldr	r2, [pc, #40]	; (8006ae0 <vQueueAddToRegistry+0x50>)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	4413      	add	r3, r2
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ac2:	e006      	b.n	8006ad2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b07      	cmp	r3, #7
 8006ace:	d9e7      	bls.n	8006aa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ad0:	bf00      	nop
 8006ad2:	bf00      	nop
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	2001d518 	.word	0x2001d518

08006ae4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006af4:	f001 fc72 	bl	80083dc <vPortEnterCritical>
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006afe:	b25b      	sxtb	r3, r3
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d103      	bne.n	8006b0e <vQueueWaitForMessageRestricted+0x2a>
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b14:	b25b      	sxtb	r3, r3
 8006b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1a:	d103      	bne.n	8006b24 <vQueueWaitForMessageRestricted+0x40>
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b24:	f001 fc8e 	bl	8008444 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d106      	bne.n	8006b3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	3324      	adds	r3, #36	; 0x24
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 fce5 	bl	8007508 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b3e:	6978      	ldr	r0, [r7, #20]
 8006b40:	f7ff ff26 	bl	8006990 <prvUnlockQueue>
	}
 8006b44:	bf00      	nop
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08c      	sub	sp, #48	; 0x30
 8006b50:	af04      	add	r7, sp, #16
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b5c:	88fb      	ldrh	r3, [r7, #6]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f001 fd67 	bl	8008634 <pvPortMalloc>
 8006b66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00e      	beq.n	8006b8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b6e:	2054      	movs	r0, #84	; 0x54
 8006b70:	f001 fd60 	bl	8008634 <pvPortMalloc>
 8006b74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	631a      	str	r2, [r3, #48]	; 0x30
 8006b82:	e005      	b.n	8006b90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b84:	6978      	ldr	r0, [r7, #20]
 8006b86:	f001 fe1f 	bl	80087c8 <vPortFree>
 8006b8a:	e001      	b.n	8006b90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d013      	beq.n	8006bbe <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b96:	88fa      	ldrh	r2, [r7, #6]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	9303      	str	r3, [sp, #12]
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	9302      	str	r3, [sp, #8]
 8006ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 f80e 	bl	8006bce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bb2:	69f8      	ldr	r0, [r7, #28]
 8006bb4:	f000 f894 	bl	8006ce0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	61bb      	str	r3, [r7, #24]
 8006bbc:	e002      	b.n	8006bc4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006bc4:	69bb      	ldr	r3, [r7, #24]
	}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3720      	adds	r7, #32
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b088      	sub	sp, #32
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
 8006bda:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006be6:	440b      	add	r3, r1
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	f023 0307 	bic.w	r3, r3, #7
 8006bf4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	f003 0307 	and.w	r3, r3, #7
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00c      	beq.n	8006c1a <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	b672      	cpsid	i
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	b662      	cpsie	i
 8006c14:	617b      	str	r3, [r7, #20]
}
 8006c16:	bf00      	nop
 8006c18:	e7fe      	b.n	8006c18 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d01f      	beq.n	8006c60 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c20:	2300      	movs	r3, #0
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	e012      	b.n	8006c4c <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	7819      	ldrb	r1, [r3, #0]
 8006c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	4413      	add	r3, r2
 8006c34:	3334      	adds	r3, #52	; 0x34
 8006c36:	460a      	mov	r2, r1
 8006c38:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	4413      	add	r3, r2
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d006      	beq.n	8006c54 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	61fb      	str	r3, [r7, #28]
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b0f      	cmp	r3, #15
 8006c50:	d9e9      	bls.n	8006c26 <prvInitialiseNewTask+0x58>
 8006c52:	e000      	b.n	8006c56 <prvInitialiseNewTask+0x88>
			{
				break;
 8006c54:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c5e:	e003      	b.n	8006c68 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	2b07      	cmp	r3, #7
 8006c6c:	d901      	bls.n	8006c72 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c6e:	2307      	movs	r3, #7
 8006c70:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c76:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c7c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	2200      	movs	r2, #0
 8006c82:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	3304      	adds	r3, #4
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff f983 	bl	8005f94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	3318      	adds	r3, #24
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff f97e 	bl	8005f94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	f1c3 0208 	rsb	r2, r3, #8
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	69b8      	ldr	r0, [r7, #24]
 8006cc2:	f001 fa7b 	bl	80081bc <pxPortInitialiseStack>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cd8:	bf00      	nop
 8006cda:	3720      	adds	r7, #32
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ce8:	f001 fb78 	bl	80083dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cec:	4b2a      	ldr	r3, [pc, #168]	; (8006d98 <prvAddNewTaskToReadyList+0xb8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	4a29      	ldr	r2, [pc, #164]	; (8006d98 <prvAddNewTaskToReadyList+0xb8>)
 8006cf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cf6:	4b29      	ldr	r3, [pc, #164]	; (8006d9c <prvAddNewTaskToReadyList+0xbc>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d109      	bne.n	8006d12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cfe:	4a27      	ldr	r2, [pc, #156]	; (8006d9c <prvAddNewTaskToReadyList+0xbc>)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d04:	4b24      	ldr	r3, [pc, #144]	; (8006d98 <prvAddNewTaskToReadyList+0xb8>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d110      	bne.n	8006d2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d0c:	f000 fd2e 	bl	800776c <prvInitialiseTaskLists>
 8006d10:	e00d      	b.n	8006d2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d12:	4b23      	ldr	r3, [pc, #140]	; (8006da0 <prvAddNewTaskToReadyList+0xc0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d109      	bne.n	8006d2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d1a:	4b20      	ldr	r3, [pc, #128]	; (8006d9c <prvAddNewTaskToReadyList+0xbc>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d802      	bhi.n	8006d2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d28:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <prvAddNewTaskToReadyList+0xbc>)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d2e:	4b1d      	ldr	r3, [pc, #116]	; (8006da4 <prvAddNewTaskToReadyList+0xc4>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3301      	adds	r3, #1
 8006d34:	4a1b      	ldr	r2, [pc, #108]	; (8006da4 <prvAddNewTaskToReadyList+0xc4>)
 8006d36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	409a      	lsls	r2, r3
 8006d40:	4b19      	ldr	r3, [pc, #100]	; (8006da8 <prvAddNewTaskToReadyList+0xc8>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	4a18      	ldr	r2, [pc, #96]	; (8006da8 <prvAddNewTaskToReadyList+0xc8>)
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4a15      	ldr	r2, [pc, #84]	; (8006dac <prvAddNewTaskToReadyList+0xcc>)
 8006d58:	441a      	add	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f7ff f924 	bl	8005fae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d66:	f001 fb6d 	bl	8008444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	; (8006da0 <prvAddNewTaskToReadyList+0xc0>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00e      	beq.n	8006d90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d72:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <prvAddNewTaskToReadyList+0xbc>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d207      	bcs.n	8006d90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d80:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <prvAddNewTaskToReadyList+0xd0>)
 8006d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	20019420 	.word	0x20019420
 8006d9c:	2001930c 	.word	0x2001930c
 8006da0:	2001942c 	.word	0x2001942c
 8006da4:	2001943c 	.word	0x2001943c
 8006da8:	20019428 	.word	0x20019428
 8006dac:	20019310 	.word	0x20019310
 8006db0:	e000ed04 	.word	0xe000ed04

08006db4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d019      	beq.n	8006dfa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006dc6:	4b14      	ldr	r3, [pc, #80]	; (8006e18 <vTaskDelay+0x64>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00c      	beq.n	8006de8 <vTaskDelay+0x34>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	b672      	cpsid	i
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	b662      	cpsie	i
 8006de2:	60bb      	str	r3, [r7, #8]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006de8:	f000 f994 	bl	8007114 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006dec:	2100      	movs	r1, #0
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fe02 	bl	80079f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006df4:	f000 f99c 	bl	8007130 <xTaskResumeAll>
 8006df8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d107      	bne.n	8006e10 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006e00:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <vTaskDelay+0x68>)
 8006e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e10:	bf00      	nop
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	20019448 	.word	0x20019448
 8006e1c:	e000ed04 	.word	0xe000ed04

08006e20 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006e28:	f001 fad8 	bl	80083dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d102      	bne.n	8006e38 <vTaskSuspend+0x18>
 8006e32:	4b3d      	ldr	r3, [pc, #244]	; (8006f28 <vTaskSuspend+0x108>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	e000      	b.n	8006e3a <vTaskSuspend+0x1a>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3304      	adds	r3, #4
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff f911 	bl	8006068 <uxListRemove>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d115      	bne.n	8006e78 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e50:	4936      	ldr	r1, [pc, #216]	; (8006f2c <vTaskSuspend+0x10c>)
 8006e52:	4613      	mov	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	440b      	add	r3, r1
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <vTaskSuspend+0x58>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	2201      	movs	r2, #1
 8006e68:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6c:	43da      	mvns	r2, r3
 8006e6e:	4b30      	ldr	r3, [pc, #192]	; (8006f30 <vTaskSuspend+0x110>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4013      	ands	r3, r2
 8006e74:	4a2e      	ldr	r2, [pc, #184]	; (8006f30 <vTaskSuspend+0x110>)
 8006e76:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d004      	beq.n	8006e8a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3318      	adds	r3, #24
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff f8ef 	bl	8006068 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4828      	ldr	r0, [pc, #160]	; (8006f34 <vTaskSuspend+0x114>)
 8006e92:	f7ff f88c 	bl	8005fae <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d103      	bne.n	8006eaa <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006eaa:	f001 facb 	bl	8008444 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006eae:	4b22      	ldr	r3, [pc, #136]	; (8006f38 <vTaskSuspend+0x118>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006eb6:	f001 fa91 	bl	80083dc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006eba:	f000 fcd5 	bl	8007868 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006ebe:	f001 fac1 	bl	8008444 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006ec2:	4b19      	ldr	r3, [pc, #100]	; (8006f28 <vTaskSuspend+0x108>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d129      	bne.n	8006f20 <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 8006ecc:	4b1a      	ldr	r3, [pc, #104]	; (8006f38 <vTaskSuspend+0x118>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d019      	beq.n	8006f08 <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006ed4:	4b19      	ldr	r3, [pc, #100]	; (8006f3c <vTaskSuspend+0x11c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00c      	beq.n	8006ef6 <vTaskSuspend+0xd6>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	b672      	cpsid	i
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	b662      	cpsie	i
 8006ef0:	60bb      	str	r3, [r7, #8]
}
 8006ef2:	bf00      	nop
 8006ef4:	e7fe      	b.n	8006ef4 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8006ef6:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <vTaskSuspend+0x120>)
 8006ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f06:	e00b      	b.n	8006f20 <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006f08:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <vTaskSuspend+0x114>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	4b0d      	ldr	r3, [pc, #52]	; (8006f44 <vTaskSuspend+0x124>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d103      	bne.n	8006f1c <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 8006f14:	4b04      	ldr	r3, [pc, #16]	; (8006f28 <vTaskSuspend+0x108>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]
	}
 8006f1a:	e001      	b.n	8006f20 <vTaskSuspend+0x100>
					vTaskSwitchContext();
 8006f1c:	f000 fa70 	bl	8007400 <vTaskSwitchContext>
	}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	2001930c 	.word	0x2001930c
 8006f2c:	20019310 	.word	0x20019310
 8006f30:	20019428 	.word	0x20019428
 8006f34:	2001940c 	.word	0x2001940c
 8006f38:	2001942c 	.word	0x2001942c
 8006f3c:	20019448 	.word	0x20019448
 8006f40:	e000ed04 	.word	0xe000ed04
 8006f44:	20019420 	.word	0x20019420

08006f48 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006f50:	2300      	movs	r3, #0
 8006f52:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10c      	bne.n	8006f78 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	b672      	cpsid	i
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	b662      	cpsie	i
 8006f72:	60fb      	str	r3, [r7, #12]
}
 8006f74:	bf00      	nop
 8006f76:	e7fe      	b.n	8006f76 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	4a0a      	ldr	r2, [pc, #40]	; (8006fa8 <prvTaskIsTaskSuspended+0x60>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d10a      	bne.n	8006f98 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f86:	4a09      	ldr	r2, [pc, #36]	; (8006fac <prvTaskIsTaskSuspended+0x64>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d005      	beq.n	8006f98 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8006f94:	2301      	movs	r3, #1
 8006f96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f98:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	2001940c 	.word	0x2001940c
 8006fac:	200193e0 	.word	0x200193e0

08006fb0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10c      	bne.n	8006fdc <vTaskResume+0x2c>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	b672      	cpsid	i
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	b662      	cpsie	i
 8006fd6:	60bb      	str	r3, [r7, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	e7fe      	b.n	8006fda <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006fdc:	4b20      	ldr	r3, [pc, #128]	; (8007060 <vTaskResume+0xb0>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d037      	beq.n	8007056 <vTaskResume+0xa6>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d034      	beq.n	8007056 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8006fec:	f001 f9f6 	bl	80083dc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7ff ffa9 	bl	8006f48 <prvTaskIsTaskSuspended>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d02a      	beq.n	8007052 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3304      	adds	r3, #4
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff f831 	bl	8006068 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700a:	2201      	movs	r2, #1
 800700c:	409a      	lsls	r2, r3
 800700e:	4b15      	ldr	r3, [pc, #84]	; (8007064 <vTaskResume+0xb4>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4313      	orrs	r3, r2
 8007014:	4a13      	ldr	r2, [pc, #76]	; (8007064 <vTaskResume+0xb4>)
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701c:	4613      	mov	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4a10      	ldr	r2, [pc, #64]	; (8007068 <vTaskResume+0xb8>)
 8007026:	441a      	add	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3304      	adds	r3, #4
 800702c:	4619      	mov	r1, r3
 800702e:	4610      	mov	r0, r2
 8007030:	f7fe ffbd 	bl	8005fae <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007038:	4b09      	ldr	r3, [pc, #36]	; (8007060 <vTaskResume+0xb0>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	429a      	cmp	r2, r3
 8007040:	d307      	bcc.n	8007052 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007042:	4b0a      	ldr	r3, [pc, #40]	; (800706c <vTaskResume+0xbc>)
 8007044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007052:	f001 f9f7 	bl	8008444 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007056:	bf00      	nop
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	2001930c 	.word	0x2001930c
 8007064:	20019428 	.word	0x20019428
 8007068:	20019310 	.word	0x20019310
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007076:	4b21      	ldr	r3, [pc, #132]	; (80070fc <vTaskStartScheduler+0x8c>)
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	2300      	movs	r3, #0
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	2300      	movs	r3, #0
 8007080:	2280      	movs	r2, #128	; 0x80
 8007082:	491f      	ldr	r1, [pc, #124]	; (8007100 <vTaskStartScheduler+0x90>)
 8007084:	481f      	ldr	r0, [pc, #124]	; (8007104 <vTaskStartScheduler+0x94>)
 8007086:	f7ff fd61 	bl	8006b4c <xTaskCreate>
 800708a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d102      	bne.n	8007098 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8007092:	f000 fd17 	bl	8007ac4 <xTimerCreateTimerTask>
 8007096:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d118      	bne.n	80070d0 <vTaskStartScheduler+0x60>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	b672      	cpsid	i
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	b662      	cpsie	i
 80070b2:	60bb      	str	r3, [r7, #8]
}
 80070b4:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070b6:	4b14      	ldr	r3, [pc, #80]	; (8007108 <vTaskStartScheduler+0x98>)
 80070b8:	f04f 32ff 	mov.w	r2, #4294967295
 80070bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070be:	4b13      	ldr	r3, [pc, #76]	; (800710c <vTaskStartScheduler+0x9c>)
 80070c0:	2201      	movs	r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070c4:	4b12      	ldr	r3, [pc, #72]	; (8007110 <vTaskStartScheduler+0xa0>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070ca:	f001 f909 	bl	80082e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070ce:	e010      	b.n	80070f2 <vTaskStartScheduler+0x82>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d6:	d10c      	bne.n	80070f2 <vTaskStartScheduler+0x82>
	__asm volatile
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	b672      	cpsid	i
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	b662      	cpsie	i
 80070ec:	607b      	str	r3, [r7, #4]
}
 80070ee:	bf00      	nop
 80070f0:	e7fe      	b.n	80070f0 <vTaskStartScheduler+0x80>
}
 80070f2:	bf00      	nop
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20019444 	.word	0x20019444
 8007100:	0801b3f4 	.word	0x0801b3f4
 8007104:	0800773d 	.word	0x0800773d
 8007108:	20019440 	.word	0x20019440
 800710c:	2001942c 	.word	0x2001942c
 8007110:	20019424 	.word	0x20019424

08007114 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007118:	4b04      	ldr	r3, [pc, #16]	; (800712c <vTaskSuspendAll+0x18>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3301      	adds	r3, #1
 800711e:	4a03      	ldr	r2, [pc, #12]	; (800712c <vTaskSuspendAll+0x18>)
 8007120:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007122:	bf00      	nop
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	20019448 	.word	0x20019448

08007130 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007136:	2300      	movs	r3, #0
 8007138:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800713a:	2300      	movs	r3, #0
 800713c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800713e:	4b42      	ldr	r3, [pc, #264]	; (8007248 <xTaskResumeAll+0x118>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10c      	bne.n	8007160 <xTaskResumeAll+0x30>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	b672      	cpsid	i
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	b662      	cpsie	i
 800715a:	603b      	str	r3, [r7, #0]
}
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007160:	f001 f93c 	bl	80083dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007164:	4b38      	ldr	r3, [pc, #224]	; (8007248 <xTaskResumeAll+0x118>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3b01      	subs	r3, #1
 800716a:	4a37      	ldr	r2, [pc, #220]	; (8007248 <xTaskResumeAll+0x118>)
 800716c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800716e:	4b36      	ldr	r3, [pc, #216]	; (8007248 <xTaskResumeAll+0x118>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d161      	bne.n	800723a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007176:	4b35      	ldr	r3, [pc, #212]	; (800724c <xTaskResumeAll+0x11c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d05d      	beq.n	800723a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800717e:	e02e      	b.n	80071de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007180:	4b33      	ldr	r3, [pc, #204]	; (8007250 <xTaskResumeAll+0x120>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3318      	adds	r3, #24
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe ff6b 	bl	8006068 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3304      	adds	r3, #4
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe ff66 	bl	8006068 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	2201      	movs	r2, #1
 80071a2:	409a      	lsls	r2, r3
 80071a4:	4b2b      	ldr	r3, [pc, #172]	; (8007254 <xTaskResumeAll+0x124>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	4a2a      	ldr	r2, [pc, #168]	; (8007254 <xTaskResumeAll+0x124>)
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b2:	4613      	mov	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4a27      	ldr	r2, [pc, #156]	; (8007258 <xTaskResumeAll+0x128>)
 80071bc:	441a      	add	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3304      	adds	r3, #4
 80071c2:	4619      	mov	r1, r3
 80071c4:	4610      	mov	r0, r2
 80071c6:	f7fe fef2 	bl	8005fae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ce:	4b23      	ldr	r3, [pc, #140]	; (800725c <xTaskResumeAll+0x12c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d302      	bcc.n	80071de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80071d8:	4b21      	ldr	r3, [pc, #132]	; (8007260 <xTaskResumeAll+0x130>)
 80071da:	2201      	movs	r2, #1
 80071dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071de:	4b1c      	ldr	r3, [pc, #112]	; (8007250 <xTaskResumeAll+0x120>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1cc      	bne.n	8007180 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80071ec:	f000 fb3c 	bl	8007868 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80071f0:	4b1c      	ldr	r3, [pc, #112]	; (8007264 <xTaskResumeAll+0x134>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d010      	beq.n	800721e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80071fc:	f000 f846 	bl	800728c <xTaskIncrementTick>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007206:	4b16      	ldr	r3, [pc, #88]	; (8007260 <xTaskResumeAll+0x130>)
 8007208:	2201      	movs	r2, #1
 800720a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3b01      	subs	r3, #1
 8007210:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1f1      	bne.n	80071fc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007218:	4b12      	ldr	r3, [pc, #72]	; (8007264 <xTaskResumeAll+0x134>)
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800721e:	4b10      	ldr	r3, [pc, #64]	; (8007260 <xTaskResumeAll+0x130>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d009      	beq.n	800723a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007226:	2301      	movs	r3, #1
 8007228:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800722a:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <xTaskResumeAll+0x138>)
 800722c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800723a:	f001 f903 	bl	8008444 <vPortExitCritical>

	return xAlreadyYielded;
 800723e:	68bb      	ldr	r3, [r7, #8]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	20019448 	.word	0x20019448
 800724c:	20019420 	.word	0x20019420
 8007250:	200193e0 	.word	0x200193e0
 8007254:	20019428 	.word	0x20019428
 8007258:	20019310 	.word	0x20019310
 800725c:	2001930c 	.word	0x2001930c
 8007260:	20019434 	.word	0x20019434
 8007264:	20019430 	.word	0x20019430
 8007268:	e000ed04 	.word	0xe000ed04

0800726c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007272:	4b05      	ldr	r3, [pc, #20]	; (8007288 <xTaskGetTickCount+0x1c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007278:	687b      	ldr	r3, [r7, #4]
}
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	20019424 	.word	0x20019424

0800728c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007292:	2300      	movs	r3, #0
 8007294:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007296:	4b4f      	ldr	r3, [pc, #316]	; (80073d4 <xTaskIncrementTick+0x148>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	f040 808a 	bne.w	80073b4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072a0:	4b4d      	ldr	r3, [pc, #308]	; (80073d8 <xTaskIncrementTick+0x14c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3301      	adds	r3, #1
 80072a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072a8:	4a4b      	ldr	r2, [pc, #300]	; (80073d8 <xTaskIncrementTick+0x14c>)
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d122      	bne.n	80072fa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80072b4:	4b49      	ldr	r3, [pc, #292]	; (80073dc <xTaskIncrementTick+0x150>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00c      	beq.n	80072d8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	b672      	cpsid	i
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	b662      	cpsie	i
 80072d2:	603b      	str	r3, [r7, #0]
}
 80072d4:	bf00      	nop
 80072d6:	e7fe      	b.n	80072d6 <xTaskIncrementTick+0x4a>
 80072d8:	4b40      	ldr	r3, [pc, #256]	; (80073dc <xTaskIncrementTick+0x150>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	4b40      	ldr	r3, [pc, #256]	; (80073e0 <xTaskIncrementTick+0x154>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a3e      	ldr	r2, [pc, #248]	; (80073dc <xTaskIncrementTick+0x150>)
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	4a3e      	ldr	r2, [pc, #248]	; (80073e0 <xTaskIncrementTick+0x154>)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	4b3d      	ldr	r3, [pc, #244]	; (80073e4 <xTaskIncrementTick+0x158>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3301      	adds	r3, #1
 80072f2:	4a3c      	ldr	r2, [pc, #240]	; (80073e4 <xTaskIncrementTick+0x158>)
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	f000 fab7 	bl	8007868 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072fa:	4b3b      	ldr	r3, [pc, #236]	; (80073e8 <xTaskIncrementTick+0x15c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	429a      	cmp	r2, r3
 8007302:	d348      	bcc.n	8007396 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007304:	4b35      	ldr	r3, [pc, #212]	; (80073dc <xTaskIncrementTick+0x150>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d104      	bne.n	8007318 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800730e:	4b36      	ldr	r3, [pc, #216]	; (80073e8 <xTaskIncrementTick+0x15c>)
 8007310:	f04f 32ff 	mov.w	r2, #4294967295
 8007314:	601a      	str	r2, [r3, #0]
					break;
 8007316:	e03e      	b.n	8007396 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007318:	4b30      	ldr	r3, [pc, #192]	; (80073dc <xTaskIncrementTick+0x150>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	429a      	cmp	r2, r3
 800732e:	d203      	bcs.n	8007338 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007330:	4a2d      	ldr	r2, [pc, #180]	; (80073e8 <xTaskIncrementTick+0x15c>)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007336:	e02e      	b.n	8007396 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	3304      	adds	r3, #4
 800733c:	4618      	mov	r0, r3
 800733e:	f7fe fe93 	bl	8006068 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	2b00      	cmp	r3, #0
 8007348:	d004      	beq.n	8007354 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	3318      	adds	r3, #24
 800734e:	4618      	mov	r0, r3
 8007350:	f7fe fe8a 	bl	8006068 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	2201      	movs	r2, #1
 800735a:	409a      	lsls	r2, r3
 800735c:	4b23      	ldr	r3, [pc, #140]	; (80073ec <xTaskIncrementTick+0x160>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4313      	orrs	r3, r2
 8007362:	4a22      	ldr	r2, [pc, #136]	; (80073ec <xTaskIncrementTick+0x160>)
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4a1f      	ldr	r2, [pc, #124]	; (80073f0 <xTaskIncrementTick+0x164>)
 8007374:	441a      	add	r2, r3
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	3304      	adds	r3, #4
 800737a:	4619      	mov	r1, r3
 800737c:	4610      	mov	r0, r2
 800737e:	f7fe fe16 	bl	8005fae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007386:	4b1b      	ldr	r3, [pc, #108]	; (80073f4 <xTaskIncrementTick+0x168>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	429a      	cmp	r2, r3
 800738e:	d3b9      	bcc.n	8007304 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007390:	2301      	movs	r3, #1
 8007392:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007394:	e7b6      	b.n	8007304 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007396:	4b17      	ldr	r3, [pc, #92]	; (80073f4 <xTaskIncrementTick+0x168>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739c:	4914      	ldr	r1, [pc, #80]	; (80073f0 <xTaskIncrementTick+0x164>)
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d907      	bls.n	80073be <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80073ae:	2301      	movs	r3, #1
 80073b0:	617b      	str	r3, [r7, #20]
 80073b2:	e004      	b.n	80073be <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80073b4:	4b10      	ldr	r3, [pc, #64]	; (80073f8 <xTaskIncrementTick+0x16c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3301      	adds	r3, #1
 80073ba:	4a0f      	ldr	r2, [pc, #60]	; (80073f8 <xTaskIncrementTick+0x16c>)
 80073bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80073be:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <xTaskIncrementTick+0x170>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80073c6:	2301      	movs	r3, #1
 80073c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80073ca:	697b      	ldr	r3, [r7, #20]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20019448 	.word	0x20019448
 80073d8:	20019424 	.word	0x20019424
 80073dc:	200193d8 	.word	0x200193d8
 80073e0:	200193dc 	.word	0x200193dc
 80073e4:	20019438 	.word	0x20019438
 80073e8:	20019440 	.word	0x20019440
 80073ec:	20019428 	.word	0x20019428
 80073f0:	20019310 	.word	0x20019310
 80073f4:	2001930c 	.word	0x2001930c
 80073f8:	20019430 	.word	0x20019430
 80073fc:	20019434 	.word	0x20019434

08007400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007406:	4b28      	ldr	r3, [pc, #160]	; (80074a8 <vTaskSwitchContext+0xa8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800740e:	4b27      	ldr	r3, [pc, #156]	; (80074ac <vTaskSwitchContext+0xac>)
 8007410:	2201      	movs	r2, #1
 8007412:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007414:	e041      	b.n	800749a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007416:	4b25      	ldr	r3, [pc, #148]	; (80074ac <vTaskSwitchContext+0xac>)
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800741c:	4b24      	ldr	r3, [pc, #144]	; (80074b0 <vTaskSwitchContext+0xb0>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	fab3 f383 	clz	r3, r3
 8007428:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800742a:	7afb      	ldrb	r3, [r7, #11]
 800742c:	f1c3 031f 	rsb	r3, r3, #31
 8007430:	617b      	str	r3, [r7, #20]
 8007432:	4920      	ldr	r1, [pc, #128]	; (80074b4 <vTaskSwitchContext+0xb4>)
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	4613      	mov	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	440b      	add	r3, r1
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10c      	bne.n	8007460 <vTaskSwitchContext+0x60>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	b672      	cpsid	i
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	b662      	cpsie	i
 800745a:	607b      	str	r3, [r7, #4]
}
 800745c:	bf00      	nop
 800745e:	e7fe      	b.n	800745e <vTaskSwitchContext+0x5e>
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	4613      	mov	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4a12      	ldr	r2, [pc, #72]	; (80074b4 <vTaskSwitchContext+0xb4>)
 800746c:	4413      	add	r3, r2
 800746e:	613b      	str	r3, [r7, #16]
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	605a      	str	r2, [r3, #4]
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	3308      	adds	r3, #8
 8007482:	429a      	cmp	r2, r3
 8007484:	d104      	bne.n	8007490 <vTaskSwitchContext+0x90>
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	605a      	str	r2, [r3, #4]
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	4a08      	ldr	r2, [pc, #32]	; (80074b8 <vTaskSwitchContext+0xb8>)
 8007498:	6013      	str	r3, [r2, #0]
}
 800749a:	bf00      	nop
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	20019448 	.word	0x20019448
 80074ac:	20019434 	.word	0x20019434
 80074b0:	20019428 	.word	0x20019428
 80074b4:	20019310 	.word	0x20019310
 80074b8:	2001930c 	.word	0x2001930c

080074bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10c      	bne.n	80074e6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	b672      	cpsid	i
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	b662      	cpsie	i
 80074e0:	60fb      	str	r3, [r7, #12]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074e6:	4b07      	ldr	r3, [pc, #28]	; (8007504 <vTaskPlaceOnEventList+0x48>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3318      	adds	r3, #24
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7fe fd81 	bl	8005ff6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074f4:	2101      	movs	r1, #1
 80074f6:	6838      	ldr	r0, [r7, #0]
 80074f8:	f000 fa7e 	bl	80079f8 <prvAddCurrentTaskToDelayedList>
}
 80074fc:	bf00      	nop
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	2001930c 	.word	0x2001930c

08007508 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10c      	bne.n	8007534 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	b672      	cpsid	i
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	b662      	cpsie	i
 800752e:	617b      	str	r3, [r7, #20]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007534:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <vTaskPlaceOnEventListRestricted+0x58>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3318      	adds	r3, #24
 800753a:	4619      	mov	r1, r3
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f7fe fd36 	bl	8005fae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007548:	f04f 33ff 	mov.w	r3, #4294967295
 800754c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	68b8      	ldr	r0, [r7, #8]
 8007552:	f000 fa51 	bl	80079f8 <prvAddCurrentTaskToDelayedList>
	}
 8007556:	bf00      	nop
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	2001930c 	.word	0x2001930c

08007564 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10c      	bne.n	8007594 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	b672      	cpsid	i
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	b662      	cpsie	i
 800758e:	60fb      	str	r3, [r7, #12]
}
 8007590:	bf00      	nop
 8007592:	e7fe      	b.n	8007592 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	3318      	adds	r3, #24
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe fd65 	bl	8006068 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800759e:	4b1d      	ldr	r3, [pc, #116]	; (8007614 <xTaskRemoveFromEventList+0xb0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d11c      	bne.n	80075e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	3304      	adds	r3, #4
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe fd5c 	bl	8006068 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	2201      	movs	r2, #1
 80075b6:	409a      	lsls	r2, r3
 80075b8:	4b17      	ldr	r3, [pc, #92]	; (8007618 <xTaskRemoveFromEventList+0xb4>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4313      	orrs	r3, r2
 80075be:	4a16      	ldr	r2, [pc, #88]	; (8007618 <xTaskRemoveFromEventList+0xb4>)
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c6:	4613      	mov	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4a13      	ldr	r2, [pc, #76]	; (800761c <xTaskRemoveFromEventList+0xb8>)
 80075d0:	441a      	add	r2, r3
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4619      	mov	r1, r3
 80075d8:	4610      	mov	r0, r2
 80075da:	f7fe fce8 	bl	8005fae <vListInsertEnd>
 80075de:	e005      	b.n	80075ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	3318      	adds	r3, #24
 80075e4:	4619      	mov	r1, r3
 80075e6:	480e      	ldr	r0, [pc, #56]	; (8007620 <xTaskRemoveFromEventList+0xbc>)
 80075e8:	f7fe fce1 	bl	8005fae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f0:	4b0c      	ldr	r3, [pc, #48]	; (8007624 <xTaskRemoveFromEventList+0xc0>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d905      	bls.n	8007606 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075fa:	2301      	movs	r3, #1
 80075fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075fe:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <xTaskRemoveFromEventList+0xc4>)
 8007600:	2201      	movs	r2, #1
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	e001      	b.n	800760a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007606:	2300      	movs	r3, #0
 8007608:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800760a:	697b      	ldr	r3, [r7, #20]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	20019448 	.word	0x20019448
 8007618:	20019428 	.word	0x20019428
 800761c:	20019310 	.word	0x20019310
 8007620:	200193e0 	.word	0x200193e0
 8007624:	2001930c 	.word	0x2001930c
 8007628:	20019434 	.word	0x20019434

0800762c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007634:	4b06      	ldr	r3, [pc, #24]	; (8007650 <vTaskInternalSetTimeOutState+0x24>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800763c:	4b05      	ldr	r3, [pc, #20]	; (8007654 <vTaskInternalSetTimeOutState+0x28>)
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	605a      	str	r2, [r3, #4]
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	20019438 	.word	0x20019438
 8007654:	20019424 	.word	0x20019424

08007658 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10c      	bne.n	8007682 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	b672      	cpsid	i
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	b662      	cpsie	i
 800767c:	613b      	str	r3, [r7, #16]
}
 800767e:	bf00      	nop
 8007680:	e7fe      	b.n	8007680 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10c      	bne.n	80076a2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768c:	b672      	cpsid	i
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	b662      	cpsie	i
 800769c:	60fb      	str	r3, [r7, #12]
}
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80076a2:	f000 fe9b 	bl	80083dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076a6:	4b1d      	ldr	r3, [pc, #116]	; (800771c <xTaskCheckForTimeOut+0xc4>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076be:	d102      	bne.n	80076c6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076c0:	2300      	movs	r3, #0
 80076c2:	61fb      	str	r3, [r7, #28]
 80076c4:	e023      	b.n	800770e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	4b15      	ldr	r3, [pc, #84]	; (8007720 <xTaskCheckForTimeOut+0xc8>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d007      	beq.n	80076e2 <xTaskCheckForTimeOut+0x8a>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d302      	bcc.n	80076e2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076dc:	2301      	movs	r3, #1
 80076de:	61fb      	str	r3, [r7, #28]
 80076e0:	e015      	b.n	800770e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d20b      	bcs.n	8007704 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff ff97 	bl	800762c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076fe:	2300      	movs	r3, #0
 8007700:	61fb      	str	r3, [r7, #28]
 8007702:	e004      	b.n	800770e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2200      	movs	r2, #0
 8007708:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800770a:	2301      	movs	r3, #1
 800770c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800770e:	f000 fe99 	bl	8008444 <vPortExitCritical>

	return xReturn;
 8007712:	69fb      	ldr	r3, [r7, #28]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3720      	adds	r7, #32
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20019424 	.word	0x20019424
 8007720:	20019438 	.word	0x20019438

08007724 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007724:	b480      	push	{r7}
 8007726:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007728:	4b03      	ldr	r3, [pc, #12]	; (8007738 <vTaskMissedYield+0x14>)
 800772a:	2201      	movs	r2, #1
 800772c:	601a      	str	r2, [r3, #0]
}
 800772e:	bf00      	nop
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	20019434 	.word	0x20019434

0800773c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007744:	f000 f852 	bl	80077ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007748:	4b06      	ldr	r3, [pc, #24]	; (8007764 <prvIdleTask+0x28>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d9f9      	bls.n	8007744 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007750:	4b05      	ldr	r3, [pc, #20]	; (8007768 <prvIdleTask+0x2c>)
 8007752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007760:	e7f0      	b.n	8007744 <prvIdleTask+0x8>
 8007762:	bf00      	nop
 8007764:	20019310 	.word	0x20019310
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007772:	2300      	movs	r3, #0
 8007774:	607b      	str	r3, [r7, #4]
 8007776:	e00c      	b.n	8007792 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	4613      	mov	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4a12      	ldr	r2, [pc, #72]	; (80077cc <prvInitialiseTaskLists+0x60>)
 8007784:	4413      	add	r3, r2
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe fbe4 	bl	8005f54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3301      	adds	r3, #1
 8007790:	607b      	str	r3, [r7, #4]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b07      	cmp	r3, #7
 8007796:	d9ef      	bls.n	8007778 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007798:	480d      	ldr	r0, [pc, #52]	; (80077d0 <prvInitialiseTaskLists+0x64>)
 800779a:	f7fe fbdb 	bl	8005f54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800779e:	480d      	ldr	r0, [pc, #52]	; (80077d4 <prvInitialiseTaskLists+0x68>)
 80077a0:	f7fe fbd8 	bl	8005f54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077a4:	480c      	ldr	r0, [pc, #48]	; (80077d8 <prvInitialiseTaskLists+0x6c>)
 80077a6:	f7fe fbd5 	bl	8005f54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077aa:	480c      	ldr	r0, [pc, #48]	; (80077dc <prvInitialiseTaskLists+0x70>)
 80077ac:	f7fe fbd2 	bl	8005f54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077b0:	480b      	ldr	r0, [pc, #44]	; (80077e0 <prvInitialiseTaskLists+0x74>)
 80077b2:	f7fe fbcf 	bl	8005f54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <prvInitialiseTaskLists+0x78>)
 80077b8:	4a05      	ldr	r2, [pc, #20]	; (80077d0 <prvInitialiseTaskLists+0x64>)
 80077ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <prvInitialiseTaskLists+0x7c>)
 80077be:	4a05      	ldr	r2, [pc, #20]	; (80077d4 <prvInitialiseTaskLists+0x68>)
 80077c0:	601a      	str	r2, [r3, #0]
}
 80077c2:	bf00      	nop
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20019310 	.word	0x20019310
 80077d0:	200193b0 	.word	0x200193b0
 80077d4:	200193c4 	.word	0x200193c4
 80077d8:	200193e0 	.word	0x200193e0
 80077dc:	200193f4 	.word	0x200193f4
 80077e0:	2001940c 	.word	0x2001940c
 80077e4:	200193d8 	.word	0x200193d8
 80077e8:	200193dc 	.word	0x200193dc

080077ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077f2:	e019      	b.n	8007828 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077f4:	f000 fdf2 	bl	80083dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f8:	4b10      	ldr	r3, [pc, #64]	; (800783c <prvCheckTasksWaitingTermination+0x50>)
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3304      	adds	r3, #4
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe fc2f 	bl	8006068 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800780a:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <prvCheckTasksWaitingTermination+0x54>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3b01      	subs	r3, #1
 8007810:	4a0b      	ldr	r2, [pc, #44]	; (8007840 <prvCheckTasksWaitingTermination+0x54>)
 8007812:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007814:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <prvCheckTasksWaitingTermination+0x58>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3b01      	subs	r3, #1
 800781a:	4a0a      	ldr	r2, [pc, #40]	; (8007844 <prvCheckTasksWaitingTermination+0x58>)
 800781c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800781e:	f000 fe11 	bl	8008444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f810 	bl	8007848 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007828:	4b06      	ldr	r3, [pc, #24]	; (8007844 <prvCheckTasksWaitingTermination+0x58>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e1      	bne.n	80077f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	200193f4 	.word	0x200193f4
 8007840:	20019420 	.word	0x20019420
 8007844:	20019408 	.word	0x20019408

08007848 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	4618      	mov	r0, r3
 8007856:	f000 ffb7 	bl	80087c8 <vPortFree>
			vPortFree( pxTCB );
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 ffb4 	bl	80087c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800786e:	4b0c      	ldr	r3, [pc, #48]	; (80078a0 <prvResetNextTaskUnblockTime+0x38>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007878:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <prvResetNextTaskUnblockTime+0x3c>)
 800787a:	f04f 32ff 	mov.w	r2, #4294967295
 800787e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007880:	e008      	b.n	8007894 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007882:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <prvResetNextTaskUnblockTime+0x38>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	4a04      	ldr	r2, [pc, #16]	; (80078a4 <prvResetNextTaskUnblockTime+0x3c>)
 8007892:	6013      	str	r3, [r2, #0]
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	200193d8 	.word	0x200193d8
 80078a4:	20019440 	.word	0x20019440

080078a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078ae:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <xTaskGetSchedulerState+0x34>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d102      	bne.n	80078bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078b6:	2301      	movs	r3, #1
 80078b8:	607b      	str	r3, [r7, #4]
 80078ba:	e008      	b.n	80078ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078bc:	4b08      	ldr	r3, [pc, #32]	; (80078e0 <xTaskGetSchedulerState+0x38>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d102      	bne.n	80078ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078c4:	2302      	movs	r3, #2
 80078c6:	607b      	str	r3, [r7, #4]
 80078c8:	e001      	b.n	80078ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078ca:	2300      	movs	r3, #0
 80078cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078ce:	687b      	ldr	r3, [r7, #4]
	}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	2001942c 	.word	0x2001942c
 80078e0:	20019448 	.word	0x20019448

080078e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078f0:	2300      	movs	r3, #0
 80078f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d072      	beq.n	80079e0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078fa:	4b3c      	ldr	r3, [pc, #240]	; (80079ec <xTaskPriorityDisinherit+0x108>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	429a      	cmp	r2, r3
 8007902:	d00c      	beq.n	800791e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	b672      	cpsid	i
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	b662      	cpsie	i
 8007918:	60fb      	str	r3, [r7, #12]
}
 800791a:	bf00      	nop
 800791c:	e7fe      	b.n	800791c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10c      	bne.n	8007940 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	b672      	cpsid	i
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	b662      	cpsie	i
 800793a:	60bb      	str	r3, [r7, #8]
}
 800793c:	bf00      	nop
 800793e:	e7fe      	b.n	800793e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007944:	1e5a      	subs	r2, r3, #1
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007952:	429a      	cmp	r2, r3
 8007954:	d044      	beq.n	80079e0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800795a:	2b00      	cmp	r3, #0
 800795c:	d140      	bne.n	80079e0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	3304      	adds	r3, #4
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe fb80 	bl	8006068 <uxListRemove>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d115      	bne.n	800799a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007972:	491f      	ldr	r1, [pc, #124]	; (80079f0 <xTaskPriorityDisinherit+0x10c>)
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	440b      	add	r3, r1
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10a      	bne.n	800799a <xTaskPriorityDisinherit+0xb6>
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	2201      	movs	r2, #1
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	43da      	mvns	r2, r3
 8007990:	4b18      	ldr	r3, [pc, #96]	; (80079f4 <xTaskPriorityDisinherit+0x110>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4013      	ands	r3, r2
 8007996:	4a17      	ldr	r2, [pc, #92]	; (80079f4 <xTaskPriorityDisinherit+0x110>)
 8007998:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a6:	f1c3 0208 	rsb	r2, r3, #8
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b2:	2201      	movs	r2, #1
 80079b4:	409a      	lsls	r2, r3
 80079b6:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <xTaskPriorityDisinherit+0x110>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	4a0d      	ldr	r2, [pc, #52]	; (80079f4 <xTaskPriorityDisinherit+0x110>)
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c4:	4613      	mov	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4a08      	ldr	r2, [pc, #32]	; (80079f0 <xTaskPriorityDisinherit+0x10c>)
 80079ce:	441a      	add	r2, r3
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	3304      	adds	r3, #4
 80079d4:	4619      	mov	r1, r3
 80079d6:	4610      	mov	r0, r2
 80079d8:	f7fe fae9 	bl	8005fae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80079dc:	2301      	movs	r3, #1
 80079de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079e0:	697b      	ldr	r3, [r7, #20]
	}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	2001930c 	.word	0x2001930c
 80079f0:	20019310 	.word	0x20019310
 80079f4:	20019428 	.word	0x20019428

080079f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a02:	4b29      	ldr	r3, [pc, #164]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a08:	4b28      	ldr	r3, [pc, #160]	; (8007aac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fb2a 	bl	8006068 <uxListRemove>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10b      	bne.n	8007a32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a1a:	4b24      	ldr	r3, [pc, #144]	; (8007aac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	2201      	movs	r2, #1
 8007a22:	fa02 f303 	lsl.w	r3, r2, r3
 8007a26:	43da      	mvns	r2, r3
 8007a28:	4b21      	ldr	r3, [pc, #132]	; (8007ab0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	4a20      	ldr	r2, [pc, #128]	; (8007ab0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a38:	d10a      	bne.n	8007a50 <prvAddCurrentTaskToDelayedList+0x58>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d007      	beq.n	8007a50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a40:	4b1a      	ldr	r3, [pc, #104]	; (8007aac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3304      	adds	r3, #4
 8007a46:	4619      	mov	r1, r3
 8007a48:	481a      	ldr	r0, [pc, #104]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a4a:	f7fe fab0 	bl	8005fae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a4e:	e026      	b.n	8007a9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4413      	add	r3, r2
 8007a56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a58:	4b14      	ldr	r3, [pc, #80]	; (8007aac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d209      	bcs.n	8007a7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a68:	4b13      	ldr	r3, [pc, #76]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4619      	mov	r1, r3
 8007a74:	4610      	mov	r0, r2
 8007a76:	f7fe fabe 	bl	8005ff6 <vListInsert>
}
 8007a7a:	e010      	b.n	8007a9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a7c:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	4b0a      	ldr	r3, [pc, #40]	; (8007aac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3304      	adds	r3, #4
 8007a86:	4619      	mov	r1, r3
 8007a88:	4610      	mov	r0, r2
 8007a8a:	f7fe fab4 	bl	8005ff6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a8e:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d202      	bcs.n	8007a9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a98:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6013      	str	r3, [r2, #0]
}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20019424 	.word	0x20019424
 8007aac:	2001930c 	.word	0x2001930c
 8007ab0:	20019428 	.word	0x20019428
 8007ab4:	2001940c 	.word	0x2001940c
 8007ab8:	200193dc 	.word	0x200193dc
 8007abc:	200193d8 	.word	0x200193d8
 8007ac0:	20019440 	.word	0x20019440

08007ac4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ace:	f000 fb3f 	bl	8008150 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007ad2:	4b12      	ldr	r3, [pc, #72]	; (8007b1c <xTimerCreateTimerTask+0x58>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00b      	beq.n	8007af2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8007ada:	4b11      	ldr	r3, [pc, #68]	; (8007b20 <xTimerCreateTimerTask+0x5c>)
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	2302      	movs	r3, #2
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ae8:	490e      	ldr	r1, [pc, #56]	; (8007b24 <xTimerCreateTimerTask+0x60>)
 8007aea:	480f      	ldr	r0, [pc, #60]	; (8007b28 <xTimerCreateTimerTask+0x64>)
 8007aec:	f7ff f82e 	bl	8006b4c <xTaskCreate>
 8007af0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10c      	bne.n	8007b12 <xTimerCreateTimerTask+0x4e>
	__asm volatile
 8007af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afc:	b672      	cpsid	i
 8007afe:	f383 8811 	msr	BASEPRI, r3
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	b662      	cpsie	i
 8007b0c:	603b      	str	r3, [r7, #0]
}
 8007b0e:	bf00      	nop
 8007b10:	e7fe      	b.n	8007b10 <xTimerCreateTimerTask+0x4c>
	return xReturn;
 8007b12:	687b      	ldr	r3, [r7, #4]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	2001947c 	.word	0x2001947c
 8007b20:	20019480 	.word	0x20019480
 8007b24:	0801b3fc 	.word	0x0801b3fc
 8007b28:	08007d25 	.word	0x08007d25

08007b2c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007b3a:	2028      	movs	r0, #40	; 0x28
 8007b3c:	f000 fd7a 	bl	8008634 <pvPortMalloc>
 8007b40:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00d      	beq.n	8007b64 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	9301      	str	r3, [sp, #4]
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	68b9      	ldr	r1, [r7, #8]
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 f805 	bl	8007b6e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007b64:	697b      	ldr	r3, [r7, #20]
	}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3718      	adds	r7, #24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b086      	sub	sp, #24
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10c      	bne.n	8007b9c <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	b672      	cpsid	i
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	b662      	cpsie	i
 8007b96:	617b      	str	r3, [r7, #20]
}
 8007b98:	bf00      	nop
 8007b9a:	e7fe      	b.n	8007b9a <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d01e      	beq.n	8007be0 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007ba2:	f000 fad5 	bl	8008150 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	6a3a      	ldr	r2, [r7, #32]
 8007bbc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fe f9e6 	bl	8005f94 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d008      	beq.n	8007be0 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bd4:	f043 0304 	orr.w	r3, r3, #4
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007be0:	bf00      	nop
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08a      	sub	sp, #40	; 0x28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10c      	bne.n	8007c1a <xTimerGenericCommand+0x32>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	b672      	cpsid	i
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	b662      	cpsie	i
 8007c14:	623b      	str	r3, [r7, #32]
}
 8007c16:	bf00      	nop
 8007c18:	e7fe      	b.n	8007c18 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c1a:	4b1a      	ldr	r3, [pc, #104]	; (8007c84 <xTimerGenericCommand+0x9c>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d02a      	beq.n	8007c78 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2b05      	cmp	r3, #5
 8007c32:	dc18      	bgt.n	8007c66 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c34:	f7ff fe38 	bl	80078a8 <xTaskGetSchedulerState>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d109      	bne.n	8007c52 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c3e:	4b11      	ldr	r3, [pc, #68]	; (8007c84 <xTimerGenericCommand+0x9c>)
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	f107 0114 	add.w	r1, r7, #20
 8007c46:	2300      	movs	r3, #0
 8007c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c4a:	f7fe faff 	bl	800624c <xQueueGenericSend>
 8007c4e:	6278      	str	r0, [r7, #36]	; 0x24
 8007c50:	e012      	b.n	8007c78 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c52:	4b0c      	ldr	r3, [pc, #48]	; (8007c84 <xTimerGenericCommand+0x9c>)
 8007c54:	6818      	ldr	r0, [r3, #0]
 8007c56:	f107 0114 	add.w	r1, r7, #20
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f7fe faf5 	bl	800624c <xQueueGenericSend>
 8007c62:	6278      	str	r0, [r7, #36]	; 0x24
 8007c64:	e008      	b.n	8007c78 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c66:	4b07      	ldr	r3, [pc, #28]	; (8007c84 <xTimerGenericCommand+0x9c>)
 8007c68:	6818      	ldr	r0, [r3, #0]
 8007c6a:	f107 0114 	add.w	r1, r7, #20
 8007c6e:	2300      	movs	r3, #0
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	f7fe fbf1 	bl	8006458 <xQueueGenericSendFromISR>
 8007c76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3728      	adds	r7, #40	; 0x28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	2001947c 	.word	0x2001947c

08007c88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af02      	add	r7, sp, #8
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c92:	4b23      	ldr	r3, [pc, #140]	; (8007d20 <prvProcessExpiredTimer+0x98>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fe f9e1 	bl	8006068 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cac:	f003 0304 	and.w	r3, r3, #4
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d024      	beq.n	8007cfe <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	699a      	ldr	r2, [r3, #24]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	18d1      	adds	r1, r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	6978      	ldr	r0, [r7, #20]
 8007cc2:	f000 f8d3 	bl	8007e6c <prvInsertTimerInActiveList>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d021      	beq.n	8007d10 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6978      	ldr	r0, [r7, #20]
 8007cd8:	f7ff ff86 	bl	8007be8 <xTimerGenericCommand>
 8007cdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d115      	bne.n	8007d10 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	b672      	cpsid	i
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	b662      	cpsie	i
 8007cf8:	60fb      	str	r3, [r7, #12]
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d04:	f023 0301 	bic.w	r3, r3, #1
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	6a1b      	ldr	r3, [r3, #32]
 8007d14:	6978      	ldr	r0, [r7, #20]
 8007d16:	4798      	blx	r3
}
 8007d18:	bf00      	nop
 8007d1a:	3718      	adds	r7, #24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	20019474 	.word	0x20019474

08007d24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d2c:	f107 0308 	add.w	r3, r7, #8
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 f857 	bl	8007de4 <prvGetNextExpireTime>
 8007d36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 f803 	bl	8007d48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d42:	f000 f8d5 	bl	8007ef0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d46:	e7f1      	b.n	8007d2c <prvTimerTask+0x8>

08007d48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d52:	f7ff f9df 	bl	8007114 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d56:	f107 0308 	add.w	r3, r7, #8
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 f866 	bl	8007e2c <prvSampleTimeNow>
 8007d60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d130      	bne.n	8007dca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <prvProcessTimerOrBlockTask+0x3c>
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d806      	bhi.n	8007d84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d76:	f7ff f9db 	bl	8007130 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d7a:	68f9      	ldr	r1, [r7, #12]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff ff83 	bl	8007c88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d82:	e024      	b.n	8007dce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d008      	beq.n	8007d9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d8a:	4b13      	ldr	r3, [pc, #76]	; (8007dd8 <prvProcessTimerOrBlockTask+0x90>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <prvProcessTimerOrBlockTask+0x50>
 8007d94:	2301      	movs	r3, #1
 8007d96:	e000      	b.n	8007d9a <prvProcessTimerOrBlockTask+0x52>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d9c:	4b0f      	ldr	r3, [pc, #60]	; (8007ddc <prvProcessTimerOrBlockTask+0x94>)
 8007d9e:	6818      	ldr	r0, [r3, #0]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	4619      	mov	r1, r3
 8007daa:	f7fe fe9b 	bl	8006ae4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007dae:	f7ff f9bf 	bl	8007130 <xTaskResumeAll>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007db8:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <prvProcessTimerOrBlockTask+0x98>)
 8007dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	f3bf 8f6f 	isb	sy
}
 8007dc8:	e001      	b.n	8007dce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007dca:	f7ff f9b1 	bl	8007130 <xTaskResumeAll>
}
 8007dce:	bf00      	nop
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20019478 	.word	0x20019478
 8007ddc:	2001947c 	.word	0x2001947c
 8007de0:	e000ed04 	.word	0xe000ed04

08007de4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007dec:	4b0e      	ldr	r3, [pc, #56]	; (8007e28 <prvGetNextExpireTime+0x44>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <prvGetNextExpireTime+0x16>
 8007df6:	2201      	movs	r2, #1
 8007df8:	e000      	b.n	8007dfc <prvGetNextExpireTime+0x18>
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d105      	bne.n	8007e14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e08:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <prvGetNextExpireTime+0x44>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	e001      	b.n	8007e18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e18:	68fb      	ldr	r3, [r7, #12]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	20019474 	.word	0x20019474

08007e2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e34:	f7ff fa1a 	bl	800726c <xTaskGetTickCount>
 8007e38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e3a:	4b0b      	ldr	r3, [pc, #44]	; (8007e68 <prvSampleTimeNow+0x3c>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d205      	bcs.n	8007e50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e44:	f000 f91e 	bl	8008084 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	e002      	b.n	8007e56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e56:	4a04      	ldr	r2, [pc, #16]	; (8007e68 <prvSampleTimeNow+0x3c>)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20019484 	.word	0x20019484

08007e6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d812      	bhi.n	8007eb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	1ad2      	subs	r2, r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d302      	bcc.n	8007ea6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	e01b      	b.n	8007ede <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ea6:	4b10      	ldr	r3, [pc, #64]	; (8007ee8 <prvInsertTimerInActiveList+0x7c>)
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3304      	adds	r3, #4
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f7fe f8a0 	bl	8005ff6 <vListInsert>
 8007eb6:	e012      	b.n	8007ede <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d206      	bcs.n	8007ece <prvInsertTimerInActiveList+0x62>
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d302      	bcc.n	8007ece <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	e007      	b.n	8007ede <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ece:	4b07      	ldr	r3, [pc, #28]	; (8007eec <prvInsertTimerInActiveList+0x80>)
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4610      	mov	r0, r2
 8007eda:	f7fe f88c 	bl	8005ff6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ede:	697b      	ldr	r3, [r7, #20]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	20019478 	.word	0x20019478
 8007eec:	20019474 	.word	0x20019474

08007ef0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08c      	sub	sp, #48	; 0x30
 8007ef4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ef6:	e0b2      	b.n	800805e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f2c0 80ae 	blt.w	800805c <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	3304      	adds	r3, #4
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fe f8a9 	bl	8006068 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f16:	1d3b      	adds	r3, r7, #4
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7ff ff87 	bl	8007e2c <prvSampleTimeNow>
 8007f1e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2b09      	cmp	r3, #9
 8007f24:	f200 809b 	bhi.w	800805e <prvProcessReceivedCommands+0x16e>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <prvProcessReceivedCommands+0x40>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f59 	.word	0x08007f59
 8007f34:	08007f59 	.word	0x08007f59
 8007f38:	08007f59 	.word	0x08007f59
 8007f3c:	08007fd1 	.word	0x08007fd1
 8007f40:	08007fe5 	.word	0x08007fe5
 8007f44:	08008033 	.word	0x08008033
 8007f48:	08007f59 	.word	0x08007f59
 8007f4c:	08007f59 	.word	0x08007f59
 8007f50:	08007fd1 	.word	0x08007fd1
 8007f54:	08007fe5 	.word	0x08007fe5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f5e:	f043 0301 	orr.w	r3, r3, #1
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	18d1      	adds	r1, r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6a3a      	ldr	r2, [r7, #32]
 8007f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f78:	f7ff ff78 	bl	8007e6c <prvInsertTimerInActiveList>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d06d      	beq.n	800805e <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d062      	beq.n	800805e <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	441a      	add	r2, r3
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007faa:	f7ff fe1d 	bl	8007be8 <xTimerGenericCommand>
 8007fae:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d153      	bne.n	800805e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fba:	b672      	cpsid	i
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	b662      	cpsie	i
 8007fca:	61bb      	str	r3, [r7, #24]
}
 8007fcc:	bf00      	nop
 8007fce:	e7fe      	b.n	8007fce <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fd6:	f023 0301 	bic.w	r3, r3, #1
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8007fe2:	e03c      	b.n	800805e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fea:	f043 0301 	orr.w	r3, r3, #1
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10c      	bne.n	800801e <prvProcessReceivedCommands+0x12e>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	b672      	cpsid	i
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	b662      	cpsie	i
 8008018:	617b      	str	r3, [r7, #20]
}
 800801a:	bf00      	nop
 800801c:	e7fe      	b.n	800801c <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	699a      	ldr	r2, [r3, #24]
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	18d1      	adds	r1, r2, r3
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	6a3a      	ldr	r2, [r7, #32]
 800802a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800802c:	f7ff ff1e 	bl	8007e6c <prvInsertTimerInActiveList>
					break;
 8008030:	e015      	b.n	800805e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d103      	bne.n	8008048 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8008040:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008042:	f000 fbc1 	bl	80087c8 <vPortFree>
 8008046:	e00a      	b.n	800805e <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800804e:	f023 0301 	bic.w	r3, r3, #1
 8008052:	b2da      	uxtb	r2, r3
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800805a:	e000      	b.n	800805e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800805c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800805e:	4b08      	ldr	r3, [pc, #32]	; (8008080 <prvProcessReceivedCommands+0x190>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f107 0108 	add.w	r1, r7, #8
 8008066:	2200      	movs	r2, #0
 8008068:	4618      	mov	r0, r3
 800806a:	f7fe fa95 	bl	8006598 <xQueueReceive>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	f47f af41 	bne.w	8007ef8 <prvProcessReceivedCommands+0x8>
	}
}
 8008076:	bf00      	nop
 8008078:	bf00      	nop
 800807a:	3728      	adds	r7, #40	; 0x28
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	2001947c 	.word	0x2001947c

08008084 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800808a:	e04a      	b.n	8008122 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800808c:	4b2e      	ldr	r3, [pc, #184]	; (8008148 <prvSwitchTimerLists+0xc4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008096:	4b2c      	ldr	r3, [pc, #176]	; (8008148 <prvSwitchTimerLists+0xc4>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3304      	adds	r3, #4
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fd ffdf 	bl	8006068 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080b8:	f003 0304 	and.w	r3, r3, #4
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d030      	beq.n	8008122 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	4413      	add	r3, r2
 80080c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d90e      	bls.n	80080f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080de:	4b1a      	ldr	r3, [pc, #104]	; (8008148 <prvSwitchTimerLists+0xc4>)
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3304      	adds	r3, #4
 80080e6:	4619      	mov	r1, r3
 80080e8:	4610      	mov	r0, r2
 80080ea:	f7fd ff84 	bl	8005ff6 <vListInsert>
 80080ee:	e018      	b.n	8008122 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080f0:	2300      	movs	r3, #0
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	2300      	movs	r3, #0
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	2100      	movs	r1, #0
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7ff fd74 	bl	8007be8 <xTimerGenericCommand>
 8008100:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10c      	bne.n	8008122 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	b672      	cpsid	i
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	b662      	cpsie	i
 800811c:	603b      	str	r3, [r7, #0]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008122:	4b09      	ldr	r3, [pc, #36]	; (8008148 <prvSwitchTimerLists+0xc4>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1af      	bne.n	800808c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800812c:	4b06      	ldr	r3, [pc, #24]	; (8008148 <prvSwitchTimerLists+0xc4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008132:	4b06      	ldr	r3, [pc, #24]	; (800814c <prvSwitchTimerLists+0xc8>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a04      	ldr	r2, [pc, #16]	; (8008148 <prvSwitchTimerLists+0xc4>)
 8008138:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800813a:	4a04      	ldr	r2, [pc, #16]	; (800814c <prvSwitchTimerLists+0xc8>)
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	6013      	str	r3, [r2, #0]
}
 8008140:	bf00      	nop
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	20019474 	.word	0x20019474
 800814c:	20019478 	.word	0x20019478

08008150 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008154:	f000 f942 	bl	80083dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008158:	4b12      	ldr	r3, [pc, #72]	; (80081a4 <prvCheckForValidListAndQueue+0x54>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d11d      	bne.n	800819c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008160:	4811      	ldr	r0, [pc, #68]	; (80081a8 <prvCheckForValidListAndQueue+0x58>)
 8008162:	f7fd fef7 	bl	8005f54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008166:	4811      	ldr	r0, [pc, #68]	; (80081ac <prvCheckForValidListAndQueue+0x5c>)
 8008168:	f7fd fef4 	bl	8005f54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800816c:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <prvCheckForValidListAndQueue+0x60>)
 800816e:	4a0e      	ldr	r2, [pc, #56]	; (80081a8 <prvCheckForValidListAndQueue+0x58>)
 8008170:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008172:	4b10      	ldr	r3, [pc, #64]	; (80081b4 <prvCheckForValidListAndQueue+0x64>)
 8008174:	4a0d      	ldr	r2, [pc, #52]	; (80081ac <prvCheckForValidListAndQueue+0x5c>)
 8008176:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008178:	2200      	movs	r2, #0
 800817a:	210c      	movs	r1, #12
 800817c:	200a      	movs	r0, #10
 800817e:	f7fe f807 	bl	8006190 <xQueueGenericCreate>
 8008182:	4603      	mov	r3, r0
 8008184:	4a07      	ldr	r2, [pc, #28]	; (80081a4 <prvCheckForValidListAndQueue+0x54>)
 8008186:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008188:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <prvCheckForValidListAndQueue+0x54>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d005      	beq.n	800819c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <prvCheckForValidListAndQueue+0x54>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4908      	ldr	r1, [pc, #32]	; (80081b8 <prvCheckForValidListAndQueue+0x68>)
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe fc7a 	bl	8006a90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800819c:	f000 f952 	bl	8008444 <vPortExitCritical>
}
 80081a0:	bf00      	nop
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	2001947c 	.word	0x2001947c
 80081a8:	2001944c 	.word	0x2001944c
 80081ac:	20019460 	.word	0x20019460
 80081b0:	20019474 	.word	0x20019474
 80081b4:	20019478 	.word	0x20019478
 80081b8:	0801b404 	.word	0x0801b404

080081bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3b04      	subs	r3, #4
 80081cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3b04      	subs	r3, #4
 80081da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f023 0201 	bic.w	r2, r3, #1
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3b04      	subs	r3, #4
 80081ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081ec:	4a0c      	ldr	r2, [pc, #48]	; (8008220 <pxPortInitialiseStack+0x64>)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3b14      	subs	r3, #20
 80081f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3b04      	subs	r3, #4
 8008202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f06f 0202 	mvn.w	r2, #2
 800820a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3b20      	subs	r3, #32
 8008210:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008212:	68fb      	ldr	r3, [r7, #12]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	08008225 	.word	0x08008225

08008224 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800822a:	2300      	movs	r3, #0
 800822c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800822e:	4b14      	ldr	r3, [pc, #80]	; (8008280 <prvTaskExitError+0x5c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008236:	d00c      	beq.n	8008252 <prvTaskExitError+0x2e>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823c:	b672      	cpsid	i
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	b662      	cpsie	i
 800824c:	60fb      	str	r3, [r7, #12]
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <prvTaskExitError+0x2c>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	b672      	cpsid	i
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	b662      	cpsie	i
 8008266:	60bb      	str	r3, [r7, #8]
}
 8008268:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800826a:	bf00      	nop
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0fc      	beq.n	800826c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008272:	bf00      	nop
 8008274:	bf00      	nop
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	2000000c 	.word	0x2000000c
	...

08008290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008290:	4b07      	ldr	r3, [pc, #28]	; (80082b0 <pxCurrentTCBConst2>)
 8008292:	6819      	ldr	r1, [r3, #0]
 8008294:	6808      	ldr	r0, [r1, #0]
 8008296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829a:	f380 8809 	msr	PSP, r0
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f04f 0000 	mov.w	r0, #0
 80082a6:	f380 8811 	msr	BASEPRI, r0
 80082aa:	4770      	bx	lr
 80082ac:	f3af 8000 	nop.w

080082b0 <pxCurrentTCBConst2>:
 80082b0:	2001930c 	.word	0x2001930c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop

080082b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80082b8:	4808      	ldr	r0, [pc, #32]	; (80082dc <prvPortStartFirstTask+0x24>)
 80082ba:	6800      	ldr	r0, [r0, #0]
 80082bc:	6800      	ldr	r0, [r0, #0]
 80082be:	f380 8808 	msr	MSP, r0
 80082c2:	f04f 0000 	mov.w	r0, #0
 80082c6:	f380 8814 	msr	CONTROL, r0
 80082ca:	b662      	cpsie	i
 80082cc:	b661      	cpsie	f
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	df00      	svc	0
 80082d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082da:	bf00      	nop
 80082dc:	e000ed08 	.word	0xe000ed08

080082e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082e6:	4b37      	ldr	r3, [pc, #220]	; (80083c4 <xPortStartScheduler+0xe4>)
 80082e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	22ff      	movs	r2, #255	; 0xff
 80082f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008308:	b2da      	uxtb	r2, r3
 800830a:	4b2f      	ldr	r3, [pc, #188]	; (80083c8 <xPortStartScheduler+0xe8>)
 800830c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800830e:	4b2f      	ldr	r3, [pc, #188]	; (80083cc <xPortStartScheduler+0xec>)
 8008310:	2207      	movs	r2, #7
 8008312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008314:	e009      	b.n	800832a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008316:	4b2d      	ldr	r3, [pc, #180]	; (80083cc <xPortStartScheduler+0xec>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3b01      	subs	r3, #1
 800831c:	4a2b      	ldr	r2, [pc, #172]	; (80083cc <xPortStartScheduler+0xec>)
 800831e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	005b      	lsls	r3, r3, #1
 8008326:	b2db      	uxtb	r3, r3
 8008328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008332:	2b80      	cmp	r3, #128	; 0x80
 8008334:	d0ef      	beq.n	8008316 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008336:	4b25      	ldr	r3, [pc, #148]	; (80083cc <xPortStartScheduler+0xec>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f1c3 0307 	rsb	r3, r3, #7
 800833e:	2b04      	cmp	r3, #4
 8008340:	d00c      	beq.n	800835c <xPortStartScheduler+0x7c>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	b672      	cpsid	i
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	b662      	cpsie	i
 8008356:	60bb      	str	r3, [r7, #8]
}
 8008358:	bf00      	nop
 800835a:	e7fe      	b.n	800835a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800835c:	4b1b      	ldr	r3, [pc, #108]	; (80083cc <xPortStartScheduler+0xec>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	4a1a      	ldr	r2, [pc, #104]	; (80083cc <xPortStartScheduler+0xec>)
 8008364:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008366:	4b19      	ldr	r3, [pc, #100]	; (80083cc <xPortStartScheduler+0xec>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800836e:	4a17      	ldr	r2, [pc, #92]	; (80083cc <xPortStartScheduler+0xec>)
 8008370:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	b2da      	uxtb	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800837a:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <xPortStartScheduler+0xf0>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a14      	ldr	r2, [pc, #80]	; (80083d0 <xPortStartScheduler+0xf0>)
 8008380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008384:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008386:	4b12      	ldr	r3, [pc, #72]	; (80083d0 <xPortStartScheduler+0xf0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a11      	ldr	r2, [pc, #68]	; (80083d0 <xPortStartScheduler+0xf0>)
 800838c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008390:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008392:	f000 f8dd 	bl	8008550 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008396:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <xPortStartScheduler+0xf4>)
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800839c:	f000 f8fc 	bl	8008598 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80083a0:	4b0d      	ldr	r3, [pc, #52]	; (80083d8 <xPortStartScheduler+0xf8>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a0c      	ldr	r2, [pc, #48]	; (80083d8 <xPortStartScheduler+0xf8>)
 80083a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80083aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083ac:	f7ff ff84 	bl	80082b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083b0:	f7ff f826 	bl	8007400 <vTaskSwitchContext>
	prvTaskExitError();
 80083b4:	f7ff ff36 	bl	8008224 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	e000e400 	.word	0xe000e400
 80083c8:	20019488 	.word	0x20019488
 80083cc:	2001948c 	.word	0x2001948c
 80083d0:	e000ed20 	.word	0xe000ed20
 80083d4:	2000000c 	.word	0x2000000c
 80083d8:	e000ef34 	.word	0xe000ef34

080083dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e6:	b672      	cpsid	i
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	b662      	cpsie	i
 80083f6:	607b      	str	r3, [r7, #4]
}
 80083f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80083fa:	4b10      	ldr	r3, [pc, #64]	; (800843c <vPortEnterCritical+0x60>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3301      	adds	r3, #1
 8008400:	4a0e      	ldr	r2, [pc, #56]	; (800843c <vPortEnterCritical+0x60>)
 8008402:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008404:	4b0d      	ldr	r3, [pc, #52]	; (800843c <vPortEnterCritical+0x60>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d111      	bne.n	8008430 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800840c:	4b0c      	ldr	r3, [pc, #48]	; (8008440 <vPortEnterCritical+0x64>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00c      	beq.n	8008430 <vPortEnterCritical+0x54>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841a:	b672      	cpsid	i
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	b662      	cpsie	i
 800842a:	603b      	str	r3, [r7, #0]
}
 800842c:	bf00      	nop
 800842e:	e7fe      	b.n	800842e <vPortEnterCritical+0x52>
	}
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	2000000c 	.word	0x2000000c
 8008440:	e000ed04 	.word	0xe000ed04

08008444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800844a:	4b13      	ldr	r3, [pc, #76]	; (8008498 <vPortExitCritical+0x54>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10c      	bne.n	800846c <vPortExitCritical+0x28>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	b672      	cpsid	i
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	b662      	cpsie	i
 8008466:	607b      	str	r3, [r7, #4]
}
 8008468:	bf00      	nop
 800846a:	e7fe      	b.n	800846a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800846c:	4b0a      	ldr	r3, [pc, #40]	; (8008498 <vPortExitCritical+0x54>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3b01      	subs	r3, #1
 8008472:	4a09      	ldr	r2, [pc, #36]	; (8008498 <vPortExitCritical+0x54>)
 8008474:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008476:	4b08      	ldr	r3, [pc, #32]	; (8008498 <vPortExitCritical+0x54>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d105      	bne.n	800848a <vPortExitCritical+0x46>
 800847e:	2300      	movs	r3, #0
 8008480:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	f383 8811 	msr	BASEPRI, r3
}
 8008488:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800848a:	bf00      	nop
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	2000000c 	.word	0x2000000c
 800849c:	00000000 	.word	0x00000000

080084a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084a0:	f3ef 8009 	mrs	r0, PSP
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	4b15      	ldr	r3, [pc, #84]	; (8008500 <pxCurrentTCBConst>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	f01e 0f10 	tst.w	lr, #16
 80084b0:	bf08      	it	eq
 80084b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80084b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ba:	6010      	str	r0, [r2, #0]
 80084bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80084c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80084c4:	b672      	cpsid	i
 80084c6:	f380 8811 	msr	BASEPRI, r0
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	b662      	cpsie	i
 80084d4:	f7fe ff94 	bl	8007400 <vTaskSwitchContext>
 80084d8:	f04f 0000 	mov.w	r0, #0
 80084dc:	f380 8811 	msr	BASEPRI, r0
 80084e0:	bc09      	pop	{r0, r3}
 80084e2:	6819      	ldr	r1, [r3, #0]
 80084e4:	6808      	ldr	r0, [r1, #0]
 80084e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ea:	f01e 0f10 	tst.w	lr, #16
 80084ee:	bf08      	it	eq
 80084f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084f4:	f380 8809 	msr	PSP, r0
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop

08008500 <pxCurrentTCBConst>:
 8008500:	2001930c 	.word	0x2001930c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop

08008508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	b672      	cpsid	i
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	b662      	cpsie	i
 8008522:	607b      	str	r3, [r7, #4]
}
 8008524:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008526:	f7fe feb1 	bl	800728c <xTaskIncrementTick>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008530:	4b06      	ldr	r3, [pc, #24]	; (800854c <SysTick_Handler+0x44>)
 8008532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	2300      	movs	r3, #0
 800853a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	f383 8811 	msr	BASEPRI, r3
}
 8008542:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	e000ed04 	.word	0xe000ed04

08008550 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008554:	4b0b      	ldr	r3, [pc, #44]	; (8008584 <vPortSetupTimerInterrupt+0x34>)
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800855a:	4b0b      	ldr	r3, [pc, #44]	; (8008588 <vPortSetupTimerInterrupt+0x38>)
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008560:	4b0a      	ldr	r3, [pc, #40]	; (800858c <vPortSetupTimerInterrupt+0x3c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a0a      	ldr	r2, [pc, #40]	; (8008590 <vPortSetupTimerInterrupt+0x40>)
 8008566:	fba2 2303 	umull	r2, r3, r2, r3
 800856a:	099b      	lsrs	r3, r3, #6
 800856c:	4a09      	ldr	r2, [pc, #36]	; (8008594 <vPortSetupTimerInterrupt+0x44>)
 800856e:	3b01      	subs	r3, #1
 8008570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008572:	4b04      	ldr	r3, [pc, #16]	; (8008584 <vPortSetupTimerInterrupt+0x34>)
 8008574:	2207      	movs	r2, #7
 8008576:	601a      	str	r2, [r3, #0]
}
 8008578:	bf00      	nop
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	e000e010 	.word	0xe000e010
 8008588:	e000e018 	.word	0xe000e018
 800858c:	20000000 	.word	0x20000000
 8008590:	10624dd3 	.word	0x10624dd3
 8008594:	e000e014 	.word	0xe000e014

08008598 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008598:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80085a8 <vPortEnableVFP+0x10>
 800859c:	6801      	ldr	r1, [r0, #0]
 800859e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80085a2:	6001      	str	r1, [r0, #0]
 80085a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80085a6:	bf00      	nop
 80085a8:	e000ed88 	.word	0xe000ed88

080085ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80085b2:	f3ef 8305 	mrs	r3, IPSR
 80085b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b0f      	cmp	r3, #15
 80085bc:	d916      	bls.n	80085ec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80085be:	4a19      	ldr	r2, [pc, #100]	; (8008624 <vPortValidateInterruptPriority+0x78>)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	4413      	add	r3, r2
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80085c8:	4b17      	ldr	r3, [pc, #92]	; (8008628 <vPortValidateInterruptPriority+0x7c>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	7afa      	ldrb	r2, [r7, #11]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d20c      	bcs.n	80085ec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	b672      	cpsid	i
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	b662      	cpsie	i
 80085e6:	607b      	str	r3, [r7, #4]
}
 80085e8:	bf00      	nop
 80085ea:	e7fe      	b.n	80085ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085ec:	4b0f      	ldr	r3, [pc, #60]	; (800862c <vPortValidateInterruptPriority+0x80>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085f4:	4b0e      	ldr	r3, [pc, #56]	; (8008630 <vPortValidateInterruptPriority+0x84>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d90c      	bls.n	8008616 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	b672      	cpsid	i
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	b662      	cpsie	i
 8008610:	603b      	str	r3, [r7, #0]
}
 8008612:	bf00      	nop
 8008614:	e7fe      	b.n	8008614 <vPortValidateInterruptPriority+0x68>
	}
 8008616:	bf00      	nop
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	e000e3f0 	.word	0xe000e3f0
 8008628:	20019488 	.word	0x20019488
 800862c:	e000ed0c 	.word	0xe000ed0c
 8008630:	2001948c 	.word	0x2001948c

08008634 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08a      	sub	sp, #40	; 0x28
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800863c:	2300      	movs	r3, #0
 800863e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008640:	f7fe fd68 	bl	8007114 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008644:	4b5b      	ldr	r3, [pc, #364]	; (80087b4 <pvPortMalloc+0x180>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d101      	bne.n	8008650 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800864c:	f000 f91a 	bl	8008884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008650:	4b59      	ldr	r3, [pc, #356]	; (80087b8 <pvPortMalloc+0x184>)
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4013      	ands	r3, r2
 8008658:	2b00      	cmp	r3, #0
 800865a:	f040 8092 	bne.w	8008782 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d01f      	beq.n	80086a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008664:	2208      	movs	r2, #8
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4413      	add	r3, r2
 800866a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f003 0307 	and.w	r3, r3, #7
 8008672:	2b00      	cmp	r3, #0
 8008674:	d016      	beq.n	80086a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f023 0307 	bic.w	r3, r3, #7
 800867c:	3308      	adds	r3, #8
 800867e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00c      	beq.n	80086a4 <pvPortMalloc+0x70>
	__asm volatile
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	b672      	cpsid	i
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	b662      	cpsie	i
 800869e:	617b      	str	r3, [r7, #20]
}
 80086a0:	bf00      	nop
 80086a2:	e7fe      	b.n	80086a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d06b      	beq.n	8008782 <pvPortMalloc+0x14e>
 80086aa:	4b44      	ldr	r3, [pc, #272]	; (80087bc <pvPortMalloc+0x188>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d866      	bhi.n	8008782 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086b4:	4b42      	ldr	r3, [pc, #264]	; (80087c0 <pvPortMalloc+0x18c>)
 80086b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086b8:	4b41      	ldr	r3, [pc, #260]	; (80087c0 <pvPortMalloc+0x18c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086be:	e004      	b.n	80086ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d903      	bls.n	80086dc <pvPortMalloc+0xa8>
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1f1      	bne.n	80086c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086dc:	4b35      	ldr	r3, [pc, #212]	; (80087b4 <pvPortMalloc+0x180>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d04d      	beq.n	8008782 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2208      	movs	r2, #8
 80086ec:	4413      	add	r3, r2
 80086ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	1ad2      	subs	r2, r2, r3
 8008700:	2308      	movs	r3, #8
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	429a      	cmp	r2, r3
 8008706:	d921      	bls.n	800874c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4413      	add	r3, r2
 800870e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	f003 0307 	and.w	r3, r3, #7
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00c      	beq.n	8008734 <pvPortMalloc+0x100>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	b672      	cpsid	i
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	b662      	cpsie	i
 800872e:	613b      	str	r3, [r7, #16]
}
 8008730:	bf00      	nop
 8008732:	e7fe      	b.n	8008732 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	1ad2      	subs	r2, r2, r3
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008746:	69b8      	ldr	r0, [r7, #24]
 8008748:	f000 f8fe 	bl	8008948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800874c:	4b1b      	ldr	r3, [pc, #108]	; (80087bc <pvPortMalloc+0x188>)
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	4a19      	ldr	r2, [pc, #100]	; (80087bc <pvPortMalloc+0x188>)
 8008758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800875a:	4b18      	ldr	r3, [pc, #96]	; (80087bc <pvPortMalloc+0x188>)
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	4b19      	ldr	r3, [pc, #100]	; (80087c4 <pvPortMalloc+0x190>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d203      	bcs.n	800876e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008766:	4b15      	ldr	r3, [pc, #84]	; (80087bc <pvPortMalloc+0x188>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a16      	ldr	r2, [pc, #88]	; (80087c4 <pvPortMalloc+0x190>)
 800876c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	4b11      	ldr	r3, [pc, #68]	; (80087b8 <pvPortMalloc+0x184>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	431a      	orrs	r2, r3
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	2200      	movs	r2, #0
 8008780:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008782:	f7fe fcd5 	bl	8007130 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	f003 0307 	and.w	r3, r3, #7
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00c      	beq.n	80087aa <pvPortMalloc+0x176>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	b672      	cpsid	i
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	b662      	cpsie	i
 80087a4:	60fb      	str	r3, [r7, #12]
}
 80087a6:	bf00      	nop
 80087a8:	e7fe      	b.n	80087a8 <pvPortMalloc+0x174>
	return pvReturn;
 80087aa:	69fb      	ldr	r3, [r7, #28]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3728      	adds	r7, #40	; 0x28
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	2001d098 	.word	0x2001d098
 80087b8:	2001d0a4 	.word	0x2001d0a4
 80087bc:	2001d09c 	.word	0x2001d09c
 80087c0:	2001d090 	.word	0x2001d090
 80087c4:	2001d0a0 	.word	0x2001d0a0

080087c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d04c      	beq.n	8008874 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087da:	2308      	movs	r3, #8
 80087dc:	425b      	negs	r3, r3
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	4413      	add	r3, r2
 80087e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	4b23      	ldr	r3, [pc, #140]	; (800887c <vPortFree+0xb4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4013      	ands	r3, r2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10c      	bne.n	8008810 <vPortFree+0x48>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fa:	b672      	cpsid	i
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	b662      	cpsie	i
 800880a:	60fb      	str	r3, [r7, #12]
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00c      	beq.n	8008832 <vPortFree+0x6a>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881c:	b672      	cpsid	i
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	b662      	cpsie	i
 800882c:	60bb      	str	r3, [r7, #8]
}
 800882e:	bf00      	nop
 8008830:	e7fe      	b.n	8008830 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	4b11      	ldr	r3, [pc, #68]	; (800887c <vPortFree+0xb4>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4013      	ands	r3, r2
 800883c:	2b00      	cmp	r3, #0
 800883e:	d019      	beq.n	8008874 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d115      	bne.n	8008874 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	4b0b      	ldr	r3, [pc, #44]	; (800887c <vPortFree+0xb4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	43db      	mvns	r3, r3
 8008852:	401a      	ands	r2, r3
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008858:	f7fe fc5c 	bl	8007114 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	4b07      	ldr	r3, [pc, #28]	; (8008880 <vPortFree+0xb8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4413      	add	r3, r2
 8008866:	4a06      	ldr	r2, [pc, #24]	; (8008880 <vPortFree+0xb8>)
 8008868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800886a:	6938      	ldr	r0, [r7, #16]
 800886c:	f000 f86c 	bl	8008948 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008870:	f7fe fc5e 	bl	8007130 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008874:	bf00      	nop
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	2001d0a4 	.word	0x2001d0a4
 8008880:	2001d09c 	.word	0x2001d09c

08008884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800888a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800888e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008890:	4b27      	ldr	r3, [pc, #156]	; (8008930 <prvHeapInit+0xac>)
 8008892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f003 0307 	and.w	r3, r3, #7
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00c      	beq.n	80088b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3307      	adds	r3, #7
 80088a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f023 0307 	bic.w	r3, r3, #7
 80088aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	4a1f      	ldr	r2, [pc, #124]	; (8008930 <prvHeapInit+0xac>)
 80088b4:	4413      	add	r3, r2
 80088b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088bc:	4a1d      	ldr	r2, [pc, #116]	; (8008934 <prvHeapInit+0xb0>)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088c2:	4b1c      	ldr	r3, [pc, #112]	; (8008934 <prvHeapInit+0xb0>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	4413      	add	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80088d0:	2208      	movs	r2, #8
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	1a9b      	subs	r3, r3, r2
 80088d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f023 0307 	bic.w	r3, r3, #7
 80088de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4a15      	ldr	r2, [pc, #84]	; (8008938 <prvHeapInit+0xb4>)
 80088e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088e6:	4b14      	ldr	r3, [pc, #80]	; (8008938 <prvHeapInit+0xb4>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2200      	movs	r2, #0
 80088ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088ee:	4b12      	ldr	r3, [pc, #72]	; (8008938 <prvHeapInit+0xb4>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	1ad2      	subs	r2, r2, r3
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008904:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <prvHeapInit+0xb4>)
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	4a0a      	ldr	r2, [pc, #40]	; (800893c <prvHeapInit+0xb8>)
 8008912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	4a09      	ldr	r2, [pc, #36]	; (8008940 <prvHeapInit+0xbc>)
 800891a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800891c:	4b09      	ldr	r3, [pc, #36]	; (8008944 <prvHeapInit+0xc0>)
 800891e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008922:	601a      	str	r2, [r3, #0]
}
 8008924:	bf00      	nop
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	20019490 	.word	0x20019490
 8008934:	2001d090 	.word	0x2001d090
 8008938:	2001d098 	.word	0x2001d098
 800893c:	2001d0a0 	.word	0x2001d0a0
 8008940:	2001d09c 	.word	0x2001d09c
 8008944:	2001d0a4 	.word	0x2001d0a4

08008948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008950:	4b28      	ldr	r3, [pc, #160]	; (80089f4 <prvInsertBlockIntoFreeList+0xac>)
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	e002      	b.n	800895c <prvInsertBlockIntoFreeList+0x14>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	429a      	cmp	r2, r3
 8008964:	d8f7      	bhi.n	8008956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	4413      	add	r3, r2
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	429a      	cmp	r2, r3
 8008976:	d108      	bne.n	800898a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	441a      	add	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	441a      	add	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	429a      	cmp	r2, r3
 800899c:	d118      	bne.n	80089d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	4b15      	ldr	r3, [pc, #84]	; (80089f8 <prvInsertBlockIntoFreeList+0xb0>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d00d      	beq.n	80089c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	441a      	add	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	e008      	b.n	80089d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089c6:	4b0c      	ldr	r3, [pc, #48]	; (80089f8 <prvInsertBlockIntoFreeList+0xb0>)
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	e003      	b.n	80089d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d002      	beq.n	80089e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089e6:	bf00      	nop
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	2001d090 	.word	0x2001d090
 80089f8:	2001d098 	.word	0x2001d098

080089fc <WINDOW_Callback>:
 80089fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a00:	6845      	ldr	r5, [r0, #4]
 8008a02:	4604      	mov	r4, r0
 8008a04:	4628      	mov	r0, r5
 8008a06:	f00a ff79 	bl	80138fc <GUI_ALLOC_LockH>
 8008a0a:	af02      	add	r7, sp, #8
 8008a0c:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8008a0e:	f847 0d08 	str.w	r0, [r7, #-8]!
 8008a12:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
 8008a16:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 8008a1a:	4668      	mov	r0, sp
 8008a1c:	f00a ff7c 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	2b1f      	cmp	r3, #31
 8008a24:	d02f      	beq.n	8008a86 <WINDOW_Callback+0x8a>
 8008a26:	dc06      	bgt.n	8008a36 <WINDOW_Callback+0x3a>
 8008a28:	2b0f      	cmp	r3, #15
 8008a2a:	d060      	beq.n	8008aee <WINDOW_Callback+0xf2>
 8008a2c:	2b1e      	cmp	r3, #30
 8008a2e:	d015      	beq.n	8008a5c <WINDOW_Callback+0x60>
 8008a30:	2b0e      	cmp	r3, #14
 8008a32:	d169      	bne.n	8008b08 <WINDOW_Callback+0x10c>
 8008a34:	e04a      	b.n	8008acc <WINDOW_Callback+0xd0>
 8008a36:	2b22      	cmp	r3, #34	; 0x22
 8008a38:	d063      	beq.n	8008b02 <WINDOW_Callback+0x106>
 8008a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a3c:	d002      	beq.n	8008a44 <WINDOW_Callback+0x48>
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	d162      	bne.n	8008b08 <WINDOW_Callback+0x10c>
 8008a42:	e025      	b.n	8008a90 <WINDOW_Callback+0x94>
 8008a44:	4628      	mov	r0, r5
 8008a46:	f00a ff59 	bl	80138fc <GUI_ALLOC_LockH>
 8008a4a:	68e3      	ldr	r3, [r4, #12]
 8008a4c:	9000      	str	r0, [sp, #0]
 8008a4e:	b10b      	cbz	r3, 8008a54 <WINDOW_Callback+0x58>
 8008a50:	63c3      	str	r3, [r0, #60]	; 0x3c
 8008a52:	e001      	b.n	8008a58 <WINDOW_Callback+0x5c>
 8008a54:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008a56:	60e3      	str	r3, [r4, #12]
 8008a58:	4668      	mov	r0, sp
 8008a5a:	e034      	b.n	8008ac6 <WINDOW_Callback+0xca>
 8008a5c:	68e4      	ldr	r4, [r4, #12]
 8008a5e:	2c01      	cmp	r4, #1
 8008a60:	d15b      	bne.n	8008b1a <WINDOW_Callback+0x11e>
 8008a62:	4630      	mov	r0, r6
 8008a64:	f003 fe67 	bl	800c736 <WM_IsWindow>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d03c      	beq.n	8008ae6 <WINDOW_Callback+0xea>
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f003 fcc3 	bl	800c3f8 <WM_SetFocus>
 8008a72:	4630      	mov	r0, r6
 8008a74:	f003 fe90 	bl	800c798 <WM_HasFocus>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d04e      	beq.n	8008b1a <WINDOW_Callback+0x11e>
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	4621      	mov	r1, r4
 8008a80:	f000 f924 	bl	8008ccc <WIDGET_OrState>
 8008a84:	e049      	b.n	8008b1a <WINDOW_Callback+0x11e>
 8008a86:	4628      	mov	r0, r5
 8008a88:	4621      	mov	r1, r4
 8008a8a:	f000 f953 	bl	8008d34 <WIDGET_HandleActive>
 8008a8e:	e044      	b.n	8008b1a <WINDOW_Callback+0x11e>
 8008a90:	4628      	mov	r0, r5
 8008a92:	f00a ff33 	bl	80138fc <GUI_ALLOC_LockH>
 8008a96:	68e4      	ldr	r4, [r4, #12]
 8008a98:	9001      	str	r0, [sp, #4]
 8008a9a:	b19c      	cbz	r4, 8008ac4 <WINDOW_Callback+0xc8>
 8008a9c:	6860      	ldr	r0, [r4, #4]
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	f003 fb72 	bl	800c188 <WM__IsAncestorOrSelf>
 8008aa4:	b930      	cbnz	r0, 8008ab4 <WINDOW_Callback+0xb8>
 8008aa6:	6820      	ldr	r0, [r4, #0]
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f003 fb5c 	bl	800c166 <WM__IsAncestor>
 8008aae:	b148      	cbz	r0, 8008ac4 <WINDOW_Callback+0xc8>
 8008ab0:	6822      	ldr	r2, [r4, #0]
 8008ab2:	e005      	b.n	8008ac0 <WINDOW_Callback+0xc4>
 8008ab4:	6860      	ldr	r0, [r4, #4]
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	f003 fb55 	bl	800c166 <WM__IsAncestor>
 8008abc:	b110      	cbz	r0, 8008ac4 <WINDOW_Callback+0xc8>
 8008abe:	6862      	ldr	r2, [r4, #4]
 8008ac0:	9b01      	ldr	r3, [sp, #4]
 8008ac2:	639a      	str	r2, [r3, #56]	; 0x38
 8008ac4:	a801      	add	r0, sp, #4
 8008ac6:	f00a ff27 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008aca:	e026      	b.n	8008b1a <WINDOW_Callback+0x11e>
 8008acc:	68e3      	ldr	r3, [r4, #12]
 8008ace:	685a      	ldr	r2, [r3, #4]
 8008ad0:	2a00      	cmp	r2, #0
 8008ad2:	dd19      	ble.n	8008b08 <WINDOW_Callback+0x10c>
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b09      	cmp	r3, #9
 8008ad8:	d005      	beq.n	8008ae6 <WINDOW_Callback+0xea>
 8008ada:	2b0a      	cmp	r3, #10
 8008adc:	d114      	bne.n	8008b08 <WINDOW_Callback+0x10c>
 8008ade:	4628      	mov	r0, r5
 8008ae0:	f003 fc29 	bl	800c336 <WM_SetFocusOnPrevChild>
 8008ae4:	e019      	b.n	8008b1a <WINDOW_Callback+0x11e>
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f003 fc54 	bl	800c394 <WM_SetFocusOnNextChild>
 8008aec:	e015      	b.n	8008b1a <WINDOW_Callback+0x11e>
 8008aee:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008af2:	4598      	cmp	r8, r3
 8008af4:	d008      	beq.n	8008b08 <WINDOW_Callback+0x10c>
 8008af6:	4640      	mov	r0, r8
 8008af8:	f007 ffc8 	bl	8010a8c <LCD_SetBkColor>
 8008afc:	f00a fac2 	bl	8013084 <GUI_Clear>
 8008b00:	e002      	b.n	8008b08 <WINDOW_Callback+0x10c>
 8008b02:	f8c4 800c 	str.w	r8, [r4, #12]
 8008b06:	e008      	b.n	8008b1a <WINDOW_Callback+0x11e>
 8008b08:	f1b9 0f00 	cmp.w	r9, #0
 8008b0c:	d002      	beq.n	8008b14 <WINDOW_Callback+0x118>
 8008b0e:	4620      	mov	r0, r4
 8008b10:	47c8      	blx	r9
 8008b12:	e002      	b.n	8008b1a <WINDOW_Callback+0x11e>
 8008b14:	4620      	mov	r0, r4
 8008b16:	f005 f8f7 	bl	800dd08 <WM_DefaultProc>
 8008b1a:	b003      	add	sp, #12
 8008b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008b20 <WINDOW_SetBkColor>:
 8008b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b22:	460d      	mov	r5, r1
 8008b24:	4604      	mov	r4, r0
 8008b26:	f00a fee9 	bl	80138fc <GUI_ALLOC_LockH>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	a802      	add	r0, sp, #8
 8008b2e:	6415      	str	r5, [r2, #64]	; 0x40
 8008b30:	f840 2d04 	str.w	r2, [r0, #-4]!
 8008b34:	f00a fef0 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f004 fcb4 	bl	800d4a6 <WM_InvalidateWindow>
 8008b3e:	b003      	add	sp, #12
 8008b40:	bd30      	pop	{r4, r5, pc}
	...

08008b44 <WINDOW_CreateUser>:
 8008b44:	b510      	push	{r4, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	9c08      	ldr	r4, [sp, #32]
 8008b4a:	9400      	str	r4, [sp, #0]
 8008b4c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008b4e:	9401      	str	r4, [sp, #4]
 8008b50:	4c0f      	ldr	r4, [pc, #60]	; (8008b90 <WINDOW_CreateUser+0x4c>)
 8008b52:	9402      	str	r4, [sp, #8]
 8008b54:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008b56:	3418      	adds	r4, #24
 8008b58:	9403      	str	r4, [sp, #12]
 8008b5a:	f004 fce5 	bl	800d528 <WM_CreateWindowAsChild>
 8008b5e:	4604      	mov	r4, r0
 8008b60:	b190      	cbz	r0, 8008b88 <WINDOW_CreateUser+0x44>
 8008b62:	f00a fecb 	bl	80138fc <GUI_ALLOC_LockH>
 8008b66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b68:	9005      	str	r0, [sp, #20]
 8008b6a:	2210      	movs	r2, #16
 8008b6c:	f000 f8da 	bl	8008d24 <WIDGET__Init>
 8008b70:	a806      	add	r0, sp, #24
 8008b72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b74:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8008b78:	6351      	str	r1, [r2, #52]	; 0x34
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	6391      	str	r1, [r2, #56]	; 0x38
 8008b7e:	4905      	ldr	r1, [pc, #20]	; (8008b94 <WINDOW_CreateUser+0x50>)
 8008b80:	6809      	ldr	r1, [r1, #0]
 8008b82:	6411      	str	r1, [r2, #64]	; 0x40
 8008b84:	f00a fec8 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008b88:	4620      	mov	r0, r4
 8008b8a:	b006      	add	sp, #24
 8008b8c:	bd10      	pop	{r4, pc}
 8008b8e:	bf00      	nop
 8008b90:	080089fd 	.word	0x080089fd
 8008b94:	20000010 	.word	0x20000010

08008b98 <WINDOW_CreateIndirect>:
 8008b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8008ba0:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8008ba4:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8008ba8:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8008bac:	9100      	str	r1, [sp, #0]
 8008bae:	8a41      	ldrh	r1, [r0, #18]
 8008bb0:	9101      	str	r1, [sp, #4]
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	9102      	str	r1, [sp, #8]
 8008bb6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8008bba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008bbc:	9103      	str	r1, [sp, #12]
 8008bbe:	9404      	str	r4, [sp, #16]
 8008bc0:	6984      	ldr	r4, [r0, #24]
 8008bc2:	9405      	str	r4, [sp, #20]
 8008bc4:	eb0e 0002 	add.w	r0, lr, r2
 8008bc8:	18f9      	adds	r1, r7, r3
 8008bca:	4632      	mov	r2, r6
 8008bcc:	462b      	mov	r3, r5
 8008bce:	f7ff ffb9 	bl	8008b44 <WINDOW_CreateUser>
 8008bd2:	b007      	add	sp, #28
 8008bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008bd6 <_EffectRequiresRedraw>:
 8008bd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bd8:	460d      	mov	r5, r1
 8008bda:	f100 0108 	add.w	r1, r0, #8
 8008bde:	4602      	mov	r2, r0
 8008be0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008be2:	c903      	ldmia	r1, {r0, r1}
 8008be4:	681c      	ldr	r4, [r3, #0]
 8008be6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008bea:	4610      	mov	r0, r2
 8008bec:	4669      	mov	r1, sp
 8008bee:	f003 fab1 	bl	800c154 <WM__Screen2Client>
 8008bf2:	f9b5 2000 	ldrsh.w	r2, [r5]
 8008bf6:	f9bd 3000 	ldrsh.w	r3, [sp]
 8008bfa:	4422      	add	r2, r4
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	dc17      	bgt.n	8008c30 <_EffectRequiresRedraw+0x5a>
 8008c00:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8008c04:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8008c08:	1b12      	subs	r2, r2, r4
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	db10      	blt.n	8008c30 <_EffectRequiresRedraw+0x5a>
 8008c0e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8008c12:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8008c16:	4422      	add	r2, r4
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	dc09      	bgt.n	8008c30 <_EffectRequiresRedraw+0x5a>
 8008c1c:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 8008c20:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8008c24:	1b04      	subs	r4, r0, r4
 8008c26:	429c      	cmp	r4, r3
 8008c28:	bfac      	ite	ge
 8008c2a:	2000      	movge	r0, #0
 8008c2c:	2001      	movlt	r0, #1
 8008c2e:	e000      	b.n	8008c32 <_EffectRequiresRedraw+0x5c>
 8008c30:	2001      	movs	r0, #1
 8008c32:	b003      	add	sp, #12
 8008c34:	bd30      	pop	{r4, r5, pc}

08008c36 <WIDGET__RotateRect90>:
 8008c36:	f9b0 3000 	ldrsh.w	r3, [r0]
 8008c3a:	b570      	push	{r4, r5, r6, lr}
 8008c3c:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8008c40:	8815      	ldrh	r5, [r2, #0]
 8008c42:	88d0      	ldrh	r0, [r2, #6]
 8008c44:	8894      	ldrh	r4, [r2, #4]
 8008c46:	8852      	ldrh	r2, [r2, #2]
 8008c48:	804d      	strh	r5, [r1, #2]
 8008c4a:	1af3      	subs	r3, r6, r3
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	1a18      	subs	r0, r3, r0
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	8008      	strh	r0, [r1, #0]
 8008c54:	808b      	strh	r3, [r1, #4]
 8008c56:	80cc      	strh	r4, [r1, #6]
 8008c58:	bd70      	pop	{r4, r5, r6, pc}

08008c5a <WIDGET__GetClientRect>:
 8008c5a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8008c5c:	071b      	lsls	r3, r3, #28
 8008c5e:	b513      	push	{r0, r1, r4, lr}
 8008c60:	460c      	mov	r4, r1
 8008c62:	d50f      	bpl.n	8008c84 <WIDGET__GetClientRect+0x2a>
 8008c64:	4668      	mov	r0, sp
 8008c66:	f003 ff05 	bl	800ca74 <WM_GetClientRect>
 8008c6a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008c6e:	8023      	strh	r3, [r4, #0]
 8008c70:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008c74:	80a3      	strh	r3, [r4, #4]
 8008c76:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c7a:	8063      	strh	r3, [r4, #2]
 8008c7c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008c80:	80e3      	strh	r3, [r4, #6]
 8008c82:	e002      	b.n	8008c8a <WIDGET__GetClientRect+0x30>
 8008c84:	4608      	mov	r0, r1
 8008c86:	f003 fef5 	bl	800ca74 <WM_GetClientRect>
 8008c8a:	b002      	add	sp, #8
 8008c8c:	bd10      	pop	{r4, pc}

08008c8e <WIDGET__GetInsideRect>:
 8008c8e:	b538      	push	{r3, r4, r5, lr}
 8008c90:	4604      	mov	r4, r0
 8008c92:	460d      	mov	r5, r1
 8008c94:	f004 fbbf 	bl	800d416 <WM__GetClientRectWin>
 8008c98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca4:	f007 bf9e 	b.w	8010be4 <GUI__ReduceRect>

08008ca8 <WIDGET_SetState>:
 8008ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008caa:	460c      	mov	r4, r1
 8008cac:	4605      	mov	r5, r0
 8008cae:	f00a fe25 	bl	80138fc <GUI_ALLOC_LockH>
 8008cb2:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8008cb4:	9001      	str	r0, [sp, #4]
 8008cb6:	4294      	cmp	r4, r2
 8008cb8:	d003      	beq.n	8008cc2 <WIDGET_SetState+0x1a>
 8008cba:	8644      	strh	r4, [r0, #50]	; 0x32
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f004 fbf2 	bl	800d4a6 <WM_InvalidateWindow>
 8008cc2:	a801      	add	r0, sp, #4
 8008cc4:	f00a fe28 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008cc8:	b003      	add	sp, #12
 8008cca:	bd30      	pop	{r4, r5, pc}

08008ccc <WIDGET_OrState>:
 8008ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cce:	460c      	mov	r4, r1
 8008cd0:	4605      	mov	r5, r0
 8008cd2:	b178      	cbz	r0, 8008cf4 <WIDGET_OrState+0x28>
 8008cd4:	f00a fe12 	bl	80138fc <GUI_ALLOC_LockH>
 8008cd8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8008cda:	9001      	str	r0, [sp, #4]
 8008cdc:	ea04 0102 	and.w	r1, r4, r2
 8008ce0:	428c      	cmp	r4, r1
 8008ce2:	d004      	beq.n	8008cee <WIDGET_OrState+0x22>
 8008ce4:	4314      	orrs	r4, r2
 8008ce6:	8644      	strh	r4, [r0, #50]	; 0x32
 8008ce8:	4628      	mov	r0, r5
 8008cea:	f004 fbdc 	bl	800d4a6 <WM_InvalidateWindow>
 8008cee:	a801      	add	r0, sp, #4
 8008cf0:	f00a fe12 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008cf4:	b003      	add	sp, #12
 8008cf6:	bd30      	pop	{r4, r5, pc}

08008cf8 <WIDGET_AndState>:
 8008cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	b170      	cbz	r0, 8008d1e <WIDGET_AndState+0x26>
 8008d00:	f00a fdfc 	bl	80138fc <GUI_ALLOC_LockH>
 8008d04:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8008d06:	9001      	str	r0, [sp, #4]
 8008d08:	ea22 0105 	bic.w	r1, r2, r5
 8008d0c:	428a      	cmp	r2, r1
 8008d0e:	d003      	beq.n	8008d18 <WIDGET_AndState+0x20>
 8008d10:	8641      	strh	r1, [r0, #50]	; 0x32
 8008d12:	4620      	mov	r0, r4
 8008d14:	f004 fbc7 	bl	800d4a6 <WM_InvalidateWindow>
 8008d18:	a801      	add	r0, sp, #4
 8008d1a:	f00a fdfd 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008d1e:	b003      	add	sp, #12
 8008d20:	bd30      	pop	{r4, r5, pc}
	...

08008d24 <WIDGET__Init>:
 8008d24:	4b02      	ldr	r3, [pc, #8]	; (8008d30 <WIDGET__Init+0xc>)
 8008d26:	8642      	strh	r2, [r0, #50]	; 0x32
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	62c3      	str	r3, [r0, #44]	; 0x2c
 8008d2c:	8601      	strh	r1, [r0, #48]	; 0x30
 8008d2e:	4770      	bx	lr
 8008d30:	20000014 	.word	0x20000014

08008d34 <WIDGET_HandleActive>:
 8008d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d36:	460d      	mov	r5, r1
 8008d38:	b085      	sub	sp, #20
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	f000 8093 	beq.w	8008e68 <WIDGET_HandleActive+0x134>
 8008d42:	f00a fddb 	bl	80138fc <GUI_ALLOC_LockH>
 8008d46:	682b      	ldr	r3, [r5, #0]
 8008d48:	9002      	str	r0, [sp, #8]
 8008d4a:	2b16      	cmp	r3, #22
 8008d4c:	d052      	beq.n	8008df4 <WIDGET_HandleActive+0xc0>
 8008d4e:	dc0c      	bgt.n	8008d6a <WIDGET_HandleActive+0x36>
 8008d50:	2b11      	cmp	r3, #17
 8008d52:	d033      	beq.n	8008dbc <WIDGET_HandleActive+0x88>
 8008d54:	dc02      	bgt.n	8008d5c <WIDGET_HandleActive+0x28>
 8008d56:	2b0d      	cmp	r3, #13
 8008d58:	d03e      	beq.n	8008dd8 <WIDGET_HandleActive+0xa4>
 8008d5a:	e07e      	b.n	8008e5a <WIDGET_HandleActive+0x126>
 8008d5c:	2b14      	cmp	r3, #20
 8008d5e:	d077      	beq.n	8008e50 <WIDGET_HandleActive+0x11c>
 8008d60:	2b15      	cmp	r3, #21
 8008d62:	d17a      	bne.n	8008e5a <WIDGET_HandleActive+0x126>
 8008d64:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 8008d68:	e070      	b.n	8008e4c <WIDGET_HandleActive+0x118>
 8008d6a:	2b1f      	cmp	r3, #31
 8008d6c:	d06b      	beq.n	8008e46 <WIDGET_HandleActive+0x112>
 8008d6e:	dc02      	bgt.n	8008d76 <WIDGET_HandleActive+0x42>
 8008d70:	2b1e      	cmp	r3, #30
 8008d72:	d042      	beq.n	8008dfa <WIDGET_HandleActive+0xc6>
 8008d74:	e071      	b.n	8008e5a <WIDGET_HandleActive+0x126>
 8008d76:	2b31      	cmp	r3, #49	; 0x31
 8008d78:	d01e      	beq.n	8008db8 <WIDGET_HandleActive+0x84>
 8008d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d7e:	d16c      	bne.n	8008e5a <WIDGET_HandleActive+0x126>
 8008d80:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008d82:	6819      	ldr	r1, [r3, #0]
 8008d84:	68eb      	ldr	r3, [r5, #12]
 8008d86:	62c3      	str	r3, [r0, #44]	; 0x2c
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	a802      	add	r0, sp, #8
 8008d8c:	1acd      	subs	r5, r1, r3
 8008d8e:	f00a fdc3 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008d92:	4630      	mov	r0, r6
 8008d94:	f00a fdb2 	bl	80138fc <GUI_ALLOC_LockH>
 8008d98:	ac04      	add	r4, sp, #16
 8008d9a:	4269      	negs	r1, r5
 8008d9c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008da0:	460a      	mov	r2, r1
 8008da2:	462b      	mov	r3, r5
 8008da4:	9500      	str	r5, [sp, #0]
 8008da6:	f003 f93c 	bl	800c022 <WM__UpdateChildPositions>
 8008daa:	4620      	mov	r0, r4
 8008dac:	f00a fdb4 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008db0:	4630      	mov	r0, r6
 8008db2:	f004 fb78 	bl	800d4a6 <WM_InvalidateWindow>
 8008db6:	e04e      	b.n	8008e56 <WIDGET_HandleActive+0x122>
 8008db8:	2400      	movs	r4, #0
 8008dba:	e03f      	b.n	8008e3c <WIDGET_HandleActive+0x108>
 8008dbc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8008dbe:	06d9      	lsls	r1, r3, #27
 8008dc0:	d54b      	bpl.n	8008e5a <WIDGET_HandleActive+0x126>
 8008dc2:	68eb      	ldr	r3, [r5, #12]
 8008dc4:	7a1b      	ldrb	r3, [r3, #8]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d047      	beq.n	8008e5a <WIDGET_HandleActive+0x126>
 8008dca:	a802      	add	r0, sp, #8
 8008dcc:	f00a fda4 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f003 fb11 	bl	800c3f8 <WM_SetFocus>
 8008dd6:	e040      	b.n	8008e5a <WIDGET_HandleActive+0x126>
 8008dd8:	68eb      	ldr	r3, [r5, #12]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d03c      	beq.n	8008e5a <WIDGET_HandleActive+0x126>
 8008de0:	7a1b      	ldrb	r3, [r3, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d039      	beq.n	8008e5a <WIDGET_HandleActive+0x126>
 8008de6:	a802      	add	r0, sp, #8
 8008de8:	f00a fd96 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008dec:	4630      	mov	r0, r6
 8008dee:	f003 fe83 	bl	800caf8 <WM_BringToTop>
 8008df2:	e030      	b.n	8008e56 <WIDGET_HandleActive+0x122>
 8008df4:	68eb      	ldr	r3, [r5, #12]
 8008df6:	8603      	strh	r3, [r0, #48]	; 0x30
 8008df8:	e02d      	b.n	8008e56 <WIDGET_HandleActive+0x122>
 8008dfa:	68eb      	ldr	r3, [r5, #12]
 8008dfc:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d108      	bne.n	8008e14 <WIDGET_HandleActive+0xe0>
 8008e02:	06ca      	lsls	r2, r1, #27
 8008e04:	d50d      	bpl.n	8008e22 <WIDGET_HandleActive+0xee>
 8008e06:	4630      	mov	r0, r6
 8008e08:	f041 0101 	orr.w	r1, r1, #1
 8008e0c:	f7ff ff4c 	bl	8008ca8 <WIDGET_SetState>
 8008e10:	2708      	movs	r7, #8
 8008e12:	e008      	b.n	8008e26 <WIDGET_HandleActive+0xf2>
 8008e14:	f021 0101 	bic.w	r1, r1, #1
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f7ff ff45 	bl	8008ca8 <WIDGET_SetState>
 8008e1e:	2709      	movs	r7, #9
 8008e20:	e001      	b.n	8008e26 <WIDGET_HandleActive+0xf2>
 8008e22:	f04f 37ff 	mov.w	r7, #4294967295
 8008e26:	a802      	add	r0, sp, #8
 8008e28:	f00a fd76 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008e2c:	1c7b      	adds	r3, r7, #1
 8008e2e:	f04f 0400 	mov.w	r4, #0
 8008e32:	d005      	beq.n	8008e40 <WIDGET_HandleActive+0x10c>
 8008e34:	4630      	mov	r0, r6
 8008e36:	4639      	mov	r1, r7
 8008e38:	f003 fbe7 	bl	800c60a <WM_NotifyParent>
 8008e3c:	60ec      	str	r4, [r5, #12]
 8008e3e:	e00d      	b.n	8008e5c <WIDGET_HandleActive+0x128>
 8008e40:	2301      	movs	r3, #1
 8008e42:	60eb      	str	r3, [r5, #12]
 8008e44:	e00a      	b.n	8008e5c <WIDGET_HandleActive+0x128>
 8008e46:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8008e48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008e4c:	60eb      	str	r3, [r5, #12]
 8008e4e:	e002      	b.n	8008e56 <WIDGET_HandleActive+0x122>
 8008e50:	68e9      	ldr	r1, [r5, #12]
 8008e52:	f7ff ff1c 	bl	8008c8e <WIDGET__GetInsideRect>
 8008e56:	2400      	movs	r4, #0
 8008e58:	e000      	b.n	8008e5c <WIDGET_HandleActive+0x128>
 8008e5a:	2401      	movs	r4, #1
 8008e5c:	9b02      	ldr	r3, [sp, #8]
 8008e5e:	b123      	cbz	r3, 8008e6a <WIDGET_HandleActive+0x136>
 8008e60:	a802      	add	r0, sp, #8
 8008e62:	f00a fd59 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008e66:	e000      	b.n	8008e6a <WIDGET_HandleActive+0x136>
 8008e68:	2401      	movs	r4, #1
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	b005      	add	sp, #20
 8008e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e70 <WIDGET__SetScrollState>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	460d      	mov	r5, r1
 8008e74:	21fe      	movs	r1, #254	; 0xfe
 8008e76:	4616      	mov	r6, r2
 8008e78:	4604      	mov	r4, r0
 8008e7a:	f003 fdc9 	bl	800ca10 <WM_GetDialogItem>
 8008e7e:	4629      	mov	r1, r5
 8008e80:	f003 fa3e 	bl	800c300 <WM_SetScrollState>
 8008e84:	4620      	mov	r0, r4
 8008e86:	21ff      	movs	r1, #255	; 0xff
 8008e88:	f003 fdc2 	bl	800ca10 <WM_GetDialogItem>
 8008e8c:	4631      	mov	r1, r6
 8008e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e92:	f003 ba35 	b.w	800c300 <WM_SetScrollState>

08008e96 <WIDGET__DrawTriangle>:
 8008e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e98:	461c      	mov	r4, r3
 8008e9a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8008e9c:	9f06      	ldr	r7, [sp, #24]
 8008e9e:	071b      	lsls	r3, r3, #28
 8008ea0:	460d      	mov	r5, r1
 8008ea2:	4616      	mov	r6, r2
 8008ea4:	d50a      	bpl.n	8008ebc <WIDGET__DrawTriangle+0x26>
 8008ea6:	2c00      	cmp	r4, #0
 8008ea8:	db07      	blt.n	8008eba <WIDGET__DrawTriangle+0x24>
 8008eaa:	4628      	mov	r0, r5
 8008eac:	1b31      	subs	r1, r6, r4
 8008eae:	19a2      	adds	r2, r4, r6
 8008eb0:	f009 fc98 	bl	80127e4 <GUI_DrawHLine>
 8008eb4:	3c01      	subs	r4, #1
 8008eb6:	443d      	add	r5, r7
 8008eb8:	e7f5      	b.n	8008ea6 <WIDGET__DrawTriangle+0x10>
 8008eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ebc:	2c00      	cmp	r4, #0
 8008ebe:	db07      	blt.n	8008ed0 <WIDGET__DrawTriangle+0x3a>
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	1b31      	subs	r1, r6, r4
 8008ec4:	19a2      	adds	r2, r4, r6
 8008ec6:	f009 fa15 	bl	80122f4 <GUI_DrawVLine>
 8008eca:	3c01      	subs	r4, #1
 8008ecc:	443d      	add	r5, r7
 8008ece:	e7f5      	b.n	8008ebc <WIDGET__DrawTriangle+0x26>
 8008ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ed2 <WIDGET__EFFECT_DrawDownRect>:
 8008ed2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	b919      	cbnz	r1, 8008ee2 <WIDGET__EFFECT_DrawDownRect+0x10>
 8008eda:	4668      	mov	r0, sp
 8008edc:	f003 fdca 	bl	800ca74 <WM_GetClientRect>
 8008ee0:	466c      	mov	r4, sp
 8008ee2:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8008ee4:	071b      	lsls	r3, r3, #28
 8008ee6:	d505      	bpl.n	8008ef4 <WIDGET__EFFECT_DrawDownRect+0x22>
 8008ee8:	4622      	mov	r2, r4
 8008eea:	4628      	mov	r0, r5
 8008eec:	4669      	mov	r1, sp
 8008eee:	f7ff fea2 	bl	8008c36 <WIDGET__RotateRect90>
 8008ef2:	466c      	mov	r4, sp
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	f7ff fe6d 	bl	8008bd6 <_EffectRequiresRedraw>
 8008efc:	b118      	cbz	r0, 8008f06 <WIDGET__EFFECT_DrawDownRect+0x34>
 8008efe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f00:	4620      	mov	r0, r4
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	4798      	blx	r3
 8008f06:	b003      	add	sp, #12
 8008f08:	bd30      	pop	{r4, r5, pc}

08008f0a <WIDGET__EFFECT_DrawDown>:
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	f7ff bfe1 	b.w	8008ed2 <WIDGET__EFFECT_DrawDownRect>

08008f10 <WIDGET_GetDefaultEffect>:
 8008f10:	4b01      	ldr	r3, [pc, #4]	; (8008f18 <WIDGET_GetDefaultEffect+0x8>)
 8008f12:	6818      	ldr	r0, [r3, #0]
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	20000014 	.word	0x20000014

08008f1c <TEXT_SetTextColor>:
 8008f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f1e:	460c      	mov	r4, r1
 8008f20:	4605      	mov	r5, r0
 8008f22:	b160      	cbz	r0, 8008f3e <TEXT_SetTextColor+0x22>
 8008f24:	f00a fcea 	bl	80138fc <GUI_ALLOC_LockH>
 8008f28:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008f2a:	9001      	str	r0, [sp, #4]
 8008f2c:	42a2      	cmp	r2, r4
 8008f2e:	d003      	beq.n	8008f38 <TEXT_SetTextColor+0x1c>
 8008f30:	6384      	str	r4, [r0, #56]	; 0x38
 8008f32:	4628      	mov	r0, r5
 8008f34:	f004 fab7 	bl	800d4a6 <WM_InvalidateWindow>
 8008f38:	a801      	add	r0, sp, #4
 8008f3a:	f00a fced 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008f3e:	b003      	add	sp, #12
 8008f40:	bd30      	pop	{r4, r5, pc}

08008f42 <TEXT_SetFont>:
 8008f42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f44:	460c      	mov	r4, r1
 8008f46:	4605      	mov	r5, r0
 8008f48:	b160      	cbz	r0, 8008f64 <TEXT_SetFont+0x22>
 8008f4a:	f00a fcd7 	bl	80138fc <GUI_ALLOC_LockH>
 8008f4e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008f50:	9001      	str	r0, [sp, #4]
 8008f52:	42a2      	cmp	r2, r4
 8008f54:	d003      	beq.n	8008f5e <TEXT_SetFont+0x1c>
 8008f56:	6344      	str	r4, [r0, #52]	; 0x34
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f004 faa4 	bl	800d4a6 <WM_InvalidateWindow>
 8008f5e:	a801      	add	r0, sp, #4
 8008f60:	f00a fcda 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008f64:	b003      	add	sp, #12
 8008f66:	bd30      	pop	{r4, r5, pc}

08008f68 <TEXT_CreateIndirect>:
 8008f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8008f70:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8008f74:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8008f78:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8008f7c:	9100      	str	r1, [sp, #0]
 8008f7e:	2102      	movs	r1, #2
 8008f80:	9101      	str	r1, [sp, #4]
 8008f82:	8a41      	ldrh	r1, [r0, #18]
 8008f84:	9102      	str	r1, [sp, #8]
 8008f86:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8008f8a:	9103      	str	r1, [sp, #12]
 8008f8c:	6844      	ldr	r4, [r0, #4]
 8008f8e:	9404      	str	r4, [sp, #16]
 8008f90:	6984      	ldr	r4, [r0, #24]
 8008f92:	9405      	str	r4, [sp, #20]
 8008f94:	eb0e 0002 	add.w	r0, lr, r2
 8008f98:	18f9      	adds	r1, r7, r3
 8008f9a:	4632      	mov	r2, r6
 8008f9c:	462b      	mov	r3, r5
 8008f9e:	f000 f865 	bl	800906c <TEXT_CreateUser>
 8008fa2:	b007      	add	sp, #28
 8008fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fa6 <TEXT_Callback>:
 8008fa6:	b530      	push	{r4, r5, lr}
 8008fa8:	6845      	ldr	r5, [r0, #4]
 8008faa:	4604      	mov	r4, r0
 8008fac:	b085      	sub	sp, #20
 8008fae:	4628      	mov	r0, r5
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	f7ff febf 	bl	8008d34 <WIDGET_HandleActive>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d056      	beq.n	8009068 <TEXT_Callback+0xc2>
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	2b0f      	cmp	r3, #15
 8008fbe:	d01e      	beq.n	8008ffe <TEXT_Callback+0x58>
 8008fc0:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008fc4:	d00e      	beq.n	8008fe4 <TEXT_Callback+0x3e>
 8008fc6:	2b0b      	cmp	r3, #11
 8008fc8:	d14b      	bne.n	8009062 <TEXT_Callback+0xbc>
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f00a fc96 	bl	80138fc <GUI_ALLOC_LockH>
 8008fd0:	ad04      	add	r5, sp, #16
 8008fd2:	f845 0d08 	str.w	r0, [r5, #-8]!
 8008fd6:	3044      	adds	r0, #68	; 0x44
 8008fd8:	f00a fee8 	bl	8013dac <GUI_ALLOC_FreePtr>
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f00a fc9b 	bl	8013918 <GUI_ALLOC_UnlockH>
 8008fe2:	e03e      	b.n	8009062 <TEXT_Callback+0xbc>
 8008fe4:	68e3      	ldr	r3, [r4, #12]
 8008fe6:	b12b      	cbz	r3, 8008ff4 <TEXT_Callback+0x4e>
 8008fe8:	7a1b      	ldrb	r3, [r3, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	bf0c      	ite	eq
 8008fee:	2102      	moveq	r1, #2
 8008ff0:	2101      	movne	r1, #1
 8008ff2:	e000      	b.n	8008ff6 <TEXT_Callback+0x50>
 8008ff4:	2103      	movs	r1, #3
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f003 fb07 	bl	800c60a <WM_NotifyParent>
 8008ffc:	e031      	b.n	8009062 <TEXT_Callback+0xbc>
 8008ffe:	4628      	mov	r0, r5
 8009000:	f00a fc7c 	bl	80138fc <GUI_ALLOC_LockH>
 8009004:	9000      	str	r0, [sp, #0]
 8009006:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8009008:	f007 fd48 	bl	8010a9c <LCD_SetColor>
 800900c:	9b00      	ldr	r3, [sp, #0]
 800900e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009010:	f008 ff30 	bl	8011e74 <GUI_SetFont>
 8009014:	4628      	mov	r0, r5
 8009016:	f003 f911 	bl	800c23c <WM_GetHasTrans>
 800901a:	b928      	cbnz	r0, 8009028 <TEXT_Callback+0x82>
 800901c:	9b00      	ldr	r3, [sp, #0]
 800901e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009020:	f007 fd34 	bl	8010a8c <LCD_SetBkColor>
 8009024:	f00a f82e 	bl	8013084 <GUI_Clear>
 8009028:	9b00      	ldr	r3, [sp, #0]
 800902a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800902c:	b1ab      	cbz	r3, 800905a <TEXT_Callback+0xb4>
 800902e:	2002      	movs	r0, #2
 8009030:	f008 ff04 	bl	8011e3c <GUI_SetTextMode>
 8009034:	a802      	add	r0, sp, #8
 8009036:	f003 fd1d 	bl	800ca74 <WM_GetClientRect>
 800903a:	9b00      	ldr	r3, [sp, #0]
 800903c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800903e:	f00a fc5d 	bl	80138fc <GUI_ALLOC_LockH>
 8009042:	9b00      	ldr	r3, [sp, #0]
 8009044:	9001      	str	r0, [sp, #4]
 8009046:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800904a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800904e:	a902      	add	r1, sp, #8
 8009050:	f009 fd04 	bl	8012a5c <GUI_DispStringInRectWrap>
 8009054:	a801      	add	r0, sp, #4
 8009056:	f00a fc5f 	bl	8013918 <GUI_ALLOC_UnlockH>
 800905a:	4668      	mov	r0, sp
 800905c:	f00a fc5c 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009060:	e002      	b.n	8009068 <TEXT_Callback+0xc2>
 8009062:	4620      	mov	r0, r4
 8009064:	f004 fe50 	bl	800dd08 <WM_DefaultProc>
 8009068:	b005      	add	sp, #20
 800906a:	bd30      	pop	{r4, r5, pc}

0800906c <TEXT_CreateUser>:
 800906c:	b570      	push	{r4, r5, r6, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009072:	9500      	str	r5, [sp, #0]
 8009074:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009076:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009078:	f045 0501 	orr.w	r5, r5, #1
 800907c:	9501      	str	r5, [sp, #4]
 800907e:	4d1a      	ldr	r5, [pc, #104]	; (80090e8 <TEXT_CreateUser+0x7c>)
 8009080:	9502      	str	r5, [sp, #8]
 8009082:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009084:	3520      	adds	r5, #32
 8009086:	9503      	str	r5, [sp, #12]
 8009088:	f004 fa4e 	bl	800d528 <WM_CreateWindowAsChild>
 800908c:	4605      	mov	r5, r0
 800908e:	b340      	cbz	r0, 80090e2 <TEXT_CreateUser+0x76>
 8009090:	b18c      	cbz	r4, 80090b6 <TEXT_CreateUser+0x4a>
 8009092:	4620      	mov	r0, r4
 8009094:	f7f7 f8bc 	bl	8000210 <strlen>
 8009098:	3001      	adds	r0, #1
 800909a:	f00a ff0f 	bl	8013ebc <GUI_ALLOC_AllocZero>
 800909e:	4606      	mov	r6, r0
 80090a0:	b150      	cbz	r0, 80090b8 <TEXT_CreateUser+0x4c>
 80090a2:	f00a fc2b 	bl	80138fc <GUI_ALLOC_LockH>
 80090a6:	4621      	mov	r1, r4
 80090a8:	9005      	str	r0, [sp, #20]
 80090aa:	f011 fbe1 	bl	801a870 <strcpy>
 80090ae:	a805      	add	r0, sp, #20
 80090b0:	f00a fc32 	bl	8013918 <GUI_ALLOC_UnlockH>
 80090b4:	e000      	b.n	80090b8 <TEXT_CreateUser+0x4c>
 80090b6:	4626      	mov	r6, r4
 80090b8:	4628      	mov	r0, r5
 80090ba:	f00a fc1f 	bl	80138fc <GUI_ALLOC_LockH>
 80090be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090c0:	9005      	str	r0, [sp, #20]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f7ff fe2e 	bl	8008d24 <WIDGET__Init>
 80090c8:	9c05      	ldr	r4, [sp, #20]
 80090ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090cc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 80090d0:	4b06      	ldr	r3, [pc, #24]	; (80090ec <TEXT_CreateUser+0x80>)
 80090d2:	6466      	str	r6, [r4, #68]	; 0x44
 80090d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090d6:	3434      	adds	r4, #52	; 0x34
 80090d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80090dc:	a805      	add	r0, sp, #20
 80090de:	f00a fc1b 	bl	8013918 <GUI_ALLOC_UnlockH>
 80090e2:	4628      	mov	r0, r5
 80090e4:	b006      	add	sp, #24
 80090e6:	bd70      	pop	{r4, r5, r6, pc}
 80090e8:	08008fa7 	.word	0x08008fa7
 80090ec:	20000018 	.word	0x20000018

080090f0 <LISTVIEW_SetItemText>:
 80090f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f4:	460f      	mov	r7, r1
 80090f6:	b085      	sub	sp, #20
 80090f8:	4615      	mov	r5, r2
 80090fa:	461e      	mov	r6, r3
 80090fc:	4680      	mov	r8, r0
 80090fe:	2800      	cmp	r0, #0
 8009100:	d048      	beq.n	8009194 <LISTVIEW_SetItemText+0xa4>
 8009102:	2b00      	cmp	r3, #0
 8009104:	d046      	beq.n	8009194 <LISTVIEW_SetItemText+0xa4>
 8009106:	f00a fbf9 	bl	80138fc <GUI_ALLOC_LockH>
 800910a:	9002      	str	r0, [sp, #8]
 800910c:	f000 f879 	bl	8009202 <LISTVIEW__GetNumColumns>
 8009110:	ac04      	add	r4, sp, #16
 8009112:	4683      	mov	fp, r0
 8009114:	9802      	ldr	r0, [sp, #8]
 8009116:	f000 f871 	bl	80091fc <LISTVIEW__GetNumRows>
 800911a:	f854 3d08 	ldr.w	r3, [r4, #-8]!
 800911e:	4682      	mov	sl, r0
 8009120:	4620      	mov	r0, r4
 8009122:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8009126:	f00a fbf7 	bl	8013918 <GUI_ALLOC_UnlockH>
 800912a:	455f      	cmp	r7, fp
 800912c:	d232      	bcs.n	8009194 <LISTVIEW_SetItemText+0xa4>
 800912e:	4555      	cmp	r5, sl
 8009130:	d230      	bcs.n	8009194 <LISTVIEW_SetItemText+0xa4>
 8009132:	4630      	mov	r0, r6
 8009134:	f007 fcba 	bl	8010aac <GUI__strlen>
 8009138:	4629      	mov	r1, r5
 800913a:	4682      	mov	sl, r0
 800913c:	4648      	mov	r0, r9
 800913e:	f001 febf 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 8009142:	4601      	mov	r1, r0
 8009144:	a804      	add	r0, sp, #16
 8009146:	f8d1 9000 	ldr.w	r9, [r1]
 800914a:	f840 1d04 	str.w	r1, [r0, #-4]!
 800914e:	f00a fbe3 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009152:	4648      	mov	r0, r9
 8009154:	4639      	mov	r1, r7
 8009156:	f10a 0209 	add.w	r2, sl, #9
 800915a:	f001 fd7f 	bl	800ac5c <GUI_ARRAY_ResizeItemLocked>
 800915e:	9001      	str	r0, [sp, #4]
 8009160:	b1c0      	cbz	r0, 8009194 <LISTVIEW_SetItemText+0xa4>
 8009162:	4640      	mov	r0, r8
 8009164:	f00a fbca 	bl	80138fc <GUI_ALLOC_LockH>
 8009168:	af04      	add	r7, sp, #16
 800916a:	9002      	str	r0, [sp, #8]
 800916c:	f857 0d0c 	ldr.w	r0, [r7, #-12]!
 8009170:	4631      	mov	r1, r6
 8009172:	3004      	adds	r0, #4
 8009174:	f011 fb7c 	bl	801a870 <strcpy>
 8009178:	4638      	mov	r0, r7
 800917a:	f00a fbcd 	bl	8013918 <GUI_ALLOC_UnlockH>
 800917e:	9b02      	ldr	r3, [sp, #8]
 8009180:	2200      	movs	r2, #0
 8009182:	4640      	mov	r0, r8
 8009184:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8009188:	4629      	mov	r1, r5
 800918a:	f000 fa8e 	bl	80096aa <LISTVIEW__InvalidateRow>
 800918e:	4620      	mov	r0, r4
 8009190:	f00a fbc2 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009194:	b005      	add	sp, #20
 8009196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800919a <LISTVIEW_SetGridVis>:
 800919a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800919c:	460e      	mov	r6, r1
 800919e:	4605      	mov	r5, r0
 80091a0:	b190      	cbz	r0, 80091c8 <LISTVIEW_SetGridVis+0x2e>
 80091a2:	f00a fbab 	bl	80138fc <GUI_ALLOC_LockH>
 80091a6:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 80091a8:	9001      	str	r0, [sp, #4]
 80091aa:	42a6      	cmp	r6, r4
 80091ac:	d003      	beq.n	80091b6 <LISTVIEW_SetGridVis+0x1c>
 80091ae:	67c6      	str	r6, [r0, #124]	; 0x7c
 80091b0:	4628      	mov	r0, r5
 80091b2:	f000 f99b 	bl	80094ec <LISTVIEW__InvalidateInsideArea>
 80091b6:	a801      	add	r0, sp, #4
 80091b8:	f00a fbae 	bl	8013918 <GUI_ALLOC_UnlockH>
 80091bc:	42a6      	cmp	r6, r4
 80091be:	d004      	beq.n	80091ca <LISTVIEW_SetGridVis+0x30>
 80091c0:	4628      	mov	r0, r5
 80091c2:	f000 fb3d 	bl	8009840 <LISTVIEW__UpdateScrollParas>
 80091c6:	e000      	b.n	80091ca <LISTVIEW_SetGridVis+0x30>
 80091c8:	4604      	mov	r4, r0
 80091ca:	4620      	mov	r0, r4
 80091cc:	b002      	add	sp, #8
 80091ce:	bd70      	pop	{r4, r5, r6, pc}

080091d0 <LISTVIEW_SetFont>:
 80091d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091d2:	460d      	mov	r5, r1
 80091d4:	4604      	mov	r4, r0
 80091d6:	b178      	cbz	r0, 80091f8 <LISTVIEW_SetFont+0x28>
 80091d8:	f00a fb90 	bl	80138fc <GUI_ALLOC_LockH>
 80091dc:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80091de:	9001      	str	r0, [sp, #4]
 80091e0:	4295      	cmp	r5, r2
 80091e2:	d006      	beq.n	80091f2 <LISTVIEW_SetFont+0x22>
 80091e4:	6685      	str	r5, [r0, #104]	; 0x68
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 fb2a 	bl	8009840 <LISTVIEW__UpdateScrollParas>
 80091ec:	4620      	mov	r0, r4
 80091ee:	f000 f97d 	bl	80094ec <LISTVIEW__InvalidateInsideArea>
 80091f2:	a801      	add	r0, sp, #4
 80091f4:	f00a fb90 	bl	8013918 <GUI_ALLOC_UnlockH>
 80091f8:	b003      	add	sp, #12
 80091fa:	bd30      	pop	{r4, r5, pc}

080091fc <LISTVIEW__GetNumRows>:
 80091fc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80091fe:	f001 bdca 	b.w	800ad96 <GUI_ARRAY_GetNumItems>

08009202 <LISTVIEW__GetNumColumns>:
 8009202:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8009204:	f001 bdc7 	b.w	800ad96 <GUI_ARRAY_GetNumItems>

08009208 <LISTVIEW_CreateIndirect>:
 8009208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800920a:	b087      	sub	sp, #28
 800920c:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8009210:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8009214:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8009218:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 800921c:	9100      	str	r1, [sp, #0]
 800921e:	2100      	movs	r1, #0
 8009220:	9101      	str	r1, [sp, #4]
 8009222:	8a41      	ldrh	r1, [r0, #18]
 8009224:	9102      	str	r1, [sp, #8]
 8009226:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800922a:	9103      	str	r1, [sp, #12]
 800922c:	6984      	ldr	r4, [r0, #24]
 800922e:	9404      	str	r4, [sp, #16]
 8009230:	eb0e 0002 	add.w	r0, lr, r2
 8009234:	18f9      	adds	r1, r7, r3
 8009236:	4632      	mov	r2, r6
 8009238:	462b      	mov	r3, r5
 800923a:	f001 f831 	bl	800a2a0 <LISTVIEW_CreateUser>
 800923e:	b007      	add	sp, #28
 8009240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009242 <_UpdateScrollPos>:
 8009242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009246:	b088      	sub	sp, #32
 8009248:	4607      	mov	r7, r0
 800924a:	f00a fb57 	bl	80138fc <GUI_ALLOC_LockH>
 800924e:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8009250:	9001      	str	r0, [sp, #4]
 8009252:	2900      	cmp	r1, #0
 8009254:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
 8009258:	f100 0094 	add.w	r0, r0, #148	; 0x94
 800925c:	db04      	blt.n	8009268 <_UpdateScrollPos+0x26>
 800925e:	2200      	movs	r2, #0
 8009260:	4613      	mov	r3, r2
 8009262:	f003 fc24 	bl	800caae <WM_CheckScrollPos>
 8009266:	e001      	b.n	800926c <_UpdateScrollPos+0x2a>
 8009268:	f003 fc12 	bl	800ca90 <WM_CheckScrollBounds>
 800926c:	9801      	ldr	r0, [sp, #4]
 800926e:	30a0      	adds	r0, #160	; 0xa0
 8009270:	f003 fc0e 	bl	800ca90 <WM_CheckScrollBounds>
 8009274:	9b01      	ldr	r3, [sp, #4]
 8009276:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800927a:	ca07      	ldmia	r2, {r0, r1, r2}
 800927c:	ad05      	add	r5, sp, #20
 800927e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009282:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8009286:	ca07      	ldmia	r2, {r0, r1, r2}
 8009288:	ac02      	add	r4, sp, #8
 800928a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800928e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8009292:	a801      	add	r0, sp, #4
 8009294:	f00a fb40 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009298:	4638      	mov	r0, r7
 800929a:	4629      	mov	r1, r5
 800929c:	4622      	mov	r2, r4
 800929e:	f7ff fde7 	bl	8008e70 <WIDGET__SetScrollState>
 80092a2:	f1b8 0f00 	cmp.w	r8, #0
 80092a6:	d003      	beq.n	80092b0 <_UpdateScrollPos+0x6e>
 80092a8:	4640      	mov	r0, r8
 80092aa:	9903      	ldr	r1, [sp, #12]
 80092ac:	f001 f9ec 	bl	800a688 <HEADER_SetScrollPos>
 80092b0:	9806      	ldr	r0, [sp, #24]
 80092b2:	1b80      	subs	r0, r0, r6
 80092b4:	b008      	add	sp, #32
 80092b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080092ba <LISTVIEW_OwnerDraw>:
 80092ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092bc:	6843      	ldr	r3, [r0, #4]
 80092be:	8a07      	ldrh	r7, [r0, #16]
 80092c0:	8a82      	ldrh	r2, [r0, #20]
 80092c2:	f8b0 c018 	ldrh.w	ip, [r0, #24]
 80092c6:	8b86      	ldrh	r6, [r0, #28]
 80092c8:	6a04      	ldr	r4, [r0, #32]
 80092ca:	f8ad 7000 	strh.w	r7, [sp]
 80092ce:	2b05      	cmp	r3, #5
 80092d0:	f8ad 2002 	strh.w	r2, [sp, #2]
 80092d4:	f8ad c004 	strh.w	ip, [sp, #4]
 80092d8:	f8ad 6006 	strh.w	r6, [sp, #6]
 80092dc:	68c1      	ldr	r1, [r0, #12]
 80092de:	6885      	ldr	r5, [r0, #8]
 80092e0:	d044      	beq.n	800936c <LISTVIEW_OwnerDraw+0xb2>
 80092e2:	dc02      	bgt.n	80092ea <LISTVIEW_OwnerDraw+0x30>
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d00d      	beq.n	8009304 <LISTVIEW_OwnerDraw+0x4a>
 80092e8:	e05c      	b.n	80093a4 <LISTVIEW_OwnerDraw+0xea>
 80092ea:	2b1a      	cmp	r3, #26
 80092ec:	d005      	beq.n	80092fa <LISTVIEW_OwnerDraw+0x40>
 80092ee:	2b1b      	cmp	r3, #27
 80092f0:	d158      	bne.n	80093a4 <LISTVIEW_OwnerDraw+0xea>
 80092f2:	b230      	sxth	r0, r6
 80092f4:	b212      	sxth	r2, r2
 80092f6:	1a80      	subs	r0, r0, r2
 80092f8:	e055      	b.n	80093a6 <LISTVIEW_OwnerDraw+0xec>
 80092fa:	fa0f f08c 	sxth.w	r0, ip
 80092fe:	b23f      	sxth	r7, r7
 8009300:	1bc0      	subs	r0, r0, r7
 8009302:	e050      	b.n	80093a6 <LISTVIEW_OwnerDraw+0xec>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	b143      	cbz	r3, 800931a <LISTVIEW_OwnerDraw+0x60>
 8009308:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800930c:	0796      	lsls	r6, r2, #30
 800930e:	d504      	bpl.n	800931a <LISTVIEW_OwnerDraw+0x60>
 8009310:	681e      	ldr	r6, [r3, #0]
 8009312:	6800      	ldr	r0, [r0, #0]
 8009314:	462a      	mov	r2, r5
 8009316:	466b      	mov	r3, sp
 8009318:	47b0      	blx	r6
 800931a:	f8bd 2000 	ldrh.w	r2, [sp]
 800931e:	6963      	ldr	r3, [r4, #20]
 8009320:	4413      	add	r3, r2
 8009322:	f8ad 3000 	strh.w	r3, [sp]
 8009326:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800932a:	69a3      	ldr	r3, [r4, #24]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	b14b      	cbz	r3, 800934a <LISTVIEW_OwnerDraw+0x90>
 8009336:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800933a:	07d0      	lsls	r0, r2, #31
 800933c:	d505      	bpl.n	800934a <LISTVIEW_OwnerDraw+0x90>
 800933e:	6922      	ldr	r2, [r4, #16]
 8009340:	3206      	adds	r2, #6
 8009342:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009346:	f007 fba9 	bl	8010a9c <LCD_SetColor>
 800934a:	7923      	ldrb	r3, [r4, #4]
 800934c:	69e0      	ldr	r0, [r4, #28]
 800934e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8009352:	4669      	mov	r1, sp
 8009354:	f009 fb82 	bl	8012a5c <GUI_DispStringInRectWrap>
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	b31b      	cbz	r3, 80093a4 <LISTVIEW_OwnerDraw+0xea>
 800935c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009360:	07d9      	lsls	r1, r3, #31
 8009362:	d51f      	bpl.n	80093a4 <LISTVIEW_OwnerDraw+0xea>
 8009364:	68a0      	ldr	r0, [r4, #8]
 8009366:	f007 fb99 	bl	8010a9c <LCD_SetColor>
 800936a:	e01b      	b.n	80093a4 <LISTVIEW_OwnerDraw+0xea>
 800936c:	2d00      	cmp	r5, #0
 800936e:	db0b      	blt.n	8009388 <LISTVIEW_OwnerDraw+0xce>
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	b14b      	cbz	r3, 8009388 <LISTVIEW_OwnerDraw+0xce>
 8009374:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009378:	07d2      	lsls	r2, r2, #31
 800937a:	d505      	bpl.n	8009388 <LISTVIEW_OwnerDraw+0xce>
 800937c:	6922      	ldr	r2, [r4, #16]
 800937e:	3202      	adds	r2, #2
 8009380:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009384:	f007 fb82 	bl	8010a8c <LCD_SetBkColor>
 8009388:	4668      	mov	r0, sp
 800938a:	f009 ff09 	bl	80131a0 <GUI_ClearRectEx>
 800938e:	2d00      	cmp	r5, #0
 8009390:	db08      	blt.n	80093a4 <LISTVIEW_OwnerDraw+0xea>
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	b133      	cbz	r3, 80093a4 <LISTVIEW_OwnerDraw+0xea>
 8009396:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800939a:	07db      	lsls	r3, r3, #31
 800939c:	d502      	bpl.n	80093a4 <LISTVIEW_OwnerDraw+0xea>
 800939e:	68e0      	ldr	r0, [r4, #12]
 80093a0:	f007 fb74 	bl	8010a8c <LCD_SetBkColor>
 80093a4:	2000      	movs	r0, #0
 80093a6:	b003      	add	sp, #12
 80093a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093aa <_NotifyOwner>:
 80093aa:	b530      	push	{r4, r5, lr}
 80093ac:	b085      	sub	sp, #20
 80093ae:	4604      	mov	r4, r0
 80093b0:	2210      	movs	r2, #16
 80093b2:	460d      	mov	r5, r1
 80093b4:	4668      	mov	r0, sp
 80093b6:	2100      	movs	r1, #0
 80093b8:	f011 fa32 	bl	801a820 <memset>
 80093bc:	4620      	mov	r0, r4
 80093be:	f003 fa59 	bl	800c874 <WM_GetParent>
 80093c2:	2326      	movs	r3, #38	; 0x26
 80093c4:	4669      	mov	r1, sp
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	9503      	str	r5, [sp, #12]
 80093ca:	9402      	str	r4, [sp, #8]
 80093cc:	f002 fea4 	bl	800c118 <WM__SendMessage>
 80093d0:	b005      	add	sp, #20
 80093d2:	bd30      	pop	{r4, r5, pc}

080093d4 <_MoveSelCol>:
 80093d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80093d8:	4688      	mov	r8, r1
 80093da:	4606      	mov	r6, r0
 80093dc:	f00a fa8e 	bl	80138fc <GUI_ALLOC_LockH>
 80093e0:	ac02      	add	r4, sp, #8
 80093e2:	6f85      	ldr	r5, [r0, #120]	; 0x78
 80093e4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80093e8:	f7ff ff0b 	bl	8009202 <LISTVIEW__GetNumColumns>
 80093ec:	4607      	mov	r7, r0
 80093ee:	4620      	mov	r0, r4
 80093f0:	f00a fa92 	bl	8013918 <GUI_ALLOC_UnlockH>
 80093f4:	1c6b      	adds	r3, r5, #1
 80093f6:	d011      	beq.n	800941c <_MoveSelCol+0x48>
 80093f8:	4445      	add	r5, r8
 80093fa:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80093fe:	42bd      	cmp	r5, r7
 8009400:	4630      	mov	r0, r6
 8009402:	bfa8      	it	ge
 8009404:	f107 35ff 	addge.w	r5, r7, #4294967295
 8009408:	f00a fa78 	bl	80138fc <GUI_ALLOC_LockH>
 800940c:	9001      	str	r0, [sp, #4]
 800940e:	6785      	str	r5, [r0, #120]	; 0x78
 8009410:	4620      	mov	r0, r4
 8009412:	f00a fa81 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009416:	4630      	mov	r0, r6
 8009418:	f004 f845 	bl	800d4a6 <WM_InvalidateWindow>
 800941c:	b002      	add	sp, #8
 800941e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009422 <LISTVIEW__GetpRow>:
 8009422:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009424:	460c      	mov	r4, r1
 8009426:	f00a fa69 	bl	80138fc <GUI_ALLOC_LockH>
 800942a:	4603      	mov	r3, r0
 800942c:	9002      	str	r0, [sp, #8]
 800942e:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8009432:	b338      	cbz	r0, 8009484 <LISTVIEW__GetpRow+0x62>
 8009434:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009438:	2a00      	cmp	r2, #0
 800943a:	db23      	blt.n	8009484 <LISTVIEW__GetpRow+0x62>
 800943c:	f00a fa5e 	bl	80138fc <GUI_ALLOC_LockH>
 8009440:	9001      	str	r0, [sp, #4]
 8009442:	6800      	ldr	r0, [r0, #0]
 8009444:	b1a0      	cbz	r0, 8009470 <LISTVIEW__GetpRow+0x4e>
 8009446:	f00a fa59 	bl	80138fc <GUI_ALLOC_LockH>
 800944a:	9a01      	ldr	r2, [sp, #4]
 800944c:	9003      	str	r0, [sp, #12]
 800944e:	8892      	ldrh	r2, [r2, #4]
 8009450:	4294      	cmp	r4, r2
 8009452:	4603      	mov	r3, r0
 8009454:	da07      	bge.n	8009466 <LISTVIEW__GetpRow+0x44>
 8009456:	9a02      	ldr	r2, [sp, #8]
 8009458:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 800945c:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 800945e:	f001 fd2f 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 8009462:	4604      	mov	r4, r0
 8009464:	e000      	b.n	8009468 <LISTVIEW__GetpRow+0x46>
 8009466:	2400      	movs	r4, #0
 8009468:	a803      	add	r0, sp, #12
 800946a:	f00a fa55 	bl	8013918 <GUI_ALLOC_UnlockH>
 800946e:	e005      	b.n	800947c <LISTVIEW__GetpRow+0x5a>
 8009470:	9b02      	ldr	r3, [sp, #8]
 8009472:	4621      	mov	r1, r4
 8009474:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009476:	f001 fd23 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 800947a:	4604      	mov	r4, r0
 800947c:	a801      	add	r0, sp, #4
 800947e:	f00a fa4b 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009482:	e004      	b.n	800948e <LISTVIEW__GetpRow+0x6c>
 8009484:	4621      	mov	r1, r4
 8009486:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009488:	f001 fd1a 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 800948c:	4604      	mov	r4, r0
 800948e:	a802      	add	r0, sp, #8
 8009490:	f00a fa42 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009494:	4620      	mov	r0, r4
 8009496:	b004      	add	sp, #16
 8009498:	bd10      	pop	{r4, pc}

0800949a <LISTVIEW__GetRowDistY>:
 800949a:	b510      	push	{r4, lr}
 800949c:	4604      	mov	r4, r0
 800949e:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 80094a2:	b928      	cbnz	r0, 80094b0 <LISTVIEW__GetRowDistY+0x16>
 80094a4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80094a6:	f008 febd 	bl	8012224 <GUI_GetYDistOfFont>
 80094aa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80094ac:	b103      	cbz	r3, 80094b0 <LISTVIEW__GetRowDistY+0x16>
 80094ae:	3001      	adds	r0, #1
 80094b0:	bd10      	pop	{r4, pc}

080094b2 <_GetNumVisibleRows>:
 80094b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094b4:	460c      	mov	r4, r1
 80094b6:	4669      	mov	r1, sp
 80094b8:	f003 fa04 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 80094bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80094be:	f001 f994 	bl	800a7ea <HEADER_GetHeight>
 80094c2:	4605      	mov	r5, r0
 80094c4:	4620      	mov	r0, r4
 80094c6:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 80094ca:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80094ce:	f7ff ffe4 	bl	800949a <LISTVIEW__GetRowDistY>
 80094d2:	b148      	cbz	r0, 80094e8 <_GetNumVisibleRows+0x36>
 80094d4:	b23f      	sxth	r7, r7
 80094d6:	b236      	sxth	r6, r6
 80094d8:	1bbe      	subs	r6, r7, r6
 80094da:	3601      	adds	r6, #1
 80094dc:	1b75      	subs	r5, r6, r5
 80094de:	fbb5 f0f0 	udiv	r0, r5, r0
 80094e2:	2800      	cmp	r0, #0
 80094e4:	bf08      	it	eq
 80094e6:	2001      	moveq	r0, #1
 80094e8:	b003      	add	sp, #12
 80094ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080094ec <LISTVIEW__InvalidateInsideArea>:
 80094ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80094ee:	4605      	mov	r5, r0
 80094f0:	f00a fa04 	bl	80138fc <GUI_ALLOC_LockH>
 80094f4:	ac04      	add	r4, sp, #16
 80094f6:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80094fa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80094fc:	f001 f975 	bl	800a7ea <HEADER_GetHeight>
 8009500:	4606      	mov	r6, r0
 8009502:	4620      	mov	r0, r4
 8009504:	f00a fa08 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009508:	4628      	mov	r0, r5
 800950a:	a902      	add	r1, sp, #8
 800950c:	f003 f9da 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 8009510:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8009514:	4628      	mov	r0, r5
 8009516:	441e      	add	r6, r3
 8009518:	a902      	add	r1, sp, #8
 800951a:	f8ad 600a 	strh.w	r6, [sp, #10]
 800951e:	f003 ff86 	bl	800d42e <WM_InvalidateRect>
 8009522:	b004      	add	sp, #16
 8009524:	bd70      	pop	{r4, r5, r6, pc}

08009526 <_ColumnScroll>:
 8009526:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952a:	b087      	sub	sp, #28
 800952c:	4606      	mov	r6, r0
 800952e:	468b      	mov	fp, r1
 8009530:	f00a f9e4 	bl	80138fc <GUI_ALLOC_LockH>
 8009534:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
 8009538:	4603      	mov	r3, r0
 800953a:	9000      	str	r0, [sp, #0]
 800953c:	ca07      	ldmia	r2, {r0, r1, r2}
 800953e:	ac03      	add	r4, sp, #12
 8009540:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009544:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8009548:	f8d3 9078 	ldr.w	r9, [r3, #120]	; 0x78
 800954c:	4668      	mov	r0, sp
 800954e:	f00a f9e3 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009552:	4630      	mov	r0, r6
 8009554:	a901      	add	r1, sp, #4
 8009556:	f003 f9b5 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 800955a:	4650      	mov	r0, sl
 800955c:	4649      	mov	r1, r9
 800955e:	f001 f95c 	bl	800a81a <HEADER_GetItemWidth>
 8009562:	f04f 0800 	mov.w	r8, #0
 8009566:	4607      	mov	r7, r0
 8009568:	4645      	mov	r5, r8
 800956a:	45c8      	cmp	r8, r9
 800956c:	dc07      	bgt.n	800957e <_ColumnScroll+0x58>
 800956e:	4641      	mov	r1, r8
 8009570:	4650      	mov	r0, sl
 8009572:	f001 f952 	bl	800a81a <HEADER_GetItemWidth>
 8009576:	f108 0801 	add.w	r8, r8, #1
 800957a:	4405      	add	r5, r0
 800957c:	e7f5      	b.n	800956a <_ColumnScroll+0x44>
 800957e:	f1ab 0b10 	sub.w	fp, fp, #16
 8009582:	f1bb 0f03 	cmp.w	fp, #3
 8009586:	f200 808d 	bhi.w	80096a4 <_ColumnScroll+0x17e>
 800958a:	e8df f00b 	tbb	[pc, fp]
 800958e:	0264      	.short	0x0264
 8009590:	0233      	.short	0x0233
 8009592:	9904      	ldr	r1, [sp, #16]
 8009594:	1beb      	subs	r3, r5, r7
 8009596:	428b      	cmp	r3, r1
 8009598:	db26      	blt.n	80095e8 <_ColumnScroll+0xc2>
 800959a:	2700      	movs	r7, #0
 800959c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80095a0:	1aea      	subs	r2, r5, r3
 80095a2:	428a      	cmp	r2, r1
 80095a4:	dd04      	ble.n	80095b0 <_ColumnScroll+0x8a>
 80095a6:	1a6f      	subs	r7, r5, r1
 80095a8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80095ac:	1aff      	subs	r7, r7, r3
 80095ae:	4417      	add	r7, r2
 80095b0:	b127      	cbz	r7, 80095bc <_ColumnScroll+0x96>
 80095b2:	4439      	add	r1, r7
 80095b4:	4620      	mov	r0, r4
 80095b6:	f003 fa93 	bl	800cae0 <WM_SetScrollValue>
 80095ba:	4607      	mov	r7, r0
 80095bc:	4630      	mov	r0, r6
 80095be:	f00a f99d 	bl	80138fc <GUI_ALLOC_LockH>
 80095c2:	9000      	str	r0, [sp, #0]
 80095c4:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 80095c8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80095cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80095d0:	4668      	mov	r0, sp
 80095d2:	f00a f9a1 	bl	8013918 <GUI_ALLOC_UnlockH>
 80095d6:	2f00      	cmp	r7, #0
 80095d8:	d064      	beq.n	80096a4 <_ColumnScroll+0x17e>
 80095da:	4630      	mov	r0, r6
 80095dc:	f7ff fe31 	bl	8009242 <_UpdateScrollPos>
 80095e0:	4630      	mov	r0, r6
 80095e2:	f7ff ff83 	bl	80094ec <LISTVIEW__InvalidateInsideArea>
 80095e6:	e05d      	b.n	80096a4 <_ColumnScroll+0x17e>
 80095e8:	1a6b      	subs	r3, r5, r1
 80095ea:	1bdf      	subs	r7, r3, r7
 80095ec:	2f00      	cmp	r7, #0
 80095ee:	bfc8      	it	gt
 80095f0:	427f      	neggt	r7, r7
 80095f2:	e7d3      	b.n	800959c <_ColumnScroll+0x76>
 80095f4:	f109 0101 	add.w	r1, r9, #1
 80095f8:	4650      	mov	r0, sl
 80095fa:	f001 f90e 	bl	800a81a <HEADER_GetItemWidth>
 80095fe:	9b04      	ldr	r3, [sp, #16]
 8009600:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8009604:	4428      	add	r0, r5
 8009606:	4419      	add	r1, r3
 8009608:	4288      	cmp	r0, r1
 800960a:	bfc3      	ittte	gt
 800960c:	f9bd 2004 	ldrshgt.w	r2, [sp, #4]
 8009610:	ebc1 0100 	rsbgt	r1, r1, r0
 8009614:	1889      	addgt	r1, r1, r2
 8009616:	2100      	movle	r1, #0
 8009618:	429d      	cmp	r5, r3
 800961a:	bfb8      	it	lt
 800961c:	ebc3 0105 	rsblt	r1, r3, r5
 8009620:	b129      	cbz	r1, 800962e <_ColumnScroll+0x108>
 8009622:	4620      	mov	r0, r4
 8009624:	4419      	add	r1, r3
 8009626:	f003 fa5b 	bl	800cae0 <WM_SetScrollValue>
 800962a:	4605      	mov	r5, r0
 800962c:	e000      	b.n	8009630 <_ColumnScroll+0x10a>
 800962e:	460d      	mov	r5, r1
 8009630:	2101      	movs	r1, #1
 8009632:	4630      	mov	r0, r6
 8009634:	f7ff fece 	bl	80093d4 <_MoveSelCol>
 8009638:	4630      	mov	r0, r6
 800963a:	f00a f95f 	bl	80138fc <GUI_ALLOC_LockH>
 800963e:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 8009642:	9000      	str	r0, [sp, #0]
 8009644:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009648:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800964c:	4668      	mov	r0, sp
 800964e:	f00a f963 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009652:	b33d      	cbz	r5, 80096a4 <_ColumnScroll+0x17e>
 8009654:	e7c1      	b.n	80095da <_ColumnScroll+0xb4>
 8009656:	f109 31ff 	add.w	r1, r9, #4294967295
 800965a:	4650      	mov	r0, sl
 800965c:	f001 f8dd 	bl	800a81a <HEADER_GetItemWidth>
 8009660:	9b04      	ldr	r3, [sp, #16]
 8009662:	1bea      	subs	r2, r5, r7
 8009664:	4418      	add	r0, r3
 8009666:	4290      	cmp	r0, r2
 8009668:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800966c:	bfc8      	it	gt
 800966e:	ebc5 0107 	rsbgt	r1, r5, r7
 8009672:	441a      	add	r2, r3
 8009674:	bfcc      	ite	gt
 8009676:	1809      	addgt	r1, r1, r0
 8009678:	2100      	movle	r1, #0
 800967a:	42aa      	cmp	r2, r5
 800967c:	da04      	bge.n	8009688 <_ColumnScroll+0x162>
 800967e:	1b55      	subs	r5, r2, r5
 8009680:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8009684:	442f      	add	r7, r5
 8009686:	1a39      	subs	r1, r7, r0
 8009688:	b129      	cbz	r1, 8009696 <_ColumnScroll+0x170>
 800968a:	4620      	mov	r0, r4
 800968c:	1a59      	subs	r1, r3, r1
 800968e:	f003 fa27 	bl	800cae0 <WM_SetScrollValue>
 8009692:	4607      	mov	r7, r0
 8009694:	e000      	b.n	8009698 <_ColumnScroll+0x172>
 8009696:	460f      	mov	r7, r1
 8009698:	4630      	mov	r0, r6
 800969a:	f04f 31ff 	mov.w	r1, #4294967295
 800969e:	f7ff fe99 	bl	80093d4 <_MoveSelCol>
 80096a2:	e78b      	b.n	80095bc <_ColumnScroll+0x96>
 80096a4:	b007      	add	sp, #28
 80096a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096aa <LISTVIEW__InvalidateRow>:
 80096aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096ae:	f1b1 0800 	subs.w	r8, r1, #0
 80096b2:	b085      	sub	sp, #20
 80096b4:	4605      	mov	r5, r0
 80096b6:	db27      	blt.n	8009708 <LISTVIEW__InvalidateRow+0x5e>
 80096b8:	f00a f920 	bl	80138fc <GUI_ALLOC_LockH>
 80096bc:	9001      	str	r0, [sp, #4]
 80096be:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80096c0:	f001 f893 	bl	800a7ea <HEADER_GetHeight>
 80096c4:	ac04      	add	r4, sp, #16
 80096c6:	4681      	mov	r9, r0
 80096c8:	f854 0d0c 	ldr.w	r0, [r4, #-12]!
 80096cc:	f8d0 7098 	ldr.w	r7, [r0, #152]	; 0x98
 80096d0:	f7ff fee3 	bl	800949a <LISTVIEW__GetRowDistY>
 80096d4:	4606      	mov	r6, r0
 80096d6:	4620      	mov	r0, r4
 80096d8:	f00a f91e 	bl	8013918 <GUI_ALLOC_UnlockH>
 80096dc:	4628      	mov	r0, r5
 80096de:	a902      	add	r1, sp, #8
 80096e0:	f003 f8f0 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 80096e4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80096e8:	4499      	add	r9, r3
 80096ea:	ebc7 0308 	rsb	r3, r7, r8
 80096ee:	fb06 9303 	mla	r3, r6, r3, r9
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	3e01      	subs	r6, #1
 80096f6:	f8ad 300a 	strh.w	r3, [sp, #10]
 80096fa:	4628      	mov	r0, r5
 80096fc:	4433      	add	r3, r6
 80096fe:	a902      	add	r1, sp, #8
 8009700:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009704:	f003 fe93 	bl	800d42e <WM_InvalidateRect>
 8009708:	b005      	add	sp, #20
 800970a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800970e <LISTVIEW__SetSel>:
 800970e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009712:	460c      	mov	r4, r1
 8009714:	4605      	mov	r5, r0
 8009716:	f00a f8f1 	bl	80138fc <GUI_ALLOC_LockH>
 800971a:	ae02      	add	r6, sp, #8
 800971c:	9001      	str	r0, [sp, #4]
 800971e:	f7ff fd6d 	bl	80091fc <LISTVIEW__GetNumRows>
 8009722:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8009726:	4680      	mov	r8, r0
 8009728:	4630      	mov	r0, r6
 800972a:	6f5f      	ldr	r7, [r3, #116]	; 0x74
 800972c:	f00a f8f4 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009730:	4544      	cmp	r4, r8
 8009732:	bfa8      	it	ge
 8009734:	f108 34ff 	addge.w	r4, r8, #4294967295
 8009738:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800973c:	42bc      	cmp	r4, r7
 800973e:	d020      	beq.n	8009782 <LISTVIEW__SetSel+0x74>
 8009740:	4628      	mov	r0, r5
 8009742:	4621      	mov	r1, r4
 8009744:	f00b f846 	bl	80147d4 <LISTVIEW_RowIsDisabled>
 8009748:	b9d8      	cbnz	r0, 8009782 <LISTVIEW__SetSel+0x74>
 800974a:	4628      	mov	r0, r5
 800974c:	f00a f8d6 	bl	80138fc <GUI_ALLOC_LockH>
 8009750:	9001      	str	r0, [sp, #4]
 8009752:	6744      	str	r4, [r0, #116]	; 0x74
 8009754:	4630      	mov	r0, r6
 8009756:	f00a f8df 	bl	8013918 <GUI_ALLOC_UnlockH>
 800975a:	4628      	mov	r0, r5
 800975c:	f7ff fd71 	bl	8009242 <_UpdateScrollPos>
 8009760:	b118      	cbz	r0, 800976a <LISTVIEW__SetSel+0x5c>
 8009762:	4628      	mov	r0, r5
 8009764:	f7ff fec2 	bl	80094ec <LISTVIEW__InvalidateInsideArea>
 8009768:	e007      	b.n	800977a <LISTVIEW__SetSel+0x6c>
 800976a:	4628      	mov	r0, r5
 800976c:	4639      	mov	r1, r7
 800976e:	f7ff ff9c 	bl	80096aa <LISTVIEW__InvalidateRow>
 8009772:	4628      	mov	r0, r5
 8009774:	4621      	mov	r1, r4
 8009776:	f7ff ff98 	bl	80096aa <LISTVIEW__InvalidateRow>
 800977a:	4628      	mov	r0, r5
 800977c:	2104      	movs	r1, #4
 800977e:	f002 ff44 	bl	800c60a <WM_NotifyParent>
 8009782:	b002      	add	sp, #8
 8009784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009788 <_MoveSel>:
 8009788:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800978c:	460f      	mov	r7, r1
 800978e:	4606      	mov	r6, r0
 8009790:	f00a f8b4 	bl	80138fc <GUI_ALLOC_LockH>
 8009794:	ad02      	add	r5, sp, #8
 8009796:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8009798:	f845 0d04 	str.w	r0, [r5, #-4]!
 800979c:	f7ff fd2e 	bl	80091fc <LISTVIEW__GetNumRows>
 80097a0:	4680      	mov	r8, r0
 80097a2:	4628      	mov	r0, r5
 80097a4:	f00a f8b8 	bl	8013918 <GUI_ALLOC_UnlockH>
 80097a8:	19e4      	adds	r4, r4, r7
 80097aa:	d40b      	bmi.n	80097c4 <_MoveSel+0x3c>
 80097ac:	4544      	cmp	r4, r8
 80097ae:	da09      	bge.n	80097c4 <_MoveSel+0x3c>
 80097b0:	4630      	mov	r0, r6
 80097b2:	4621      	mov	r1, r4
 80097b4:	f00b f80e 	bl	80147d4 <LISTVIEW_RowIsDisabled>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d1f5      	bne.n	80097a8 <_MoveSel+0x20>
 80097bc:	4630      	mov	r0, r6
 80097be:	4621      	mov	r1, r4
 80097c0:	f7ff ffa5 	bl	800970e <LISTVIEW__SetSel>
 80097c4:	b002      	add	sp, #8
 80097c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080097ca <_OnPage>:
 80097ca:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80097ce:	468a      	mov	sl, r1
 80097d0:	4604      	mov	r4, r0
 80097d2:	f00a f893 	bl	80138fc <GUI_ALLOC_LockH>
 80097d6:	f10d 0808 	add.w	r8, sp, #8
 80097da:	6f46      	ldr	r6, [r0, #116]	; 0x74
 80097dc:	f848 0d04 	str.w	r0, [r8, #-4]!
 80097e0:	f8d0 7098 	ldr.w	r7, [r0, #152]	; 0x98
 80097e4:	f8d0 509c 	ldr.w	r5, [r0, #156]	; 0x9c
 80097e8:	f7ff fd08 	bl	80091fc <LISTVIEW__GetNumRows>
 80097ec:	4681      	mov	r9, r0
 80097ee:	4640      	mov	r0, r8
 80097f0:	f00a f892 	bl	8013918 <GUI_ALLOC_UnlockH>
 80097f4:	f1ba 0f00 	cmp.w	sl, #0
 80097f8:	da0a      	bge.n	8009810 <_OnPage+0x46>
 80097fa:	42be      	cmp	r6, r7
 80097fc:	4620      	mov	r0, r4
 80097fe:	d001      	beq.n	8009804 <_OnPage+0x3a>
 8009800:	4639      	mov	r1, r7
 8009802:	e017      	b.n	8009834 <_OnPage+0x6a>
 8009804:	42ae      	cmp	r6, r5
 8009806:	db01      	blt.n	800980c <_OnPage+0x42>
 8009808:	4269      	negs	r1, r5
 800980a:	e00e      	b.n	800982a <_OnPage+0x60>
 800980c:	2100      	movs	r1, #0
 800980e:	e011      	b.n	8009834 <_OnPage+0x6a>
 8009810:	442f      	add	r7, r5
 8009812:	1e79      	subs	r1, r7, #1
 8009814:	428e      	cmp	r6, r1
 8009816:	d001      	beq.n	800981c <_OnPage+0x52>
 8009818:	4620      	mov	r0, r4
 800981a:	e00b      	b.n	8009834 <_OnPage+0x6a>
 800981c:	ebc5 0309 	rsb	r3, r5, r9
 8009820:	3b01      	subs	r3, #1
 8009822:	429e      	cmp	r6, r3
 8009824:	4620      	mov	r0, r4
 8009826:	da03      	bge.n	8009830 <_OnPage+0x66>
 8009828:	4629      	mov	r1, r5
 800982a:	f7ff ffad 	bl	8009788 <_MoveSel>
 800982e:	e003      	b.n	8009838 <_OnPage+0x6e>
 8009830:	f109 31ff 	add.w	r1, r9, #4294967295
 8009834:	f7ff ff6b 	bl	800970e <LISTVIEW__SetSel>
 8009838:	b002      	add	sp, #8
 800983a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08009840 <LISTVIEW__UpdateScrollParas>:
 8009840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009844:	4b37      	ldr	r3, [pc, #220]	; (8009924 <LISTVIEW__UpdateScrollParas+0xe4>)
 8009846:	781e      	ldrb	r6, [r3, #0]
 8009848:	b087      	sub	sp, #28
 800984a:	4604      	mov	r4, r0
 800984c:	4699      	mov	r9, r3
 800984e:	2e00      	cmp	r6, #0
 8009850:	d163      	bne.n	800991a <LISTVIEW__UpdateScrollParas+0xda>
 8009852:	2501      	movs	r5, #1
 8009854:	701d      	strb	r5, [r3, #0]
 8009856:	f00a f851 	bl	80138fc <GUI_ALLOC_LockH>
 800985a:	4601      	mov	r1, r0
 800985c:	9003      	str	r0, [sp, #12]
 800985e:	4620      	mov	r0, r4
 8009860:	f7ff fe27 	bl	80094b2 <_GetNumVisibleRows>
 8009864:	a904      	add	r1, sp, #16
 8009866:	4607      	mov	r7, r0
 8009868:	4620      	mov	r0, r4
 800986a:	f003 f82b 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 800986e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009872:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8009876:	f9bd a014 	ldrsh.w	sl, [sp, #20]
 800987a:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 800987e:	f8d8 b03c 	ldr.w	fp, [r8, #60]	; 0x3c
 8009882:	ebc3 0a0a 	rsb	sl, r3, sl
 8009886:	f001 f9d7 	bl	800ac38 <HEADER_GetNumItems>
 800988a:	44aa      	add	sl, r5
 800988c:	4603      	mov	r3, r0
 800988e:	b160      	cbz	r0, 80098aa <LISTVIEW__UpdateScrollParas+0x6a>
 8009890:	4635      	mov	r5, r6
 8009892:	429e      	cmp	r6, r3
 8009894:	da09      	bge.n	80098aa <LISTVIEW__UpdateScrollParas+0x6a>
 8009896:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	4631      	mov	r1, r6
 800989e:	f000 ffbc 	bl	800a81a <HEADER_GetItemWidth>
 80098a2:	3601      	adds	r6, #1
 80098a4:	4405      	add	r5, r0
 80098a6:	9b01      	ldr	r3, [sp, #4]
 80098a8:	e7f3      	b.n	8009892 <LISTVIEW__UpdateScrollParas+0x52>
 80098aa:	9b03      	ldr	r3, [sp, #12]
 80098ac:	f893 60b3 	ldrb.w	r6, [r3, #179]	; 0xb3
 80098b0:	07b2      	lsls	r2, r6, #30
 80098b2:	d509      	bpl.n	80098c8 <LISTVIEW__UpdateScrollParas+0x88>
 80098b4:	4658      	mov	r0, fp
 80098b6:	f001 fa6e 	bl	800ad96 <GUI_ARRAY_GetNumItems>
 80098ba:	4287      	cmp	r7, r0
 80098bc:	bf2c      	ite	cs
 80098be:	2100      	movcs	r1, #0
 80098c0:	2101      	movcc	r1, #1
 80098c2:	4620      	mov	r0, r4
 80098c4:	f002 fd1a 	bl	800c2fc <WM_SetScrollbarV>
 80098c8:	07f3      	lsls	r3, r6, #31
 80098ca:	d50b      	bpl.n	80098e4 <LISTVIEW__UpdateScrollParas+0xa4>
 80098cc:	4555      	cmp	r5, sl
 80098ce:	bfd4      	ite	le
 80098d0:	2100      	movle	r1, #0
 80098d2:	2101      	movgt	r1, #1
 80098d4:	4620      	mov	r0, r4
 80098d6:	f002 fd0f 	bl	800c2f8 <WM_SetScrollbarH>
 80098da:	4620      	mov	r0, r4
 80098dc:	9903      	ldr	r1, [sp, #12]
 80098de:	f7ff fde8 	bl	80094b2 <_GetNumVisibleRows>
 80098e2:	4607      	mov	r7, r0
 80098e4:	9803      	ldr	r0, [sp, #12]
 80098e6:	f7ff fc89 	bl	80091fc <LISTVIEW__GetNumRows>
 80098ea:	aa06      	add	r2, sp, #24
 80098ec:	2800      	cmp	r0, #0
 80098ee:	bf08      	it	eq
 80098f0:	2001      	moveq	r0, #1
 80098f2:	f852 3d0c 	ldr.w	r3, [r2, #-12]!
 80098f6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 80098fa:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
 80098fe:	f8c3 a0a8 	str.w	sl, [r3, #168]	; 0xa8
 8009902:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
 8009906:	4610      	mov	r0, r2
 8009908:	f00a f806 	bl	8013918 <GUI_ALLOC_UnlockH>
 800990c:	4620      	mov	r0, r4
 800990e:	f7ff fc98 	bl	8009242 <_UpdateScrollPos>
 8009912:	2300      	movs	r3, #0
 8009914:	f889 3000 	strb.w	r3, [r9]
 8009918:	e000      	b.n	800991c <LISTVIEW__UpdateScrollParas+0xdc>
 800991a:	2000      	movs	r0, #0
 800991c:	b007      	add	sp, #28
 800991e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009922:	bf00      	nop
 8009924:	2001d0a8 	.word	0x2001d0a8

08009928 <LISTVIEW_Callback>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8009930:	4606      	mov	r6, r0
 8009932:	b0af      	sub	sp, #188	; 0xbc
 8009934:	4658      	mov	r0, fp
 8009936:	4631      	mov	r1, r6
 8009938:	f7ff f9fc 	bl	8008d34 <WIDGET_HandleActive>
 800993c:	2800      	cmp	r0, #0
 800993e:	f000 84ac 	beq.w	800a29a <LISTVIEW_Callback+0x972>
 8009942:	6833      	ldr	r3, [r6, #0]
 8009944:	2b0f      	cmp	r3, #15
 8009946:	f000 80ce 	beq.w	8009ae6 <LISTVIEW_Callback+0x1be>
 800994a:	dc07      	bgt.n	800995c <LISTVIEW_Callback+0x34>
 800994c:	2b0b      	cmp	r3, #11
 800994e:	f000 8459 	beq.w	800a204 <LISTVIEW_Callback+0x8dc>
 8009952:	2b0e      	cmp	r3, #14
 8009954:	f000 83c9 	beq.w	800a0ea <LISTVIEW_Callback+0x7c2>
 8009958:	2b05      	cmp	r3, #5
 800995a:	e006      	b.n	800996a <LISTVIEW_Callback+0x42>
 800995c:	2b26      	cmp	r3, #38	; 0x26
 800995e:	d019      	beq.n	8009994 <LISTVIEW_Callback+0x6c>
 8009960:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8009964:	f000 8308 	beq.w	8009f78 <LISTVIEW_Callback+0x650>
 8009968:	2b25      	cmp	r3, #37	; 0x25
 800996a:	f040 8493 	bne.w	800a294 <LISTVIEW_Callback+0x96c>
 800996e:	4658      	mov	r0, fp
 8009970:	f009 ffc4 	bl	80138fc <GUI_ALLOC_LockH>
 8009974:	9014      	str	r0, [sp, #80]	; 0x50
 8009976:	2800      	cmp	r0, #0
 8009978:	f000 848f 	beq.w	800a29a <LISTVIEW_Callback+0x972>
 800997c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800997e:	a814      	add	r0, sp, #80	; 0x50
 8009980:	f009 ffca 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009984:	68b3      	ldr	r3, [r6, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	f000 8487 	beq.w	800a29a <LISTVIEW_Callback+0x972>
 800998c:	42a3      	cmp	r3, r4
 800998e:	f040 8484 	bne.w	800a29a <LISTVIEW_Callback+0x972>
 8009992:	e05c      	b.n	8009a4e <LISTVIEW_Callback+0x126>
 8009994:	68f3      	ldr	r3, [r6, #12]
 8009996:	3b02      	subs	r3, #2
 8009998:	2b05      	cmp	r3, #5
 800999a:	f200 847e 	bhi.w	800a29a <LISTVIEW_Callback+0x972>
 800999e:	e8df f013 	tbh	[pc, r3, lsl #1]
 80099a2:	005b      	.short	0x005b
 80099a4:	047c047c 	.word	0x047c047c
 80099a8:	00560018 	.word	0x00560018
 80099ac:	0006      	.short	0x0006
 80099ae:	4658      	mov	r0, fp
 80099b0:	f009 ffa4 	bl	80138fc <GUI_ALLOC_LockH>
 80099b4:	9014      	str	r0, [sp, #80]	; 0x50
 80099b6:	2800      	cmp	r0, #0
 80099b8:	f000 846f 	beq.w	800a29a <LISTVIEW_Callback+0x972>
 80099bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80099be:	68b2      	ldr	r2, [r6, #8]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	bf04      	itt	eq
 80099c4:	2300      	moveq	r3, #0
 80099c6:	6343      	streq	r3, [r0, #52]	; 0x34
 80099c8:	a814      	add	r0, sp, #80	; 0x50
 80099ca:	f009 ffa5 	bl	8013918 <GUI_ALLOC_UnlockH>
 80099ce:	f000 bc64 	b.w	800a29a <LISTVIEW_Callback+0x972>
 80099d2:	4658      	mov	r0, fp
 80099d4:	68b4      	ldr	r4, [r6, #8]
 80099d6:	f002 ff3e 	bl	800c856 <WM_GetScrollbarV>
 80099da:	4284      	cmp	r4, r0
 80099dc:	d112      	bne.n	8009a04 <LISTVIEW_Callback+0xdc>
 80099de:	68b0      	ldr	r0, [r6, #8]
 80099e0:	a925      	add	r1, sp, #148	; 0x94
 80099e2:	f002 ff3d 	bl	800c860 <WM_GetScrollState>
 80099e6:	4658      	mov	r0, fp
 80099e8:	f009 ff88 	bl	80138fc <GUI_ALLOC_LockH>
 80099ec:	9014      	str	r0, [sp, #80]	; 0x50
 80099ee:	b128      	cbz	r0, 80099fc <LISTVIEW_Callback+0xd4>
 80099f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80099f2:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 80099f6:	a814      	add	r0, sp, #80	; 0x50
 80099f8:	f009 ff8e 	bl	8013918 <GUI_ALLOC_UnlockH>
 80099fc:	4658      	mov	r0, fp
 80099fe:	f7ff fd75 	bl	80094ec <LISTVIEW__InvalidateInsideArea>
 8009a02:	e021      	b.n	8009a48 <LISTVIEW_Callback+0x120>
 8009a04:	4658      	mov	r0, fp
 8009a06:	68b4      	ldr	r4, [r6, #8]
 8009a08:	f002 ff20 	bl	800c84c <WM_GetScrollbarH>
 8009a0c:	4284      	cmp	r4, r0
 8009a0e:	f040 8444 	bne.w	800a29a <LISTVIEW_Callback+0x972>
 8009a12:	4658      	mov	r0, fp
 8009a14:	f009 ff72 	bl	80138fc <GUI_ALLOC_LockH>
 8009a18:	9014      	str	r0, [sp, #80]	; 0x50
 8009a1a:	b1a8      	cbz	r0, 8009a48 <LISTVIEW_Callback+0x120>
 8009a1c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009a1e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8009a22:	68b0      	ldr	r0, [r6, #8]
 8009a24:	9326      	str	r3, [sp, #152]	; 0x98
 8009a26:	a925      	add	r1, sp, #148	; 0x94
 8009a28:	f002 ff1a 	bl	800c860 <WM_GetScrollState>
 8009a2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a2e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8009a34:	a814      	add	r0, sp, #80	; 0x50
 8009a36:	f009 ff6f 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009a3a:	4658      	mov	r0, fp
 8009a3c:	f7ff ff00 	bl	8009840 <LISTVIEW__UpdateScrollParas>
 8009a40:	4620      	mov	r0, r4
 8009a42:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009a44:	f000 fe20 	bl	800a688 <HEADER_SetScrollPos>
 8009a48:	4658      	mov	r0, fp
 8009a4a:	210a      	movs	r1, #10
 8009a4c:	e34a      	b.n	800a0e4 <LISTVIEW_Callback+0x7bc>
 8009a4e:	4658      	mov	r0, fp
 8009a50:	f7ff fef6 	bl	8009840 <LISTVIEW__UpdateScrollParas>
 8009a54:	f000 bc21 	b.w	800a29a <LISTVIEW_Callback+0x972>
 8009a58:	4658      	mov	r0, fp
 8009a5a:	f009 ff4f 	bl	80138fc <GUI_ALLOC_LockH>
 8009a5e:	9014      	str	r0, [sp, #80]	; 0x50
 8009a60:	2800      	cmp	r0, #0
 8009a62:	f000 841a 	beq.w	800a29a <LISTVIEW_Callback+0x972>
 8009a66:	68b2      	ldr	r2, [r6, #8]
 8009a68:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d1ac      	bne.n	80099c8 <LISTVIEW_Callback+0xa0>
 8009a6e:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0a8      	beq.n	80099c8 <LISTVIEW_Callback+0xa0>
 8009a76:	4658      	mov	r0, fp
 8009a78:	f002 fcbe 	bl	800c3f8 <WM_SetFocus>
 8009a7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a7e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009a80:	f000 fd60 	bl	800a544 <HEADER_GetSel>
 8009a84:	1e04      	subs	r4, r0, #0
 8009a86:	db9f      	blt.n	80099c8 <LISTVIEW_Callback+0xa0>
 8009a88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009a8e:	f001 fa17 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 8009a92:	901c      	str	r0, [sp, #112]	; 0x70
 8009a94:	b318      	cbz	r0, 8009ade <LISTVIEW_Callback+0x1b6>
 8009a96:	6843      	ldr	r3, [r0, #4]
 8009a98:	b30b      	cbz	r3, 8009ade <LISTVIEW_Callback+0x1b6>
 8009a9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a9c:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8009aa0:	f009 ff2c 	bl	80138fc <GUI_ALLOC_LockH>
 8009aa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009aa6:	9025      	str	r0, [sp, #148]	; 0x94
 8009aa8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009aac:	42a2      	cmp	r2, r4
 8009aae:	d10a      	bne.n	8009ac6 <LISTVIEW_Callback+0x19e>
 8009ab0:	7c02      	ldrb	r2, [r0, #16]
 8009ab2:	f082 0201 	eor.w	r2, r2, #1
 8009ab6:	7402      	strb	r2, [r0, #16]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8009ac4:	e005      	b.n	8009ad2 <LISTVIEW_Callback+0x1aa>
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	7402      	strb	r2, [r0, #16]
 8009aca:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
 8009ace:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8009ad2:	4658      	mov	r0, fp
 8009ad4:	f7ff fd0a 	bl	80094ec <LISTVIEW__InvalidateInsideArea>
 8009ad8:	a825      	add	r0, sp, #148	; 0x94
 8009ada:	f009 ff1d 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009ade:	a81c      	add	r0, sp, #112	; 0x70
 8009ae0:	f009 ff1a 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009ae4:	e770      	b.n	80099c8 <LISTVIEW_Callback+0xa0>
 8009ae6:	4658      	mov	r0, fp
 8009ae8:	f009 ff08 	bl	80138fc <GUI_ALLOC_LockH>
 8009aec:	4604      	mov	r4, r0
 8009aee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009af0:	9014      	str	r0, [sp, #80]	; 0x50
 8009af2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8009af4:	f8d3 9000 	ldr.w	r9, [r3]
 8009af8:	f000 fe77 	bl	800a7ea <HEADER_GetHeight>
 8009afc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009afe:	9303      	str	r3, [sp, #12]
 8009b00:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009b02:	9302      	str	r3, [sp, #8]
 8009b04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b06:	9307      	str	r3, [sp, #28]
 8009b08:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009b0c:	9305      	str	r3, [sp, #20]
 8009b0e:	4621      	mov	r1, r4
 8009b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b12:	9310      	str	r3, [sp, #64]	; 0x40
 8009b14:	eb00 0709 	add.w	r7, r0, r9
 8009b18:	4658      	mov	r0, fp
 8009b1a:	f7ff fcca 	bl	80094b2 <_GetNumVisibleRows>
 8009b1e:	9009      	str	r0, [sp, #36]	; 0x24
 8009b20:	4620      	mov	r0, r4
 8009b22:	f7ff fcba 	bl	800949a <LISTVIEW__GetRowDistY>
 8009b26:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009b28:	930a      	str	r3, [sp, #40]	; 0x28
 8009b2a:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
 8009b2e:	9311      	str	r3, [sp, #68]	; 0x44
 8009b30:	4682      	mov	sl, r0
 8009b32:	ab25      	add	r3, sp, #148	; 0x94
 8009b34:	4658      	mov	r0, fp
 8009b36:	9324      	str	r3, [sp, #144]	; 0x90
 8009b38:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 8009b3c:	f00a fe28 	bl	8014790 <LISTVIEW_GetWrapMode>
 8009b40:	f88d 0098 	strb.w	r0, [sp, #152]	; 0x98
 8009b44:	4658      	mov	r0, fp
 8009b46:	f00a fe13 	bl	8014770 <LISTVIEW_GetLBorder>
 8009b4a:	902a      	str	r0, [sp, #168]	; 0xa8
 8009b4c:	4658      	mov	r0, fp
 8009b4e:	f00a fdff 	bl	8014750 <LISTVIEW_GetRBorder>
 8009b52:	902b      	str	r0, [sp, #172]	; 0xac
 8009b54:	4620      	mov	r0, r4
 8009b56:	f7ff fb54 	bl	8009202 <LISTVIEW__GetNumColumns>
 8009b5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f7ff fb4d 	bl	80091fc <LISTVIEW__GetNumRows>
 8009b62:	68f2      	ldr	r2, [r6, #12]
 8009b64:	4605      	mov	r5, r0
 8009b66:	6851      	ldr	r1, [r2, #4]
 8009b68:	6810      	ldr	r0, [r2, #0]
 8009b6a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8009b6e:	ab18      	add	r3, sp, #96	; 0x60
 8009b70:	c303      	stmia	r3!, {r0, r1}
 8009b72:	f9b4 1000 	ldrsh.w	r1, [r4]
 8009b76:	4252      	negs	r2, r2
 8009b78:	a818      	add	r0, sp, #96	; 0x60
 8009b7a:	4249      	negs	r1, r1
 8009b7c:	f008 fb0e 	bl	801219c <GUI_MoveRect>
 8009b80:	4658      	mov	r0, fp
 8009b82:	a91a      	add	r1, sp, #104	; 0x68
 8009b84:	f002 fe9e 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 8009b88:	a818      	add	r0, sp, #96	; 0x60
 8009b8a:	a91a      	add	r1, sp, #104	; 0x68
 8009b8c:	f007 f8e6 	bl	8010d5c <GUI__IntersectRect>
 8009b90:	2002      	movs	r0, #2
 8009b92:	f008 f953 	bl	8011e3c <GUI_SetTextMode>
 8009b96:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009b98:	f008 f96c 	bl	8011e74 <GUI_SetFont>
 8009b9c:	b97d      	cbnz	r5, 8009bbe <LISTVIEW_Callback+0x296>
 8009b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ba0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8009ba4:	f8d4 8098 	ldr.w	r8, [r4, #152]	; 0x98
 8009ba8:	9306      	str	r3, [sp, #24]
 8009baa:	1c53      	adds	r3, r2, #1
 8009bac:	42ab      	cmp	r3, r5
 8009bae:	bf94      	ite	ls
 8009bb0:	4443      	addls	r3, r8
 8009bb2:	eb08 0305 	addhi.w	r3, r8, r5
 8009bb6:	9312      	str	r3, [sp, #72]	; 0x48
 8009bb8:	2300      	movs	r3, #0
 8009bba:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bbc:	e028      	b.n	8009c10 <LISTVIEW_Callback+0x2e8>
 8009bbe:	4658      	mov	r0, fp
 8009bc0:	f009 fe9c 	bl	80138fc <GUI_ALLOC_LockH>
 8009bc4:	f8d0 60ac 	ldr.w	r6, [r0, #172]	; 0xac
 8009bc8:	9017      	str	r0, [sp, #92]	; 0x5c
 8009bca:	b196      	cbz	r6, 8009bf2 <LISTVIEW_Callback+0x2ca>
 8009bcc:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	db0d      	blt.n	8009bf0 <LISTVIEW_Callback+0x2c8>
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	f009 fe91 	bl	80138fc <GUI_ALLOC_LockH>
 8009bda:	ab2e      	add	r3, sp, #184	; 0xb8
 8009bdc:	f843 0d60 	str.w	r0, [r3, #-96]!
 8009be0:	6886      	ldr	r6, [r0, #8]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f009 fe98 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009be8:	4658      	mov	r0, fp
 8009bea:	47b0      	blx	r6
 8009bec:	4606      	mov	r6, r0
 8009bee:	e000      	b.n	8009bf2 <LISTVIEW_Callback+0x2ca>
 8009bf0:	2600      	movs	r6, #0
 8009bf2:	a817      	add	r0, sp, #92	; 0x5c
 8009bf4:	f009 fe90 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009bf8:	2e00      	cmp	r6, #0
 8009bfa:	f47f aee5 	bne.w	80099c8 <LISTVIEW_Callback+0xa0>
 8009bfe:	e7ce      	b.n	8009b9e <LISTVIEW_Callback+0x276>
 8009c00:	4658      	mov	r0, fp
 8009c02:	4641      	mov	r1, r8
 8009c04:	f7ff fc0d 	bl	8009422 <LISTVIEW__GetpRow>
 8009c08:	9017      	str	r0, [sp, #92]	; 0x5c
 8009c0a:	b928      	cbnz	r0, 8009c18 <LISTVIEW_Callback+0x2f0>
 8009c0c:	f108 0801 	add.w	r8, r8, #1
 8009c10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c12:	4590      	cmp	r8, r2
 8009c14:	d3f4      	bcc.n	8009c00 <LISTVIEW_Callback+0x2d8>
 8009c16:	e00e      	b.n	8009c36 <LISTVIEW_Callback+0x30e>
 8009c18:	7902      	ldrb	r2, [r0, #4]
 8009c1a:	6800      	ldr	r0, [r0, #0]
 8009c1c:	9013      	str	r0, [sp, #76]	; 0x4c
 8009c1e:	a817      	add	r0, sp, #92	; 0x5c
 8009c20:	9204      	str	r2, [sp, #16]
 8009c22:	f009 fe79 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009c26:	b2bb      	uxth	r3, r7
 8009c28:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
 8009c2c:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 8009c30:	b21b      	sxth	r3, r3
 8009c32:	429a      	cmp	r2, r3
 8009c34:	da04      	bge.n	8009c40 <LISTVIEW_Callback+0x318>
 8009c36:	9b03      	ldr	r3, [sp, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f040 8112 	bne.w	8009e62 <LISTVIEW_Callback+0x53a>
 8009c3e:	e10c      	b.n	8009e5a <LISTVIEW_Callback+0x532>
 8009c40:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c44:	443b      	add	r3, r7
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 8009c4c:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 8009c50:	b21b      	sxth	r3, r3
 8009c52:	429a      	cmp	r2, r3
 8009c54:	f300 80ff 	bgt.w	8009e56 <LISTVIEW_Callback+0x52e>
 8009c58:	9a04      	ldr	r2, [sp, #16]
 8009c5a:	b10a      	cbz	r2, 8009c60 <LISTVIEW_Callback+0x338>
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e00d      	b.n	8009c7c <LISTVIEW_Callback+0x354>
 8009c60:	4658      	mov	r0, fp
 8009c62:	f00a fda6 	bl	80147b2 <LISTVIEW_GetSel>
 8009c66:	4580      	cmp	r8, r0
 8009c68:	d107      	bne.n	8009c7a <LISTVIEW_Callback+0x352>
 8009c6a:	4658      	mov	r0, fp
 8009c6c:	f002 fd94 	bl	800c798 <WM_HasFocus>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	bf0c      	ite	eq
 8009c74:	2301      	moveq	r3, #1
 8009c76:	2302      	movne	r3, #2
 8009c78:	e000      	b.n	8009c7c <LISTVIEW_Callback+0x354>
 8009c7a:	9b04      	ldr	r3, [sp, #16]
 8009c7c:	9329      	str	r3, [sp, #164]	; 0xa4
 8009c7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009c80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009c82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c86:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009c88:	9027      	str	r0, [sp, #156]	; 0x9c
 8009c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8c:	9328      	str	r3, [sp, #160]	; 0xa0
 8009c8e:	f002 0304 	and.w	r3, r2, #4
 8009c92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009c96:	920c      	str	r2, [sp, #48]	; 0x30
 8009c98:	b153      	cbz	r3, 8009cb0 <LISTVIEW_Callback+0x388>
 8009c9a:	9b04      	ldr	r3, [sp, #16]
 8009c9c:	b943      	cbnz	r3, 8009cb0 <LISTVIEW_Callback+0x388>
 8009c9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ca0:	9329      	str	r3, [sp, #164]	; 0xa4
 8009ca2:	f006 fefb 	bl	8010a9c <LCD_SetColor>
 8009ca6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009ca8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009cac:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009cae:	e002      	b.n	8009cb6 <LISTVIEW_Callback+0x38e>
 8009cb0:	f006 fef4 	bl	8010a9c <LCD_SetColor>
 8009cb4:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8009cb6:	f006 fee9 	bl	8010a8c <LCD_SetBkColor>
 8009cba:	9b02      	ldr	r3, [sp, #8]
 8009cbc:	b123      	cbz	r3, 8009cc8 <LISTVIEW_Callback+0x3a0>
 8009cbe:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 8009cc8:	9b06      	ldr	r3, [sp, #24]
 8009cca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ccc:	ebc3 0609 	rsb	r6, r3, r9
 8009cd0:	3a01      	subs	r2, #1
 8009cd2:	9b05      	ldr	r3, [sp, #20]
 8009cd4:	920e      	str	r2, [sp, #56]	; 0x38
 8009cd6:	9308      	str	r3, [sp, #32]
 8009cd8:	2500      	movs	r5, #0
 8009cda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cdc:	429d      	cmp	r5, r3
 8009cde:	f300 808c 	bgt.w	8009dfa <LISTVIEW_Callback+0x4d2>
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	9807      	ldr	r0, [sp, #28]
 8009ce6:	f000 fd98 	bl	800a81a <HEADER_GetItemWidth>
 8009cea:	4629      	mov	r1, r5
 8009cec:	900d      	str	r0, [sp, #52]	; 0x34
 8009cee:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009cf0:	f001 f8e6 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 8009cf4:	9015      	str	r0, [sp, #84]	; 0x54
 8009cf6:	7803      	ldrb	r3, [r0, #0]
 8009cf8:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 8009cfc:	a815      	add	r0, sp, #84	; 0x54
 8009cfe:	f009 fe0b 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009d02:	2300      	movs	r3, #0
 8009d04:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009d06:	932c      	str	r3, [sp, #176]	; 0xb0
 8009d08:	4629      	mov	r1, r5
 8009d0a:	9325      	str	r3, [sp, #148]	; 0x94
 8009d0c:	f001 f8d8 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 8009d10:	9016      	str	r0, [sp, #88]	; 0x58
 8009d12:	b160      	cbz	r0, 8009d2e <LISTVIEW_Callback+0x406>
 8009d14:	1d03      	adds	r3, r0, #4
 8009d16:	932c      	str	r3, [sp, #176]	; 0xb0
 8009d18:	6803      	ldr	r3, [r0, #0]
 8009d1a:	9301      	str	r3, [sp, #4]
 8009d1c:	a816      	add	r0, sp, #88	; 0x58
 8009d1e:	f009 fdfb 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009d22:	9b01      	ldr	r3, [sp, #4]
 8009d24:	b11b      	cbz	r3, 8009d2e <LISTVIEW_Callback+0x406>
 8009d26:	4618      	mov	r0, r3
 8009d28:	f009 fde8 	bl	80138fc <GUI_ALLOC_LockH>
 8009d2c:	9025      	str	r0, [sp, #148]	; 0x94
 8009d2e:	9a08      	ldr	r2, [sp, #32]
 8009d30:	4295      	cmp	r5, r2
 8009d32:	db59      	blt.n	8009de8 <LISTVIEW_Callback+0x4c0>
 8009d34:	b2b3      	uxth	r3, r6
 8009d36:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8009d3a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 8009d3e:	b21b      	sxth	r3, r3
 8009d40:	429a      	cmp	r2, r3
 8009d42:	da06      	bge.n	8009d52 <LISTVIEW_Callback+0x42a>
 8009d44:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d057      	beq.n	8009dfa <LISTVIEW_Callback+0x4d2>
 8009d4a:	a825      	add	r0, sp, #148	; 0x94
 8009d4c:	f009 fde4 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009d50:	e053      	b.n	8009dfa <LISTVIEW_Callback+0x4d2>
 8009d52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d54:	1e73      	subs	r3, r6, #1
 8009d56:	4413      	add	r3, r2
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
 8009d5e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8009d62:	b21b      	sxth	r3, r3
 8009d64:	429a      	cmp	r2, r3
 8009d66:	dc3f      	bgt.n	8009de8 <LISTVIEW_Callback+0x4c0>
 8009d68:	9b03      	ldr	r3, [sp, #12]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d03c      	beq.n	8009de8 <LISTVIEW_Callback+0x4c0>
 8009d6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d70:	b152      	cbz	r2, 8009d88 <LISTVIEW_Callback+0x460>
 8009d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d74:	42ab      	cmp	r3, r5
 8009d76:	d107      	bne.n	8009d88 <LISTVIEW_Callback+0x460>
 8009d78:	9a04      	ldr	r2, [sp, #16]
 8009d7a:	b92a      	cbnz	r2, 8009d88 <LISTVIEW_Callback+0x460>
 8009d7c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8009d7e:	f006 fe8d 	bl	8010a9c <LCD_SetColor>
 8009d82:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8009d84:	f006 fe82 	bl	8010a8c <LCD_SetBkColor>
 8009d88:	951f      	str	r5, [sp, #124]	; 0x7c
 8009d8a:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
 8009d8e:	b125      	cbz	r5, 8009d9a <LISTVIEW_Callback+0x472>
 8009d90:	9a02      	ldr	r2, [sp, #8]
 8009d92:	1c13      	adds	r3, r2, #0
 8009d94:	bf18      	it	ne
 8009d96:	2301      	movne	r3, #1
 8009d98:	e000      	b.n	8009d9c <LISTVIEW_Callback+0x474>
 8009d9a:	462b      	mov	r3, r5
 8009d9c:	4433      	add	r3, r6
 8009d9e:	9320      	str	r3, [sp, #128]	; 0x80
 8009da0:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8009da4:	9322      	str	r3, [sp, #136]	; 0x88
 8009da6:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8009daa:	9323      	str	r3, [sp, #140]	; 0x8c
 8009dac:	2305      	movs	r3, #5
 8009dae:	931d      	str	r3, [sp, #116]	; 0x74
 8009db0:	9721      	str	r7, [sp, #132]	; 0x84
 8009db2:	9b03      	ldr	r3, [sp, #12]
 8009db4:	a81c      	add	r0, sp, #112	; 0x70
 8009db6:	4798      	blx	r3
 8009db8:	2301      	movs	r3, #1
 8009dba:	931d      	str	r3, [sp, #116]	; 0x74
 8009dbc:	a81c      	add	r0, sp, #112	; 0x70
 8009dbe:	9b03      	ldr	r3, [sp, #12]
 8009dc0:	4798      	blx	r3
 8009dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dc4:	b182      	cbz	r2, 8009de8 <LISTVIEW_Callback+0x4c0>
 8009dc6:	9b04      	ldr	r3, [sp, #16]
 8009dc8:	b973      	cbnz	r3, 8009de8 <LISTVIEW_Callback+0x4c0>
 8009dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dcc:	42ab      	cmp	r3, r5
 8009dce:	d10b      	bne.n	8009de8 <LISTVIEW_Callback+0x4c0>
 8009dd0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009dd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009dd6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009dd8:	f006 fe60 	bl	8010a9c <LCD_SetColor>
 8009ddc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009dde:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009de2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009de4:	f006 fe52 	bl	8010a8c <LCD_SetBkColor>
 8009de8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009dea:	b113      	cbz	r3, 8009df2 <LISTVIEW_Callback+0x4ca>
 8009dec:	a825      	add	r0, sp, #148	; 0x94
 8009dee:	f009 fd93 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009df2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009df4:	3501      	adds	r5, #1
 8009df6:	4416      	add	r6, r2
 8009df8:	e76f      	b.n	8009cda <LISTVIEW_Callback+0x3b2>
 8009dfa:	9a08      	ldr	r2, [sp, #32]
 8009dfc:	b94a      	cbnz	r2, 8009e12 <LISTVIEW_Callback+0x4ea>
 8009dfe:	9b05      	ldr	r3, [sp, #20]
 8009e00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	bf18      	it	ne
 8009e06:	4616      	movne	r6, r2
 8009e08:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8009e0c:	429e      	cmp	r6, r3
 8009e0e:	dc22      	bgt.n	8009e56 <LISTVIEW_Callback+0x52e>
 8009e10:	e007      	b.n	8009e22 <LISTVIEW_Callback+0x4fa>
 8009e12:	9b05      	ldr	r3, [sp, #20]
 8009e14:	960f      	str	r6, [sp, #60]	; 0x3c
 8009e16:	3b01      	subs	r3, #1
 8009e18:	2200      	movs	r2, #0
 8009e1a:	930e      	str	r3, [sp, #56]	; 0x38
 8009e1c:	9208      	str	r2, [sp, #32]
 8009e1e:	464e      	mov	r6, r9
 8009e20:	e75a      	b.n	8009cd8 <LISTVIEW_Callback+0x3b0>
 8009e22:	9a03      	ldr	r2, [sp, #12]
 8009e24:	b1ba      	cbz	r2, 8009e56 <LISTVIEW_Callback+0x52e>
 8009e26:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2a:	921f      	str	r2, [sp, #124]	; 0x7c
 8009e2c:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
 8009e30:	b11d      	cbz	r5, 8009e3a <LISTVIEW_Callback+0x512>
 8009e32:	9a02      	ldr	r2, [sp, #8]
 8009e34:	1c15      	adds	r5, r2, #0
 8009e36:	bf18      	it	ne
 8009e38:	2501      	movne	r5, #1
 8009e3a:	9322      	str	r3, [sp, #136]	; 0x88
 8009e3c:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8009e40:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 8009e44:	9323      	str	r3, [sp, #140]	; 0x8c
 8009e46:	4435      	add	r5, r6
 8009e48:	2305      	movs	r3, #5
 8009e4a:	931d      	str	r3, [sp, #116]	; 0x74
 8009e4c:	9520      	str	r5, [sp, #128]	; 0x80
 8009e4e:	9221      	str	r2, [sp, #132]	; 0x84
 8009e50:	a81c      	add	r0, sp, #112	; 0x70
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	4798      	blx	r3
 8009e56:	4457      	add	r7, sl
 8009e58:	e6d8      	b.n	8009c0c <LISTVIEW_Callback+0x2e4>
 8009e5a:	9b02      	ldr	r3, [sp, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d065      	beq.n	8009f2c <LISTVIEW_Callback+0x604>
 8009e60:	e039      	b.n	8009ed6 <LISTVIEW_Callback+0x5ae>
 8009e62:	f04f 33ff 	mov.w	r3, #4294967295
 8009e66:	931e      	str	r3, [sp, #120]	; 0x78
 8009e68:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009e6a:	2305      	movs	r3, #5
 8009e6c:	931d      	str	r3, [sp, #116]	; 0x74
 8009e6e:	f006 fe0d 	bl	8010a8c <LCD_SetBkColor>
 8009e72:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 8009e76:	429f      	cmp	r7, r3
 8009e78:	dcef      	bgt.n	8009e5a <LISTVIEW_Callback+0x532>
 8009e7a:	9a02      	ldr	r2, [sp, #8]
 8009e7c:	9721      	str	r7, [sp, #132]	; 0x84
 8009e7e:	2300      	movs	r3, #0
 8009e80:	931f      	str	r3, [sp, #124]	; 0x7c
 8009e82:	ebc2 030a 	rsb	r3, r2, sl
 8009e86:	3b01      	subs	r3, #1
 8009e88:	4457      	add	r7, sl
 8009e8a:	ebca 0303 	rsb	r3, sl, r3
 8009e8e:	443b      	add	r3, r7
 8009e90:	9323      	str	r3, [sp, #140]	; 0x8c
 8009e92:	9b06      	ldr	r3, [sp, #24]
 8009e94:	ebc3 0509 	rsb	r5, r3, r9
 8009e98:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8009e9c:	429d      	cmp	r5, r3
 8009e9e:	dae8      	bge.n	8009e72 <LISTVIEW_Callback+0x54a>
 8009ea0:	9807      	ldr	r0, [sp, #28]
 8009ea2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8009ea4:	f000 fcb9 	bl	800a81a <HEADER_GetItemWidth>
 8009ea8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009eaa:	b11b      	cbz	r3, 8009eb4 <LISTVIEW_Callback+0x58c>
 8009eac:	9a02      	ldr	r2, [sp, #8]
 8009eae:	1c13      	adds	r3, r2, #0
 8009eb0:	bf18      	it	ne
 8009eb2:	2301      	movne	r3, #1
 8009eb4:	442b      	add	r3, r5
 8009eb6:	9320      	str	r3, [sp, #128]	; 0x80
 8009eb8:	b108      	cbz	r0, 8009ebe <LISTVIEW_Callback+0x596>
 8009eba:	4405      	add	r5, r0
 8009ebc:	e002      	b.n	8009ec4 <LISTVIEW_Callback+0x59c>
 8009ebe:	f9bd 5064 	ldrsh.w	r5, [sp, #100]	; 0x64
 8009ec2:	3501      	adds	r5, #1
 8009ec4:	1e6b      	subs	r3, r5, #1
 8009ec6:	9322      	str	r3, [sp, #136]	; 0x88
 8009ec8:	a81c      	add	r0, sp, #112	; 0x70
 8009eca:	9b03      	ldr	r3, [sp, #12]
 8009ecc:	4798      	blx	r3
 8009ece:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	931f      	str	r3, [sp, #124]	; 0x7c
 8009ed4:	e7e0      	b.n	8009e98 <LISTVIEW_Callback+0x570>
 8009ed6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009ed8:	f006 fde0 	bl	8010a9c <LCD_SetColor>
 8009edc:	9807      	ldr	r0, [sp, #28]
 8009ede:	f000 fc84 	bl	800a7ea <HEADER_GetHeight>
 8009ee2:	4448      	add	r0, r9
 8009ee4:	1e45      	subs	r5, r0, #1
 8009ee6:	2600      	movs	r6, #0
 8009ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eea:	429e      	cmp	r6, r3
 8009eec:	d004      	beq.n	8009ef8 <LISTVIEW_Callback+0x5d0>
 8009eee:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 8009ef2:	4455      	add	r5, sl
 8009ef4:	429d      	cmp	r5, r3
 8009ef6:	dd1d      	ble.n	8009f34 <LISTVIEW_Callback+0x60c>
 8009ef8:	9b06      	ldr	r3, [sp, #24]
 8009efa:	2500      	movs	r5, #0
 8009efc:	ebc3 0609 	rsb	r6, r3, r9
 8009f00:	462f      	mov	r7, r5
 8009f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f04:	429d      	cmp	r5, r3
 8009f06:	da11      	bge.n	8009f2c <LISTVIEW_Callback+0x604>
 8009f08:	9807      	ldr	r0, [sp, #28]
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	f000 fc85 	bl	800a81a <HEADER_GetItemWidth>
 8009f10:	9b05      	ldr	r3, [sp, #20]
 8009f12:	429d      	cmp	r5, r3
 8009f14:	9b06      	ldr	r3, [sp, #24]
 8009f16:	4430      	add	r0, r6
 8009f18:	bfa8      	it	ge
 8009f1a:	2300      	movge	r3, #0
 8009f1c:	eb00 0603 	add.w	r6, r0, r3
 8009f20:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8009f24:	bfb8      	it	lt
 8009f26:	4637      	movlt	r7, r6
 8009f28:	429e      	cmp	r6, r3
 8009f2a:	dd10      	ble.n	8009f4e <LISTVIEW_Callback+0x626>
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f7fe ffec 	bl	8008f0a <WIDGET__EFFECT_DrawDown>
 8009f32:	e549      	b.n	80099c8 <LISTVIEW_Callback+0xa0>
 8009f34:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 8009f38:	429d      	cmp	r5, r3
 8009f3a:	db06      	blt.n	8009f4a <LISTVIEW_Callback+0x622>
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8009f42:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8009f46:	f008 fc4d 	bl	80127e4 <GUI_DrawHLine>
 8009f4a:	3601      	adds	r6, #1
 8009f4c:	e7cc      	b.n	8009ee8 <LISTVIEW_Callback+0x5c0>
 8009f4e:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 8009f52:	429e      	cmp	r6, r3
 8009f54:	db08      	blt.n	8009f68 <LISTVIEW_Callback+0x640>
 8009f56:	42be      	cmp	r6, r7
 8009f58:	db06      	blt.n	8009f68 <LISTVIEW_Callback+0x640>
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
 8009f60:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
 8009f64:	f008 f9c6 	bl	80122f4 <GUI_DrawVLine>
 8009f68:	9b06      	ldr	r3, [sp, #24]
 8009f6a:	9a05      	ldr	r2, [sp, #20]
 8009f6c:	4295      	cmp	r5, r2
 8009f6e:	bfa8      	it	ge
 8009f70:	2300      	movge	r3, #0
 8009f72:	1af6      	subs	r6, r6, r3
 8009f74:	3501      	adds	r5, #1
 8009f76:	e7c4      	b.n	8009f02 <LISTVIEW_Callback+0x5da>
 8009f78:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8009f7c:	f1b9 0f00 	cmp.w	r9, #0
 8009f80:	f000 80ac 	beq.w	800a0dc <LISTVIEW_Callback+0x7b4>
 8009f84:	f899 3008 	ldrb.w	r3, [r9, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 80a9 	beq.w	800a0e0 <LISTVIEW_Callback+0x7b8>
 8009f8e:	4658      	mov	r0, fp
 8009f90:	f009 fcb4 	bl	80138fc <GUI_ALLOC_LockH>
 8009f94:	901c      	str	r0, [sp, #112]	; 0x70
 8009f96:	f7ff f931 	bl	80091fc <LISTVIEW__GetNumRows>
 8009f9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009f9c:	4682      	mov	sl, r0
 8009f9e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009fa0:	f000 fc23 	bl	800a7ea <HEADER_GetHeight>
 8009fa4:	4606      	mov	r6, r0
 8009fa6:	981c      	ldr	r0, [sp, #112]	; 0x70
 8009fa8:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 8009fac:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8009fb0:	9202      	str	r2, [sp, #8]
 8009fb2:	9304      	str	r3, [sp, #16]
 8009fb4:	f7ff fa71 	bl	800949a <LISTVIEW__GetRowDistY>
 8009fb8:	ac2e      	add	r4, sp, #184	; 0xb8
 8009fba:	9003      	str	r0, [sp, #12]
 8009fbc:	981c      	ldr	r0, [sp, #112]	; 0x70
 8009fbe:	f7ff f920 	bl	8009202 <LISTVIEW__GetNumColumns>
 8009fc2:	f854 3d48 	ldr.w	r3, [r4, #-72]!
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8009fce:	f009 fca3 	bl	8013918 <GUI_ALLOC_UnlockH>
 8009fd2:	4658      	mov	r0, fp
 8009fd4:	a925      	add	r1, sp, #148	; 0x94
 8009fd6:	f002 fc75 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 8009fda:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8009fde:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 8009fe2:	f8bd 2096 	ldrh.w	r2, [sp, #150]	; 0x96
 8009fe6:	e899 4080 	ldmia.w	r9, {r7, lr}
 8009fea:	b218      	sxth	r0, r3
 8009fec:	1ac9      	subs	r1, r1, r3
 8009fee:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 8009ff2:	1a9b      	subs	r3, r3, r2
 8009ff4:	b289      	uxth	r1, r1
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	1a38      	subs	r0, r7, r0
 8009ffa:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
 8009ffe:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
 800a002:	d415      	bmi.n	800a030 <LISTVIEW_Callback+0x708>
 800a004:	b209      	sxth	r1, r1
 800a006:	4288      	cmp	r0, r1
 800a008:	dc12      	bgt.n	800a030 <LISTVIEW_Callback+0x708>
 800a00a:	b211      	sxth	r1, r2
 800a00c:	ebc1 010e 	rsb	r1, r1, lr
 800a010:	1b89      	subs	r1, r1, r6
 800a012:	d40d      	bmi.n	800a030 <LISTVIEW_Callback+0x708>
 800a014:	b21b      	sxth	r3, r3
 800a016:	1b9b      	subs	r3, r3, r6
 800a018:	4299      	cmp	r1, r3
 800a01a:	dc09      	bgt.n	800a030 <LISTVIEW_Callback+0x708>
 800a01c:	9a03      	ldr	r2, [sp, #12]
 800a01e:	9b02      	ldr	r3, [sp, #8]
 800a020:	fb91 f1f2 	sdiv	r1, r1, r2
 800a024:	4419      	add	r1, r3
 800a026:	4551      	cmp	r1, sl
 800a028:	da02      	bge.n	800a030 <LISTVIEW_Callback+0x708>
 800a02a:	4658      	mov	r0, fp
 800a02c:	f7ff fb6f 	bl	800970e <LISTVIEW__SetSel>
 800a030:	4658      	mov	r0, fp
 800a032:	a925      	add	r1, sp, #148	; 0x94
 800a034:	f002 fc46 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 800a038:	9b03      	ldr	r3, [sp, #12]
 800a03a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800a03e:	f8d9 7000 	ldr.w	r7, [r9]
 800a042:	9202      	str	r2, [sp, #8]
 800a044:	fb03 660a 	mla	r6, r3, sl, r6
 800a048:	f04f 0a00 	mov.w	sl, #0
 800a04c:	46d1      	mov	r9, sl
 800a04e:	45aa      	cmp	sl, r5
 800a050:	da07      	bge.n	800a062 <LISTVIEW_Callback+0x73a>
 800a052:	4651      	mov	r1, sl
 800a054:	4640      	mov	r0, r8
 800a056:	f000 fbe0 	bl	800a81a <HEADER_GetItemWidth>
 800a05a:	f10a 0a01 	add.w	sl, sl, #1
 800a05e:	4481      	add	r9, r0
 800a060:	e7f5      	b.n	800a04e <LISTVIEW_Callback+0x726>
 800a062:	4640      	mov	r0, r8
 800a064:	2100      	movs	r1, #0
 800a066:	f9bd a094 	ldrsh.w	sl, [sp, #148]	; 0x94
 800a06a:	f000 fbd6 	bl	800a81a <HEADER_GetItemWidth>
 800a06e:	9a04      	ldr	r2, [sp, #16]
 800a070:	4450      	add	r0, sl
 800a072:	1a83      	subs	r3, r0, r2
 800a074:	f04f 0a00 	mov.w	sl, #0
 800a078:	429f      	cmp	r7, r3
 800a07a:	dc07      	bgt.n	800a08c <LISTVIEW_Callback+0x764>
 800a07c:	4658      	mov	r0, fp
 800a07e:	f009 fc3d 	bl	80138fc <GUI_ALLOC_LockH>
 800a082:	4555      	cmp	r5, sl
 800a084:	901c      	str	r0, [sp, #112]	; 0x70
 800a086:	dc12      	bgt.n	800a0ae <LISTVIEW_Callback+0x786>
 800a088:	1e6e      	subs	r6, r5, #1
 800a08a:	e01b      	b.n	800a0c4 <LISTVIEW_Callback+0x79c>
 800a08c:	45aa      	cmp	sl, r5
 800a08e:	daf5      	bge.n	800a07c <LISTVIEW_Callback+0x754>
 800a090:	9a02      	ldr	r2, [sp, #8]
 800a092:	42b2      	cmp	r2, r6
 800a094:	daf2      	bge.n	800a07c <LISTVIEW_Callback+0x754>
 800a096:	454f      	cmp	r7, r9
 800a098:	daf0      	bge.n	800a07c <LISTVIEW_Callback+0x754>
 800a09a:	f10a 0a01 	add.w	sl, sl, #1
 800a09e:	4640      	mov	r0, r8
 800a0a0:	4651      	mov	r1, sl
 800a0a2:	9301      	str	r3, [sp, #4]
 800a0a4:	f000 fbb9 	bl	800a81a <HEADER_GetItemWidth>
 800a0a8:	9b01      	ldr	r3, [sp, #4]
 800a0aa:	4403      	add	r3, r0
 800a0ac:	e7e4      	b.n	800a078 <LISTVIEW_Callback+0x750>
 800a0ae:	454f      	cmp	r7, r9
 800a0b0:	dc06      	bgt.n	800a0c0 <LISTVIEW_Callback+0x798>
 800a0b2:	9b02      	ldr	r3, [sp, #8]
 800a0b4:	42b3      	cmp	r3, r6
 800a0b6:	bfd4      	ite	le
 800a0b8:	4656      	movle	r6, sl
 800a0ba:	f04f 36ff 	movgt.w	r6, #4294967295
 800a0be:	e001      	b.n	800a0c4 <LISTVIEW_Callback+0x79c>
 800a0c0:	f04f 36ff 	mov.w	r6, #4294967295
 800a0c4:	6786      	str	r6, [r0, #120]	; 0x78
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f009 fc26 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a0cc:	4658      	mov	r0, fp
 800a0ce:	f003 f9ea 	bl	800d4a6 <WM_InvalidateWindow>
 800a0d2:	4658      	mov	r0, fp
 800a0d4:	f002 f990 	bl	800c3f8 <WM_SetFocus>
 800a0d8:	2101      	movs	r1, #1
 800a0da:	e002      	b.n	800a0e2 <LISTVIEW_Callback+0x7ba>
 800a0dc:	2103      	movs	r1, #3
 800a0de:	e000      	b.n	800a0e2 <LISTVIEW_Callback+0x7ba>
 800a0e0:	2102      	movs	r1, #2
 800a0e2:	4658      	mov	r0, fp
 800a0e4:	f7ff f961 	bl	80093aa <_NotifyOwner>
 800a0e8:	e0d7      	b.n	800a29a <LISTVIEW_Callback+0x972>
 800a0ea:	68f3      	ldr	r3, [r6, #12]
 800a0ec:	685a      	ldr	r2, [r3, #4]
 800a0ee:	2a00      	cmp	r2, #0
 800a0f0:	f340 80d0 	ble.w	800a294 <LISTVIEW_Callback+0x96c>
 800a0f4:	4658      	mov	r0, fp
 800a0f6:	f8d3 9000 	ldr.w	r9, [r3]
 800a0fa:	f009 fbff 	bl	80138fc <GUI_ALLOC_LockH>
 800a0fe:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
 800a102:	4603      	mov	r3, r0
 800a104:	901c      	str	r0, [sp, #112]	; 0x70
 800a106:	ca07      	ldmia	r2, {r0, r1, r2}
 800a108:	ac25      	add	r4, sp, #148	; 0x94
 800a10a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a10e:	4618      	mov	r0, r3
 800a110:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 800a114:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800a116:	f893 70b3 	ldrb.w	r7, [r3, #179]	; 0xb3
 800a11a:	f7ff f86f 	bl	80091fc <LISTVIEW__GetNumRows>
 800a11e:	4682      	mov	sl, r0
 800a120:	a81c      	add	r0, sp, #112	; 0x70
 800a122:	f009 fbf9 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a126:	f1a9 0310 	sub.w	r3, r9, #16
 800a12a:	2b12      	cmp	r3, #18
 800a12c:	f200 80b2 	bhi.w	800a294 <LISTVIEW_Callback+0x96c>
 800a130:	e8df f003 	tbb	[pc, r3]
 800a134:	0a371a42 	.word	0x0a371a42
 800a138:	2eb0b0b0 	.word	0x2eb0b0b0
 800a13c:	b0b0b031 	.word	0xb0b0b031
 800a140:	b0b0b0b0 	.word	0xb0b0b0b0
 800a144:	28b0      	.short	0x28b0
 800a146:	17          	.byte	0x17
 800a147:	00          	.byte	0x00
 800a148:	4658      	mov	r0, fp
 800a14a:	2101      	movs	r1, #1
 800a14c:	f7ff fb1c 	bl	8009788 <_MoveSel>
 800a150:	0778      	lsls	r0, r7, #29
 800a152:	f140 80a2 	bpl.w	800a29a <LISTVIEW_Callback+0x972>
 800a156:	2d00      	cmp	r5, #0
 800a158:	f2c0 809f 	blt.w	800a29a <LISTVIEW_Callback+0x972>
 800a15c:	4658      	mov	r0, fp
 800a15e:	2113      	movs	r1, #19
 800a160:	e030      	b.n	800a1c4 <LISTVIEW_Callback+0x89c>
 800a162:	4658      	mov	r0, fp
 800a164:	2101      	movs	r1, #1
 800a166:	e010      	b.n	800a18a <LISTVIEW_Callback+0x862>
 800a168:	f04f 31ff 	mov.w	r1, #4294967295
 800a16c:	4658      	mov	r0, fp
 800a16e:	f7ff fb0b 	bl	8009788 <_MoveSel>
 800a172:	0779      	lsls	r1, r7, #29
 800a174:	f140 8091 	bpl.w	800a29a <LISTVIEW_Callback+0x972>
 800a178:	2d00      	cmp	r5, #0
 800a17a:	f2c0 808e 	blt.w	800a29a <LISTVIEW_Callback+0x972>
 800a17e:	4658      	mov	r0, fp
 800a180:	2111      	movs	r1, #17
 800a182:	e01f      	b.n	800a1c4 <LISTVIEW_Callback+0x89c>
 800a184:	4658      	mov	r0, fp
 800a186:	f04f 31ff 	mov.w	r1, #4294967295
 800a18a:	f7ff fb1e 	bl	80097ca <_OnPage>
 800a18e:	e084      	b.n	800a29a <LISTVIEW_Callback+0x972>
 800a190:	4658      	mov	r0, fp
 800a192:	2100      	movs	r1, #0
 800a194:	e002      	b.n	800a19c <LISTVIEW_Callback+0x874>
 800a196:	4658      	mov	r0, fp
 800a198:	f10a 31ff 	add.w	r1, sl, #4294967295
 800a19c:	f7ff fab7 	bl	800970e <LISTVIEW__SetSel>
 800a1a0:	e07b      	b.n	800a29a <LISTVIEW_Callback+0x972>
 800a1a2:	077a      	lsls	r2, r7, #29
 800a1a4:	d504      	bpl.n	800a1b0 <LISTVIEW_Callback+0x888>
 800a1a6:	2d00      	cmp	r5, #0
 800a1a8:	db02      	blt.n	800a1b0 <LISTVIEW_Callback+0x888>
 800a1aa:	4658      	mov	r0, fp
 800a1ac:	2112      	movs	r1, #18
 800a1ae:	e009      	b.n	800a1c4 <LISTVIEW_Callback+0x89c>
 800a1b0:	9926      	ldr	r1, [sp, #152]	; 0x98
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	4441      	add	r1, r8
 800a1b6:	e00c      	b.n	800a1d2 <LISTVIEW_Callback+0x8aa>
 800a1b8:	077b      	lsls	r3, r7, #29
 800a1ba:	d506      	bpl.n	800a1ca <LISTVIEW_Callback+0x8a2>
 800a1bc:	2d00      	cmp	r5, #0
 800a1be:	db04      	blt.n	800a1ca <LISTVIEW_Callback+0x8a2>
 800a1c0:	4658      	mov	r0, fp
 800a1c2:	2110      	movs	r1, #16
 800a1c4:	f7ff f9af 	bl	8009526 <_ColumnScroll>
 800a1c8:	e067      	b.n	800a29a <LISTVIEW_Callback+0x972>
 800a1ca:	9926      	ldr	r1, [sp, #152]	; 0x98
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	ebc8 0101 	rsb	r1, r8, r1
 800a1d2:	f002 fc85 	bl	800cae0 <WM_SetScrollValue>
 800a1d6:	4605      	mov	r5, r0
 800a1d8:	4658      	mov	r0, fp
 800a1da:	f009 fb8f 	bl	80138fc <GUI_ALLOC_LockH>
 800a1de:	901c      	str	r0, [sp, #112]	; 0x70
 800a1e0:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 800a1e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a1e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a1ec:	a81c      	add	r0, sp, #112	; 0x70
 800a1ee:	f009 fb93 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a1f2:	2d00      	cmp	r5, #0
 800a1f4:	d051      	beq.n	800a29a <LISTVIEW_Callback+0x972>
 800a1f6:	4658      	mov	r0, fp
 800a1f8:	f7ff f823 	bl	8009242 <_UpdateScrollPos>
 800a1fc:	4658      	mov	r0, fp
 800a1fe:	f7ff f975 	bl	80094ec <LISTVIEW__InvalidateInsideArea>
 800a202:	e04a      	b.n	800a29a <LISTVIEW_Callback+0x972>
 800a204:	4658      	mov	r0, fp
 800a206:	f009 fb79 	bl	80138fc <GUI_ALLOC_LockH>
 800a20a:	4604      	mov	r4, r0
 800a20c:	9014      	str	r0, [sp, #80]	; 0x50
 800a20e:	2800      	cmp	r0, #0
 800a210:	d040      	beq.n	800a294 <LISTVIEW_Callback+0x96c>
 800a212:	f7fe fff3 	bl	80091fc <LISTVIEW__GetNumRows>
 800a216:	4680      	mov	r8, r0
 800a218:	4620      	mov	r0, r4
 800a21a:	f7fe fff2 	bl	8009202 <LISTVIEW__GetNumColumns>
 800a21e:	2500      	movs	r5, #0
 800a220:	4681      	mov	r9, r0
 800a222:	4545      	cmp	r5, r8
 800a224:	da1e      	bge.n	800a264 <LISTVIEW_Callback+0x93c>
 800a226:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a228:	4629      	mov	r1, r5
 800a22a:	f000 fe49 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 800a22e:	2700      	movs	r7, #0
 800a230:	9025      	str	r0, [sp, #148]	; 0x94
 800a232:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a234:	454f      	cmp	r7, r9
 800a236:	6818      	ldr	r0, [r3, #0]
 800a238:	da0d      	bge.n	800a256 <LISTVIEW_Callback+0x92e>
 800a23a:	4639      	mov	r1, r7
 800a23c:	f000 fe40 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 800a240:	901a      	str	r0, [sp, #104]	; 0x68
 800a242:	b130      	cbz	r0, 800a252 <LISTVIEW_Callback+0x92a>
 800a244:	6800      	ldr	r0, [r0, #0]
 800a246:	b108      	cbz	r0, 800a24c <LISTVIEW_Callback+0x924>
 800a248:	f009 fb92 	bl	8013970 <GUI_ALLOC_Free>
 800a24c:	a81a      	add	r0, sp, #104	; 0x68
 800a24e:	f009 fb63 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a252:	3701      	adds	r7, #1
 800a254:	e7ed      	b.n	800a232 <LISTVIEW_Callback+0x90a>
 800a256:	f000 fdf7 	bl	800ae48 <GUI_ARRAY_Delete>
 800a25a:	a825      	add	r0, sp, #148	; 0x94
 800a25c:	f009 fb5c 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a260:	3501      	adds	r5, #1
 800a262:	e7de      	b.n	800a222 <LISTVIEW_Callback+0x8fa>
 800a264:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800a268:	b158      	cbz	r0, 800a282 <LISTVIEW_Callback+0x95a>
 800a26a:	f009 fb47 	bl	80138fc <GUI_ALLOC_LockH>
 800a26e:	ab2e      	add	r3, sp, #184	; 0xb8
 800a270:	f843 0d48 	str.w	r0, [r3, #-72]!
 800a274:	68c5      	ldr	r5, [r0, #12]
 800a276:	4618      	mov	r0, r3
 800a278:	f009 fb4e 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a27c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800a280:	47a8      	blx	r5
 800a282:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a284:	f000 fde0 	bl	800ae48 <GUI_ARRAY_Delete>
 800a288:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a28a:	f000 fddd 	bl	800ae48 <GUI_ARRAY_Delete>
 800a28e:	a814      	add	r0, sp, #80	; 0x50
 800a290:	f009 fb42 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a294:	4630      	mov	r0, r6
 800a296:	f003 fd37 	bl	800dd08 <WM_DefaultProc>
 800a29a:	b02f      	add	sp, #188	; 0xbc
 800a29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a2a0 <LISTVIEW_CreateUser>:
 800a2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2a2:	b089      	sub	sp, #36	; 0x24
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	460d      	mov	r5, r1
 800a2a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a2aa:	b992      	cbnz	r2, 800a2d2 <LISTVIEW_CreateUser+0x32>
 800a2ac:	b98b      	cbnz	r3, 800a2d2 <LISTVIEW_CreateUser+0x32>
 800a2ae:	b980      	cbnz	r0, 800a2d2 <LISTVIEW_CreateUser+0x32>
 800a2b0:	b979      	cbnz	r1, 800a2d2 <LISTVIEW_CreateUser+0x32>
 800a2b2:	a906      	add	r1, sp, #24
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	f002 fbda 	bl	800ca6e <WM_GetClientRectEx>
 800a2ba:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800a2be:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 800a2c2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800a2c6:	1ad2      	subs	r2, r2, r3
 800a2c8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800a2cc:	1acb      	subs	r3, r1, r3
 800a2ce:	3201      	adds	r2, #1
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a2d4:	9101      	str	r1, [sp, #4]
 800a2d6:	4928      	ldr	r1, [pc, #160]	; (800a378 <LISTVIEW_CreateUser+0xd8>)
 800a2d8:	9102      	str	r1, [sp, #8]
 800a2da:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a2dc:	9400      	str	r4, [sp, #0]
 800a2de:	3188      	adds	r1, #136	; 0x88
 800a2e0:	9103      	str	r1, [sp, #12]
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	4629      	mov	r1, r5
 800a2e6:	f003 f91f 	bl	800d528 <WM_CreateWindowAsChild>
 800a2ea:	4607      	mov	r7, r0
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d040      	beq.n	800a372 <LISTVIEW_CreateUser+0xd2>
 800a2f0:	f000 fdf9 	bl	800aee6 <GUI_ARRAY_Create>
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	f000 fdf6 	bl	800aee6 <GUI_ARRAY_Create>
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	f009 fafd 	bl	80138fc <GUI_ALLOC_LockH>
 800a302:	9005      	str	r0, [sp, #20]
 800a304:	2800      	cmp	r0, #0
 800a306:	d031      	beq.n	800a36c <LISTVIEW_CreateUser+0xcc>
 800a308:	63c5      	str	r5, [r0, #60]	; 0x3c
 800a30a:	4d1c      	ldr	r5, [pc, #112]	; (800a37c <LISTVIEW_CreateUser+0xdc>)
 800a30c:	6404      	str	r4, [r0, #64]	; 0x40
 800a30e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a310:	2210      	movs	r2, #16
 800a312:	f7fe fd07 	bl	8008d24 <WIDGET__Init>
 800a316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a318:	9e05      	ldr	r6, [sp, #20]
 800a31a:	f106 0444 	add.w	r4, r6, #68	; 0x44
 800a31e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a324:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a328:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a32c:	4b14      	ldr	r3, [pc, #80]	; (800a380 <LISTVIEW_CreateUser+0xe0>)
 800a32e:	63b3      	str	r3, [r6, #56]	; 0x38
 800a330:	2301      	movs	r3, #1
 800a332:	2000      	movs	r0, #0
 800a334:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
 800a338:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 800a33c:	f04f 34ff 	mov.w	r4, #4294967295
 800a340:	2302      	movs	r3, #2
 800a342:	67f0      	str	r0, [r6, #124]	; 0x7c
 800a344:	f8c6 0084 	str.w	r0, [r6, #132]	; 0x84
 800a348:	6774      	str	r4, [r6, #116]	; 0x74
 800a34a:	4602      	mov	r2, r0
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	9700      	str	r7, [sp, #0]
 800a350:	4603      	mov	r3, r0
 800a352:	9002      	str	r0, [sp, #8]
 800a354:	4601      	mov	r1, r0
 800a356:	9003      	str	r0, [sp, #12]
 800a358:	f000 f986 	bl	800a668 <HEADER_CreateEx>
 800a35c:	ab08      	add	r3, sp, #32
 800a35e:	f853 2d0c 	ldr.w	r2, [r3, #-12]!
 800a362:	6350      	str	r0, [r2, #52]	; 0x34
 800a364:	6794      	str	r4, [r2, #120]	; 0x78
 800a366:	4618      	mov	r0, r3
 800a368:	f009 fad6 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a36c:	4638      	mov	r0, r7
 800a36e:	f7ff fa67 	bl	8009840 <LISTVIEW__UpdateScrollParas>
 800a372:	4638      	mov	r0, r7
 800a374:	b009      	add	sp, #36	; 0x24
 800a376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a378:	08009929 	.word	0x08009929
 800a37c:	20000028 	.word	0x20000028
 800a380:	080092bb 	.word	0x080092bb

0800a384 <LISTVIEW_AddColumn>:
 800a384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a388:	b085      	sub	sp, #20
 800a38a:	2500      	movs	r5, #0
 800a38c:	468a      	mov	sl, r1
 800a38e:	4691      	mov	r9, r2
 800a390:	461c      	mov	r4, r3
 800a392:	9502      	str	r5, [sp, #8]
 800a394:	9503      	str	r5, [sp, #12]
 800a396:	4606      	mov	r6, r0
 800a398:	b908      	cbnz	r0, 800a39e <LISTVIEW_AddColumn+0x1a>
 800a39a:	2400      	movs	r4, #0
 800a39c:	e040      	b.n	800a420 <LISTVIEW_AddColumn+0x9c>
 800a39e:	f009 faad 	bl	80138fc <GUI_ALLOC_LockH>
 800a3a2:	9001      	str	r0, [sp, #4]
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d0f8      	beq.n	800a39a <LISTVIEW_AddColumn+0x16>
 800a3a8:	f8d0 b034 	ldr.w	fp, [r0, #52]	; 0x34
 800a3ac:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 800a3b0:	f7fe ff24 	bl	80091fc <LISTVIEW__GetNumRows>
 800a3b4:	4607      	mov	r7, r0
 800a3b6:	a801      	add	r0, sp, #4
 800a3b8:	f009 faae 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a3bc:	1c63      	adds	r3, r4, #1
 800a3be:	bf08      	it	eq
 800a3c0:	240e      	moveq	r4, #14
 800a3c2:	4658      	mov	r0, fp
 800a3c4:	4651      	mov	r1, sl
 800a3c6:	464a      	mov	r2, r9
 800a3c8:	4623      	mov	r3, r4
 800a3ca:	f000 f977 	bl	800a6bc <HEADER_AddItem>
 800a3ce:	a904      	add	r1, sp, #16
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	f801 4d08 	strb.w	r4, [r1, #-8]!
 800a3d6:	2208      	movs	r2, #8
 800a3d8:	f000 fcec 	bl	800adb4 <GUI_ARRAY_AddItem>
 800a3dc:	b9f7      	cbnz	r7, 800a41c <LISTVIEW_AddColumn+0x98>
 800a3de:	2400      	movs	r4, #0
 800a3e0:	e015      	b.n	800a40e <LISTVIEW_AddColumn+0x8a>
 800a3e2:	3401      	adds	r4, #1
 800a3e4:	42bc      	cmp	r4, r7
 800a3e6:	d0fa      	beq.n	800a3de <LISTVIEW_AddColumn+0x5a>
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f7ff f819 	bl	8009422 <LISTVIEW__GetpRow>
 800a3f0:	ab04      	add	r3, sp, #16
 800a3f2:	6805      	ldr	r5, [r0, #0]
 800a3f4:	f843 0d10 	str.w	r0, [r3, #-16]!
 800a3f8:	4668      	mov	r0, sp
 800a3fa:	f009 fa8d 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a3fe:	4628      	mov	r0, r5
 800a400:	2100      	movs	r1, #0
 800a402:	2208      	movs	r2, #8
 800a404:	f000 fcd6 	bl	800adb4 <GUI_ARRAY_AddItem>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d0ea      	beq.n	800a3e2 <LISTVIEW_AddColumn+0x5e>
 800a40c:	2401      	movs	r4, #1
 800a40e:	4630      	mov	r0, r6
 800a410:	f7ff f86c 	bl	80094ec <LISTVIEW__InvalidateInsideArea>
 800a414:	4630      	mov	r0, r6
 800a416:	f7ff fa13 	bl	8009840 <LISTVIEW__UpdateScrollParas>
 800a41a:	e001      	b.n	800a420 <LISTVIEW_AddColumn+0x9c>
 800a41c:	462c      	mov	r4, r5
 800a41e:	e7e3      	b.n	800a3e8 <LISTVIEW_AddColumn+0x64>
 800a420:	4620      	mov	r0, r4
 800a422:	b005      	add	sp, #20
 800a424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a428 <LISTVIEW_AddRow>:
 800a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	460d      	mov	r5, r1
 800a42e:	b087      	sub	sp, #28
 800a430:	4606      	mov	r6, r0
 800a432:	b908      	cbnz	r0, 800a438 <LISTVIEW_AddRow+0x10>
 800a434:	2400      	movs	r4, #0
 800a436:	e081      	b.n	800a53c <LISTVIEW_AddRow+0x114>
 800a438:	f009 fa60 	bl	80138fc <GUI_ALLOC_LockH>
 800a43c:	9004      	str	r0, [sp, #16]
 800a43e:	2800      	cmp	r0, #0
 800a440:	d0f8      	beq.n	800a434 <LISTVIEW_AddRow+0xc>
 800a442:	f8d0 a03c 	ldr.w	sl, [r0, #60]	; 0x3c
 800a446:	f7fe fed9 	bl	80091fc <LISTVIEW__GetNumRows>
 800a44a:	af06      	add	r7, sp, #24
 800a44c:	4681      	mov	r9, r0
 800a44e:	f857 0d08 	ldr.w	r0, [r7, #-8]!
 800a452:	f7fe fed6 	bl	8009202 <LISTVIEW__GetNumColumns>
 800a456:	9000      	str	r0, [sp, #0]
 800a458:	4638      	mov	r0, r7
 800a45a:	f009 fa5d 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a45e:	4650      	mov	r0, sl
 800a460:	2100      	movs	r1, #0
 800a462:	220c      	movs	r2, #12
 800a464:	f000 fca6 	bl	800adb4 <GUI_ARRAY_AddItem>
 800a468:	4604      	mov	r4, r0
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d165      	bne.n	800a53a <LISTVIEW_AddRow+0x112>
 800a46e:	f000 fd3a 	bl	800aee6 <GUI_ARRAY_Create>
 800a472:	4680      	mov	r8, r0
 800a474:	9b00      	ldr	r3, [sp, #0]
 800a476:	429c      	cmp	r4, r3
 800a478:	da34      	bge.n	800a4e4 <LISTVIEW_AddRow+0xbc>
 800a47a:	b145      	cbz	r5, 800a48e <LISTVIEW_AddRow+0x66>
 800a47c:	f8d5 b000 	ldr.w	fp, [r5]
 800a480:	1d2a      	adds	r2, r5, #4
 800a482:	f1bb 0f00 	cmp.w	fp, #0
 800a486:	bf14      	ite	ne
 800a488:	4615      	movne	r5, r2
 800a48a:	2500      	moveq	r5, #0
 800a48c:	e000      	b.n	800a490 <LISTVIEW_AddRow+0x68>
 800a48e:	46ab      	mov	fp, r5
 800a490:	4658      	mov	r0, fp
 800a492:	f006 fb0b 	bl	8010aac <GUI__strlen>
 800a496:	4602      	mov	r2, r0
 800a498:	1c43      	adds	r3, r0, #1
 800a49a:	2100      	movs	r1, #0
 800a49c:	4640      	mov	r0, r8
 800a49e:	3209      	adds	r2, #9
 800a4a0:	9301      	str	r3, [sp, #4]
 800a4a2:	f000 fc87 	bl	800adb4 <GUI_ARRAY_AddItem>
 800a4a6:	b148      	cbz	r0, 800a4bc <LISTVIEW_AddRow+0x94>
 800a4a8:	f114 34ff 	adds.w	r4, r4, #4294967295
 800a4ac:	d304      	bcc.n	800a4b8 <LISTVIEW_AddRow+0x90>
 800a4ae:	4640      	mov	r0, r8
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	f000 fc0c 	bl	800acce <GUI_ARRAY_DeleteItem>
 800a4b6:	e7f7      	b.n	800a4a8 <LISTVIEW_AddRow+0x80>
 800a4b8:	2401      	movs	r4, #1
 800a4ba:	e014      	b.n	800a4e6 <LISTVIEW_AddRow+0xbe>
 800a4bc:	4640      	mov	r0, r8
 800a4be:	4621      	mov	r1, r4
 800a4c0:	f000 fcfe 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 800a4c4:	9b01      	ldr	r3, [sp, #4]
 800a4c6:	9003      	str	r0, [sp, #12]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	dd06      	ble.n	800a4da <LISTVIEW_AddRow+0xb2>
 800a4cc:	f1bb 0f00 	cmp.w	fp, #0
 800a4d0:	d003      	beq.n	800a4da <LISTVIEW_AddRow+0xb2>
 800a4d2:	3004      	adds	r0, #4
 800a4d4:	4659      	mov	r1, fp
 800a4d6:	f010 f9cb 	bl	801a870 <strcpy>
 800a4da:	a803      	add	r0, sp, #12
 800a4dc:	f009 fa1c 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a4e0:	3401      	adds	r4, #1
 800a4e2:	e7c7      	b.n	800a474 <LISTVIEW_AddRow+0x4c>
 800a4e4:	2400      	movs	r4, #0
 800a4e6:	4649      	mov	r1, r9
 800a4e8:	4650      	mov	r0, sl
 800a4ea:	f000 fce9 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 800a4ee:	ab06      	add	r3, sp, #24
 800a4f0:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a4f4:	f8c0 8000 	str.w	r8, [r0]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f009 fa0d 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a4fe:	4630      	mov	r0, r6
 800a500:	f009 f9fc 	bl	80138fc <GUI_ALLOC_LockH>
 800a504:	9004      	str	r0, [sp, #16]
 800a506:	b188      	cbz	r0, 800a52c <LISTVIEW_AddRow+0x104>
 800a508:	2200      	movs	r2, #0
 800a50a:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
 800a50e:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 800a512:	b13a      	cbz	r2, 800a524 <LISTVIEW_AddRow+0xfc>
 800a514:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800a518:	2b00      	cmp	r3, #0
 800a51a:	db03      	blt.n	800a524 <LISTVIEW_AddRow+0xfc>
 800a51c:	4630      	mov	r0, r6
 800a51e:	f7fe ffe5 	bl	80094ec <LISTVIEW__InvalidateInsideArea>
 800a522:	e003      	b.n	800a52c <LISTVIEW_AddRow+0x104>
 800a524:	4630      	mov	r0, r6
 800a526:	4649      	mov	r1, r9
 800a528:	f7ff f8bf 	bl	80096aa <LISTVIEW__InvalidateRow>
 800a52c:	4638      	mov	r0, r7
 800a52e:	f009 f9f3 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a532:	4630      	mov	r0, r6
 800a534:	f7ff f984 	bl	8009840 <LISTVIEW__UpdateScrollParas>
 800a538:	e000      	b.n	800a53c <LISTVIEW_AddRow+0x114>
 800a53a:	2401      	movs	r4, #1
 800a53c:	4620      	mov	r0, r4
 800a53e:	b007      	add	sp, #28
 800a540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a544 <HEADER_GetSel>:
 800a544:	b513      	push	{r0, r1, r4, lr}
 800a546:	4604      	mov	r4, r0
 800a548:	b140      	cbz	r0, 800a55c <HEADER_GetSel+0x18>
 800a54a:	f009 f9d7 	bl	80138fc <GUI_ALLOC_LockH>
 800a54e:	ab02      	add	r3, sp, #8
 800a550:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800a552:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a556:	4618      	mov	r0, r3
 800a558:	f009 f9de 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a55c:	4620      	mov	r0, r4
 800a55e:	b002      	add	sp, #8
 800a560:	bd10      	pop	{r4, pc}
	...

0800a564 <_RestoreOldCursor>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4c07      	ldr	r4, [pc, #28]	; (800a584 <_RestoreOldCursor+0x20>)
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	b153      	cbz	r3, 800a582 <_RestoreOldCursor+0x1e>
 800a56c:	4d06      	ldr	r5, [pc, #24]	; (800a588 <_RestoreOldCursor+0x24>)
 800a56e:	6828      	ldr	r0, [r5, #0]
 800a570:	f008 fcbe 	bl	8012ef0 <GUI_CURSOR_GetStateEx>
 800a574:	b118      	cbz	r0, 800a57e <_RestoreOldCursor+0x1a>
 800a576:	6820      	ldr	r0, [r4, #0]
 800a578:	6829      	ldr	r1, [r5, #0]
 800a57a:	f008 fc53 	bl	8012e24 <GUI_CURSOR_SelectEx>
 800a57e:	2300      	movs	r3, #0
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	2001d0ac 	.word	0x2001d0ac
 800a588:	2001d580 	.word	0x2001d580

0800a58c <HEADER_CreateUser>:
 800a58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a590:	b086      	sub	sp, #24
 800a592:	4604      	mov	r4, r0
 800a594:	460e      	mov	r6, r1
 800a596:	461d      	mov	r5, r3
 800a598:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800a59c:	4617      	mov	r7, r2
 800a59e:	b96a      	cbnz	r2, 800a5bc <HEADER_CreateUser+0x30>
 800a5a0:	b960      	cbnz	r0, 800a5bc <HEADER_CreateUser+0x30>
 800a5a2:	b959      	cbnz	r1, 800a5bc <HEADER_CreateUser+0x30>
 800a5a4:	4640      	mov	r0, r8
 800a5a6:	a904      	add	r1, sp, #16
 800a5a8:	f002 f9e0 	bl	800c96c <WM_GetInsideRectEx>
 800a5ac:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 800a5b0:	f9bd 7014 	ldrsh.w	r7, [sp, #20]
 800a5b4:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 800a5b8:	1b3f      	subs	r7, r7, r4
 800a5ba:	3701      	adds	r7, #1
 800a5bc:	b96d      	cbnz	r5, 800a5da <HEADER_CreateUser+0x4e>
 800a5be:	f7fe fca7 	bl	8008f10 <WIDGET_GetDefaultEffect>
 800a5c2:	4b25      	ldr	r3, [pc, #148]	; (800a658 <HEADER_CreateUser+0xcc>)
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	6818      	ldr	r0, [r3, #0]
 800a5c8:	f007 fe2c 	bl	8012224 <GUI_GetYDistOfFont>
 800a5cc:	4b23      	ldr	r3, [pc, #140]	; (800a65c <HEADER_CreateUser+0xd0>)
 800a5ce:	682d      	ldr	r5, [r5, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a5d6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a5da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5dc:	f8cd 8000 	str.w	r8, [sp]
 800a5e0:	f443 7320 	orr.w	r3, r3, #640	; 0x280
 800a5e4:	9301      	str	r3, [sp, #4]
 800a5e6:	4b1e      	ldr	r3, [pc, #120]	; (800a660 <HEADER_CreateUser+0xd4>)
 800a5e8:	9302      	str	r3, [sp, #8]
 800a5ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5ec:	3344      	adds	r3, #68	; 0x44
 800a5ee:	9303      	str	r3, [sp, #12]
 800a5f0:	463a      	mov	r2, r7
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	4631      	mov	r1, r6
 800a5f6:	462b      	mov	r3, r5
 800a5f8:	f002 ff96 	bl	800d528 <WM_CreateWindowAsChild>
 800a5fc:	4607      	mov	r7, r0
 800a5fe:	b338      	cbz	r0, 800a650 <HEADER_CreateUser+0xc4>
 800a600:	f000 fc71 	bl	800aee6 <GUI_ARRAY_Create>
 800a604:	4604      	mov	r4, r0
 800a606:	4638      	mov	r0, r7
 800a608:	f009 f978 	bl	80138fc <GUI_ALLOC_LockH>
 800a60c:	4d12      	ldr	r5, [pc, #72]	; (800a658 <HEADER_CreateUser+0xcc>)
 800a60e:	9004      	str	r0, [sp, #16]
 800a610:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a612:	64c4      	str	r4, [r0, #76]	; 0x4c
 800a614:	2200      	movs	r2, #0
 800a616:	f7fe fb85 	bl	8008d24 <WIDGET__Init>
 800a61a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a61c:	f10d 0e18 	add.w	lr, sp, #24
 800a620:	f85e 6d08 	ldr.w	r6, [lr, #-8]!
 800a624:	f106 0434 	add.w	r4, r6, #52	; 0x34
 800a628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a62a:	682b      	ldr	r3, [r5, #0]
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	4c0d      	ldr	r4, [pc, #52]	; (800a664 <HEADER_CreateUser+0xd8>)
 800a630:	f04f 33ff 	mov.w	r3, #4294967295
 800a634:	6533      	str	r3, [r6, #80]	; 0x50
 800a636:	6573      	str	r3, [r6, #84]	; 0x54
 800a638:	2200      	movs	r2, #0
 800a63a:	6633      	str	r3, [r6, #96]	; 0x60
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	64b3      	str	r3, [r6, #72]	; 0x48
 800a640:	65b2      	str	r2, [r6, #88]	; 0x58
 800a642:	4670      	mov	r0, lr
 800a644:	f009 f968 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	4638      	mov	r0, r7
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	4798      	blx	r3
 800a650:	4638      	mov	r0, r7
 800a652:	b006      	add	sp, #24
 800a654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a658:	20000058 	.word	0x20000058
 800a65c:	2001d0b0 	.word	0x2001d0b0
 800a660:	0800aa8d 	.word	0x0800aa8d
 800a664:	2000006c 	.word	0x2000006c

0800a668 <HEADER_CreateEx>:
 800a668:	b510      	push	{r4, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	9c08      	ldr	r4, [sp, #32]
 800a66e:	9400      	str	r4, [sp, #0]
 800a670:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a672:	9401      	str	r4, [sp, #4]
 800a674:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a676:	9402      	str	r4, [sp, #8]
 800a678:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a67a:	9403      	str	r4, [sp, #12]
 800a67c:	2400      	movs	r4, #0
 800a67e:	9404      	str	r4, [sp, #16]
 800a680:	f7ff ff84 	bl	800a58c <HEADER_CreateUser>
 800a684:	b006      	add	sp, #24
 800a686:	bd10      	pop	{r4, pc}

0800a688 <HEADER_SetScrollPos>:
 800a688:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a68a:	460c      	mov	r4, r1
 800a68c:	4605      	mov	r5, r0
 800a68e:	b198      	cbz	r0, 800a6b8 <HEADER_SetScrollPos+0x30>
 800a690:	2900      	cmp	r1, #0
 800a692:	db11      	blt.n	800a6b8 <HEADER_SetScrollPos+0x30>
 800a694:	f009 f932 	bl	80138fc <GUI_ALLOC_LockH>
 800a698:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800a69a:	9001      	str	r0, [sp, #4]
 800a69c:	4294      	cmp	r4, r2
 800a69e:	d008      	beq.n	800a6b2 <HEADER_SetScrollPos+0x2a>
 800a6a0:	6584      	str	r4, [r0, #88]	; 0x58
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f002 feff 	bl	800d4a6 <WM_InvalidateWindow>
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	f002 f8e3 	bl	800c874 <WM_GetParent>
 800a6ae:	f002 fefa 	bl	800d4a6 <WM_InvalidateWindow>
 800a6b2:	a801      	add	r0, sp, #4
 800a6b4:	f009 f930 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a6b8:	b003      	add	sp, #12
 800a6ba:	bd30      	pop	{r4, r5, pc}

0800a6bc <HEADER_AddItem>:
 800a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	460e      	mov	r6, r1
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	4614      	mov	r4, r2
 800a6c6:	469a      	mov	sl, r3
 800a6c8:	4681      	mov	r9, r0
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	d04c      	beq.n	800a768 <HEADER_AddItem+0xac>
 800a6ce:	f009 f915 	bl	80138fc <GUI_ALLOC_LockH>
 800a6d2:	4680      	mov	r8, r0
 800a6d4:	9000      	str	r0, [sp, #0]
 800a6d6:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 800a6d8:	b1d4      	cbz	r4, 800a710 <HEADER_AddItem+0x54>
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f7f5 fd98 	bl	8000210 <strlen>
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	b9be      	cbnz	r6, 800a714 <HEADER_AddItem+0x58>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d03f      	beq.n	800a768 <HEADER_AddItem+0xac>
 800a6e8:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 800a6ec:	f007 fbc2 	bl	8011e74 <GUI_SetFont>
 800a6f0:	4680      	mov	r8, r0
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f007 fd98 	bl	8012228 <GUI_GetStringDistX>
 800a6f8:	9a00      	ldr	r2, [sp, #0]
 800a6fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a6fc:	681e      	ldr	r6, [r3, #0]
 800a6fe:	4b1c      	ldr	r3, [pc, #112]	; (800a770 <HEADER_AddItem+0xb4>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	441e      	add	r6, r3
 800a704:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800a708:	4640      	mov	r0, r8
 800a70a:	f007 fbb3 	bl	8011e74 <GUI_SetFont>
 800a70e:	e001      	b.n	800a714 <HEADER_AddItem+0x58>
 800a710:	b356      	cbz	r6, 800a768 <HEADER_AddItem+0xac>
 800a712:	4625      	mov	r5, r4
 800a714:	2300      	movs	r3, #0
 800a716:	4668      	mov	r0, sp
 800a718:	9602      	str	r6, [sp, #8]
 800a71a:	9304      	str	r3, [sp, #16]
 800a71c:	f8ad a00c 	strh.w	sl, [sp, #12]
 800a720:	f009 f8fa 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a724:	4638      	mov	r0, r7
 800a726:	f000 fb36 	bl	800ad96 <GUI_ARRAY_GetNumItems>
 800a72a:	a902      	add	r1, sp, #8
 800a72c:	4606      	mov	r6, r0
 800a72e:	f105 0211 	add.w	r2, r5, #17
 800a732:	4638      	mov	r0, r7
 800a734:	f000 fb3e 	bl	800adb4 <GUI_ARRAY_AddItem>
 800a738:	b9b0      	cbnz	r0, 800a768 <HEADER_AddItem+0xac>
 800a73a:	4638      	mov	r0, r7
 800a73c:	4631      	mov	r1, r6
 800a73e:	f000 fbbf 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 800a742:	9001      	str	r0, [sp, #4]
 800a744:	b125      	cbz	r5, 800a750 <HEADER_AddItem+0x94>
 800a746:	4621      	mov	r1, r4
 800a748:	300c      	adds	r0, #12
 800a74a:	f010 f891 	bl	801a870 <strcpy>
 800a74e:	e000      	b.n	800a752 <HEADER_AddItem+0x96>
 800a750:	7305      	strb	r5, [r0, #12]
 800a752:	a801      	add	r0, sp, #4
 800a754:	f009 f8e0 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a758:	4648      	mov	r0, r9
 800a75a:	f002 fea4 	bl	800d4a6 <WM_InvalidateWindow>
 800a75e:	4648      	mov	r0, r9
 800a760:	f002 f888 	bl	800c874 <WM_GetParent>
 800a764:	f002 fe9f 	bl	800d4a6 <WM_InvalidateWindow>
 800a768:	b006      	add	sp, #24
 800a76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76e:	bf00      	nop
 800a770:	20000074 	.word	0x20000074

0800a774 <HEADER_SetItemWidth>:
 800a774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a776:	460f      	mov	r7, r1
 800a778:	b087      	sub	sp, #28
 800a77a:	4615      	mov	r5, r2
 800a77c:	4604      	mov	r4, r0
 800a77e:	2800      	cmp	r0, #0
 800a780:	d031      	beq.n	800a7e6 <HEADER_SetItemWidth+0x72>
 800a782:	2a00      	cmp	r2, #0
 800a784:	db2f      	blt.n	800a7e6 <HEADER_SetItemWidth+0x72>
 800a786:	f009 f8b9 	bl	80138fc <GUI_ALLOC_LockH>
 800a78a:	ab06      	add	r3, sp, #24
 800a78c:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 800a78e:	f843 0d18 	str.w	r0, [r3, #-24]!
 800a792:	4668      	mov	r0, sp
 800a794:	f009 f8c0 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a798:	4630      	mov	r0, r6
 800a79a:	f000 fafc 	bl	800ad96 <GUI_ARRAY_GetNumItems>
 800a79e:	4287      	cmp	r7, r0
 800a7a0:	d221      	bcs.n	800a7e6 <HEADER_SetItemWidth+0x72>
 800a7a2:	4630      	mov	r0, r6
 800a7a4:	4639      	mov	r1, r7
 800a7a6:	f000 fb8b 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	a806      	add	r0, sp, #24
 800a7ae:	f840 3d14 	str.w	r3, [r0, #-20]!
 800a7b2:	b1b3      	cbz	r3, 800a7e2 <HEADER_SetItemWidth+0x6e>
 800a7b4:	601d      	str	r5, [r3, #0]
 800a7b6:	f009 f8af 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f002 f85a 	bl	800c874 <WM_GetParent>
 800a7c0:	2325      	movs	r3, #37	; 0x25
 800a7c2:	9003      	str	r0, [sp, #12]
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	9302      	str	r3, [sp, #8]
 800a7c8:	9404      	str	r4, [sp, #16]
 800a7ca:	f002 fe6c 	bl	800d4a6 <WM_InvalidateWindow>
 800a7ce:	9803      	ldr	r0, [sp, #12]
 800a7d0:	a902      	add	r1, sp, #8
 800a7d2:	f001 fca1 	bl	800c118 <WM__SendMessage>
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f002 f84c 	bl	800c874 <WM_GetParent>
 800a7dc:	f002 fe63 	bl	800d4a6 <WM_InvalidateWindow>
 800a7e0:	e001      	b.n	800a7e6 <HEADER_SetItemWidth+0x72>
 800a7e2:	f009 f899 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a7e6:	b007      	add	sp, #28
 800a7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7ea <HEADER_GetHeight>:
 800a7ea:	b507      	push	{r0, r1, r2, lr}
 800a7ec:	b190      	cbz	r0, 800a814 <HEADER_GetHeight+0x2a>
 800a7ee:	4669      	mov	r1, sp
 800a7f0:	f002 f93d 	bl	800ca6e <WM_GetClientRectEx>
 800a7f4:	f9bd 1000 	ldrsh.w	r1, [sp]
 800a7f8:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 800a7fc:	4668      	mov	r0, sp
 800a7fe:	4249      	negs	r1, r1
 800a800:	4252      	negs	r2, r2
 800a802:	f007 fccb 	bl	801219c <GUI_MoveRect>
 800a806:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 800a80a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800a80e:	1ac0      	subs	r0, r0, r3
 800a810:	3001      	adds	r0, #1
 800a812:	e7ff      	b.n	800a814 <HEADER_GetHeight+0x2a>
 800a814:	b003      	add	sp, #12
 800a816:	f85d fb04 	ldr.w	pc, [sp], #4

0800a81a <HEADER_GetItemWidth>:
 800a81a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a81c:	460d      	mov	r5, r1
 800a81e:	4604      	mov	r4, r0
 800a820:	b1c0      	cbz	r0, 800a854 <HEADER_GetItemWidth+0x3a>
 800a822:	f009 f86b 	bl	80138fc <GUI_ALLOC_LockH>
 800a826:	9001      	str	r0, [sp, #4]
 800a828:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a82a:	f000 fab4 	bl	800ad96 <GUI_ARRAY_GetNumItems>
 800a82e:	4285      	cmp	r5, r0
 800a830:	d20c      	bcs.n	800a84c <HEADER_GetItemWidth+0x32>
 800a832:	9b01      	ldr	r3, [sp, #4]
 800a834:	4629      	mov	r1, r5
 800a836:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a838:	f000 fb42 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 800a83c:	ab02      	add	r3, sp, #8
 800a83e:	6804      	ldr	r4, [r0, #0]
 800a840:	f843 0d08 	str.w	r0, [r3, #-8]!
 800a844:	4668      	mov	r0, sp
 800a846:	f009 f867 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a84a:	e000      	b.n	800a84e <HEADER_GetItemWidth+0x34>
 800a84c:	2400      	movs	r4, #0
 800a84e:	a801      	add	r0, sp, #4
 800a850:	f009 f862 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a854:	4620      	mov	r0, r4
 800a856:	b003      	add	sp, #12
 800a858:	bd30      	pop	{r4, r5, pc}
	...

0800a85c <_HandlePID>:
 800a85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a860:	b089      	sub	sp, #36	; 0x24
 800a862:	4615      	mov	r5, r2
 800a864:	4604      	mov	r4, r0
 800a866:	4689      	mov	r9, r1
 800a868:	469a      	mov	sl, r3
 800a86a:	f009 f847 	bl	80138fc <GUI_ALLOC_LockH>
 800a86e:	9004      	str	r0, [sp, #16]
 800a870:	4680      	mov	r8, r0
 800a872:	4620      	mov	r0, r4
 800a874:	f001 ffb3 	bl	800c7de <WM_GetWindowSizeY>
 800a878:	2d00      	cmp	r5, #0
 800a87a:	db67      	blt.n	800a94c <_HandlePID+0xf0>
 800a87c:	4285      	cmp	r5, r0
 800a87e:	da65      	bge.n	800a94c <_HandlePID+0xf0>
 800a880:	2c00      	cmp	r4, #0
 800a882:	d063      	beq.n	800a94c <_HandlePID+0xf0>
 800a884:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 800a888:	f000 fa85 	bl	800ad96 <GUI_ARRAY_GetNumItems>
 800a88c:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 800a890:	9003      	str	r0, [sp, #12]
 800a892:	b113      	cbz	r3, 800a89a <_HandlePID+0x3e>
 800a894:	f8d8 b058 	ldr.w	fp, [r8, #88]	; 0x58
 800a898:	e000      	b.n	800a89c <_HandlePID+0x40>
 800a89a:	469b      	mov	fp, r3
 800a89c:	2700      	movs	r7, #0
 800a89e:	463a      	mov	r2, r7
 800a8a0:	f04f 35ff 	mov.w	r5, #4294967295
 800a8a4:	9b03      	ldr	r3, [sp, #12]
 800a8a6:	429f      	cmp	r7, r3
 800a8a8:	d043      	beq.n	800a932 <_HandlePID+0xd6>
 800a8aa:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 800a8ae:	9201      	str	r2, [sp, #4]
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	f000 fb05 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 800a8b6:	ab08      	add	r3, sp, #32
 800a8b8:	6806      	ldr	r6, [r0, #0]
 800a8ba:	f843 0d08 	str.w	r0, [r3, #-8]!
 800a8be:	4618      	mov	r0, r3
 800a8c0:	9302      	str	r3, [sp, #8]
 800a8c2:	f009 f829 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a8c6:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 800a8ca:	9a01      	ldr	r2, [sp, #4]
 800a8cc:	429f      	cmp	r7, r3
 800a8ce:	445e      	add	r6, fp
 800a8d0:	f107 0c01 	add.w	ip, r7, #1
 800a8d4:	d30b      	bcc.n	800a8ee <_HandlePID+0x92>
 800a8d6:	b12b      	cbz	r3, 800a8e4 <_HandlePID+0x88>
 800a8d8:	429f      	cmp	r7, r3
 800a8da:	bf04      	itt	eq
 800a8dc:	f8d8 3058 	ldreq.w	r3, [r8, #88]	; 0x58
 800a8e0:	ebc3 0606 	rsbeq	r6, r3, r6
 800a8e4:	4296      	cmp	r6, r2
 800a8e6:	46b3      	mov	fp, r6
 800a8e8:	4616      	mov	r6, r2
 800a8ea:	db1f      	blt.n	800a92c <_HandlePID+0xd0>
 800a8ec:	e000      	b.n	800a8f0 <_HandlePID+0x94>
 800a8ee:	46b3      	mov	fp, r6
 800a8f0:	f1a9 0204 	sub.w	r2, r9, #4
 800a8f4:	4593      	cmp	fp, r2
 800a8f6:	db19      	blt.n	800a92c <_HandlePID+0xd0>
 800a8f8:	f109 0204 	add.w	r2, r9, #4
 800a8fc:	4593      	cmp	fp, r2
 800a8fe:	dc15      	bgt.n	800a92c <_HandlePID+0xd0>
 800a900:	9b03      	ldr	r3, [sp, #12]
 800a902:	1e5a      	subs	r2, r3, #1
 800a904:	4297      	cmp	r7, r2
 800a906:	463d      	mov	r5, r7
 800a908:	d210      	bcs.n	800a92c <_HandlePID+0xd0>
 800a90a:	45d9      	cmp	r9, fp
 800a90c:	da0e      	bge.n	800a92c <_HandlePID+0xd0>
 800a90e:	4661      	mov	r1, ip
 800a910:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 800a914:	f8cd c004 	str.w	ip, [sp, #4]
 800a918:	f000 fad2 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 800a91c:	6807      	ldr	r7, [r0, #0]
 800a91e:	9006      	str	r0, [sp, #24]
 800a920:	9802      	ldr	r0, [sp, #8]
 800a922:	f008 fff9 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a926:	f8dd c004 	ldr.w	ip, [sp, #4]
 800a92a:	b117      	cbz	r7, 800a932 <_HandlePID+0xd6>
 800a92c:	4667      	mov	r7, ip
 800a92e:	4632      	mov	r2, r6
 800a930:	e7b8      	b.n	800a8a4 <_HandlePID+0x48>
 800a932:	f1ba 0f01 	cmp.w	sl, #1
 800a936:	d10e      	bne.n	800a956 <_HandlePID+0xfa>
 800a938:	2d00      	cmp	r5, #0
 800a93a:	db13      	blt.n	800a964 <_HandlePID+0x108>
 800a93c:	9b04      	ldr	r3, [sp, #16]
 800a93e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a940:	3201      	adds	r2, #1
 800a942:	d10f      	bne.n	800a964 <_HandlePID+0x108>
 800a944:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
 800a948:	655d      	str	r5, [r3, #84]	; 0x54
 800a94a:	e00b      	b.n	800a964 <_HandlePID+0x108>
 800a94c:	f1ba 0f01 	cmp.w	sl, #1
 800a950:	f04f 35ff 	mov.w	r5, #4294967295
 800a954:	d006      	beq.n	800a964 <_HandlePID+0x108>
 800a956:	f1ba 0f00 	cmp.w	sl, #0
 800a95a:	dc03      	bgt.n	800a964 <_HandlePID+0x108>
 800a95c:	9b04      	ldr	r3, [sp, #16]
 800a95e:	f04f 32ff 	mov.w	r2, #4294967295
 800a962:	651a      	str	r2, [r3, #80]	; 0x50
 800a964:	af08      	add	r7, sp, #32
 800a966:	f857 3d10 	ldr.w	r3, [r7, #-16]!
 800a96a:	4638      	mov	r0, r7
 800a96c:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 800a96e:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
 800a972:	f008 ffd1 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a976:	2d00      	cmp	r5, #0
 800a978:	db16      	blt.n	800a9a8 <_HandlePID+0x14c>
 800a97a:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800aa88 <_HandlePID+0x22c>
 800a97e:	4620      	mov	r0, r4
 800a980:	2101      	movs	r1, #1
 800a982:	f001 fda9 	bl	800c4d8 <WM_SetCapture>
 800a986:	f8db 3000 	ldr.w	r3, [fp]
 800a98a:	b96b      	cbnz	r3, 800a9a8 <_HandlePID+0x14c>
 800a98c:	4b3c      	ldr	r3, [pc, #240]	; (800aa80 <_HandlePID+0x224>)
 800a98e:	6818      	ldr	r0, [r3, #0]
 800a990:	9301      	str	r3, [sp, #4]
 800a992:	f008 faad 	bl	8012ef0 <GUI_CURSOR_GetStateEx>
 800a996:	9b01      	ldr	r3, [sp, #4]
 800a998:	b130      	cbz	r0, 800a9a8 <_HandlePID+0x14c>
 800a99a:	4a3a      	ldr	r2, [pc, #232]	; (800aa84 <_HandlePID+0x228>)
 800a99c:	6819      	ldr	r1, [r3, #0]
 800a99e:	6810      	ldr	r0, [r2, #0]
 800a9a0:	f008 fa40 	bl	8012e24 <GUI_CURSOR_SelectEx>
 800a9a4:	f8cb 0000 	str.w	r0, [fp]
 800a9a8:	2e00      	cmp	r6, #0
 800a9aa:	db54      	blt.n	800aa56 <_HandlePID+0x1fa>
 800a9ac:	45b1      	cmp	r9, r6
 800a9ae:	d052      	beq.n	800aa56 <_HandlePID+0x1fa>
 800a9b0:	f1ba 0f01 	cmp.w	sl, #1
 800a9b4:	d14f      	bne.n	800aa56 <_HandlePID+0x1fa>
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	4641      	mov	r1, r8
 800a9ba:	f7ff ff2e 	bl	800a81a <HEADER_GetItemWidth>
 800a9be:	4448      	add	r0, r9
 800a9c0:	1b82      	subs	r2, r0, r6
 800a9c2:	d452      	bmi.n	800aa6a <_HandlePID+0x20e>
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	4641      	mov	r1, r8
 800a9c8:	f7ff fed4 	bl	800a774 <HEADER_SetItemWidth>
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f008 ff95 	bl	80138fc <GUI_ALLOC_LockH>
 800a9d2:	ab08      	add	r3, sp, #32
 800a9d4:	f890 506c 	ldrb.w	r5, [r0, #108]	; 0x6c
 800a9d8:	f843 0d0c 	str.w	r0, [r3, #-12]!
 800a9dc:	f8d0 a054 	ldr.w	sl, [r0, #84]	; 0x54
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f008 ff99 	bl	8013918 <GUI_ALLOC_UnlockH>
 800a9e6:	b90d      	cbnz	r5, 800a9ec <_HandlePID+0x190>
 800a9e8:	464e      	mov	r6, r9
 800a9ea:	e03e      	b.n	800aa6a <_HandlePID+0x20e>
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	a906      	add	r1, sp, #24
 800a9f0:	f002 f83d 	bl	800ca6e <WM_GetClientRectEx>
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 800a9fa:	f001 ff3b 	bl	800c874 <WM_GetParent>
 800a9fe:	b140      	cbz	r0, 800aa12 <_HandlePID+0x1b6>
 800aa00:	4620      	mov	r0, r4
 800aa02:	f001 ff37 	bl	800c874 <WM_GetParent>
 800aa06:	f001 ff26 	bl	800c856 <WM_GetScrollbarV>
 800aa0a:	b110      	cbz	r0, 800aa12 <_HandlePID+0x1b6>
 800aa0c:	f001 fed2 	bl	800c7b4 <WM_GetWindowSizeX>
 800aa10:	1a2d      	subs	r5, r5, r0
 800aa12:	f04f 0800 	mov.w	r8, #0
 800aa16:	46c3      	mov	fp, r8
 800aa18:	45d3      	cmp	fp, sl
 800aa1a:	dc07      	bgt.n	800aa2c <_HandlePID+0x1d0>
 800aa1c:	4659      	mov	r1, fp
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f7ff fefb 	bl	800a81a <HEADER_GetItemWidth>
 800aa24:	f10b 0b01 	add.w	fp, fp, #1
 800aa28:	4480      	add	r8, r0
 800aa2a:	e7f5      	b.n	800aa18 <_HandlePID+0x1bc>
 800aa2c:	45a8      	cmp	r8, r5
 800aa2e:	dddb      	ble.n	800a9e8 <_HandlePID+0x18c>
 800aa30:	f04f 0800 	mov.w	r8, #0
 800aa34:	46c1      	mov	r9, r8
 800aa36:	45d1      	cmp	r9, sl
 800aa38:	4620      	mov	r0, r4
 800aa3a:	da06      	bge.n	800aa4a <_HandlePID+0x1ee>
 800aa3c:	4649      	mov	r1, r9
 800aa3e:	f7ff feec 	bl	800a81a <HEADER_GetItemWidth>
 800aa42:	f109 0901 	add.w	r9, r9, #1
 800aa46:	4480      	add	r8, r0
 800aa48:	e7f5      	b.n	800aa36 <_HandlePID+0x1da>
 800aa4a:	4651      	mov	r1, sl
 800aa4c:	ebc8 0205 	rsb	r2, r8, r5
 800aa50:	f7ff fe90 	bl	800a774 <HEADER_SetItemWidth>
 800aa54:	e009      	b.n	800aa6a <_HandlePID+0x20e>
 800aa56:	f1ba 0f00 	cmp.w	sl, #0
 800aa5a:	dc06      	bgt.n	800aa6a <_HandlePID+0x20e>
 800aa5c:	1c6b      	adds	r3, r5, #1
 800aa5e:	d104      	bne.n	800aa6a <_HandlePID+0x20e>
 800aa60:	f7ff fd80 	bl	800a564 <_RestoreOldCursor>
 800aa64:	f001 fd52 	bl	800c50c <WM_ReleaseCapture>
 800aa68:	462e      	mov	r6, r5
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f008 ff46 	bl	80138fc <GUI_ALLOC_LockH>
 800aa70:	9004      	str	r0, [sp, #16]
 800aa72:	6506      	str	r6, [r0, #80]	; 0x50
 800aa74:	4638      	mov	r0, r7
 800aa76:	f008 ff4f 	bl	8013918 <GUI_ALLOC_UnlockH>
 800aa7a:	b009      	add	sp, #36	; 0x24
 800aa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa80:	2001d580 	.word	0x2001d580
 800aa84:	20000070 	.word	0x20000070
 800aa88:	2001d0ac 	.word	0x2001d0ac

0800aa8c <HEADER_Callback>:
 800aa8c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa90:	6844      	ldr	r4, [r0, #4]
 800aa92:	4606      	mov	r6, r0
 800aa94:	4631      	mov	r1, r6
 800aa96:	4620      	mov	r0, r4
 800aa98:	f7fe f94c 	bl	8008d34 <WIDGET_HandleActive>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	f000 80c8 	beq.w	800ac32 <HEADER_Callback+0x1a6>
 800aaa2:	6833      	ldr	r3, [r6, #0]
 800aaa4:	2b10      	cmp	r3, #16
 800aaa6:	f000 8089 	beq.w	800abbc <HEADER_Callback+0x130>
 800aaaa:	dc05      	bgt.n	800aab8 <HEADER_Callback+0x2c>
 800aaac:	2b0b      	cmp	r3, #11
 800aaae:	f000 809a 	beq.w	800abe6 <HEADER_Callback+0x15a>
 800aab2:	2b0f      	cmp	r3, #15
 800aab4:	d006      	beq.n	800aac4 <HEADER_Callback+0x38>
 800aab6:	e0b9      	b.n	800ac2c <HEADER_Callback+0x1a0>
 800aab8:	2b11      	cmp	r3, #17
 800aaba:	d014      	beq.n	800aae6 <HEADER_Callback+0x5a>
 800aabc:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800aac0:	d05e      	beq.n	800ab80 <HEADER_Callback+0xf4>
 800aac2:	e0b3      	b.n	800ac2c <HEADER_Callback+0x1a0>
 800aac4:	4620      	mov	r0, r4
 800aac6:	f008 ff19 	bl	80138fc <GUI_ALLOC_LockH>
 800aaca:	ab02      	add	r3, sp, #8
 800aacc:	f843 0d04 	str.w	r0, [r3, #-4]!
 800aad0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800aad2:	6815      	ldr	r5, [r2, #0]
 800aad4:	4618      	mov	r0, r3
 800aad6:	f008 ff1f 	bl	8013918 <GUI_ALLOC_UnlockH>
 800aada:	2d00      	cmp	r5, #0
 800aadc:	f000 80a9 	beq.w	800ac32 <HEADER_Callback+0x1a6>
 800aae0:	4620      	mov	r0, r4
 800aae2:	47a8      	blx	r5
 800aae4:	e0a5      	b.n	800ac32 <HEADER_Callback+0x1a6>
 800aae6:	4620      	mov	r0, r4
 800aae8:	f008 ff08 	bl	80138fc <GUI_ALLOC_LockH>
 800aaec:	68f3      	ldr	r3, [r6, #12]
 800aaee:	9000      	str	r0, [sp, #0]
 800aaf0:	891a      	ldrh	r2, [r3, #8]
 800aaf2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	d13e      	bne.n	800ab78 <HEADER_Callback+0xec>
 800aafa:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800aafc:	681f      	ldr	r7, [r3, #0]
 800aafe:	685e      	ldr	r6, [r3, #4]
 800ab00:	4620      	mov	r0, r4
 800ab02:	4417      	add	r7, r2
 800ab04:	f001 fe6b 	bl	800c7de <WM_GetWindowSizeY>
 800ab08:	2e00      	cmp	r6, #0
 800ab0a:	da02      	bge.n	800ab12 <HEADER_Callback+0x86>
 800ab0c:	f04f 36ff 	mov.w	r6, #4294967295
 800ab10:	e031      	b.n	800ab76 <HEADER_Callback+0xea>
 800ab12:	4286      	cmp	r6, r0
 800ab14:	dafa      	bge.n	800ab0c <HEADER_Callback+0x80>
 800ab16:	2c00      	cmp	r4, #0
 800ab18:	d0f8      	beq.n	800ab0c <HEADER_Callback+0x80>
 800ab1a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800ab1c:	f000 f93b 	bl	800ad96 <GUI_ARRAY_GetNumItems>
 800ab20:	6eac      	ldr	r4, [r5, #104]	; 0x68
 800ab22:	4682      	mov	sl, r0
 800ab24:	b104      	cbz	r4, 800ab28 <HEADER_Callback+0x9c>
 800ab26:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800ab28:	2600      	movs	r6, #0
 800ab2a:	46b0      	mov	r8, r6
 800ab2c:	4556      	cmp	r6, sl
 800ab2e:	d0ed      	beq.n	800ab0c <HEADER_Callback+0x80>
 800ab30:	4631      	mov	r1, r6
 800ab32:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800ab34:	f000 f9c4 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	a802      	add	r0, sp, #8
 800ab3c:	f8d2 9000 	ldr.w	r9, [r2]
 800ab40:	f840 2d04 	str.w	r2, [r0, #-4]!
 800ab44:	f008 fee8 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ab48:	4544      	cmp	r4, r8
 800ab4a:	db07      	blt.n	800ab5c <HEADER_Callback+0xd0>
 800ab4c:	1d23      	adds	r3, r4, #4
 800ab4e:	429f      	cmp	r7, r3
 800ab50:	dd04      	ble.n	800ab5c <HEADER_Callback+0xd0>
 800ab52:	eb04 0309 	add.w	r3, r4, r9
 800ab56:	3b04      	subs	r3, #4
 800ab58:	429f      	cmp	r7, r3
 800ab5a:	db0c      	blt.n	800ab76 <HEADER_Callback+0xea>
 800ab5c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800ab5e:	429e      	cmp	r6, r3
 800ab60:	d305      	bcc.n	800ab6e <HEADER_Callback+0xe2>
 800ab62:	b12b      	cbz	r3, 800ab70 <HEADER_Callback+0xe4>
 800ab64:	429e      	cmp	r6, r3
 800ab66:	d103      	bne.n	800ab70 <HEADER_Callback+0xe4>
 800ab68:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800ab6a:	1ae4      	subs	r4, r4, r3
 800ab6c:	e000      	b.n	800ab70 <HEADER_Callback+0xe4>
 800ab6e:	46a0      	mov	r8, r4
 800ab70:	444c      	add	r4, r9
 800ab72:	3601      	adds	r6, #1
 800ab74:	e7da      	b.n	800ab2c <HEADER_Callback+0xa0>
 800ab76:	65ee      	str	r6, [r5, #92]	; 0x5c
 800ab78:	4668      	mov	r0, sp
 800ab7a:	f008 fecd 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ab7e:	e058      	b.n	800ac32 <HEADER_Callback+0x1a6>
 800ab80:	4620      	mov	r0, r4
 800ab82:	f008 febb 	bl	80138fc <GUI_ALLOC_LockH>
 800ab86:	ab02      	add	r3, sp, #8
 800ab88:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800ab8a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f008 fec2 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ab94:	68f5      	ldr	r5, [r6, #12]
 800ab96:	b165      	cbz	r5, 800abb2 <HEADER_Callback+0x126>
 800ab98:	6829      	ldr	r1, [r5, #0]
 800ab9a:	7a2b      	ldrb	r3, [r5, #8]
 800ab9c:	686a      	ldr	r2, [r5, #4]
 800ab9e:	4439      	add	r1, r7
 800aba0:	4620      	mov	r0, r4
 800aba2:	f7ff fe5b 	bl	800a85c <_HandlePID>
 800aba6:	7a2b      	ldrb	r3, [r5, #8]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bf0c      	ite	eq
 800abac:	2102      	moveq	r1, #2
 800abae:	2101      	movne	r1, #1
 800abb0:	e000      	b.n	800abb4 <HEADER_Callback+0x128>
 800abb2:	2103      	movs	r1, #3
 800abb4:	4620      	mov	r0, r4
 800abb6:	f001 fd28 	bl	800c60a <WM_NotifyParent>
 800abba:	e03a      	b.n	800ac32 <HEADER_Callback+0x1a6>
 800abbc:	4620      	mov	r0, r4
 800abbe:	f008 fe9d 	bl	80138fc <GUI_ALLOC_LockH>
 800abc2:	ab02      	add	r3, sp, #8
 800abc4:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800abc6:	f843 0d04 	str.w	r0, [r3, #-4]!
 800abca:	4618      	mov	r0, r3
 800abcc:	f008 fea4 	bl	8013918 <GUI_ALLOC_UnlockH>
 800abd0:	68f3      	ldr	r3, [r6, #12]
 800abd2:	b373      	cbz	r3, 800ac32 <HEADER_Callback+0x1a6>
 800abd4:	6819      	ldr	r1, [r3, #0]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	4620      	mov	r0, r4
 800abda:	4429      	add	r1, r5
 800abdc:	f04f 33ff 	mov.w	r3, #4294967295
 800abe0:	f7ff fe3c 	bl	800a85c <_HandlePID>
 800abe4:	e025      	b.n	800ac32 <HEADER_Callback+0x1a6>
 800abe6:	4620      	mov	r0, r4
 800abe8:	f008 fe88 	bl	80138fc <GUI_ALLOC_LockH>
 800abec:	ab02      	add	r3, sp, #8
 800abee:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800abf0:	f843 0d08 	str.w	r0, [r3, #-8]!
 800abf4:	4668      	mov	r0, sp
 800abf6:	f008 fe8f 	bl	8013918 <GUI_ALLOC_UnlockH>
 800abfa:	4628      	mov	r0, r5
 800abfc:	f000 f8cb 	bl	800ad96 <GUI_ARRAY_GetNumItems>
 800ac00:	2400      	movs	r4, #0
 800ac02:	4607      	mov	r7, r0
 800ac04:	42bc      	cmp	r4, r7
 800ac06:	4628      	mov	r0, r5
 800ac08:	da0c      	bge.n	800ac24 <HEADER_Callback+0x198>
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	f000 f958 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 800ac10:	9001      	str	r0, [sp, #4]
 800ac12:	6880      	ldr	r0, [r0, #8]
 800ac14:	b108      	cbz	r0, 800ac1a <HEADER_Callback+0x18e>
 800ac16:	f008 feab 	bl	8013970 <GUI_ALLOC_Free>
 800ac1a:	a801      	add	r0, sp, #4
 800ac1c:	f008 fe7c 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ac20:	3401      	adds	r4, #1
 800ac22:	e7ef      	b.n	800ac04 <HEADER_Callback+0x178>
 800ac24:	f000 f910 	bl	800ae48 <GUI_ARRAY_Delete>
 800ac28:	f7ff fc9c 	bl	800a564 <_RestoreOldCursor>
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	f003 f86b 	bl	800dd08 <WM_DefaultProc>
 800ac32:	b002      	add	sp, #8
 800ac34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ac38 <HEADER_GetNumItems>:
 800ac38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	b158      	cbz	r0, 800ac56 <HEADER_GetNumItems+0x1e>
 800ac3e:	f008 fe5d 	bl	80138fc <GUI_ALLOC_LockH>
 800ac42:	ac02      	add	r4, sp, #8
 800ac44:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ac48:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800ac4a:	f000 f8a4 	bl	800ad96 <GUI_ARRAY_GetNumItems>
 800ac4e:	4605      	mov	r5, r0
 800ac50:	4620      	mov	r0, r4
 800ac52:	f008 fe61 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ac56:	4628      	mov	r0, r5
 800ac58:	b003      	add	sp, #12
 800ac5a:	bd30      	pop	{r4, r5, pc}

0800ac5c <GUI_ARRAY_ResizeItemLocked>:
 800ac5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac5e:	4607      	mov	r7, r0
 800ac60:	b085      	sub	sp, #20
 800ac62:	4610      	mov	r0, r2
 800ac64:	460d      	mov	r5, r1
 800ac66:	4616      	mov	r6, r2
 800ac68:	f009 f928 	bl	8013ebc <GUI_ALLOC_AllocZero>
 800ac6c:	9003      	str	r0, [sp, #12]
 800ac6e:	b350      	cbz	r0, 800acc6 <GUI_ARRAY_ResizeItemLocked+0x6a>
 800ac70:	4638      	mov	r0, r7
 800ac72:	f008 fe43 	bl	80138fc <GUI_ALLOC_LockH>
 800ac76:	4629      	mov	r1, r5
 800ac78:	9000      	str	r0, [sp, #0]
 800ac7a:	f000 f883 	bl	800ad84 <GUI_ARRAY__GetpItemLocked>
 800ac7e:	ac04      	add	r4, sp, #16
 800ac80:	9001      	str	r0, [sp, #4]
 800ac82:	9803      	ldr	r0, [sp, #12]
 800ac84:	f008 fe3a 	bl	80138fc <GUI_ALLOC_LockH>
 800ac88:	f854 1d0c 	ldr.w	r1, [r4, #-12]!
 800ac8c:	9002      	str	r0, [sp, #8]
 800ac8e:	4632      	mov	r2, r6
 800ac90:	f00f fd9e 	bl	801a7d0 <memcpy>
 800ac94:	4620      	mov	r0, r4
 800ac96:	f008 fe3f 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ac9a:	a802      	add	r0, sp, #8
 800ac9c:	f008 fe3c 	bl	8013918 <GUI_ALLOC_UnlockH>
 800aca0:	9800      	ldr	r0, [sp, #0]
 800aca2:	9a03      	ldr	r2, [sp, #12]
 800aca4:	4629      	mov	r1, r5
 800aca6:	f000 f839 	bl	800ad1c <GUI_ARRAY__SethItem>
 800acaa:	b120      	cbz	r0, 800acb6 <GUI_ARRAY_ResizeItemLocked+0x5a>
 800acac:	a803      	add	r0, sp, #12
 800acae:	f009 f87d 	bl	8013dac <GUI_ALLOC_FreePtr>
 800acb2:	2400      	movs	r4, #0
 800acb4:	e003      	b.n	800acbe <GUI_ARRAY_ResizeItemLocked+0x62>
 800acb6:	9803      	ldr	r0, [sp, #12]
 800acb8:	f008 fe20 	bl	80138fc <GUI_ALLOC_LockH>
 800acbc:	4604      	mov	r4, r0
 800acbe:	4668      	mov	r0, sp
 800acc0:	f008 fe2a 	bl	8013918 <GUI_ALLOC_UnlockH>
 800acc4:	e000      	b.n	800acc8 <GUI_ARRAY_ResizeItemLocked+0x6c>
 800acc6:	4604      	mov	r4, r0
 800acc8:	4620      	mov	r0, r4
 800acca:	b005      	add	sp, #20
 800accc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800acce <GUI_ARRAY_DeleteItem>:
 800acce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acd0:	460c      	mov	r4, r1
 800acd2:	f008 fe13 	bl	80138fc <GUI_ALLOC_LockH>
 800acd6:	8803      	ldrh	r3, [r0, #0]
 800acd8:	9000      	str	r0, [sp, #0]
 800acda:	429c      	cmp	r4, r3
 800acdc:	d219      	bcs.n	800ad12 <GUI_ARRAY_DeleteItem+0x44>
 800acde:	6840      	ldr	r0, [r0, #4]
 800ace0:	b1b8      	cbz	r0, 800ad12 <GUI_ARRAY_DeleteItem+0x44>
 800ace2:	f008 fe0b 	bl	80138fc <GUI_ALLOC_LockH>
 800ace6:	00a5      	lsls	r5, r4, #2
 800ace8:	9001      	str	r0, [sp, #4]
 800acea:	4428      	add	r0, r5
 800acec:	f009 f85e 	bl	8013dac <GUI_ALLOC_FreePtr>
 800acf0:	9b00      	ldr	r3, [sp, #0]
 800acf2:	881a      	ldrh	r2, [r3, #0]
 800acf4:	3a01      	subs	r2, #1
 800acf6:	b292      	uxth	r2, r2
 800acf8:	801a      	strh	r2, [r3, #0]
 800acfa:	9b01      	ldr	r3, [sp, #4]
 800acfc:	442b      	add	r3, r5
 800acfe:	42a2      	cmp	r2, r4
 800ad00:	dd04      	ble.n	800ad0c <GUI_ARRAY_DeleteItem+0x3e>
 800ad02:	6859      	ldr	r1, [r3, #4]
 800ad04:	f843 1b04 	str.w	r1, [r3], #4
 800ad08:	3401      	adds	r4, #1
 800ad0a:	e7f8      	b.n	800acfe <GUI_ARRAY_DeleteItem+0x30>
 800ad0c:	a801      	add	r0, sp, #4
 800ad0e:	f008 fe03 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ad12:	4668      	mov	r0, sp
 800ad14:	f008 fe00 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ad18:	b003      	add	sp, #12
 800ad1a:	bd30      	pop	{r4, r5, pc}

0800ad1c <GUI_ARRAY__SethItem>:
 800ad1c:	8803      	ldrh	r3, [r0, #0]
 800ad1e:	4299      	cmp	r1, r3
 800ad20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad22:	460c      	mov	r4, r1
 800ad24:	4617      	mov	r7, r2
 800ad26:	d212      	bcs.n	800ad4e <GUI_ARRAY__SethItem+0x32>
 800ad28:	6840      	ldr	r0, [r0, #4]
 800ad2a:	b180      	cbz	r0, 800ad4e <GUI_ARRAY__SethItem+0x32>
 800ad2c:	f008 fde6 	bl	80138fc <GUI_ALLOC_LockH>
 800ad30:	ad02      	add	r5, sp, #8
 800ad32:	4606      	mov	r6, r0
 800ad34:	f845 0d04 	str.w	r0, [r5, #-4]!
 800ad38:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800ad3c:	f009 f836 	bl	8013dac <GUI_ALLOC_FreePtr>
 800ad40:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800ad44:	4628      	mov	r0, r5
 800ad46:	f008 fde7 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	e000      	b.n	800ad50 <GUI_ARRAY__SethItem+0x34>
 800ad4e:	2001      	movs	r0, #1
 800ad50:	b003      	add	sp, #12
 800ad52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad54 <GUI_ARRAY__GethItem>:
 800ad54:	8803      	ldrh	r3, [r0, #0]
 800ad56:	4299      	cmp	r1, r3
 800ad58:	b513      	push	{r0, r1, r4, lr}
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	d20e      	bcs.n	800ad7c <GUI_ARRAY__GethItem+0x28>
 800ad5e:	6840      	ldr	r0, [r0, #4]
 800ad60:	b150      	cbz	r0, 800ad78 <GUI_ARRAY__GethItem+0x24>
 800ad62:	f008 fdcb 	bl	80138fc <GUI_ALLOC_LockH>
 800ad66:	ab02      	add	r3, sp, #8
 800ad68:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800ad6c:	f843 0d04 	str.w	r0, [r3, #-4]!
 800ad70:	4618      	mov	r0, r3
 800ad72:	f008 fdd1 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ad76:	e002      	b.n	800ad7e <GUI_ARRAY__GethItem+0x2a>
 800ad78:	4604      	mov	r4, r0
 800ad7a:	e000      	b.n	800ad7e <GUI_ARRAY__GethItem+0x2a>
 800ad7c:	2400      	movs	r4, #0
 800ad7e:	4620      	mov	r0, r4
 800ad80:	b002      	add	sp, #8
 800ad82:	bd10      	pop	{r4, pc}

0800ad84 <GUI_ARRAY__GetpItemLocked>:
 800ad84:	b508      	push	{r3, lr}
 800ad86:	f7ff ffe5 	bl	800ad54 <GUI_ARRAY__GethItem>
 800ad8a:	b118      	cbz	r0, 800ad94 <GUI_ARRAY__GetpItemLocked+0x10>
 800ad8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ad90:	f008 bdb4 	b.w	80138fc <GUI_ALLOC_LockH>
 800ad94:	bd08      	pop	{r3, pc}

0800ad96 <GUI_ARRAY_GetNumItems>:
 800ad96:	b513      	push	{r0, r1, r4, lr}
 800ad98:	4604      	mov	r4, r0
 800ad9a:	b140      	cbz	r0, 800adae <GUI_ARRAY_GetNumItems+0x18>
 800ad9c:	f008 fdae 	bl	80138fc <GUI_ALLOC_LockH>
 800ada0:	ab02      	add	r3, sp, #8
 800ada2:	8804      	ldrh	r4, [r0, #0]
 800ada4:	f843 0d04 	str.w	r0, [r3, #-4]!
 800ada8:	4618      	mov	r0, r3
 800adaa:	f008 fdb5 	bl	8013918 <GUI_ALLOC_UnlockH>
 800adae:	4620      	mov	r0, r4
 800adb0:	b002      	add	sp, #8
 800adb2:	bd10      	pop	{r4, pc}

0800adb4 <GUI_ARRAY_AddItem>:
 800adb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adb8:	4605      	mov	r5, r0
 800adba:	2800      	cmp	r0, #0
 800adbc:	d03d      	beq.n	800ae3a <GUI_ARRAY_AddItem+0x86>
 800adbe:	b14a      	cbz	r2, 800add4 <GUI_ARRAY_AddItem+0x20>
 800adc0:	4608      	mov	r0, r1
 800adc2:	4611      	mov	r1, r2
 800adc4:	f009 f88f 	bl	8013ee6 <GUI_ALLOC_AllocInit>
 800adc8:	f1d0 0401 	rsbs	r4, r0, #1
 800adcc:	4607      	mov	r7, r0
 800adce:	bf38      	it	cc
 800add0:	2400      	movcc	r4, #0
 800add2:	e001      	b.n	800add8 <GUI_ARRAY_AddItem+0x24>
 800add4:	4614      	mov	r4, r2
 800add6:	4617      	mov	r7, r2
 800add8:	4628      	mov	r0, r5
 800adda:	f008 fd8f 	bl	80138fc <GUI_ALLOC_LockH>
 800adde:	ae02      	add	r6, sp, #8
 800ade0:	f8b0 8000 	ldrh.w	r8, [r0]
 800ade4:	f846 0d08 	str.w	r0, [r6, #-8]!
 800ade8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800adec:	4668      	mov	r0, sp
 800adee:	f008 fd93 	bl	8013918 <GUI_ALLOC_UnlockH>
 800adf2:	bb24      	cbnz	r4, 800ae3e <GUI_ARRAY_AddItem+0x8a>
 800adf4:	f108 0101 	add.w	r1, r8, #1
 800adf8:	4648      	mov	r0, r9
 800adfa:	0089      	lsls	r1, r1, #2
 800adfc:	f007 f8e7 	bl	8011fce <GUI_ALLOC_Realloc>
 800ae00:	4681      	mov	r9, r0
 800ae02:	b918      	cbnz	r0, 800ae0c <GUI_ARRAY_AddItem+0x58>
 800ae04:	4638      	mov	r0, r7
 800ae06:	f008 fdb3 	bl	8013970 <GUI_ALLOC_Free>
 800ae0a:	e018      	b.n	800ae3e <GUI_ARRAY_AddItem+0x8a>
 800ae0c:	f008 fd76 	bl	80138fc <GUI_ALLOC_LockH>
 800ae10:	ab02      	add	r3, sp, #8
 800ae12:	f843 0d04 	str.w	r0, [r3, #-4]!
 800ae16:	f840 7028 	str.w	r7, [r0, r8, lsl #2]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f008 fd7c 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ae20:	4628      	mov	r0, r5
 800ae22:	f008 fd6b 	bl	80138fc <GUI_ALLOC_LockH>
 800ae26:	8803      	ldrh	r3, [r0, #0]
 800ae28:	9000      	str	r0, [sp, #0]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	f8c0 9004 	str.w	r9, [r0, #4]
 800ae30:	8003      	strh	r3, [r0, #0]
 800ae32:	4668      	mov	r0, sp
 800ae34:	f008 fd70 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ae38:	e002      	b.n	800ae40 <GUI_ARRAY_AddItem+0x8c>
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	e000      	b.n	800ae40 <GUI_ARRAY_AddItem+0x8c>
 800ae3e:	2401      	movs	r4, #1
 800ae40:	4620      	mov	r0, r4
 800ae42:	b003      	add	sp, #12
 800ae44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ae48 <GUI_ARRAY_Delete>:
 800ae48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae4a:	4605      	mov	r5, r0
 800ae4c:	b318      	cbz	r0, 800ae96 <GUI_ARRAY_Delete+0x4e>
 800ae4e:	f008 fd55 	bl	80138fc <GUI_ALLOC_LockH>
 800ae52:	9000      	str	r0, [sp, #0]
 800ae54:	6840      	ldr	r0, [r0, #4]
 800ae56:	b1c0      	cbz	r0, 800ae8a <GUI_ARRAY_Delete+0x42>
 800ae58:	f008 fd50 	bl	80138fc <GUI_ALLOC_LockH>
 800ae5c:	2400      	movs	r4, #0
 800ae5e:	9001      	str	r0, [sp, #4]
 800ae60:	9b00      	ldr	r3, [sp, #0]
 800ae62:	881b      	ldrh	r3, [r3, #0]
 800ae64:	429c      	cmp	r4, r3
 800ae66:	da06      	bge.n	800ae76 <GUI_ARRAY_Delete+0x2e>
 800ae68:	9801      	ldr	r0, [sp, #4]
 800ae6a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800ae6e:	f008 ff9d 	bl	8013dac <GUI_ALLOC_FreePtr>
 800ae72:	3401      	adds	r4, #1
 800ae74:	e7f4      	b.n	800ae60 <GUI_ARRAY_Delete+0x18>
 800ae76:	a801      	add	r0, sp, #4
 800ae78:	f008 fd4e 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ae7c:	9800      	ldr	r0, [sp, #0]
 800ae7e:	3004      	adds	r0, #4
 800ae80:	f008 ff94 	bl	8013dac <GUI_ALLOC_FreePtr>
 800ae84:	9b00      	ldr	r3, [sp, #0]
 800ae86:	2200      	movs	r2, #0
 800ae88:	801a      	strh	r2, [r3, #0]
 800ae8a:	4668      	mov	r0, sp
 800ae8c:	f008 fd44 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ae90:	4628      	mov	r0, r5
 800ae92:	f008 fd6d 	bl	8013970 <GUI_ALLOC_Free>
 800ae96:	b003      	add	sp, #12
 800ae98:	bd30      	pop	{r4, r5, pc}

0800ae9a <GUI_ARRAY_GethItem>:
 800ae9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae9c:	460e      	mov	r6, r1
 800ae9e:	4605      	mov	r5, r0
 800aea0:	b158      	cbz	r0, 800aeba <GUI_ARRAY_GethItem+0x20>
 800aea2:	f008 fd2b 	bl	80138fc <GUI_ALLOC_LockH>
 800aea6:	ac02      	add	r4, sp, #8
 800aea8:	4631      	mov	r1, r6
 800aeaa:	f844 0d04 	str.w	r0, [r4, #-4]!
 800aeae:	f7ff ff51 	bl	800ad54 <GUI_ARRAY__GethItem>
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f008 fd2f 	bl	8013918 <GUI_ALLOC_UnlockH>
 800aeba:	4628      	mov	r0, r5
 800aebc:	b002      	add	sp, #8
 800aebe:	bd70      	pop	{r4, r5, r6, pc}

0800aec0 <GUI_ARRAY_GetpItemLocked>:
 800aec0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aec2:	460e      	mov	r6, r1
 800aec4:	4605      	mov	r5, r0
 800aec6:	b158      	cbz	r0, 800aee0 <GUI_ARRAY_GetpItemLocked+0x20>
 800aec8:	f008 fd18 	bl	80138fc <GUI_ALLOC_LockH>
 800aecc:	ac02      	add	r4, sp, #8
 800aece:	4631      	mov	r1, r6
 800aed0:	f844 0d04 	str.w	r0, [r4, #-4]!
 800aed4:	f7ff ff56 	bl	800ad84 <GUI_ARRAY__GetpItemLocked>
 800aed8:	4605      	mov	r5, r0
 800aeda:	4620      	mov	r0, r4
 800aedc:	f008 fd1c 	bl	8013918 <GUI_ALLOC_UnlockH>
 800aee0:	4628      	mov	r0, r5
 800aee2:	b002      	add	sp, #8
 800aee4:	bd70      	pop	{r4, r5, r6, pc}

0800aee6 <GUI_ARRAY_Create>:
 800aee6:	2008      	movs	r0, #8
 800aee8:	f008 bfe8 	b.w	8013ebc <GUI_ALLOC_AllocZero>

0800aeec <_OnPaint>:
 800aeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef0:	ed2d 8b02 	vpush	{d8}
 800aef4:	b085      	sub	sp, #20
 800aef6:	460d      	mov	r5, r1
 800aef8:	f008 fd00 	bl	80138fc <GUI_ALLOC_LockH>
 800aefc:	9000      	str	r0, [sp, #0]
 800aefe:	6900      	ldr	r0, [r0, #16]
 800af00:	f006 ffb8 	bl	8011e74 <GUI_SetFont>
 800af04:	9b00      	ldr	r3, [sp, #0]
 800af06:	68d8      	ldr	r0, [r3, #12]
 800af08:	f006 ffe2 	bl	8011ed0 <GUI_SetColor>
 800af0c:	2002      	movs	r0, #2
 800af0e:	f006 ff95 	bl	8011e3c <GUI_SetTextMode>
 800af12:	9c00      	ldr	r4, [sp, #0]
 800af14:	8ca6      	ldrh	r6, [r4, #36]	; 0x24
 800af16:	69e3      	ldr	r3, [r4, #28]
 800af18:	f016 0601 	ands.w	r6, r6, #1
 800af1c:	d01a      	beq.n	800af54 <_OnPaint+0x68>
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d077      	beq.n	800b012 <_OnPaint+0x126>
 800af22:	68a0      	ldr	r0, [r4, #8]
 800af24:	f008 fcea 	bl	80138fc <GUI_ALLOC_LockH>
 800af28:	9001      	str	r0, [sp, #4]
 800af2a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800af2c:	6963      	ldr	r3, [r4, #20]
 800af2e:	6817      	ldr	r7, [r2, #0]
 800af30:	441f      	add	r7, r3
 800af32:	f001 fcb7 	bl	800c8a4 <WM_GetOrgX>
 800af36:	69a3      	ldr	r3, [r4, #24]
 800af38:	4438      	add	r0, r7
 800af3a:	b133      	cbz	r3, 800af4a <_OnPaint+0x5e>
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d170      	bne.n	800b022 <_OnPaint+0x136>
 800af40:	f9b5 3000 	ldrsh.w	r3, [r5]
 800af44:	4283      	cmp	r3, r0
 800af46:	dd6c      	ble.n	800b022 <_OnPaint+0x136>
 800af48:	e01c      	b.n	800af84 <_OnPaint+0x98>
 800af4a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800af4e:	4283      	cmp	r3, r0
 800af50:	db18      	blt.n	800af84 <_OnPaint+0x98>
 800af52:	e066      	b.n	800b022 <_OnPaint+0x136>
 800af54:	2b00      	cmp	r3, #0
 800af56:	d05c      	beq.n	800b012 <_OnPaint+0x126>
 800af58:	68a0      	ldr	r0, [r4, #8]
 800af5a:	f008 fccf 	bl	80138fc <GUI_ALLOC_LockH>
 800af5e:	9001      	str	r0, [sp, #4]
 800af60:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800af62:	f8d3 8000 	ldr.w	r8, [r3]
 800af66:	f007 f97d 	bl	8012264 <GUI_GetFontSizeY>
 800af6a:	6963      	ldr	r3, [r4, #20]
 800af6c:	4607      	mov	r7, r0
 800af6e:	ebc8 0903 	rsb	r9, r8, r3
 800af72:	f001 fc9f 	bl	800c8b4 <WM_GetOrgY>
 800af76:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 800af7a:	88ea      	ldrh	r2, [r5, #6]
 800af7c:	4448      	add	r0, r9
 800af7e:	4407      	add	r7, r0
 800af80:	428f      	cmp	r7, r1
 800af82:	da03      	bge.n	800af8c <_OnPaint+0xa0>
 800af84:	a801      	add	r0, sp, #4
 800af86:	f008 fcc7 	bl	8013918 <GUI_ALLOC_UnlockH>
 800af8a:	e042      	b.n	800b012 <_OnPaint+0x126>
 800af8c:	b212      	sxth	r2, r2
 800af8e:	4290      	cmp	r0, r2
 800af90:	dcf8      	bgt.n	800af84 <_OnPaint+0x98>
 800af92:	68a0      	ldr	r0, [r4, #8]
 800af94:	a902      	add	r1, sp, #8
 800af96:	f001 fc95 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 800af9a:	9b01      	ldr	r3, [sp, #4]
 800af9c:	f9bd b00c 	ldrsh.w	fp, [sp, #12]
 800afa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800afa2:	f8d3 a054 	ldr.w	sl, [r3, #84]	; 0x54
 800afa6:	f9bd 7008 	ldrsh.w	r7, [sp, #8]
 800afaa:	6a25      	ldr	r5, [r4, #32]
 800afac:	ebc2 0b0b 	rsb	fp, r2, fp
 800afb0:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 800afb4:	07d2      	lsls	r2, r2, #31
 800afb6:	4457      	add	r7, sl
 800afb8:	bf58      	it	pl
 800afba:	f8d3 608c 	ldrpl.w	r6, [r3, #140]	; 0x8c
 800afbe:	443d      	add	r5, r7
 800afc0:	4435      	add	r5, r6
 800afc2:	42bd      	cmp	r5, r7
 800afc4:	dd22      	ble.n	800b00c <_OnPaint+0x120>
 800afc6:	69e3      	ldr	r3, [r4, #28]
 800afc8:	1aed      	subs	r5, r5, r3
 800afca:	e7fa      	b.n	800afc2 <_OnPaint+0xd6>
 800afcc:	42bd      	cmp	r5, r7
 800afce:	dd1b      	ble.n	800b008 <_OnPaint+0x11c>
 800afd0:	69a0      	ldr	r0, [r4, #24]
 800afd2:	f006 ff3d 	bl	8011e50 <GUI_SetTextAlign>
 800afd6:	6a23      	ldr	r3, [r4, #32]
 800afd8:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800afdc:	1aeb      	subs	r3, r5, r3
 800afde:	ebca 0303 	rsb	r3, sl, r3
 800afe2:	ebc8 0303 	rsb	r3, r8, r3
 800afe6:	1b9b      	subs	r3, r3, r6
 800afe8:	ee08 3a10 	vmov	s16, r3
 800afec:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800aff0:	4628      	mov	r0, r5
 800aff2:	ee28 8a27 	vmul.f32	s16, s16, s15
 800aff6:	4649      	mov	r1, r9
 800aff8:	f007 f90c 	bl	8012214 <GUI_GotoXY>
 800affc:	eeb0 0a48 	vmov.f32	s0, s16
 800b000:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800b004:	f006 f976 	bl	80112f4 <GUI_DispFloatMin>
 800b008:	69e3      	ldr	r3, [r4, #28]
 800b00a:	441d      	add	r5, r3
 800b00c:	455d      	cmp	r5, fp
 800b00e:	dddd      	ble.n	800afcc <_OnPaint+0xe0>
 800b010:	e7b8      	b.n	800af84 <_OnPaint+0x98>
 800b012:	4668      	mov	r0, sp
 800b014:	f008 fc80 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b018:	b005      	add	sp, #20
 800b01a:	ecbd 8b02 	vpop	{d8}
 800b01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b022:	68a0      	ldr	r0, [r4, #8]
 800b024:	a902      	add	r1, sp, #8
 800b026:	f001 fc4d 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 800b02a:	9b01      	ldr	r3, [sp, #4]
 800b02c:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800b02e:	f8d3 8058 	ldr.w	r8, [r3, #88]	; 0x58
 800b032:	f007 f917 	bl	8012264 <GUI_GetFontSizeY>
 800b036:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800b03a:	9b01      	ldr	r3, [sp, #4]
 800b03c:	f8bd a00a 	ldrh.w	sl, [sp, #10]
 800b040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b044:	1b76      	subs	r6, r6, r5
 800b046:	6a25      	ldr	r5, [r4, #32]
 800b048:	1b75      	subs	r5, r6, r5
 800b04a:	441d      	add	r5, r3
 800b04c:	42b5      	cmp	r5, r6
 800b04e:	da01      	bge.n	800b054 <_OnPaint+0x168>
 800b050:	69e3      	ldr	r3, [r4, #28]
 800b052:	e7fa      	b.n	800b04a <_OnPaint+0x15e>
 800b054:	f04f 0902 	mov.w	r9, #2
 800b058:	fb90 f9f9 	sdiv	r9, r0, r9
 800b05c:	fa08 f38a 	sxtah	r3, r8, sl
 800b060:	429d      	cmp	r5, r3
 800b062:	db8f      	blt.n	800af84 <_OnPaint+0x98>
 800b064:	42b5      	cmp	r5, r6
 800b066:	dc1c      	bgt.n	800b0a2 <_OnPaint+0x1b6>
 800b068:	69a0      	ldr	r0, [r4, #24]
 800b06a:	f006 fef1 	bl	8011e50 <GUI_SetTextAlign>
 800b06e:	6a23      	ldr	r3, [r4, #32]
 800b070:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800b074:	1b71      	subs	r1, r6, r5
 800b076:	1ac9      	subs	r1, r1, r3
 800b078:	9b01      	ldr	r3, [sp, #4]
 800b07a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b07e:	188a      	adds	r2, r1, r2
 800b080:	ee08 2a10 	vmov	s16, r2
 800b084:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800b088:	4638      	mov	r0, r7
 800b08a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b08e:	ebc9 0105 	rsb	r1, r9, r5
 800b092:	f007 f8bf 	bl	8012214 <GUI_GotoXY>
 800b096:	eeb0 0a48 	vmov.f32	s0, s16
 800b09a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800b09e:	f006 f929 	bl	80112f4 <GUI_DispFloatMin>
 800b0a2:	69e3      	ldr	r3, [r4, #28]
 800b0a4:	1aed      	subs	r5, r5, r3
 800b0a6:	e7d9      	b.n	800b05c <_OnPaint+0x170>

0800b0a8 <GRAPH_SCALE_Create>:
 800b0a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ac:	4681      	mov	r9, r0
 800b0ae:	2030      	movs	r0, #48	; 0x30
 800b0b0:	4688      	mov	r8, r1
 800b0b2:	4617      	mov	r7, r2
 800b0b4:	461e      	mov	r6, r3
 800b0b6:	f008 ff01 	bl	8013ebc <GUI_ALLOC_AllocZero>
 800b0ba:	4682      	mov	sl, r0
 800b0bc:	b1d0      	cbz	r0, 800b0f4 <GRAPH_SCALE_Create+0x4c>
 800b0be:	f008 fc1d 	bl	80138fc <GUI_ALLOC_LockH>
 800b0c2:	ad02      	add	r5, sp, #8
 800b0c4:	4a0d      	ldr	r2, [pc, #52]	; (800b0fc <GRAPH_SCALE_Create+0x54>)
 800b0c6:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b0ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b0ce:	6283      	str	r3, [r0, #40]	; 0x28
 800b0d0:	f8c0 9014 	str.w	r9, [r0, #20]
 800b0d4:	f8c0 8018 	str.w	r8, [r0, #24]
 800b0d8:	8487      	strh	r7, [r0, #36]	; 0x24
 800b0da:	61c6      	str	r6, [r0, #28]
 800b0dc:	f100 030c 	add.w	r3, r0, #12
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b0e6:	e883 0003 	stmia.w	r3, {r0, r1}
 800b0ea:	4b05      	ldr	r3, [pc, #20]	; (800b100 <GRAPH_SCALE_Create+0x58>)
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	f008 fc12 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b0f4:	4650      	mov	r0, sl
 800b0f6:	b002      	add	sp, #8
 800b0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0fc:	20000078 	.word	0x20000078
 800b100:	0800aeed 	.word	0x0800aeed

0800b104 <GRAPH_SCALE_SetOff>:
 800b104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b106:	460d      	mov	r5, r1
 800b108:	4604      	mov	r4, r0
 800b10a:	b160      	cbz	r0, 800b126 <GRAPH_SCALE_SetOff+0x22>
 800b10c:	f008 fbf6 	bl	80138fc <GUI_ALLOC_LockH>
 800b110:	6a04      	ldr	r4, [r0, #32]
 800b112:	9001      	str	r0, [sp, #4]
 800b114:	42ac      	cmp	r4, r5
 800b116:	d003      	beq.n	800b120 <GRAPH_SCALE_SetOff+0x1c>
 800b118:	6205      	str	r5, [r0, #32]
 800b11a:	6880      	ldr	r0, [r0, #8]
 800b11c:	f002 f9c3 	bl	800d4a6 <WM_InvalidateWindow>
 800b120:	a801      	add	r0, sp, #4
 800b122:	f008 fbf9 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b126:	4620      	mov	r0, r4
 800b128:	b003      	add	sp, #12
 800b12a:	bd30      	pop	{r4, r5, pc}

0800b12c <GRAPH_SCALE_SetTextColor>:
 800b12c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b12e:	460d      	mov	r5, r1
 800b130:	4604      	mov	r4, r0
 800b132:	b160      	cbz	r0, 800b14e <GRAPH_SCALE_SetTextColor+0x22>
 800b134:	f008 fbe2 	bl	80138fc <GUI_ALLOC_LockH>
 800b138:	68c4      	ldr	r4, [r0, #12]
 800b13a:	9001      	str	r0, [sp, #4]
 800b13c:	42ac      	cmp	r4, r5
 800b13e:	d003      	beq.n	800b148 <GRAPH_SCALE_SetTextColor+0x1c>
 800b140:	60c5      	str	r5, [r0, #12]
 800b142:	6880      	ldr	r0, [r0, #8]
 800b144:	f002 f9af 	bl	800d4a6 <WM_InvalidateWindow>
 800b148:	a801      	add	r0, sp, #4
 800b14a:	f008 fbe5 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b14e:	4620      	mov	r0, r4
 800b150:	b003      	add	sp, #12
 800b152:	bd30      	pop	{r4, r5, pc}

0800b154 <GRAPH_SCALE_SetFactor>:
 800b154:	b500      	push	{lr}
 800b156:	ed2d 8b02 	vpush	{d8}
 800b15a:	eef0 8a40 	vmov.f32	s17, s0
 800b15e:	b083      	sub	sp, #12
 800b160:	b190      	cbz	r0, 800b188 <GRAPH_SCALE_SetFactor+0x34>
 800b162:	f008 fbcb 	bl	80138fc <GUI_ALLOC_LockH>
 800b166:	ed90 8a0a 	vldr	s16, [r0, #40]	; 0x28
 800b16a:	9001      	str	r0, [sp, #4]
 800b16c:	eeb4 8a68 	vcmp.f32	s16, s17
 800b170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b174:	d004      	beq.n	800b180 <GRAPH_SCALE_SetFactor+0x2c>
 800b176:	edc0 8a0a 	vstr	s17, [r0, #40]	; 0x28
 800b17a:	6880      	ldr	r0, [r0, #8]
 800b17c:	f002 f993 	bl	800d4a6 <WM_InvalidateWindow>
 800b180:	a801      	add	r0, sp, #4
 800b182:	f008 fbc9 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b186:	e001      	b.n	800b18c <GRAPH_SCALE_SetFactor+0x38>
 800b188:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800b19c <GRAPH_SCALE_SetFactor+0x48>
 800b18c:	eeb0 0a48 	vmov.f32	s0, s16
 800b190:	b003      	add	sp, #12
 800b192:	ecbd 8b02 	vpop	{d8}
 800b196:	f85d fb04 	ldr.w	pc, [sp], #4
 800b19a:	bf00      	nop
 800b19c:	00000000 	.word	0x00000000

0800b1a0 <GRAPH_SCALE_SetNumDecs>:
 800b1a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1a2:	460d      	mov	r5, r1
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	b160      	cbz	r0, 800b1c2 <GRAPH_SCALE_SetNumDecs+0x22>
 800b1a8:	f008 fba8 	bl	80138fc <GUI_ALLOC_LockH>
 800b1ac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800b1ae:	9001      	str	r0, [sp, #4]
 800b1b0:	42ac      	cmp	r4, r5
 800b1b2:	d003      	beq.n	800b1bc <GRAPH_SCALE_SetNumDecs+0x1c>
 800b1b4:	62c5      	str	r5, [r0, #44]	; 0x2c
 800b1b6:	6880      	ldr	r0, [r0, #8]
 800b1b8:	f002 f975 	bl	800d4a6 <WM_InvalidateWindow>
 800b1bc:	a801      	add	r0, sp, #4
 800b1be:	f008 fbab 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	b003      	add	sp, #12
 800b1c6:	bd30      	pop	{r4, r5, pc}

0800b1c8 <_OnDelete>:
 800b1c8:	b513      	push	{r0, r1, r4, lr}
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	f008 fb96 	bl	80138fc <GUI_ALLOC_LockH>
 800b1d0:	9001      	str	r0, [sp, #4]
 800b1d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b1d4:	b120      	cbz	r0, 800b1e0 <_OnDelete+0x18>
 800b1d6:	f008 fbcb 	bl	8013970 <GUI_ALLOC_Free>
 800b1da:	9b01      	ldr	r3, [sp, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	625a      	str	r2, [r3, #36]	; 0x24
 800b1e0:	a801      	add	r0, sp, #4
 800b1e2:	f008 fb99 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f008 fbc2 	bl	8013970 <GUI_ALLOC_Free>
 800b1ec:	b002      	add	sp, #8
 800b1ee:	bd10      	pop	{r4, pc}

0800b1f0 <_OnPaint>:
 800b1f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1f4:	b08b      	sub	sp, #44	; 0x2c
 800b1f6:	f008 fb81 	bl	80138fc <GUI_ALLOC_LockH>
 800b1fa:	9007      	str	r0, [sp, #28]
 800b1fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d060      	beq.n	800b2c4 <_OnPaint+0xd4>
 800b202:	f008 fb7b 	bl	80138fc <GUI_ALLOC_LockH>
 800b206:	9b07      	ldr	r3, [sp, #28]
 800b208:	9005      	str	r0, [sp, #20]
 800b20a:	4606      	mov	r6, r0
 800b20c:	6898      	ldr	r0, [r3, #8]
 800b20e:	f008 fb75 	bl	80138fc <GUI_ALLOC_LockH>
 800b212:	9b07      	ldr	r3, [sp, #28]
 800b214:	f8d0 8054 	ldr.w	r8, [r0, #84]	; 0x54
 800b218:	6e05      	ldr	r5, [r0, #96]	; 0x60
 800b21a:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800b21c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800b21e:	9006      	str	r0, [sp, #24]
 800b220:	a908      	add	r1, sp, #32
 800b222:	6898      	ldr	r0, [r3, #8]
 800b224:	f001 fb4e 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 800b228:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800b22c:	9a07      	ldr	r2, [sp, #28]
 800b22e:	9806      	ldr	r0, [sp, #24]
 800b230:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 800b234:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800b238:	441f      	add	r7, r3
 800b23a:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800b23e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b242:	f8bd 7026 	ldrh.w	r7, [sp, #38]	; 0x26
 800b246:	1b1c      	subs	r4, r3, r4
 800b248:	1b7f      	subs	r7, r7, r5
 800b24a:	6913      	ldr	r3, [r2, #16]
 800b24c:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
 800b250:	1b5d      	subs	r5, r3, r5
 800b252:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800b256:	4441      	add	r1, r8
 800b258:	b289      	uxth	r1, r1
 800b25a:	b2a4      	uxth	r4, r4
 800b25c:	b2bf      	uxth	r7, r7
 800b25e:	2b01      	cmp	r3, #1
 800b260:	f8ad 1020 	strh.w	r1, [sp, #32]
 800b264:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 800b268:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 800b26c:	f8d0 8080 	ldr.w	r8, [r0, #128]	; 0x80
 800b270:	b209      	sxth	r1, r1
 800b272:	d008      	beq.n	800b286 <_OnPaint+0x96>
 800b274:	b224      	sxth	r4, r4
 800b276:	1b64      	subs	r4, r4, r5
 800b278:	3401      	adds	r4, #1
 800b27a:	42a1      	cmp	r1, r4
 800b27c:	dd04      	ble.n	800b288 <_OnPaint+0x98>
 800b27e:	1b0c      	subs	r4, r1, r4
 800b280:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 800b284:	1b2d      	subs	r5, r5, r4
 800b286:	460c      	mov	r4, r1
 800b288:	2d00      	cmp	r5, #0
 800b28a:	dd15      	ble.n	800b2b8 <_OnPaint+0xc8>
 800b28c:	6990      	ldr	r0, [r2, #24]
 800b28e:	f006 fe1f 	bl	8011ed0 <GUI_SetColor>
 800b292:	f04f 32ff 	mov.w	r2, #4294967295
 800b296:	2301      	movs	r3, #1
 800b298:	e88d 000c 	stmia.w	sp, {r2, r3}
 800b29c:	9a07      	ldr	r2, [sp, #28]
 800b29e:	b23f      	sxth	r7, r7
 800b2a0:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 800b2a4:	9302      	str	r3, [sp, #8]
 800b2a6:	ebc9 0907 	rsb	r9, r9, r7
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	4629      	mov	r1, r5
 800b2ae:	4622      	mov	r2, r4
 800b2b0:	eb09 0308 	add.w	r3, r9, r8
 800b2b4:	f007 faba 	bl	801282c <GUI_DrawGraphEx>
 800b2b8:	a806      	add	r0, sp, #24
 800b2ba:	f008 fb2d 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b2be:	a805      	add	r0, sp, #20
 800b2c0:	f008 fb2a 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b2c4:	a807      	add	r0, sp, #28
 800b2c6:	f008 fb27 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b2ca:	b00b      	add	sp, #44	; 0x2c
 800b2cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b2d0 <_InvalidateNewItem>:
 800b2d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2d2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	4604      	mov	r4, r0
 800b2da:	6880      	ldr	r0, [r0, #8]
 800b2dc:	d127      	bne.n	800b32e <_InvalidateNewItem+0x5e>
 800b2de:	a902      	add	r1, sp, #8
 800b2e0:	f001 faf0 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 800b2e4:	68a0      	ldr	r0, [r4, #8]
 800b2e6:	f008 fb09 	bl	80138fc <GUI_ALLOC_LockH>
 800b2ea:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800b2ee:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800b2f0:	9001      	str	r0, [sp, #4]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	f8ad 300a 	strh.w	r3, [sp, #10]
 800b2f8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800b2fc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b304:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800b306:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800b30a:	4413      	add	r3, r2
 800b30c:	6922      	ldr	r2, [r4, #16]
 800b30e:	4413      	add	r3, r2
 800b310:	b29b      	uxth	r3, r3
 800b312:	1e9a      	subs	r2, r3, #2
 800b314:	a801      	add	r0, sp, #4
 800b316:	3b01      	subs	r3, #1
 800b318:	f8ad 2008 	strh.w	r2, [sp, #8]
 800b31c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b320:	f008 fafa 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b324:	68a0      	ldr	r0, [r4, #8]
 800b326:	a902      	add	r1, sp, #8
 800b328:	f002 f881 	bl	800d42e <WM_InvalidateRect>
 800b32c:	e001      	b.n	800b332 <_InvalidateNewItem+0x62>
 800b32e:	f000 fb6a 	bl	800ba06 <GRAPH__InvalidateGraph>
 800b332:	b004      	add	sp, #16
 800b334:	bd10      	pop	{r4, pc}
	...

0800b338 <GRAPH_DATA_YT_Create>:
 800b338:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b33c:	4680      	mov	r8, r0
 800b33e:	202c      	movs	r0, #44	; 0x2c
 800b340:	460e      	mov	r6, r1
 800b342:	4617      	mov	r7, r2
 800b344:	461d      	mov	r5, r3
 800b346:	f008 fdb9 	bl	8013ebc <GUI_ALLOC_AllocZero>
 800b34a:	4604      	mov	r4, r0
 800b34c:	b318      	cbz	r0, 800b396 <GRAPH_DATA_YT_Create+0x5e>
 800b34e:	0070      	lsls	r0, r6, #1
 800b350:	f008 fdb4 	bl	8013ebc <GUI_ALLOC_AllocZero>
 800b354:	4681      	mov	r9, r0
 800b356:	b158      	cbz	r0, 800b370 <GRAPH_DATA_YT_Create+0x38>
 800b358:	b157      	cbz	r7, 800b370 <GRAPH_DATA_YT_Create+0x38>
 800b35a:	b14d      	cbz	r5, 800b370 <GRAPH_DATA_YT_Create+0x38>
 800b35c:	f008 face 	bl	80138fc <GUI_ALLOC_LockH>
 800b360:	4639      	mov	r1, r7
 800b362:	006a      	lsls	r2, r5, #1
 800b364:	9001      	str	r0, [sp, #4]
 800b366:	f00f fa33 	bl	801a7d0 <memcpy>
 800b36a:	a801      	add	r0, sp, #4
 800b36c:	f008 fad4 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b370:	4620      	mov	r0, r4
 800b372:	f008 fac3 	bl	80138fc <GUI_ALLOC_LockH>
 800b376:	4b0a      	ldr	r3, [pc, #40]	; (800b3a0 <GRAPH_DATA_YT_Create+0x68>)
 800b378:	9001      	str	r0, [sp, #4]
 800b37a:	60c3      	str	r3, [r0, #12]
 800b37c:	4b09      	ldr	r3, [pc, #36]	; (800b3a4 <GRAPH_DATA_YT_Create+0x6c>)
 800b37e:	6003      	str	r3, [r0, #0]
 800b380:	4b09      	ldr	r3, [pc, #36]	; (800b3a8 <GRAPH_DATA_YT_Create+0x70>)
 800b382:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
 800b386:	f8c0 8018 	str.w	r8, [r0, #24]
 800b38a:	6146      	str	r6, [r0, #20]
 800b38c:	6105      	str	r5, [r0, #16]
 800b38e:	6043      	str	r3, [r0, #4]
 800b390:	a801      	add	r0, sp, #4
 800b392:	f008 fac1 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b396:	4620      	mov	r0, r4
 800b398:	b003      	add	sp, #12
 800b39a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b39e:	bf00      	nop
 800b3a0:	0800b2d1 	.word	0x0800b2d1
 800b3a4:	0800b1f1 	.word	0x0800b1f1
 800b3a8:	0800b1c9 	.word	0x0800b1c9

0800b3ac <GRAPH_DATA_YT_AddValue>:
 800b3ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3ae:	f8ad 1006 	strh.w	r1, [sp, #6]
 800b3b2:	f008 faa3 	bl	80138fc <GUI_ALLOC_LockH>
 800b3b6:	9002      	str	r0, [sp, #8]
 800b3b8:	b168      	cbz	r0, 800b3d6 <GRAPH_DATA_YT_AddValue+0x2a>
 800b3ba:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b3bc:	f008 fa9e 	bl	80138fc <GUI_ALLOC_LockH>
 800b3c0:	f10d 0206 	add.w	r2, sp, #6
 800b3c4:	4601      	mov	r1, r0
 800b3c6:	9003      	str	r0, [sp, #12]
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	9802      	ldr	r0, [sp, #8]
 800b3cc:	f000 fb4a 	bl	800ba64 <GRAPH__AddValue>
 800b3d0:	a803      	add	r0, sp, #12
 800b3d2:	f008 faa1 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b3d6:	a802      	add	r0, sp, #8
 800b3d8:	f008 fa9e 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b3dc:	b005      	add	sp, #20
 800b3de:	f85d fb04 	ldr.w	pc, [sp], #4

0800b3e2 <GRAPH_CreateIndirect>:
 800b3e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3e4:	b087      	sub	sp, #28
 800b3e6:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800b3ea:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800b3ee:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 800b3f2:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 800b3f6:	9100      	str	r1, [sp, #0]
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	9101      	str	r1, [sp, #4]
 800b3fc:	8a41      	ldrh	r1, [r0, #18]
 800b3fe:	9102      	str	r1, [sp, #8]
 800b400:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800b404:	9103      	str	r1, [sp, #12]
 800b406:	6984      	ldr	r4, [r0, #24]
 800b408:	9404      	str	r4, [sp, #16]
 800b40a:	eb0e 0002 	add.w	r0, lr, r2
 800b40e:	18f9      	adds	r1, r7, r3
 800b410:	4632      	mov	r2, r6
 800b412:	462b      	mov	r3, r5
 800b414:	f000 fb54 	bl	800bac0 <GRAPH_CreateUser>
 800b418:	b007      	add	sp, #28
 800b41a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b41c <_ManageScrollbars>:
 800b41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b41e:	b08b      	sub	sp, #44	; 0x2c
 800b420:	a902      	add	r1, sp, #8
 800b422:	4604      	mov	r4, r0
 800b424:	f001 fa4e 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 800b428:	4620      	mov	r0, r4
 800b42a:	f008 fa67 	bl	80138fc <GUI_ALLOC_LockH>
 800b42e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800b432:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800b436:	9001      	str	r0, [sp, #4]
 800b438:	1ab6      	subs	r6, r6, r2
 800b43a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800b43c:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800b43e:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
 800b440:	1ab6      	subs	r6, r6, r2
 800b442:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800b444:	1ab6      	subs	r6, r6, r2
 800b446:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
 800b44a:	0751      	lsls	r1, r2, #29
 800b44c:	d407      	bmi.n	800b45e <_ManageScrollbars+0x42>
 800b44e:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800b450:	42b1      	cmp	r1, r6
 800b452:	4620      	mov	r0, r4
 800b454:	bfd4      	ite	le
 800b456:	2100      	movle	r1, #0
 800b458:	2101      	movgt	r1, #1
 800b45a:	f000 ff4f 	bl	800c2fc <WM_SetScrollbarV>
 800b45e:	9b01      	ldr	r3, [sp, #4]
 800b460:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800b464:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b466:	67da      	str	r2, [r3, #124]	; 0x7c
 800b468:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800b46c:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
 800b470:	1a8a      	subs	r2, r1, r2
 800b472:	1b55      	subs	r5, r2, r5
 800b474:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 800b478:	0792      	lsls	r2, r2, #30
 800b47a:	ebc7 0505 	rsb	r5, r7, r5
 800b47e:	d407      	bmi.n	800b490 <_ManageScrollbars+0x74>
 800b480:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b482:	42a9      	cmp	r1, r5
 800b484:	4620      	mov	r0, r4
 800b486:	bfd4      	ite	le
 800b488:	2100      	movle	r1, #0
 800b48a:	2101      	movgt	r1, #1
 800b48c:	f000 ff34 	bl	800c2f8 <WM_SetScrollbarH>
 800b490:	9801      	ldr	r0, [sp, #4]
 800b492:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800b494:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800b498:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
 800b49c:	307c      	adds	r0, #124	; 0x7c
 800b49e:	f001 faf7 	bl	800ca90 <WM_CheckScrollBounds>
 800b4a2:	9801      	ldr	r0, [sp, #4]
 800b4a4:	3088      	adds	r0, #136	; 0x88
 800b4a6:	f001 faf3 	bl	800ca90 <WM_CheckScrollBounds>
 800b4aa:	9b01      	ldr	r3, [sp, #4]
 800b4ac:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800b4b0:	ca07      	ldmia	r2, {r0, r1, r2}
 800b4b2:	3388      	adds	r3, #136	; 0x88
 800b4b4:	ae07      	add	r6, sp, #28
 800b4b6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800b4ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b4be:	ad04      	add	r5, sp, #16
 800b4c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800b4c4:	a801      	add	r0, sp, #4
 800b4c6:	f008 fa27 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	4631      	mov	r1, r6
 800b4ce:	462a      	mov	r2, r5
 800b4d0:	f7fd fcce 	bl	8008e70 <WIDGET__SetScrollState>
 800b4d4:	b00b      	add	sp, #44	; 0x2c
 800b4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4d8 <_OnScrollValueChanged>:
 800b4d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4da:	460c      	mov	r4, r1
 800b4dc:	4606      	mov	r6, r0
 800b4de:	f008 fa0d 	bl	80138fc <GUI_ALLOC_LockH>
 800b4e2:	9001      	str	r0, [sp, #4]
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f008 fe3f 	bl	8014168 <SCROLLBAR_GetValue>
 800b4ea:	4605      	mov	r5, r0
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f001 fa49 	bl	800c984 <WM_GetId>
 800b4f2:	9b01      	ldr	r3, [sp, #4]
 800b4f4:	28fe      	cmp	r0, #254	; 0xfe
 800b4f6:	bf0c      	ite	eq
 800b4f8:	f8c3 5080 	streq.w	r5, [r3, #128]	; 0x80
 800b4fc:	f8c3 508c 	strne.w	r5, [r3, #140]	; 0x8c
 800b500:	4630      	mov	r0, r6
 800b502:	f001 ffd0 	bl	800d4a6 <WM_InvalidateWindow>
 800b506:	a801      	add	r0, sp, #4
 800b508:	f008 fa06 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b50c:	b002      	add	sp, #8
 800b50e:	bd70      	pop	{r4, r5, r6, pc}

0800b510 <GRAPH_Callback>:
 800b510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	6844      	ldr	r4, [r0, #4]
 800b516:	6806      	ldr	r6, [r0, #0]
 800b518:	4605      	mov	r5, r0
 800b51a:	b097      	sub	sp, #92	; 0x5c
 800b51c:	4620      	mov	r0, r4
 800b51e:	4629      	mov	r1, r5
 800b520:	f7fd fc08 	bl	8008d34 <WIDGET_HandleActive>
 800b524:	f5b6 7f40 	cmp.w	r6, #768	; 0x300
 800b528:	4607      	mov	r7, r0
 800b52a:	d102      	bne.n	800b532 <GRAPH_Callback+0x22>
 800b52c:	4620      	mov	r0, r4
 800b52e:	f7ff ff75 	bl	800b41c <_ManageScrollbars>
 800b532:	2f00      	cmp	r7, #0
 800b534:	f000 8264 	beq.w	800ba00 <GRAPH_Callback+0x4f0>
 800b538:	682b      	ldr	r3, [r5, #0]
 800b53a:	2b0b      	cmp	r3, #11
 800b53c:	f000 8200 	beq.w	800b940 <GRAPH_Callback+0x430>
 800b540:	dc06      	bgt.n	800b550 <GRAPH_Callback+0x40>
 800b542:	2b05      	cmp	r3, #5
 800b544:	f040 8259 	bne.w	800b9fa <GRAPH_Callback+0x4ea>
 800b548:	4620      	mov	r0, r4
 800b54a:	f7ff ff67 	bl	800b41c <_ManageScrollbars>
 800b54e:	e254      	b.n	800b9fa <GRAPH_Callback+0x4ea>
 800b550:	2b0f      	cmp	r3, #15
 800b552:	d003      	beq.n	800b55c <GRAPH_Callback+0x4c>
 800b554:	2b26      	cmp	r3, #38	; 0x26
 800b556:	f000 823d 	beq.w	800b9d4 <GRAPH_Callback+0x4c4>
 800b55a:	e24e      	b.n	800b9fa <GRAPH_Callback+0x4ea>
 800b55c:	68ed      	ldr	r5, [r5, #12]
 800b55e:	9502      	str	r5, [sp, #8]
 800b560:	4620      	mov	r0, r4
 800b562:	f008 f9cb 	bl	80138fc <GUI_ALLOC_LockH>
 800b566:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b568:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f8d0 9054 	ldr.w	r9, [r0, #84]	; 0x54
 800b570:	f8d0 b058 	ldr.w	fp, [r0, #88]	; 0x58
 800b574:	f8d0 a060 	ldr.w	sl, [r0, #96]	; 0x60
 800b578:	900d      	str	r0, [sp, #52]	; 0x34
 800b57a:	ad0e      	add	r5, sp, #56	; 0x38
 800b57c:	4628      	mov	r0, r5
 800b57e:	9303      	str	r3, [sp, #12]
 800b580:	9101      	str	r1, [sp, #4]
 800b582:	f001 fa77 	bl	800ca74 <WM_GetClientRect>
 800b586:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b588:	4629      	mov	r1, r5
 800b58a:	f7fd fca2 	bl	8008ed2 <WIDGET__EFFECT_DrawDownRect>
 800b58e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b592:	ab12      	add	r3, sp, #72	; 0x48
 800b594:	e883 0003 	stmia.w	r3, {r0, r1}
 800b598:	9803      	ldr	r0, [sp, #12]
 800b59a:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 800b59e:	b282      	uxth	r2, r0
 800b5a0:	4459      	add	r1, fp
 800b5a2:	f8bd 004e 	ldrh.w	r0, [sp, #78]	; 0x4e
 800b5a6:	4411      	add	r1, r2
 800b5a8:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
 800b5ac:	eb02 010a 	add.w	r1, r2, sl
 800b5b0:	1a41      	subs	r1, r0, r1
 800b5b2:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
 800b5b6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800b5ba:	4411      	add	r1, r2
 800b5bc:	4449      	add	r1, r9
 800b5be:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800b5c2:	9901      	ldr	r1, [sp, #4]
 800b5c4:	440a      	add	r2, r1
 800b5c6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 800b5ca:	1a8a      	subs	r2, r1, r2
 800b5cc:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 800b5d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b5d4:	aa10      	add	r2, sp, #64	; 0x40
 800b5d6:	e882 0003 	stmia.w	r2, {r0, r1}
 800b5da:	4610      	mov	r0, r2
 800b5dc:	f000 fe02 	bl	800c1e4 <WM_SetUserClipRect>
 800b5e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5e2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b5e4:	f006 fc72 	bl	8011ecc <GUI_SetBkColor>
 800b5e8:	f007 fd4c 	bl	8013084 <GUI_Clear>
 800b5ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5f2:	b113      	cbz	r3, 800b5fa <GRAPH_Callback+0xea>
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	4798      	blx	r3
 800b5fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b5fc:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
 800b600:	2b00      	cmp	r3, #0
 800b602:	f000 808d 	beq.w	800b720 <GRAPH_Callback+0x210>
 800b606:	4620      	mov	r0, r4
 800b608:	a914      	add	r1, sp, #80	; 0x50
 800b60a:	f001 f95b 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 800b60e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b610:	f8bd 0056 	ldrh.w	r0, [sp, #86]	; 0x56
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800b61a:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
 800b61e:	9304      	str	r3, [sp, #16]
 800b620:	9007      	str	r0, [sp, #28]
 800b622:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800b626:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800b628:	9205      	str	r2, [sp, #20]
 800b62a:	9306      	str	r3, [sp, #24]
 800b62c:	9108      	str	r1, [sp, #32]
 800b62e:	6c6e      	ldr	r6, [r5, #68]	; 0x44
 800b630:	6caf      	ldr	r7, [r5, #72]	; 0x48
 800b632:	f006 fc4d 	bl	8011ed0 <GUI_SetColor>
 800b636:	f006 fe0f 	bl	8012258 <GUI_GetLineStyle>
 800b63a:	9009      	str	r0, [sp, #36]	; 0x24
 800b63c:	b916      	cbnz	r6, 800b644 <GRAPH_Callback+0x134>
 800b63e:	2f00      	cmp	r7, #0
 800b640:	d14b      	bne.n	800b6da <GRAPH_Callback+0x1ca>
 800b642:	e046      	b.n	800b6d2 <GRAPH_Callback+0x1c2>
 800b644:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b646:	eb06 0c03 	add.w	ip, r6, r3
 800b64a:	f8b5 3078 	ldrh.w	r3, [r5, #120]	; 0x78
 800b64e:	07db      	lsls	r3, r3, #31
 800b650:	bf54      	ite	pl
 800b652:	f8d5 308c 	ldrpl.w	r3, [r5, #140]	; 0x8c
 800b656:	2300      	movmi	r3, #0
 800b658:	eb0c 0803 	add.w	r8, ip, r3
 800b65c:	45b0      	cmp	r8, r6
 800b65e:	db02      	blt.n	800b666 <GRAPH_Callback+0x156>
 800b660:	ebc6 0808 	rsb	r8, r6, r8
 800b664:	e7fa      	b.n	800b65c <GRAPH_Callback+0x14c>
 800b666:	f895 007a 	ldrb.w	r0, [r5, #122]	; 0x7a
 800b66a:	f006 fbfb 	bl	8011e64 <GUI_SetLineStyle>
 800b66e:	9805      	ldr	r0, [sp, #20]
 800b670:	9a01      	ldr	r2, [sp, #4]
 800b672:	b203      	sxth	r3, r0
 800b674:	9806      	ldr	r0, [sp, #24]
 800b676:	444a      	add	r2, r9
 800b678:	b201      	sxth	r1, r0
 800b67a:	f1c2 0201 	rsb	r2, r2, #1
 800b67e:	1a5b      	subs	r3, r3, r1
 800b680:	4413      	add	r3, r2
 800b682:	4598      	cmp	r8, r3
 800b684:	dadb      	bge.n	800b63e <GRAPH_Callback+0x12e>
 800b686:	9804      	ldr	r0, [sp, #16]
 800b688:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
 800b68c:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800b690:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
 800b694:	4448      	add	r0, r9
 800b696:	4440      	add	r0, r8
 800b698:	4459      	add	r1, fp
 800b69a:	ebca 0303 	rsb	r3, sl, r3
 800b69e:	b11a      	cbz	r2, 800b6a8 <GRAPH_Callback+0x198>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	f007 f881 	bl	80127a8 <GUI_DrawLine>
 800b6a6:	e002      	b.n	800b6ae <GRAPH_Callback+0x19e>
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	f006 fe23 	bl	80122f4 <GUI_DrawVLine>
 800b6ae:	44b0      	add	r8, r6
 800b6b0:	e7dd      	b.n	800b66e <GRAPH_Callback+0x15e>
 800b6b2:	f895 007b 	ldrb.w	r0, [r5, #123]	; 0x7b
 800b6b6:	f006 fbd5 	bl	8011e64 <GUI_SetLineStyle>
 800b6ba:	9907      	ldr	r1, [sp, #28]
 800b6bc:	9808      	ldr	r0, [sp, #32]
 800b6be:	b20b      	sxth	r3, r1
 800b6c0:	eb0b 020a 	add.w	r2, fp, sl
 800b6c4:	b201      	sxth	r1, r0
 800b6c6:	f1c2 0201 	rsb	r2, r2, #1
 800b6ca:	1a5b      	subs	r3, r3, r1
 800b6cc:	4413      	add	r3, r2
 800b6ce:	429e      	cmp	r6, r3
 800b6d0:	db0c      	blt.n	800b6ec <GRAPH_Callback+0x1dc>
 800b6d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6d4:	f006 fbc6 	bl	8011e64 <GUI_SetLineStyle>
 800b6d8:	e022      	b.n	800b720 <GRAPH_Callback+0x210>
 800b6da:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 800b6dc:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800b6e0:	443e      	add	r6, r7
 800b6e2:	1af6      	subs	r6, r6, r3
 800b6e4:	42be      	cmp	r6, r7
 800b6e6:	dbe4      	blt.n	800b6b2 <GRAPH_Callback+0x1a2>
 800b6e8:	1bf6      	subs	r6, r6, r7
 800b6ea:	e7fb      	b.n	800b6e4 <GRAPH_Callback+0x1d4>
 800b6ec:	9801      	ldr	r0, [sp, #4]
 800b6ee:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 800b6f2:	f9bd 1056 	ldrsh.w	r1, [sp, #86]	; 0x56
 800b6f6:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 800b6fa:	1a12      	subs	r2, r2, r0
 800b6fc:	f895 007b 	ldrb.w	r0, [r5, #123]	; 0x7b
 800b700:	ebca 0101 	rsb	r1, sl, r1
 800b704:	1b89      	subs	r1, r1, r6
 800b706:	444b      	add	r3, r9
 800b708:	b120      	cbz	r0, 800b714 <GRAPH_Callback+0x204>
 800b70a:	4618      	mov	r0, r3
 800b70c:	460b      	mov	r3, r1
 800b70e:	f007 f84b 	bl	80127a8 <GUI_DrawLine>
 800b712:	e003      	b.n	800b71c <GRAPH_Callback+0x20c>
 800b714:	4608      	mov	r0, r1
 800b716:	4619      	mov	r1, r3
 800b718:	f007 f864 	bl	80127e4 <GUI_DrawHLine>
 800b71c:	443e      	add	r6, r7
 800b71e:	e7cc      	b.n	800b6ba <GRAPH_Callback+0x1aa>
 800b720:	9a03      	ldr	r2, [sp, #12]
 800b722:	a812      	add	r0, sp, #72	; 0x48
 800b724:	a90e      	add	r1, sp, #56	; 0x38
 800b726:	f005 fa5d 	bl	8010be4 <GUI__ReduceRect>
 800b72a:	a812      	add	r0, sp, #72	; 0x48
 800b72c:	f000 fd5a 	bl	800c1e4 <WM_SetUserClipRect>
 800b730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b732:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 800b736:	2aff      	cmp	r2, #255	; 0xff
 800b738:	f000 80a3 	beq.w	800b882 <GRAPH_Callback+0x372>
 800b73c:	f1b9 0f00 	cmp.w	r9, #0
 800b740:	d108      	bne.n	800b754 <GRAPH_Callback+0x244>
 800b742:	f1bb 0f00 	cmp.w	fp, #0
 800b746:	d105      	bne.n	800b754 <GRAPH_Callback+0x244>
 800b748:	9901      	ldr	r1, [sp, #4]
 800b74a:	b919      	cbnz	r1, 800b754 <GRAPH_Callback+0x244>
 800b74c:	f1ba 0f00 	cmp.w	sl, #0
 800b750:	f000 8097 	beq.w	800b882 <GRAPH_Callback+0x372>
 800b754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b756:	a914      	add	r1, sp, #80	; 0x50
 800b758:	4620      	mov	r0, r4
 800b75a:	6815      	ldr	r5, [r2, #0]
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	f001 f8b1 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 800b762:	f001 f89f 	bl	800c8a4 <WM_GetOrgX>
 800b766:	9004      	str	r0, [sp, #16]
 800b768:	f001 f8a4 	bl	800c8b4 <WM_GetOrgY>
 800b76c:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
 800b770:	9b00      	ldr	r3, [sp, #0]
 800b772:	f9bd 6054 	ldrsh.w	r6, [sp, #84]	; 0x54
 800b776:	9005      	str	r0, [sp, #20]
 800b778:	445a      	add	r2, fp
 800b77a:	9203      	str	r2, [sp, #12]
 800b77c:	9a01      	ldr	r2, [sp, #4]
 800b77e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b780:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 800b784:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
 800b788:	1ab6      	subs	r6, r6, r2
 800b78a:	f006 fb9f 	bl	8011ecc <GUI_SetBkColor>
 800b78e:	9b00      	ldr	r3, [sp, #0]
 800b790:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b792:	444f      	add	r7, r9
 800b794:	ebca 0808 	rsb	r8, sl, r8
 800b798:	f006 fb9a 	bl	8011ed0 <GUI_SetColor>
 800b79c:	f1b9 0f00 	cmp.w	r9, #0
 800b7a0:	d01b      	beq.n	800b7da <GRAPH_Callback+0x2ca>
 800b7a2:	9802      	ldr	r0, [sp, #8]
 800b7a4:	9904      	ldr	r1, [sp, #16]
 800b7a6:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b7aa:	f109 32ff 	add.w	r2, r9, #4294967295
 800b7ae:	442a      	add	r2, r5
 800b7b0:	1a5b      	subs	r3, r3, r1
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	dc11      	bgt.n	800b7da <GRAPH_Callback+0x2ca>
 800b7b6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800b7ba:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 800b7be:	ebca 0303 	rsb	r3, sl, r3
 800b7c2:	eb05 010b 	add.w	r1, r5, fp
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	f007 fc2a 	bl	8013020 <GUI_ClearRect>
 800b7cc:	9a03      	ldr	r2, [sp, #12]
 800b7ce:	1e78      	subs	r0, r7, #1
 800b7d0:	1e51      	subs	r1, r2, #1
 800b7d2:	f108 0201 	add.w	r2, r8, #1
 800b7d6:	f006 fd8d 	bl	80122f4 <GUI_DrawVLine>
 800b7da:	f1bb 0f00 	cmp.w	fp, #0
 800b7de:	d017      	beq.n	800b810 <GRAPH_Callback+0x300>
 800b7e0:	9802      	ldr	r0, [sp, #8]
 800b7e2:	9905      	ldr	r1, [sp, #20]
 800b7e4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b7e8:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b7ec:	442b      	add	r3, r5
 800b7ee:	1a52      	subs	r2, r2, r1
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	dc0d      	bgt.n	800b810 <GRAPH_Callback+0x300>
 800b7f4:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 800b7f8:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
 800b7fc:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 800b800:	f007 fc0e 	bl	8013020 <GUI_ClearRect>
 800b804:	9a03      	ldr	r2, [sp, #12]
 800b806:	1e79      	subs	r1, r7, #1
 800b808:	1e50      	subs	r0, r2, #1
 800b80a:	1c72      	adds	r2, r6, #1
 800b80c:	f006 ffea 	bl	80127e4 <GUI_DrawHLine>
 800b810:	9b01      	ldr	r3, [sp, #4]
 800b812:	b1d3      	cbz	r3, 800b84a <GRAPH_Callback+0x33a>
 800b814:	9902      	ldr	r1, [sp, #8]
 800b816:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 800b81a:	1ad0      	subs	r0, r2, r3
 800b81c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800b820:	9904      	ldr	r1, [sp, #16]
 800b822:	3001      	adds	r0, #1
 800b824:	1a5b      	subs	r3, r3, r1
 800b826:	4283      	cmp	r3, r0
 800b828:	db0f      	blt.n	800b84a <GRAPH_Callback+0x33a>
 800b82a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800b82e:	ebca 0303 	rsb	r3, sl, r3
 800b832:	eb05 010b 	add.w	r1, r5, fp
 800b836:	3301      	adds	r3, #1
 800b838:	f007 fbf2 	bl	8013020 <GUI_ClearRect>
 800b83c:	9a03      	ldr	r2, [sp, #12]
 800b83e:	1c70      	adds	r0, r6, #1
 800b840:	1e51      	subs	r1, r2, #1
 800b842:	f108 0201 	add.w	r2, r8, #1
 800b846:	f006 fd55 	bl	80122f4 <GUI_DrawVLine>
 800b84a:	f1ba 0f00 	cmp.w	sl, #0
 800b84e:	d018      	beq.n	800b882 <GRAPH_Callback+0x372>
 800b850:	9802      	ldr	r0, [sp, #8]
 800b852:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800b856:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800b85a:	9805      	ldr	r0, [sp, #20]
 800b85c:	ebca 0103 	rsb	r1, sl, r3
 800b860:	3101      	adds	r1, #1
 800b862:	ebc0 0a02 	rsb	sl, r0, r2
 800b866:	458a      	cmp	sl, r1
 800b868:	db0b      	blt.n	800b882 <GRAPH_Callback+0x372>
 800b86a:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 800b86e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 800b872:	f007 fbd5 	bl	8013020 <GUI_ClearRect>
 800b876:	f108 0001 	add.w	r0, r8, #1
 800b87a:	1e79      	subs	r1, r7, #1
 800b87c:	1c72      	adds	r2, r6, #1
 800b87e:	f006 ffb1 	bl	80127e4 <GUI_DrawHLine>
 800b882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b888:	b113      	cbz	r3, 800b890 <GRAPH_Callback+0x380>
 800b88a:	4620      	mov	r0, r4
 800b88c:	2101      	movs	r1, #1
 800b88e:	4798      	blx	r3
 800b890:	a810      	add	r0, sp, #64	; 0x40
 800b892:	f000 fca7 	bl	800c1e4 <WM_SetUserClipRect>
 800b896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b898:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800b89a:	f7ff fa7c 	bl	800ad96 <GUI_ARRAY_GetNumItems>
 800b89e:	2500      	movs	r5, #0
 800b8a0:	4607      	mov	r7, r0
 800b8a2:	42bd      	cmp	r5, r7
 800b8a4:	d01a      	beq.n	800b8dc <GRAPH_Callback+0x3cc>
 800b8a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800b8ac:	f7ff faf5 	bl	800ae9a <GUI_ARRAY_GethItem>
 800b8b0:	f008 f824 	bl	80138fc <GUI_ALLOC_LockH>
 800b8b4:	9014      	str	r0, [sp, #80]	; 0x50
 800b8b6:	b178      	cbz	r0, 800b8d8 <GRAPH_Callback+0x3c8>
 800b8b8:	6806      	ldr	r6, [r0, #0]
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f008 f81e 	bl	80138fc <GUI_ALLOC_LockH>
 800b8c0:	900c      	str	r0, [sp, #48]	; 0x30
 800b8c2:	b130      	cbz	r0, 800b8d2 <GRAPH_Callback+0x3c2>
 800b8c4:	6803      	ldr	r3, [r0, #0]
 800b8c6:	9902      	ldr	r1, [sp, #8]
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	4798      	blx	r3
 800b8cc:	a80c      	add	r0, sp, #48	; 0x30
 800b8ce:	f008 f823 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b8d2:	a814      	add	r0, sp, #80	; 0x50
 800b8d4:	f008 f820 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b8d8:	3501      	adds	r5, #1
 800b8da:	e7e2      	b.n	800b8a2 <GRAPH_Callback+0x392>
 800b8dc:	a812      	add	r0, sp, #72	; 0x48
 800b8de:	f000 fc81 	bl	800c1e4 <WM_SetUserClipRect>
 800b8e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8e4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b8e6:	f7ff fa56 	bl	800ad96 <GUI_ARRAY_GetNumItems>
 800b8ea:	2500      	movs	r5, #0
 800b8ec:	4607      	mov	r7, r0
 800b8ee:	42bd      	cmp	r5, r7
 800b8f0:	d01a      	beq.n	800b928 <GRAPH_Callback+0x418>
 800b8f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b8f8:	f7ff facf 	bl	800ae9a <GUI_ARRAY_GethItem>
 800b8fc:	f007 fffe 	bl	80138fc <GUI_ALLOC_LockH>
 800b900:	9014      	str	r0, [sp, #80]	; 0x50
 800b902:	b178      	cbz	r0, 800b924 <GRAPH_Callback+0x414>
 800b904:	6806      	ldr	r6, [r0, #0]
 800b906:	4630      	mov	r0, r6
 800b908:	f007 fff8 	bl	80138fc <GUI_ALLOC_LockH>
 800b90c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b90e:	b130      	cbz	r0, 800b91e <GRAPH_Callback+0x40e>
 800b910:	6803      	ldr	r3, [r0, #0]
 800b912:	9902      	ldr	r1, [sp, #8]
 800b914:	4630      	mov	r0, r6
 800b916:	4798      	blx	r3
 800b918:	a80b      	add	r0, sp, #44	; 0x2c
 800b91a:	f007 fffd 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b91e:	a814      	add	r0, sp, #80	; 0x50
 800b920:	f007 fffa 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b924:	3501      	adds	r5, #1
 800b926:	e7e2      	b.n	800b8ee <GRAPH_Callback+0x3de>
 800b928:	2000      	movs	r0, #0
 800b92a:	f000 fc5b 	bl	800c1e4 <WM_SetUserClipRect>
 800b92e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b934:	b113      	cbz	r3, 800b93c <GRAPH_Callback+0x42c>
 800b936:	4620      	mov	r0, r4
 800b938:	2102      	movs	r1, #2
 800b93a:	4798      	blx	r3
 800b93c:	a80d      	add	r0, sp, #52	; 0x34
 800b93e:	e046      	b.n	800b9ce <GRAPH_Callback+0x4be>
 800b940:	4620      	mov	r0, r4
 800b942:	f007 ffdb 	bl	80138fc <GUI_ALLOC_LockH>
 800b946:	9012      	str	r0, [sp, #72]	; 0x48
 800b948:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800b94a:	f7ff fa24 	bl	800ad96 <GUI_ARRAY_GetNumItems>
 800b94e:	2400      	movs	r4, #0
 800b950:	4606      	mov	r6, r0
 800b952:	42b4      	cmp	r4, r6
 800b954:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b956:	da18      	bge.n	800b98a <GRAPH_Callback+0x47a>
 800b958:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800b95a:	4621      	mov	r1, r4
 800b95c:	f7ff fa9d 	bl	800ae9a <GUI_ARRAY_GethItem>
 800b960:	f007 ffcc 	bl	80138fc <GUI_ALLOC_LockH>
 800b964:	9014      	str	r0, [sp, #80]	; 0x50
 800b966:	b170      	cbz	r0, 800b986 <GRAPH_Callback+0x476>
 800b968:	6805      	ldr	r5, [r0, #0]
 800b96a:	4628      	mov	r0, r5
 800b96c:	f007 ffc6 	bl	80138fc <GUI_ALLOC_LockH>
 800b970:	9010      	str	r0, [sp, #64]	; 0x40
 800b972:	b128      	cbz	r0, 800b980 <GRAPH_Callback+0x470>
 800b974:	6847      	ldr	r7, [r0, #4]
 800b976:	a810      	add	r0, sp, #64	; 0x40
 800b978:	f007 ffce 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b97c:	4628      	mov	r0, r5
 800b97e:	47b8      	blx	r7
 800b980:	a814      	add	r0, sp, #80	; 0x50
 800b982:	f007 ffc9 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b986:	3401      	adds	r4, #1
 800b988:	e7e3      	b.n	800b952 <GRAPH_Callback+0x442>
 800b98a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b98c:	f7ff fa03 	bl	800ad96 <GUI_ARRAY_GetNumItems>
 800b990:	2400      	movs	r4, #0
 800b992:	4605      	mov	r5, r0
 800b994:	42ac      	cmp	r4, r5
 800b996:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b998:	da0f      	bge.n	800b9ba <GRAPH_Callback+0x4aa>
 800b99a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b99c:	4621      	mov	r1, r4
 800b99e:	f7ff fa7c 	bl	800ae9a <GUI_ARRAY_GethItem>
 800b9a2:	f007 ffab 	bl	80138fc <GUI_ALLOC_LockH>
 800b9a6:	9014      	str	r0, [sp, #80]	; 0x50
 800b9a8:	b128      	cbz	r0, 800b9b6 <GRAPH_Callback+0x4a6>
 800b9aa:	6800      	ldr	r0, [r0, #0]
 800b9ac:	f007 ffe0 	bl	8013970 <GUI_ALLOC_Free>
 800b9b0:	a814      	add	r0, sp, #80	; 0x50
 800b9b2:	f007 ffb1 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b9b6:	3401      	adds	r4, #1
 800b9b8:	e7ec      	b.n	800b994 <GRAPH_Callback+0x484>
 800b9ba:	ac16      	add	r4, sp, #88	; 0x58
 800b9bc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800b9be:	f7ff fa43 	bl	800ae48 <GUI_ARRAY_Delete>
 800b9c2:	f854 3d10 	ldr.w	r3, [r4, #-16]!
 800b9c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b9c8:	f7ff fa3e 	bl	800ae48 <GUI_ARRAY_Delete>
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f007 ffa3 	bl	8013918 <GUI_ALLOC_UnlockH>
 800b9d2:	e015      	b.n	800ba00 <GRAPH_Callback+0x4f0>
 800b9d4:	68eb      	ldr	r3, [r5, #12]
 800b9d6:	2b05      	cmp	r3, #5
 800b9d8:	d10f      	bne.n	800b9fa <GRAPH_Callback+0x4ea>
 800b9da:	4620      	mov	r0, r4
 800b9dc:	68ae      	ldr	r6, [r5, #8]
 800b9de:	f000 ff3a 	bl	800c856 <WM_GetScrollbarV>
 800b9e2:	4286      	cmp	r6, r0
 800b9e4:	d005      	beq.n	800b9f2 <GRAPH_Callback+0x4e2>
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	68ae      	ldr	r6, [r5, #8]
 800b9ea:	f000 ff2f 	bl	800c84c <WM_GetScrollbarH>
 800b9ee:	4286      	cmp	r6, r0
 800b9f0:	d103      	bne.n	800b9fa <GRAPH_Callback+0x4ea>
 800b9f2:	6868      	ldr	r0, [r5, #4]
 800b9f4:	68a9      	ldr	r1, [r5, #8]
 800b9f6:	f7ff fd6f 	bl	800b4d8 <_OnScrollValueChanged>
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f002 f984 	bl	800dd08 <WM_DefaultProc>
 800ba00:	b017      	add	sp, #92	; 0x5c
 800ba02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba06 <GRAPH__InvalidateGraph>:
 800ba06:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	f007 ff76 	bl	80138fc <GUI_ALLOC_LockH>
 800ba10:	4603      	mov	r3, r0
 800ba12:	a804      	add	r0, sp, #16
 800ba14:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
 800ba18:	f840 3d0c 	str.w	r3, [r0, #-12]!
 800ba1c:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 800ba1e:	6dde      	ldr	r6, [r3, #92]	; 0x5c
 800ba20:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800ba22:	f007 ff79 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ba26:	4620      	mov	r0, r4
 800ba28:	a902      	add	r1, sp, #8
 800ba2a:	f000 ff4b 	bl	800c8c4 <WM_GetInsideRectExScrollbar>
 800ba2e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800ba32:	4498      	add	r8, r3
 800ba34:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800ba38:	f8ad 8008 	strh.w	r8, [sp, #8]
 800ba3c:	441f      	add	r7, r3
 800ba3e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ba42:	f8ad 700a 	strh.w	r7, [sp, #10]
 800ba46:	1b9e      	subs	r6, r3, r6
 800ba48:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ba4c:	f8ad 600c 	strh.w	r6, [sp, #12]
 800ba50:	1b5d      	subs	r5, r3, r5
 800ba52:	4620      	mov	r0, r4
 800ba54:	a902      	add	r1, sp, #8
 800ba56:	f8ad 500e 	strh.w	r5, [sp, #14]
 800ba5a:	f001 fce8 	bl	800d42e <WM_InvalidateRect>
 800ba5e:	b004      	add	sp, #16
 800ba60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ba64 <GRAPH__AddValue>:
 800ba64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba66:	461d      	mov	r5, r3
 800ba68:	6883      	ldr	r3, [r0, #8]
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	460e      	mov	r6, r1
 800ba6e:	4617      	mov	r7, r2
 800ba70:	b323      	cbz	r3, 800babc <GRAPH__AddValue+0x58>
 800ba72:	6900      	ldr	r0, [r0, #16]
 800ba74:	6963      	ldr	r3, [r4, #20]
 800ba76:	4298      	cmp	r0, r3
 800ba78:	d10e      	bne.n	800ba98 <GRAPH__AddValue+0x34>
 800ba7a:	1e42      	subs	r2, r0, #1
 800ba7c:	436a      	muls	r2, r5
 800ba7e:	4608      	mov	r0, r1
 800ba80:	4429      	add	r1, r5
 800ba82:	f00e feb3 	bl	801a7ec <memmove>
 800ba86:	6920      	ldr	r0, [r4, #16]
 800ba88:	3801      	subs	r0, #1
 800ba8a:	fb00 6005 	mla	r0, r0, r5, r6
 800ba8e:	4639      	mov	r1, r7
 800ba90:	462a      	mov	r2, r5
 800ba92:	f00e feab 	bl	801a7ec <memmove>
 800ba96:	e00c      	b.n	800bab2 <GRAPH__AddValue+0x4e>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	6123      	str	r3, [r4, #16]
 800ba9c:	fb00 1005 	mla	r0, r0, r5, r1
 800baa0:	4611      	mov	r1, r2
 800baa2:	462a      	mov	r2, r5
 800baa4:	f00e fea2 	bl	801a7ec <memmove>
 800baa8:	68e3      	ldr	r3, [r4, #12]
 800baaa:	b113      	cbz	r3, 800bab2 <GRAPH__AddValue+0x4e>
 800baac:	4620      	mov	r0, r4
 800baae:	4798      	blx	r3
 800bab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bab2:	68a0      	ldr	r0, [r4, #8]
 800bab4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bab8:	f7ff bfa5 	b.w	800ba06 <GRAPH__InvalidateGraph>
 800babc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bac0 <GRAPH_CreateUser>:
 800bac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bac2:	b087      	sub	sp, #28
 800bac4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bac6:	9400      	str	r4, [sp, #0]
 800bac8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800baca:	9401      	str	r4, [sp, #4]
 800bacc:	4c17      	ldr	r4, [pc, #92]	; (800bb2c <GRAPH_CreateUser+0x6c>)
 800bace:	9402      	str	r4, [sp, #8]
 800bad0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800bad2:	346c      	adds	r4, #108	; 0x6c
 800bad4:	9403      	str	r4, [sp, #12]
 800bad6:	f001 fd27 	bl	800d528 <WM_CreateWindowAsChild>
 800bada:	4606      	mov	r6, r0
 800badc:	b318      	cbz	r0, 800bb26 <GRAPH_CreateUser+0x66>
 800bade:	f7ff fa02 	bl	800aee6 <GUI_ARRAY_Create>
 800bae2:	4605      	mov	r5, r0
 800bae4:	f7ff f9ff 	bl	800aee6 <GUI_ARRAY_Create>
 800bae8:	4604      	mov	r4, r0
 800baea:	4630      	mov	r0, r6
 800baec:	f007 ff06 	bl	80138fc <GUI_ALLOC_LockH>
 800baf0:	6645      	str	r5, [r0, #100]	; 0x64
 800baf2:	4d0f      	ldr	r5, [pc, #60]	; (800bb30 <GRAPH_CreateUser+0x70>)
 800baf4:	6684      	str	r4, [r0, #104]	; 0x68
 800baf6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800baf8:	9005      	str	r0, [sp, #20]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f7fd f912 	bl	8008d24 <WIDGET__Init>
 800bb00:	af06      	add	r7, sp, #24
 800bb02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb04:	f857 ed04 	ldr.w	lr, [r7, #-4]!
 800bb08:	f10e 0434 	add.w	r4, lr, #52	; 0x34
 800bb0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb12:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bb16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bb1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb1c:	f8ae 3078 	strh.w	r3, [lr, #120]	; 0x78
 800bb20:	4638      	mov	r0, r7
 800bb22:	f007 fef9 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bb26:	4630      	mov	r0, r6
 800bb28:	b007      	add	sp, #28
 800bb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb2c:	0800b511 	.word	0x0800b511
 800bb30:	20000080 	.word	0x20000080

0800bb34 <GRAPH_AttachData>:
 800bb34:	b530      	push	{r4, r5, lr}
 800bb36:	b085      	sub	sp, #20
 800bb38:	4604      	mov	r4, r0
 800bb3a:	9101      	str	r1, [sp, #4]
 800bb3c:	b1d0      	cbz	r0, 800bb74 <GRAPH_AttachData+0x40>
 800bb3e:	f007 fedd 	bl	80138fc <GUI_ALLOC_LockH>
 800bb42:	ab04      	add	r3, sp, #16
 800bb44:	6e45      	ldr	r5, [r0, #100]	; 0x64
 800bb46:	f843 0d04 	str.w	r0, [r3, #-4]!
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f007 fee4 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bb50:	9801      	ldr	r0, [sp, #4]
 800bb52:	f007 fed3 	bl	80138fc <GUI_ALLOC_LockH>
 800bb56:	4602      	mov	r2, r0
 800bb58:	a804      	add	r0, sp, #16
 800bb5a:	6094      	str	r4, [r2, #8]
 800bb5c:	f840 2d08 	str.w	r2, [r0, #-8]!
 800bb60:	f007 feda 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bb64:	4628      	mov	r0, r5
 800bb66:	a901      	add	r1, sp, #4
 800bb68:	2204      	movs	r2, #4
 800bb6a:	f7ff f923 	bl	800adb4 <GUI_ARRAY_AddItem>
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f001 fc99 	bl	800d4a6 <WM_InvalidateWindow>
 800bb74:	b005      	add	sp, #20
 800bb76:	bd30      	pop	{r4, r5, pc}

0800bb78 <GRAPH_AttachScale>:
 800bb78:	b530      	push	{r4, r5, lr}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	9101      	str	r1, [sp, #4]
 800bb80:	b1d0      	cbz	r0, 800bbb8 <GRAPH_AttachScale+0x40>
 800bb82:	f007 febb 	bl	80138fc <GUI_ALLOC_LockH>
 800bb86:	ab04      	add	r3, sp, #16
 800bb88:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800bb8a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f007 fec2 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bb94:	9801      	ldr	r0, [sp, #4]
 800bb96:	f007 feb1 	bl	80138fc <GUI_ALLOC_LockH>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	a804      	add	r0, sp, #16
 800bb9e:	6094      	str	r4, [r2, #8]
 800bba0:	f840 2d08 	str.w	r2, [r0, #-8]!
 800bba4:	f007 feb8 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bba8:	4628      	mov	r0, r5
 800bbaa:	a901      	add	r1, sp, #4
 800bbac:	2204      	movs	r2, #4
 800bbae:	f7ff f901 	bl	800adb4 <GUI_ARRAY_AddItem>
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f001 fc77 	bl	800d4a6 <WM_InvalidateWindow>
 800bbb8:	b005      	add	sp, #20
 800bbba:	bd30      	pop	{r4, r5, pc}

0800bbbc <GRAPH_SetColor>:
 800bbbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbbe:	460d      	mov	r5, r1
 800bbc0:	4614      	mov	r4, r2
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	b198      	cbz	r0, 800bbee <GRAPH_SetColor+0x32>
 800bbc6:	f007 fe99 	bl	80138fc <GUI_ALLOC_LockH>
 800bbca:	2c03      	cmp	r4, #3
 800bbcc:	9001      	str	r0, [sp, #4]
 800bbce:	d809      	bhi.n	800bbe4 <GRAPH_SetColor+0x28>
 800bbd0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800bbd4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800bbd6:	42ac      	cmp	r4, r5
 800bbd8:	d005      	beq.n	800bbe6 <GRAPH_SetColor+0x2a>
 800bbda:	6345      	str	r5, [r0, #52]	; 0x34
 800bbdc:	4630      	mov	r0, r6
 800bbde:	f001 fc62 	bl	800d4a6 <WM_InvalidateWindow>
 800bbe2:	e000      	b.n	800bbe6 <GRAPH_SetColor+0x2a>
 800bbe4:	2400      	movs	r4, #0
 800bbe6:	a801      	add	r0, sp, #4
 800bbe8:	f007 fe96 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bbec:	e000      	b.n	800bbf0 <GRAPH_SetColor+0x34>
 800bbee:	4604      	mov	r4, r0
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	b002      	add	sp, #8
 800bbf4:	bd70      	pop	{r4, r5, r6, pc}

0800bbf6 <GRAPH_SetGridVis>:
 800bbf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbf8:	460e      	mov	r6, r1
 800bbfa:	4605      	mov	r5, r0
 800bbfc:	b178      	cbz	r0, 800bc1e <GRAPH_SetGridVis+0x28>
 800bbfe:	f007 fe7d 	bl	80138fc <GUI_ALLOC_LockH>
 800bc02:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
 800bc06:	9001      	str	r0, [sp, #4]
 800bc08:	42b4      	cmp	r4, r6
 800bc0a:	d004      	beq.n	800bc16 <GRAPH_SetGridVis+0x20>
 800bc0c:	f880 606c 	strb.w	r6, [r0, #108]	; 0x6c
 800bc10:	4628      	mov	r0, r5
 800bc12:	f001 fc48 	bl	800d4a6 <WM_InvalidateWindow>
 800bc16:	a801      	add	r0, sp, #4
 800bc18:	f007 fe7e 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bc1c:	e000      	b.n	800bc20 <GRAPH_SetGridVis+0x2a>
 800bc1e:	4604      	mov	r4, r0
 800bc20:	4620      	mov	r0, r4
 800bc22:	b002      	add	sp, #8
 800bc24:	bd70      	pop	{r4, r5, r6, pc}

0800bc26 <GRAPH_SetGridDistX>:
 800bc26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc28:	460e      	mov	r6, r1
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	b168      	cbz	r0, 800bc4a <GRAPH_SetGridDistX+0x24>
 800bc2e:	f007 fe65 	bl	80138fc <GUI_ALLOC_LockH>
 800bc32:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800bc34:	9001      	str	r0, [sp, #4]
 800bc36:	42b4      	cmp	r4, r6
 800bc38:	d003      	beq.n	800bc42 <GRAPH_SetGridDistX+0x1c>
 800bc3a:	6446      	str	r6, [r0, #68]	; 0x44
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	f001 fc32 	bl	800d4a6 <WM_InvalidateWindow>
 800bc42:	a801      	add	r0, sp, #4
 800bc44:	f007 fe68 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bc48:	e000      	b.n	800bc4c <GRAPH_SetGridDistX+0x26>
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	b002      	add	sp, #8
 800bc50:	bd70      	pop	{r4, r5, r6, pc}

0800bc52 <GRAPH_SetGridDistY>:
 800bc52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc54:	460e      	mov	r6, r1
 800bc56:	4605      	mov	r5, r0
 800bc58:	b168      	cbz	r0, 800bc76 <GRAPH_SetGridDistY+0x24>
 800bc5a:	f007 fe4f 	bl	80138fc <GUI_ALLOC_LockH>
 800bc5e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800bc60:	9001      	str	r0, [sp, #4]
 800bc62:	42b4      	cmp	r4, r6
 800bc64:	d003      	beq.n	800bc6e <GRAPH_SetGridDistY+0x1c>
 800bc66:	6486      	str	r6, [r0, #72]	; 0x48
 800bc68:	4628      	mov	r0, r5
 800bc6a:	f001 fc1c 	bl	800d4a6 <WM_InvalidateWindow>
 800bc6e:	a801      	add	r0, sp, #4
 800bc70:	f007 fe52 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bc74:	e000      	b.n	800bc78 <GRAPH_SetGridDistY+0x26>
 800bc76:	4604      	mov	r4, r0
 800bc78:	4620      	mov	r0, r4
 800bc7a:	b002      	add	sp, #8
 800bc7c:	bd70      	pop	{r4, r5, r6, pc}

0800bc7e <GUI_CreateDialogBox>:
 800bc7e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc82:	4606      	mov	r6, r0
 800bc84:	4688      	mov	r8, r1
 800bc86:	4614      	mov	r4, r2
 800bc88:	461d      	mov	r5, r3
 800bc8a:	b913      	cbnz	r3, 800bc92 <GUI_CreateDialogBox+0x14>
 800bc8c:	f000 fec4 	bl	800ca18 <WM_GetDesktopWindow>
 800bc90:	4605      	mov	r5, r0
 800bc92:	9400      	str	r4, [sp, #0]
 800bc94:	4630      	mov	r0, r6
 800bc96:	6834      	ldr	r4, [r6, #0]
 800bc98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc9c:	4629      	mov	r1, r5
 800bc9e:	47a0      	blx	r4
 800bca0:	4604      	mov	r4, r0
 800bca2:	2800      	cmp	r0, #0
 800bca4:	d039      	beq.n	800bd1a <GUI_CreateDialogBox+0x9c>
 800bca6:	f000 fec3 	bl	800ca30 <WM_GetClientWindow>
 800bcaa:	8a71      	ldrh	r1, [r6, #18]
 800bcac:	4607      	mov	r7, r0
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f7fd f80c 	bl	8008ccc <WIDGET_OrState>
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f000 fa80 	bl	800c1ba <WM_ShowWindow>
 800bcba:	4638      	mov	r0, r7
 800bcbc:	f108 38ff 	add.w	r8, r8, #4294967295
 800bcc0:	f000 fa7b 	bl	800c1ba <WM_ShowWindow>
 800bcc4:	f1b8 0f00 	cmp.w	r8, #0
 800bcc8:	dd0f      	ble.n	800bcea <GUI_CreateDialogBox+0x6c>
 800bcca:	f856 cf1c 	ldr.w	ip, [r6, #28]!
 800bcce:	2200      	movs	r2, #0
 800bcd0:	9200      	str	r2, [sp, #0]
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	4639      	mov	r1, r7
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	47e0      	blx	ip
 800bcda:	4681      	mov	r9, r0
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d1ed      	bne.n	800bcbc <GUI_CreateDialogBox+0x3e>
 800bce0:	4620      	mov	r0, r4
 800bce2:	f001 fccb 	bl	800d67c <WM_DeleteWindow>
 800bce6:	4648      	mov	r0, r9
 800bce8:	e018      	b.n	800bd1c <GUI_CreateDialogBox+0x9e>
 800bcea:	4638      	mov	r0, r7
 800bcec:	211d      	movs	r1, #29
 800bcee:	f000 fc0f 	bl	800c510 <WM_SendMessageNoPara>
 800bcf2:	1c6b      	adds	r3, r5, #1
 800bcf4:	d011      	beq.n	800bd1a <GUI_CreateDialogBox+0x9c>
 800bcf6:	f000 fe55 	bl	800c9a4 <WM_GetFocussedWindow>
 800bcfa:	b150      	cbz	r0, 800bd12 <GUI_CreateDialogBox+0x94>
 800bcfc:	f007 fdf4 	bl	80138e8 <GUI_ALLOC_h2p>
 800bd00:	6980      	ldr	r0, [r0, #24]
 800bd02:	42a0      	cmp	r0, r4
 800bd04:	d00a      	beq.n	800bd1c <GUI_CreateDialogBox+0x9e>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d1f8      	bne.n	800bcfc <GUI_CreateDialogBox+0x7e>
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f000 fb42 	bl	800c394 <WM_SetFocusOnNextChild>
 800bd10:	e003      	b.n	800bd1a <GUI_CreateDialogBox+0x9c>
 800bd12:	42a5      	cmp	r5, r4
 800bd14:	d1f9      	bne.n	800bd0a <GUI_CreateDialogBox+0x8c>
 800bd16:	4628      	mov	r0, r5
 800bd18:	e000      	b.n	800bd1c <GUI_CreateDialogBox+0x9e>
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	b003      	add	sp, #12
 800bd1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bd22 <CHECKBOX_SetTextColor>:
 800bd22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd24:	460c      	mov	r4, r1
 800bd26:	4605      	mov	r5, r0
 800bd28:	b160      	cbz	r0, 800bd44 <CHECKBOX_SetTextColor+0x22>
 800bd2a:	f007 fde7 	bl	80138fc <GUI_ALLOC_LockH>
 800bd2e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd30:	9001      	str	r0, [sp, #4]
 800bd32:	42a2      	cmp	r2, r4
 800bd34:	d003      	beq.n	800bd3e <CHECKBOX_SetTextColor+0x1c>
 800bd36:	6444      	str	r4, [r0, #68]	; 0x44
 800bd38:	4628      	mov	r0, r5
 800bd3a:	f001 fbb4 	bl	800d4a6 <WM_InvalidateWindow>
 800bd3e:	a801      	add	r0, sp, #4
 800bd40:	f007 fdea 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bd44:	b003      	add	sp, #12
 800bd46:	bd30      	pop	{r4, r5, pc}

0800bd48 <CHECKBOX_SetText>:
 800bd48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd4a:	460e      	mov	r6, r1
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	b1e0      	cbz	r0, 800bd8a <CHECKBOX_SetText+0x42>
 800bd50:	b1d9      	cbz	r1, 800bd8a <CHECKBOX_SetText+0x42>
 800bd52:	f007 fdd3 	bl	80138fc <GUI_ALLOC_LockH>
 800bd56:	6f85      	ldr	r5, [r0, #120]	; 0x78
 800bd58:	9000      	str	r0, [sp, #0]
 800bd5a:	4668      	mov	r0, sp
 800bd5c:	9501      	str	r5, [sp, #4]
 800bd5e:	f007 fddb 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bd62:	a801      	add	r0, sp, #4
 800bd64:	4631      	mov	r1, r6
 800bd66:	f004 ff02 	bl	8010b6e <GUI__SetText>
 800bd6a:	b170      	cbz	r0, 800bd8a <CHECKBOX_SetText+0x42>
 800bd6c:	9b01      	ldr	r3, [sp, #4]
 800bd6e:	42ab      	cmp	r3, r5
 800bd70:	d008      	beq.n	800bd84 <CHECKBOX_SetText+0x3c>
 800bd72:	4620      	mov	r0, r4
 800bd74:	f007 fdc2 	bl	80138fc <GUI_ALLOC_LockH>
 800bd78:	9b01      	ldr	r3, [sp, #4]
 800bd7a:	9000      	str	r0, [sp, #0]
 800bd7c:	6783      	str	r3, [r0, #120]	; 0x78
 800bd7e:	4668      	mov	r0, sp
 800bd80:	f007 fdca 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bd84:	4620      	mov	r0, r4
 800bd86:	f001 fb8e 	bl	800d4a6 <WM_InvalidateWindow>
 800bd8a:	b002      	add	sp, #8
 800bd8c:	bd70      	pop	{r4, r5, r6, pc}

0800bd8e <BUTTON_CreateIndirect>:
 800bd8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd90:	b087      	sub	sp, #28
 800bd92:	4604      	mov	r4, r0
 800bd94:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 800bd98:	9100      	str	r1, [sp, #0]
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	f9b4 e00c 	ldrsh.w	lr, [r4, #12]
 800bda0:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
 800bda4:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 800bda8:	9101      	str	r1, [sp, #4]
 800bdaa:	8a61      	ldrh	r1, [r4, #18]
 800bdac:	69a5      	ldr	r5, [r4, #24]
 800bdae:	9102      	str	r1, [sp, #8]
 800bdb0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800bdb4:	9103      	str	r1, [sp, #12]
 800bdb6:	9504      	str	r5, [sp, #16]
 800bdb8:	eb0e 0103 	add.w	r1, lr, r3
 800bdbc:	4410      	add	r0, r2
 800bdbe:	4633      	mov	r3, r6
 800bdc0:	463a      	mov	r2, r7
 800bdc2:	f000 f8cd 	bl	800bf60 <BUTTON_CreateUser>
 800bdc6:	6861      	ldr	r1, [r4, #4]
 800bdc8:	4605      	mov	r5, r0
 800bdca:	f000 f901 	bl	800bfd0 <BUTTON_SetText>
 800bdce:	4628      	mov	r0, r5
 800bdd0:	b007      	add	sp, #28
 800bdd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bdd4 <_OnButtonPressed>:
 800bdd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bdda:	4604      	mov	r4, r0
 800bddc:	f7fc ff76 	bl	8008ccc <WIDGET_OrState>
 800bde0:	4620      	mov	r0, r4
 800bde2:	f007 fd8b 	bl	80138fc <GUI_ALLOC_LockH>
 800bde6:	ab02      	add	r3, sp, #8
 800bde8:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800bdea:	f843 0d04 	str.w	r0, [r3, #-4]!
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f007 fd92 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bdf4:	07ab      	lsls	r3, r5, #30
 800bdf6:	d503      	bpl.n	800be00 <_OnButtonPressed+0x2c>
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	2101      	movs	r1, #1
 800bdfc:	f000 fc05 	bl	800c60a <WM_NotifyParent>
 800be00:	b003      	add	sp, #12
 800be02:	bd30      	pop	{r4, r5, pc}

0800be04 <_OnButtonReleased>:
 800be04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be06:	4605      	mov	r5, r0
 800be08:	460c      	mov	r4, r1
 800be0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800be0e:	f7fc ff73 	bl	8008cf8 <WIDGET_AndState>
 800be12:	4628      	mov	r0, r5
 800be14:	f007 fd72 	bl	80138fc <GUI_ALLOC_LockH>
 800be18:	4602      	mov	r2, r0
 800be1a:	a802      	add	r0, sp, #8
 800be1c:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800be1e:	f840 2d04 	str.w	r2, [r0, #-4]!
 800be22:	8e17      	ldrh	r7, [r2, #48]	; 0x30
 800be24:	f007 fd78 	bl	8013918 <GUI_ALLOC_UnlockH>
 800be28:	2c02      	cmp	r4, #2
 800be2a:	d102      	bne.n	800be32 <_OnButtonReleased+0x2e>
 800be2c:	4638      	mov	r0, r7
 800be2e:	f006 f991 	bl	8012154 <GUI_StoreKey>
 800be32:	07b3      	lsls	r3, r6, #30
 800be34:	d503      	bpl.n	800be3e <_OnButtonReleased+0x3a>
 800be36:	4628      	mov	r0, r5
 800be38:	4621      	mov	r1, r4
 800be3a:	f000 fbe6 	bl	800c60a <WM_NotifyParent>
 800be3e:	b003      	add	sp, #12
 800be40:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be42 <_OnTouchDefault>:
 800be42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be44:	460d      	mov	r5, r1
 800be46:	4604      	mov	r4, r0
 800be48:	f007 fd58 	bl	80138fc <GUI_ALLOC_LockH>
 800be4c:	ab02      	add	r3, sp, #8
 800be4e:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 800be50:	f843 0d04 	str.w	r0, [r3, #-4]!
 800be54:	4618      	mov	r0, r3
 800be56:	f007 fd5f 	bl	8013918 <GUI_ALLOC_UnlockH>
 800be5a:	68ea      	ldr	r2, [r5, #12]
 800be5c:	b162      	cbz	r2, 800be78 <_OnTouchDefault+0x36>
 800be5e:	7a12      	ldrb	r2, [r2, #8]
 800be60:	f406 7380 	and.w	r3, r6, #256	; 0x100
 800be64:	b122      	cbz	r2, 800be70 <_OnTouchDefault+0x2e>
 800be66:	b95b      	cbnz	r3, 800be80 <_OnTouchDefault+0x3e>
 800be68:	4620      	mov	r0, r4
 800be6a:	f7ff ffb3 	bl	800bdd4 <_OnButtonPressed>
 800be6e:	e007      	b.n	800be80 <_OnTouchDefault+0x3e>
 800be70:	b133      	cbz	r3, 800be80 <_OnTouchDefault+0x3e>
 800be72:	4620      	mov	r0, r4
 800be74:	2102      	movs	r1, #2
 800be76:	e001      	b.n	800be7c <_OnTouchDefault+0x3a>
 800be78:	4620      	mov	r0, r4
 800be7a:	2103      	movs	r1, #3
 800be7c:	f7ff ffc2 	bl	800be04 <_OnButtonReleased>
 800be80:	b002      	add	sp, #8
 800be82:	bd70      	pop	{r4, r5, r6, pc}

0800be84 <BUTTON_Callback>:
 800be84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be86:	6844      	ldr	r4, [r0, #4]
 800be88:	4605      	mov	r5, r0
 800be8a:	4629      	mov	r1, r5
 800be8c:	4620      	mov	r0, r4
 800be8e:	f7fc ff51 	bl	8008d34 <WIDGET_HandleActive>
 800be92:	2800      	cmp	r0, #0
 800be94:	d05d      	beq.n	800bf52 <BUTTON_Callback+0xce>
 800be96:	682b      	ldr	r3, [r5, #0]
 800be98:	2b0f      	cmp	r3, #15
 800be9a:	d016      	beq.n	800beca <BUTTON_Callback+0x46>
 800be9c:	dc04      	bgt.n	800bea8 <BUTTON_Callback+0x24>
 800be9e:	2b0b      	cmp	r3, #11
 800bea0:	d023      	beq.n	800beea <BUTTON_Callback+0x66>
 800bea2:	2b0e      	cmp	r3, #14
 800bea4:	d033      	beq.n	800bf0e <BUTTON_Callback+0x8a>
 800bea6:	e051      	b.n	800bf4c <BUTTON_Callback+0xc8>
 800bea8:	2b28      	cmp	r3, #40	; 0x28
 800beaa:	d048      	beq.n	800bf3e <BUTTON_Callback+0xba>
 800beac:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800beb0:	d005      	beq.n	800bebe <BUTTON_Callback+0x3a>
 800beb2:	2b11      	cmp	r3, #17
 800beb4:	d14a      	bne.n	800bf4c <BUTTON_Callback+0xc8>
 800beb6:	4b28      	ldr	r3, [pc, #160]	; (800bf58 <BUTTON_Callback+0xd4>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	b913      	cbnz	r3, 800bec2 <BUTTON_Callback+0x3e>
 800bebc:	e049      	b.n	800bf52 <BUTTON_Callback+0xce>
 800bebe:	4b27      	ldr	r3, [pc, #156]	; (800bf5c <BUTTON_Callback+0xd8>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4620      	mov	r0, r4
 800bec4:	4629      	mov	r1, r5
 800bec6:	4798      	blx	r3
 800bec8:	e043      	b.n	800bf52 <BUTTON_Callback+0xce>
 800beca:	4620      	mov	r0, r4
 800becc:	f007 fd16 	bl	80138fc <GUI_ALLOC_LockH>
 800bed0:	ab02      	add	r3, sp, #8
 800bed2:	f843 0d04 	str.w	r0, [r3, #-4]!
 800bed6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800bed8:	6815      	ldr	r5, [r2, #0]
 800beda:	4618      	mov	r0, r3
 800bedc:	f007 fd1c 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bee0:	2d00      	cmp	r5, #0
 800bee2:	d036      	beq.n	800bf52 <BUTTON_Callback+0xce>
 800bee4:	4620      	mov	r0, r4
 800bee6:	47a8      	blx	r5
 800bee8:	e033      	b.n	800bf52 <BUTTON_Callback+0xce>
 800beea:	4620      	mov	r0, r4
 800beec:	f007 fd06 	bl	80138fc <GUI_ALLOC_LockH>
 800bef0:	ac02      	add	r4, sp, #8
 800bef2:	9001      	str	r0, [sp, #4]
 800bef4:	3068      	adds	r0, #104	; 0x68
 800bef6:	f007 ff59 	bl	8013dac <GUI_ALLOC_FreePtr>
 800befa:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 800befe:	2103      	movs	r1, #3
 800bf00:	306c      	adds	r0, #108	; 0x6c
 800bf02:	f007 ff5b 	bl	8013dbc <GUI_ALLOC_FreePtrArray>
 800bf06:	4620      	mov	r0, r4
 800bf08:	f007 fd06 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bf0c:	e01e      	b.n	800bf4c <BUTTON_Callback+0xc8>
 800bf0e:	68ea      	ldr	r2, [r5, #12]
 800bf10:	ca0c      	ldmia	r2, {r2, r3}
 800bf12:	2a0d      	cmp	r2, #13
 800bf14:	d002      	beq.n	800bf1c <BUTTON_Callback+0x98>
 800bf16:	2a20      	cmp	r2, #32
 800bf18:	d007      	beq.n	800bf2a <BUTTON_Callback+0xa6>
 800bf1a:	e010      	b.n	800bf3e <BUTTON_Callback+0xba>
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	dd0e      	ble.n	800bf3e <BUTTON_Callback+0xba>
 800bf20:	4620      	mov	r0, r4
 800bf22:	f7ff ff57 	bl	800bdd4 <_OnButtonPressed>
 800bf26:	4620      	mov	r0, r4
 800bf28:	e005      	b.n	800bf36 <BUTTON_Callback+0xb2>
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	dd02      	ble.n	800bf36 <BUTTON_Callback+0xb2>
 800bf30:	f7ff ff50 	bl	800bdd4 <_OnButtonPressed>
 800bf34:	e00d      	b.n	800bf52 <BUTTON_Callback+0xce>
 800bf36:	2102      	movs	r1, #2
 800bf38:	f7ff ff64 	bl	800be04 <_OnButtonReleased>
 800bf3c:	e009      	b.n	800bf52 <BUTTON_Callback+0xce>
 800bf3e:	68eb      	ldr	r3, [r5, #12]
 800bf40:	b923      	cbnz	r3, 800bf4c <BUTTON_Callback+0xc8>
 800bf42:	4620      	mov	r0, r4
 800bf44:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bf48:	f7fc fed6 	bl	8008cf8 <WIDGET_AndState>
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	f001 fedb 	bl	800dd08 <WM_DefaultProc>
 800bf52:	b003      	add	sp, #12
 800bf54:	bd30      	pop	{r4, r5, pc}
 800bf56:	bf00      	nop
 800bf58:	2001d0b4 	.word	0x2001d0b4
 800bf5c:	200000b0 	.word	0x200000b0

0800bf60 <BUTTON_CreateUser>:
 800bf60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf62:	b087      	sub	sp, #28
 800bf64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bf66:	9400      	str	r4, [sp, #0]
 800bf68:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bf6a:	9401      	str	r4, [sp, #4]
 800bf6c:	4c15      	ldr	r4, [pc, #84]	; (800bfc4 <BUTTON_CreateUser+0x64>)
 800bf6e:	9402      	str	r4, [sp, #8]
 800bf70:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800bf72:	344c      	adds	r4, #76	; 0x4c
 800bf74:	9403      	str	r4, [sp, #12]
 800bf76:	f001 fad7 	bl	800d528 <WM_CreateWindowAsChild>
 800bf7a:	4607      	mov	r7, r0
 800bf7c:	b1f8      	cbz	r0, 800bfbe <BUTTON_CreateUser+0x5e>
 800bf7e:	f007 fcbd 	bl	80138fc <GUI_ALLOC_LockH>
 800bf82:	4d11      	ldr	r5, [pc, #68]	; (800bfc8 <BUTTON_CreateUser+0x68>)
 800bf84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bf86:	9005      	str	r0, [sp, #20]
 800bf88:	2210      	movs	r2, #16
 800bf8a:	f7fc fecb 	bl	8008d24 <WIDGET__Init>
 800bf8e:	ae06      	add	r6, sp, #24
 800bf90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf92:	f856 ed04 	ldr.w	lr, [r6, #-4]!
 800bf96:	f10e 0434 	add.w	r4, lr, #52	; 0x34
 800bf9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bfa0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bfa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bfa8:	4c08      	ldr	r4, [pc, #32]	; (800bfcc <BUTTON_CreateUser+0x6c>)
 800bfaa:	6823      	ldr	r3, [r4, #0]
 800bfac:	f8ce 3064 	str.w	r3, [lr, #100]	; 0x64
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	f007 fcb1 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bfb6:	6823      	ldr	r3, [r4, #0]
 800bfb8:	4638      	mov	r0, r7
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	4798      	blx	r3
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	b007      	add	sp, #28
 800bfc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfc4:	0800be85 	.word	0x0800be85
 800bfc8:	200000b4 	.word	0x200000b4
 800bfcc:	200000e4 	.word	0x200000e4

0800bfd0 <BUTTON_SetText>:
 800bfd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	4605      	mov	r5, r0
 800bfd6:	b300      	cbz	r0, 800c01a <BUTTON_SetText+0x4a>
 800bfd8:	f007 fc90 	bl	80138fc <GUI_ALLOC_LockH>
 800bfdc:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800bfde:	9000      	str	r0, [sp, #0]
 800bfe0:	4668      	mov	r0, sp
 800bfe2:	9601      	str	r6, [sp, #4]
 800bfe4:	f007 fc98 	bl	8013918 <GUI_ALLOC_UnlockH>
 800bfe8:	4621      	mov	r1, r4
 800bfea:	a801      	add	r0, sp, #4
 800bfec:	f004 fdbf 	bl	8010b6e <GUI__SetText>
 800bff0:	f1d0 0401 	rsbs	r4, r0, #1
 800bff4:	bf38      	it	cc
 800bff6:	2400      	movcc	r4, #0
 800bff8:	b984      	cbnz	r4, 800c01c <BUTTON_SetText+0x4c>
 800bffa:	9b01      	ldr	r3, [sp, #4]
 800bffc:	42b3      	cmp	r3, r6
 800bffe:	d008      	beq.n	800c012 <BUTTON_SetText+0x42>
 800c000:	4628      	mov	r0, r5
 800c002:	f007 fc7b 	bl	80138fc <GUI_ALLOC_LockH>
 800c006:	9b01      	ldr	r3, [sp, #4]
 800c008:	9000      	str	r0, [sp, #0]
 800c00a:	6683      	str	r3, [r0, #104]	; 0x68
 800c00c:	4668      	mov	r0, sp
 800c00e:	f007 fc83 	bl	8013918 <GUI_ALLOC_UnlockH>
 800c012:	4628      	mov	r0, r5
 800c014:	f001 fa47 	bl	800d4a6 <WM_InvalidateWindow>
 800c018:	e000      	b.n	800c01c <BUTTON_SetText+0x4c>
 800c01a:	2401      	movs	r4, #1
 800c01c:	4620      	mov	r0, r4
 800c01e:	b002      	add	sp, #8
 800c020:	bd70      	pop	{r4, r5, r6, pc}

0800c022 <WM__UpdateChildPositions>:
 800c022:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c026:	b087      	sub	sp, #28
 800c028:	69c4      	ldr	r4, [r0, #28]
 800c02a:	9303      	str	r3, [sp, #12]
 800c02c:	468a      	mov	sl, r1
 800c02e:	4693      	mov	fp, r2
 800c030:	2c00      	cmp	r4, #0
 800c032:	d06d      	beq.n	800c110 <WM__UpdateChildPositions+0xee>
 800c034:	4620      	mov	r0, r4
 800c036:	f007 fc61 	bl	80138fc <GUI_ALLOC_LockH>
 800c03a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800c03c:	9005      	str	r0, [sp, #20]
 800c03e:	f401 7320 	and.w	r3, r1, #640	; 0x280
 800c042:	2b80      	cmp	r3, #128	; 0x80
 800c044:	f8b0 8000 	ldrh.w	r8, [r0]
 800c048:	8842      	ldrh	r2, [r0, #2]
 800c04a:	8886      	ldrh	r6, [r0, #4]
 800c04c:	88c5      	ldrh	r5, [r0, #6]
 800c04e:	d008      	beq.n	800c062 <WM__UpdateChildPositions+0x40>
 800c050:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c054:	d108      	bne.n	800c068 <WM__UpdateChildPositions+0x46>
 800c056:	eb08 090a 	add.w	r9, r8, sl
 800c05a:	fa1f f989 	uxth.w	r9, r9
 800c05e:	9b03      	ldr	r3, [sp, #12]
 800c060:	e008      	b.n	800c074 <WM__UpdateChildPositions+0x52>
 800c062:	9803      	ldr	r0, [sp, #12]
 800c064:	b283      	uxth	r3, r0
 800c066:	e001      	b.n	800c06c <WM__UpdateChildPositions+0x4a>
 800c068:	fa1f f38a 	uxth.w	r3, sl
 800c06c:	eb03 0908 	add.w	r9, r3, r8
 800c070:	fa1f f989 	uxth.w	r9, r9
 800c074:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 800c078:	4433      	add	r3, r6
 800c07a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c07e:	b29b      	uxth	r3, r3
 800c080:	d008      	beq.n	800c094 <WM__UpdateChildPositions+0x72>
 800c082:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 800c086:	d108      	bne.n	800c09a <WM__UpdateChildPositions+0x78>
 800c088:	eb02 0c0b 	add.w	ip, r2, fp
 800c08c:	fa1f fc8c 	uxth.w	ip, ip
 800c090:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c092:	e008      	b.n	800c0a6 <WM__UpdateChildPositions+0x84>
 800c094:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c096:	b28f      	uxth	r7, r1
 800c098:	e001      	b.n	800c09e <WM__UpdateChildPositions+0x7c>
 800c09a:	fa1f f78b 	uxth.w	r7, fp
 800c09e:	eb07 0c02 	add.w	ip, r7, r2
 800c0a2:	fa1f fc8c 	uxth.w	ip, ip
 800c0a6:	fa0f f989 	sxth.w	r9, r9
 800c0aa:	fa0f f888 	sxth.w	r8, r8
 800c0ae:	b212      	sxth	r2, r2
 800c0b0:	442f      	add	r7, r5
 800c0b2:	fa0f fc8c 	sxth.w	ip, ip
 800c0b6:	ebb9 0108 	subs.w	r1, r9, r8
 800c0ba:	9202      	str	r2, [sp, #8]
 800c0bc:	b2bf      	uxth	r7, r7
 800c0be:	ebc2 020c 	rsb	r2, r2, ip
 800c0c2:	d100      	bne.n	800c0c6 <WM__UpdateChildPositions+0xa4>
 800c0c4:	b142      	cbz	r2, 800c0d8 <WM__UpdateChildPositions+0xb6>
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	9301      	str	r3, [sp, #4]
 800c0ca:	f8cd c000 	str.w	ip, [sp]
 800c0ce:	f000 fb30 	bl	800c732 <WM_MoveWindow>
 800c0d2:	f8dd c000 	ldr.w	ip, [sp]
 800c0d6:	9b01      	ldr	r3, [sp, #4]
 800c0d8:	b21b      	sxth	r3, r3
 800c0da:	ebc9 0903 	rsb	r9, r9, r3
 800c0de:	b236      	sxth	r6, r6
 800c0e0:	9b02      	ldr	r3, [sp, #8]
 800c0e2:	ebc6 0808 	rsb	r8, r6, r8
 800c0e6:	b23f      	sxth	r7, r7
 800c0e8:	b22d      	sxth	r5, r5
 800c0ea:	ebcc 0c07 	rsb	ip, ip, r7
 800c0ee:	1b5d      	subs	r5, r3, r5
 800c0f0:	eb19 0108 	adds.w	r1, r9, r8
 800c0f4:	eb0c 0205 	add.w	r2, ip, r5
 800c0f8:	d100      	bne.n	800c0fc <WM__UpdateChildPositions+0xda>
 800c0fa:	b112      	cbz	r2, 800c102 <WM__UpdateChildPositions+0xe0>
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f000 fa09 	bl	800c514 <WM_ResizeWindow>
 800c102:	a806      	add	r0, sp, #24
 800c104:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800c108:	6a1c      	ldr	r4, [r3, #32]
 800c10a:	f007 fc05 	bl	8013918 <GUI_ALLOC_UnlockH>
 800c10e:	e78f      	b.n	800c030 <WM__UpdateChildPositions+0xe>
 800c110:	b007      	add	sp, #28
 800c112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800c118 <WM__SendMessage>:
 800c118:	b570      	push	{r4, r5, r6, lr}
 800c11a:	4c0d      	ldr	r4, [pc, #52]	; (800c150 <WM__SendMessage+0x38>)
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	2b13      	cmp	r3, #19
 800c120:	4606      	mov	r6, r0
 800c122:	460d      	mov	r5, r1
 800c124:	dc12      	bgt.n	800c14c <WM__SendMessage+0x34>
 800c126:	f007 fbdf 	bl	80138e8 <GUI_ALLOC_h2p>
 800c12a:	6903      	ldr	r3, [r0, #16]
 800c12c:	606e      	str	r6, [r5, #4]
 800c12e:	b143      	cbz	r3, 800c142 <WM__SendMessage+0x2a>
 800c130:	6822      	ldr	r2, [r4, #0]
 800c132:	4628      	mov	r0, r5
 800c134:	3201      	adds	r2, #1
 800c136:	6022      	str	r2, [r4, #0]
 800c138:	4798      	blx	r3
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	3b01      	subs	r3, #1
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	bd70      	pop	{r4, r5, r6, pc}
 800c142:	4628      	mov	r0, r5
 800c144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c148:	f001 bdde 	b.w	800dd08 <WM_DefaultProc>
 800c14c:	bd70      	pop	{r4, r5, r6, pc}
 800c14e:	bf00      	nop
 800c150:	2001d0b8 	.word	0x2001d0b8

0800c154 <WM__Screen2Client>:
 800c154:	f9b0 3000 	ldrsh.w	r3, [r0]
 800c158:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c15c:	4608      	mov	r0, r1
 800c15e:	4252      	negs	r2, r2
 800c160:	4259      	negs	r1, r3
 800c162:	f006 b81b 	b.w	801219c <GUI_MoveRect>

0800c166 <WM__IsAncestor>:
 800c166:	b510      	push	{r4, lr}
 800c168:	460c      	mov	r4, r1
 800c16a:	b908      	cbnz	r0, 800c170 <WM__IsAncestor+0xa>
 800c16c:	2000      	movs	r0, #0
 800c16e:	bd10      	pop	{r4, pc}
 800c170:	2900      	cmp	r1, #0
 800c172:	d0fb      	beq.n	800c16c <WM__IsAncestor+0x6>
 800c174:	f007 fbb8 	bl	80138e8 <GUI_ALLOC_h2p>
 800c178:	6980      	ldr	r0, [r0, #24]
 800c17a:	42a0      	cmp	r0, r4
 800c17c:	d002      	beq.n	800c184 <WM__IsAncestor+0x1e>
 800c17e:	2800      	cmp	r0, #0
 800c180:	d1f8      	bne.n	800c174 <WM__IsAncestor+0xe>
 800c182:	e7f3      	b.n	800c16c <WM__IsAncestor+0x6>
 800c184:	2001      	movs	r0, #1
 800c186:	bd10      	pop	{r4, pc}

0800c188 <WM__IsAncestorOrSelf>:
 800c188:	4288      	cmp	r0, r1
 800c18a:	d001      	beq.n	800c190 <WM__IsAncestorOrSelf+0x8>
 800c18c:	f7ff bfeb 	b.w	800c166 <WM__IsAncestor>
 800c190:	2001      	movs	r0, #1
 800c192:	4770      	bx	lr

0800c194 <WM_InvalidateWindowAndDescs>:
 800c194:	b510      	push	{r4, lr}
 800c196:	4604      	mov	r4, r0
 800c198:	b170      	cbz	r0, 800c1b8 <WM_InvalidateWindowAndDescs+0x24>
 800c19a:	f001 f984 	bl	800d4a6 <WM_InvalidateWindow>
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f000 fc11 	bl	800c9c6 <WM_GetFirstChild>
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	b13c      	cbz	r4, 800c1b8 <WM_InvalidateWindowAndDescs+0x24>
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f7ff fff3 	bl	800c194 <WM_InvalidateWindowAndDescs>
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	f007 fb9a 	bl	80138e8 <GUI_ALLOC_h2p>
 800c1b4:	6a04      	ldr	r4, [r0, #32]
 800c1b6:	e7f6      	b.n	800c1a6 <WM_InvalidateWindowAndDescs+0x12>
 800c1b8:	bd10      	pop	{r4, pc}

0800c1ba <WM_ShowWindow>:
 800c1ba:	b513      	push	{r0, r1, r4, lr}
 800c1bc:	4604      	mov	r4, r0
 800c1be:	b170      	cbz	r0, 800c1de <WM_ShowWindow+0x24>
 800c1c0:	f007 fb9c 	bl	80138fc <GUI_ALLOC_LockH>
 800c1c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800c1c6:	9001      	str	r0, [sp, #4]
 800c1c8:	0793      	lsls	r3, r2, #30
 800c1ca:	d405      	bmi.n	800c1d8 <WM_ShowWindow+0x1e>
 800c1cc:	f042 0202 	orr.w	r2, r2, #2
 800c1d0:	6282      	str	r2, [r0, #40]	; 0x28
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f7ff ffde 	bl	800c194 <WM_InvalidateWindowAndDescs>
 800c1d8:	a801      	add	r0, sp, #4
 800c1da:	f007 fb9d 	bl	8013918 <GUI_ALLOC_UnlockH>
 800c1de:	b002      	add	sp, #8
 800c1e0:	bd10      	pop	{r4, pc}
	...

0800c1e4 <WM_SetUserClipRect>:
 800c1e4:	4b04      	ldr	r3, [pc, #16]	; (800c1f8 <WM_SetUserClipRect+0x14>)
 800c1e6:	b510      	push	{r4, lr}
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800c1ec:	6458      	str	r0, [r3, #68]	; 0x44
 800c1ee:	f000 ffb3 	bl	800d158 <WM__ActivateClipRect>
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	bd10      	pop	{r4, pc}
 800c1f6:	bf00      	nop
 800c1f8:	20000110 	.word	0x20000110

0800c1fc <WM_SetHasTrans>:
 800c1fc:	b513      	push	{r0, r1, r4, lr}
 800c1fe:	4604      	mov	r4, r0
 800c200:	b1b8      	cbz	r0, 800c232 <WM_SetHasTrans+0x36>
 800c202:	f007 fb7b 	bl	80138fc <GUI_ALLOC_LockH>
 800c206:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c208:	9001      	str	r0, [sp, #4]
 800c20a:	07db      	lsls	r3, r3, #31
 800c20c:	d40e      	bmi.n	800c22c <WM_SetHasTrans+0x30>
 800c20e:	4620      	mov	r0, r4
 800c210:	f008 fee6 	bl	8014fe0 <WM_ValidateWindow>
 800c214:	9b01      	ldr	r3, [sp, #4]
 800c216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c218:	f042 0201 	orr.w	r2, r2, #1
 800c21c:	629a      	str	r2, [r3, #40]	; 0x28
 800c21e:	4b06      	ldr	r3, [pc, #24]	; (800c238 <WM_SetHasTrans+0x3c>)
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	4620      	mov	r0, r4
 800c224:	3201      	adds	r2, #1
 800c226:	601a      	str	r2, [r3, #0]
 800c228:	f001 f93d 	bl	800d4a6 <WM_InvalidateWindow>
 800c22c:	a801      	add	r0, sp, #4
 800c22e:	f007 fb73 	bl	8013918 <GUI_ALLOC_UnlockH>
 800c232:	b002      	add	sp, #8
 800c234:	bd10      	pop	{r4, pc}
 800c236:	bf00      	nop
 800c238:	2001d5a8 	.word	0x2001d5a8

0800c23c <WM_GetHasTrans>:
 800c23c:	b508      	push	{r3, lr}
 800c23e:	b128      	cbz	r0, 800c24c <WM_GetHasTrans+0x10>
 800c240:	f007 fb52 	bl	80138e8 <GUI_ALLOC_h2p>
 800c244:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800c246:	f000 0001 	and.w	r0, r0, #1
 800c24a:	bd08      	pop	{r3, pc}
 800c24c:	bd08      	pop	{r3, pc}

0800c24e <WM_SetSize>:
 800c24e:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 800c252:	460e      	mov	r6, r1
 800c254:	4690      	mov	r8, r2
 800c256:	4607      	mov	r7, r0
 800c258:	b1d0      	cbz	r0, 800c290 <WM_SetSize+0x42>
 800c25a:	f007 fb4f 	bl	80138fc <GUI_ALLOC_LockH>
 800c25e:	4603      	mov	r3, r0
 800c260:	a802      	add	r0, sp, #8
 800c262:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800c266:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c26a:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800c26e:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c272:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c276:	1a8a      	subs	r2, r1, r2
 800c278:	1aed      	subs	r5, r5, r3
 800c27a:	43d2      	mvns	r2, r2
 800c27c:	43ed      	mvns	r5, r5
 800c27e:	4416      	add	r6, r2
 800c280:	4445      	add	r5, r8
 800c282:	f007 fb49 	bl	8013918 <GUI_ALLOC_UnlockH>
 800c286:	4638      	mov	r0, r7
 800c288:	4631      	mov	r1, r6
 800c28a:	462a      	mov	r2, r5
 800c28c:	f000 f942 	bl	800c514 <WM_ResizeWindow>
 800c290:	b003      	add	sp, #12
 800c292:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

0800c296 <_SetScrollbar>:
 800c296:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c298:	460d      	mov	r5, r1
 800c29a:	4611      	mov	r1, r2
 800c29c:	4606      	mov	r6, r0
 800c29e:	461f      	mov	r7, r3
 800c2a0:	f000 fbb6 	bl	800ca10 <WM_GetDialogItem>
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	b1a5      	cbz	r5, 800c2d2 <_SetScrollbar+0x3c>
 800c2a8:	b920      	cbnz	r0, 800c2b4 <_SetScrollbar+0x1e>
 800c2aa:	4630      	mov	r0, r6
 800c2ac:	4639      	mov	r1, r7
 800c2ae:	f007 ff6a 	bl	8014186 <SCROLLBAR_CreateAttached>
 800c2b2:	e014      	b.n	800c2de <_SetScrollbar+0x48>
 800c2b4:	f007 fb22 	bl	80138fc <GUI_ALLOC_LockH>
 800c2b8:	ab02      	add	r3, sp, #8
 800c2ba:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800c2bc:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c2c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c2c4:	f042 0202 	orr.w	r2, r2, #2
 800c2c8:	6282      	str	r2, [r0, #40]	; 0x28
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f007 fb24 	bl	8013918 <GUI_ALLOC_UnlockH>
 800c2d0:	e005      	b.n	800c2de <_SetScrollbar+0x48>
 800c2d2:	b120      	cbz	r0, 800c2de <_SetScrollbar+0x48>
 800c2d4:	f000 fa4a 	bl	800c76c <WM_HideWindow>
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f001 fc47 	bl	800db6c <WM__DeleteSecure>
 800c2de:	1c20      	adds	r0, r4, #0
 800c2e0:	bf18      	it	ne
 800c2e2:	2001      	movne	r0, #1
 800c2e4:	b003      	add	sp, #12
 800c2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2e8 <WM__SetScrollbarV>:
 800c2e8:	22fe      	movs	r2, #254	; 0xfe
 800c2ea:	2308      	movs	r3, #8
 800c2ec:	f7ff bfd3 	b.w	800c296 <_SetScrollbar>

0800c2f0 <WM__SetScrollbarH>:
 800c2f0:	22ff      	movs	r2, #255	; 0xff
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	f7ff bfcf 	b.w	800c296 <_SetScrollbar>

0800c2f8 <WM_SetScrollbarH>:
 800c2f8:	f7ff bffa 	b.w	800c2f0 <WM__SetScrollbarH>

0800c2fc <WM_SetScrollbarV>:
 800c2fc:	f7ff bff4 	b.w	800c2e8 <WM__SetScrollbarV>

0800c300 <WM_SetScrollState>:
 800c300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c302:	b130      	cbz	r0, 800c312 <WM_SetScrollState+0x12>
 800c304:	b129      	cbz	r1, 800c312 <WM_SetScrollState+0x12>
 800c306:	2324      	movs	r3, #36	; 0x24
 800c308:	9103      	str	r1, [sp, #12]
 800c30a:	4669      	mov	r1, sp
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	f001 f873 	bl	800d3f8 <WM_SendMessage>
 800c312:	b005      	add	sp, #20
 800c314:	f85d fb04 	ldr.w	pc, [sp], #4

0800c318 <_GetPrevChild>:
 800c318:	b510      	push	{r4, lr}
 800c31a:	4604      	mov	r4, r0
 800c31c:	b918      	cbnz	r0, 800c326 <_GetPrevChild+0xe>
 800c31e:	4620      	mov	r0, r4
 800c320:	f008 fe36 	bl	8014f90 <WM__GetLastSibling>
 800c324:	e003      	b.n	800c32e <_GetPrevChild+0x16>
 800c326:	f008 fe20 	bl	8014f6a <WM__GetPrevSibling>
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d0f7      	beq.n	800c31e <_GetPrevChild+0x6>
 800c32e:	42a0      	cmp	r0, r4
 800c330:	bf08      	it	eq
 800c332:	2000      	moveq	r0, #0
 800c334:	bd10      	pop	{r4, pc}

0800c336 <WM_SetFocusOnPrevChild>:
 800c336:	b538      	push	{r3, r4, r5, lr}
 800c338:	4604      	mov	r4, r0
 800c33a:	b1b0      	cbz	r0, 800c36a <WM_SetFocusOnPrevChild+0x34>
 800c33c:	f008 fe34 	bl	8014fa8 <WM__GetFocussedChild>
 800c340:	f7ff ffea 	bl	800c318 <_GetPrevChild>
 800c344:	4605      	mov	r5, r0
 800c346:	4604      	mov	r4, r0
 800c348:	4620      	mov	r0, r4
 800c34a:	f000 f9f6 	bl	800c73a <WM_IsFocussable>
 800c34e:	b930      	cbnz	r0, 800c35e <WM_SetFocusOnPrevChild+0x28>
 800c350:	b12c      	cbz	r4, 800c35e <WM_SetFocusOnPrevChild+0x28>
 800c352:	4620      	mov	r0, r4
 800c354:	f7ff ffe0 	bl	800c318 <_GetPrevChild>
 800c358:	42a8      	cmp	r0, r5
 800c35a:	4604      	mov	r4, r0
 800c35c:	d1f4      	bne.n	800c348 <WM_SetFocusOnPrevChild+0x12>
 800c35e:	4620      	mov	r0, r4
 800c360:	f000 f84a 	bl	800c3f8 <WM_SetFocus>
 800c364:	2800      	cmp	r0, #0
 800c366:	bf18      	it	ne
 800c368:	2400      	movne	r4, #0
 800c36a:	4620      	mov	r0, r4
 800c36c:	bd38      	pop	{r3, r4, r5, pc}

0800c36e <_GetNextChild>:
 800c36e:	b538      	push	{r3, r4, r5, lr}
 800c370:	4605      	mov	r5, r0
 800c372:	460c      	mov	r4, r1
 800c374:	b921      	cbnz	r1, 800c380 <_GetNextChild+0x12>
 800c376:	4628      	mov	r0, r5
 800c378:	f007 fab6 	bl	80138e8 <GUI_ALLOC_h2p>
 800c37c:	69c0      	ldr	r0, [r0, #28]
 800c37e:	e005      	b.n	800c38c <_GetNextChild+0x1e>
 800c380:	4608      	mov	r0, r1
 800c382:	f007 fab1 	bl	80138e8 <GUI_ALLOC_h2p>
 800c386:	6a00      	ldr	r0, [r0, #32]
 800c388:	2800      	cmp	r0, #0
 800c38a:	d0f4      	beq.n	800c376 <_GetNextChild+0x8>
 800c38c:	42a0      	cmp	r0, r4
 800c38e:	bf08      	it	eq
 800c390:	2000      	moveq	r0, #0
 800c392:	bd38      	pop	{r3, r4, r5, pc}

0800c394 <WM_SetFocusOnNextChild>:
 800c394:	b570      	push	{r4, r5, r6, lr}
 800c396:	4605      	mov	r5, r0
 800c398:	b340      	cbz	r0, 800c3ec <WM_SetFocusOnNextChild+0x58>
 800c39a:	f008 fe05 	bl	8014fa8 <WM__GetFocussedChild>
 800c39e:	4601      	mov	r1, r0
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	f7ff ffe4 	bl	800c36e <_GetNextChild>
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f000 f9c5 	bl	800c73a <WM_IsFocussable>
 800c3b0:	b938      	cbnz	r0, 800c3c2 <WM_SetFocusOnNextChild+0x2e>
 800c3b2:	b13c      	cbz	r4, 800c3c4 <WM_SetFocusOnNextChild+0x30>
 800c3b4:	4621      	mov	r1, r4
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f7ff ffd9 	bl	800c36e <_GetNextChild>
 800c3bc:	42b0      	cmp	r0, r6
 800c3be:	4604      	mov	r4, r0
 800c3c0:	d1f3      	bne.n	800c3aa <WM_SetFocusOnNextChild+0x16>
 800c3c2:	b90c      	cbnz	r4, 800c3c8 <WM_SetFocusOnNextChild+0x34>
 800c3c4:	2400      	movs	r4, #0
 800c3c6:	e012      	b.n	800c3ee <WM_SetFocusOnNextChild+0x5a>
 800c3c8:	4d0a      	ldr	r5, [pc, #40]	; (800c3f4 <WM_SetFocusOnNextChild+0x60>)
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	682e      	ldr	r6, [r5, #0]
 800c3ce:	f001 f86d 	bl	800d4ac <WM__GetTopLevelLayer>
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	d00b      	beq.n	800c3ee <WM_SetFocusOnNextChild+0x5a>
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f001 f868 	bl	800d4ac <WM__GetTopLevelLayer>
 800c3dc:	6028      	str	r0, [r5, #0]
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f000 f80a 	bl	800c3f8 <WM_SetFocus>
 800c3e4:	602e      	str	r6, [r5, #0]
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d1ec      	bne.n	800c3c4 <WM_SetFocusOnNextChild+0x30>
 800c3ea:	e000      	b.n	800c3ee <WM_SetFocusOnNextChild+0x5a>
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	bd70      	pop	{r4, r5, r6, pc}
 800c3f2:	bf00      	nop
 800c3f4:	2001d580 	.word	0x2001d580

0800c3f8 <WM_SetFocus>:
 800c3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3fa:	b087      	sub	sp, #28
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	2100      	movs	r1, #0
 800c400:	a802      	add	r0, sp, #8
 800c402:	2210      	movs	r2, #16
 800c404:	f00e fa0c 	bl	801a820 <memset>
 800c408:	2c00      	cmp	r4, #0
 800c40a:	d03a      	beq.n	800c482 <WM_SetFocus+0x8a>
 800c40c:	4b1f      	ldr	r3, [pc, #124]	; (800c48c <WM_SetFocus+0x94>)
 800c40e:	4a20      	ldr	r2, [pc, #128]	; (800c490 <WM_SetFocus+0x98>)
 800c410:	6819      	ldr	r1, [r3, #0]
 800c412:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800c416:	4284      	cmp	r4, r0
 800c418:	4616      	mov	r6, r2
 800c41a:	461f      	mov	r7, r3
 800c41c:	d031      	beq.n	800c482 <WM_SetFocus+0x8a>
 800c41e:	231e      	movs	r3, #30
 800c420:	e88d 0011 	stmia.w	sp, {r0, r4}
 800c424:	9302      	str	r3, [sp, #8]
 800c426:	b110      	cbz	r0, 800c42e <WM_SetFocus+0x36>
 800c428:	a902      	add	r1, sp, #8
 800c42a:	f7ff fe75 	bl	800c118 <WM__SendMessage>
 800c42e:	2301      	movs	r3, #1
 800c430:	4620      	mov	r0, r4
 800c432:	a902      	add	r1, sp, #8
 800c434:	9305      	str	r3, [sp, #20]
 800c436:	f7ff fe6f 	bl	800c118 <WM__SendMessage>
 800c43a:	9d05      	ldr	r5, [sp, #20]
 800c43c:	bb15      	cbnz	r5, 800c484 <WM_SetFocus+0x8c>
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
 800c444:	4620      	mov	r0, r4
 800c446:	f000 fa15 	bl	800c874 <WM_GetParent>
 800c44a:	4604      	mov	r4, r0
 800c44c:	b138      	cbz	r0, 800c45e <WM_SetFocus+0x66>
 800c44e:	2320      	movs	r3, #32
 800c450:	9302      	str	r3, [sp, #8]
 800c452:	a902      	add	r1, sp, #8
 800c454:	ab00      	add	r3, sp, #0
 800c456:	9305      	str	r3, [sp, #20]
 800c458:	f7ff fe5e 	bl	800c118 <WM__SendMessage>
 800c45c:	e7f2      	b.n	800c444 <WM_SetFocus+0x4c>
 800c45e:	9c00      	ldr	r4, [sp, #0]
 800c460:	4620      	mov	r0, r4
 800c462:	f000 f968 	bl	800c736 <WM_IsWindow>
 800c466:	b168      	cbz	r0, 800c484 <WM_SetFocus+0x8c>
 800c468:	4620      	mov	r0, r4
 800c46a:	f000 fa03 	bl	800c874 <WM_GetParent>
 800c46e:	4604      	mov	r4, r0
 800c470:	b140      	cbz	r0, 800c484 <WM_SetFocus+0x8c>
 800c472:	2320      	movs	r3, #32
 800c474:	9302      	str	r3, [sp, #8]
 800c476:	a902      	add	r1, sp, #8
 800c478:	ab00      	add	r3, sp, #0
 800c47a:	9305      	str	r3, [sp, #20]
 800c47c:	f7ff fe4c 	bl	800c118 <WM__SendMessage>
 800c480:	e7f2      	b.n	800c468 <WM_SetFocus+0x70>
 800c482:	2501      	movs	r5, #1
 800c484:	4628      	mov	r0, r5
 800c486:	b007      	add	sp, #28
 800c488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c48a:	bf00      	nop
 800c48c:	2001d580 	.word	0x2001d580
 800c490:	2001d570 	.word	0x2001d570

0800c494 <WM_SetCreateFlags>:
 800c494:	4b02      	ldr	r3, [pc, #8]	; (800c4a0 <WM_SetCreateFlags+0xc>)
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	6018      	str	r0, [r3, #0]
 800c49a:	4610      	mov	r0, r2
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop
 800c4a0:	2001d588 	.word	0x2001d588

0800c4a4 <WM__ReleaseCapture>:
 800c4a4:	b530      	push	{r4, r5, lr}
 800c4a6:	4d0a      	ldr	r5, [pc, #40]	; (800c4d0 <WM__ReleaseCapture+0x2c>)
 800c4a8:	4c0a      	ldr	r4, [pc, #40]	; (800c4d4 <WM__ReleaseCapture+0x30>)
 800c4aa:	682b      	ldr	r3, [r5, #0]
 800c4ac:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800c4b0:	b085      	sub	sp, #20
 800c4b2:	b150      	cbz	r0, 800c4ca <WM__ReleaseCapture+0x26>
 800c4b4:	a904      	add	r1, sp, #16
 800c4b6:	2318      	movs	r3, #24
 800c4b8:	f841 3d10 	str.w	r3, [r1, #-16]!
 800c4bc:	4669      	mov	r1, sp
 800c4be:	f7ff fe2b 	bl	800c118 <WM__SendMessage>
 800c4c2:	682b      	ldr	r3, [r5, #0]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800c4ca:	b005      	add	sp, #20
 800c4cc:	bd30      	pop	{r4, r5, pc}
 800c4ce:	bf00      	nop
 800c4d0:	2001d580 	.word	0x2001d580
 800c4d4:	2001d59c 	.word	0x2001d59c

0800c4d8 <WM_SetCapture>:
 800c4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4da:	4b09      	ldr	r3, [pc, #36]	; (800c500 <WM_SetCapture+0x28>)
 800c4dc:	4a09      	ldr	r2, [pc, #36]	; (800c504 <WM_SetCapture+0x2c>)
 800c4de:	4604      	mov	r4, r0
 800c4e0:	6818      	ldr	r0, [r3, #0]
 800c4e2:	460f      	mov	r7, r1
 800c4e4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 800c4e8:	42a1      	cmp	r1, r4
 800c4ea:	4615      	mov	r5, r2
 800c4ec:	461e      	mov	r6, r3
 800c4ee:	d001      	beq.n	800c4f4 <WM_SetCapture+0x1c>
 800c4f0:	f7ff ffd8 	bl	800c4a4 <WM__ReleaseCapture>
 800c4f4:	6833      	ldr	r3, [r6, #0]
 800c4f6:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
 800c4fa:	4b03      	ldr	r3, [pc, #12]	; (800c508 <WM_SetCapture+0x30>)
 800c4fc:	701f      	strb	r7, [r3, #0]
 800c4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c500:	2001d580 	.word	0x2001d580
 800c504:	2001d59c 	.word	0x2001d59c
 800c508:	2001d584 	.word	0x2001d584

0800c50c <WM_ReleaseCapture>:
 800c50c:	f7ff bfca 	b.w	800c4a4 <WM__ReleaseCapture>

0800c510 <WM_SendMessageNoPara>:
 800c510:	f008 bd0e 	b.w	8014f30 <WM__SendMessageNoPara>

0800c514 <WM_ResizeWindow>:
 800c514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c518:	ea51 0302 	orrs.w	r3, r1, r2
 800c51c:	b08a      	sub	sp, #40	; 0x28
 800c51e:	4680      	mov	r8, r0
 800c520:	460e      	mov	r6, r1
 800c522:	4617      	mov	r7, r2
 800c524:	d06e      	beq.n	800c604 <WM_ResizeWindow+0xf0>
 800c526:	2800      	cmp	r0, #0
 800c528:	d06c      	beq.n	800c604 <WM_ResizeWindow+0xf0>
 800c52a:	f007 f9e7 	bl	80138fc <GUI_ALLOC_LockH>
 800c52e:	4603      	mov	r3, r0
 800c530:	9003      	str	r0, [sp, #12]
 800c532:	c803      	ldmia	r0, {r0, r1}
 800c534:	ad04      	add	r5, sp, #16
 800c536:	ac06      	add	r4, sp, #24
 800c538:	e885 0003 	stmia.w	r5, {r0, r1}
 800c53c:	e884 0003 	stmia.w	r4, {r0, r1}
 800c540:	b17e      	cbz	r6, 800c562 <WM_ResizeWindow+0x4e>
 800c542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c544:	f402 7220 	and.w	r2, r2, #640	; 0x280
 800c548:	2a80      	cmp	r2, #128	; 0x80
 800c54a:	d105      	bne.n	800c558 <WM_ResizeWindow+0x44>
 800c54c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800c550:	1b96      	subs	r6, r2, r6
 800c552:	f8ad 6018 	strh.w	r6, [sp, #24]
 800c556:	e004      	b.n	800c562 <WM_ResizeWindow+0x4e>
 800c558:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c55c:	4416      	add	r6, r2
 800c55e:	f8ad 601c 	strh.w	r6, [sp, #28]
 800c562:	b187      	cbz	r7, 800c586 <WM_ResizeWindow+0x72>
 800c564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c566:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800c56a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800c56e:	d105      	bne.n	800c57c <WM_ResizeWindow+0x68>
 800c570:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800c574:	1bd7      	subs	r7, r2, r7
 800c576:	f8ad 701a 	strh.w	r7, [sp, #26]
 800c57a:	e004      	b.n	800c586 <WM_ResizeWindow+0x72>
 800c57c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c580:	4417      	add	r7, r2
 800c582:	f8ad 701e 	strh.w	r7, [sp, #30]
 800c586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c588:	03da      	lsls	r2, r3, #15
 800c58a:	d502      	bpl.n	800c592 <WM_ResizeWindow+0x7e>
 800c58c:	4640      	mov	r0, r8
 800c58e:	f000 fe17 	bl	800d1c0 <WM__InvalidateDrawAndDescs>
 800c592:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c596:	9b03      	ldr	r3, [sp, #12]
 800c598:	e883 0003 	stmia.w	r3, {r0, r1}
 800c59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c59e:	079b      	lsls	r3, r3, #30
 800c5a0:	d50a      	bpl.n	800c5b8 <WM_ResizeWindow+0xa4>
 800c5a2:	a808      	add	r0, sp, #32
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	4622      	mov	r2, r4
 800c5a8:	f005 fe08 	bl	80121bc <GUI_MergeRect>
 800c5ac:	9b03      	ldr	r3, [sp, #12]
 800c5ae:	a808      	add	r0, sp, #32
 800c5b0:	6999      	ldr	r1, [r3, #24]
 800c5b2:	6a1a      	ldr	r2, [r3, #32]
 800c5b4:	f000 ff08 	bl	800d3c8 <WM__InvalidateRectEx>
 800c5b8:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800c5bc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800c5c0:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 800c5c4:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800c5c8:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 800c5cc:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800c5d0:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 800c5d4:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800c5d8:	1ae3      	subs	r3, r4, r3
 800c5da:	1a38      	subs	r0, r7, r0
 800c5dc:	ac0a      	add	r4, sp, #40	; 0x28
 800c5de:	1aaa      	subs	r2, r5, r2
 800c5e0:	9000      	str	r0, [sp, #0]
 800c5e2:	1a71      	subs	r1, r6, r1
 800c5e4:	9803      	ldr	r0, [sp, #12]
 800c5e6:	f7ff fd1c 	bl	800c022 <WM__UpdateChildPositions>
 800c5ea:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800c5ee:	f101 0008 	add.w	r0, r1, #8
 800c5f2:	f004 fbb3 	bl	8010d5c <GUI__IntersectRect>
 800c5f6:	4640      	mov	r0, r8
 800c5f8:	2105      	movs	r1, #5
 800c5fa:	f000 ff01 	bl	800d400 <WM__SendMsgNoData>
 800c5fe:	4620      	mov	r0, r4
 800c600:	f007 f98a 	bl	8013918 <GUI_ALLOC_UnlockH>
 800c604:	b00a      	add	sp, #40	; 0x28
 800c606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c60a <WM_NotifyParent>:
 800c60a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c60c:	2326      	movs	r3, #38	; 0x26
 800c60e:	9103      	str	r1, [sp, #12]
 800c610:	4669      	mov	r1, sp
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	f008 ffbc 	bl	8015590 <WM_SendToParent>
 800c618:	b005      	add	sp, #20
 800c61a:	f85d fb04 	ldr.w	pc, [sp], #4

0800c61e <_MoveDescendents>:
 800c61e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c622:	b088      	sub	sp, #32
 800c624:	4606      	mov	r6, r0
 800c626:	460c      	mov	r4, r1
 800c628:	4615      	mov	r5, r2
 800c62a:	a804      	add	r0, sp, #16
 800c62c:	2100      	movs	r1, #0
 800c62e:	2210      	movs	r2, #16
 800c630:	f00e f8f6 	bl	801a820 <memset>
 800c634:	b336      	cbz	r6, 800c684 <_MoveDescendents+0x66>
 800c636:	4630      	mov	r0, r6
 800c638:	f007 f960 	bl	80138fc <GUI_ALLOC_LockH>
 800c63c:	4621      	mov	r1, r4
 800c63e:	462a      	mov	r2, r5
 800c640:	9001      	str	r0, [sp, #4]
 800c642:	f005 fdab 	bl	801219c <GUI_MoveRect>
 800c646:	9801      	ldr	r0, [sp, #4]
 800c648:	4621      	mov	r1, r4
 800c64a:	3008      	adds	r0, #8
 800c64c:	462a      	mov	r2, r5
 800c64e:	f005 fda5 	bl	801219c <GUI_MoveRect>
 800c652:	a808      	add	r0, sp, #32
 800c654:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 800c658:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800c65c:	6a17      	ldr	r7, [r2, #32]
 800c65e:	f007 f95b 	bl	8013918 <GUI_ALLOC_UnlockH>
 800c662:	4640      	mov	r0, r8
 800c664:	4621      	mov	r1, r4
 800c666:	462a      	mov	r2, r5
 800c668:	f7ff ffd9 	bl	800c61e <_MoveDescendents>
 800c66c:	2303      	movs	r3, #3
 800c66e:	9304      	str	r3, [sp, #16]
 800c670:	4630      	mov	r0, r6
 800c672:	ab02      	add	r3, sp, #8
 800c674:	a904      	add	r1, sp, #16
 800c676:	9307      	str	r3, [sp, #28]
 800c678:	9402      	str	r4, [sp, #8]
 800c67a:	9503      	str	r5, [sp, #12]
 800c67c:	463e      	mov	r6, r7
 800c67e:	f7ff fd4b 	bl	800c118 <WM__SendMessage>
 800c682:	e7d7      	b.n	800c634 <_MoveDescendents+0x16>
 800c684:	b008      	add	sp, #32
 800c686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c68a <WM__MoveWindow>:
 800c68a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c68e:	b08b      	sub	sp, #44	; 0x2c
 800c690:	4606      	mov	r6, r0
 800c692:	460d      	mov	r5, r1
 800c694:	4614      	mov	r4, r2
 800c696:	a806      	add	r0, sp, #24
 800c698:	2100      	movs	r1, #0
 800c69a:	2210      	movs	r2, #16
 800c69c:	f00e f8c0 	bl	801a820 <memset>
 800c6a0:	2e00      	cmp	r6, #0
 800c6a2:	d043      	beq.n	800c72c <WM__MoveWindow+0xa2>
 800c6a4:	b90d      	cbnz	r5, 800c6aa <WM__MoveWindow+0x20>
 800c6a6:	2c00      	cmp	r4, #0
 800c6a8:	d040      	beq.n	800c72c <WM__MoveWindow+0xa2>
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f007 f926 	bl	80138fc <GUI_ALLOC_LockH>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	9001      	str	r0, [sp, #4]
 800c6b4:	c803      	ldmia	r0, {r0, r1}
 800c6b6:	f10d 0808 	add.w	r8, sp, #8
 800c6ba:	e888 0003 	stmia.w	r8, {r0, r1}
 800c6be:	4622      	mov	r2, r4
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	4629      	mov	r1, r5
 800c6c4:	f005 fd6a 	bl	801219c <GUI_MoveRect>
 800c6c8:	9801      	ldr	r0, [sp, #4]
 800c6ca:	af0a      	add	r7, sp, #40	; 0x28
 800c6cc:	4629      	mov	r1, r5
 800c6ce:	4622      	mov	r2, r4
 800c6d0:	3008      	adds	r0, #8
 800c6d2:	f005 fd63 	bl	801219c <GUI_MoveRect>
 800c6d6:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 800c6da:	f8d3 901c 	ldr.w	r9, [r3, #28]
 800c6de:	4638      	mov	r0, r7
 800c6e0:	f007 f91a 	bl	8013918 <GUI_ALLOC_UnlockH>
 800c6e4:	4622      	mov	r2, r4
 800c6e6:	4648      	mov	r0, r9
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	f7ff ff98 	bl	800c61e <_MoveDescendents>
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f007 f904 	bl	80138fc <GUI_ALLOC_LockH>
 800c6f4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800c6f6:	9001      	str	r0, [sp, #4]
 800c6f8:	0792      	lsls	r2, r2, #30
 800c6fa:	d50a      	bpl.n	800c712 <WM__MoveWindow+0x88>
 800c6fc:	6981      	ldr	r1, [r0, #24]
 800c6fe:	b141      	cbz	r1, 800c712 <WM__MoveWindow+0x88>
 800c700:	6a02      	ldr	r2, [r0, #32]
 800c702:	f000 fe4c 	bl	800d39e <WM__InvalidateParent>
 800c706:	9b01      	ldr	r3, [sp, #4]
 800c708:	4640      	mov	r0, r8
 800c70a:	6999      	ldr	r1, [r3, #24]
 800c70c:	6a1a      	ldr	r2, [r3, #32]
 800c70e:	f000 fe46 	bl	800d39e <WM__InvalidateParent>
 800c712:	4638      	mov	r0, r7
 800c714:	f007 f900 	bl	8013918 <GUI_ALLOC_UnlockH>
 800c718:	2303      	movs	r3, #3
 800c71a:	9306      	str	r3, [sp, #24]
 800c71c:	4630      	mov	r0, r6
 800c71e:	ab04      	add	r3, sp, #16
 800c720:	a906      	add	r1, sp, #24
 800c722:	9309      	str	r3, [sp, #36]	; 0x24
 800c724:	9504      	str	r5, [sp, #16]
 800c726:	9405      	str	r4, [sp, #20]
 800c728:	f7ff fcf6 	bl	800c118 <WM__SendMessage>
 800c72c:	b00b      	add	sp, #44	; 0x2c
 800c72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c732 <WM_MoveWindow>:
 800c732:	f7ff bfaa 	b.w	800c68a <WM__MoveWindow>

0800c736 <WM_IsWindow>:
 800c736:	f000 bd33 	b.w	800d1a0 <WM__IsWindow>

0800c73a <WM_IsFocussable>:
 800c73a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c73c:	4604      	mov	r4, r0
 800c73e:	b908      	cbnz	r0, 800c744 <WM_IsFocussable+0xa>
 800c740:	2000      	movs	r0, #0
 800c742:	e011      	b.n	800c768 <WM_IsFocussable+0x2e>
 800c744:	f007 f8d0 	bl	80138e8 <GUI_ALLOC_h2p>
 800c748:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c74a:	079a      	lsls	r2, r3, #30
 800c74c:	d5f8      	bpl.n	800c740 <WM_IsFocussable+0x6>
 800c74e:	f013 0310 	ands.w	r3, r3, #16
 800c752:	d1f5      	bne.n	800c740 <WM_IsFocussable+0x6>
 800c754:	a904      	add	r1, sp, #16
 800c756:	9303      	str	r3, [sp, #12]
 800c758:	231f      	movs	r3, #31
 800c75a:	f841 3d10 	str.w	r3, [r1, #-16]!
 800c75e:	4620      	mov	r0, r4
 800c760:	4669      	mov	r1, sp
 800c762:	f000 fe49 	bl	800d3f8 <WM_SendMessage>
 800c766:	9803      	ldr	r0, [sp, #12]
 800c768:	b004      	add	sp, #16
 800c76a:	bd10      	pop	{r4, pc}

0800c76c <WM_HideWindow>:
 800c76c:	b513      	push	{r0, r1, r4, lr}
 800c76e:	b188      	cbz	r0, 800c794 <WM_HideWindow+0x28>
 800c770:	f007 f8c4 	bl	80138fc <GUI_ALLOC_LockH>
 800c774:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800c776:	ac02      	add	r4, sp, #8
 800c778:	0791      	lsls	r1, r2, #30
 800c77a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c77e:	d506      	bpl.n	800c78e <WM_HideWindow+0x22>
 800c780:	f022 0202 	bic.w	r2, r2, #2
 800c784:	6282      	str	r2, [r0, #40]	; 0x28
 800c786:	6981      	ldr	r1, [r0, #24]
 800c788:	6a02      	ldr	r2, [r0, #32]
 800c78a:	f000 fe1d 	bl	800d3c8 <WM__InvalidateRectEx>
 800c78e:	4620      	mov	r0, r4
 800c790:	f007 f8c2 	bl	8013918 <GUI_ALLOC_UnlockH>
 800c794:	b002      	add	sp, #8
 800c796:	bd10      	pop	{r4, pc}

0800c798 <WM_HasFocus>:
 800c798:	4b04      	ldr	r3, [pc, #16]	; (800c7ac <WM_HasFocus+0x14>)
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	4b04      	ldr	r3, [pc, #16]	; (800c7b0 <WM_HasFocus+0x18>)
 800c79e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7a2:	1ac3      	subs	r3, r0, r3
 800c7a4:	4258      	negs	r0, r3
 800c7a6:	4158      	adcs	r0, r3
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	2001d580 	.word	0x2001d580
 800c7b0:	2001d570 	.word	0x2001d570

0800c7b4 <WM_GetWindowSizeX>:
 800c7b4:	b513      	push	{r0, r1, r4, lr}
 800c7b6:	b908      	cbnz	r0, 800c7bc <WM_GetWindowSizeX+0x8>
 800c7b8:	f000 ffea 	bl	800d790 <WM_GetActiveWindow>
 800c7bc:	f007 f89e 	bl	80138fc <GUI_ALLOC_LockH>
 800c7c0:	ab02      	add	r3, sp, #8
 800c7c2:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c7c6:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c7ca:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	1aa4      	subs	r4, r4, r2
 800c7d2:	f007 f8a1 	bl	8013918 <GUI_ALLOC_UnlockH>
 800c7d6:	3401      	adds	r4, #1
 800c7d8:	4620      	mov	r0, r4
 800c7da:	b002      	add	sp, #8
 800c7dc:	bd10      	pop	{r4, pc}

0800c7de <WM_GetWindowSizeY>:
 800c7de:	b513      	push	{r0, r1, r4, lr}
 800c7e0:	b908      	cbnz	r0, 800c7e6 <WM_GetWindowSizeY+0x8>
 800c7e2:	f000 ffd5 	bl	800d790 <WM_GetActiveWindow>
 800c7e6:	f007 f889 	bl	80138fc <GUI_ALLOC_LockH>
 800c7ea:	ab02      	add	r3, sp, #8
 800c7ec:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c7f0:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c7f4:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	1aa4      	subs	r4, r4, r2
 800c7fc:	f007 f88c 	bl	8013918 <GUI_ALLOC_UnlockH>
 800c800:	3401      	adds	r4, #1
 800c802:	4620      	mov	r0, r4
 800c804:	b002      	add	sp, #8
 800c806:	bd10      	pop	{r4, pc}

0800c808 <_GetDialogItem>:
 800c808:	b570      	push	{r4, r5, r6, lr}
 800c80a:	4606      	mov	r6, r0
 800c80c:	460d      	mov	r5, r1
 800c80e:	f007 f86b 	bl	80138e8 <GUI_ALLOC_h2p>
 800c812:	69c4      	ldr	r4, [r0, #28]
 800c814:	b14c      	cbz	r4, 800c82a <_GetDialogItem+0x22>
 800c816:	4620      	mov	r0, r4
 800c818:	f000 f8b4 	bl	800c984 <WM_GetId>
 800c81c:	42a8      	cmp	r0, r5
 800c81e:	4620      	mov	r0, r4
 800c820:	d013      	beq.n	800c84a <_GetDialogItem+0x42>
 800c822:	f007 f861 	bl	80138e8 <GUI_ALLOC_h2p>
 800c826:	6a04      	ldr	r4, [r0, #32]
 800c828:	e7f4      	b.n	800c814 <_GetDialogItem+0xc>
 800c82a:	4630      	mov	r0, r6
 800c82c:	f007 f85c 	bl	80138e8 <GUI_ALLOC_h2p>
 800c830:	69c4      	ldr	r4, [r0, #28]
 800c832:	4620      	mov	r0, r4
 800c834:	b144      	cbz	r4, 800c848 <_GetDialogItem+0x40>
 800c836:	4629      	mov	r1, r5
 800c838:	f7ff ffe6 	bl	800c808 <_GetDialogItem>
 800c83c:	b928      	cbnz	r0, 800c84a <_GetDialogItem+0x42>
 800c83e:	4620      	mov	r0, r4
 800c840:	f007 f852 	bl	80138e8 <GUI_ALLOC_h2p>
 800c844:	6a04      	ldr	r4, [r0, #32]
 800c846:	e7f4      	b.n	800c832 <_GetDialogItem+0x2a>
 800c848:	bd70      	pop	{r4, r5, r6, pc}
 800c84a:	bd70      	pop	{r4, r5, r6, pc}

0800c84c <WM_GetScrollbarH>:
 800c84c:	b110      	cbz	r0, 800c854 <WM_GetScrollbarH+0x8>
 800c84e:	21ff      	movs	r1, #255	; 0xff
 800c850:	f7ff bfda 	b.w	800c808 <_GetDialogItem>
 800c854:	4770      	bx	lr

0800c856 <WM_GetScrollbarV>:
 800c856:	b110      	cbz	r0, 800c85e <WM_GetScrollbarV+0x8>
 800c858:	21fe      	movs	r1, #254	; 0xfe
 800c85a:	f7ff bfd5 	b.w	800c808 <_GetDialogItem>
 800c85e:	4770      	bx	lr

0800c860 <WM_GetScrollState>:
 800c860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c862:	2323      	movs	r3, #35	; 0x23
 800c864:	9103      	str	r1, [sp, #12]
 800c866:	4669      	mov	r1, sp
 800c868:	9300      	str	r3, [sp, #0]
 800c86a:	f000 fdc5 	bl	800d3f8 <WM_SendMessage>
 800c86e:	b005      	add	sp, #20
 800c870:	f85d fb04 	ldr.w	pc, [sp], #4

0800c874 <WM_GetParent>:
 800c874:	b508      	push	{r3, lr}
 800c876:	4603      	mov	r3, r0
 800c878:	b110      	cbz	r0, 800c880 <WM_GetParent+0xc>
 800c87a:	f007 f835 	bl	80138e8 <GUI_ALLOC_h2p>
 800c87e:	6983      	ldr	r3, [r0, #24]
 800c880:	4618      	mov	r0, r3
 800c882:	bd08      	pop	{r3, pc}

0800c884 <WM_GetWindowOrgX>:
 800c884:	b508      	push	{r3, lr}
 800c886:	b120      	cbz	r0, 800c892 <WM_GetWindowOrgX+0xe>
 800c888:	f007 f82e 	bl	80138e8 <GUI_ALLOC_h2p>
 800c88c:	f9b0 0000 	ldrsh.w	r0, [r0]
 800c890:	bd08      	pop	{r3, pc}
 800c892:	bd08      	pop	{r3, pc}

0800c894 <WM_GetWindowOrgY>:
 800c894:	b508      	push	{r3, lr}
 800c896:	b120      	cbz	r0, 800c8a2 <WM_GetWindowOrgY+0xe>
 800c898:	f007 f826 	bl	80138e8 <GUI_ALLOC_h2p>
 800c89c:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800c8a0:	bd08      	pop	{r3, pc}
 800c8a2:	bd08      	pop	{r3, pc}

0800c8a4 <WM_GetOrgX>:
 800c8a4:	4b02      	ldr	r3, [pc, #8]	; (800c8b0 <WM_GetOrgX+0xc>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800c8aa:	f7ff bfeb 	b.w	800c884 <WM_GetWindowOrgX>
 800c8ae:	bf00      	nop
 800c8b0:	20000110 	.word	0x20000110

0800c8b4 <WM_GetOrgY>:
 800c8b4:	4b02      	ldr	r3, [pc, #8]	; (800c8c0 <WM_GetOrgY+0xc>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800c8ba:	f7ff bfeb 	b.w	800c894 <WM_GetWindowOrgY>
 800c8be:	bf00      	nop
 800c8c0:	20000110 	.word	0x20000110

0800c8c4 <WM_GetInsideRectExScrollbar>:
 800c8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8c6:	460c      	mov	r4, r1
 800c8c8:	b087      	sub	sp, #28
 800c8ca:	4606      	mov	r6, r0
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d04b      	beq.n	800c968 <WM_GetInsideRectExScrollbar+0xa4>
 800c8d0:	2900      	cmp	r1, #0
 800c8d2:	d049      	beq.n	800c968 <WM_GetInsideRectExScrollbar+0xa4>
 800c8d4:	21ff      	movs	r1, #255	; 0xff
 800c8d6:	f000 f89b 	bl	800ca10 <WM_GetDialogItem>
 800c8da:	21fe      	movs	r1, #254	; 0xfe
 800c8dc:	4605      	mov	r5, r0
 800c8de:	4630      	mov	r0, r6
 800c8e0:	f000 f896 	bl	800ca10 <WM_GetDialogItem>
 800c8e4:	4669      	mov	r1, sp
 800c8e6:	4607      	mov	r7, r0
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f008 fedf 	bl	80156ac <WM_GetWindowRectEx>
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	a902      	add	r1, sp, #8
 800c8f2:	f000 f83b 	bl	800c96c <WM_GetInsideRectEx>
 800c8f6:	b1c7      	cbz	r7, 800c92a <WM_GetInsideRectExScrollbar+0x66>
 800c8f8:	4638      	mov	r0, r7
 800c8fa:	a904      	add	r1, sp, #16
 800c8fc:	f008 fed6 	bl	80156ac <WM_GetWindowRectEx>
 800c900:	f9bd 1000 	ldrsh.w	r1, [sp]
 800c904:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 800c908:	a804      	add	r0, sp, #16
 800c90a:	4249      	negs	r1, r1
 800c90c:	4252      	negs	r2, r2
 800c90e:	f005 fc45 	bl	801219c <GUI_MoveRect>
 800c912:	4638      	mov	r0, r7
 800c914:	f000 f850 	bl	800c9b8 <WM_GetFlags>
 800c918:	f000 0082 	and.w	r0, r0, #130	; 0x82
 800c91c:	2882      	cmp	r0, #130	; 0x82
 800c91e:	d104      	bne.n	800c92a <WM_GetInsideRectExScrollbar+0x66>
 800c920:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800c924:	3b01      	subs	r3, #1
 800c926:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c92a:	b1cd      	cbz	r5, 800c960 <WM_GetInsideRectExScrollbar+0x9c>
 800c92c:	4628      	mov	r0, r5
 800c92e:	a904      	add	r1, sp, #16
 800c930:	f008 febc 	bl	80156ac <WM_GetWindowRectEx>
 800c934:	f9bd 1000 	ldrsh.w	r1, [sp]
 800c938:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 800c93c:	a804      	add	r0, sp, #16
 800c93e:	4249      	negs	r1, r1
 800c940:	4252      	negs	r2, r2
 800c942:	f005 fc2b 	bl	801219c <GUI_MoveRect>
 800c946:	4628      	mov	r0, r5
 800c948:	f000 f836 	bl	800c9b8 <WM_GetFlags>
 800c94c:	f400 7081 	and.w	r0, r0, #258	; 0x102
 800c950:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 800c954:	d104      	bne.n	800c960 <WM_GetInsideRectExScrollbar+0x9c>
 800c956:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800c95a:	3b01      	subs	r3, #1
 800c95c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c960:	ab02      	add	r3, sp, #8
 800c962:	cb03      	ldmia	r3!, {r0, r1}
 800c964:	6020      	str	r0, [r4, #0]
 800c966:	6061      	str	r1, [r4, #4]
 800c968:	b007      	add	sp, #28
 800c96a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c96c <WM_GetInsideRectEx>:
 800c96c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c96e:	9103      	str	r1, [sp, #12]
 800c970:	a904      	add	r1, sp, #16
 800c972:	2314      	movs	r3, #20
 800c974:	f841 3d10 	str.w	r3, [r1, #-16]!
 800c978:	4669      	mov	r1, sp
 800c97a:	f000 fd3d 	bl	800d3f8 <WM_SendMessage>
 800c97e:	b005      	add	sp, #20
 800c980:	f85d fb04 	ldr.w	pc, [sp], #4

0800c984 <WM_GetId>:
 800c984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c986:	4604      	mov	r4, r0
 800c988:	2210      	movs	r2, #16
 800c98a:	4668      	mov	r0, sp
 800c98c:	2100      	movs	r1, #0
 800c98e:	f00d ff47 	bl	801a820 <memset>
 800c992:	2315      	movs	r3, #21
 800c994:	4620      	mov	r0, r4
 800c996:	4669      	mov	r1, sp
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	f000 fd2d 	bl	800d3f8 <WM_SendMessage>
 800c99e:	9803      	ldr	r0, [sp, #12]
 800c9a0:	b004      	add	sp, #16
 800c9a2:	bd10      	pop	{r4, pc}

0800c9a4 <WM_GetFocussedWindow>:
 800c9a4:	4b02      	ldr	r3, [pc, #8]	; (800c9b0 <WM_GetFocussedWindow+0xc>)
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	4b02      	ldr	r3, [pc, #8]	; (800c9b4 <WM_GetFocussedWindow+0x10>)
 800c9aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c9ae:	4770      	bx	lr
 800c9b0:	2001d580 	.word	0x2001d580
 800c9b4:	2001d570 	.word	0x2001d570

0800c9b8 <WM_GetFlags>:
 800c9b8:	b508      	push	{r3, lr}
 800c9ba:	b118      	cbz	r0, 800c9c4 <WM_GetFlags+0xc>
 800c9bc:	f006 ff94 	bl	80138e8 <GUI_ALLOC_h2p>
 800c9c0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 800c9c2:	bd08      	pop	{r3, pc}
 800c9c4:	bd08      	pop	{r3, pc}

0800c9c6 <WM_GetFirstChild>:
 800c9c6:	b508      	push	{r3, lr}
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	b110      	cbz	r0, 800c9d2 <WM_GetFirstChild+0xc>
 800c9cc:	f006 ff8c 	bl	80138e8 <GUI_ALLOC_h2p>
 800c9d0:	69c3      	ldr	r3, [r0, #28]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	bd08      	pop	{r3, pc}

0800c9d6 <_GetDialogItem>:
 800c9d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9d8:	460d      	mov	r5, r1
 800c9da:	f006 ff8f 	bl	80138fc <GUI_ALLOC_LockH>
 800c9de:	ab02      	add	r3, sp, #8
 800c9e0:	69c4      	ldr	r4, [r0, #28]
 800c9e2:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f006 ff96 	bl	8013918 <GUI_ALLOC_UnlockH>
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	b16c      	cbz	r4, 800ca0c <_GetDialogItem+0x36>
 800c9f0:	f7ff ffc8 	bl	800c984 <WM_GetId>
 800c9f4:	42a8      	cmp	r0, r5
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	d008      	beq.n	800ca0c <_GetDialogItem+0x36>
 800c9fa:	4629      	mov	r1, r5
 800c9fc:	f7ff ffeb 	bl	800c9d6 <_GetDialogItem>
 800ca00:	b920      	cbnz	r0, 800ca0c <_GetDialogItem+0x36>
 800ca02:	4620      	mov	r0, r4
 800ca04:	f006 ff70 	bl	80138e8 <GUI_ALLOC_h2p>
 800ca08:	6a04      	ldr	r4, [r0, #32]
 800ca0a:	e7ef      	b.n	800c9ec <_GetDialogItem+0x16>
 800ca0c:	b003      	add	sp, #12
 800ca0e:	bd30      	pop	{r4, r5, pc}

0800ca10 <WM_GetDialogItem>:
 800ca10:	b108      	cbz	r0, 800ca16 <WM_GetDialogItem+0x6>
 800ca12:	f7ff bfe0 	b.w	800c9d6 <_GetDialogItem>
 800ca16:	4770      	bx	lr

0800ca18 <WM_GetDesktopWindow>:
 800ca18:	4b03      	ldr	r3, [pc, #12]	; (800ca28 <WM_GetDesktopWindow+0x10>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	7c5a      	ldrb	r2, [r3, #17]
 800ca1e:	4b03      	ldr	r3, [pc, #12]	; (800ca2c <WM_GetDesktopWindow+0x14>)
 800ca20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	20000110 	.word	0x20000110
 800ca2c:	2001d560 	.word	0x2001d560

0800ca30 <WM_GetClientWindow>:
 800ca30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca32:	2300      	movs	r3, #0
 800ca34:	a904      	add	r1, sp, #16
 800ca36:	9303      	str	r3, [sp, #12]
 800ca38:	2317      	movs	r3, #23
 800ca3a:	f841 3d10 	str.w	r3, [r1, #-16]!
 800ca3e:	4669      	mov	r1, sp
 800ca40:	f000 fcda 	bl	800d3f8 <WM_SendMessage>
 800ca44:	9803      	ldr	r0, [sp, #12]
 800ca46:	b005      	add	sp, #20
 800ca48:	f85d fb04 	ldr.w	pc, [sp], #4

0800ca4c <WM__GetClientRectEx>:
 800ca4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca4e:	460d      	mov	r5, r1
 800ca50:	b158      	cbz	r0, 800ca6a <WM__GetClientRectEx+0x1e>
 800ca52:	b151      	cbz	r1, 800ca6a <WM__GetClientRectEx+0x1e>
 800ca54:	f006 ff52 	bl	80138fc <GUI_ALLOC_LockH>
 800ca58:	ac02      	add	r4, sp, #8
 800ca5a:	4629      	mov	r1, r5
 800ca5c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ca60:	f000 fcd9 	bl	800d416 <WM__GetClientRectWin>
 800ca64:	4620      	mov	r0, r4
 800ca66:	f006 ff57 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ca6a:	b003      	add	sp, #12
 800ca6c:	bd30      	pop	{r4, r5, pc}

0800ca6e <WM_GetClientRectEx>:
 800ca6e:	f7ff bfed 	b.w	800ca4c <WM__GetClientRectEx>
	...

0800ca74 <WM_GetClientRect>:
 800ca74:	4b04      	ldr	r3, [pc, #16]	; (800ca88 <WM_GetClientRect+0x14>)
 800ca76:	4601      	mov	r1, r0
 800ca78:	6818      	ldr	r0, [r3, #0]
 800ca7a:	b910      	cbnz	r0, 800ca82 <WM_GetClientRect+0xe>
 800ca7c:	4b03      	ldr	r3, [pc, #12]	; (800ca8c <WM_GetClientRect+0x18>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ca82:	f7ff bfe3 	b.w	800ca4c <WM__GetClientRectEx>
 800ca86:	bf00      	nop
 800ca88:	2001d55c 	.word	0x2001d55c
 800ca8c:	20000110 	.word	0x20000110

0800ca90 <WM_CheckScrollBounds>:
 800ca90:	6802      	ldr	r2, [r0, #0]
 800ca92:	6883      	ldr	r3, [r0, #8]
 800ca94:	1ad3      	subs	r3, r2, r3
 800ca96:	6842      	ldr	r2, [r0, #4]
 800ca98:	2a00      	cmp	r2, #0
 800ca9a:	bfbc      	itt	lt
 800ca9c:	2200      	movlt	r2, #0
 800ca9e:	6042      	strlt	r2, [r0, #4]
 800caa0:	6842      	ldr	r2, [r0, #4]
 800caa2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800caa6:	429a      	cmp	r2, r3
 800caa8:	bfc8      	it	gt
 800caaa:	6043      	strgt	r3, [r0, #4]
 800caac:	4770      	bx	lr

0800caae <WM_CheckScrollPos>:
 800caae:	b570      	push	{r4, r5, r6, lr}
 800cab0:	6845      	ldr	r5, [r0, #4]
 800cab2:	4604      	mov	r4, r0
 800cab4:	6880      	ldr	r0, [r0, #8]
 800cab6:	182e      	adds	r6, r5, r0
 800cab8:	428e      	cmp	r6, r1
 800caba:	dc04      	bgt.n	800cac6 <WM_CheckScrollPos+0x18>
 800cabc:	f1c0 0001 	rsb	r0, r0, #1
 800cac0:	4408      	add	r0, r1
 800cac2:	4403      	add	r3, r0
 800cac4:	6063      	str	r3, [r4, #4]
 800cac6:	6863      	ldr	r3, [r4, #4]
 800cac8:	4299      	cmp	r1, r3
 800caca:	bfb8      	it	lt
 800cacc:	ebc2 0101 	rsblt	r1, r2, r1
 800cad0:	4620      	mov	r0, r4
 800cad2:	bfb8      	it	lt
 800cad4:	6061      	strlt	r1, [r4, #4]
 800cad6:	f7ff ffdb 	bl	800ca90 <WM_CheckScrollBounds>
 800cada:	6860      	ldr	r0, [r4, #4]
 800cadc:	1b40      	subs	r0, r0, r5
 800cade:	bd70      	pop	{r4, r5, r6, pc}

0800cae0 <WM_SetScrollValue>:
 800cae0:	b538      	push	{r3, r4, r5, lr}
 800cae2:	4604      	mov	r4, r0
 800cae4:	6845      	ldr	r5, [r0, #4]
 800cae6:	6041      	str	r1, [r0, #4]
 800cae8:	f7ff ffd2 	bl	800ca90 <WM_CheckScrollBounds>
 800caec:	6860      	ldr	r0, [r4, #4]
 800caee:	1b40      	subs	r0, r0, r5
 800caf0:	bd38      	pop	{r3, r4, r5, pc}

0800caf2 <_cbInvalidateOne>:
 800caf2:	f000 bcd8 	b.w	800d4a6 <WM_InvalidateWindow>
	...

0800caf8 <WM_BringToTop>:
 800caf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cafa:	4605      	mov	r5, r0
 800cafc:	2800      	cmp	r0, #0
 800cafe:	d032      	beq.n	800cb66 <WM_BringToTop+0x6e>
 800cb00:	f006 fefc 	bl	80138fc <GUI_ALLOC_LockH>
 800cb04:	ac02      	add	r4, sp, #8
 800cb06:	4603      	mov	r3, r0
 800cb08:	f844 0d08 	str.w	r0, [r4, #-8]!
 800cb0c:	6a00      	ldr	r0, [r0, #32]
 800cb0e:	b908      	cbnz	r0, 800cb14 <WM_BringToTop+0x1c>
 800cb10:	4668      	mov	r0, sp
 800cb12:	e00e      	b.n	800cb32 <WM_BringToTop+0x3a>
 800cb14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb16:	071a      	lsls	r2, r3, #28
 800cb18:	d411      	bmi.n	800cb3e <WM_BringToTop+0x46>
 800cb1a:	f006 feef 	bl	80138fc <GUI_ALLOC_LockH>
 800cb1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cb20:	ae02      	add	r6, sp, #8
 800cb22:	071b      	lsls	r3, r3, #28
 800cb24:	f846 0d04 	str.w	r0, [r6, #-4]!
 800cb28:	d506      	bpl.n	800cb38 <WM_BringToTop+0x40>
 800cb2a:	4668      	mov	r0, sp
 800cb2c:	f006 fef4 	bl	8013918 <GUI_ALLOC_UnlockH>
 800cb30:	4630      	mov	r0, r6
 800cb32:	f006 fef1 	bl	8013918 <GUI_ALLOC_UnlockH>
 800cb36:	e016      	b.n	800cb66 <WM_BringToTop+0x6e>
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f006 feed 	bl	8013918 <GUI_ALLOC_UnlockH>
 800cb3e:	9b00      	ldr	r3, [sp, #0]
 800cb40:	4668      	mov	r0, sp
 800cb42:	699e      	ldr	r6, [r3, #24]
 800cb44:	f006 fee8 	bl	8013918 <GUI_ALLOC_UnlockH>
 800cb48:	4628      	mov	r0, r5
 800cb4a:	f000 fab7 	bl	800d0bc <WM__RemoveWindowFromList>
 800cb4e:	4631      	mov	r1, r6
 800cb50:	4628      	mov	r0, r5
 800cb52:	f000 fa61 	bl	800d018 <WM__InsertWindowIntoList>
 800cb56:	4628      	mov	r0, r5
 800cb58:	f000 fca5 	bl	800d4a6 <WM_InvalidateWindow>
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	4903      	ldr	r1, [pc, #12]	; (800cb6c <WM_BringToTop+0x74>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	f008 fdcd 	bl	8015700 <WM_ForEachDesc>
 800cb66:	b002      	add	sp, #8
 800cb68:	bd70      	pop	{r4, r5, r6, pc}
 800cb6a:	bf00      	nop
 800cb6c:	0800caf3 	.word	0x0800caf3

0800cb70 <_OnExit>:
 800cb70:	4a0a      	ldr	r2, [pc, #40]	; (800cb9c <_OnExit+0x2c>)
 800cb72:	490b      	ldr	r1, [pc, #44]	; (800cba0 <_OnExit+0x30>)
 800cb74:	2300      	movs	r3, #0
 800cb76:	7013      	strb	r3, [r2, #0]
 800cb78:	4a0a      	ldr	r2, [pc, #40]	; (800cba4 <_OnExit+0x34>)
 800cb7a:	600b      	str	r3, [r1, #0]
 800cb7c:	6013      	str	r3, [r2, #0]
 800cb7e:	4a0a      	ldr	r2, [pc, #40]	; (800cba8 <_OnExit+0x38>)
 800cb80:	604b      	str	r3, [r1, #4]
 800cb82:	6013      	str	r3, [r2, #0]
 800cb84:	4a09      	ldr	r2, [pc, #36]	; (800cbac <_OnExit+0x3c>)
 800cb86:	6013      	str	r3, [r2, #0]
 800cb88:	6053      	str	r3, [r2, #4]
 800cb8a:	4a09      	ldr	r2, [pc, #36]	; (800cbb0 <_OnExit+0x40>)
 800cb8c:	6013      	str	r3, [r2, #0]
 800cb8e:	4a09      	ldr	r2, [pc, #36]	; (800cbb4 <_OnExit+0x44>)
 800cb90:	6013      	str	r3, [r2, #0]
 800cb92:	4a09      	ldr	r2, [pc, #36]	; (800cbb8 <_OnExit+0x48>)
 800cb94:	6013      	str	r3, [r2, #0]
 800cb96:	4a09      	ldr	r2, [pc, #36]	; (800cbbc <_OnExit+0x4c>)
 800cb98:	6013      	str	r3, [r2, #0]
 800cb9a:	4770      	bx	lr
 800cb9c:	2001d0e4 	.word	0x2001d0e4
 800cba0:	2001d570 	.word	0x2001d570
 800cba4:	2001d0bc 	.word	0x2001d0bc
 800cba8:	2001d594 	.word	0x2001d594
 800cbac:	2001d59c 	.word	0x2001d59c
 800cbb0:	2001d5a8 	.word	0x2001d5a8
 800cbb4:	2001d55c 	.word	0x2001d55c
 800cbb8:	2001d588 	.word	0x2001d588
 800cbbc:	2001d598 	.word	0x2001d598

0800cbc0 <_Paint1>:
 800cbc0:	b510      	push	{r4, lr}
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	f006 fe90 	bl	80138e8 <GUI_ALLOC_h2p>
 800cbc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cbca:	4a04      	ldr	r2, [pc, #16]	; (800cbdc <_Paint1+0x1c>)
 800cbcc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800cbd0:	4b03      	ldr	r3, [pc, #12]	; (800cbe0 <_Paint1+0x20>)
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	bf08      	it	eq
 800cbd6:	4613      	moveq	r3, r2
 800cbd8:	4798      	blx	r3
 800cbda:	bd10      	pop	{r4, pc}
 800cbdc:	0800da31 	.word	0x0800da31
 800cbe0:	0800e01d 	.word	0x0800e01d

0800cbe4 <_Findy1>:
 800cbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	b085      	sub	sp, #20
 800cbea:	460c      	mov	r4, r1
 800cbec:	4616      	mov	r6, r2
 800cbee:	2d00      	cmp	r5, #0
 800cbf0:	d04c      	beq.n	800cc8c <_Findy1+0xa8>
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	f006 fe82 	bl	80138fc <GUI_ALLOC_LockH>
 800cbf8:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800cbfa:	9001      	str	r0, [sp, #4]
 800cbfc:	07bb      	lsls	r3, r7, #30
 800cbfe:	4601      	mov	r1, r0
 800cc00:	d53d      	bpl.n	800cc7e <_Findy1+0x9a>
 800cc02:	ad02      	add	r5, sp, #8
 800cc04:	b126      	cbz	r6, 800cc10 <_Findy1+0x2c>
 800cc06:	4628      	mov	r0, r5
 800cc08:	4632      	mov	r2, r6
 800cc0a:	f004 f875 	bl	8010cf8 <GUI__IntersectRects>
 800cc0e:	e002      	b.n	800cc16 <_Findy1+0x32>
 800cc10:	c803      	ldmia	r0, {r0, r1}
 800cc12:	e885 0003 	stmia.w	r5, {r0, r1}
 800cc16:	4620      	mov	r0, r4
 800cc18:	4629      	mov	r1, r5
 800cc1a:	f005 f9bb 	bl	8011f94 <GUI_RectsIntersect>
 800cc1e:	b370      	cbz	r0, 800cc7e <_Findy1+0x9a>
 800cc20:	f017 0f01 	tst.w	r7, #1
 800cc24:	9b01      	ldr	r3, [sp, #4]
 800cc26:	d11e      	bne.n	800cc66 <_Findy1+0x82>
 800cc28:	b13e      	cbz	r6, 800cc3a <_Findy1+0x56>
 800cc2a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800cc2e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	bfa8      	it	ge
 800cc36:	4613      	movge	r3, r2
 800cc38:	e001      	b.n	800cc3e <_Findy1+0x5a>
 800cc3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc3e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800cc42:	4293      	cmp	r3, r2
 800cc44:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800cc48:	dd06      	ble.n	800cc58 <_Findy1+0x74>
 800cc4a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800cc4e:	b219      	sxth	r1, r3
 800cc50:	428a      	cmp	r2, r1
 800cc52:	db14      	blt.n	800cc7e <_Findy1+0x9a>
 800cc54:	3b01      	subs	r3, #1
 800cc56:	e004      	b.n	800cc62 <_Findy1+0x7e>
 800cc58:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800cc5c:	b219      	sxth	r1, r3
 800cc5e:	428a      	cmp	r2, r1
 800cc60:	dd0d      	ble.n	800cc7e <_Findy1+0x9a>
 800cc62:	80e3      	strh	r3, [r4, #6]
 800cc64:	e00b      	b.n	800cc7e <_Findy1+0x9a>
 800cc66:	69df      	ldr	r7, [r3, #28]
 800cc68:	b14f      	cbz	r7, 800cc7e <_Findy1+0x9a>
 800cc6a:	4638      	mov	r0, r7
 800cc6c:	4621      	mov	r1, r4
 800cc6e:	462a      	mov	r2, r5
 800cc70:	f7ff ffb8 	bl	800cbe4 <_Findy1>
 800cc74:	4638      	mov	r0, r7
 800cc76:	f006 fe37 	bl	80138e8 <GUI_ALLOC_h2p>
 800cc7a:	6a07      	ldr	r7, [r0, #32]
 800cc7c:	e7f4      	b.n	800cc68 <_Findy1+0x84>
 800cc7e:	a804      	add	r0, sp, #16
 800cc80:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800cc84:	6a1d      	ldr	r5, [r3, #32]
 800cc86:	f006 fe47 	bl	8013918 <GUI_ALLOC_UnlockH>
 800cc8a:	e7b0      	b.n	800cbee <_Findy1+0xa>
 800cc8c:	b005      	add	sp, #20
 800cc8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc90 <_Findx0>:
 800cc90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800cc94:	4604      	mov	r4, r0
 800cc96:	460f      	mov	r7, r1
 800cc98:	4690      	mov	r8, r2
 800cc9a:	2500      	movs	r5, #0
 800cc9c:	2c00      	cmp	r4, #0
 800cc9e:	d037      	beq.n	800cd10 <_Findx0+0x80>
 800cca0:	4620      	mov	r0, r4
 800cca2:	f006 fe2b 	bl	80138fc <GUI_ALLOC_LockH>
 800cca6:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800cca8:	9001      	str	r0, [sp, #4]
 800ccaa:	07b2      	lsls	r2, r6, #30
 800ccac:	4601      	mov	r1, r0
 800ccae:	d528      	bpl.n	800cd02 <_Findx0+0x72>
 800ccb0:	ac02      	add	r4, sp, #8
 800ccb2:	f1b8 0f00 	cmp.w	r8, #0
 800ccb6:	d004      	beq.n	800ccc2 <_Findx0+0x32>
 800ccb8:	4620      	mov	r0, r4
 800ccba:	4642      	mov	r2, r8
 800ccbc:	f004 f81c 	bl	8010cf8 <GUI__IntersectRects>
 800ccc0:	e002      	b.n	800ccc8 <_Findx0+0x38>
 800ccc2:	c803      	ldmia	r0, {r0, r1}
 800ccc4:	e884 0003 	stmia.w	r4, {r0, r1}
 800ccc8:	4638      	mov	r0, r7
 800ccca:	4621      	mov	r1, r4
 800cccc:	f005 f962 	bl	8011f94 <GUI_RectsIntersect>
 800ccd0:	b1b8      	cbz	r0, 800cd02 <_Findx0+0x72>
 800ccd2:	07f3      	lsls	r3, r6, #31
 800ccd4:	d405      	bmi.n	800cce2 <_Findx0+0x52>
 800ccd6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	803b      	strh	r3, [r7, #0]
 800ccde:	2501      	movs	r5, #1
 800cce0:	e00f      	b.n	800cd02 <_Findx0+0x72>
 800cce2:	9b01      	ldr	r3, [sp, #4]
 800cce4:	69de      	ldr	r6, [r3, #28]
 800cce6:	b166      	cbz	r6, 800cd02 <_Findx0+0x72>
 800cce8:	4630      	mov	r0, r6
 800ccea:	4639      	mov	r1, r7
 800ccec:	4622      	mov	r2, r4
 800ccee:	f7ff ffcf 	bl	800cc90 <_Findx0>
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	bf18      	it	ne
 800ccf8:	2501      	movne	r5, #1
 800ccfa:	f006 fdf5 	bl	80138e8 <GUI_ALLOC_h2p>
 800ccfe:	6a06      	ldr	r6, [r0, #32]
 800cd00:	e7f1      	b.n	800cce6 <_Findx0+0x56>
 800cd02:	a804      	add	r0, sp, #16
 800cd04:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800cd08:	6a1c      	ldr	r4, [r3, #32]
 800cd0a:	f006 fe05 	bl	8013918 <GUI_ALLOC_UnlockH>
 800cd0e:	e7c5      	b.n	800cc9c <_Findx0+0xc>
 800cd10:	4628      	mov	r0, r5
 800cd12:	b004      	add	sp, #16
 800cd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cd18 <_Findx1>:
 800cd18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	b085      	sub	sp, #20
 800cd1e:	460e      	mov	r6, r1
 800cd20:	4617      	mov	r7, r2
 800cd22:	2c00      	cmp	r4, #0
 800cd24:	d031      	beq.n	800cd8a <_Findx1+0x72>
 800cd26:	4620      	mov	r0, r4
 800cd28:	f006 fde8 	bl	80138fc <GUI_ALLOC_LockH>
 800cd2c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800cd2e:	9001      	str	r0, [sp, #4]
 800cd30:	07aa      	lsls	r2, r5, #30
 800cd32:	4601      	mov	r1, r0
 800cd34:	d522      	bpl.n	800cd7c <_Findx1+0x64>
 800cd36:	ac02      	add	r4, sp, #8
 800cd38:	b127      	cbz	r7, 800cd44 <_Findx1+0x2c>
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	463a      	mov	r2, r7
 800cd3e:	f003 ffdb 	bl	8010cf8 <GUI__IntersectRects>
 800cd42:	e002      	b.n	800cd4a <_Findx1+0x32>
 800cd44:	c803      	ldmia	r0, {r0, r1}
 800cd46:	e884 0003 	stmia.w	r4, {r0, r1}
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	f005 f921 	bl	8011f94 <GUI_RectsIntersect>
 800cd52:	b198      	cbz	r0, 800cd7c <_Findx1+0x64>
 800cd54:	07eb      	lsls	r3, r5, #31
 800cd56:	d404      	bmi.n	800cd62 <_Findx1+0x4a>
 800cd58:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800cd5c:	3b01      	subs	r3, #1
 800cd5e:	80b3      	strh	r3, [r6, #4]
 800cd60:	e00c      	b.n	800cd7c <_Findx1+0x64>
 800cd62:	9b01      	ldr	r3, [sp, #4]
 800cd64:	69dd      	ldr	r5, [r3, #28]
 800cd66:	b14d      	cbz	r5, 800cd7c <_Findx1+0x64>
 800cd68:	4628      	mov	r0, r5
 800cd6a:	4631      	mov	r1, r6
 800cd6c:	4622      	mov	r2, r4
 800cd6e:	f7ff ffd3 	bl	800cd18 <_Findx1>
 800cd72:	4628      	mov	r0, r5
 800cd74:	f006 fdb8 	bl	80138e8 <GUI_ALLOC_h2p>
 800cd78:	6a05      	ldr	r5, [r0, #32]
 800cd7a:	e7f4      	b.n	800cd66 <_Findx1+0x4e>
 800cd7c:	a804      	add	r0, sp, #16
 800cd7e:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800cd82:	6a1c      	ldr	r4, [r3, #32]
 800cd84:	f006 fdc8 	bl	8013918 <GUI_ALLOC_UnlockH>
 800cd88:	e7cb      	b.n	800cd22 <_Findx1+0xa>
 800cd8a:	b005      	add	sp, #20
 800cd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800cd90 <_Paint1Trans>:
 800cd90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cd94:	4d21      	ldr	r5, [pc, #132]	; (800ce1c <_Paint1Trans+0x8c>)
 800cd96:	682b      	ldr	r3, [r5, #0]
 800cd98:	4606      	mov	r6, r0
 800cd9a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800cd9c:	f006 fdae 	bl	80138fc <GUI_ALLOC_LockH>
 800cda0:	9000      	str	r0, [sp, #0]
 800cda2:	4630      	mov	r0, r6
 800cda4:	f006 fdaa 	bl	80138fc <GUI_ALLOC_LockH>
 800cda8:	ac02      	add	r4, sp, #8
 800cdaa:	4601      	mov	r1, r0
 800cdac:	9001      	str	r0, [sp, #4]
 800cdae:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 800cdb2:	3008      	adds	r0, #8
 800cdb4:	f005 f8ee 	bl	8011f94 <GUI_RectsIntersect>
 800cdb8:	4607      	mov	r7, r0
 800cdba:	b328      	cbz	r0, 800ce08 <_Paint1Trans+0x78>
 800cdbc:	9901      	ldr	r1, [sp, #4]
 800cdbe:	9a00      	ldr	r2, [sp, #0]
 800cdc0:	682b      	ldr	r3, [r5, #0]
 800cdc2:	4c17      	ldr	r4, [pc, #92]	; (800ce20 <_Paint1Trans+0x90>)
 800cdc4:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 800cdc6:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 800cdca:	f101 0008 	add.w	r0, r1, #8
 800cdce:	3208      	adds	r2, #8
 800cdd0:	f003 ff92 	bl	8010cf8 <GUI__IntersectRects>
 800cdd4:	4668      	mov	r0, sp
 800cdd6:	f006 fd9f 	bl	8013918 <GUI_ALLOC_UnlockH>
 800cdda:	9a01      	ldr	r2, [sp, #4]
 800cddc:	682b      	ldr	r3, [r5, #0]
 800cdde:	f9b2 1000 	ldrsh.w	r1, [r2]
 800cde2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800cde6:	64d9      	str	r1, [r3, #76]	; 0x4c
 800cde8:	651a      	str	r2, [r3, #80]	; 0x50
 800cdea:	a801      	add	r0, sp, #4
 800cdec:	6026      	str	r6, [r4, #0]
 800cdee:	f006 fd93 	bl	8013918 <GUI_ALLOC_UnlockH>
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	f7ff fee4 	bl	800cbc0 <_Paint1>
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	6023      	str	r3, [r4, #0]
 800cdfc:	682b      	ldr	r3, [r5, #0]
 800cdfe:	651f      	str	r7, [r3, #80]	; 0x50
 800ce00:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 800ce04:	2701      	movs	r7, #1
 800ce06:	e005      	b.n	800ce14 <_Paint1Trans+0x84>
 800ce08:	4668      	mov	r0, sp
 800ce0a:	f006 fd85 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ce0e:	a801      	add	r0, sp, #4
 800ce10:	f006 fd82 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ce14:	4638      	mov	r0, r7
 800ce16:	b002      	add	sp, #8
 800ce18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce1c:	20000110 	.word	0x20000110
 800ce20:	2001d55c 	.word	0x2001d55c

0800ce24 <_PaintTransChildren>:
 800ce24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce28:	4606      	mov	r6, r0
 800ce2a:	f006 fd67 	bl	80138fc <GUI_ALLOC_LockH>
 800ce2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ce30:	9001      	str	r0, [sp, #4]
 800ce32:	079b      	lsls	r3, r3, #30
 800ce34:	d405      	bmi.n	800ce42 <_PaintTransChildren+0x1e>
 800ce36:	a801      	add	r0, sp, #4
 800ce38:	f006 fd6e 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ce3c:	b002      	add	sp, #8
 800ce3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce42:	69c4      	ldr	r4, [r0, #28]
 800ce44:	2c00      	cmp	r4, #0
 800ce46:	d0f6      	beq.n	800ce36 <_PaintTransChildren+0x12>
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f006 fd57 	bl	80138fc <GUI_ALLOC_LockH>
 800ce4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ce50:	ad02      	add	r5, sp, #8
 800ce52:	f003 0303 	and.w	r3, r3, #3
 800ce56:	2b03      	cmp	r3, #3
 800ce58:	f845 0d08 	str.w	r0, [r5, #-8]!
 800ce5c:	d137      	bne.n	800cece <_PaintTransChildren+0xaa>
 800ce5e:	9901      	ldr	r1, [sp, #4]
 800ce60:	3108      	adds	r1, #8
 800ce62:	f005 f897 	bl	8011f94 <GUI_RectsIntersect>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	d031      	beq.n	800cece <_PaintTransChildren+0xaa>
 800ce6a:	a802      	add	r0, sp, #8
 800ce6c:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800ce70:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 800ce74:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 800ce78:	899f      	ldrh	r7, [r3, #12]
 800ce7a:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 800ce7e:	f006 fd4b 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ce82:	4668      	mov	r0, sp
 800ce84:	f006 fd48 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f7ff ff81 	bl	800cd90 <_Paint1Trans>
 800ce8e:	b170      	cbz	r0, 800ceae <_PaintTransChildren+0x8a>
 800ce90:	4620      	mov	r0, r4
 800ce92:	f006 fd29 	bl	80138e8 <GUI_ALLOC_h2p>
 800ce96:	9000      	str	r0, [sp, #0]
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f7ff ffc3 	bl	800ce24 <_PaintTransChildren>
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f006 fd22 	bl	80138e8 <GUI_ALLOC_h2p>
 800cea4:	9000      	str	r0, [sp, #0]
 800cea6:	4630      	mov	r0, r6
 800cea8:	f006 fd1e 	bl	80138e8 <GUI_ALLOC_h2p>
 800ceac:	9001      	str	r0, [sp, #4]
 800ceae:	4630      	mov	r0, r6
 800ceb0:	f006 fd24 	bl	80138fc <GUI_ALLOC_LockH>
 800ceb4:	9001      	str	r0, [sp, #4]
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f006 fd20 	bl	80138fc <GUI_ALLOC_LockH>
 800cebc:	9b01      	ldr	r3, [sp, #4]
 800cebe:	9000      	str	r0, [sp, #0]
 800cec0:	f8a3 9008 	strh.w	r9, [r3, #8]
 800cec4:	f8a3 800a 	strh.w	r8, [r3, #10]
 800cec8:	819f      	strh	r7, [r3, #12]
 800ceca:	f8a3 a00e 	strh.w	sl, [r3, #14]
 800cece:	9b00      	ldr	r3, [sp, #0]
 800ced0:	4668      	mov	r0, sp
 800ced2:	6a1c      	ldr	r4, [r3, #32]
 800ced4:	f006 fd20 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ced8:	e7b4      	b.n	800ce44 <_PaintTransChildren+0x20>
	...

0800cedc <WM__PaintWinAndOverlays>:
 800cedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cede:	4604      	mov	r4, r0
 800cee0:	f006 fd0c 	bl	80138fc <GUI_ALLOC_LockH>
 800cee4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800cee6:	9001      	str	r0, [sp, #4]
 800cee8:	f640 0301 	movw	r3, #2049	; 0x801
 800ceec:	4013      	ands	r3, r2
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d005      	beq.n	800cefe <WM__PaintWinAndOverlays+0x22>
 800cef2:	a801      	add	r0, sp, #4
 800cef4:	f006 fd10 	bl	8013918 <GUI_ALLOC_UnlockH>
 800cef8:	4620      	mov	r0, r4
 800cefa:	f7ff fe61 	bl	800cbc0 <_Paint1>
 800cefe:	4b14      	ldr	r3, [pc, #80]	; (800cf50 <WM__PaintWinAndOverlays+0x74>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	b313      	cbz	r3, 800cf4a <WM__PaintWinAndOverlays+0x6e>
 800cf04:	4620      	mov	r0, r4
 800cf06:	f7ff ff8d 	bl	800ce24 <_PaintTransChildren>
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	f006 fcec 	bl	80138e8 <GUI_ALLOC_h2p>
 800cf10:	6985      	ldr	r5, [r0, #24]
 800cf12:	6a04      	ldr	r4, [r0, #32]
 800cf14:	b1cd      	cbz	r5, 800cf4a <WM__PaintWinAndOverlays+0x6e>
 800cf16:	b194      	cbz	r4, 800cf3e <WM__PaintWinAndOverlays+0x62>
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f006 fce5 	bl	80138e8 <GUI_ALLOC_h2p>
 800cf1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cf20:	f003 0303 	and.w	r3, r3, #3
 800cf24:	2b03      	cmp	r3, #3
 800cf26:	d102      	bne.n	800cf2e <WM__PaintWinAndOverlays+0x52>
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f7ff ff31 	bl	800cd90 <_Paint1Trans>
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f7ff ff78 	bl	800ce24 <_PaintTransChildren>
 800cf34:	4620      	mov	r0, r4
 800cf36:	f006 fcd7 	bl	80138e8 <GUI_ALLOC_h2p>
 800cf3a:	6a04      	ldr	r4, [r0, #32]
 800cf3c:	e7eb      	b.n	800cf16 <WM__PaintWinAndOverlays+0x3a>
 800cf3e:	4628      	mov	r0, r5
 800cf40:	f006 fcd2 	bl	80138e8 <GUI_ALLOC_h2p>
 800cf44:	6a04      	ldr	r4, [r0, #32]
 800cf46:	6985      	ldr	r5, [r0, #24]
 800cf48:	e7e4      	b.n	800cf14 <WM__PaintWinAndOverlays+0x38>
 800cf4a:	b003      	add	sp, #12
 800cf4c:	bd30      	pop	{r4, r5, pc}
 800cf4e:	bf00      	nop
 800cf50:	2001d5a8 	.word	0x2001d5a8

0800cf54 <_cbPaintMemDev>:
 800cf54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf58:	4d17      	ldr	r5, [pc, #92]	; (800cfb8 <_cbPaintMemDev+0x64>)
 800cf5a:	682b      	ldr	r3, [r5, #0]
 800cf5c:	4606      	mov	r6, r0
 800cf5e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800cf60:	f006 fccc 	bl	80138fc <GUI_ALLOC_LockH>
 800cf64:	682a      	ldr	r2, [r5, #0]
 800cf66:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 800cf6a:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 800cf6e:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 800cf72:	89c7      	ldrh	r7, [r0, #14]
 800cf74:	ac02      	add	r4, sp, #8
 800cf76:	3208      	adds	r2, #8
 800cf78:	f844 0d04 	str.w	r0, [r4, #-4]!
 800cf7c:	f100 0308 	add.w	r3, r0, #8
 800cf80:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cf84:	e883 0003 	stmia.w	r3, {r0, r1}
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f006 fcc5 	bl	8013918 <GUI_ALLOC_UnlockH>
 800cf8e:	6830      	ldr	r0, [r6, #0]
 800cf90:	f7ff ffa4 	bl	800cedc <WM__PaintWinAndOverlays>
 800cf94:	682b      	ldr	r3, [r5, #0]
 800cf96:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800cf98:	f006 fcb0 	bl	80138fc <GUI_ALLOC_LockH>
 800cf9c:	9001      	str	r0, [sp, #4]
 800cf9e:	f8a0 a008 	strh.w	sl, [r0, #8]
 800cfa2:	f8a0 900a 	strh.w	r9, [r0, #10]
 800cfa6:	f8a0 800c 	strh.w	r8, [r0, #12]
 800cfaa:	81c7      	strh	r7, [r0, #14]
 800cfac:	4620      	mov	r0, r4
 800cfae:	f006 fcb3 	bl	8013918 <GUI_ALLOC_UnlockH>
 800cfb2:	b002      	add	sp, #8
 800cfb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb8:	20000110 	.word	0x20000110

0800cfbc <WM__ClipAtParentBorders>:
 800cfbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfbe:	4607      	mov	r7, r0
 800cfc0:	460d      	mov	r5, r1
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	f006 fc9a 	bl	80138fc <GUI_ALLOC_LockH>
 800cfc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cfca:	ac02      	add	r4, sp, #8
 800cfcc:	f013 0602 	ands.w	r6, r3, #2
 800cfd0:	4601      	mov	r1, r0
 800cfd2:	f844 0d04 	str.w	r0, [r4, #-4]!
 800cfd6:	d104      	bne.n	800cfe2 <WM__ClipAtParentBorders+0x26>
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f006 fc9d 	bl	8013918 <GUI_ALLOC_UnlockH>
 800cfde:	4630      	mov	r0, r6
 800cfe0:	e016      	b.n	800d010 <WM__ClipAtParentBorders+0x54>
 800cfe2:	4638      	mov	r0, r7
 800cfe4:	f003 feba 	bl	8010d5c <GUI__IntersectRect>
 800cfe8:	9b01      	ldr	r3, [sp, #4]
 800cfea:	699e      	ldr	r6, [r3, #24]
 800cfec:	4620      	mov	r0, r4
 800cfee:	b956      	cbnz	r6, 800d006 <WM__ClipAtParentBorders+0x4a>
 800cff0:	f006 fc92 	bl	8013918 <GUI_ALLOC_UnlockH>
 800cff4:	4b07      	ldr	r3, [pc, #28]	; (800d014 <WM__ClipAtParentBorders+0x58>)
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	4295      	cmp	r5, r2
 800cffa:	d008      	beq.n	800d00e <WM__ClipAtParentBorders+0x52>
 800cffc:	6858      	ldr	r0, [r3, #4]
 800cffe:	1a2b      	subs	r3, r5, r0
 800d000:	4258      	negs	r0, r3
 800d002:	4158      	adcs	r0, r3
 800d004:	e004      	b.n	800d010 <WM__ClipAtParentBorders+0x54>
 800d006:	f006 fc87 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d00a:	4635      	mov	r5, r6
 800d00c:	e7d9      	b.n	800cfc2 <WM__ClipAtParentBorders+0x6>
 800d00e:	2001      	movs	r0, #1
 800d010:	b003      	add	sp, #12
 800d012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d014:	2001d560 	.word	0x2001d560

0800d018 <WM__InsertWindowIntoList>:
 800d018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d01a:	4604      	mov	r4, r0
 800d01c:	b085      	sub	sp, #20
 800d01e:	460d      	mov	r5, r1
 800d020:	2900      	cmp	r1, #0
 800d022:	d049      	beq.n	800d0b8 <WM__InsertWindowIntoList+0xa0>
 800d024:	f006 fc6a 	bl	80138fc <GUI_ALLOC_LockH>
 800d028:	2300      	movs	r3, #0
 800d02a:	6203      	str	r3, [r0, #32]
 800d02c:	6185      	str	r5, [r0, #24]
 800d02e:	9001      	str	r0, [sp, #4]
 800d030:	4628      	mov	r0, r5
 800d032:	f006 fc63 	bl	80138fc <GUI_ALLOC_LockH>
 800d036:	9b01      	ldr	r3, [sp, #4]
 800d038:	69c5      	ldr	r5, [r0, #28]
 800d03a:	9002      	str	r0, [sp, #8]
 800d03c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 800d03e:	b92d      	cbnz	r5, 800d04c <WM__InsertWindowIntoList+0x34>
 800d040:	61c4      	str	r4, [r0, #28]
 800d042:	a801      	add	r0, sp, #4
 800d044:	f006 fc68 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d048:	a802      	add	r0, sp, #8
 800d04a:	e033      	b.n	800d0b4 <WM__InsertWindowIntoList+0x9c>
 800d04c:	4628      	mov	r0, r5
 800d04e:	f006 fc55 	bl	80138fc <GUI_ALLOC_LockH>
 800d052:	ae04      	add	r6, sp, #16
 800d054:	f007 0708 	and.w	r7, r7, #8
 800d058:	f846 0d04 	str.w	r0, [r6, #-4]!
 800d05c:	b977      	cbnz	r7, 800d07c <WM__InsertWindowIntoList+0x64>
 800d05e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d060:	071a      	lsls	r2, r3, #28
 800d062:	d50b      	bpl.n	800d07c <WM__InsertWindowIntoList+0x64>
 800d064:	9b01      	ldr	r3, [sp, #4]
 800d066:	621d      	str	r5, [r3, #32]
 800d068:	9b02      	ldr	r3, [sp, #8]
 800d06a:	a801      	add	r0, sp, #4
 800d06c:	61dc      	str	r4, [r3, #28]
 800d06e:	f006 fc53 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d072:	a802      	add	r0, sp, #8
 800d074:	f006 fc50 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d078:	4630      	mov	r0, r6
 800d07a:	e01b      	b.n	800d0b4 <WM__InsertWindowIntoList+0x9c>
 800d07c:	a802      	add	r0, sp, #8
 800d07e:	f006 fc4b 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d082:	4630      	mov	r0, r6
 800d084:	f006 fc48 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d088:	4628      	mov	r0, r5
 800d08a:	f006 fc2d 	bl	80138e8 <GUI_ALLOC_h2p>
 800d08e:	9003      	str	r0, [sp, #12]
 800d090:	9b03      	ldr	r3, [sp, #12]
 800d092:	6a1d      	ldr	r5, [r3, #32]
 800d094:	b90d      	cbnz	r5, 800d09a <WM__InsertWindowIntoList+0x82>
 800d096:	621c      	str	r4, [r3, #32]
 800d098:	e00b      	b.n	800d0b2 <WM__InsertWindowIntoList+0x9a>
 800d09a:	4628      	mov	r0, r5
 800d09c:	f006 fc24 	bl	80138e8 <GUI_ALLOC_h2p>
 800d0a0:	2f00      	cmp	r7, #0
 800d0a2:	d1f4      	bne.n	800d08e <WM__InsertWindowIntoList+0x76>
 800d0a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d0a6:	071b      	lsls	r3, r3, #28
 800d0a8:	d5f1      	bpl.n	800d08e <WM__InsertWindowIntoList+0x76>
 800d0aa:	9b03      	ldr	r3, [sp, #12]
 800d0ac:	621c      	str	r4, [r3, #32]
 800d0ae:	9b01      	ldr	r3, [sp, #4]
 800d0b0:	621d      	str	r5, [r3, #32]
 800d0b2:	a801      	add	r0, sp, #4
 800d0b4:	f006 fc30 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d0b8:	b005      	add	sp, #20
 800d0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d0bc <WM__RemoveWindowFromList>:
 800d0bc:	b570      	push	{r4, r5, r6, lr}
 800d0be:	4604      	mov	r4, r0
 800d0c0:	f006 fc12 	bl	80138e8 <GUI_ALLOC_h2p>
 800d0c4:	4605      	mov	r5, r0
 800d0c6:	6980      	ldr	r0, [r0, #24]
 800d0c8:	b1a8      	cbz	r0, 800d0f6 <WM__RemoveWindowFromList+0x3a>
 800d0ca:	f006 fc0d 	bl	80138e8 <GUI_ALLOC_h2p>
 800d0ce:	69c3      	ldr	r3, [r0, #28]
 800d0d0:	42a3      	cmp	r3, r4
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	d105      	bne.n	800d0e2 <WM__RemoveWindowFromList+0x26>
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f006 fc06 	bl	80138e8 <GUI_ALLOC_h2p>
 800d0dc:	6a03      	ldr	r3, [r0, #32]
 800d0de:	61f3      	str	r3, [r6, #28]
 800d0e0:	bd70      	pop	{r4, r5, r6, pc}
 800d0e2:	b143      	cbz	r3, 800d0f6 <WM__RemoveWindowFromList+0x3a>
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f006 fbff 	bl	80138e8 <GUI_ALLOC_h2p>
 800d0ea:	6a03      	ldr	r3, [r0, #32]
 800d0ec:	42a3      	cmp	r3, r4
 800d0ee:	d1f8      	bne.n	800d0e2 <WM__RemoveWindowFromList+0x26>
 800d0f0:	6a2b      	ldr	r3, [r5, #32]
 800d0f2:	6203      	str	r3, [r0, #32]
 800d0f4:	bd70      	pop	{r4, r5, r6, pc}
 800d0f6:	bd70      	pop	{r4, r5, r6, pc}

0800d0f8 <WM__Client2Screen>:
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	4608      	mov	r0, r1
 800d0fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800d100:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d104:	f005 b84a 	b.w	801219c <GUI_MoveRect>

0800d108 <_SetClipRectUserIntersect>:
 800d108:	4b11      	ldr	r3, [pc, #68]	; (800d150 <_SetClipRectUserIntersect+0x48>)
 800d10a:	b530      	push	{r4, r5, lr}
 800d10c:	681c      	ldr	r4, [r3, #0]
 800d10e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d110:	b085      	sub	sp, #20
 800d112:	4605      	mov	r5, r0
 800d114:	b1ba      	cbz	r2, 800d146 <_SetClipRectUserIntersect+0x3e>
 800d116:	6810      	ldr	r0, [r2, #0]
 800d118:	6851      	ldr	r1, [r2, #4]
 800d11a:	ab02      	add	r3, sp, #8
 800d11c:	c303      	stmia	r3!, {r0, r1}
 800d11e:	4b0d      	ldr	r3, [pc, #52]	; (800d154 <_SetClipRectUserIntersect+0x4c>)
 800d120:	6818      	ldr	r0, [r3, #0]
 800d122:	b900      	cbnz	r0, 800d126 <_SetClipRectUserIntersect+0x1e>
 800d124:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d126:	f006 fbe9 	bl	80138fc <GUI_ALLOC_LockH>
 800d12a:	ac04      	add	r4, sp, #16
 800d12c:	a902      	add	r1, sp, #8
 800d12e:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800d132:	f7ff ffe1 	bl	800d0f8 <WM__Client2Screen>
 800d136:	4620      	mov	r0, r4
 800d138:	f006 fbee 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d13c:	a802      	add	r0, sp, #8
 800d13e:	4629      	mov	r1, r5
 800d140:	f003 fe0c 	bl	8010d5c <GUI__IntersectRect>
 800d144:	a802      	add	r0, sp, #8
 800d146:	f002 ffb1 	bl	80100ac <LCD_SetClipRectEx>
 800d14a:	b005      	add	sp, #20
 800d14c:	bd30      	pop	{r4, r5, pc}
 800d14e:	bf00      	nop
 800d150:	20000110 	.word	0x20000110
 800d154:	2001d55c 	.word	0x2001d55c

0800d158 <WM__ActivateClipRect>:
 800d158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d15a:	4b0e      	ldr	r3, [pc, #56]	; (800d194 <WM__ActivateClipRect+0x3c>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800d162:	b10a      	cbz	r2, 800d168 <WM__ActivateClipRect+0x10>
 800d164:	480c      	ldr	r0, [pc, #48]	; (800d198 <WM__ActivateClipRect+0x40>)
 800d166:	e011      	b.n	800d18c <WM__ActivateClipRect+0x34>
 800d168:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800d16a:	f006 fbc7 	bl	80138fc <GUI_ALLOC_LockH>
 800d16e:	9001      	str	r0, [sp, #4]
 800d170:	c803      	ldmia	r0, {r0, r1}
 800d172:	ac02      	add	r4, sp, #8
 800d174:	e884 0003 	stmia.w	r4, {r0, r1}
 800d178:	a801      	add	r0, sp, #4
 800d17a:	f006 fbcd 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d17e:	4b07      	ldr	r3, [pc, #28]	; (800d19c <WM__ActivateClipRect+0x44>)
 800d180:	6819      	ldr	r1, [r3, #0]
 800d182:	b111      	cbz	r1, 800d18a <WM__ActivateClipRect+0x32>
 800d184:	4620      	mov	r0, r4
 800d186:	f7ff ff19 	bl	800cfbc <WM__ClipAtParentBorders>
 800d18a:	4620      	mov	r0, r4
 800d18c:	f7ff ffbc 	bl	800d108 <_SetClipRectUserIntersect>
 800d190:	b004      	add	sp, #16
 800d192:	bd10      	pop	{r4, pc}
 800d194:	20000110 	.word	0x20000110
 800d198:	2001d0c8 	.word	0x2001d0c8
 800d19c:	2001d55c 	.word	0x2001d55c

0800d1a0 <WM__IsWindow>:
 800d1a0:	4b06      	ldr	r3, [pc, #24]	; (800d1bc <WM__IsWindow+0x1c>)
 800d1a2:	b510      	push	{r4, lr}
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	6818      	ldr	r0, [r3, #0]
 800d1a8:	b128      	cbz	r0, 800d1b6 <WM__IsWindow+0x16>
 800d1aa:	42a0      	cmp	r0, r4
 800d1ac:	d004      	beq.n	800d1b8 <WM__IsWindow+0x18>
 800d1ae:	f006 fb9b 	bl	80138e8 <GUI_ALLOC_h2p>
 800d1b2:	6940      	ldr	r0, [r0, #20]
 800d1b4:	e7f8      	b.n	800d1a8 <WM__IsWindow+0x8>
 800d1b6:	bd10      	pop	{r4, pc}
 800d1b8:	2001      	movs	r0, #1
 800d1ba:	bd10      	pop	{r4, pc}
 800d1bc:	2001d57c 	.word	0x2001d57c

0800d1c0 <WM__InvalidateDrawAndDescs>:
 800d1c0:	b513      	push	{r0, r1, r4, lr}
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	b300      	cbz	r0, 800d208 <WM__InvalidateDrawAndDescs+0x48>
 800d1c6:	f006 fb99 	bl	80138fc <GUI_ALLOC_LockH>
 800d1ca:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d1cc:	9001      	str	r0, [sp, #4]
 800d1ce:	0793      	lsls	r3, r2, #30
 800d1d0:	d517      	bpl.n	800d202 <WM__InvalidateDrawAndDescs+0x42>
 800d1d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d1d4:	b140      	cbz	r0, 800d1e8 <WM__InvalidateDrawAndDescs+0x28>
 800d1d6:	4b0d      	ldr	r3, [pc, #52]	; (800d20c <WM__InvalidateDrawAndDescs+0x4c>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	42a3      	cmp	r3, r4
 800d1dc:	d004      	beq.n	800d1e8 <WM__InvalidateDrawAndDescs+0x28>
 800d1de:	f001 fde5 	bl	800edac <GUI_MEMDEV_Delete>
 800d1e2:	9b01      	ldr	r3, [sp, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	625a      	str	r2, [r3, #36]	; 0x24
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f7ff fbec 	bl	800c9c6 <WM_GetFirstChild>
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	b13c      	cbz	r4, 800d202 <WM__InvalidateDrawAndDescs+0x42>
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	f7ff ffe4 	bl	800d1c0 <WM__InvalidateDrawAndDescs>
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	f006 fb75 	bl	80138e8 <GUI_ALLOC_h2p>
 800d1fe:	6a04      	ldr	r4, [r0, #32]
 800d200:	e7f6      	b.n	800d1f0 <WM__InvalidateDrawAndDescs+0x30>
 800d202:	a801      	add	r0, sp, #4
 800d204:	f006 fb88 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d208:	b002      	add	sp, #8
 800d20a:	bd10      	pop	{r4, pc}
 800d20c:	2001d5a4 	.word	0x2001d5a4

0800d210 <WM__RectIsNZ>:
 800d210:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d214:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d218:	429a      	cmp	r2, r3
 800d21a:	dc08      	bgt.n	800d22e <WM__RectIsNZ+0x1e>
 800d21c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d220:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800d224:	429a      	cmp	r2, r3
 800d226:	bfcc      	ite	gt
 800d228:	2000      	movgt	r0, #0
 800d22a:	2001      	movle	r0, #1
 800d22c:	4770      	bx	lr
 800d22e:	2000      	movs	r0, #0
 800d230:	4770      	bx	lr
	...

0800d234 <_Invalidate1Abs>:
 800d234:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d236:	b085      	sub	sp, #20
 800d238:	4606      	mov	r6, r0
 800d23a:	460d      	mov	r5, r1
 800d23c:	4617      	mov	r7, r2
 800d23e:	f006 fb53 	bl	80138e8 <GUI_ALLOC_h2p>
 800d242:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d244:	9001      	str	r0, [sp, #4]
 800d246:	07a3      	lsls	r3, r4, #30
 800d248:	d534      	bpl.n	800d2b4 <_Invalidate1Abs+0x80>
 800d24a:	4628      	mov	r0, r5
 800d24c:	f7ff ffe0 	bl	800d210 <WM__RectIsNZ>
 800d250:	2800      	cmp	r0, #0
 800d252:	d02f      	beq.n	800d2b4 <_Invalidate1Abs+0x80>
 800d254:	f640 0301 	movw	r3, #2049	; 0x801
 800d258:	4023      	ands	r3, r4
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d02a      	beq.n	800d2b4 <_Invalidate1Abs+0x80>
 800d25e:	4630      	mov	r0, r6
 800d260:	f006 fb4c 	bl	80138fc <GUI_ALLOC_LockH>
 800d264:	ac02      	add	r4, sp, #8
 800d266:	4602      	mov	r2, r0
 800d268:	9001      	str	r0, [sp, #4]
 800d26a:	4629      	mov	r1, r5
 800d26c:	4620      	mov	r0, r4
 800d26e:	f003 fd43 	bl	8010cf8 <GUI__IntersectRects>
 800d272:	4620      	mov	r0, r4
 800d274:	f7ff ffcc 	bl	800d210 <WM__RectIsNZ>
 800d278:	b1c8      	cbz	r0, 800d2ae <_Invalidate1Abs+0x7a>
 800d27a:	9b01      	ldr	r3, [sp, #4]
 800d27c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800d27e:	f244 0120 	movw	r1, #16416	; 0x4020
 800d282:	4031      	ands	r1, r6
 800d284:	f103 0508 	add.w	r5, r3, #8
 800d288:	b129      	cbz	r1, 800d296 <_Invalidate1Abs+0x62>
 800d28a:	4628      	mov	r0, r5
 800d28c:	4629      	mov	r1, r5
 800d28e:	4622      	mov	r2, r4
 800d290:	f004 ff94 	bl	80121bc <GUI_MergeRect>
 800d294:	e00b      	b.n	800d2ae <_Invalidate1Abs+0x7a>
 800d296:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d29a:	433e      	orrs	r6, r7
 800d29c:	e885 0003 	stmia.w	r5, {r0, r1}
 800d2a0:	629e      	str	r6, [r3, #40]	; 0x28
 800d2a2:	4b05      	ldr	r3, [pc, #20]	; (800d2b8 <_Invalidate1Abs+0x84>)
 800d2a4:	881a      	ldrh	r2, [r3, #0]
 800d2a6:	3201      	adds	r2, #1
 800d2a8:	801a      	strh	r2, [r3, #0]
 800d2aa:	f003 ff1d 	bl	80110e8 <GUI_SignalEvent>
 800d2ae:	a801      	add	r0, sp, #4
 800d2b0:	f006 fb32 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d2b4:	b005      	add	sp, #20
 800d2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2b8:	2001d578 	.word	0x2001d578

0800d2bc <WM__Invalidate1Abs>:
 800d2bc:	2220      	movs	r2, #32
 800d2be:	f7ff bfb9 	b.w	800d234 <_Invalidate1Abs>

0800d2c2 <WM_InvalidateWindowAndDescsEx>:
 800d2c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2c4:	460f      	mov	r7, r1
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	4615      	mov	r5, r2
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	b348      	cbz	r0, 800d322 <WM_InvalidateWindowAndDescsEx+0x60>
 800d2ce:	f006 fb15 	bl	80138fc <GUI_ALLOC_LockH>
 800d2d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d2d4:	ac04      	add	r4, sp, #16
 800d2d6:	079b      	lsls	r3, r3, #30
 800d2d8:	4602      	mov	r2, r0
 800d2da:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800d2de:	d403      	bmi.n	800d2e8 <WM_InvalidateWindowAndDescsEx+0x26>
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	f006 fb19 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d2e6:	e01c      	b.n	800d322 <WM_InvalidateWindowAndDescsEx+0x60>
 800d2e8:	a802      	add	r0, sp, #8
 800d2ea:	4639      	mov	r1, r7
 800d2ec:	f003 fd04 	bl	8010cf8 <GUI__IntersectRects>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d0f5      	beq.n	800d2e0 <WM_InvalidateWindowAndDescsEx+0x1e>
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f006 fb0f 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	a902      	add	r1, sp, #8
 800d2fe:	462a      	mov	r2, r5
 800d300:	f7ff ff98 	bl	800d234 <_Invalidate1Abs>
 800d304:	4630      	mov	r0, r6
 800d306:	f7ff fb5e 	bl	800c9c6 <WM_GetFirstChild>
 800d30a:	4604      	mov	r4, r0
 800d30c:	b14c      	cbz	r4, 800d322 <WM_InvalidateWindowAndDescsEx+0x60>
 800d30e:	4620      	mov	r0, r4
 800d310:	a902      	add	r1, sp, #8
 800d312:	462a      	mov	r2, r5
 800d314:	f7ff ffd5 	bl	800d2c2 <WM_InvalidateWindowAndDescsEx>
 800d318:	4620      	mov	r0, r4
 800d31a:	f006 fae5 	bl	80138e8 <GUI_ALLOC_h2p>
 800d31e:	6a04      	ldr	r4, [r0, #32]
 800d320:	e7f4      	b.n	800d30c <WM_InvalidateWindowAndDescsEx+0x4a>
 800d322:	b005      	add	sp, #20
 800d324:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d326 <WM__InvalidateRect>:
 800d326:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d32a:	4680      	mov	r8, r0
 800d32c:	4617      	mov	r7, r2
 800d32e:	461d      	mov	r5, r3
 800d330:	460c      	mov	r4, r1
 800d332:	2900      	cmp	r1, #0
 800d334:	d030      	beq.n	800d398 <WM__InvalidateRect+0x72>
 800d336:	4608      	mov	r0, r1
 800d338:	f006 fae0 	bl	80138fc <GUI_ALLOC_LockH>
 800d33c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800d33e:	9001      	str	r0, [sp, #4]
 800d340:	07b3      	lsls	r3, r6, #30
 800d342:	4602      	mov	r2, r0
 800d344:	d525      	bpl.n	800d392 <WM__InvalidateRect+0x6c>
 800d346:	a802      	add	r0, sp, #8
 800d348:	4641      	mov	r1, r8
 800d34a:	f003 fcd5 	bl	8010cf8 <GUI__IntersectRects>
 800d34e:	b300      	cbz	r0, 800d392 <WM__InvalidateRect+0x6c>
 800d350:	f640 0301 	movw	r3, #2049	; 0x801
 800d354:	4033      	ands	r3, r6
 800d356:	2b01      	cmp	r3, #1
 800d358:	d107      	bne.n	800d36a <WM__InvalidateRect+0x44>
 800d35a:	9b01      	ldr	r3, [sp, #4]
 800d35c:	a802      	add	r0, sp, #8
 800d35e:	6999      	ldr	r1, [r3, #24]
 800d360:	6a1a      	ldr	r2, [r3, #32]
 800d362:	462b      	mov	r3, r5
 800d364:	f7ff ffdf 	bl	800d326 <WM__InvalidateRect>
 800d368:	e004      	b.n	800d374 <WM__InvalidateRect+0x4e>
 800d36a:	4620      	mov	r0, r4
 800d36c:	a902      	add	r1, sp, #8
 800d36e:	462a      	mov	r2, r5
 800d370:	f7ff ff60 	bl	800d234 <_Invalidate1Abs>
 800d374:	9b01      	ldr	r3, [sp, #4]
 800d376:	69dc      	ldr	r4, [r3, #28]
 800d378:	b15c      	cbz	r4, 800d392 <WM__InvalidateRect+0x6c>
 800d37a:	42bc      	cmp	r4, r7
 800d37c:	d009      	beq.n	800d392 <WM__InvalidateRect+0x6c>
 800d37e:	4620      	mov	r0, r4
 800d380:	a902      	add	r1, sp, #8
 800d382:	462a      	mov	r2, r5
 800d384:	f7ff ff9d 	bl	800d2c2 <WM_InvalidateWindowAndDescsEx>
 800d388:	4620      	mov	r0, r4
 800d38a:	f006 faad 	bl	80138e8 <GUI_ALLOC_h2p>
 800d38e:	6a04      	ldr	r4, [r0, #32]
 800d390:	e7f2      	b.n	800d378 <WM__InvalidateRect+0x52>
 800d392:	a801      	add	r0, sp, #4
 800d394:	f006 fac0 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d398:	b004      	add	sp, #16
 800d39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d39e <WM__InvalidateParent>:
 800d39e:	b570      	push	{r4, r5, r6, lr}
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	4608      	mov	r0, r1
 800d3a4:	460c      	mov	r4, r1
 800d3a6:	4616      	mov	r6, r2
 800d3a8:	f006 fa9e 	bl	80138e8 <GUI_ALLOC_h2p>
 800d3ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d3ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800d3b2:	4628      	mov	r0, r5
 800d3b4:	4621      	mov	r1, r4
 800d3b6:	4632      	mov	r2, r6
 800d3b8:	bf0c      	ite	eq
 800d3ba:	2320      	moveq	r3, #32
 800d3bc:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 800d3c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3c4:	f7ff bfaf 	b.w	800d326 <WM__InvalidateRect>

0800d3c8 <WM__InvalidateRectEx>:
 800d3c8:	2320      	movs	r3, #32
 800d3ca:	f7ff bfac 	b.w	800d326 <WM__InvalidateRect>

0800d3ce <WM__DetachWindow>:
 800d3ce:	b513      	push	{r0, r1, r4, lr}
 800d3d0:	4604      	mov	r4, r0
 800d3d2:	f006 fa93 	bl	80138fc <GUI_ALLOC_LockH>
 800d3d6:	6981      	ldr	r1, [r0, #24]
 800d3d8:	9001      	str	r0, [sp, #4]
 800d3da:	b141      	cbz	r1, 800d3ee <WM__DetachWindow+0x20>
 800d3dc:	6a02      	ldr	r2, [r0, #32]
 800d3de:	f7ff fff3 	bl	800d3c8 <WM__InvalidateRectEx>
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f7ff fe6a 	bl	800d0bc <WM__RemoveWindowFromList>
 800d3e8:	9b01      	ldr	r3, [sp, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	619a      	str	r2, [r3, #24]
 800d3ee:	a801      	add	r0, sp, #4
 800d3f0:	f006 fa92 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d3f4:	b002      	add	sp, #8
 800d3f6:	bd10      	pop	{r4, pc}

0800d3f8 <WM_SendMessage>:
 800d3f8:	b108      	cbz	r0, 800d3fe <WM_SendMessage+0x6>
 800d3fa:	f7fe be8d 	b.w	800c118 <WM__SendMessage>
 800d3fe:	4770      	bx	lr

0800d400 <WM__SendMsgNoData>:
 800d400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d402:	ab04      	add	r3, sp, #16
 800d404:	9001      	str	r0, [sp, #4]
 800d406:	f843 1d10 	str.w	r1, [r3, #-16]!
 800d40a:	4669      	mov	r1, sp
 800d40c:	f7fe fe84 	bl	800c118 <WM__SendMessage>
 800d410:	b005      	add	sp, #20
 800d412:	f85d fb04 	ldr.w	pc, [sp], #4

0800d416 <WM__GetClientRectWin>:
 800d416:	2300      	movs	r3, #0
 800d418:	800b      	strh	r3, [r1, #0]
 800d41a:	8882      	ldrh	r2, [r0, #4]
 800d41c:	804b      	strh	r3, [r1, #2]
 800d41e:	8803      	ldrh	r3, [r0, #0]
 800d420:	1ad3      	subs	r3, r2, r3
 800d422:	808b      	strh	r3, [r1, #4]
 800d424:	88c2      	ldrh	r2, [r0, #6]
 800d426:	8843      	ldrh	r3, [r0, #2]
 800d428:	1ad3      	subs	r3, r2, r3
 800d42a:	80cb      	strh	r3, [r1, #6]
 800d42c:	4770      	bx	lr

0800d42e <WM_InvalidateRect>:
 800d42e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d430:	460f      	mov	r7, r1
 800d432:	b087      	sub	sp, #28
 800d434:	4605      	mov	r5, r0
 800d436:	2800      	cmp	r0, #0
 800d438:	d033      	beq.n	800d4a2 <WM_InvalidateRect+0x74>
 800d43a:	f006 fa5f 	bl	80138fc <GUI_ALLOC_LockH>
 800d43e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800d440:	9001      	str	r0, [sp, #4]
 800d442:	07b2      	lsls	r2, r6, #30
 800d444:	d52a      	bpl.n	800d49c <WM_InvalidateRect+0x6e>
 800d446:	c803      	ldmia	r0, {r0, r1}
 800d448:	ac04      	add	r4, sp, #16
 800d44a:	03f3      	lsls	r3, r6, #15
 800d44c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d450:	d502      	bpl.n	800d458 <WM_InvalidateRect+0x2a>
 800d452:	4628      	mov	r0, r5
 800d454:	f7ff feb4 	bl	800d1c0 <WM__InvalidateDrawAndDescs>
 800d458:	b15f      	cbz	r7, 800d472 <WM_InvalidateRect+0x44>
 800d45a:	6838      	ldr	r0, [r7, #0]
 800d45c:	6879      	ldr	r1, [r7, #4]
 800d45e:	ab02      	add	r3, sp, #8
 800d460:	c303      	stmia	r3!, {r0, r1}
 800d462:	9801      	ldr	r0, [sp, #4]
 800d464:	a902      	add	r1, sp, #8
 800d466:	f7ff fe47 	bl	800d0f8 <WM__Client2Screen>
 800d46a:	4620      	mov	r0, r4
 800d46c:	a902      	add	r1, sp, #8
 800d46e:	f003 fc75 	bl	8010d5c <GUI__IntersectRect>
 800d472:	4620      	mov	r0, r4
 800d474:	4629      	mov	r1, r5
 800d476:	f7ff fda1 	bl	800cfbc <WM__ClipAtParentBorders>
 800d47a:	b178      	cbz	r0, 800d49c <WM_InvalidateRect+0x6e>
 800d47c:	f640 0301 	movw	r3, #2049	; 0x801
 800d480:	4033      	ands	r3, r6
 800d482:	2b01      	cmp	r3, #1
 800d484:	d106      	bne.n	800d494 <WM_InvalidateRect+0x66>
 800d486:	9b01      	ldr	r3, [sp, #4]
 800d488:	4620      	mov	r0, r4
 800d48a:	6999      	ldr	r1, [r3, #24]
 800d48c:	6a1a      	ldr	r2, [r3, #32]
 800d48e:	f7ff ff9b 	bl	800d3c8 <WM__InvalidateRectEx>
 800d492:	e003      	b.n	800d49c <WM_InvalidateRect+0x6e>
 800d494:	4628      	mov	r0, r5
 800d496:	4621      	mov	r1, r4
 800d498:	f7ff ff10 	bl	800d2bc <WM__Invalidate1Abs>
 800d49c:	a801      	add	r0, sp, #4
 800d49e:	f006 fa3b 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d4a2:	b007      	add	sp, #28
 800d4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d4a6 <WM_InvalidateWindow>:
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	f7ff bfc1 	b.w	800d42e <WM_InvalidateRect>

0800d4ac <WM__GetTopLevelLayer>:
 800d4ac:	b510      	push	{r4, lr}
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	f006 fa1a 	bl	80138e8 <GUI_ALLOC_h2p>
 800d4b4:	6980      	ldr	r0, [r0, #24]
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	d1f9      	bne.n	800d4ae <WM__GetTopLevelLayer+0x2>
 800d4ba:	4b05      	ldr	r3, [pc, #20]	; (800d4d0 <WM__GetTopLevelLayer+0x24>)
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	4294      	cmp	r4, r2
 800d4c0:	d005      	beq.n	800d4ce <WM__GetTopLevelLayer+0x22>
 800d4c2:	6858      	ldr	r0, [r3, #4]
 800d4c4:	4284      	cmp	r4, r0
 800d4c6:	bf14      	ite	ne
 800d4c8:	f04f 30ff 	movne.w	r0, #4294967295
 800d4cc:	2001      	moveq	r0, #1
 800d4ce:	bd10      	pop	{r4, pc}
 800d4d0:	2001d560 	.word	0x2001d560

0800d4d4 <WM__SelectTopLevelLayer>:
 800d4d4:	b508      	push	{r3, lr}
 800d4d6:	f7ff ffe9 	bl	800d4ac <WM__GetTopLevelLayer>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	db03      	blt.n	800d4e6 <WM__SelectTopLevelLayer+0x12>
 800d4de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d4e2:	f004 bd1d 	b.w	8011f20 <GUI_SelectLayer>
 800d4e6:	bd08      	pop	{r3, pc}

0800d4e8 <WM_SelectWindow>:
 800d4e8:	4a0d      	ldr	r2, [pc, #52]	; (800d520 <WM_SelectWindow+0x38>)
 800d4ea:	6813      	ldr	r3, [r2, #0]
 800d4ec:	b570      	push	{r4, r5, r6, lr}
 800d4ee:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800d4f0:	4604      	mov	r4, r0
 800d4f2:	4616      	mov	r6, r2
 800d4f4:	b908      	cbnz	r0, 800d4fa <WM_SelectWindow+0x12>
 800d4f6:	4a0b      	ldr	r2, [pc, #44]	; (800d524 <WM_SelectWindow+0x3c>)
 800d4f8:	6814      	ldr	r4, [r2, #0]
 800d4fa:	649c      	str	r4, [r3, #72]	; 0x48
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f7ff ffe9 	bl	800d4d4 <WM__SelectTopLevelLayer>
 800d502:	f003 fa11 	bl	8010928 <LCD_SetClipRectMax>
 800d506:	4620      	mov	r0, r4
 800d508:	f006 f9ee 	bl	80138e8 <GUI_ALLOC_h2p>
 800d50c:	6833      	ldr	r3, [r6, #0]
 800d50e:	f9b0 1000 	ldrsh.w	r1, [r0]
 800d512:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d516:	64d9      	str	r1, [r3, #76]	; 0x4c
 800d518:	651a      	str	r2, [r3, #80]	; 0x50
 800d51a:	4628      	mov	r0, r5
 800d51c:	bd70      	pop	{r4, r5, r6, pc}
 800d51e:	bf00      	nop
 800d520:	20000110 	.word	0x20000110
 800d524:	2001d57c 	.word	0x2001d57c

0800d528 <WM_CreateWindowAsChild>:
 800d528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d52c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d52e:	469b      	mov	fp, r3
 800d530:	4b4b      	ldr	r3, [pc, #300]	; (800d660 <WM_CreateWindowAsChild+0x138>)
 800d532:	4607      	mov	r7, r0
 800d534:	4688      	mov	r8, r1
 800d536:	4692      	mov	sl, r2
 800d538:	681e      	ldr	r6, [r3, #0]
 800d53a:	bb65      	cbnz	r5, 800d596 <WM_CreateWindowAsChild+0x6e>
 800d53c:	4b49      	ldr	r3, [pc, #292]	; (800d664 <WM_CreateWindowAsChild+0x13c>)
 800d53e:	881b      	ldrh	r3, [r3, #0]
 800d540:	b363      	cbz	r3, 800d59c <WM_CreateWindowAsChild+0x74>
 800d542:	4b49      	ldr	r3, [pc, #292]	; (800d668 <WM_CreateWindowAsChild+0x140>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	7c5a      	ldrb	r2, [r3, #17]
 800d548:	4b48      	ldr	r3, [pc, #288]	; (800d66c <WM_CreateWindowAsChild+0x144>)
 800d54a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d54e:	1c5a      	adds	r2, r3, #1
 800d550:	d024      	beq.n	800d59c <WM_CreateWindowAsChild+0x74>
 800d552:	b31b      	cbz	r3, 800d59c <WM_CreateWindowAsChild+0x74>
 800d554:	461d      	mov	r5, r3
 800d556:	4628      	mov	r0, r5
 800d558:	f006 f9d0 	bl	80138fc <GUI_ALLOC_LockH>
 800d55c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d560:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800d564:	9001      	str	r0, [sp, #4]
 800d566:	4417      	add	r7, r2
 800d568:	4498      	add	r8, r3
 800d56a:	f1ba 0f00 	cmp.w	sl, #0
 800d56e:	d105      	bne.n	800d57c <WM_CreateWindowAsChild+0x54>
 800d570:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 800d574:	ebc2 0a0a 	rsb	sl, r2, sl
 800d578:	f10a 0a01 	add.w	sl, sl, #1
 800d57c:	f1bb 0f00 	cmp.w	fp, #0
 800d580:	d105      	bne.n	800d58e <WM_CreateWindowAsChild+0x66>
 800d582:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 800d586:	ebc3 0b0b 	rsb	fp, r3, fp
 800d58a:	f10b 0b01 	add.w	fp, fp, #1
 800d58e:	a801      	add	r0, sp, #4
 800d590:	f006 f9c2 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d594:	e002      	b.n	800d59c <WM_CreateWindowAsChild+0x74>
 800d596:	1c6b      	adds	r3, r5, #1
 800d598:	d1dd      	bne.n	800d556 <WM_CreateWindowAsChild+0x2e>
 800d59a:	2500      	movs	r5, #0
 800d59c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d59e:	302c      	adds	r0, #44	; 0x2c
 800d5a0:	f006 fc8c 	bl	8013ebc <GUI_ALLOC_AllocZero>
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d056      	beq.n	800d658 <WM_CreateWindowAsChild+0x130>
 800d5aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5ac:	431e      	orrs	r6, r3
 800d5ae:	4b2d      	ldr	r3, [pc, #180]	; (800d664 <WM_CreateWindowAsChild+0x13c>)
 800d5b0:	881a      	ldrh	r2, [r3, #0]
 800d5b2:	3201      	adds	r2, #1
 800d5b4:	801a      	strh	r2, [r3, #0]
 800d5b6:	f006 f9a1 	bl	80138fc <GUI_ALLOC_LockH>
 800d5ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5bc:	6103      	str	r3, [r0, #16]
 800d5be:	f10d 0908 	add.w	r9, sp, #8
 800d5c2:	4b2b      	ldr	r3, [pc, #172]	; (800d670 <WM_CreateWindowAsChild+0x148>)
 800d5c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d5c6:	f849 0d08 	str.w	r0, [r9, #-8]!
 800d5ca:	4033      	ands	r3, r6
 800d5cc:	8007      	strh	r7, [r0, #0]
 800d5ce:	f8a0 8002 	strh.w	r8, [r0, #2]
 800d5d2:	4457      	add	r7, sl
 800d5d4:	44d8      	add	r8, fp
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	3f01      	subs	r7, #1
 800d5da:	f108 38ff 	add.w	r8, r8, #4294967295
 800d5de:	6283      	str	r3, [r0, #40]	; 0x28
 800d5e0:	8087      	strh	r7, [r0, #4]
 800d5e2:	f8a0 8006 	strh.w	r8, [r0, #6]
 800d5e6:	4668      	mov	r0, sp
 800d5e8:	f006 f996 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d5ec:	4b21      	ldr	r3, [pc, #132]	; (800d674 <WM_CreateWindowAsChild+0x14c>)
 800d5ee:	6818      	ldr	r0, [r3, #0]
 800d5f0:	b148      	cbz	r0, 800d606 <WM_CreateWindowAsChild+0xde>
 800d5f2:	f006 f979 	bl	80138e8 <GUI_ALLOC_h2p>
 800d5f6:	4607      	mov	r7, r0
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f006 f975 	bl	80138e8 <GUI_ALLOC_h2p>
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	6143      	str	r3, [r0, #20]
 800d602:	617c      	str	r4, [r7, #20]
 800d604:	e000      	b.n	800d608 <WM_CreateWindowAsChild+0xe0>
 800d606:	601c      	str	r4, [r3, #0]
 800d608:	4629      	mov	r1, r5
 800d60a:	4620      	mov	r0, r4
 800d60c:	f7ff fd04 	bl	800d018 <WM__InsertWindowIntoList>
 800d610:	06b5      	lsls	r5, r6, #26
 800d612:	d502      	bpl.n	800d61a <WM_CreateWindowAsChild+0xf2>
 800d614:	4620      	mov	r0, r4
 800d616:	f7ff ff67 	bl	800d4e8 <WM_SelectWindow>
 800d61a:	07f0      	lsls	r0, r6, #31
 800d61c:	d503      	bpl.n	800d626 <WM_CreateWindowAsChild+0xfe>
 800d61e:	4b16      	ldr	r3, [pc, #88]	; (800d678 <WM_CreateWindowAsChild+0x150>)
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	3201      	adds	r2, #1
 800d624:	601a      	str	r2, [r3, #0]
 800d626:	0671      	lsls	r1, r6, #25
 800d628:	d502      	bpl.n	800d630 <WM_CreateWindowAsChild+0x108>
 800d62a:	4620      	mov	r0, r4
 800d62c:	f008 f888 	bl	8015740 <WM_BringToBottom>
 800d630:	07b2      	lsls	r2, r6, #30
 800d632:	d50d      	bpl.n	800d650 <WM_CreateWindowAsChild+0x128>
 800d634:	4620      	mov	r0, r4
 800d636:	f006 f961 	bl	80138fc <GUI_ALLOC_LockH>
 800d63a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d63c:	9000      	str	r0, [sp, #0]
 800d63e:	f043 0302 	orr.w	r3, r3, #2
 800d642:	6283      	str	r3, [r0, #40]	; 0x28
 800d644:	4668      	mov	r0, sp
 800d646:	f006 f967 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d64a:	4620      	mov	r0, r4
 800d64c:	f7ff ff2b 	bl	800d4a6 <WM_InvalidateWindow>
 800d650:	4620      	mov	r0, r4
 800d652:	2101      	movs	r1, #1
 800d654:	f7ff fed4 	bl	800d400 <WM__SendMsgNoData>
 800d658:	4620      	mov	r0, r4
 800d65a:	b003      	add	sp, #12
 800d65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d660:	2001d588 	.word	0x2001d588
 800d664:	2001d558 	.word	0x2001d558
 800d668:	20000110 	.word	0x20000110
 800d66c:	2001d560 	.word	0x2001d560
 800d670:	003f3f9f 	.word	0x003f3f9f
 800d674:	2001d57c 	.word	0x2001d57c
 800d678:	2001d5a8 	.word	0x2001d5a8

0800d67c <WM_DeleteWindow>:
 800d67c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d67e:	4604      	mov	r4, r0
 800d680:	2800      	cmp	r0, #0
 800d682:	d06e      	beq.n	800d762 <WM_DeleteWindow+0xe6>
 800d684:	f7ff fd8c 	bl	800d1a0 <WM__IsWindow>
 800d688:	2800      	cmp	r0, #0
 800d68a:	d06a      	beq.n	800d762 <WM_DeleteWindow+0xe6>
 800d68c:	4620      	mov	r0, r4
 800d68e:	f7ff ff0d 	bl	800d4ac <WM__GetTopLevelLayer>
 800d692:	210b      	movs	r1, #11
 800d694:	4605      	mov	r5, r0
 800d696:	4620      	mov	r0, r4
 800d698:	f7ff feb2 	bl	800d400 <WM__SendMsgNoData>
 800d69c:	4620      	mov	r0, r4
 800d69e:	f007 ff0c 	bl	80154ba <WM__DeleteAssocTimer>
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f006 f92a 	bl	80138fc <GUI_ALLOC_LockH>
 800d6a8:	9001      	str	r0, [sp, #4]
 800d6aa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d6ac:	b108      	cbz	r0, 800d6b2 <WM_DeleteWindow+0x36>
 800d6ae:	f001 fb7d 	bl	800edac <GUI_MEMDEV_Delete>
 800d6b2:	4b2d      	ldr	r3, [pc, #180]	; (800d768 <WM_DeleteWindow+0xec>)
 800d6b4:	4a2d      	ldr	r2, [pc, #180]	; (800d76c <WM_DeleteWindow+0xf0>)
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	6019      	str	r1, [r3, #0]
 800d6ba:	4b2d      	ldr	r3, [pc, #180]	; (800d770 <WM_DeleteWindow+0xf4>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d6c2:	42a0      	cmp	r0, r4
 800d6c4:	bf08      	it	eq
 800d6c6:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800d6ca:	4a2a      	ldr	r2, [pc, #168]	; (800d774 <WM_DeleteWindow+0xf8>)
 800d6cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d6d0:	42a1      	cmp	r1, r4
 800d6d2:	bf04      	itt	eq
 800d6d4:	2100      	moveq	r1, #0
 800d6d6:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800d6da:	4b27      	ldr	r3, [pc, #156]	; (800d778 <WM_DeleteWindow+0xfc>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	b12b      	cbz	r3, 800d6ec <WM_DeleteWindow+0x70>
 800d6e0:	685a      	ldr	r2, [r3, #4]
 800d6e2:	42a2      	cmp	r2, r4
 800d6e4:	bf04      	itt	eq
 800d6e6:	2200      	moveq	r2, #0
 800d6e8:	605a      	streq	r2, [r3, #4]
 800d6ea:	e7f7      	b.n	800d6dc <WM_DeleteWindow+0x60>
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	2107      	movs	r1, #7
 800d6f0:	f7fe ff8b 	bl	800c60a <WM_NotifyParent>
 800d6f4:	9e01      	ldr	r6, [sp, #4]
 800d6f6:	69f0      	ldr	r0, [r6, #28]
 800d6f8:	f7ff ffc0 	bl	800d67c <WM_DeleteWindow>
 800d6fc:	69f3      	ldr	r3, [r6, #28]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d1f9      	bne.n	800d6f6 <WM_DeleteWindow+0x7a>
 800d702:	4620      	mov	r0, r4
 800d704:	f7ff fe63 	bl	800d3ce <WM__DetachWindow>
 800d708:	4b1c      	ldr	r3, [pc, #112]	; (800d77c <WM_DeleteWindow+0x100>)
 800d70a:	6818      	ldr	r0, [r3, #0]
 800d70c:	b150      	cbz	r0, 800d724 <WM_DeleteWindow+0xa8>
 800d70e:	f006 f8eb 	bl	80138e8 <GUI_ALLOC_h2p>
 800d712:	4606      	mov	r6, r0
 800d714:	6940      	ldr	r0, [r0, #20]
 800d716:	42a0      	cmp	r0, r4
 800d718:	d1f8      	bne.n	800d70c <WM_DeleteWindow+0x90>
 800d71a:	4620      	mov	r0, r4
 800d71c:	f006 f8e4 	bl	80138e8 <GUI_ALLOC_h2p>
 800d720:	6943      	ldr	r3, [r0, #20]
 800d722:	6173      	str	r3, [r6, #20]
 800d724:	9b01      	ldr	r3, [sp, #4]
 800d726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d728:	07da      	lsls	r2, r3, #31
 800d72a:	d503      	bpl.n	800d734 <WM_DeleteWindow+0xb8>
 800d72c:	4a14      	ldr	r2, [pc, #80]	; (800d780 <WM_DeleteWindow+0x104>)
 800d72e:	6811      	ldr	r1, [r2, #0]
 800d730:	3901      	subs	r1, #1
 800d732:	6011      	str	r1, [r2, #0]
 800d734:	069b      	lsls	r3, r3, #26
 800d736:	d503      	bpl.n	800d740 <WM_DeleteWindow+0xc4>
 800d738:	4b12      	ldr	r3, [pc, #72]	; (800d784 <WM_DeleteWindow+0x108>)
 800d73a:	881a      	ldrh	r2, [r3, #0]
 800d73c:	3a01      	subs	r2, #1
 800d73e:	801a      	strh	r2, [r3, #0]
 800d740:	a801      	add	r0, sp, #4
 800d742:	f006 f8e9 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d746:	4b10      	ldr	r3, [pc, #64]	; (800d788 <WM_DeleteWindow+0x10c>)
 800d748:	881a      	ldrh	r2, [r3, #0]
 800d74a:	4620      	mov	r0, r4
 800d74c:	3a01      	subs	r2, #1
 800d74e:	801a      	strh	r2, [r3, #0]
 800d750:	f006 f90e 	bl	8013970 <GUI_ALLOC_Free>
 800d754:	2d00      	cmp	r5, #0
 800d756:	db04      	blt.n	800d762 <WM_DeleteWindow+0xe6>
 800d758:	4b0c      	ldr	r3, [pc, #48]	; (800d78c <WM_DeleteWindow+0x110>)
 800d75a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d75e:	f7ff fec3 	bl	800d4e8 <WM_SelectWindow>
 800d762:	b002      	add	sp, #8
 800d764:	bd70      	pop	{r4, r5, r6, pc}
 800d766:	bf00      	nop
 800d768:	2001d0d8 	.word	0x2001d0d8
 800d76c:	2001d570 	.word	0x2001d570
 800d770:	2001d580 	.word	0x2001d580
 800d774:	2001d59c 	.word	0x2001d59c
 800d778:	2001d594 	.word	0x2001d594
 800d77c:	2001d57c 	.word	0x2001d57c
 800d780:	2001d5a8 	.word	0x2001d5a8
 800d784:	2001d578 	.word	0x2001d578
 800d788:	2001d558 	.word	0x2001d558
 800d78c:	2001d560 	.word	0x2001d560

0800d790 <WM_GetActiveWindow>:
 800d790:	4b01      	ldr	r3, [pc, #4]	; (800d798 <WM_GetActiveWindow+0x8>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800d796:	4770      	bx	lr
 800d798:	20000110 	.word	0x20000110

0800d79c <WM__GetNextIVR>:
 800d79c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d7a0:	4f5d      	ldr	r7, [pc, #372]	; (800d918 <WM__GetNextIVR+0x17c>)
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	f000 80b2 	beq.w	800d912 <WM__GetNextIVR+0x176>
 800d7ae:	4b5b      	ldr	r3, [pc, #364]	; (800d91c <WM__GetNextIVR+0x180>)
 800d7b0:	695a      	ldr	r2, [r3, #20]
 800d7b2:	2a01      	cmp	r2, #1
 800d7b4:	461c      	mov	r4, r3
 800d7b6:	dd03      	ble.n	800d7c0 <WM__GetNextIVR+0x24>
 800d7b8:	3a01      	subs	r2, #1
 800d7ba:	615a      	str	r2, [r3, #20]
 800d7bc:	2000      	movs	r0, #0
 800d7be:	e0a8      	b.n	800d912 <WM__GetNextIVR+0x176>
 800d7c0:	f104 0608 	add.w	r6, r4, #8
 800d7c4:	691b      	ldr	r3, [r3, #16]
 800d7c6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	ad02      	add	r5, sp, #8
 800d7ce:	6123      	str	r3, [r4, #16]
 800d7d0:	e885 0003 	stmia.w	r5, {r0, r1}
 800d7d4:	b923      	cbnz	r3, 800d7e0 <WM__GetNextIVR+0x44>
 800d7d6:	8823      	ldrh	r3, [r4, #0]
 800d7d8:	f8ad 3008 	strh.w	r3, [sp, #8]
 800d7dc:	8863      	ldrh	r3, [r4, #2]
 800d7de:	e011      	b.n	800d804 <WM__GetNextIVR+0x68>
 800d7e0:	89a3      	ldrh	r3, [r4, #12]
 800d7e2:	8962      	ldrh	r2, [r4, #10]
 800d7e4:	f8ad 200a 	strh.w	r2, [sp, #10]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800d7f0:	f8ad 3008 	strh.w	r3, [sp, #8]
 800d7f4:	b21b      	sxth	r3, r3
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	da06      	bge.n	800d808 <WM__GetNextIVR+0x6c>
 800d7fa:	8823      	ldrh	r3, [r4, #0]
 800d7fc:	f8ad 3008 	strh.w	r3, [sp, #8]
 800d800:	89e3      	ldrh	r3, [r4, #14]
 800d802:	3301      	adds	r3, #1
 800d804:	f8ad 300a 	strh.w	r3, [sp, #10]
 800d808:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800d80c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800d810:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800d91c <WM__GetNextIVR+0x180>
 800d814:	429a      	cmp	r2, r3
 800d816:	dd04      	ble.n	800d822 <WM__GetNextIVR+0x86>
 800d818:	6963      	ldr	r3, [r4, #20]
 800d81a:	3b01      	subs	r3, #1
 800d81c:	2000      	movs	r0, #0
 800d81e:	6163      	str	r3, [r4, #20]
 800d820:	e077      	b.n	800d912 <WM__GetNextIVR+0x176>
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800d826:	f006 f869 	bl	80138fc <GUI_ALLOC_LockH>
 800d82a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800d82e:	f9b8 3000 	ldrsh.w	r3, [r8]
 800d832:	9001      	str	r0, [sp, #4]
 800d834:	429a      	cmp	r2, r3
 800d836:	d11c      	bne.n	800d872 <WM__GetNextIVR+0xd6>
 800d838:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800d83c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d840:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800d844:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d848:	4b33      	ldr	r3, [pc, #204]	; (800d918 <WM__GetNextIVR+0x17c>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d84e:	b15a      	cbz	r2, 800d868 <WM__GetNextIVR+0xcc>
 800d850:	4610      	mov	r0, r2
 800d852:	f006 f849 	bl	80138e8 <GUI_ALLOC_h2p>
 800d856:	4680      	mov	r8, r0
 800d858:	2200      	movs	r2, #0
 800d85a:	6a00      	ldr	r0, [r0, #32]
 800d85c:	4629      	mov	r1, r5
 800d85e:	f7ff f9c1 	bl	800cbe4 <_Findy1>
 800d862:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800d866:	e7f2      	b.n	800d84e <WM__GetNextIVR+0xb2>
 800d868:	9b01      	ldr	r3, [sp, #4]
 800d86a:	4629      	mov	r1, r5
 800d86c:	69d8      	ldr	r0, [r3, #28]
 800d86e:	f7ff f9b9 	bl	800cbe4 <_Findy1>
 800d872:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d876:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d87e:	b16a      	cbz	r2, 800d89c <WM__GetNextIVR+0x100>
 800d880:	4610      	mov	r0, r2
 800d882:	f006 f831 	bl	80138e8 <GUI_ALLOC_h2p>
 800d886:	4629      	mov	r1, r5
 800d888:	4680      	mov	r8, r0
 800d88a:	2200      	movs	r2, #0
 800d88c:	6a00      	ldr	r0, [r0, #32]
 800d88e:	f7ff f9ff 	bl	800cc90 <_Findx0>
 800d892:	2800      	cmp	r0, #0
 800d894:	d1ed      	bne.n	800d872 <WM__GetNextIVR+0xd6>
 800d896:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800d89a:	e7f0      	b.n	800d87e <WM__GetNextIVR+0xe2>
 800d89c:	9b01      	ldr	r3, [sp, #4]
 800d89e:	4629      	mov	r1, r5
 800d8a0:	69d8      	ldr	r0, [r3, #28]
 800d8a2:	f7ff f9f5 	bl	800cc90 <_Findx0>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d1e3      	bne.n	800d872 <WM__GetNextIVR+0xd6>
 800d8aa:	88a3      	ldrh	r3, [r4, #4]
 800d8ac:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800d8b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d8b4:	b21b      	sxth	r3, r3
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	dd07      	ble.n	800d8ca <WM__GetNextIVR+0x12e>
 800d8ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d8be:	e886 0003 	stmia.w	r6, {r0, r1}
 800d8c2:	a801      	add	r0, sp, #4
 800d8c4:	f006 f828 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d8c8:	e797      	b.n	800d7fa <WM__GetNextIVR+0x5e>
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d8ce:	b152      	cbz	r2, 800d8e6 <WM__GetNextIVR+0x14a>
 800d8d0:	4610      	mov	r0, r2
 800d8d2:	f006 f809 	bl	80138e8 <GUI_ALLOC_h2p>
 800d8d6:	4607      	mov	r7, r0
 800d8d8:	2200      	movs	r2, #0
 800d8da:	6a00      	ldr	r0, [r0, #32]
 800d8dc:	4629      	mov	r1, r5
 800d8de:	f7ff fa1b 	bl	800cd18 <_Findx1>
 800d8e2:	69ba      	ldr	r2, [r7, #24]
 800d8e4:	e7f3      	b.n	800d8ce <WM__GetNextIVR+0x132>
 800d8e6:	af04      	add	r7, sp, #16
 800d8e8:	4629      	mov	r1, r5
 800d8ea:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800d8ee:	69d8      	ldr	r0, [r3, #28]
 800d8f0:	f7ff fa12 	bl	800cd18 <_Findx1>
 800d8f4:	4638      	mov	r0, r7
 800d8f6:	f006 f80f 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d8fa:	6923      	ldr	r3, [r4, #16]
 800d8fc:	f644 6220 	movw	r2, #20000	; 0x4e20
 800d900:	4293      	cmp	r3, r2
 800d902:	dc89      	bgt.n	800d818 <WM__GetNextIVR+0x7c>
 800d904:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d908:	e886 0003 	stmia.w	r6, {r0, r1}
 800d90c:	f7ff fc24 	bl	800d158 <WM__ActivateClipRect>
 800d910:	2001      	movs	r0, #1
 800d912:	b004      	add	sp, #16
 800d914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d918:	20000110 	.word	0x20000110
 800d91c:	2001d0c0 	.word	0x2001d0c0

0800d920 <WM__InitIVRSearch>:
 800d920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d924:	4f39      	ldr	r7, [pc, #228]	; (800da0c <WM__InitIVRSearch+0xec>)
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800d92c:	b086      	sub	sp, #24
 800d92e:	4606      	mov	r6, r0
 800d930:	b912      	cbnz	r2, 800d938 <WM__InitIVRSearch+0x18>
 800d932:	f7ff fc11 	bl	800d158 <WM__ActivateClipRect>
 800d936:	e064      	b.n	800da02 <WM__InitIVRSearch+0xe2>
 800d938:	4d35      	ldr	r5, [pc, #212]	; (800da10 <WM__InitIVRSearch+0xf0>)
 800d93a:	696a      	ldr	r2, [r5, #20]
 800d93c:	3201      	adds	r2, #1
 800d93e:	2a01      	cmp	r2, #1
 800d940:	616a      	str	r2, [r5, #20]
 800d942:	462c      	mov	r4, r5
 800d944:	dc5d      	bgt.n	800da02 <WM__InitIVRSearch+0xe2>
 800d946:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800d948:	f005 ffd8 	bl	80138fc <GUI_ALLOC_LockH>
 800d94c:	f04f 32ff 	mov.w	r2, #4294967295
 800d950:	612a      	str	r2, [r5, #16]
 800d952:	4a30      	ldr	r2, [pc, #192]	; (800da14 <WM__InitIVRSearch+0xf4>)
 800d954:	9000      	str	r0, [sp, #0]
 800d956:	7812      	ldrb	r2, [r2, #0]
 800d958:	b12a      	cbz	r2, 800d966 <WM__InitIVRSearch+0x46>
 800d95a:	f100 0308 	add.w	r3, r0, #8
 800d95e:	aa02      	add	r2, sp, #8
 800d960:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d964:	e005      	b.n	800d972 <WM__InitIVRSearch+0x52>
 800d966:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d968:	f012 0802 	ands.w	r8, r2, #2
 800d96c:	d00a      	beq.n	800d984 <WM__InitIVRSearch+0x64>
 800d96e:	c803      	ldmia	r0, {r0, r1}
 800d970:	aa02      	add	r2, sp, #8
 800d972:	e882 0003 	stmia.w	r2, {r0, r1}
 800d976:	ad02      	add	r5, sp, #8
 800d978:	b166      	cbz	r6, 800d994 <WM__InitIVRSearch+0x74>
 800d97a:	4628      	mov	r0, r5
 800d97c:	4631      	mov	r1, r6
 800d97e:	f003 f9ed 	bl	8010d5c <GUI__IntersectRect>
 800d982:	e007      	b.n	800d994 <WM__InitIVRSearch+0x74>
 800d984:	696b      	ldr	r3, [r5, #20]
 800d986:	4668      	mov	r0, sp
 800d988:	3b01      	subs	r3, #1
 800d98a:	616b      	str	r3, [r5, #20]
 800d98c:	f005 ffc4 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d990:	4640      	mov	r0, r8
 800d992:	e037      	b.n	800da04 <WM__InitIVRSearch+0xe4>
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	4e20      	ldr	r6, [pc, #128]	; (800da18 <WM__InitIVRSearch+0xf8>)
 800d998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d99a:	b1c2      	cbz	r2, 800d9ce <WM__InitIVRSearch+0xae>
 800d99c:	9b00      	ldr	r3, [sp, #0]
 800d99e:	6810      	ldr	r0, [r2, #0]
 800d9a0:	6851      	ldr	r1, [r2, #4]
 800d9a2:	9301      	str	r3, [sp, #4]
 800d9a4:	ab04      	add	r3, sp, #16
 800d9a6:	c303      	stmia	r3!, {r0, r1}
 800d9a8:	6833      	ldr	r3, [r6, #0]
 800d9aa:	b133      	cbz	r3, 800d9ba <WM__InitIVRSearch+0x9a>
 800d9ac:	a801      	add	r0, sp, #4
 800d9ae:	f005 ffb3 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d9b2:	6830      	ldr	r0, [r6, #0]
 800d9b4:	f005 ffa2 	bl	80138fc <GUI_ALLOC_LockH>
 800d9b8:	9001      	str	r0, [sp, #4]
 800d9ba:	9801      	ldr	r0, [sp, #4]
 800d9bc:	a904      	add	r1, sp, #16
 800d9be:	f7ff fb9b 	bl	800d0f8 <WM__Client2Screen>
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	a904      	add	r1, sp, #16
 800d9c6:	f003 f9c9 	bl	8010d5c <GUI__IntersectRect>
 800d9ca:	a801      	add	r0, sp, #4
 800d9cc:	e000      	b.n	800d9d0 <WM__InitIVRSearch+0xb0>
 800d9ce:	4668      	mov	r0, sp
 800d9d0:	f005 ffa2 	bl	8013918 <GUI_ALLOC_UnlockH>
 800d9d4:	6831      	ldr	r1, [r6, #0]
 800d9d6:	b119      	cbz	r1, 800d9e0 <WM__InitIVRSearch+0xc0>
 800d9d8:	4628      	mov	r0, r5
 800d9da:	f7ff faef 	bl	800cfbc <WM__ClipAtParentBorders>
 800d9de:	b128      	cbz	r0, 800d9ec <WM__InitIVRSearch+0xcc>
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	4628      	mov	r0, r5
 800d9e4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800d9e6:	f7ff fae9 	bl	800cfbc <WM__ClipAtParentBorders>
 800d9ea:	b918      	cbnz	r0, 800d9f4 <WM__InitIVRSearch+0xd4>
 800d9ec:	6963      	ldr	r3, [r4, #20]
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	6163      	str	r3, [r4, #20]
 800d9f2:	e007      	b.n	800da04 <WM__InitIVRSearch+0xe4>
 800d9f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d9f8:	e884 0003 	stmia.w	r4, {r0, r1}
 800d9fc:	f7ff fece 	bl	800d79c <WM__GetNextIVR>
 800da00:	e000      	b.n	800da04 <WM__InitIVRSearch+0xe4>
 800da02:	2001      	movs	r0, #1
 800da04:	b006      	add	sp, #24
 800da06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da0a:	bf00      	nop
 800da0c:	20000110 	.word	0x20000110
 800da10:	2001d0c0 	.word	0x2001d0c0
 800da14:	2001d585 	.word	0x2001d585
 800da18:	2001d55c 	.word	0x2001d55c

0800da1c <WM_SetDefault>:
 800da1c:	b508      	push	{r3, lr}
 800da1e:	f004 fa35 	bl	8011e8c <GL_SetDefault>
 800da22:	4b02      	ldr	r3, [pc, #8]	; (800da2c <WM_SetDefault+0x10>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2200      	movs	r2, #0
 800da28:	645a      	str	r2, [r3, #68]	; 0x44
 800da2a:	bd08      	pop	{r3, pc}
 800da2c:	20000110 	.word	0x20000110

0800da30 <WM__Paint1>:
 800da30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da32:	b089      	sub	sp, #36	; 0x24
 800da34:	4604      	mov	r4, r0
 800da36:	f005 ff61 	bl	80138fc <GUI_ALLOC_LockH>
 800da3a:	6907      	ldr	r7, [r0, #16]
 800da3c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800da3e:	9001      	str	r0, [sp, #4]
 800da40:	3008      	adds	r0, #8
 800da42:	c803      	ldmia	r0, {r0, r1}
 800da44:	ad02      	add	r5, sp, #8
 800da46:	e885 0003 	stmia.w	r5, {r0, r1}
 800da4a:	a801      	add	r0, sp, #4
 800da4c:	f005 ff64 	bl	8013918 <GUI_ALLOC_UnlockH>
 800da50:	2f00      	cmp	r7, #0
 800da52:	d031      	beq.n	800dab8 <WM__Paint1+0x88>
 800da54:	07b3      	lsls	r3, r6, #30
 800da56:	d52f      	bpl.n	800dab8 <WM__Paint1+0x88>
 800da58:	4620      	mov	r0, r4
 800da5a:	212e      	movs	r1, #46	; 0x2e
 800da5c:	f7fe fd58 	bl	800c510 <WM_SendMessageNoPara>
 800da60:	4b16      	ldr	r3, [pc, #88]	; (800dabc <WM__Paint1+0x8c>)
 800da62:	781a      	ldrb	r2, [r3, #0]
 800da64:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 800da68:	f102 0201 	add.w	r2, r2, #1
 800da6c:	701a      	strb	r2, [r3, #0]
 800da6e:	461e      	mov	r6, r3
 800da70:	d00a      	beq.n	800da88 <WM__Paint1+0x58>
 800da72:	230f      	movs	r3, #15
 800da74:	9405      	str	r4, [sp, #20]
 800da76:	9304      	str	r3, [sp, #16]
 800da78:	9507      	str	r5, [sp, #28]
 800da7a:	f7ff ffcf 	bl	800da1c <WM_SetDefault>
 800da7e:	4620      	mov	r0, r4
 800da80:	a904      	add	r1, sp, #16
 800da82:	f7fe fb49 	bl	800c118 <WM__SendMessage>
 800da86:	e010      	b.n	800daaa <WM__Paint1+0x7a>
 800da88:	4628      	mov	r0, r5
 800da8a:	f7ff ff49 	bl	800d920 <WM__InitIVRSearch>
 800da8e:	b160      	cbz	r0, 800daaa <WM__Paint1+0x7a>
 800da90:	230f      	movs	r3, #15
 800da92:	9304      	str	r3, [sp, #16]
 800da94:	9405      	str	r4, [sp, #20]
 800da96:	9507      	str	r5, [sp, #28]
 800da98:	f7ff ffc0 	bl	800da1c <WM_SetDefault>
 800da9c:	4620      	mov	r0, r4
 800da9e:	a904      	add	r1, sp, #16
 800daa0:	f7fe fb3a 	bl	800c118 <WM__SendMessage>
 800daa4:	f7ff fe7a 	bl	800d79c <WM__GetNextIVR>
 800daa8:	e7f1      	b.n	800da8e <WM__Paint1+0x5e>
 800daaa:	7833      	ldrb	r3, [r6, #0]
 800daac:	4620      	mov	r0, r4
 800daae:	3b01      	subs	r3, #1
 800dab0:	212f      	movs	r1, #47	; 0x2f
 800dab2:	7033      	strb	r3, [r6, #0]
 800dab4:	f7fe fd2c 	bl	800c510 <WM_SendMessageNoPara>
 800dab8:	b009      	add	sp, #36	; 0x24
 800daba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dabc:	2001d585 	.word	0x2001d585

0800dac0 <WM__Paint>:
 800dac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dac2:	b089      	sub	sp, #36	; 0x24
 800dac4:	ac06      	add	r4, sp, #24
 800dac6:	9003      	str	r0, [sp, #12]
 800dac8:	f005 ff18 	bl	80138fc <GUI_ALLOC_LockH>
 800dacc:	f100 0208 	add.w	r2, r0, #8
 800dad0:	4603      	mov	r3, r0
 800dad2:	9005      	str	r0, [sp, #20]
 800dad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dad8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800dada:	699e      	ldr	r6, [r3, #24]
 800dadc:	691f      	ldr	r7, [r3, #16]
 800dade:	e884 0003 	stmia.w	r4, {r0, r1}
 800dae2:	a805      	add	r0, sp, #20
 800dae4:	f005 ff18 	bl	8013918 <GUI_ALLOC_UnlockH>
 800dae8:	f244 0320 	movw	r3, #16416	; 0x4020
 800daec:	402b      	ands	r3, r5
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d034      	beq.n	800db5c <WM__Paint+0x9c>
 800daf2:	b1bf      	cbz	r7, 800db24 <WM__Paint+0x64>
 800daf4:	4620      	mov	r0, r4
 800daf6:	9903      	ldr	r1, [sp, #12]
 800daf8:	f7ff fa60 	bl	800cfbc <WM__ClipAtParentBorders>
 800dafc:	b190      	cbz	r0, 800db24 <WM__Paint+0x64>
 800dafe:	9803      	ldr	r0, [sp, #12]
 800db00:	f7ff fcf2 	bl	800d4e8 <WM_SelectWindow>
 800db04:	0769      	lsls	r1, r5, #29
 800db06:	d50f      	bpl.n	800db28 <WM__Paint+0x68>
 800db08:	b126      	cbz	r6, 800db14 <WM__Paint+0x54>
 800db0a:	f005 0501 	and.w	r5, r5, #1
 800db0e:	f085 0501 	eor.w	r5, r5, #1
 800db12:	e000      	b.n	800db16 <WM__Paint+0x56>
 800db14:	2501      	movs	r5, #1
 800db16:	9500      	str	r5, [sp, #0]
 800db18:	4620      	mov	r0, r4
 800db1a:	4912      	ldr	r1, [pc, #72]	; (800db64 <WM__Paint+0xa4>)
 800db1c:	aa03      	add	r2, sp, #12
 800db1e:	2300      	movs	r3, #0
 800db20:	f000 fada 	bl	800e0d8 <GUI_MEMDEV_Draw>
 800db24:	2400      	movs	r4, #0
 800db26:	e003      	b.n	800db30 <WM__Paint+0x70>
 800db28:	9803      	ldr	r0, [sp, #12]
 800db2a:	f7ff f9d7 	bl	800cedc <WM__PaintWinAndOverlays>
 800db2e:	2401      	movs	r4, #1
 800db30:	9803      	ldr	r0, [sp, #12]
 800db32:	f005 fee3 	bl	80138fc <GUI_ALLOC_LockH>
 800db36:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800db38:	9005      	str	r0, [sp, #20]
 800db3a:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 800db3e:	f023 0320 	bic.w	r3, r3, #32
 800db42:	0492      	lsls	r2, r2, #18
 800db44:	bf48      	it	mi
 800db46:	f043 0304 	orrmi.w	r3, r3, #4
 800db4a:	6283      	str	r3, [r0, #40]	; 0x28
 800db4c:	a805      	add	r0, sp, #20
 800db4e:	f005 fee3 	bl	8013918 <GUI_ALLOC_UnlockH>
 800db52:	4b05      	ldr	r3, [pc, #20]	; (800db68 <WM__Paint+0xa8>)
 800db54:	881a      	ldrh	r2, [r3, #0]
 800db56:	3a01      	subs	r2, #1
 800db58:	801a      	strh	r2, [r3, #0]
 800db5a:	e000      	b.n	800db5e <WM__Paint+0x9e>
 800db5c:	461c      	mov	r4, r3
 800db5e:	4620      	mov	r0, r4
 800db60:	b009      	add	sp, #36	; 0x24
 800db62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db64:	0800cf55 	.word	0x0800cf55
 800db68:	2001d578 	.word	0x2001d578

0800db6c <WM__DeleteSecure>:
 800db6c:	b508      	push	{r3, lr}
 800db6e:	f005 febb 	bl	80138e8 <GUI_ALLOC_h2p>
 800db72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800db74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db78:	6283      	str	r3, [r0, #40]	; 0x28
 800db7a:	4b02      	ldr	r3, [pc, #8]	; (800db84 <WM__DeleteSecure+0x18>)
 800db7c:	2201      	movs	r2, #1
 800db7e:	601a      	str	r2, [r3, #0]
 800db80:	bd08      	pop	{r3, pc}
 800db82:	bf00      	nop
 800db84:	2001d0bc 	.word	0x2001d0bc

0800db88 <WM_Exec>:
 800db88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db8c:	4b4c      	ldr	r3, [pc, #304]	; (800dcc0 <WM_Exec+0x138>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	b09f      	sub	sp, #124	; 0x7c
 800db92:	b103      	cbz	r3, 800db96 <WM_Exec+0xe>
 800db94:	4798      	blx	r3
 800db96:	2600      	movs	r6, #0
 800db98:	4d4a      	ldr	r5, [pc, #296]	; (800dcc4 <WM_Exec+0x13c>)
 800db9a:	682b      	ldr	r3, [r5, #0]
 800db9c:	b1db      	cbz	r3, 800dbd6 <WM_Exec+0x4e>
 800db9e:	4b4a      	ldr	r3, [pc, #296]	; (800dcc8 <WM_Exec+0x140>)
 800dba0:	681c      	ldr	r4, [r3, #0]
 800dba2:	b1bc      	cbz	r4, 800dbd4 <WM_Exec+0x4c>
 800dba4:	4620      	mov	r0, r4
 800dba6:	f005 fea9 	bl	80138fc <GUI_ALLOC_LockH>
 800dbaa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800dbac:	6947      	ldr	r7, [r0, #20]
 800dbae:	ab1e      	add	r3, sp, #120	; 0x78
 800dbb0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800dbb4:	f843 0d70 	str.w	r0, [r3, #-112]!
 800dbb8:	d007      	beq.n	800dbca <WM_Exec+0x42>
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f005 feac 	bl	8013918 <GUI_ALLOC_UnlockH>
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f7ff fd5b 	bl	800d67c <WM_DeleteWindow>
 800dbc6:	463c      	mov	r4, r7
 800dbc8:	e7eb      	b.n	800dba2 <WM_Exec+0x1a>
 800dbca:	4618      	mov	r0, r3
 800dbcc:	463c      	mov	r4, r7
 800dbce:	f005 fea3 	bl	8013918 <GUI_ALLOC_UnlockH>
 800dbd2:	e7e6      	b.n	800dba2 <WM_Exec+0x1a>
 800dbd4:	602c      	str	r4, [r5, #0]
 800dbd6:	4b3d      	ldr	r3, [pc, #244]	; (800dccc <WM_Exec+0x144>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	b103      	cbz	r3, 800dbde <WM_Exec+0x56>
 800dbdc:	4798      	blx	r3
 800dbde:	4b3c      	ldr	r3, [pc, #240]	; (800dcd0 <WM_Exec+0x148>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	b92b      	cbnz	r3, 800dbf0 <WM_Exec+0x68>
 800dbe4:	4f3b      	ldr	r7, [pc, #236]	; (800dcd4 <WM_Exec+0x14c>)
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800dbec:	b143      	cbz	r3, 800dc00 <WM_Exec+0x78>
 800dbee:	e003      	b.n	800dbf8 <WM_Exec+0x70>
 800dbf0:	4798      	blx	r3
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	d0f6      	beq.n	800dbe4 <WM_Exec+0x5c>
 800dbf6:	e058      	b.n	800dcaa <WM_Exec+0x122>
 800dbf8:	f004 fab4 	bl	8012164 <GUI_PollKeyMsg>
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	d154      	bne.n	800dcaa <WM_Exec+0x122>
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	f893 5054 	ldrb.w	r5, [r3, #84]	; 0x54
 800dc06:	b14d      	cbz	r5, 800dc1c <WM_Exec+0x94>
 800dc08:	4b33      	ldr	r3, [pc, #204]	; (800dcd8 <WM_Exec+0x150>)
 800dc0a:	881d      	ldrh	r5, [r3, #0]
 800dc0c:	b135      	cbz	r5, 800dc1c <WM_Exec+0x94>
 800dc0e:	4b33      	ldr	r3, [pc, #204]	; (800dcdc <WM_Exec+0x154>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d04b      	beq.n	800dcae <WM_Exec+0x126>
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4798      	blx	r3
 800dc1a:	2501      	movs	r5, #1
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800dc22:	b913      	cbnz	r3, 800dc2a <WM_Exec+0xa2>
 800dc24:	2d00      	cmp	r5, #0
 800dc26:	d137      	bne.n	800dc98 <WM_Exec+0x110>
 800dc28:	e045      	b.n	800dcb6 <WM_Exec+0x12e>
 800dc2a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800dcd8 <WM_Exec+0x150>
 800dc2e:	f8b8 3000 	ldrh.w	r3, [r8]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d0f6      	beq.n	800dc24 <WM_Exec+0x9c>
 800dc36:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800dce0 <WM_Exec+0x158>
 800dc3a:	f8d9 4000 	ldr.w	r4, [r9]
 800dc3e:	b90c      	cbnz	r4, 800dc44 <WM_Exec+0xbc>
 800dc40:	4b21      	ldr	r3, [pc, #132]	; (800dcc8 <WM_Exec+0x140>)
 800dc42:	681c      	ldr	r4, [r3, #0]
 800dc44:	a802      	add	r0, sp, #8
 800dc46:	f004 f991 	bl	8011f6c <GUI_SaveContext_W>
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 800dc50:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 800dc54:	b914      	cbnz	r4, 800dc5c <WM_Exec+0xd4>
 800dc56:	2400      	movs	r4, #0
 800dc58:	e00d      	b.n	800dc76 <WM_Exec+0xee>
 800dc5a:	b963      	cbnz	r3, 800dc76 <WM_Exec+0xee>
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	f7ff ff2f 	bl	800dac0 <WM__Paint>
 800dc62:	4603      	mov	r3, r0
 800dc64:	4620      	mov	r0, r4
 800dc66:	9301      	str	r3, [sp, #4]
 800dc68:	f005 fe3e 	bl	80138e8 <GUI_ALLOC_h2p>
 800dc6c:	6944      	ldr	r4, [r0, #20]
 800dc6e:	9b01      	ldr	r3, [sp, #4]
 800dc70:	2c00      	cmp	r4, #0
 800dc72:	d1f2      	bne.n	800dc5a <WM_Exec+0xd2>
 800dc74:	e7ef      	b.n	800dc56 <WM_Exec+0xce>
 800dc76:	4658      	mov	r0, fp
 800dc78:	f8c9 4000 	str.w	r4, [r9]
 800dc7c:	f004 f928 	bl	8011ed0 <GUI_SetColor>
 800dc80:	4650      	mov	r0, sl
 800dc82:	f004 f923 	bl	8011ecc <GUI_SetBkColor>
 800dc86:	a802      	add	r0, sp, #8
 800dc88:	f004 f97a 	bl	8011f80 <GUI_RestoreContext>
 800dc8c:	f8b8 3000 	ldrh.w	r3, [r8]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d0c7      	beq.n	800dc24 <WM_Exec+0x9c>
 800dc94:	2601      	movs	r6, #1
 800dc96:	e7c1      	b.n	800dc1c <WM_Exec+0x94>
 800dc98:	4b10      	ldr	r3, [pc, #64]	; (800dcdc <WM_Exec+0x154>)
 800dc9a:	6818      	ldr	r0, [r3, #0]
 800dc9c:	b110      	cbz	r0, 800dca4 <WM_Exec+0x11c>
 800dc9e:	6843      	ldr	r3, [r0, #4]
 800dca0:	4798      	blx	r3
 800dca2:	e008      	b.n	800dcb6 <WM_Exec+0x12e>
 800dca4:	f003 f820 	bl	8010ce8 <GUI__ManageCache>
 800dca8:	e005      	b.n	800dcb6 <WM_Exec+0x12e>
 800dcaa:	2601      	movs	r6, #1
 800dcac:	e774      	b.n	800db98 <WM_Exec+0x10>
 800dcae:	2001      	movs	r0, #1
 800dcb0:	f003 f81a 	bl	8010ce8 <GUI__ManageCache>
 800dcb4:	e7b1      	b.n	800dc1a <WM_Exec+0x92>
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	b01f      	add	sp, #124	; 0x7c
 800dcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcbe:	bf00      	nop
 800dcc0:	2001d56c 	.word	0x2001d56c
 800dcc4:	2001d0bc 	.word	0x2001d0bc
 800dcc8:	2001d57c 	.word	0x2001d57c
 800dccc:	2001d568 	.word	0x2001d568
 800dcd0:	2001d5e8 	.word	0x2001d5e8
 800dcd4:	20000110 	.word	0x20000110
 800dcd8:	2001d578 	.word	0x2001d578
 800dcdc:	2001d598 	.word	0x2001d598
 800dce0:	2001d0d8 	.word	0x2001d0d8

0800dce4 <WM_Activate>:
 800dce4:	4b02      	ldr	r3, [pc, #8]	; (800dcf0 <WM_Activate+0xc>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2201      	movs	r2, #1
 800dcea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800dcee:	4770      	bx	lr
 800dcf0:	20000110 	.word	0x20000110

0800dcf4 <WM_Deactivate>:
 800dcf4:	4b03      	ldr	r3, [pc, #12]	; (800dd04 <WM_Deactivate+0x10>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800dcfe:	f002 be13 	b.w	8010928 <LCD_SetClipRectMax>
 800dd02:	bf00      	nop
 800dd04:	20000110 	.word	0x20000110

0800dd08 <WM_DefaultProc>:
 800dd08:	b510      	push	{r4, lr}
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	6840      	ldr	r0, [r0, #4]
 800dd0e:	6823      	ldr	r3, [r4, #0]
 800dd10:	68e1      	ldr	r1, [r4, #12]
 800dd12:	2b17      	cmp	r3, #23
 800dd14:	d00f      	beq.n	800dd36 <WM_DefaultProc+0x2e>
 800dd16:	dc06      	bgt.n	800dd26 <WM_DefaultProc+0x1e>
 800dd18:	2b0e      	cmp	r3, #14
 800dd1a:	d00e      	beq.n	800dd3a <WM_DefaultProc+0x32>
 800dd1c:	2b14      	cmp	r3, #20
 800dd1e:	d114      	bne.n	800dd4a <WM_DefaultProc+0x42>
 800dd20:	f7fe fe94 	bl	800ca4c <WM__GetClientRectEx>
 800dd24:	e011      	b.n	800dd4a <WM_DefaultProc+0x42>
 800dd26:	2b22      	cmp	r3, #34	; 0x22
 800dd28:	d00c      	beq.n	800dd44 <WM_DefaultProc+0x3c>
 800dd2a:	2b28      	cmp	r3, #40	; 0x28
 800dd2c:	d10d      	bne.n	800dd4a <WM_DefaultProc+0x42>
 800dd2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd32:	f7ff bbb8 	b.w	800d4a6 <WM_InvalidateWindow>
 800dd36:	60e0      	str	r0, [r4, #12]
 800dd38:	bd10      	pop	{r4, pc}
 800dd3a:	4621      	mov	r1, r4
 800dd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd40:	f007 bc26 	b.w	8015590 <WM_SendToParent>
 800dd44:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800dd48:	e000      	b.n	800dd4c <WM_DefaultProc+0x44>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	60e3      	str	r3, [r4, #12]
 800dd4e:	bd10      	pop	{r4, pc}

0800dd50 <_cbBackWin>:
 800dd50:	6803      	ldr	r3, [r0, #0]
 800dd52:	2b0e      	cmp	r3, #14
 800dd54:	b510      	push	{r4, lr}
 800dd56:	4604      	mov	r4, r0
 800dd58:	d002      	beq.n	800dd60 <_cbBackWin+0x10>
 800dd5a:	2b0f      	cmp	r3, #15
 800dd5c:	d009      	beq.n	800dd72 <_cbBackWin+0x22>
 800dd5e:	e020      	b.n	800dda2 <_cbBackWin+0x52>
 800dd60:	68c3      	ldr	r3, [r0, #12]
 800dd62:	685a      	ldr	r2, [r3, #4]
 800dd64:	2a01      	cmp	r2, #1
 800dd66:	d121      	bne.n	800ddac <_cbBackWin+0x5c>
 800dd68:	6818      	ldr	r0, [r3, #0]
 800dd6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd6e:	f004 b9f1 	b.w	8012154 <GUI_StoreKey>
 800dd72:	4a0f      	ldr	r2, [pc, #60]	; (800ddb0 <_cbBackWin+0x60>)
 800dd74:	6843      	ldr	r3, [r0, #4]
 800dd76:	6811      	ldr	r1, [r2, #0]
 800dd78:	428b      	cmp	r3, r1
 800dd7a:	d006      	beq.n	800dd8a <_cbBackWin+0x3a>
 800dd7c:	6852      	ldr	r2, [r2, #4]
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	bf14      	ite	ne
 800dd82:	f04f 33ff 	movne.w	r3, #4294967295
 800dd86:	2301      	moveq	r3, #1
 800dd88:	e000      	b.n	800dd8c <_cbBackWin+0x3c>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	4a09      	ldr	r2, [pc, #36]	; (800ddb4 <_cbBackWin+0x64>)
 800dd8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800dd92:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800dd96:	4298      	cmp	r0, r3
 800dd98:	d003      	beq.n	800dda2 <_cbBackWin+0x52>
 800dd9a:	f004 f897 	bl	8011ecc <GUI_SetBkColor>
 800dd9e:	f005 f971 	bl	8013084 <GUI_Clear>
 800dda2:	4620      	mov	r0, r4
 800dda4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dda8:	f7ff bfae 	b.w	800dd08 <WM_DefaultProc>
 800ddac:	bd10      	pop	{r4, pc}
 800ddae:	bf00      	nop
 800ddb0:	2001d560 	.word	0x2001d560
 800ddb4:	2001d58c 	.word	0x2001d58c

0800ddb8 <WM_Init>:
 800ddb8:	b530      	push	{r4, r5, lr}
 800ddba:	4b2b      	ldr	r3, [pc, #172]	; (800de68 <WM_Init+0xb0>)
 800ddbc:	7818      	ldrb	r0, [r3, #0]
 800ddbe:	b085      	sub	sp, #20
 800ddc0:	461d      	mov	r5, r3
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	d14d      	bne.n	800de62 <WM_Init+0xaa>
 800ddc6:	4b29      	ldr	r3, [pc, #164]	; (800de6c <WM_Init+0xb4>)
 800ddc8:	6018      	str	r0, [r3, #0]
 800ddca:	4b29      	ldr	r3, [pc, #164]	; (800de70 <WM_Init+0xb8>)
 800ddcc:	6018      	str	r0, [r3, #0]
 800ddce:	4b29      	ldr	r3, [pc, #164]	; (800de74 <WM_Init+0xbc>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	6458      	str	r0, [r3, #68]	; 0x44
 800ddd4:	4b28      	ldr	r3, [pc, #160]	; (800de78 <WM_Init+0xc0>)
 800ddd6:	8018      	strh	r0, [r3, #0]
 800ddd8:	4b28      	ldr	r3, [pc, #160]	; (800de7c <WM_Init+0xc4>)
 800ddda:	4604      	mov	r4, r0
 800dddc:	8018      	strh	r0, [r3, #0]
 800ddde:	4620      	mov	r0, r4
 800dde0:	f004 ff5e 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 800dde4:	b1c0      	cbz	r0, 800de18 <WM_Init+0x60>
 800dde6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddea:	2302      	movs	r3, #2
 800ddec:	e88d 000c 	stmia.w	sp, {r2, r3}
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800ddf6:	4b22      	ldr	r3, [pc, #136]	; (800de80 <WM_Init+0xc8>)
 800ddf8:	9302      	str	r3, [sp, #8]
 800ddfa:	9003      	str	r0, [sp, #12]
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	4601      	mov	r1, r0
 800de00:	f7ff fb92 	bl	800d528 <WM_CreateWindowAsChild>
 800de04:	4b1f      	ldr	r3, [pc, #124]	; (800de84 <WM_Init+0xcc>)
 800de06:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800de0a:	4b1f      	ldr	r3, [pc, #124]	; (800de88 <WM_Init+0xd0>)
 800de0c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800de10:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800de14:	f7ff fb47 	bl	800d4a6 <WM_InvalidateWindow>
 800de18:	3401      	adds	r4, #1
 800de1a:	2c02      	cmp	r4, #2
 800de1c:	d1df      	bne.n	800ddde <WM_Init+0x26>
 800de1e:	481b      	ldr	r0, [pc, #108]	; (800de8c <WM_Init+0xd4>)
 800de20:	f007 fc70 	bl	8015704 <WM__AddCriticalHandle>
 800de24:	481a      	ldr	r0, [pc, #104]	; (800de90 <WM_Init+0xd8>)
 800de26:	f007 fc6d 	bl	8015704 <WM__AddCriticalHandle>
 800de2a:	481a      	ldr	r0, [pc, #104]	; (800de94 <WM_Init+0xdc>)
 800de2c:	f007 fc6a 	bl	8015704 <WM__AddCriticalHandle>
 800de30:	4819      	ldr	r0, [pc, #100]	; (800de98 <WM_Init+0xe0>)
 800de32:	f007 fc67 	bl	8015704 <WM__AddCriticalHandle>
 800de36:	4819      	ldr	r0, [pc, #100]	; (800de9c <WM_Init+0xe4>)
 800de38:	f007 fc64 	bl	8015704 <WM__AddCriticalHandle>
 800de3c:	4818      	ldr	r0, [pc, #96]	; (800dea0 <WM_Init+0xe8>)
 800de3e:	f007 fc61 	bl	8015704 <WM__AddCriticalHandle>
 800de42:	4b10      	ldr	r3, [pc, #64]	; (800de84 <WM_Init+0xcc>)
 800de44:	6818      	ldr	r0, [r3, #0]
 800de46:	f7ff fb4f 	bl	800d4e8 <WM_SelectWindow>
 800de4a:	f7ff ff4b 	bl	800dce4 <WM_Activate>
 800de4e:	2301      	movs	r3, #1
 800de50:	702b      	strb	r3, [r5, #0]
 800de52:	4814      	ldr	r0, [pc, #80]	; (800dea4 <WM_Init+0xec>)
 800de54:	4b14      	ldr	r3, [pc, #80]	; (800dea8 <WM_Init+0xf0>)
 800de56:	6003      	str	r3, [r0, #0]
 800de58:	b005      	add	sp, #20
 800de5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de5e:	f005 b921 	b.w	80130a4 <GUI__RegisterExit>
 800de62:	b005      	add	sp, #20
 800de64:	bd30      	pop	{r4, r5, pc}
 800de66:	bf00      	nop
 800de68:	2001d0e4 	.word	0x2001d0e4
 800de6c:	2001d57c 	.word	0x2001d57c
 800de70:	2001d0d8 	.word	0x2001d0d8
 800de74:	20000110 	.word	0x20000110
 800de78:	2001d578 	.word	0x2001d578
 800de7c:	2001d558 	.word	0x2001d558
 800de80:	0800dd51 	.word	0x0800dd51
 800de84:	2001d560 	.word	0x2001d560
 800de88:	2001d58c 	.word	0x2001d58c
 800de8c:	2001d6cc 	.word	0x2001d6cc
 800de90:	2001d6bc 	.word	0x2001d6bc
 800de94:	2001d6ac 	.word	0x2001d6ac
 800de98:	2001d6d4 	.word	0x2001d6d4
 800de9c:	2001d6c4 	.word	0x2001d6c4
 800dea0:	2001d6b4 	.word	0x2001d6b4
 800dea4:	2001d0dc 	.word	0x2001d0dc
 800dea8:	0800cb71 	.word	0x0800cb71

0800deac <_CreateStaticDevice>:
 800deac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb0:	b087      	sub	sp, #28
 800deb2:	4604      	mov	r4, r0
 800deb4:	f005 fd22 	bl	80138fc <GUI_ALLOC_LockH>
 800deb8:	af06      	add	r7, sp, #24
 800deba:	f8b0 8000 	ldrh.w	r8, [r0]
 800debe:	8886      	ldrh	r6, [r0, #4]
 800dec0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 800dec4:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 800dec8:	f847 0d04 	str.w	r0, [r7, #-4]!
 800decc:	fa0f f888 	sxth.w	r8, r8
 800ded0:	b236      	sxth	r6, r6
 800ded2:	ebc8 0606 	rsb	r6, r8, r6
 800ded6:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 800deda:	3601      	adds	r6, #1
 800dedc:	4638      	mov	r0, r7
 800dede:	fa0f f989 	sxth.w	r9, r9
 800dee2:	fa0f f58b 	sxth.w	r5, fp
 800dee6:	f005 fd17 	bl	8013918 <GUI_ALLOC_UnlockH>
 800deea:	ebc9 0505 	rsb	r5, r9, r5
 800deee:	2e00      	cmp	r6, #0
 800def0:	f105 0501 	add.w	r5, r5, #1
 800def4:	dd4d      	ble.n	800df92 <_CreateStaticDevice+0xe6>
 800def6:	2d00      	cmp	r5, #0
 800def8:	dd4b      	ble.n	800df92 <_CreateStaticDevice+0xe6>
 800defa:	f1ba 0f00 	cmp.w	sl, #0
 800defe:	d04a      	beq.n	800df96 <_CreateStaticDevice+0xea>
 800df00:	4650      	mov	r0, sl
 800df02:	f005 fcfb 	bl	80138fc <GUI_ALLOC_LockH>
 800df06:	ab06      	add	r3, sp, #24
 800df08:	8886      	ldrh	r6, [r0, #4]
 800df0a:	f843 0d08 	str.w	r0, [r3, #-8]!
 800df0e:	88c5      	ldrh	r5, [r0, #6]
 800df10:	b236      	sxth	r6, r6
 800df12:	4618      	mov	r0, r3
 800df14:	f005 fd00 	bl	8013918 <GUI_ALLOC_UnlockH>
 800df18:	4546      	cmp	r6, r8
 800df1a:	d102      	bne.n	800df22 <_CreateStaticDevice+0x76>
 800df1c:	b22d      	sxth	r5, r5
 800df1e:	454d      	cmp	r5, r9
 800df20:	d032      	beq.n	800df88 <_CreateStaticDevice+0xdc>
 800df22:	4650      	mov	r0, sl
 800df24:	4641      	mov	r1, r8
 800df26:	464a      	mov	r2, r9
 800df28:	f000 f886 	bl	800e038 <GUI_MEMDEV_SetOrg>
 800df2c:	e02c      	b.n	800df88 <_CreateStaticDevice+0xdc>
 800df2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800df30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df34:	6283      	str	r3, [r0, #40]	; 0x28
 800df36:	4638      	mov	r0, r7
 800df38:	f005 fcee 	bl	8013918 <GUI_ALLOC_UnlockH>
 800df3c:	4640      	mov	r0, r8
 800df3e:	f000 ff93 	bl	800ee68 <GUI_MEMDEV_Select>
 800df42:	4607      	mov	r7, r0
 800df44:	4650      	mov	r0, sl
 800df46:	f003 ffc5 	bl	8011ed4 <GUI__AlphaPreserveTrans>
 800df4a:	4640      	mov	r0, r8
 800df4c:	f000 f8b4 	bl	800e0b8 <GUI_MEMDEV_GetDataPtr>
 800df50:	4b2d      	ldr	r3, [pc, #180]	; (800e008 <_CreateStaticDevice+0x15c>)
 800df52:	fb05 f206 	mul.w	r2, r5, r6
 800df56:	7819      	ldrb	r1, [r3, #0]
 800df58:	4d2c      	ldr	r5, [pc, #176]	; (800e00c <_CreateStaticDevice+0x160>)
 800df5a:	4e2d      	ldr	r6, [pc, #180]	; (800e010 <_CreateStaticDevice+0x164>)
 800df5c:	0092      	lsls	r2, r2, #2
 800df5e:	f002 fddc 	bl	8010b1a <GUI__memset>
 800df62:	4620      	mov	r0, r4
 800df64:	f8d5 8000 	ldr.w	r8, [r5]
 800df68:	6034      	str	r4, [r6, #0]
 800df6a:	f7fe fc8b 	bl	800c884 <WM_GetWindowOrgX>
 800df6e:	6028      	str	r0, [r5, #0]
 800df70:	4620      	mov	r0, r4
 800df72:	f7ff fd5d 	bl	800da30 <WM__Paint1>
 800df76:	2000      	movs	r0, #0
 800df78:	f8c5 8000 	str.w	r8, [r5]
 800df7c:	6030      	str	r0, [r6, #0]
 800df7e:	f003 ffa9 	bl	8011ed4 <GUI__AlphaPreserveTrans>
 800df82:	4638      	mov	r0, r7
 800df84:	f000 ff70 	bl	800ee68 <GUI_MEMDEV_Select>
 800df88:	4620      	mov	r0, r4
 800df8a:	f005 fcad 	bl	80138e8 <GUI_ALLOC_h2p>
 800df8e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800df90:	e037      	b.n	800e002 <_CreateStaticDevice+0x156>
 800df92:	2000      	movs	r0, #0
 800df94:	e035      	b.n	800e002 <_CreateStaticDevice+0x156>
 800df96:	f7fe fd3f 	bl	800ca18 <WM_GetDesktopWindow>
 800df9a:	4284      	cmp	r4, r0
 800df9c:	d112      	bne.n	800dfc4 <_CreateStaticDevice+0x118>
 800df9e:	f002 f95d 	bl	801025c <LCD_GetXSize>
 800dfa2:	4682      	mov	sl, r0
 800dfa4:	f002 f962 	bl	801026c <LCD_GetYSize>
 800dfa8:	4556      	cmp	r6, sl
 800dfaa:	dc02      	bgt.n	800dfb2 <_CreateStaticDevice+0x106>
 800dfac:	4285      	cmp	r5, r0
 800dfae:	dd09      	ble.n	800dfc4 <_CreateStaticDevice+0x118>
 800dfb0:	e000      	b.n	800dfb4 <_CreateStaticDevice+0x108>
 800dfb2:	4656      	mov	r6, sl
 800dfb4:	4285      	cmp	r5, r0
 800dfb6:	bfa8      	it	ge
 800dfb8:	4605      	movge	r5, r0
 800dfba:	4631      	mov	r1, r6
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	462a      	mov	r2, r5
 800dfc0:	f7fe f945 	bl	800c24e <WM_SetSize>
 800dfc4:	4b13      	ldr	r3, [pc, #76]	; (800e014 <_CreateStaticDevice+0x168>)
 800dfc6:	9301      	str	r3, [sp, #4]
 800dfc8:	f04f 0a01 	mov.w	sl, #1
 800dfcc:	4b12      	ldr	r3, [pc, #72]	; (800e018 <_CreateStaticDevice+0x16c>)
 800dfce:	9302      	str	r3, [sp, #8]
 800dfd0:	4640      	mov	r0, r8
 800dfd2:	4649      	mov	r1, r9
 800dfd4:	4632      	mov	r2, r6
 800dfd6:	462b      	mov	r3, r5
 800dfd8:	f8cd a000 	str.w	sl, [sp]
 800dfdc:	f000 fe4e 	bl	800ec7c <GUI_MEMDEV__CreateFixed>
 800dfe0:	4680      	mov	r8, r0
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f005 fc8a 	bl	80138fc <GUI_ALLOC_LockH>
 800dfe8:	9005      	str	r0, [sp, #20]
 800dfea:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 800dfee:	f1b8 0f00 	cmp.w	r8, #0
 800dff2:	d19c      	bne.n	800df2e <_CreateStaticDevice+0x82>
 800dff4:	4638      	mov	r0, r7
 800dff6:	f005 fc8f 	bl	8013918 <GUI_ALLOC_UnlockH>
 800dffa:	4620      	mov	r0, r4
 800dffc:	f7ff fd18 	bl	800da30 <WM__Paint1>
 800e000:	4640      	mov	r0, r8
 800e002:	b007      	add	sp, #28
 800e004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e008:	200000e8 	.word	0x200000e8
 800e00c:	2001d5b4 	.word	0x2001d5b4
 800e010:	2001d5a4 	.word	0x2001d5a4
 800e014:	0801b66c 	.word	0x0801b66c
 800e018:	08020be8 	.word	0x08020be8

0800e01c <GUI_MEMDEV_Paint1Static>:
 800e01c:	b538      	push	{r3, r4, r5, lr}
 800e01e:	4605      	mov	r5, r0
 800e020:	2405      	movs	r4, #5
 800e022:	4628      	mov	r0, r5
 800e024:	f7ff ff42 	bl	800deac <_CreateStaticDevice>
 800e028:	b910      	cbnz	r0, 800e030 <GUI_MEMDEV_Paint1Static+0x14>
 800e02a:	3c01      	subs	r4, #1
 800e02c:	d1f9      	bne.n	800e022 <GUI_MEMDEV_Paint1Static+0x6>
 800e02e:	bd38      	pop	{r3, r4, r5, pc}
 800e030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e034:	f008 b892 	b.w	801615c <GUI_MEMDEV_Write>

0800e038 <GUI_MEMDEV_SetOrg>:
 800e038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e03a:	460d      	mov	r5, r1
 800e03c:	4614      	mov	r4, r2
 800e03e:	b918      	cbnz	r0, 800e048 <GUI_MEMDEV_SetOrg+0x10>
 800e040:	4b11      	ldr	r3, [pc, #68]	; (800e088 <GUI_MEMDEV_SetOrg+0x50>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800e046:	b1e8      	cbz	r0, 800e084 <GUI_MEMDEV_SetOrg+0x4c>
 800e048:	f005 fc58 	bl	80138fc <GUI_ALLOC_LockH>
 800e04c:	b2a4      	uxth	r4, r4
 800e04e:	b2ad      	uxth	r5, r5
 800e050:	80c4      	strh	r4, [r0, #6]
 800e052:	8085      	strh	r5, [r0, #4]
 800e054:	9000      	str	r0, [sp, #0]
 800e056:	f002 fc67 	bl	8010928 <LCD_SetClipRectMax>
 800e05a:	9b00      	ldr	r3, [sp, #0]
 800e05c:	6958      	ldr	r0, [r3, #20]
 800e05e:	b170      	cbz	r0, 800e07e <GUI_MEMDEV_SetOrg+0x46>
 800e060:	f005 fc4c 	bl	80138fc <GUI_ALLOC_LockH>
 800e064:	9b00      	ldr	r3, [sp, #0]
 800e066:	9001      	str	r0, [sp, #4]
 800e068:	891a      	ldrh	r2, [r3, #8]
 800e06a:	895b      	ldrh	r3, [r3, #10]
 800e06c:	8082      	strh	r2, [r0, #4]
 800e06e:	80c3      	strh	r3, [r0, #6]
 800e070:	b112      	cbz	r2, 800e078 <GUI_MEMDEV_SetOrg+0x40>
 800e072:	b10b      	cbz	r3, 800e078 <GUI_MEMDEV_SetOrg+0x40>
 800e074:	8005      	strh	r5, [r0, #0]
 800e076:	8044      	strh	r4, [r0, #2]
 800e078:	a801      	add	r0, sp, #4
 800e07a:	f005 fc4d 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e07e:	4668      	mov	r0, sp
 800e080:	f005 fc4a 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e084:	b003      	add	sp, #12
 800e086:	bd30      	pop	{r4, r5, pc}
 800e088:	20000110 	.word	0x20000110

0800e08c <GUI_MEMDEV_GetYSize>:
 800e08c:	b513      	push	{r0, r1, r4, lr}
 800e08e:	b920      	cbnz	r0, 800e09a <GUI_MEMDEV_GetYSize+0xe>
 800e090:	4b08      	ldr	r3, [pc, #32]	; (800e0b4 <GUI_MEMDEV_GetYSize+0x28>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800e096:	4604      	mov	r4, r0
 800e098:	b148      	cbz	r0, 800e0ae <GUI_MEMDEV_GetYSize+0x22>
 800e09a:	f005 fc2f 	bl	80138fc <GUI_ALLOC_LockH>
 800e09e:	ab02      	add	r3, sp, #8
 800e0a0:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800e0a4:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f005 fc35 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	b002      	add	sp, #8
 800e0b2:	bd10      	pop	{r4, pc}
 800e0b4:	20000110 	.word	0x20000110

0800e0b8 <GUI_MEMDEV_GetDataPtr>:
 800e0b8:	b513      	push	{r0, r1, r4, lr}
 800e0ba:	b150      	cbz	r0, 800e0d2 <GUI_MEMDEV_GetDataPtr+0x1a>
 800e0bc:	f005 fc1e 	bl	80138fc <GUI_ALLOC_LockH>
 800e0c0:	4604      	mov	r4, r0
 800e0c2:	a802      	add	r0, sp, #8
 800e0c4:	f840 4d04 	str.w	r4, [r0, #-4]!
 800e0c8:	f005 fc26 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e0cc:	f104 0018 	add.w	r0, r4, #24
 800e0d0:	e7ff      	b.n	800e0d2 <GUI_MEMDEV_GetDataPtr+0x1a>
 800e0d2:	b002      	add	sp, #8
 800e0d4:	bd10      	pop	{r4, pc}
	...

0800e0d8 <GUI_MEMDEV_Draw>:
 800e0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0dc:	461e      	mov	r6, r3
 800e0de:	b089      	sub	sp, #36	; 0x24
 800e0e0:	4b4e      	ldr	r3, [pc, #312]	; (800e21c <GUI_MEMDEV_Draw+0x144>)
 800e0e2:	9204      	str	r2, [sp, #16]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	9103      	str	r1, [sp, #12]
 800e0e8:	7c54      	ldrb	r4, [r2, #17]
 800e0ea:	4a4d      	ldr	r2, [pc, #308]	; (800e220 <GUI_MEMDEV_Draw+0x148>)
 800e0ec:	5712      	ldrsb	r2, [r2, r4]
 800e0ee:	2a01      	cmp	r2, #1
 800e0f0:	4605      	mov	r5, r0
 800e0f2:	469b      	mov	fp, r3
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	dd06      	ble.n	800e106 <GUI_MEMDEV_Draw+0x2e>
 800e0f8:	f002 f89e 	bl	8010238 <LCD_GetXSizeEx>
 800e0fc:	4607      	mov	r7, r0
 800e0fe:	4620      	mov	r0, r4
 800e100:	f002 f89d 	bl	801023e <LCD_GetYSizeEx>
 800e104:	e005      	b.n	800e112 <GUI_MEMDEV_Draw+0x3a>
 800e106:	f002 f89d 	bl	8010244 <LCD_GetVXSizeEx>
 800e10a:	4607      	mov	r7, r0
 800e10c:	4620      	mov	r0, r4
 800e10e:	f002 f89c 	bl	801024a <LCD_GetVYSizeEx>
 800e112:	4604      	mov	r4, r0
 800e114:	b325      	cbz	r5, 800e160 <GUI_MEMDEV_Draw+0x88>
 800e116:	a806      	add	r0, sp, #24
 800e118:	a907      	add	r1, sp, #28
 800e11a:	f004 f88f 	bl	801223c <GUI_GetOrg>
 800e11e:	9b06      	ldr	r3, [sp, #24]
 800e120:	f9b5 a000 	ldrsh.w	sl, [r5]
 800e124:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800e128:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 800e12c:	441f      	add	r7, r3
 800e12e:	9b07      	ldr	r3, [sp, #28]
 800e130:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e134:	3f01      	subs	r7, #1
 800e136:	4297      	cmp	r7, r2
 800e138:	bfd4      	ite	le
 800e13a:	ebca 0707 	rsble	r7, sl, r7
 800e13e:	ebca 0702 	rsbgt	r7, sl, r2
 800e142:	441c      	add	r4, r3
 800e144:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800e148:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800e14c:	3c01      	subs	r4, #1
 800e14e:	4294      	cmp	r4, r2
 800e150:	bfd4      	ite	le
 800e152:	ebc8 0404 	rsble	r4, r8, r4
 800e156:	ebc8 0402 	rsbgt	r4, r8, r2
 800e15a:	3701      	adds	r7, #1
 800e15c:	3401      	adds	r4, #1
 800e15e:	e001      	b.n	800e164 <GUI_MEMDEV_Draw+0x8c>
 800e160:	46a8      	mov	r8, r5
 800e162:	46aa      	mov	sl, r5
 800e164:	b906      	cbnz	r6, 800e168 <GUI_MEMDEV_Draw+0x90>
 800e166:	4266      	negs	r6, r4
 800e168:	2f00      	cmp	r7, #0
 800e16a:	dd52      	ble.n	800e212 <GUI_MEMDEV_Draw+0x13a>
 800e16c:	2c00      	cmp	r4, #0
 800e16e:	dd50      	ble.n	800e212 <GUI_MEMDEV_Draw+0x13a>
 800e170:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e172:	9300      	str	r3, [sp, #0]
 800e174:	4650      	mov	r0, sl
 800e176:	4641      	mov	r1, r8
 800e178:	463a      	mov	r2, r7
 800e17a:	4633      	mov	r3, r6
 800e17c:	f000 fe38 	bl	800edf0 <GUI_MEMDEV_CreateEx>
 800e180:	4605      	mov	r5, r0
 800e182:	b920      	cbnz	r0, 800e18e <GUI_MEMDEV_Draw+0xb6>
 800e184:	9804      	ldr	r0, [sp, #16]
 800e186:	9b03      	ldr	r3, [sp, #12]
 800e188:	4798      	blx	r3
 800e18a:	2001      	movs	r0, #1
 800e18c:	e042      	b.n	800e214 <GUI_MEMDEV_Draw+0x13c>
 800e18e:	f7ff ff7d 	bl	800e08c <GUI_MEMDEV_GetYSize>
 800e192:	42a0      	cmp	r0, r4
 800e194:	4606      	mov	r6, r0
 800e196:	d006      	beq.n	800e1a6 <GUI_MEMDEV_Draw+0xce>
 800e198:	f8db 3000 	ldr.w	r3, [fp]
 800e19c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e19e:	b110      	cbz	r0, 800e1a6 <GUI_MEMDEV_Draw+0xce>
 800e1a0:	2132      	movs	r1, #50	; 0x32
 800e1a2:	f006 fec5 	bl	8014f30 <WM__SendMessageNoPara>
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f000 fe5e 	bl	800ee68 <GUI_MEMDEV_Select>
 800e1ac:	4273      	negs	r3, r6
 800e1ae:	9305      	str	r3, [sp, #20]
 800e1b0:	46a1      	mov	r9, r4
 800e1b2:	2700      	movs	r7, #0
 800e1b4:	45b1      	cmp	r9, r6
 800e1b6:	da03      	bge.n	800e1c0 <GUI_MEMDEV_Draw+0xe8>
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	4649      	mov	r1, r9
 800e1bc:	f008 f8ce 	bl	801635c <GUI_MEMDEV_ReduceYSize>
 800e1c0:	b147      	cbz	r7, 800e1d4 <GUI_MEMDEV_Draw+0xfc>
 800e1c2:	4628      	mov	r0, r5
 800e1c4:	4651      	mov	r1, sl
 800e1c6:	eb07 0208 	add.w	r2, r7, r8
 800e1ca:	f7ff ff35 	bl	800e038 <GUI_MEMDEV_SetOrg>
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	f008 f8da 	bl	8016388 <GUI_MEMDEV_Clear>
 800e1d4:	9b03      	ldr	r3, [sp, #12]
 800e1d6:	9804      	ldr	r0, [sp, #16]
 800e1d8:	4798      	blx	r3
 800e1da:	4b12      	ldr	r3, [pc, #72]	; (800e224 <GUI_MEMDEV_Draw+0x14c>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	b10b      	cbz	r3, 800e1e4 <GUI_MEMDEV_Draw+0x10c>
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	4798      	blx	r3
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f000 feb7 	bl	800ef58 <GUI_MEMDEV_CopyToLCD>
 800e1ea:	4437      	add	r7, r6
 800e1ec:	9b05      	ldr	r3, [sp, #20]
 800e1ee:	42a7      	cmp	r7, r4
 800e1f0:	4499      	add	r9, r3
 800e1f2:	dbdf      	blt.n	800e1b4 <GUI_MEMDEV_Draw+0xdc>
 800e1f4:	4628      	mov	r0, r5
 800e1f6:	f000 fdd9 	bl	800edac <GUI_MEMDEV_Delete>
 800e1fa:	2000      	movs	r0, #0
 800e1fc:	f000 fe34 	bl	800ee68 <GUI_MEMDEV_Select>
 800e200:	42a6      	cmp	r6, r4
 800e202:	d006      	beq.n	800e212 <GUI_MEMDEV_Draw+0x13a>
 800e204:	f8db 3000 	ldr.w	r3, [fp]
 800e208:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e20a:	b110      	cbz	r0, 800e212 <GUI_MEMDEV_Draw+0x13a>
 800e20c:	2133      	movs	r1, #51	; 0x33
 800e20e:	f006 fe8f 	bl	8014f30 <WM__SendMessageNoPara>
 800e212:	2000      	movs	r0, #0
 800e214:	b009      	add	sp, #36	; 0x24
 800e216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e21a:	bf00      	nop
 800e21c:	20000110 	.word	0x20000110
 800e220:	2001d5ac 	.word	0x2001d5ac
 800e224:	2001d0e8 	.word	0x2001d0e8

0800e228 <_GetDevData>:
 800e228:	4802      	ldr	r0, [pc, #8]	; (800e234 <_GetDevData+0xc>)
 800e22a:	2901      	cmp	r1, #1
 800e22c:	bf18      	it	ne
 800e22e:	2000      	movne	r0, #0
 800e230:	4770      	bx	lr
 800e232:	bf00      	nop
 800e234:	0801b66c 	.word	0x0801b66c

0800e238 <_GetDevFunc>:
 800e238:	4802      	ldr	r0, [pc, #8]	; (800e244 <_GetDevFunc+0xc>)
 800e23a:	2916      	cmp	r1, #22
 800e23c:	bf18      	it	ne
 800e23e:	2000      	movne	r0, #0
 800e240:	4770      	bx	lr
 800e242:	bf00      	nop
 800e244:	08015f6d 	.word	0x08015f6d

0800e248 <_GetDevProp>:
 800e248:	2908      	cmp	r1, #8
 800e24a:	bf0c      	ite	eq
 800e24c:	2020      	moveq	r0, #32
 800e24e:	2000      	movne	r0, #0
 800e250:	4770      	bx	lr

0800e252 <_SetOrg>:
 800e252:	b508      	push	{r3, lr}
 800e254:	6800      	ldr	r0, [r0, #0]
 800e256:	68c3      	ldr	r3, [r0, #12]
 800e258:	6a1b      	ldr	r3, [r3, #32]
 800e25a:	4798      	blx	r3
 800e25c:	bd08      	pop	{r3, pc}

0800e25e <_GetRect>:
 800e25e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e260:	6880      	ldr	r0, [r0, #8]
 800e262:	460c      	mov	r4, r1
 800e264:	f005 fb4a 	bl	80138fc <GUI_ALLOC_LockH>
 800e268:	4603      	mov	r3, r0
 800e26a:	a802      	add	r0, sp, #8
 800e26c:	8899      	ldrh	r1, [r3, #4]
 800e26e:	88da      	ldrh	r2, [r3, #6]
 800e270:	891d      	ldrh	r5, [r3, #8]
 800e272:	f840 3d04 	str.w	r3, [r0, #-4]!
 800e276:	895b      	ldrh	r3, [r3, #10]
 800e278:	8021      	strh	r1, [r4, #0]
 800e27a:	8062      	strh	r2, [r4, #2]
 800e27c:	4429      	add	r1, r5
 800e27e:	441a      	add	r2, r3
 800e280:	3901      	subs	r1, #1
 800e282:	3a01      	subs	r2, #1
 800e284:	80a1      	strh	r1, [r4, #4]
 800e286:	80e2      	strh	r2, [r4, #6]
 800e288:	f005 fb46 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e28c:	b003      	add	sp, #12
 800e28e:	bd30      	pop	{r4, r5, pc}

0800e290 <_XY2PTR>:
 800e290:	4b0e      	ldr	r3, [pc, #56]	; (800e2cc <_XY2PTR+0x3c>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e296:	4605      	mov	r5, r0
 800e298:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800e29a:	460e      	mov	r6, r1
 800e29c:	f005 fb2e 	bl	80138fc <GUI_ALLOC_LockH>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	a802      	add	r0, sp, #8
 800e2a4:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800e2a8:	f840 3d04 	str.w	r3, [r0, #-4]!
 800e2ac:	f103 0118 	add.w	r1, r3, #24
 800e2b0:	1b36      	subs	r6, r6, r4
 800e2b2:	68dc      	ldr	r4, [r3, #12]
 800e2b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e2b8:	fb04 1406 	mla	r4, r4, r6, r1
 800e2bc:	1aed      	subs	r5, r5, r3
 800e2be:	f005 fb2b 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e2c2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	b002      	add	sp, #8
 800e2ca:	bd70      	pop	{r4, r5, r6, pc}
 800e2cc:	20000110 	.word	0x20000110

0800e2d0 <_GetPixelIndex>:
 800e2d0:	b508      	push	{r3, lr}
 800e2d2:	4608      	mov	r0, r1
 800e2d4:	4611      	mov	r1, r2
 800e2d6:	f7ff ffdb 	bl	800e290 <_XY2PTR>
 800e2da:	6800      	ldr	r0, [r0, #0]
 800e2dc:	bd08      	pop	{r3, pc}
	...

0800e2e0 <_XorPixel>:
 800e2e0:	4b15      	ldr	r3, [pc, #84]	; (800e338 <_XorPixel+0x58>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2e6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800e2e8:	4615      	mov	r5, r2
 800e2ea:	460e      	mov	r6, r1
 800e2ec:	f005 fb06 	bl	80138fc <GUI_ALLOC_LockH>
 800e2f0:	4629      	mov	r1, r5
 800e2f2:	9000      	str	r0, [sp, #0]
 800e2f4:	4630      	mov	r0, r6
 800e2f6:	f7ff ffcb 	bl	800e290 <_XY2PTR>
 800e2fa:	9b00      	ldr	r3, [sp, #0]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	691b      	ldr	r3, [r3, #16]
 800e300:	4604      	mov	r4, r0
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	4798      	blx	r3
 800e306:	6823      	ldr	r3, [r4, #0]
 800e308:	4058      	eors	r0, r3
 800e30a:	9b00      	ldr	r3, [sp, #0]
 800e30c:	6020      	str	r0, [r4, #0]
 800e30e:	6958      	ldr	r0, [r3, #20]
 800e310:	b160      	cbz	r0, 800e32c <_XorPixel+0x4c>
 800e312:	f005 faf3 	bl	80138fc <GUI_ALLOC_LockH>
 800e316:	ac02      	add	r4, sp, #8
 800e318:	6883      	ldr	r3, [r0, #8]
 800e31a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4631      	mov	r1, r6
 800e322:	462a      	mov	r2, r5
 800e324:	4798      	blx	r3
 800e326:	4620      	mov	r0, r4
 800e328:	f005 faf6 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e32c:	4668      	mov	r0, sp
 800e32e:	f005 faf3 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e332:	b002      	add	sp, #8
 800e334:	bd70      	pop	{r4, r5, r6, pc}
 800e336:	bf00      	nop
 800e338:	20000110 	.word	0x20000110

0800e33c <_SetPixelIndex>:
 800e33c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e33e:	461c      	mov	r4, r3
 800e340:	4b10      	ldr	r3, [pc, #64]	; (800e384 <_SetPixelIndex+0x48>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800e346:	460e      	mov	r6, r1
 800e348:	4615      	mov	r5, r2
 800e34a:	f005 fad7 	bl	80138fc <GUI_ALLOC_LockH>
 800e34e:	4629      	mov	r1, r5
 800e350:	9000      	str	r0, [sp, #0]
 800e352:	4630      	mov	r0, r6
 800e354:	f7ff ff9c 	bl	800e290 <_XY2PTR>
 800e358:	9b00      	ldr	r3, [sp, #0]
 800e35a:	6004      	str	r4, [r0, #0]
 800e35c:	6958      	ldr	r0, [r3, #20]
 800e35e:	b160      	cbz	r0, 800e37a <_SetPixelIndex+0x3e>
 800e360:	f005 facc 	bl	80138fc <GUI_ALLOC_LockH>
 800e364:	ac02      	add	r4, sp, #8
 800e366:	6883      	ldr	r3, [r0, #8]
 800e368:	f844 0d04 	str.w	r0, [r4, #-4]!
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4631      	mov	r1, r6
 800e370:	462a      	mov	r2, r5
 800e372:	4798      	blx	r3
 800e374:	4620      	mov	r0, r4
 800e376:	f005 facf 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e37a:	4668      	mov	r0, sp
 800e37c:	f005 facc 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e380:	b002      	add	sp, #8
 800e382:	bd70      	pop	{r4, r5, r6, pc}
 800e384:	20000110 	.word	0x20000110

0800e388 <_DrawVLine>:
 800e388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e38c:	4d2c      	ldr	r5, [pc, #176]	; (800e440 <_DrawVLine+0xb8>)
 800e38e:	461e      	mov	r6, r3
 800e390:	682b      	ldr	r3, [r5, #0]
 800e392:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800e394:	460f      	mov	r7, r1
 800e396:	4614      	mov	r4, r2
 800e398:	f005 fab0 	bl	80138fc <GUI_ALLOC_LockH>
 800e39c:	9000      	str	r0, [sp, #0]
 800e39e:	6940      	ldr	r0, [r0, #20]
 800e3a0:	46a9      	mov	r9, r5
 800e3a2:	b108      	cbz	r0, 800e3a8 <_DrawVLine+0x20>
 800e3a4:	f005 faaa 	bl	80138fc <GUI_ALLOC_LockH>
 800e3a8:	9001      	str	r0, [sp, #4]
 800e3aa:	4621      	mov	r1, r4
 800e3ac:	4638      	mov	r0, r7
 800e3ae:	f7ff ff6f 	bl	800e290 <_XY2PTR>
 800e3b2:	f8d9 2000 	ldr.w	r2, [r9]
 800e3b6:	9b00      	ldr	r3, [sp, #0]
 800e3b8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800e3ba:	7c12      	ldrb	r2, [r2, #16]
 800e3bc:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800e3c0:	f8d1 9000 	ldr.w	r9, [r1]
 800e3c4:	07d2      	lsls	r2, r2, #31
 800e3c6:	4605      	mov	r5, r0
 800e3c8:	d51f      	bpl.n	800e40a <_DrawVLine+0x82>
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	691b      	ldr	r3, [r3, #16]
 800e3ce:	689b      	ldr	r3, [r3, #8]
 800e3d0:	4798      	blx	r3
 800e3d2:	4680      	mov	r8, r0
 800e3d4:	9801      	ldr	r0, [sp, #4]
 800e3d6:	b128      	cbz	r0, 800e3e4 <_DrawVLine+0x5c>
 800e3d8:	6882      	ldr	r2, [r0, #8]
 800e3da:	4639      	mov	r1, r7
 800e3dc:	f8d2 c000 	ldr.w	ip, [r2]
 800e3e0:	4622      	mov	r2, r4
 800e3e2:	47e0      	blx	ip
 800e3e4:	682b      	ldr	r3, [r5, #0]
 800e3e6:	ea83 0308 	eor.w	r3, r3, r8
 800e3ea:	602b      	str	r3, [r5, #0]
 800e3ec:	9b00      	ldr	r3, [sp, #0]
 800e3ee:	3401      	adds	r4, #1
 800e3f0:	68db      	ldr	r3, [r3, #12]
 800e3f2:	42b4      	cmp	r4, r6
 800e3f4:	441d      	add	r5, r3
 800e3f6:	dded      	ble.n	800e3d4 <_DrawVLine+0x4c>
 800e3f8:	4668      	mov	r0, sp
 800e3fa:	f005 fa8d 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e3fe:	9b01      	ldr	r3, [sp, #4]
 800e400:	b1d3      	cbz	r3, 800e438 <_DrawVLine+0xb0>
 800e402:	a801      	add	r0, sp, #4
 800e404:	f005 fa88 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e408:	e016      	b.n	800e438 <_DrawVLine+0xb0>
 800e40a:	9b01      	ldr	r3, [sp, #4]
 800e40c:	b163      	cbz	r3, 800e428 <_DrawVLine+0xa0>
 800e40e:	9801      	ldr	r0, [sp, #4]
 800e410:	6883      	ldr	r3, [r0, #8]
 800e412:	4622      	mov	r2, r4
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	4639      	mov	r1, r7
 800e418:	3401      	adds	r4, #1
 800e41a:	4798      	blx	r3
 800e41c:	42b4      	cmp	r4, r6
 800e41e:	f8c5 9000 	str.w	r9, [r5]
 800e422:	4445      	add	r5, r8
 800e424:	ddf3      	ble.n	800e40e <_DrawVLine+0x86>
 800e426:	e7e7      	b.n	800e3f8 <_DrawVLine+0x70>
 800e428:	1b34      	subs	r4, r6, r4
 800e42a:	3401      	adds	r4, #1
 800e42c:	3c01      	subs	r4, #1
 800e42e:	f8c5 9000 	str.w	r9, [r5]
 800e432:	4445      	add	r5, r8
 800e434:	d1fa      	bne.n	800e42c <_DrawVLine+0xa4>
 800e436:	e7df      	b.n	800e3f8 <_DrawVLine+0x70>
 800e438:	b003      	add	sp, #12
 800e43a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e43e:	bf00      	nop
 800e440:	20000110 	.word	0x20000110

0800e444 <_FillRect>:
 800e444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e448:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800e4f8 <_FillRect+0xb4>
 800e44c:	4614      	mov	r4, r2
 800e44e:	f8db 2000 	ldr.w	r2, [fp]
 800e452:	b085      	sub	sp, #20
 800e454:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800e456:	460f      	mov	r7, r1
 800e458:	461d      	mov	r5, r3
 800e45a:	f005 fa4f 	bl	80138fc <GUI_ALLOC_LockH>
 800e45e:	4621      	mov	r1, r4
 800e460:	9002      	str	r0, [sp, #8]
 800e462:	4638      	mov	r0, r7
 800e464:	f7ff ff14 	bl	800e290 <_XY2PTR>
 800e468:	9a02      	ldr	r2, [sp, #8]
 800e46a:	f8db 3000 	ldr.w	r3, [fp]
 800e46e:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800e472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e474:	4606      	mov	r6, r0
 800e476:	6950      	ldr	r0, [r2, #20]
 800e478:	f8d3 a000 	ldr.w	sl, [r3]
 800e47c:	1bed      	subs	r5, r5, r7
 800e47e:	3501      	adds	r5, #1
 800e480:	b338      	cbz	r0, 800e4d2 <_FillRect+0x8e>
 800e482:	f005 fa3b 	bl	80138fc <GUI_ALLOC_LockH>
 800e486:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e488:	f10d 0810 	add.w	r8, sp, #16
 800e48c:	1b13      	subs	r3, r2, r4
 800e48e:	f848 0d04 	str.w	r0, [r8, #-4]!
 800e492:	3301      	adds	r3, #1
 800e494:	9300      	str	r3, [sp, #0]
 800e496:	4639      	mov	r1, r7
 800e498:	4622      	mov	r2, r4
 800e49a:	462b      	mov	r3, r5
 800e49c:	f007 ff48 	bl	8016330 <GUI_USAGE_AddRect>
 800e4a0:	4640      	mov	r0, r8
 800e4a2:	f005 fa39 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e4a6:	e014      	b.n	800e4d2 <_FillRect+0x8e>
 800e4a8:	f8db 3000 	ldr.w	r3, [fp]
 800e4ac:	7c1b      	ldrb	r3, [r3, #16]
 800e4ae:	07db      	lsls	r3, r3, #31
 800e4b0:	d513      	bpl.n	800e4da <_FillRect+0x96>
 800e4b2:	9b02      	ldr	r3, [sp, #8]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	691b      	ldr	r3, [r3, #16]
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	4798      	blx	r3
 800e4bc:	4632      	mov	r2, r6
 800e4be:	462b      	mov	r3, r5
 800e4c0:	6811      	ldr	r1, [r2, #0]
 800e4c2:	3b01      	subs	r3, #1
 800e4c4:	ea81 0100 	eor.w	r1, r1, r0
 800e4c8:	f842 1b04 	str.w	r1, [r2], #4
 800e4cc:	d1f8      	bne.n	800e4c0 <_FillRect+0x7c>
 800e4ce:	444e      	add	r6, r9
 800e4d0:	3401      	adds	r4, #1
 800e4d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4d4:	429c      	cmp	r4, r3
 800e4d6:	dde7      	ble.n	800e4a8 <_FillRect+0x64>
 800e4d8:	e008      	b.n	800e4ec <_FillRect+0xa8>
 800e4da:	2d00      	cmp	r5, #0
 800e4dc:	ddf7      	ble.n	800e4ce <_FillRect+0x8a>
 800e4de:	462b      	mov	r3, r5
 800e4e0:	4632      	mov	r2, r6
 800e4e2:	3b01      	subs	r3, #1
 800e4e4:	f842 ab04 	str.w	sl, [r2], #4
 800e4e8:	d1fb      	bne.n	800e4e2 <_FillRect+0x9e>
 800e4ea:	e7f0      	b.n	800e4ce <_FillRect+0x8a>
 800e4ec:	a802      	add	r0, sp, #8
 800e4ee:	f005 fa13 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e4f2:	b005      	add	sp, #20
 800e4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4f8:	20000110 	.word	0x20000110

0800e4fc <_DrawHLine>:
 800e4fc:	b507      	push	{r0, r1, r2, lr}
 800e4fe:	9200      	str	r2, [sp, #0]
 800e500:	f7ff ffa0 	bl	800e444 <_FillRect>
 800e504:	b003      	add	sp, #12
 800e506:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800e50c <_DrawBitmap>:
 800e50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e510:	4c9d      	ldr	r4, [pc, #628]	; (800e788 <_DrawBitmap+0x27c>)
 800e512:	469a      	mov	sl, r3
 800e514:	6823      	ldr	r3, [r4, #0]
 800e516:	b091      	sub	sp, #68	; 0x44
 800e518:	4680      	mov	r8, r0
 800e51a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800e51c:	9207      	str	r2, [sp, #28]
 800e51e:	460e      	mov	r6, r1
 800e520:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800e524:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800e526:	2800      	cmp	r0, #0
 800e528:	f000 8387 	beq.w	800ec3a <_DrawBitmap+0x72e>
 800e52c:	f005 f9e6 	bl	80138fc <GUI_ALLOC_LockH>
 800e530:	900e      	str	r0, [sp, #56]	; 0x38
 800e532:	6940      	ldr	r0, [r0, #20]
 800e534:	b108      	cbz	r0, 800e53a <_DrawBitmap+0x2e>
 800e536:	f005 f9e1 	bl	80138fc <GUI_ALLOC_LockH>
 800e53a:	900f      	str	r0, [sp, #60]	; 0x3c
 800e53c:	a810      	add	r0, sp, #64	; 0x40
 800e53e:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	930a      	str	r3, [sp, #40]	; 0x28
 800e546:	f005 f9e7 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e54a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800e54c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e54e:	4437      	add	r7, r6
 800e550:	9704      	str	r7, [sp, #16]
 800e552:	b150      	cbz	r0, 800e56a <_DrawBitmap+0x5e>
 800e554:	6823      	ldr	r3, [r4, #0]
 800e556:	7c1b      	ldrb	r3, [r3, #16]
 800e558:	079c      	lsls	r4, r3, #30
 800e55a:	d406      	bmi.n	800e56a <_DrawBitmap+0x5e>
 800e55c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e55e:	9700      	str	r7, [sp, #0]
 800e560:	9904      	ldr	r1, [sp, #16]
 800e562:	9a07      	ldr	r2, [sp, #28]
 800e564:	4653      	mov	r3, sl
 800e566:	f007 fee3 	bl	8016330 <GUI_USAGE_AddRect>
 800e56a:	9804      	ldr	r0, [sp, #16]
 800e56c:	9907      	ldr	r1, [sp, #28]
 800e56e:	f7ff fe8f 	bl	800e290 <_XY2PTR>
 800e572:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e574:	2f17      	cmp	r7, #23
 800e576:	4606      	mov	r6, r0
 800e578:	dd64      	ble.n	800e644 <_DrawBitmap+0x138>
 800e57a:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800e57e:	9706      	str	r7, [sp, #24]
 800e580:	f04f 0900 	mov.w	r9, #0
 800e584:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e586:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e588:	45b9      	cmp	r9, r7
 800e58a:	da57      	bge.n	800e63c <_DrawBitmap+0x130>
 800e58c:	b130      	cbz	r0, 800e59c <_DrawBitmap+0x90>
 800e58e:	6883      	ldr	r3, [r0, #8]
 800e590:	9a07      	ldr	r2, [sp, #28]
 800e592:	685c      	ldr	r4, [r3, #4]
 800e594:	9904      	ldr	r1, [sp, #16]
 800e596:	444a      	add	r2, r9
 800e598:	4653      	mov	r3, sl
 800e59a:	47a0      	blx	r4
 800e59c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e5a0:	68d8      	ldr	r0, [r3, #12]
 800e5a2:	b128      	cbz	r0, 800e5b0 <_DrawBitmap+0xa4>
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	4659      	mov	r1, fp
 800e5a8:	9a06      	ldr	r2, [sp, #24]
 800e5aa:	f00c f911 	bl	801a7d0 <memcpy>
 800e5ae:	e03e      	b.n	800e62e <_DrawBitmap+0x122>
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	4798      	blx	r3
 800e5b4:	0e00      	lsrs	r0, r0, #24
 800e5b6:	9005      	str	r0, [sp, #20]
 800e5b8:	4635      	mov	r5, r6
 800e5ba:	4657      	mov	r7, sl
 800e5bc:	465c      	mov	r4, fp
 800e5be:	463b      	mov	r3, r7
 800e5c0:	4622      	mov	r2, r4
 800e5c2:	f04f 0c00 	mov.w	ip, #0
 800e5c6:	f852 1b04 	ldr.w	r1, [r2], #4
 800e5ca:	9805      	ldr	r0, [sp, #20]
 800e5cc:	0e09      	lsrs	r1, r1, #24
 800e5ce:	4281      	cmp	r1, r0
 800e5d0:	9805      	ldr	r0, [sp, #20]
 800e5d2:	bf08      	it	eq
 800e5d4:	f10c 0c01 	addeq.w	ip, ip, #1
 800e5d8:	4281      	cmp	r1, r0
 800e5da:	f103 33ff 	add.w	r3, r3, #4294967295
 800e5de:	d014      	beq.n	800e60a <_DrawBitmap+0xfe>
 800e5e0:	f1bc 0f00 	cmp.w	ip, #0
 800e5e4:	d014      	beq.n	800e610 <_DrawBitmap+0x104>
 800e5e6:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	4621      	mov	r1, r4
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	9303      	str	r3, [sp, #12]
 800e5f2:	f8cd c008 	str.w	ip, [sp, #8]
 800e5f6:	f00c f8eb 	bl	801a7d0 <memcpy>
 800e5fa:	9b03      	ldr	r3, [sp, #12]
 800e5fc:	f8dd c008 	ldr.w	ip, [sp, #8]
 800e600:	441d      	add	r5, r3
 800e602:	441c      	add	r4, r3
 800e604:	ebcc 0707 	rsb	r7, ip, r7
 800e608:	e00f      	b.n	800e62a <_DrawBitmap+0x11e>
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1db      	bne.n	800e5c6 <_DrawBitmap+0xba>
 800e60e:	e7e7      	b.n	800e5e0 <_DrawBitmap+0xd4>
 800e610:	6820      	ldr	r0, [r4, #0]
 800e612:	0e02      	lsrs	r2, r0, #24
 800e614:	2aff      	cmp	r2, #255	; 0xff
 800e616:	d005      	beq.n	800e624 <_DrawBitmap+0x118>
 800e618:	43d2      	mvns	r2, r2
 800e61a:	6829      	ldr	r1, [r5, #0]
 800e61c:	b2d2      	uxtb	r2, r2
 800e61e:	f002 fbbb 	bl	8010d98 <GUI__MixColors>
 800e622:	6028      	str	r0, [r5, #0]
 800e624:	3504      	adds	r5, #4
 800e626:	3404      	adds	r4, #4
 800e628:	3f01      	subs	r7, #1
 800e62a:	2f00      	cmp	r7, #0
 800e62c:	d1c7      	bne.n	800e5be <_DrawBitmap+0xb2>
 800e62e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800e630:	44bb      	add	fp, r7
 800e632:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e634:	f109 0901 	add.w	r9, r9, #1
 800e638:	443e      	add	r6, r7
 800e63a:	e7a3      	b.n	800e584 <_DrawBitmap+0x78>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	f040 82f9 	bne.w	800ec34 <_DrawBitmap+0x728>
 800e642:	e2fa      	b.n	800ec3a <_DrawBitmap+0x72e>
 800e644:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e646:	2f10      	cmp	r7, #16
 800e648:	d137      	bne.n	800e6ba <_DrawBitmap+0x1ae>
 800e64a:	1f06      	subs	r6, r0, #4
 800e64c:	2500      	movs	r5, #0
 800e64e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e650:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800e652:	42bd      	cmp	r5, r7
 800e654:	f280 80a0 	bge.w	800e798 <_DrawBitmap+0x28c>
 800e658:	9f07      	ldr	r7, [sp, #28]
 800e65a:	442f      	add	r7, r5
 800e65c:	b13c      	cbz	r4, 800e66e <_DrawBitmap+0x162>
 800e65e:	68a3      	ldr	r3, [r4, #8]
 800e660:	9904      	ldr	r1, [sp, #16]
 800e662:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800e666:	4620      	mov	r0, r4
 800e668:	463a      	mov	r2, r7
 800e66a:	4653      	mov	r3, sl
 800e66c:	47e0      	blx	ip
 800e66e:	f1ab 0302 	sub.w	r3, fp, #2
 800e672:	9306      	str	r3, [sp, #24]
 800e674:	9605      	str	r6, [sp, #20]
 800e676:	46d1      	mov	r9, sl
 800e678:	9904      	ldr	r1, [sp, #16]
 800e67a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e67e:	9a06      	ldr	r2, [sp, #24]
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800e686:	9206      	str	r2, [sp, #24]
 800e688:	4451      	add	r1, sl
 800e68a:	ebc9 0101 	rsb	r1, r9, r1
 800e68e:	9103      	str	r1, [sp, #12]
 800e690:	4798      	blx	r3
 800e692:	9b05      	ldr	r3, [sp, #20]
 800e694:	9903      	ldr	r1, [sp, #12]
 800e696:	f843 0f04 	str.w	r0, [r3, #4]!
 800e69a:	9305      	str	r3, [sp, #20]
 800e69c:	b124      	cbz	r4, 800e6a8 <_DrawBitmap+0x19c>
 800e69e:	68a3      	ldr	r3, [r4, #8]
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	463a      	mov	r2, r7
 800e6a6:	4798      	blx	r3
 800e6a8:	f1b9 0901 	subs.w	r9, r9, #1
 800e6ac:	d1e4      	bne.n	800e678 <_DrawBitmap+0x16c>
 800e6ae:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800e6b0:	44bb      	add	fp, r7
 800e6b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e6b4:	3501      	adds	r5, #1
 800e6b6:	443e      	add	r6, r7
 800e6b8:	e7c9      	b.n	800e64e <_DrawBitmap+0x142>
 800e6ba:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e6bc:	2f08      	cmp	r7, #8
 800e6be:	f100 0604 	add.w	r6, r0, #4
 800e6c2:	d16d      	bne.n	800e7a0 <_DrawBitmap+0x294>
 800e6c4:	9f07      	ldr	r7, [sp, #28]
 800e6c6:	9907      	ldr	r1, [sp, #28]
 800e6c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e6ca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800e6cc:	1a7b      	subs	r3, r7, r1
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	f1a6 0004 	sub.w	r0, r6, #4
 800e6d4:	da60      	bge.n	800e798 <_DrawBitmap+0x28c>
 800e6d6:	4b2c      	ldr	r3, [pc, #176]	; (800e788 <_DrawBitmap+0x27c>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	7c1b      	ldrb	r3, [r3, #16]
 800e6dc:	b36d      	cbz	r5, 800e73a <_DrawBitmap+0x22e>
 800e6de:	f013 0303 	ands.w	r3, r3, #3
 800e6e2:	d005      	beq.n	800e6f0 <_DrawBitmap+0x1e4>
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	d151      	bne.n	800e78c <_DrawBitmap+0x280>
 800e6e8:	46b1      	mov	r9, r6
 800e6ea:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e6ee:	e01c      	b.n	800e72a <_DrawBitmap+0x21e>
 800e6f0:	f81b 2003 	ldrb.w	r2, [fp, r3]
 800e6f4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800e6f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	4553      	cmp	r3, sl
 800e700:	d1f6      	bne.n	800e6f0 <_DrawBitmap+0x1e4>
 800e702:	e043      	b.n	800e78c <_DrawBitmap+0x280>
 800e704:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800e708:	f849 3c04 	str.w	r3, [r9, #-4]
 800e70c:	b12c      	cbz	r4, 800e71a <_DrawBitmap+0x20e>
 800e70e:	68a3      	ldr	r3, [r4, #8]
 800e710:	4620      	mov	r0, r4
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4641      	mov	r1, r8
 800e716:	463a      	mov	r2, r7
 800e718:	4798      	blx	r3
 800e71a:	9b04      	ldr	r3, [sp, #16]
 800e71c:	f108 0801 	add.w	r8, r8, #1
 800e720:	4453      	add	r3, sl
 800e722:	4543      	cmp	r3, r8
 800e724:	f109 0904 	add.w	r9, r9, #4
 800e728:	d030      	beq.n	800e78c <_DrawBitmap+0x280>
 800e72a:	9804      	ldr	r0, [sp, #16]
 800e72c:	ebc0 030b 	rsb	r3, r0, fp
 800e730:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d0f0      	beq.n	800e71a <_DrawBitmap+0x20e>
 800e738:	e7e4      	b.n	800e704 <_DrawBitmap+0x1f8>
 800e73a:	f013 0303 	ands.w	r3, r3, #3
 800e73e:	d005      	beq.n	800e74c <_DrawBitmap+0x240>
 800e740:	2b02      	cmp	r3, #2
 800e742:	d123      	bne.n	800e78c <_DrawBitmap+0x280>
 800e744:	46b1      	mov	r9, r6
 800e746:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e74a:	e015      	b.n	800e778 <_DrawBitmap+0x26c>
 800e74c:	4659      	mov	r1, fp
 800e74e:	4652      	mov	r2, sl
 800e750:	f00c f83e 	bl	801a7d0 <memcpy>
 800e754:	e01a      	b.n	800e78c <_DrawBitmap+0x280>
 800e756:	f849 3c04 	str.w	r3, [r9, #-4]
 800e75a:	b12c      	cbz	r4, 800e768 <_DrawBitmap+0x25c>
 800e75c:	68a3      	ldr	r3, [r4, #8]
 800e75e:	4620      	mov	r0, r4
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4641      	mov	r1, r8
 800e764:	463a      	mov	r2, r7
 800e766:	4798      	blx	r3
 800e768:	9b04      	ldr	r3, [sp, #16]
 800e76a:	f108 0801 	add.w	r8, r8, #1
 800e76e:	4453      	add	r3, sl
 800e770:	4543      	cmp	r3, r8
 800e772:	f109 0904 	add.w	r9, r9, #4
 800e776:	d009      	beq.n	800e78c <_DrawBitmap+0x280>
 800e778:	9904      	ldr	r1, [sp, #16]
 800e77a:	ebc1 030b 	rsb	r3, r1, fp
 800e77e:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d0f0      	beq.n	800e768 <_DrawBitmap+0x25c>
 800e786:	e7e6      	b.n	800e756 <_DrawBitmap+0x24a>
 800e788:	20000110 	.word	0x20000110
 800e78c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e790:	4493      	add	fp, r2
 800e792:	3701      	adds	r7, #1
 800e794:	441e      	add	r6, r3
 800e796:	e796      	b.n	800e6c6 <_DrawBitmap+0x1ba>
 800e798:	2c00      	cmp	r4, #0
 800e79a:	f040 824b 	bne.w	800ec34 <_DrawBitmap+0x728>
 800e79e:	e24c      	b.n	800ec3a <_DrawBitmap+0x72e>
 800e7a0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800e7a2:	4bb2      	ldr	r3, [pc, #712]	; (800ea6c <_DrawBitmap+0x560>)
 800e7a4:	9609      	str	r6, [sp, #36]	; 0x24
 800e7a6:	007f      	lsls	r7, r7, #1
 800e7a8:	970c      	str	r7, [sp, #48]	; 0x30
 800e7aa:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800e7ac:	00bf      	lsls	r7, r7, #2
 800e7ae:	970d      	str	r7, [sp, #52]	; 0x34
 800e7b0:	9f07      	ldr	r7, [sp, #28]
 800e7b2:	9705      	str	r7, [sp, #20]
 800e7b4:	2d00      	cmp	r5, #0
 800e7b6:	bf08      	it	eq
 800e7b8:	461d      	moveq	r5, r3
 800e7ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e7bc:	9807      	ldr	r0, [sp, #28]
 800e7be:	1f3c      	subs	r4, r7, #4
 800e7c0:	9f05      	ldr	r7, [sp, #20]
 800e7c2:	1a3b      	subs	r3, r7, r0
 800e7c4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e7c6:	42bb      	cmp	r3, r7
 800e7c8:	f280 8232 	bge.w	800ec30 <_DrawBitmap+0x724>
 800e7cc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e7ce:	2f02      	cmp	r7, #2
 800e7d0:	f000 80ad 	beq.w	800e92e <_DrawBitmap+0x422>
 800e7d4:	2f04      	cmp	r7, #4
 800e7d6:	f000 814f 	beq.w	800ea78 <_DrawBitmap+0x56c>
 800e7da:	2f01      	cmp	r7, #1
 800e7dc:	f040 821e 	bne.w	800ec1c <_DrawBitmap+0x710>
 800e7e0:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800ea74 <_DrawBitmap+0x568>
 800e7e4:	f8d9 3000 	ldr.w	r3, [r9]
 800e7e8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800e7ea:	f005 f887 	bl	80138fc <GUI_ALLOC_LockH>
 800e7ee:	f89b 3000 	ldrb.w	r3, [fp]
 800e7f2:	4a9f      	ldr	r2, [pc, #636]	; (800ea70 <_DrawBitmap+0x564>)
 800e7f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e7f6:	5cd6      	ldrb	r6, [r2, r3]
 800e7f8:	f8d9 3000 	ldr.w	r3, [r9]
 800e7fc:	900e      	str	r0, [sp, #56]	; 0x38
 800e7fe:	7c1b      	ldrb	r3, [r3, #16]
 800e800:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800e804:	f003 0303 	and.w	r3, r3, #3
 800e808:	2b02      	cmp	r3, #2
 800e80a:	4657      	mov	r7, sl
 800e80c:	f1c1 0808 	rsb	r8, r1, #8
 800e810:	fa46 f601 	asr.w	r6, r6, r1
 800e814:	d020      	beq.n	800e858 <_DrawBitmap+0x34c>
 800e816:	2b03      	cmp	r3, #3
 800e818:	d061      	beq.n	800e8de <_DrawBitmap+0x3d2>
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d05f      	beq.n	800e8de <_DrawBitmap+0x3d2>
 800e81e:	465a      	mov	r2, fp
 800e820:	4547      	cmp	r7, r8
 800e822:	bf38      	it	cc
 800e824:	46b8      	movcc	r8, r7
 800e826:	ebc8 0707 	rsb	r7, r8, r7
 800e82a:	4643      	mov	r3, r8
 800e82c:	4621      	mov	r1, r4
 800e82e:	f006 0001 	and.w	r0, r6, #1
 800e832:	3b01      	subs	r3, #1
 800e834:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800e838:	f841 0b04 	str.w	r0, [r1], #4
 800e83c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e840:	d1f5      	bne.n	800e82e <_DrawBitmap+0x322>
 800e842:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800e846:	2f00      	cmp	r7, #0
 800e848:	d06d      	beq.n	800e926 <_DrawBitmap+0x41a>
 800e84a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e84e:	4988      	ldr	r1, [pc, #544]	; (800ea70 <_DrawBitmap+0x564>)
 800e850:	f04f 0808 	mov.w	r8, #8
 800e854:	5cce      	ldrb	r6, [r1, r3]
 800e856:	e7e3      	b.n	800e820 <_DrawBitmap+0x314>
 800e858:	686b      	ldr	r3, [r5, #4]
 800e85a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800e85e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e860:	f8cd b020 	str.w	fp, [sp, #32]
 800e864:	4547      	cmp	r7, r8
 800e866:	bf38      	it	cc
 800e868:	46b8      	movcc	r8, r7
 800e86a:	ebc8 0707 	rsb	r7, r8, r7
 800e86e:	f1bc 0f00 	cmp.w	ip, #0
 800e872:	d026      	beq.n	800e8c2 <_DrawBitmap+0x3b6>
 800e874:	b91e      	cbnz	r6, 800e87e <_DrawBitmap+0x372>
 800e876:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800e87a:	44c1      	add	r9, r8
 800e87c:	e025      	b.n	800e8ca <_DrawBitmap+0x3be>
 800e87e:	07f0      	lsls	r0, r6, #31
 800e880:	d50c      	bpl.n	800e89c <_DrawBitmap+0x390>
 800e882:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e886:	9a05      	ldr	r2, [sp, #20]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f8cd c008 	str.w	ip, [sp, #8]
 800e88e:	4660      	mov	r0, ip
 800e890:	4649      	mov	r1, r9
 800e892:	4798      	blx	r3
 800e894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e896:	f8dd c008 	ldr.w	ip, [sp, #8]
 800e89a:	6023      	str	r3, [r4, #0]
 800e89c:	f1b8 0801 	subs.w	r8, r8, #1
 800e8a0:	f109 0901 	add.w	r9, r9, #1
 800e8a4:	f104 0404 	add.w	r4, r4, #4
 800e8a8:	d00f      	beq.n	800e8ca <_DrawBitmap+0x3be>
 800e8aa:	0876      	lsrs	r6, r6, #1
 800e8ac:	e7e2      	b.n	800e874 <_DrawBitmap+0x368>
 800e8ae:	07f1      	lsls	r1, r6, #31
 800e8b0:	bf44      	itt	mi
 800e8b2:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800e8b4:	6023      	strmi	r3, [r4, #0]
 800e8b6:	f1b8 0801 	subs.w	r8, r8, #1
 800e8ba:	f104 0404 	add.w	r4, r4, #4
 800e8be:	d004      	beq.n	800e8ca <_DrawBitmap+0x3be>
 800e8c0:	0876      	lsrs	r6, r6, #1
 800e8c2:	2e00      	cmp	r6, #0
 800e8c4:	d1f3      	bne.n	800e8ae <_DrawBitmap+0x3a2>
 800e8c6:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800e8ca:	b367      	cbz	r7, 800e926 <_DrawBitmap+0x41a>
 800e8cc:	9808      	ldr	r0, [sp, #32]
 800e8ce:	4a68      	ldr	r2, [pc, #416]	; (800ea70 <_DrawBitmap+0x564>)
 800e8d0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e8d4:	9008      	str	r0, [sp, #32]
 800e8d6:	5cd6      	ldrb	r6, [r2, r3]
 800e8d8:	f04f 0808 	mov.w	r8, #8
 800e8dc:	e7c2      	b.n	800e864 <_DrawBitmap+0x358>
 800e8de:	6803      	ldr	r3, [r0, #0]
 800e8e0:	691b      	ldr	r3, [r3, #16]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	4798      	blx	r3
 800e8e6:	4659      	mov	r1, fp
 800e8e8:	4547      	cmp	r7, r8
 800e8ea:	bf38      	it	cc
 800e8ec:	46b8      	movcc	r8, r7
 800e8ee:	ebc8 0707 	rsb	r7, r8, r7
 800e8f2:	1d23      	adds	r3, r4, #4
 800e8f4:	46c6      	mov	lr, r8
 800e8f6:	07f2      	lsls	r2, r6, #31
 800e8f8:	d504      	bpl.n	800e904 <_DrawBitmap+0x3f8>
 800e8fa:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800e8fe:	4042      	eors	r2, r0
 800e900:	f843 2c04 	str.w	r2, [r3, #-4]
 800e904:	f1be 0e01 	subs.w	lr, lr, #1
 800e908:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e90c:	f103 0304 	add.w	r3, r3, #4
 800e910:	d1f1      	bne.n	800e8f6 <_DrawBitmap+0x3ea>
 800e912:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800e916:	b137      	cbz	r7, 800e926 <_DrawBitmap+0x41a>
 800e918:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e91c:	4a54      	ldr	r2, [pc, #336]	; (800ea70 <_DrawBitmap+0x564>)
 800e91e:	f04f 0808 	mov.w	r8, #8
 800e922:	5cd6      	ldrb	r6, [r2, r3]
 800e924:	e7e0      	b.n	800e8e8 <_DrawBitmap+0x3dc>
 800e926:	a80e      	add	r0, sp, #56	; 0x38
 800e928:	f004 fff6 	bl	8013918 <GUI_ALLOC_UnlockH>
 800e92c:	e176      	b.n	800ec1c <_DrawBitmap+0x710>
 800e92e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800e930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e932:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800e936:	f1c7 0604 	rsb	r6, r7, #4
 800e93a:	f89b 7000 	ldrb.w	r7, [fp]
 800e93e:	409f      	lsls	r7, r3
 800e940:	4b4c      	ldr	r3, [pc, #304]	; (800ea74 <_DrawBitmap+0x568>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	7c1b      	ldrb	r3, [r3, #16]
 800e946:	f003 0303 	and.w	r3, r3, #3
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	b2f6      	uxtb	r6, r6
 800e94e:	b2ff      	uxtb	r7, r7
 800e950:	d066      	beq.n	800ea20 <_DrawBitmap+0x514>
 800e952:	d308      	bcc.n	800e966 <_DrawBitmap+0x45a>
 800e954:	2b02      	cmp	r3, #2
 800e956:	f040 8161 	bne.w	800ec1c <_DrawBitmap+0x710>
 800e95a:	9804      	ldr	r0, [sp, #16]
 800e95c:	f8cd b020 	str.w	fp, [sp, #32]
 800e960:	46d0      	mov	r8, sl
 800e962:	9006      	str	r0, [sp, #24]
 800e964:	e03e      	b.n	800e9e4 <_DrawBitmap+0x4d8>
 800e966:	465a      	mov	r2, fp
 800e968:	4653      	mov	r3, sl
 800e96a:	429e      	cmp	r6, r3
 800e96c:	bfc8      	it	gt
 800e96e:	b2de      	uxtbgt	r6, r3
 800e970:	1b9b      	subs	r3, r3, r6
 800e972:	4631      	mov	r1, r6
 800e974:	4620      	mov	r0, r4
 800e976:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 800e97a:	3901      	subs	r1, #1
 800e97c:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800e980:	f840 cb04 	str.w	ip, [r0], #4
 800e984:	00bf      	lsls	r7, r7, #2
 800e986:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800e98a:	b2ff      	uxtb	r7, r7
 800e98c:	d1f3      	bne.n	800e976 <_DrawBitmap+0x46a>
 800e98e:	3e01      	subs	r6, #1
 800e990:	b2f6      	uxtb	r6, r6
 800e992:	3601      	adds	r6, #1
 800e994:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800e998:	2b00      	cmp	r3, #0
 800e99a:	f000 813f 	beq.w	800ec1c <_DrawBitmap+0x710>
 800e99e:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800e9a2:	2604      	movs	r6, #4
 800e9a4:	e7e1      	b.n	800e96a <_DrawBitmap+0x45e>
 800e9a6:	9906      	ldr	r1, [sp, #24]
 800e9a8:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800e9ac:	4449      	add	r1, r9
 800e9ae:	d122      	bne.n	800e9f6 <_DrawBitmap+0x4ea>
 800e9b0:	f109 0901 	add.w	r9, r9, #1
 800e9b4:	fa5f f289 	uxtb.w	r2, r9
 800e9b8:	00bf      	lsls	r7, r7, #2
 800e9ba:	4296      	cmp	r6, r2
 800e9bc:	b2ff      	uxtb	r7, r7
 800e9be:	d1f2      	bne.n	800e9a6 <_DrawBitmap+0x49a>
 800e9c0:	9f06      	ldr	r7, [sp, #24]
 800e9c2:	3e01      	subs	r6, #1
 800e9c4:	b2f6      	uxtb	r6, r6
 800e9c6:	1c7b      	adds	r3, r7, #1
 800e9c8:	1c72      	adds	r2, r6, #1
 800e9ca:	199e      	adds	r6, r3, r6
 800e9cc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800e9d0:	9606      	str	r6, [sp, #24]
 800e9d2:	f1b8 0f00 	cmp.w	r8, #0
 800e9d6:	f000 8121 	beq.w	800ec1c <_DrawBitmap+0x710>
 800e9da:	9b08      	ldr	r3, [sp, #32]
 800e9dc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800e9e0:	9308      	str	r3, [sp, #32]
 800e9e2:	2604      	movs	r6, #4
 800e9e4:	4546      	cmp	r6, r8
 800e9e6:	bfc8      	it	gt
 800e9e8:	fa5f f688 	uxtbgt.w	r6, r8
 800e9ec:	ebc6 0808 	rsb	r8, r6, r8
 800e9f0:	f04f 0900 	mov.w	r9, #0
 800e9f4:	e7d7      	b.n	800e9a6 <_DrawBitmap+0x49a>
 800e9f6:	09ba      	lsrs	r2, r7, #6
 800e9f8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800e9fc:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 800ea00:	f1bc 0f00 	cmp.w	ip, #0
 800ea04:	d0d4      	beq.n	800e9b0 <_DrawBitmap+0x4a4>
 800ea06:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800ea0a:	6812      	ldr	r2, [r2, #0]
 800ea0c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ea0e:	4660      	mov	r0, ip
 800ea10:	f8cd c008 	str.w	ip, [sp, #8]
 800ea14:	9a05      	ldr	r2, [sp, #20]
 800ea16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea18:	4798      	blx	r3
 800ea1a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ea1e:	e7c7      	b.n	800e9b0 <_DrawBitmap+0x4a4>
 800ea20:	4658      	mov	r0, fp
 800ea22:	4653      	mov	r3, sl
 800ea24:	429e      	cmp	r6, r3
 800ea26:	bfc8      	it	gt
 800ea28:	b2de      	uxtbgt	r6, r3
 800ea2a:	1b9b      	subs	r3, r3, r6
 800ea2c:	1d22      	adds	r2, r4, #4
 800ea2e:	46b4      	mov	ip, r6
 800ea30:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800ea34:	d005      	beq.n	800ea42 <_DrawBitmap+0x536>
 800ea36:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800ea3a:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800ea3e:	f842 1c04 	str.w	r1, [r2, #-4]
 800ea42:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ea46:	00bf      	lsls	r7, r7, #2
 800ea48:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800ea4c:	b2ff      	uxtb	r7, r7
 800ea4e:	f102 0204 	add.w	r2, r2, #4
 800ea52:	d1ed      	bne.n	800ea30 <_DrawBitmap+0x524>
 800ea54:	3e01      	subs	r6, #1
 800ea56:	b2f6      	uxtb	r6, r6
 800ea58:	3601      	adds	r6, #1
 800ea5a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	f000 80dc 	beq.w	800ec1c <_DrawBitmap+0x710>
 800ea64:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800ea68:	2604      	movs	r6, #4
 800ea6a:	e7db      	b.n	800ea24 <_DrawBitmap+0x518>
 800ea6c:	0801b62c 	.word	0x0801b62c
 800ea70:	08020a30 	.word	0x08020a30
 800ea74:	20000110 	.word	0x20000110
 800ea78:	4a71      	ldr	r2, [pc, #452]	; (800ec40 <_DrawBitmap+0x734>)
 800ea7a:	f89b 3000 	ldrb.w	r3, [fp]
 800ea7e:	6812      	ldr	r2, [r2, #0]
 800ea80:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ea82:	7c12      	ldrb	r2, [r2, #16]
 800ea84:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800ea86:	f002 0203 	and.w	r2, r2, #3
 800ea8a:	4083      	lsls	r3, r0
 800ea8c:	2a01      	cmp	r2, #1
 800ea8e:	b2de      	uxtb	r6, r3
 800ea90:	f000 809c 	beq.w	800ebcc <_DrawBitmap+0x6c0>
 800ea94:	d302      	bcc.n	800ea9c <_DrawBitmap+0x590>
 800ea96:	2a02      	cmp	r2, #2
 800ea98:	d035      	beq.n	800eb06 <_DrawBitmap+0x5fa>
 800ea9a:	e0bf      	b.n	800ec1c <_DrawBitmap+0x710>
 800ea9c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800ea9e:	b15f      	cbz	r7, 800eab8 <_DrawBitmap+0x5ac>
 800eaa0:	0936      	lsrs	r6, r6, #4
 800eaa2:	f10b 0201 	add.w	r2, fp, #1
 800eaa6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800eaaa:	6023      	str	r3, [r4, #0]
 800eaac:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800eab0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800eab2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800eab6:	e001      	b.n	800eabc <_DrawBitmap+0x5b0>
 800eab8:	4653      	mov	r3, sl
 800eaba:	465a      	mov	r2, fp
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	dd1a      	ble.n	800eaf6 <_DrawBitmap+0x5ea>
 800eac0:	1058      	asrs	r0, r3, #1
 800eac2:	f104 0108 	add.w	r1, r4, #8
 800eac6:	f003 0301 	and.w	r3, r3, #1
 800eaca:	eb02 0800 	add.w	r8, r2, r0
 800eace:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800ead2:	f006 060f 	and.w	r6, r6, #15
 800ead6:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 800eada:	f841 7c08 	str.w	r7, [r1, #-8]
 800eade:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800eae2:	f841 6c04 	str.w	r6, [r1, #-4]
 800eae6:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800eaea:	4542      	cmp	r2, r8
 800eaec:	f101 0108 	add.w	r1, r1, #8
 800eaf0:	d1ed      	bne.n	800eace <_DrawBitmap+0x5c2>
 800eaf2:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	f000 8090 	beq.w	800ec1c <_DrawBitmap+0x710>
 800eafc:	0936      	lsrs	r6, r6, #4
 800eafe:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800eb02:	6023      	str	r3, [r4, #0]
 800eb04:	e08a      	b.n	800ec1c <_DrawBitmap+0x710>
 800eb06:	981e      	ldr	r0, [sp, #120]	; 0x78
 800eb08:	b1c0      	cbz	r0, 800eb3c <_DrawBitmap+0x630>
 800eb0a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800eb0e:	d00a      	beq.n	800eb26 <_DrawBitmap+0x61a>
 800eb10:	0936      	lsrs	r6, r6, #4
 800eb12:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800eb16:	6023      	str	r3, [r4, #0]
 800eb18:	b12f      	cbz	r7, 800eb26 <_DrawBitmap+0x61a>
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	9904      	ldr	r1, [sp, #16]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	9a05      	ldr	r2, [sp, #20]
 800eb22:	4638      	mov	r0, r7
 800eb24:	4798      	blx	r3
 800eb26:	9904      	ldr	r1, [sp, #16]
 800eb28:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800eb2a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800eb2e:	f101 0801 	add.w	r8, r1, #1
 800eb32:	f10a 3cff 	add.w	ip, sl, #4294967295
 800eb36:	f10b 0901 	add.w	r9, fp, #1
 800eb3a:	e011      	b.n	800eb60 <_DrawBitmap+0x654>
 800eb3c:	46d4      	mov	ip, sl
 800eb3e:	46d9      	mov	r9, fp
 800eb40:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800eb44:	e00c      	b.n	800eb60 <_DrawBitmap+0x654>
 800eb46:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 800eb4a:	d10d      	bne.n	800eb68 <_DrawBitmap+0x65c>
 800eb4c:	f016 060f 	ands.w	r6, r6, #15
 800eb50:	d11b      	bne.n	800eb8a <_DrawBitmap+0x67e>
 800eb52:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800eb56:	3408      	adds	r4, #8
 800eb58:	f108 0802 	add.w	r8, r8, #2
 800eb5c:	f1ac 0c02 	sub.w	ip, ip, #2
 800eb60:	f1bc 0f01 	cmp.w	ip, #1
 800eb64:	dcef      	bgt.n	800eb46 <_DrawBitmap+0x63a>
 800eb66:	e021      	b.n	800ebac <_DrawBitmap+0x6a0>
 800eb68:	0933      	lsrs	r3, r6, #4
 800eb6a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800eb6e:	6023      	str	r3, [r4, #0]
 800eb70:	2f00      	cmp	r7, #0
 800eb72:	d0eb      	beq.n	800eb4c <_DrawBitmap+0x640>
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	9a05      	ldr	r2, [sp, #20]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f8cd c008 	str.w	ip, [sp, #8]
 800eb7e:	4638      	mov	r0, r7
 800eb80:	4641      	mov	r1, r8
 800eb82:	4798      	blx	r3
 800eb84:	f8dd c008 	ldr.w	ip, [sp, #8]
 800eb88:	e7e0      	b.n	800eb4c <_DrawBitmap+0x640>
 800eb8a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800eb8e:	6063      	str	r3, [r4, #4]
 800eb90:	2f00      	cmp	r7, #0
 800eb92:	d0de      	beq.n	800eb52 <_DrawBitmap+0x646>
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	9a05      	ldr	r2, [sp, #20]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f8cd c008 	str.w	ip, [sp, #8]
 800eb9e:	4638      	mov	r0, r7
 800eba0:	f108 0101 	add.w	r1, r8, #1
 800eba4:	4798      	blx	r3
 800eba6:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ebaa:	e7d2      	b.n	800eb52 <_DrawBitmap+0x646>
 800ebac:	f1bc 0f00 	cmp.w	ip, #0
 800ebb0:	d034      	beq.n	800ec1c <_DrawBitmap+0x710>
 800ebb2:	0936      	lsrs	r6, r6, #4
 800ebb4:	d032      	beq.n	800ec1c <_DrawBitmap+0x710>
 800ebb6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800ebba:	6023      	str	r3, [r4, #0]
 800ebbc:	b377      	cbz	r7, 800ec1c <_DrawBitmap+0x710>
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	9a05      	ldr	r2, [sp, #20]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4638      	mov	r0, r7
 800ebc6:	4641      	mov	r1, r8
 800ebc8:	4798      	blx	r3
 800ebca:	e027      	b.n	800ec1c <_DrawBitmap+0x710>
 800ebcc:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800ebce:	f1c7 0302 	rsb	r3, r7, #2
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	465f      	mov	r7, fp
 800ebd6:	4652      	mov	r2, sl
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	bfc8      	it	gt
 800ebdc:	b2d3      	uxtbgt	r3, r2
 800ebde:	1ad2      	subs	r2, r2, r3
 800ebe0:	1d20      	adds	r0, r4, #4
 800ebe2:	469c      	mov	ip, r3
 800ebe4:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800ebe8:	d005      	beq.n	800ebf6 <_DrawBitmap+0x6ea>
 800ebea:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800ebee:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800ebf2:	f840 1c04 	str.w	r1, [r0, #-4]
 800ebf6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ebfa:	0136      	lsls	r6, r6, #4
 800ebfc:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800ec00:	b2f6      	uxtb	r6, r6
 800ec02:	f100 0004 	add.w	r0, r0, #4
 800ec06:	d1ed      	bne.n	800ebe4 <_DrawBitmap+0x6d8>
 800ec08:	3b01      	subs	r3, #1
 800ec0a:	b2db      	uxtb	r3, r3
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800ec12:	b11a      	cbz	r2, 800ec1c <_DrawBitmap+0x710>
 800ec14:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800ec18:	2302      	movs	r3, #2
 800ec1a:	e7dd      	b.n	800ebd8 <_DrawBitmap+0x6cc>
 800ec1c:	9b05      	ldr	r3, [sp, #20]
 800ec1e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800ec20:	3301      	adds	r3, #1
 800ec22:	44bb      	add	fp, r7
 800ec24:	9305      	str	r3, [sp, #20]
 800ec26:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ec28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec2a:	443b      	add	r3, r7
 800ec2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec2e:	e5c4      	b.n	800e7ba <_DrawBitmap+0x2ae>
 800ec30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec32:	b113      	cbz	r3, 800ec3a <_DrawBitmap+0x72e>
 800ec34:	a80f      	add	r0, sp, #60	; 0x3c
 800ec36:	f004 fe6f 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ec3a:	b011      	add	sp, #68	; 0x44
 800ec3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec40:	20000110 	.word	0x20000110

0800ec44 <GUI_MEMDEV__WriteToActiveAt>:
 800ec44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ec48:	460e      	mov	r6, r1
 800ec4a:	4690      	mov	r8, r2
 800ec4c:	4607      	mov	r7, r0
 800ec4e:	f004 fe55 	bl	80138fc <GUI_ALLOC_LockH>
 800ec52:	6803      	ldr	r3, [r0, #0]
 800ec54:	ac02      	add	r4, sp, #8
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ec5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5e:	2000      	movs	r0, #0
 800ec60:	2116      	movs	r1, #22
 800ec62:	4798      	blx	r3
 800ec64:	4605      	mov	r5, r0
 800ec66:	4620      	mov	r0, r4
 800ec68:	f004 fe56 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ec6c:	b11d      	cbz	r5, 800ec76 <GUI_MEMDEV__WriteToActiveAt+0x32>
 800ec6e:	4638      	mov	r0, r7
 800ec70:	4631      	mov	r1, r6
 800ec72:	4642      	mov	r2, r8
 800ec74:	47a8      	blx	r5
 800ec76:	b002      	add	sp, #8
 800ec78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ec7c <GUI_MEMDEV__CreateFixed>:
 800ec7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec80:	4e3e      	ldr	r6, [pc, #248]	; (800ed7c <GUI_MEMDEV__CreateFixed+0x100>)
 800ec82:	b087      	sub	sp, #28
 800ec84:	461d      	mov	r5, r3
 800ec86:	6833      	ldr	r3, [r6, #0]
 800ec88:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ec8a:	7c5b      	ldrb	r3, [r3, #17]
 800ec8c:	4683      	mov	fp, r0
 800ec8e:	468a      	mov	sl, r1
 800ec90:	4690      	mov	r8, r2
 800ec92:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ec94:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ec96:	2200      	movs	r2, #0
 800ec98:	f004 f814 	bl	8012cc4 <GUI_DEVICE_Create>
 800ec9c:	4604      	mov	r4, r0
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	d033      	beq.n	800ed0a <GUI_MEMDEV__CreateFixed+0x8e>
 800eca2:	6903      	ldr	r3, [r0, #16]
 800eca4:	689b      	ldr	r3, [r3, #8]
 800eca6:	4798      	blx	r3
 800eca8:	f001 fb7d 	bl	80103a6 <LCD__GetBPPDevice>
 800ecac:	fb08 f600 	mul.w	r6, r8, r0
 800ecb0:	9003      	str	r0, [sp, #12]
 800ecb2:	3607      	adds	r6, #7
 800ecb4:	f004 ffea 	bl	8013c8c <GUI_ALLOC_RequestSize>
 800ecb8:	f017 0901 	ands.w	r9, r7, #1
 800ecbc:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 800ecc0:	d104      	bne.n	800eccc <GUI_MEMDEV__CreateFixed+0x50>
 800ecc2:	2304      	movs	r3, #4
 800ecc4:	fb90 f0f3 	sdiv	r0, r0, r3
 800ecc8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800eccc:	2d00      	cmp	r5, #0
 800ecce:	dc09      	bgt.n	800ece4 <GUI_MEMDEV__CreateFixed+0x68>
 800ecd0:	b11e      	cbz	r6, 800ecda <GUI_MEMDEV__CreateFixed+0x5e>
 800ecd2:	3818      	subs	r0, #24
 800ecd4:	fbb0 f0f6 	udiv	r0, r0, r6
 800ecd8:	e000      	b.n	800ecdc <GUI_MEMDEV__CreateFixed+0x60>
 800ecda:	4630      	mov	r0, r6
 800ecdc:	426d      	negs	r5, r5
 800ecde:	42a8      	cmp	r0, r5
 800ece0:	bfb8      	it	lt
 800ece2:	4605      	movlt	r5, r0
 800ece4:	f1b9 0f00 	cmp.w	r9, #0
 800ece8:	d109      	bne.n	800ecfe <GUI_MEMDEV__CreateFixed+0x82>
 800ecea:	f8cd 9000 	str.w	r9, [sp]
 800ecee:	4658      	mov	r0, fp
 800ecf0:	4651      	mov	r1, sl
 800ecf2:	4642      	mov	r2, r8
 800ecf4:	462b      	mov	r3, r5
 800ecf6:	f007 fadb 	bl	80162b0 <GUI_USAGE_BM_Create>
 800ecfa:	4607      	mov	r7, r0
 800ecfc:	e000      	b.n	800ed00 <GUI_MEMDEV__CreateFixed+0x84>
 800ecfe:	2700      	movs	r7, #0
 800ed00:	2d00      	cmp	r5, #0
 800ed02:	dc04      	bgt.n	800ed0e <GUI_MEMDEV__CreateFixed+0x92>
 800ed04:	4620      	mov	r0, r4
 800ed06:	f003 ffdb 	bl	8012cc0 <GUI_DEVICE_Delete>
 800ed0a:	2000      	movs	r0, #0
 800ed0c:	e032      	b.n	800ed74 <GUI_MEMDEV__CreateFixed+0xf8>
 800ed0e:	fb06 f005 	mul.w	r0, r6, r5
 800ed12:	3018      	adds	r0, #24
 800ed14:	f1b9 0f00 	cmp.w	r9, #0
 800ed18:	d002      	beq.n	800ed20 <GUI_MEMDEV__CreateFixed+0xa4>
 800ed1a:	f005 f843 	bl	8013da4 <GUI_ALLOC_AllocNoInit>
 800ed1e:	e001      	b.n	800ed24 <GUI_MEMDEV__CreateFixed+0xa8>
 800ed20:	f005 f8cc 	bl	8013ebc <GUI_ALLOC_AllocZero>
 800ed24:	4681      	mov	r9, r0
 800ed26:	b940      	cbnz	r0, 800ed3a <GUI_MEMDEV__CreateFixed+0xbe>
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f003 ffc9 	bl	8012cc0 <GUI_DEVICE_Delete>
 800ed2e:	2f00      	cmp	r7, #0
 800ed30:	d0eb      	beq.n	800ed0a <GUI_MEMDEV__CreateFixed+0x8e>
 800ed32:	4638      	mov	r0, r7
 800ed34:	f004 fe1c 	bl	8013970 <GUI_ALLOC_Free>
 800ed38:	e01b      	b.n	800ed72 <GUI_MEMDEV__CreateFixed+0xf6>
 800ed3a:	f004 fddf 	bl	80138fc <GUI_ALLOC_LockH>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	a806      	add	r0, sp, #24
 800ed42:	9a03      	ldr	r2, [sp, #12]
 800ed44:	f840 3d04 	str.w	r3, [r0, #-4]!
 800ed48:	611a      	str	r2, [r3, #16]
 800ed4a:	601c      	str	r4, [r3, #0]
 800ed4c:	f8a3 b004 	strh.w	fp, [r3, #4]
 800ed50:	f8a3 a006 	strh.w	sl, [r3, #6]
 800ed54:	f8a3 8008 	strh.w	r8, [r3, #8]
 800ed58:	815d      	strh	r5, [r3, #10]
 800ed5a:	60de      	str	r6, [r3, #12]
 800ed5c:	615f      	str	r7, [r3, #20]
 800ed5e:	f004 fddb 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ed62:	4a06      	ldr	r2, [pc, #24]	; (800ed7c <GUI_MEMDEV__CreateFixed+0x100>)
 800ed64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ed66:	6123      	str	r3, [r4, #16]
 800ed68:	6813      	ldr	r3, [r2, #0]
 800ed6a:	f8c4 9008 	str.w	r9, [r4, #8]
 800ed6e:	7c5b      	ldrb	r3, [r3, #17]
 800ed70:	61a3      	str	r3, [r4, #24]
 800ed72:	4648      	mov	r0, r9
 800ed74:	b007      	add	sp, #28
 800ed76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed7a:	bf00      	nop
 800ed7c:	20000110 	.word	0x20000110

0800ed80 <GUI_MEMDEV_GetBitsPerPixel>:
 800ed80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed82:	4605      	mov	r5, r0
 800ed84:	b170      	cbz	r0, 800eda4 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800ed86:	f004 fdb9 	bl	80138fc <GUI_ALLOC_LockH>
 800ed8a:	6803      	ldr	r3, [r0, #0]
 800ed8c:	ac02      	add	r4, sp, #8
 800ed8e:	691b      	ldr	r3, [r3, #16]
 800ed90:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ed94:	689b      	ldr	r3, [r3, #8]
 800ed96:	4798      	blx	r3
 800ed98:	f001 fb05 	bl	80103a6 <LCD__GetBPPDevice>
 800ed9c:	4605      	mov	r5, r0
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f004 fdba 	bl	8013918 <GUI_ALLOC_UnlockH>
 800eda4:	4628      	mov	r0, r5
 800eda6:	b003      	add	sp, #12
 800eda8:	bd30      	pop	{r4, r5, pc}
	...

0800edac <GUI_MEMDEV_Delete>:
 800edac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edae:	4604      	mov	r4, r0
 800edb0:	b1d0      	cbz	r0, 800ede8 <GUI_MEMDEV_Delete+0x3c>
 800edb2:	4b0e      	ldr	r3, [pc, #56]	; (800edec <GUI_MEMDEV_Delete+0x40>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edb8:	4283      	cmp	r3, r0
 800edba:	d101      	bne.n	800edc0 <GUI_MEMDEV_Delete+0x14>
 800edbc:	f003 f8cc 	bl	8011f58 <GUI_SelectLCD>
 800edc0:	4620      	mov	r0, r4
 800edc2:	f004 fd9b 	bl	80138fc <GUI_ALLOC_LockH>
 800edc6:	9001      	str	r0, [sp, #4]
 800edc8:	6940      	ldr	r0, [r0, #20]
 800edca:	b108      	cbz	r0, 800edd0 <GUI_MEMDEV_Delete+0x24>
 800edcc:	f007 fa9c 	bl	8016308 <GUI_USAGE_DecUseCnt>
 800edd0:	ad02      	add	r5, sp, #8
 800edd2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800edd6:	6818      	ldr	r0, [r3, #0]
 800edd8:	f003 ff72 	bl	8012cc0 <GUI_DEVICE_Delete>
 800eddc:	4628      	mov	r0, r5
 800edde:	f004 fd9b 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ede2:	4620      	mov	r0, r4
 800ede4:	f004 fdc4 	bl	8013970 <GUI_ALLOC_Free>
 800ede8:	b003      	add	sp, #12
 800edea:	bd30      	pop	{r4, r5, pc}
 800edec:	20000110 	.word	0x20000110

0800edf0 <GUI_MEMDEV_CreateEx>:
 800edf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edf4:	469a      	mov	sl, r3
 800edf6:	4b19      	ldr	r3, [pc, #100]	; (800ee5c <GUI_MEMDEV_CreateEx+0x6c>)
 800edf8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	4607      	mov	r7, r0
 800edfe:	7c58      	ldrb	r0, [r3, #17]
 800ee00:	4b17      	ldr	r3, [pc, #92]	; (800ee60 <GUI_MEMDEV_CreateEx+0x70>)
 800ee02:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800ee06:	4688      	mov	r8, r1
 800ee08:	4691      	mov	r9, r2
 800ee0a:	68e3      	ldr	r3, [r4, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	2b04      	cmp	r3, #4
 800ee10:	d006      	beq.n	800ee20 <GUI_MEMDEV_CreateEx+0x30>
 800ee12:	6824      	ldr	r4, [r4, #0]
 800ee14:	2c00      	cmp	r4, #0
 800ee16:	d1f8      	bne.n	800ee0a <GUI_MEMDEV_CreateEx+0x1a>
 800ee18:	f003 ff42 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 800ee1c:	4604      	mov	r4, r0
 800ee1e:	b130      	cbz	r0, 800ee2e <GUI_MEMDEV_CreateEx+0x3e>
 800ee20:	68e3      	ldr	r3, [r4, #12]
 800ee22:	4620      	mov	r0, r4
 800ee24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee26:	2101      	movs	r1, #1
 800ee28:	4798      	blx	r3
 800ee2a:	4606      	mov	r6, r0
 800ee2c:	b908      	cbnz	r0, 800ee32 <GUI_MEMDEV_CreateEx+0x42>
 800ee2e:	2000      	movs	r0, #0
 800ee30:	e010      	b.n	800ee54 <GUI_MEMDEV_CreateEx+0x64>
 800ee32:	6924      	ldr	r4, [r4, #16]
 800ee34:	68a3      	ldr	r3, [r4, #8]
 800ee36:	4798      	blx	r3
 800ee38:	3001      	adds	r0, #1
 800ee3a:	bf04      	itt	eq
 800ee3c:	f045 0501 	orreq.w	r5, r5, #1
 800ee40:	4c08      	ldreq	r4, [pc, #32]	; (800ee64 <GUI_MEMDEV_CreateEx+0x74>)
 800ee42:	9402      	str	r4, [sp, #8]
 800ee44:	e88d 0060 	stmia.w	sp, {r5, r6}
 800ee48:	4638      	mov	r0, r7
 800ee4a:	4641      	mov	r1, r8
 800ee4c:	464a      	mov	r2, r9
 800ee4e:	4653      	mov	r3, sl
 800ee50:	f7ff ff14 	bl	800ec7c <GUI_MEMDEV__CreateFixed>
 800ee54:	b004      	add	sp, #16
 800ee56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee5a:	bf00      	nop
 800ee5c:	20000110 	.word	0x20000110
 800ee60:	2001d5dc 	.word	0x2001d5dc
 800ee64:	08020be8 	.word	0x08020be8

0800ee68 <GUI_MEMDEV_Select>:
 800ee68:	4b11      	ldr	r3, [pc, #68]	; (800eeb0 <GUI_MEMDEV_Select+0x48>)
 800ee6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	4604      	mov	r4, r0
 800ee70:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800ee72:	461f      	mov	r7, r3
 800ee74:	b910      	cbnz	r0, 800ee7c <GUI_MEMDEV_Select+0x14>
 800ee76:	f003 f86f 	bl	8011f58 <GUI_SelectLCD>
 800ee7a:	e016      	b.n	800eeaa <GUI_MEMDEV_Select+0x42>
 800ee7c:	b10e      	cbz	r6, 800ee82 <GUI_MEMDEV_Select+0x1a>
 800ee7e:	f003 f86b 	bl	8011f58 <GUI_SelectLCD>
 800ee82:	f7fe ff37 	bl	800dcf4 <WM_Deactivate>
 800ee86:	4620      	mov	r0, r4
 800ee88:	f004 fd38 	bl	80138fc <GUI_ALLOC_LockH>
 800ee8c:	ad02      	add	r5, sp, #8
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	f845 0d04 	str.w	r0, [r5, #-4]!
 800ee94:	661c      	str	r4, [r3, #96]	; 0x60
 800ee96:	6800      	ldr	r0, [r0, #0]
 800ee98:	f003 ff50 	bl	8012d3c <GUI_DEVICE_Link>
 800ee9c:	4628      	mov	r0, r5
 800ee9e:	f004 fd3b 	bl	8013918 <GUI_ALLOC_UnlockH>
 800eea2:	f001 f8f1 	bl	8010088 <LCD_UpdateColorIndices>
 800eea6:	f001 fd3f 	bl	8010928 <LCD_SetClipRectMax>
 800eeaa:	4630      	mov	r0, r6
 800eeac:	b003      	add	sp, #12
 800eeae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeb0:	20000110 	.word	0x20000110

0800eeb4 <GUI_MEMDEV_CopyToLCDAt>:
 800eeb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eeb8:	460c      	mov	r4, r1
 800eeba:	b085      	sub	sp, #20
 800eebc:	4615      	mov	r5, r2
 800eebe:	4606      	mov	r6, r0
 800eec0:	2800      	cmp	r0, #0
 800eec2:	d041      	beq.n	800ef48 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800eec4:	2000      	movs	r0, #0
 800eec6:	f002 ffdf 	bl	8011e88 <GUI_SetDrawMode>
 800eeca:	4b21      	ldr	r3, [pc, #132]	; (800ef50 <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4607      	mov	r7, r0
 800eed0:	4630      	mov	r0, r6
 800eed2:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 800eed6:	f004 fd11 	bl	80138fc <GUI_ALLOC_LockH>
 800eeda:	6803      	ldr	r3, [r0, #0]
 800eedc:	9001      	str	r0, [sp, #4]
 800eede:	6998      	ldr	r0, [r3, #24]
 800eee0:	f003 f81e 	bl	8011f20 <GUI_SelectLayer>
 800eee4:	4b1b      	ldr	r3, [pc, #108]	; (800ef54 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 800eee6:	429c      	cmp	r4, r3
 800eee8:	9b01      	ldr	r3, [sp, #4]
 800eeea:	bf04      	itt	eq
 800eeec:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 800eef0:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 800eef4:	891a      	ldrh	r2, [r3, #8]
 800eef6:	895b      	ldrh	r3, [r3, #10]
 800eef8:	f8ad 4008 	strh.w	r4, [sp, #8]
 800eefc:	3a01      	subs	r2, #1
 800eefe:	3b01      	subs	r3, #1
 800ef00:	4422      	add	r2, r4
 800ef02:	442b      	add	r3, r5
 800ef04:	4681      	mov	r9, r0
 800ef06:	f8ad 200c 	strh.w	r2, [sp, #12]
 800ef0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ef0e:	f8ad 500a 	strh.w	r5, [sp, #10]
 800ef12:	f7fe fee7 	bl	800dce4 <WM_Activate>
 800ef16:	a801      	add	r0, sp, #4
 800ef18:	f004 fcfe 	bl	8013918 <GUI_ALLOC_UnlockH>
 800ef1c:	a802      	add	r0, sp, #8
 800ef1e:	f7fe fcff 	bl	800d920 <WM__InitIVRSearch>
 800ef22:	b948      	cbnz	r0, 800ef38 <GUI_MEMDEV_CopyToLCDAt+0x84>
 800ef24:	4648      	mov	r0, r9
 800ef26:	f002 fffb 	bl	8011f20 <GUI_SelectLayer>
 800ef2a:	4640      	mov	r0, r8
 800ef2c:	f7ff ff9c 	bl	800ee68 <GUI_MEMDEV_Select>
 800ef30:	4638      	mov	r0, r7
 800ef32:	f002 ffa9 	bl	8011e88 <GUI_SetDrawMode>
 800ef36:	e007      	b.n	800ef48 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800ef38:	4630      	mov	r0, r6
 800ef3a:	4621      	mov	r1, r4
 800ef3c:	462a      	mov	r2, r5
 800ef3e:	f006 fc83 	bl	8015848 <GUI_MEMDEV__WriteToActiveOpaque>
 800ef42:	f7fe fc2b 	bl	800d79c <WM__GetNextIVR>
 800ef46:	e7ec      	b.n	800ef22 <GUI_MEMDEV_CopyToLCDAt+0x6e>
 800ef48:	b005      	add	sp, #20
 800ef4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef4e:	bf00      	nop
 800ef50:	20000110 	.word	0x20000110
 800ef54:	fffff001 	.word	0xfffff001

0800ef58 <GUI_MEMDEV_CopyToLCD>:
 800ef58:	4901      	ldr	r1, [pc, #4]	; (800ef60 <GUI_MEMDEV_CopyToLCD+0x8>)
 800ef5a:	460a      	mov	r2, r1
 800ef5c:	f7ff bfaa 	b.w	800eeb4 <GUI_MEMDEV_CopyToLCDAt>
 800ef60:	fffff001 	.word	0xfffff001

0800ef64 <_SetPhysRAMAddr>:
 800ef64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ef68:	4604      	mov	r4, r0
 800ef6a:	460e      	mov	r6, r1
 800ef6c:	4615      	mov	r5, r2
 800ef6e:	b15b      	cbz	r3, 800ef88 <_SetPhysRAMAddr+0x24>
 800ef70:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800ef74:	4798      	blx	r3
 800ef76:	4631      	mov	r1, r6
 800ef78:	4607      	mov	r7, r0
 800ef7a:	462a      	mov	r2, r5
 800ef7c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800ef80:	4620      	mov	r0, r4
 800ef82:	4798      	blx	r3
 800ef84:	463e      	mov	r6, r7
 800ef86:	4605      	mov	r5, r0
 800ef88:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	212a      	movs	r1, #42	; 0x2a
 800ef90:	4798      	blx	r3
 800ef92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ef94:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ef98:	4431      	add	r1, r6
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800efa0:	4798      	blx	r3
 800efa2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800efa4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800efa8:	b2b7      	uxth	r7, r6
 800efaa:	4439      	add	r1, r7
 800efac:	4620      	mov	r0, r4
 800efae:	b2c9      	uxtb	r1, r1
 800efb0:	4798      	blx	r3
 800efb2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800efb4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800efb8:	4431      	add	r1, r6
 800efba:	4620      	mov	r0, r4
 800efbc:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800efc0:	4798      	blx	r3
 800efc2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800efc4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800efc8:	4439      	add	r1, r7
 800efca:	4620      	mov	r0, r4
 800efcc:	b2c9      	uxtb	r1, r1
 800efce:	4798      	blx	r3
 800efd0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800efd4:	4620      	mov	r0, r4
 800efd6:	212b      	movs	r1, #43	; 0x2b
 800efd8:	4798      	blx	r3
 800efda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800efdc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800efe0:	4429      	add	r1, r5
 800efe2:	4620      	mov	r0, r4
 800efe4:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800efe8:	4798      	blx	r3
 800efea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800efec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800eff0:	b2ae      	uxth	r6, r5
 800eff2:	4431      	add	r1, r6
 800eff4:	4620      	mov	r0, r4
 800eff6:	b2c9      	uxtb	r1, r1
 800eff8:	4798      	blx	r3
 800effa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800effc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f000:	4429      	add	r1, r5
 800f002:	4620      	mov	r0, r4
 800f004:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800f008:	4798      	blx	r3
 800f00a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f00c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f010:	4431      	add	r1, r6
 800f012:	4620      	mov	r0, r4
 800f014:	b2c9      	uxtb	r1, r1
 800f016:	4798      	blx	r3
 800f018:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800f01c:	4620      	mov	r0, r4
 800f01e:	212c      	movs	r1, #44	; 0x2c
 800f020:	4798      	blx	r3
 800f022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f024 <_SetRect>:
 800f024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f028:	4698      	mov	r8, r3
 800f02a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f02c:	9f08      	ldr	r7, [sp, #32]
 800f02e:	4604      	mov	r4, r0
 800f030:	4689      	mov	r9, r1
 800f032:	4615      	mov	r5, r2
 800f034:	2b00      	cmp	r3, #0
 800f036:	d064      	beq.n	800f102 <_SetRect+0xde>
 800f038:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800f03c:	4798      	blx	r3
 800f03e:	463a      	mov	r2, r7
 800f040:	4606      	mov	r6, r0
 800f042:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800f046:	4641      	mov	r1, r8
 800f048:	4620      	mov	r0, r4
 800f04a:	4798      	blx	r3
 800f04c:	462a      	mov	r2, r5
 800f04e:	4682      	mov	sl, r0
 800f050:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800f054:	4649      	mov	r1, r9
 800f056:	4620      	mov	r0, r4
 800f058:	4798      	blx	r3
 800f05a:	463a      	mov	r2, r7
 800f05c:	4605      	mov	r5, r0
 800f05e:	4641      	mov	r1, r8
 800f060:	4620      	mov	r0, r4
 800f062:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800f066:	4798      	blx	r3
 800f068:	45b2      	cmp	sl, r6
 800f06a:	4607      	mov	r7, r0
 800f06c:	db02      	blt.n	800f074 <_SetRect+0x50>
 800f06e:	4653      	mov	r3, sl
 800f070:	46b2      	mov	sl, r6
 800f072:	461e      	mov	r6, r3
 800f074:	42af      	cmp	r7, r5
 800f076:	db02      	blt.n	800f07e <_SetRect+0x5a>
 800f078:	463b      	mov	r3, r7
 800f07a:	462f      	mov	r7, r5
 800f07c:	461d      	mov	r5, r3
 800f07e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800f082:	4620      	mov	r0, r4
 800f084:	212a      	movs	r1, #42	; 0x2a
 800f086:	4798      	blx	r3
 800f088:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f08a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f08e:	4451      	add	r1, sl
 800f090:	4620      	mov	r0, r4
 800f092:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800f096:	4798      	blx	r3
 800f098:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f09a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f09e:	4451      	add	r1, sl
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	b2c9      	uxtb	r1, r1
 800f0a4:	4798      	blx	r3
 800f0a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f0a8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f0ac:	4431      	add	r1, r6
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800f0b4:	4798      	blx	r3
 800f0b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f0b8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f0bc:	4431      	add	r1, r6
 800f0be:	4620      	mov	r0, r4
 800f0c0:	b2c9      	uxtb	r1, r1
 800f0c2:	4798      	blx	r3
 800f0c4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	212b      	movs	r1, #43	; 0x2b
 800f0cc:	4798      	blx	r3
 800f0ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f0d0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f0d4:	4439      	add	r1, r7
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800f0dc:	4798      	blx	r3
 800f0de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f0e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f0e4:	4439      	add	r1, r7
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	b2c9      	uxtb	r1, r1
 800f0ea:	4798      	blx	r3
 800f0ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f0ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f0f2:	4429      	add	r1, r5
 800f0f4:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	4798      	blx	r3
 800f0fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f0fe:	4429      	add	r1, r5
 800f100:	e03f      	b.n	800f182 <_SetRect+0x15e>
 800f102:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800f106:	212a      	movs	r1, #42	; 0x2a
 800f108:	4798      	blx	r3
 800f10a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f10c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f110:	4449      	add	r1, r9
 800f112:	4620      	mov	r0, r4
 800f114:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800f118:	4798      	blx	r3
 800f11a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f11c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f120:	4449      	add	r1, r9
 800f122:	4620      	mov	r0, r4
 800f124:	b2c9      	uxtb	r1, r1
 800f126:	4798      	blx	r3
 800f128:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f12a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f12e:	4441      	add	r1, r8
 800f130:	4620      	mov	r0, r4
 800f132:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800f136:	4798      	blx	r3
 800f138:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f13a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f13e:	4441      	add	r1, r8
 800f140:	4620      	mov	r0, r4
 800f142:	b2c9      	uxtb	r1, r1
 800f144:	4798      	blx	r3
 800f146:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800f14a:	4620      	mov	r0, r4
 800f14c:	212b      	movs	r1, #43	; 0x2b
 800f14e:	4798      	blx	r3
 800f150:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f152:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f156:	4429      	add	r1, r5
 800f158:	4620      	mov	r0, r4
 800f15a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800f15e:	4798      	blx	r3
 800f160:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f162:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f166:	4429      	add	r1, r5
 800f168:	4620      	mov	r0, r4
 800f16a:	b2c9      	uxtb	r1, r1
 800f16c:	4798      	blx	r3
 800f16e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f170:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f174:	4439      	add	r1, r7
 800f176:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800f17a:	4620      	mov	r0, r4
 800f17c:	4798      	blx	r3
 800f17e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f180:	4439      	add	r1, r7
 800f182:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f186:	4620      	mov	r0, r4
 800f188:	b2c9      	uxtb	r1, r1
 800f18a:	4798      	blx	r3
 800f18c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800f190:	4620      	mov	r0, r4
 800f192:	212c      	movs	r1, #44	; 0x2c
 800f194:	4798      	blx	r3
 800f196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800f19c <_SetOrientation>:
 800f19c:	b513      	push	{r0, r1, r4, lr}
 800f19e:	4a0d      	ldr	r2, [pc, #52]	; (800f1d4 <_SetOrientation+0x38>)
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	6851      	ldr	r1, [r2, #4]
 800f1a4:	6810      	ldr	r0, [r2, #0]
 800f1a6:	466b      	mov	r3, sp
 800f1a8:	c303      	stmia	r3!, {r0, r1}
 800f1aa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	2136      	movs	r1, #54	; 0x36
 800f1b2:	4798      	blx	r3
 800f1b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1b6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800f1b8:	aa02      	add	r2, sp, #8
 800f1ba:	4413      	add	r3, r2
 800f1bc:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800f1c0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800f1c4:	4319      	orrs	r1, r3
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f1cc:	b289      	uxth	r1, r1
 800f1ce:	4798      	blx	r3
 800f1d0:	b002      	add	sp, #8
 800f1d2:	bd10      	pop	{r4, pc}
 800f1d4:	0801b409 	.word	0x0801b409

0800f1d8 <_ReadPixel_16bpp_B8>:
 800f1d8:	b513      	push	{r0, r1, r4, lr}
 800f1da:	4604      	mov	r4, r0
 800f1dc:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800f1e0:	202e      	movs	r0, #46	; 0x2e
 800f1e2:	4798      	blx	r3
 800f1e4:	6a21      	ldr	r1, [r4, #32]
 800f1e6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800f1ea:	4668      	mov	r0, sp
 800f1ec:	3103      	adds	r1, #3
 800f1ee:	4798      	blx	r3
 800f1f0:	6a22      	ldr	r2, [r4, #32]
 800f1f2:	ab00      	add	r3, sp, #0
 800f1f4:	4413      	add	r3, r2
 800f1f6:	f81d 2002 	ldrb.w	r2, [sp, r2]
 800f1fa:	7859      	ldrb	r1, [r3, #1]
 800f1fc:	7898      	ldrb	r0, [r3, #2]
 800f1fe:	08d2      	lsrs	r2, r2, #3
 800f200:	0889      	lsrs	r1, r1, #2
 800f202:	02d2      	lsls	r2, r2, #11
 800f204:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 800f208:	ea42 00d0 	orr.w	r0, r2, r0, lsr #3
 800f20c:	b002      	add	sp, #8
 800f20e:	bd10      	pop	{r4, pc}

0800f210 <_ReadPixel_16bpp_B16_I>:
 800f210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f212:	4604      	mov	r4, r0
 800f214:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800f218:	202e      	movs	r0, #46	; 0x2e
 800f21a:	4798      	blx	r3
 800f21c:	6a21      	ldr	r1, [r4, #32]
 800f21e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800f222:	4668      	mov	r0, sp
 800f224:	3102      	adds	r1, #2
 800f226:	4798      	blx	r3
 800f228:	6a23      	ldr	r3, [r4, #32]
 800f22a:	a900      	add	r1, sp, #0
 800f22c:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 800f230:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 800f234:	8852      	ldrh	r2, [r2, #2]
 800f236:	f402 417c 	and.w	r1, r2, #64512	; 0xfc00
 800f23a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800f23e:	ea42 1251 	orr.w	r2, r2, r1, lsr #5
 800f242:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800f246:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800f24a:	b004      	add	sp, #16
 800f24c:	bd10      	pop	{r4, pc}

0800f24e <_SetReg_B8>:
 800f24e:	b538      	push	{r3, r4, r5, lr}
 800f250:	4604      	mov	r4, r0
 800f252:	460d      	mov	r5, r1
 800f254:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800f258:	0a08      	lsrs	r0, r1, #8
 800f25a:	4798      	blx	r3
 800f25c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800f260:	b2e8      	uxtb	r0, r5
 800f262:	4798      	blx	r3
 800f264:	bd38      	pop	{r3, r4, r5, pc}

0800f266 <_SetReg_B16>:
 800f266:	b508      	push	{r3, lr}
 800f268:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800f26c:	4608      	mov	r0, r1
 800f26e:	4798      	blx	r3
 800f270:	bd08      	pop	{r3, pc}

0800f272 <_WritePara_B8>:
 800f272:	b508      	push	{r3, lr}
 800f274:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800f278:	b2c8      	uxtb	r0, r1
 800f27a:	4798      	blx	r3
 800f27c:	bd08      	pop	{r3, pc}

0800f27e <_WritePara_B16>:
 800f27e:	b508      	push	{r3, lr}
 800f280:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800f284:	4608      	mov	r0, r1
 800f286:	4798      	blx	r3
 800f288:	bd08      	pop	{r3, pc}
	...

0800f28c <_SetInterface>:
 800f28c:	2908      	cmp	r1, #8
 800f28e:	d002      	beq.n	800f296 <_SetInterface+0xa>
 800f290:	2910      	cmp	r1, #16
 800f292:	d005      	beq.n	800f2a0 <_SetInterface+0x14>
 800f294:	4770      	bx	lr
 800f296:	4b06      	ldr	r3, [pc, #24]	; (800f2b0 <_SetInterface+0x24>)
 800f298:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800f29c:	4b05      	ldr	r3, [pc, #20]	; (800f2b4 <_SetInterface+0x28>)
 800f29e:	e003      	b.n	800f2a8 <_SetInterface+0x1c>
 800f2a0:	4b05      	ldr	r3, [pc, #20]	; (800f2b8 <_SetInterface+0x2c>)
 800f2a2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800f2a6:	4b05      	ldr	r3, [pc, #20]	; (800f2bc <_SetInterface+0x30>)
 800f2a8:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 800f2ac:	4770      	bx	lr
 800f2ae:	bf00      	nop
 800f2b0:	0800f24f 	.word	0x0800f24f
 800f2b4:	0800f273 	.word	0x0800f273
 800f2b8:	0800f267 	.word	0x0800f267
 800f2bc:	0800f27f 	.word	0x0800f27f

0800f2c0 <_ReadRect_16bpp_B8>:
 800f2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2c2:	b085      	sub	sp, #20
 800f2c4:	6884      	ldr	r4, [r0, #8]
 800f2c6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800f2c8:	9700      	str	r7, [sp, #0]
 800f2ca:	1abd      	subs	r5, r7, r2
 800f2cc:	1a58      	subs	r0, r3, r1
 800f2ce:	3501      	adds	r5, #1
 800f2d0:	fb00 5505 	mla	r5, r0, r5, r5
 800f2d4:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800f2d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f2da:	4620      	mov	r0, r4
 800f2dc:	47b8      	blx	r7
 800f2de:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800f2e2:	202e      	movs	r0, #46	; 0x2e
 800f2e4:	4798      	blx	r3
 800f2e6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800f2ea:	6a21      	ldr	r1, [r4, #32]
 800f2ec:	a802      	add	r0, sp, #8
 800f2ee:	4798      	blx	r3
 800f2f0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800f2f4:	a802      	add	r0, sp, #8
 800f2f6:	2103      	movs	r1, #3
 800f2f8:	4798      	blx	r3
 800f2fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f2fe:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800f302:	08db      	lsrs	r3, r3, #3
 800f304:	0892      	lsrs	r2, r2, #2
 800f306:	02db      	lsls	r3, r3, #11
 800f308:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800f30c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800f310:	3d01      	subs	r5, #1
 800f312:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 800f316:	f826 3b02 	strh.w	r3, [r6], #2
 800f31a:	d1e9      	bne.n	800f2f0 <_ReadRect_16bpp_B8+0x30>
 800f31c:	b005      	add	sp, #20
 800f31e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f320 <_ReadRect_16bpp_B16_I>:
 800f320:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f322:	b087      	sub	sp, #28
 800f324:	6884      	ldr	r4, [r0, #8]
 800f326:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800f328:	9700      	str	r7, [sp, #0]
 800f32a:	1abd      	subs	r5, r7, r2
 800f32c:	1a58      	subs	r0, r3, r1
 800f32e:	3501      	adds	r5, #1
 800f330:	fb00 5505 	mla	r5, r0, r5, r5
 800f334:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800f338:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800f33a:	4620      	mov	r0, r4
 800f33c:	47b8      	blx	r7
 800f33e:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800f342:	202e      	movs	r0, #46	; 0x2e
 800f344:	4798      	blx	r3
 800f346:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800f34a:	6a21      	ldr	r1, [r4, #32]
 800f34c:	a802      	add	r0, sp, #8
 800f34e:	4798      	blx	r3
 800f350:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800f354:	a802      	add	r0, sp, #8
 800f356:	2102      	movs	r1, #2
 800f358:	4798      	blx	r3
 800f35a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f35e:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 800f362:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800f366:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 800f36a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800f36e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 800f372:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f376:	3d01      	subs	r5, #1
 800f378:	f826 3b02 	strh.w	r3, [r6], #2
 800f37c:	d1e8      	bne.n	800f350 <_ReadRect_16bpp_B16_I+0x30>
 800f37e:	b007      	add	sp, #28
 800f380:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800f384 <GUIDRV_FlexColor_SetFunc66720>:
 800f384:	b510      	push	{r4, lr}
 800f386:	4604      	mov	r4, r0
 800f388:	f000 fda6 	bl	800fed8 <GUIDRV_FlexColor__InitOnce>
 800f38c:	68a3      	ldr	r3, [r4, #8]
 800f38e:	4a12      	ldr	r2, [pc, #72]	; (800f3d8 <GUIDRV_FlexColor_SetFunc66720+0x54>)
 800f390:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800f394:	4a11      	ldr	r2, [pc, #68]	; (800f3dc <GUIDRV_FlexColor_SetFunc66720+0x58>)
 800f396:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800f39a:	4a11      	ldr	r2, [pc, #68]	; (800f3e0 <GUIDRV_FlexColor_SetFunc66720+0x5c>)
 800f39c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800f3a0:	4a10      	ldr	r2, [pc, #64]	; (800f3e4 <GUIDRV_FlexColor_SetFunc66720+0x60>)
 800f3a2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800f3ac:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800f3b0:	4a0d      	ldr	r2, [pc, #52]	; (800f3e8 <GUIDRV_FlexColor_SetFunc66720+0x64>)
 800f3b2:	490e      	ldr	r1, [pc, #56]	; (800f3ec <GUIDRV_FlexColor_SetFunc66720+0x68>)
 800f3b4:	6812      	ldr	r2, [r2, #0]
 800f3b6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800f3ba:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800f3bc:	6809      	ldr	r1, [r1, #0]
 800f3be:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 800f3c2:	f022 0203 	bic.w	r2, r2, #3
 800f3c6:	490a      	ldr	r1, [pc, #40]	; (800f3f0 <GUIDRV_FlexColor_SetFunc66720+0x6c>)
 800f3c8:	84da      	strh	r2, [r3, #38]	; 0x26
 800f3ca:	4a0a      	ldr	r2, [pc, #40]	; (800f3f4 <GUIDRV_FlexColor_SetFunc66720+0x70>)
 800f3cc:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 800f3d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800f3d4:	bd10      	pop	{r4, pc}
 800f3d6:	bf00      	nop
 800f3d8:	0800ef65 	.word	0x0800ef65
 800f3dc:	0800f025 	.word	0x0800f025
 800f3e0:	0800f19d 	.word	0x0800f19d
 800f3e4:	0800f1d9 	.word	0x0800f1d9
 800f3e8:	200000f0 	.word	0x200000f0
 800f3ec:	200000ec 	.word	0x200000ec
 800f3f0:	0800f2c1 	.word	0x0800f2c1
 800f3f4:	0800f28d 	.word	0x0800f28d

0800f3f8 <_ReadData>:
 800f3f8:	b508      	push	{r3, lr}
 800f3fa:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 800f3fe:	4798      	blx	r3
 800f400:	bd08      	pop	{r3, pc}

0800f402 <_WriteData>:
 800f402:	b508      	push	{r3, lr}
 800f404:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800f408:	b288      	uxth	r0, r1
 800f40a:	4798      	blx	r3
 800f40c:	bd08      	pop	{r3, pc}
	...

0800f410 <_FillRect>:
 800f410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f414:	4f3d      	ldr	r7, [pc, #244]	; (800f50c <_FillRect+0xfc>)
 800f416:	6884      	ldr	r4, [r0, #8]
 800f418:	4682      	mov	sl, r0
 800f41a:	6838      	ldr	r0, [r7, #0]
 800f41c:	7c00      	ldrb	r0, [r0, #16]
 800f41e:	f010 0f01 	tst.w	r0, #1
 800f422:	b085      	sub	sp, #20
 800f424:	460e      	mov	r6, r1
 800f426:	4615      	mov	r5, r2
 800f428:	4698      	mov	r8, r3
 800f42a:	ebc1 0903 	rsb	r9, r1, r3
 800f42e:	d045      	beq.n	800f4bc <_FillRect+0xac>
 800f430:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 800f434:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f436:	4285      	cmp	r5, r0
 800f438:	dc65      	bgt.n	800f506 <_FillRect+0xf6>
 800f43a:	f8d4 c0c4 	ldr.w	ip, [r4, #196]	; 0xc4
 800f43e:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800f440:	f1bc 0f00 	cmp.w	ip, #0
 800f444:	d101      	bne.n	800f44a <_FillRect+0x3a>
 800f446:	46b4      	mov	ip, r6
 800f448:	e007      	b.n	800f45a <_FillRect+0x4a>
 800f44a:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800f44e:	4650      	mov	r0, sl
 800f450:	4631      	mov	r1, r6
 800f452:	462a      	mov	r2, r5
 800f454:	4643      	mov	r3, r8
 800f456:	47e0      	blx	ip
 800f458:	e011      	b.n	800f47e <_FillRect+0x6e>
 800f45a:	45c4      	cmp	ip, r8
 800f45c:	dc0e      	bgt.n	800f47c <_FillRect+0x6c>
 800f45e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800f462:	f8cd c00c 	str.w	ip, [sp, #12]
 800f466:	4661      	mov	r1, ip
 800f468:	4650      	mov	r0, sl
 800f46a:	462a      	mov	r2, r5
 800f46c:	4798      	blx	r3
 800f46e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800f472:	f827 0b02 	strh.w	r0, [r7], #2
 800f476:	f10c 0c01 	add.w	ip, ip, #1
 800f47a:	e7ee      	b.n	800f45a <_FillRect+0x4a>
 800f47c:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800f47e:	1ebb      	subs	r3, r7, #2
 800f480:	f109 0c01 	add.w	ip, r9, #1
 800f484:	445f      	add	r7, fp
 800f486:	42bb      	cmp	r3, r7
 800f488:	d005      	beq.n	800f496 <_FillRect+0x86>
 800f48a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800f48c:	8859      	ldrh	r1, [r3, #2]
 800f48e:	404a      	eors	r2, r1
 800f490:	f823 2f02 	strh.w	r2, [r3, #2]!
 800f494:	e7f7      	b.n	800f486 <_FillRect+0x76>
 800f496:	9500      	str	r5, [sp, #0]
 800f498:	462a      	mov	r2, r5
 800f49a:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800f49e:	f8cd c00c 	str.w	ip, [sp, #12]
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	4631      	mov	r1, r6
 800f4a6:	4643      	mov	r3, r8
 800f4a8:	47b8      	blx	r7
 800f4aa:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800f4ae:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800f4b2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f4b4:	4661      	mov	r1, ip
 800f4b6:	4798      	blx	r3
 800f4b8:	3501      	adds	r5, #1
 800f4ba:	e7bb      	b.n	800f434 <_FillRect+0x24>
 800f4bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f4be:	9000      	str	r0, [sp, #0]
 800f4c0:	1a85      	subs	r5, r0, r2
 800f4c2:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	47b0      	blx	r6
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	6ea7      	ldr	r7, [r4, #104]	; 0x68
 800f4ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4d0:	f109 0901 	add.w	r9, r9, #1
 800f4d4:	f8d3 8000 	ldr.w	r8, [r3]
 800f4d8:	fb05 9509 	mla	r5, r5, r9, r9
 800f4dc:	2301      	movs	r3, #1
 800f4de:	b195      	cbz	r5, 800f506 <_FillRect+0xf6>
 800f4e0:	2dfa      	cmp	r5, #250	; 0xfa
 800f4e2:	bf34      	ite	cc
 800f4e4:	462e      	movcc	r6, r5
 800f4e6:	26fa      	movcs	r6, #250	; 0xfa
 800f4e8:	b12b      	cbz	r3, 800f4f6 <_FillRect+0xe6>
 800f4ea:	4638      	mov	r0, r7
 800f4ec:	fa1f f188 	uxth.w	r1, r8
 800f4f0:	4632      	mov	r2, r6
 800f4f2:	f001 fae4 	bl	8010abe <GUI__memset16>
 800f4f6:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800f4fa:	4638      	mov	r0, r7
 800f4fc:	4631      	mov	r1, r6
 800f4fe:	4798      	blx	r3
 800f500:	1bad      	subs	r5, r5, r6
 800f502:	2300      	movs	r3, #0
 800f504:	e7eb      	b.n	800f4de <_FillRect+0xce>
 800f506:	b005      	add	sp, #20
 800f508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f50c:	20000110 	.word	0x20000110

0800f510 <_DrawBitmap>:
 800f510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f514:	b08d      	sub	sp, #52	; 0x34
 800f516:	6885      	ldr	r5, [r0, #8]
 800f518:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800f51a:	9305      	str	r3, [sp, #20]
 800f51c:	1e7b      	subs	r3, r7, #1
 800f51e:	2b01      	cmp	r3, #1
 800f520:	9009      	str	r0, [sp, #36]	; 0x24
 800f522:	9108      	str	r1, [sp, #32]
 800f524:	920a      	str	r2, [sp, #40]	; 0x28
 800f526:	950b      	str	r5, [sp, #44]	; 0x2c
 800f528:	d903      	bls.n	800f532 <_DrawBitmap+0x22>
 800f52a:	2f04      	cmp	r7, #4
 800f52c:	d001      	beq.n	800f532 <_DrawBitmap+0x22>
 800f52e:	2f08      	cmp	r7, #8
 800f530:	d106      	bne.n	800f540 <_DrawBitmap+0x30>
 800f532:	4b8f      	ldr	r3, [pc, #572]	; (800f770 <_DrawBitmap+0x260>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	7c1b      	ldrb	r3, [r3, #16]
 800f538:	f003 0303 	and.w	r3, r3, #3
 800f53c:	2b02      	cmp	r3, #2
 800f53e:	d010      	beq.n	800f562 <_DrawBitmap+0x52>
 800f540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f542:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800f544:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f546:	9908      	ldr	r1, [sp, #32]
 800f548:	9b05      	ldr	r3, [sp, #20]
 800f54a:	443a      	add	r2, r7
 800f54c:	4429      	add	r1, r5
 800f54e:	3a01      	subs	r2, #1
 800f550:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f552:	9200      	str	r2, [sp, #0]
 800f554:	440b      	add	r3, r1
 800f556:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 800f55a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f55c:	4628      	mov	r0, r5
 800f55e:	3b01      	subs	r3, #1
 800f560:	47a0      	blx	r4
 800f562:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800f566:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800f568:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800f56a:	ebc7 030b 	rsb	r3, r7, fp
 800f56e:	42ab      	cmp	r3, r5
 800f570:	f280 8251 	bge.w	800fa16 <_DrawBitmap+0x506>
 800f574:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800f576:	1e7b      	subs	r3, r7, #1
 800f578:	2b0f      	cmp	r3, #15
 800f57a:	f200 8245 	bhi.w	800fa08 <_DrawBitmap+0x4f8>
 800f57e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f582:	0010      	.short	0x0010
 800f584:	024300b7 	.word	0x024300b7
 800f588:	02430140 	.word	0x02430140
 800f58c:	02430243 	.word	0x02430243
 800f590:	024301d7 	.word	0x024301d7
 800f594:	02430243 	.word	0x02430243
 800f598:	02430243 	.word	0x02430243
 800f59c:	02430243 	.word	0x02430243
 800f5a0:	023d      	.short	0x023d
 800f5a2:	4b73      	ldr	r3, [pc, #460]	; (800f770 <_DrawBitmap+0x260>)
 800f5a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	68ac      	ldr	r4, [r5, #8]
 800f5aa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f5ac:	7c1b      	ldrb	r3, [r3, #16]
 800f5ae:	682f      	ldr	r7, [r5, #0]
 800f5b0:	686d      	ldr	r5, [r5, #4]
 800f5b2:	9507      	str	r5, [sp, #28]
 800f5b4:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f5b8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f5ba:	f003 0303 	and.w	r3, r3, #3
 800f5be:	2b02      	cmp	r3, #2
 800f5c0:	44aa      	add	sl, r5
 800f5c2:	d01b      	beq.n	800f5fc <_DrawBitmap+0xec>
 800f5c4:	2b03      	cmp	r3, #3
 800f5c6:	d06e      	beq.n	800f6a6 <_DrawBitmap+0x196>
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d06c      	beq.n	800f6a6 <_DrawBitmap+0x196>
 800f5cc:	9e05      	ldr	r6, [sp, #20]
 800f5ce:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 800f5d2:	f898 1000 	ldrb.w	r1, [r8]
 800f5d6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800f5da:	2280      	movs	r2, #128	; 0x80
 800f5dc:	412a      	asrs	r2, r5
 800f5de:	4211      	tst	r1, r2
 800f5e0:	bf16      	itet	ne
 800f5e2:	9907      	ldrne	r1, [sp, #28]
 800f5e4:	b2b8      	uxtheq	r0, r7
 800f5e6:	b288      	uxthne	r0, r1
 800f5e8:	3501      	adds	r5, #1
 800f5ea:	4798      	blx	r3
 800f5ec:	2d08      	cmp	r5, #8
 800f5ee:	bf04      	itt	eq
 800f5f0:	f108 0801 	addeq.w	r8, r8, #1
 800f5f4:	2500      	moveq	r5, #0
 800f5f6:	3e01      	subs	r6, #1
 800f5f8:	d1eb      	bne.n	800f5d2 <_DrawBitmap+0xc2>
 800f5fa:	e205      	b.n	800fa08 <_DrawBitmap+0x4f8>
 800f5fc:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800f5fe:	9506      	str	r5, [sp, #24]
 800f600:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800f604:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800f608:	f8cd a00c 	str.w	sl, [sp, #12]
 800f60c:	2500      	movs	r5, #0
 800f60e:	4656      	mov	r6, sl
 800f610:	462b      	mov	r3, r5
 800f612:	9f06      	ldr	r7, [sp, #24]
 800f614:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800f618:	783a      	ldrb	r2, [r7, #0]
 800f61a:	fa4c fc08 	asr.w	ip, ip, r8
 800f61e:	ea12 0c0c 	ands.w	ip, r2, ip
 800f622:	d00b      	beq.n	800f63c <_DrawBitmap+0x12c>
 800f624:	b913      	cbnz	r3, 800f62c <_DrawBitmap+0x11c>
 800f626:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800f62a:	9603      	str	r6, [sp, #12]
 800f62c:	9f07      	ldr	r7, [sp, #28]
 800f62e:	f8a9 7000 	strh.w	r7, [r9]
 800f632:	3501      	adds	r5, #1
 800f634:	f109 0902 	add.w	r9, r9, #2
 800f638:	2301      	movs	r3, #1
 800f63a:	e017      	b.n	800f66c <_DrawBitmap+0x15c>
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	d114      	bne.n	800f66a <_DrawBitmap+0x15a>
 800f640:	f8cd b000 	str.w	fp, [sp]
 800f644:	f8cd c010 	str.w	ip, [sp, #16]
 800f648:	4620      	mov	r0, r4
 800f64a:	9903      	ldr	r1, [sp, #12]
 800f64c:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800f650:	465a      	mov	r2, fp
 800f652:	1e73      	subs	r3, r6, #1
 800f654:	47b8      	blx	r7
 800f656:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800f65a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f65c:	4629      	mov	r1, r5
 800f65e:	4798      	blx	r3
 800f660:	f8dd c010 	ldr.w	ip, [sp, #16]
 800f664:	4665      	mov	r5, ip
 800f666:	4663      	mov	r3, ip
 800f668:	e000      	b.n	800f66c <_DrawBitmap+0x15c>
 800f66a:	4663      	mov	r3, ip
 800f66c:	f108 0801 	add.w	r8, r8, #1
 800f670:	f1b8 0f08 	cmp.w	r8, #8
 800f674:	f106 0601 	add.w	r6, r6, #1
 800f678:	d104      	bne.n	800f684 <_DrawBitmap+0x174>
 800f67a:	9f06      	ldr	r7, [sp, #24]
 800f67c:	3701      	adds	r7, #1
 800f67e:	9706      	str	r7, [sp, #24]
 800f680:	f04f 0800 	mov.w	r8, #0
 800f684:	9a05      	ldr	r2, [sp, #20]
 800f686:	4452      	add	r2, sl
 800f688:	42b2      	cmp	r2, r6
 800f68a:	d1c2      	bne.n	800f612 <_DrawBitmap+0x102>
 800f68c:	9f05      	ldr	r7, [sp, #20]
 800f68e:	1e7b      	subs	r3, r7, #1
 800f690:	4453      	add	r3, sl
 800f692:	2d00      	cmp	r5, #0
 800f694:	f000 81b8 	beq.w	800fa08 <_DrawBitmap+0x4f8>
 800f698:	f8cd b000 	str.w	fp, [sp]
 800f69c:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800f6a0:	9903      	ldr	r1, [sp, #12]
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	e13d      	b.n	800f922 <_DrawBitmap+0x412>
 800f6a6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f6aa:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800f6ac:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800f6ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f6b2:	782a      	ldrb	r2, [r5, #0]
 800f6b4:	2380      	movs	r3, #128	; 0x80
 800f6b6:	4133      	asrs	r3, r6
 800f6b8:	44d1      	add	r9, sl
 800f6ba:	421a      	tst	r2, r3
 800f6bc:	ebc8 0909 	rsb	r9, r8, r9
 800f6c0:	d00d      	beq.n	800f6de <_DrawBitmap+0x1ce>
 800f6c2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800f6c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6c8:	4649      	mov	r1, r9
 800f6ca:	465a      	mov	r2, fp
 800f6cc:	4798      	blx	r3
 800f6ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f6d0:	f8d4 70f0 	ldr.w	r7, [r4, #240]	; 0xf0
 800f6d4:	4043      	eors	r3, r0
 800f6d6:	4649      	mov	r1, r9
 800f6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6da:	465a      	mov	r2, fp
 800f6dc:	47b8      	blx	r7
 800f6de:	3601      	adds	r6, #1
 800f6e0:	2e08      	cmp	r6, #8
 800f6e2:	bf04      	itt	eq
 800f6e4:	3501      	addeq	r5, #1
 800f6e6:	2600      	moveq	r6, #0
 800f6e8:	f1b8 0801 	subs.w	r8, r8, #1
 800f6ec:	d1df      	bne.n	800f6ae <_DrawBitmap+0x19e>
 800f6ee:	e18b      	b.n	800fa08 <_DrawBitmap+0x4f8>
 800f6f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f6f2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800f6f4:	68ac      	ldr	r4, [r5, #8]
 800f6f6:	2f00      	cmp	r7, #0
 800f6f8:	f000 8186 	beq.w	800fa08 <_DrawBitmap+0x4f8>
 800f6fc:	4b1c      	ldr	r3, [pc, #112]	; (800f770 <_DrawBitmap+0x260>)
 800f6fe:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	f895 a000 	ldrb.w	sl, [r5]
 800f706:	7c1b      	ldrb	r3, [r3, #16]
 800f708:	f013 0303 	ands.w	r3, r3, #3
 800f70c:	d011      	beq.n	800f732 <_DrawBitmap+0x222>
 800f70e:	2b02      	cmp	r3, #2
 800f710:	f040 817a 	bne.w	800fa08 <_DrawBitmap+0x4f8>
 800f714:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f716:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f71a:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800f71c:	9703      	str	r7, [sp, #12]
 800f71e:	44a9      	add	r9, r5
 800f720:	46a8      	mov	r8, r5
 800f722:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800f724:	9507      	str	r5, [sp, #28]
 800f726:	2500      	movs	r5, #0
 800f728:	f8cd 9018 	str.w	r9, [sp, #24]
 800f72c:	464e      	mov	r6, r9
 800f72e:	462b      	mov	r3, r5
 800f730:	e040      	b.n	800f7b4 <_DrawBitmap+0x2a4>
 800f732:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f734:	9e05      	ldr	r6, [sp, #20]
 800f736:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800f738:	f1c5 0303 	rsb	r3, r5, #3
 800f73c:	005b      	lsls	r3, r3, #1
 800f73e:	f1c3 0206 	rsb	r2, r3, #6
 800f742:	21c0      	movs	r1, #192	; 0xc0
 800f744:	fa41 f202 	asr.w	r2, r1, r2
 800f748:	ea02 020a 	and.w	r2, r2, sl
 800f74c:	40da      	lsrs	r2, r3
 800f74e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f750:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800f754:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 800f758:	3501      	adds	r5, #1
 800f75a:	4798      	blx	r3
 800f75c:	2d04      	cmp	r5, #4
 800f75e:	d103      	bne.n	800f768 <_DrawBitmap+0x258>
 800f760:	f897 a001 	ldrb.w	sl, [r7, #1]
 800f764:	2500      	movs	r5, #0
 800f766:	3701      	adds	r7, #1
 800f768:	3e01      	subs	r6, #1
 800f76a:	d1e5      	bne.n	800f738 <_DrawBitmap+0x228>
 800f76c:	e14c      	b.n	800fa08 <_DrawBitmap+0x4f8>
 800f76e:	bf00      	nop
 800f770:	20000110 	.word	0x20000110
 800f774:	b913      	cbnz	r3, 800f77c <_DrawBitmap+0x26c>
 800f776:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800f778:	9703      	str	r7, [sp, #12]
 800f77a:	9606      	str	r6, [sp, #24]
 800f77c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800f77e:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800f782:	9f03      	ldr	r7, [sp, #12]
 800f784:	803b      	strh	r3, [r7, #0]
 800f786:	3702      	adds	r7, #2
 800f788:	3501      	adds	r5, #1
 800f78a:	9703      	str	r7, [sp, #12]
 800f78c:	2301      	movs	r3, #1
 800f78e:	f108 0801 	add.w	r8, r8, #1
 800f792:	f1b8 0f04 	cmp.w	r8, #4
 800f796:	f106 0601 	add.w	r6, r6, #1
 800f79a:	d106      	bne.n	800f7aa <_DrawBitmap+0x29a>
 800f79c:	9f07      	ldr	r7, [sp, #28]
 800f79e:	f897 a001 	ldrb.w	sl, [r7, #1]
 800f7a2:	3701      	adds	r7, #1
 800f7a4:	9707      	str	r7, [sp, #28]
 800f7a6:	f04f 0800 	mov.w	r8, #0
 800f7aa:	9a05      	ldr	r2, [sp, #20]
 800f7ac:	444a      	add	r2, r9
 800f7ae:	42b2      	cmp	r2, r6
 800f7b0:	f000 80ac 	beq.w	800f90c <_DrawBitmap+0x3fc>
 800f7b4:	f1c8 0203 	rsb	r2, r8, #3
 800f7b8:	0052      	lsls	r2, r2, #1
 800f7ba:	f1c2 0106 	rsb	r1, r2, #6
 800f7be:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 800f7c2:	fa4c fc01 	asr.w	ip, ip, r1
 800f7c6:	ea0c 0c0a 	and.w	ip, ip, sl
 800f7ca:	fa3c fc02 	lsrs.w	ip, ip, r2
 800f7ce:	d1d1      	bne.n	800f774 <_DrawBitmap+0x264>
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d114      	bne.n	800f7fe <_DrawBitmap+0x2ee>
 800f7d4:	f8cd b000 	str.w	fp, [sp]
 800f7d8:	f8cd c010 	str.w	ip, [sp, #16]
 800f7dc:	4620      	mov	r0, r4
 800f7de:	9906      	ldr	r1, [sp, #24]
 800f7e0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800f7e4:	465a      	mov	r2, fp
 800f7e6:	1e73      	subs	r3, r6, #1
 800f7e8:	47b8      	blx	r7
 800f7ea:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800f7ee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f7f0:	4629      	mov	r1, r5
 800f7f2:	4798      	blx	r3
 800f7f4:	f8dd c010 	ldr.w	ip, [sp, #16]
 800f7f8:	4665      	mov	r5, ip
 800f7fa:	4663      	mov	r3, ip
 800f7fc:	e7c7      	b.n	800f78e <_DrawBitmap+0x27e>
 800f7fe:	4663      	mov	r3, ip
 800f800:	e7c5      	b.n	800f78e <_DrawBitmap+0x27e>
 800f802:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f804:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800f806:	68ac      	ldr	r4, [r5, #8]
 800f808:	2f00      	cmp	r7, #0
 800f80a:	f000 80fd 	beq.w	800fa08 <_DrawBitmap+0x4f8>
 800f80e:	4b83      	ldr	r3, [pc, #524]	; (800fa1c <_DrawBitmap+0x50c>)
 800f810:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f895 a000 	ldrb.w	sl, [r5]
 800f818:	7c1b      	ldrb	r3, [r3, #16]
 800f81a:	f013 0303 	ands.w	r3, r3, #3
 800f81e:	d011      	beq.n	800f844 <_DrawBitmap+0x334>
 800f820:	2b02      	cmp	r3, #2
 800f822:	f040 80f1 	bne.w	800fa08 <_DrawBitmap+0x4f8>
 800f826:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f82c:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800f82e:	9703      	str	r7, [sp, #12]
 800f830:	44a9      	add	r9, r5
 800f832:	46a8      	mov	r8, r5
 800f834:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800f836:	9507      	str	r5, [sp, #28]
 800f838:	2500      	movs	r5, #0
 800f83a:	f8cd 9018 	str.w	r9, [sp, #24]
 800f83e:	464e      	mov	r6, r9
 800f840:	462b      	mov	r3, r5
 800f842:	e03c      	b.n	800f8be <_DrawBitmap+0x3ae>
 800f844:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f846:	9e05      	ldr	r6, [sp, #20]
 800f848:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800f84a:	f1c5 0301 	rsb	r3, r5, #1
 800f84e:	009b      	lsls	r3, r3, #2
 800f850:	f1c3 0204 	rsb	r2, r3, #4
 800f854:	21f0      	movs	r1, #240	; 0xf0
 800f856:	fa41 f202 	asr.w	r2, r1, r2
 800f85a:	ea02 020a 	and.w	r2, r2, sl
 800f85e:	40da      	lsrs	r2, r3
 800f860:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f862:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800f866:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 800f86a:	3501      	adds	r5, #1
 800f86c:	4798      	blx	r3
 800f86e:	2d02      	cmp	r5, #2
 800f870:	d103      	bne.n	800f87a <_DrawBitmap+0x36a>
 800f872:	f897 a001 	ldrb.w	sl, [r7, #1]
 800f876:	2500      	movs	r5, #0
 800f878:	3701      	adds	r7, #1
 800f87a:	3e01      	subs	r6, #1
 800f87c:	d1e5      	bne.n	800f84a <_DrawBitmap+0x33a>
 800f87e:	e0c3      	b.n	800fa08 <_DrawBitmap+0x4f8>
 800f880:	b913      	cbnz	r3, 800f888 <_DrawBitmap+0x378>
 800f882:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800f884:	9703      	str	r7, [sp, #12]
 800f886:	9606      	str	r6, [sp, #24]
 800f888:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800f88a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800f88e:	9f03      	ldr	r7, [sp, #12]
 800f890:	803b      	strh	r3, [r7, #0]
 800f892:	3702      	adds	r7, #2
 800f894:	3501      	adds	r5, #1
 800f896:	9703      	str	r7, [sp, #12]
 800f898:	2301      	movs	r3, #1
 800f89a:	f108 0801 	add.w	r8, r8, #1
 800f89e:	f1b8 0f02 	cmp.w	r8, #2
 800f8a2:	f106 0601 	add.w	r6, r6, #1
 800f8a6:	d106      	bne.n	800f8b6 <_DrawBitmap+0x3a6>
 800f8a8:	9f07      	ldr	r7, [sp, #28]
 800f8aa:	f897 a001 	ldrb.w	sl, [r7, #1]
 800f8ae:	3701      	adds	r7, #1
 800f8b0:	9707      	str	r7, [sp, #28]
 800f8b2:	f04f 0800 	mov.w	r8, #0
 800f8b6:	9a05      	ldr	r2, [sp, #20]
 800f8b8:	444a      	add	r2, r9
 800f8ba:	42b2      	cmp	r2, r6
 800f8bc:	d026      	beq.n	800f90c <_DrawBitmap+0x3fc>
 800f8be:	f1c8 0201 	rsb	r2, r8, #1
 800f8c2:	0092      	lsls	r2, r2, #2
 800f8c4:	f1c2 0104 	rsb	r1, r2, #4
 800f8c8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800f8cc:	fa4c fc01 	asr.w	ip, ip, r1
 800f8d0:	ea0c 0c0a 	and.w	ip, ip, sl
 800f8d4:	fa3c fc02 	lsrs.w	ip, ip, r2
 800f8d8:	d1d2      	bne.n	800f880 <_DrawBitmap+0x370>
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d114      	bne.n	800f908 <_DrawBitmap+0x3f8>
 800f8de:	f8cd b000 	str.w	fp, [sp]
 800f8e2:	f8cd c010 	str.w	ip, [sp, #16]
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	9906      	ldr	r1, [sp, #24]
 800f8ea:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800f8ee:	465a      	mov	r2, fp
 800f8f0:	1e73      	subs	r3, r6, #1
 800f8f2:	47b8      	blx	r7
 800f8f4:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800f8f8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f8fa:	4629      	mov	r1, r5
 800f8fc:	4798      	blx	r3
 800f8fe:	f8dd c010 	ldr.w	ip, [sp, #16]
 800f902:	4665      	mov	r5, ip
 800f904:	4663      	mov	r3, ip
 800f906:	e7c8      	b.n	800f89a <_DrawBitmap+0x38a>
 800f908:	4663      	mov	r3, ip
 800f90a:	e7c6      	b.n	800f89a <_DrawBitmap+0x38a>
 800f90c:	9f05      	ldr	r7, [sp, #20]
 800f90e:	1e7b      	subs	r3, r7, #1
 800f910:	444b      	add	r3, r9
 800f912:	2d00      	cmp	r5, #0
 800f914:	d078      	beq.n	800fa08 <_DrawBitmap+0x4f8>
 800f916:	f8cd b000 	str.w	fp, [sp]
 800f91a:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800f91e:	9906      	ldr	r1, [sp, #24]
 800f920:	4620      	mov	r0, r4
 800f922:	465a      	mov	r2, fp
 800f924:	47b0      	blx	r6
 800f926:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800f92a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f92c:	4629      	mov	r1, r5
 800f92e:	e06a      	b.n	800fa06 <_DrawBitmap+0x4f6>
 800f930:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f932:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800f934:	68ac      	ldr	r4, [r5, #8]
 800f936:	2f00      	cmp	r7, #0
 800f938:	d066      	beq.n	800fa08 <_DrawBitmap+0x4f8>
 800f93a:	4b38      	ldr	r3, [pc, #224]	; (800fa1c <_DrawBitmap+0x50c>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	7c1b      	ldrb	r3, [r3, #16]
 800f940:	f013 0303 	ands.w	r3, r3, #3
 800f944:	d009      	beq.n	800f95a <_DrawBitmap+0x44a>
 800f946:	2b02      	cmp	r3, #2
 800f948:	d15e      	bne.n	800fa08 <_DrawBitmap+0x4f8>
 800f94a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f94e:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800f952:	2600      	movs	r6, #0
 800f954:	464f      	mov	r7, r9
 800f956:	4633      	mov	r3, r6
 800f958:	e022      	b.n	800f9a0 <_DrawBitmap+0x490>
 800f95a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800f95c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f95e:	9f05      	ldr	r7, [sp, #20]
 800f960:	443b      	add	r3, r7
 800f962:	1b5b      	subs	r3, r3, r5
 800f964:	2b00      	cmp	r3, #0
 800f966:	dd4f      	ble.n	800fa08 <_DrawBitmap+0x4f8>
 800f968:	f815 2b01 	ldrb.w	r2, [r5], #1
 800f96c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800f96e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800f972:	f837 0022 	ldrh.w	r0, [r7, r2, lsl #2]
 800f976:	4798      	blx	r3
 800f978:	e7f0      	b.n	800f95c <_DrawBitmap+0x44c>
 800f97a:	b913      	cbnz	r3, 800f982 <_DrawBitmap+0x472>
 800f97c:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800f980:	46b9      	mov	r9, r7
 800f982:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f984:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 800f988:	f8a8 3000 	strh.w	r3, [r8]
 800f98c:	3601      	adds	r6, #1
 800f98e:	f108 0802 	add.w	r8, r8, #2
 800f992:	2301      	movs	r3, #1
 800f994:	9a08      	ldr	r2, [sp, #32]
 800f996:	9d05      	ldr	r5, [sp, #20]
 800f998:	3701      	adds	r7, #1
 800f99a:	442a      	add	r2, r5
 800f99c:	42ba      	cmp	r2, r7
 800f99e:	d01c      	beq.n	800f9da <_DrawBitmap+0x4ca>
 800f9a0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800f9a2:	9808      	ldr	r0, [sp, #32]
 800f9a4:	1a2a      	subs	r2, r5, r0
 800f9a6:	f812 a007 	ldrb.w	sl, [r2, r7]
 800f9aa:	f1ba 0f00 	cmp.w	sl, #0
 800f9ae:	d1e4      	bne.n	800f97a <_DrawBitmap+0x46a>
 800f9b0:	2b01      	cmp	r3, #1
 800f9b2:	d110      	bne.n	800f9d6 <_DrawBitmap+0x4c6>
 800f9b4:	f8cd b000 	str.w	fp, [sp]
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	4649      	mov	r1, r9
 800f9bc:	465a      	mov	r2, fp
 800f9be:	1e7b      	subs	r3, r7, #1
 800f9c0:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800f9c4:	47a8      	blx	r5
 800f9c6:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800f9ca:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f9cc:	4631      	mov	r1, r6
 800f9ce:	4798      	blx	r3
 800f9d0:	4656      	mov	r6, sl
 800f9d2:	4653      	mov	r3, sl
 800f9d4:	e7de      	b.n	800f994 <_DrawBitmap+0x484>
 800f9d6:	4653      	mov	r3, sl
 800f9d8:	e7dc      	b.n	800f994 <_DrawBitmap+0x484>
 800f9da:	9f08      	ldr	r7, [sp, #32]
 800f9dc:	1e6b      	subs	r3, r5, #1
 800f9de:	443b      	add	r3, r7
 800f9e0:	b196      	cbz	r6, 800fa08 <_DrawBitmap+0x4f8>
 800f9e2:	f8cd b000 	str.w	fp, [sp]
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	4649      	mov	r1, r9
 800f9ea:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800f9ee:	465a      	mov	r2, fp
 800f9f0:	47a8      	blx	r5
 800f9f2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800f9f6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f9f8:	4631      	mov	r1, r6
 800f9fa:	e004      	b.n	800fa06 <_DrawBitmap+0x4f6>
 800f9fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f9fe:	9819      	ldr	r0, [sp, #100]	; 0x64
 800fa00:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
 800fa04:	9905      	ldr	r1, [sp, #20]
 800fa06:	4798      	blx	r3
 800fa08:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800fa0a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800fa0c:	442f      	add	r7, r5
 800fa0e:	9719      	str	r7, [sp, #100]	; 0x64
 800fa10:	f10b 0b01 	add.w	fp, fp, #1
 800fa14:	e5a7      	b.n	800f566 <_DrawBitmap+0x56>
 800fa16:	b00d      	add	sp, #52	; 0x34
 800fa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa1c:	20000110 	.word	0x20000110

0800fa20 <GUIDRV_FlexColor_SetMode16bppC0B16>:
 800fa20:	b510      	push	{r4, lr}
 800fa22:	4604      	mov	r4, r0
 800fa24:	f000 fa58 	bl	800fed8 <GUIDRV_FlexColor__InitOnce>
 800fa28:	68a4      	ldr	r4, [r4, #8]
 800fa2a:	4b10      	ldr	r3, [pc, #64]	; (800fa6c <GUIDRV_FlexColor_SetMode16bppC0B16+0x4c>)
 800fa2c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 800fa30:	4b0f      	ldr	r3, [pc, #60]	; (800fa70 <GUIDRV_FlexColor_SetMode16bppC0B16+0x50>)
 800fa32:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800fa36:	4b0f      	ldr	r3, [pc, #60]	; (800fa74 <GUIDRV_FlexColor_SetMode16bppC0B16+0x54>)
 800fa38:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800fa3c:	4b0e      	ldr	r3, [pc, #56]	; (800fa78 <GUIDRV_FlexColor_SetMode16bppC0B16+0x58>)
 800fa3e:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800fa42:	4b0e      	ldr	r3, [pc, #56]	; (800fa7c <GUIDRV_FlexColor_SetMode16bppC0B16+0x5c>)
 800fa44:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800fa48:	4b0d      	ldr	r3, [pc, #52]	; (800fa80 <GUIDRV_FlexColor_SetMode16bppC0B16+0x60>)
 800fa4a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 800fa4e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800fa52:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 800fa56:	4620      	mov	r0, r4
 800fa58:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800fa5c:	2110      	movs	r1, #16
 800fa5e:	4798      	blx	r3
 800fa60:	2310      	movs	r3, #16
 800fa62:	63a3      	str	r3, [r4, #56]	; 0x38
 800fa64:	4b07      	ldr	r3, [pc, #28]	; (800fa84 <GUIDRV_FlexColor_SetMode16bppC0B16+0x64>)
 800fa66:	6463      	str	r3, [r4, #68]	; 0x44
 800fa68:	bd10      	pop	{r4, pc}
 800fa6a:	bf00      	nop
 800fa6c:	0800f511 	.word	0x0800f511
 800fa70:	0800f411 	.word	0x0800f411
 800fa74:	0800fe27 	.word	0x0800fe27
 800fa78:	0800fd97 	.word	0x0800fd97
 800fa7c:	0800f3f9 	.word	0x0800f3f9
 800fa80:	0800f403 	.word	0x0800f403
 800fa84:	08020c84 	.word	0x08020c84

0800fa88 <_Log2PhysX_X0Y0S0>:
 800fa88:	4608      	mov	r0, r1
 800fa8a:	4770      	bx	lr

0800fa8c <_Log2PhysX_X1Y0S0>:
 800fa8c:	6800      	ldr	r0, [r0, #0]
 800fa8e:	1a40      	subs	r0, r0, r1
 800fa90:	3801      	subs	r0, #1
 800fa92:	4770      	bx	lr

0800fa94 <_Log2PhysX_X0Y1S0>:
 800fa94:	4608      	mov	r0, r1
 800fa96:	4770      	bx	lr

0800fa98 <_Log2PhysX_X1Y1S0>:
 800fa98:	6800      	ldr	r0, [r0, #0]
 800fa9a:	1a40      	subs	r0, r0, r1
 800fa9c:	3801      	subs	r0, #1
 800fa9e:	4770      	bx	lr

0800faa0 <_Log2PhysX_X0Y0S1>:
 800faa0:	4610      	mov	r0, r2
 800faa2:	4770      	bx	lr

0800faa4 <_Log2PhysX_X1Y0S1>:
 800faa4:	6840      	ldr	r0, [r0, #4]
 800faa6:	1a80      	subs	r0, r0, r2
 800faa8:	3801      	subs	r0, #1
 800faaa:	4770      	bx	lr

0800faac <_Log2PhysX_X0Y1S1>:
 800faac:	4610      	mov	r0, r2
 800faae:	4770      	bx	lr

0800fab0 <_Log2PhysX_X1Y1S1>:
 800fab0:	6840      	ldr	r0, [r0, #4]
 800fab2:	1a80      	subs	r0, r0, r2
 800fab4:	3801      	subs	r0, #1
 800fab6:	4770      	bx	lr

0800fab8 <_Log2PhysY_X0Y0S0>:
 800fab8:	4610      	mov	r0, r2
 800faba:	4770      	bx	lr

0800fabc <_Log2PhysY_X1Y0S0>:
 800fabc:	4610      	mov	r0, r2
 800fabe:	4770      	bx	lr

0800fac0 <_Log2PhysY_X0Y1S0>:
 800fac0:	6840      	ldr	r0, [r0, #4]
 800fac2:	1a80      	subs	r0, r0, r2
 800fac4:	3801      	subs	r0, #1
 800fac6:	4770      	bx	lr

0800fac8 <_Log2PhysY_X1Y1S0>:
 800fac8:	6840      	ldr	r0, [r0, #4]
 800faca:	1a80      	subs	r0, r0, r2
 800facc:	3801      	subs	r0, #1
 800face:	4770      	bx	lr

0800fad0 <_Log2PhysY_X0Y0S1>:
 800fad0:	4608      	mov	r0, r1
 800fad2:	4770      	bx	lr

0800fad4 <_Log2PhysY_X1Y0S1>:
 800fad4:	4608      	mov	r0, r1
 800fad6:	4770      	bx	lr

0800fad8 <_Log2PhysY_X0Y1S1>:
 800fad8:	6800      	ldr	r0, [r0, #0]
 800fada:	1a40      	subs	r0, r0, r1
 800fadc:	3801      	subs	r0, #1
 800fade:	4770      	bx	lr

0800fae0 <_Log2PhysY_X1Y1S1>:
 800fae0:	6800      	ldr	r0, [r0, #0]
 800fae2:	1a40      	subs	r0, r0, r1
 800fae4:	3801      	subs	r0, #1
 800fae6:	4770      	bx	lr

0800fae8 <_SetPixelIndex>:
 800fae8:	b510      	push	{r4, lr}
 800faea:	6884      	ldr	r4, [r0, #8]
 800faec:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800faf0:	47a0      	blx	r4
 800faf2:	bd10      	pop	{r4, pc}

0800faf4 <_GetPixelIndex>:
 800faf4:	b508      	push	{r3, lr}
 800faf6:	6883      	ldr	r3, [r0, #8]
 800faf8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800fafc:	4798      	blx	r3
 800fafe:	bd08      	pop	{r3, pc}

0800fb00 <_XorPixel>:
 800fb00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb02:	4604      	mov	r4, r0
 800fb04:	460f      	mov	r7, r1
 800fb06:	4616      	mov	r6, r2
 800fb08:	6885      	ldr	r5, [r0, #8]
 800fb0a:	f7ff fff3 	bl	800faf4 <_GetPixelIndex>
 800fb0e:	9001      	str	r0, [sp, #4]
 800fb10:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fb14:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fb16:	4620      	mov	r0, r4
 800fb18:	4639      	mov	r1, r7
 800fb1a:	4632      	mov	r2, r6
 800fb1c:	ea8e 0303 	eor.w	r3, lr, r3
 800fb20:	f7ff ffe2 	bl	800fae8 <_SetPixelIndex>
 800fb24:	b003      	add	sp, #12
 800fb26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb28 <_DrawHLine>:
 800fb28:	b513      	push	{r0, r1, r4, lr}
 800fb2a:	6884      	ldr	r4, [r0, #8]
 800fb2c:	9200      	str	r2, [sp, #0]
 800fb2e:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 800fb32:	47a0      	blx	r4
 800fb34:	b002      	add	sp, #8
 800fb36:	bd10      	pop	{r4, pc}

0800fb38 <_DrawVLine>:
 800fb38:	b513      	push	{r0, r1, r4, lr}
 800fb3a:	6884      	ldr	r4, [r0, #8]
 800fb3c:	9300      	str	r3, [sp, #0]
 800fb3e:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 800fb42:	460b      	mov	r3, r1
 800fb44:	47a0      	blx	r4
 800fb46:	b002      	add	sp, #8
 800fb48:	bd10      	pop	{r4, pc}

0800fb4a <_FillRect>:
 800fb4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb4c:	9c06      	ldr	r4, [sp, #24]
 800fb4e:	6885      	ldr	r5, [r0, #8]
 800fb50:	9400      	str	r4, [sp, #0]
 800fb52:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 800fb56:	47a0      	blx	r4
 800fb58:	b003      	add	sp, #12
 800fb5a:	bd30      	pop	{r4, r5, pc}

0800fb5c <_DrawBitmap>:
 800fb5c:	b530      	push	{r4, r5, lr}
 800fb5e:	b087      	sub	sp, #28
 800fb60:	6885      	ldr	r5, [r0, #8]
 800fb62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fb64:	9400      	str	r4, [sp, #0]
 800fb66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800fb68:	9401      	str	r4, [sp, #4]
 800fb6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800fb6c:	9402      	str	r4, [sp, #8]
 800fb6e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800fb70:	9403      	str	r4, [sp, #12]
 800fb72:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800fb74:	9404      	str	r4, [sp, #16]
 800fb76:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800fb78:	9405      	str	r4, [sp, #20]
 800fb7a:	f8d5 40e4 	ldr.w	r4, [r5, #228]	; 0xe4
 800fb7e:	47a0      	blx	r4
 800fb80:	b007      	add	sp, #28
 800fb82:	bd30      	pop	{r4, r5, pc}

0800fb84 <_GetDevFunc_SetRect>:
 800fb84:	4770      	bx	lr
	...

0800fb88 <_GetDevFunc_SetRectOutside>:
 800fb88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb8a:	9e07      	ldr	r6, [sp, #28]
 800fb8c:	6884      	ldr	r4, [r0, #8]
 800fb8e:	4d0c      	ldr	r5, [pc, #48]	; (800fbc0 <_GetDevFunc_SetRectOutside+0x38>)
 800fb90:	b176      	cbz	r6, 800fbb0 <_GetDevFunc_SetRectOutside+0x28>
 800fb92:	6828      	ldr	r0, [r5, #0]
 800fb94:	b988      	cbnz	r0, 800fbba <_GetDevFunc_SetRectOutside+0x32>
 800fb96:	9806      	ldr	r0, [sp, #24]
 800fb98:	9000      	str	r0, [sp, #0]
 800fb9a:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800fb9e:	4620      	mov	r0, r4
 800fba0:	47b0      	blx	r6
 800fba2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800fba6:	602b      	str	r3, [r5, #0]
 800fba8:	4b06      	ldr	r3, [pc, #24]	; (800fbc4 <_GetDevFunc_SetRectOutside+0x3c>)
 800fbaa:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800fbae:	e004      	b.n	800fbba <_GetDevFunc_SetRectOutside+0x32>
 800fbb0:	682b      	ldr	r3, [r5, #0]
 800fbb2:	b113      	cbz	r3, 800fbba <_GetDevFunc_SetRectOutside+0x32>
 800fbb4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800fbb8:	602e      	str	r6, [r5, #0]
 800fbba:	b002      	add	sp, #8
 800fbbc:	bd70      	pop	{r4, r5, r6, pc}
 800fbbe:	bf00      	nop
 800fbc0:	2001d0ec 	.word	0x2001d0ec
 800fbc4:	0800fb85 	.word	0x0800fb85

0800fbc8 <_ReadPixelCust_16bpp>:
 800fbc8:	b508      	push	{r3, lr}
 800fbca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800fbcc:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 800fbd0:	6990      	ldr	r0, [r2, #24]
 800fbd2:	4798      	blx	r3
 800fbd4:	bd08      	pop	{r3, pc}

0800fbd6 <_ReadPixelCust_18bpp>:
 800fbd6:	b508      	push	{r3, lr}
 800fbd8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800fbda:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800fbde:	6990      	ldr	r0, [r2, #24]
 800fbe0:	4798      	blx	r3
 800fbe2:	bd08      	pop	{r3, pc}

0800fbe4 <_ReadRectCust_16bpp>:
 800fbe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fbe8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fbea:	6884      	ldr	r4, [r0, #8]
 800fbec:	9500      	str	r5, [sp, #0]
 800fbee:	4617      	mov	r7, r2
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800fbf6:	4699      	mov	r9, r3
 800fbf8:	4688      	mov	r8, r1
 800fbfa:	1bed      	subs	r5, r5, r7
 800fbfc:	47b0      	blx	r6
 800fbfe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fc00:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800fc04:	6988      	ldr	r0, [r1, #24]
 800fc06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc08:	ebc8 0809 	rsb	r8, r8, r9
 800fc0c:	1c6a      	adds	r2, r5, #1
 800fc0e:	fb08 2202 	mla	r2, r8, r2, r2
 800fc12:	4798      	blx	r3
 800fc14:	b003      	add	sp, #12
 800fc16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800fc1a <_ReadRectCust_18bpp>:
 800fc1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fc20:	6884      	ldr	r4, [r0, #8]
 800fc22:	9500      	str	r5, [sp, #0]
 800fc24:	4617      	mov	r7, r2
 800fc26:	4620      	mov	r0, r4
 800fc28:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800fc2c:	4699      	mov	r9, r3
 800fc2e:	4688      	mov	r8, r1
 800fc30:	1bed      	subs	r5, r5, r7
 800fc32:	47b0      	blx	r6
 800fc34:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fc36:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800fc3a:	6988      	ldr	r0, [r1, #24]
 800fc3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc3e:	ebc8 0809 	rsb	r8, r8, r9
 800fc42:	1c6a      	adds	r2, r5, #1
 800fc44:	fb08 2202 	mla	r2, r8, r2, r2
 800fc48:	4798      	blx	r3
 800fc4a:	b003      	add	sp, #12
 800fc4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800fc50 <_GetDevFunc>:
 800fc50:	3901      	subs	r1, #1
 800fc52:	2917      	cmp	r1, #23
 800fc54:	d824      	bhi.n	800fca0 <_GetDevFunc+0x50>
 800fc56:	e8df f001 	tbb	[pc, r1]
 800fc5a:	2310      	.short	0x2310
 800fc5c:	23232323 	.word	0x23232323
 800fc60:	0c232323 	.word	0x0c232323
 800fc64:	23150e25 	.word	0x23150e25
 800fc68:	23232323 	.word	0x23232323
 800fc6c:	1f232323 	.word	0x1f232323
 800fc70:	211a      	.short	0x211a
 800fc72:	480d      	ldr	r0, [pc, #52]	; (800fca8 <_GetDevFunc+0x58>)
 800fc74:	4770      	bx	lr
 800fc76:	480d      	ldr	r0, [pc, #52]	; (800fcac <_GetDevFunc+0x5c>)
 800fc78:	4770      	bx	lr
 800fc7a:	6803      	ldr	r3, [r0, #0]
 800fc7c:	689b      	ldr	r3, [r3, #8]
 800fc7e:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 800fc82:	4770      	bx	lr
 800fc84:	6803      	ldr	r3, [r0, #0]
 800fc86:	689b      	ldr	r3, [r3, #8]
 800fc88:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 800fc8c:	4770      	bx	lr
 800fc8e:	6803      	ldr	r3, [r0, #0]
 800fc90:	689b      	ldr	r3, [r3, #8]
 800fc92:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 800fc96:	4770      	bx	lr
 800fc98:	4805      	ldr	r0, [pc, #20]	; (800fcb0 <_GetDevFunc+0x60>)
 800fc9a:	4770      	bx	lr
 800fc9c:	4805      	ldr	r0, [pc, #20]	; (800fcb4 <_GetDevFunc+0x64>)
 800fc9e:	4770      	bx	lr
 800fca0:	2000      	movs	r0, #0
 800fca2:	4770      	bx	lr
 800fca4:	4804      	ldr	r0, [pc, #16]	; (800fcb8 <_GetDevFunc+0x68>)
 800fca6:	4770      	bx	lr
 800fca8:	08010007 	.word	0x08010007
 800fcac:	0800ffa9 	.word	0x0800ffa9
 800fcb0:	0800ff0d 	.word	0x0800ff0d
 800fcb4:	0800fb89 	.word	0x0800fb89
 800fcb8:	0800fff3 	.word	0x0800fff3

0800fcbc <_GetDevProp>:
 800fcbc:	3901      	subs	r1, #1
 800fcbe:	6880      	ldr	r0, [r0, #8]
 800fcc0:	290d      	cmp	r1, #13
 800fcc2:	d823      	bhi.n	800fd0c <_GetDevProp+0x50>
 800fcc4:	e8df f001 	tbb	[pc, r1]
 800fcc8:	0f0d0b09 	.word	0x0f0d0b09
 800fccc:	11222222 	.word	0x11222222
 800fcd0:	13252507 	.word	0x13252507
 800fcd4:	1d18      	.short	0x1d18
 800fcd6:	2000      	movs	r0, #0
 800fcd8:	4770      	bx	lr
 800fcda:	6800      	ldr	r0, [r0, #0]
 800fcdc:	4770      	bx	lr
 800fcde:	6840      	ldr	r0, [r0, #4]
 800fce0:	4770      	bx	lr
 800fce2:	6880      	ldr	r0, [r0, #8]
 800fce4:	4770      	bx	lr
 800fce6:	68c0      	ldr	r0, [r0, #12]
 800fce8:	4770      	bx	lr
 800fcea:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800fcec:	4770      	bx	lr
 800fcee:	b188      	cbz	r0, 800fd14 <_GetDevProp+0x58>
 800fcf0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800fcf2:	f000 0001 	and.w	r0, r0, #1
 800fcf6:	4770      	bx	lr
 800fcf8:	b160      	cbz	r0, 800fd14 <_GetDevProp+0x58>
 800fcfa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800fcfc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800fd00:	4770      	bx	lr
 800fd02:	b138      	cbz	r0, 800fd14 <_GetDevProp+0x58>
 800fd04:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800fd06:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800fd0a:	4770      	bx	lr
 800fd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd10:	4770      	bx	lr
 800fd12:	2001      	movs	r0, #1
 800fd14:	4770      	bx	lr

0800fd16 <_GetDevData>:
 800fd16:	6883      	ldr	r3, [r0, #8]
 800fd18:	2901      	cmp	r1, #1
 800fd1a:	bf0c      	ite	eq
 800fd1c:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 800fd1e:	2000      	movne	r0, #0
 800fd20:	4770      	bx	lr

0800fd22 <_GetRect>:
 800fd22:	6883      	ldr	r3, [r0, #8]
 800fd24:	2200      	movs	r2, #0
 800fd26:	800a      	strh	r2, [r1, #0]
 800fd28:	804a      	strh	r2, [r1, #2]
 800fd2a:	681a      	ldr	r2, [r3, #0]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	3a01      	subs	r2, #1
 800fd30:	3b01      	subs	r3, #1
 800fd32:	808a      	strh	r2, [r1, #4]
 800fd34:	80cb      	strh	r3, [r1, #6]
 800fd36:	4770      	bx	lr

0800fd38 <GUIDRV_FlexColor__SetLog2Phys>:
 800fd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd3a:	4d10      	ldr	r5, [pc, #64]	; (800fd7c <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 800fd3c:	462e      	mov	r6, r5
 800fd3e:	4607      	mov	r7, r0
 800fd40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fd42:	b091      	sub	sp, #68	; 0x44
 800fd44:	466c      	mov	r4, sp
 800fd46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd48:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800fd4c:	3520      	adds	r5, #32
 800fd4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fd52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd54:	ac08      	add	r4, sp, #32
 800fd56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fd5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd62:	aa10      	add	r2, sp, #64	; 0x40
 800fd64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd68:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800fd6c:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800fd70:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800fd74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800fd78:	b011      	add	sp, #68	; 0x44
 800fd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd7c:	0801b414 	.word	0x0801b414

0800fd80 <_SetOrg>:
 800fd80:	b507      	push	{r0, r1, r2, lr}
 800fd82:	6980      	ldr	r0, [r0, #24]
 800fd84:	e88d 0006 	stmia.w	sp, {r1, r2}
 800fd88:	2103      	movs	r1, #3
 800fd8a:	466a      	mov	r2, sp
 800fd8c:	f7f1 f9be 	bl	800110c <LCD_X_DisplayDriver>
 800fd90:	b003      	add	sp, #12
 800fd92:	f85d fb04 	ldr.w	pc, [sp], #4

0800fd96 <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 800fd96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd9a:	6884      	ldr	r4, [r0, #8]
 800fd9c:	4698      	mov	r8, r3
 800fd9e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800fda0:	079b      	lsls	r3, r3, #30
 800fda2:	4689      	mov	r9, r1
 800fda4:	4617      	mov	r7, r2
 800fda6:	d532      	bpl.n	800fe0e <GUIDRV_FlexColor__SetPixelIndexNoCache+0x78>
 800fda8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800fdac:	4620      	mov	r0, r4
 800fdae:	4798      	blx	r3
 800fdb0:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 800fdb4:	4606      	mov	r6, r0
 800fdb6:	463a      	mov	r2, r7
 800fdb8:	4620      	mov	r0, r4
 800fdba:	4649      	mov	r1, r9
 800fdbc:	47a8      	blx	r5
 800fdbe:	6923      	ldr	r3, [r4, #16]
 800fdc0:	69a2      	ldr	r2, [r4, #24]
 800fdc2:	429e      	cmp	r6, r3
 800fdc4:	bfac      	ite	ge
 800fdc6:	2300      	movge	r3, #0
 800fdc8:	2301      	movlt	r3, #1
 800fdca:	4296      	cmp	r6, r2
 800fdcc:	bfd4      	ite	le
 800fdce:	461a      	movle	r2, r3
 800fdd0:	f043 0201 	orrgt.w	r2, r3, #1
 800fdd4:	6963      	ldr	r3, [r4, #20]
 800fdd6:	4298      	cmp	r0, r3
 800fdd8:	bfac      	ite	ge
 800fdda:	4613      	movge	r3, r2
 800fddc:	f042 0301 	orrlt.w	r3, r2, #1
 800fde0:	4605      	mov	r5, r0
 800fde2:	b913      	cbnz	r3, 800fdea <GUIDRV_FlexColor__SetPixelIndexNoCache+0x54>
 800fde4:	69e3      	ldr	r3, [r4, #28]
 800fde6:	4298      	cmp	r0, r3
 800fde8:	dd0a      	ble.n	800fe00 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x6a>
 800fdea:	6862      	ldr	r2, [r4, #4]
 800fdec:	6823      	ldr	r3, [r4, #0]
 800fdee:	3a01      	subs	r2, #1
 800fdf0:	9200      	str	r2, [sp, #0]
 800fdf2:	2100      	movs	r1, #0
 800fdf4:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	460a      	mov	r2, r1
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	47b8      	blx	r7
 800fe00:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 800fe04:	4620      	mov	r0, r4
 800fe06:	4631      	mov	r1, r6
 800fe08:	462a      	mov	r2, r5
 800fe0a:	47b8      	blx	r7
 800fe0c:	e003      	b.n	800fe16 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 800fe0e:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800fe12:	4620      	mov	r0, r4
 800fe14:	47a8      	blx	r5
 800fe16:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	4641      	mov	r1, r8
 800fe1e:	4798      	blx	r3
 800fe20:	b003      	add	sp, #12
 800fe22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800fe26 <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 800fe26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe28:	6884      	ldr	r4, [r0, #8]
 800fe2a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800fe2c:	079b      	lsls	r3, r3, #30
 800fe2e:	460f      	mov	r7, r1
 800fe30:	4616      	mov	r6, r2
 800fe32:	d545      	bpl.n	800fec0 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x9a>
 800fe34:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800fe38:	4620      	mov	r0, r4
 800fe3a:	4798      	blx	r3
 800fe3c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800fe40:	4632      	mov	r2, r6
 800fe42:	4605      	mov	r5, r0
 800fe44:	4639      	mov	r1, r7
 800fe46:	4620      	mov	r0, r4
 800fe48:	4798      	blx	r3
 800fe4a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800fe4e:	4606      	mov	r6, r0
 800fe50:	b11b      	cbz	r3, 800fe5a <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 800fe52:	4620      	mov	r0, r4
 800fe54:	2101      	movs	r1, #1
 800fe56:	2200      	movs	r2, #0
 800fe58:	4798      	blx	r3
 800fe5a:	6923      	ldr	r3, [r4, #16]
 800fe5c:	69a2      	ldr	r2, [r4, #24]
 800fe5e:	429d      	cmp	r5, r3
 800fe60:	bfac      	ite	ge
 800fe62:	2300      	movge	r3, #0
 800fe64:	2301      	movlt	r3, #1
 800fe66:	4295      	cmp	r5, r2
 800fe68:	bfd4      	ite	le
 800fe6a:	461a      	movle	r2, r3
 800fe6c:	f043 0201 	orrgt.w	r2, r3, #1
 800fe70:	6963      	ldr	r3, [r4, #20]
 800fe72:	429e      	cmp	r6, r3
 800fe74:	bfac      	ite	ge
 800fe76:	4613      	movge	r3, r2
 800fe78:	f042 0301 	orrlt.w	r3, r2, #1
 800fe7c:	b913      	cbnz	r3, 800fe84 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5e>
 800fe7e:	69e3      	ldr	r3, [r4, #28]
 800fe80:	429e      	cmp	r6, r3
 800fe82:	dd0a      	ble.n	800fe9a <GUIDRV_FlexColor__GetPixelIndexNoCache+0x74>
 800fe84:	6862      	ldr	r2, [r4, #4]
 800fe86:	6823      	ldr	r3, [r4, #0]
 800fe88:	3a01      	subs	r2, #1
 800fe8a:	9200      	str	r2, [sp, #0]
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800fe92:	4620      	mov	r0, r4
 800fe94:	460a      	mov	r2, r1
 800fe96:	3b01      	subs	r3, #1
 800fe98:	47b8      	blx	r7
 800fe9a:	4629      	mov	r1, r5
 800fe9c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800fea0:	4620      	mov	r0, r4
 800fea2:	4632      	mov	r2, r6
 800fea4:	4798      	blx	r3
 800fea6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800feaa:	4620      	mov	r0, r4
 800feac:	4798      	blx	r3
 800feae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800feb2:	4605      	mov	r5, r0
 800feb4:	b16b      	cbz	r3, 800fed2 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800feb6:	4620      	mov	r0, r4
 800feb8:	2100      	movs	r1, #0
 800feba:	2201      	movs	r2, #1
 800febc:	4798      	blx	r3
 800febe:	e008      	b.n	800fed2 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800fec0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800fec4:	4620      	mov	r0, r4
 800fec6:	4798      	blx	r3
 800fec8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800fecc:	4620      	mov	r0, r4
 800fece:	4798      	blx	r3
 800fed0:	4605      	mov	r5, r0
 800fed2:	4628      	mov	r0, r5
 800fed4:	b003      	add	sp, #12
 800fed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fed8 <GUIDRV_FlexColor__InitOnce>:
 800fed8:	b538      	push	{r3, r4, r5, lr}
 800feda:	6885      	ldr	r5, [r0, #8]
 800fedc:	4604      	mov	r4, r0
 800fede:	b995      	cbnz	r5, 800ff06 <GUIDRV_FlexColor__InitOnce+0x2e>
 800fee0:	f44f 70ba 	mov.w	r0, #372	; 0x174
 800fee4:	f003 fe62 	bl	8013bac <GUI_ALLOC_GetFixedBlock>
 800fee8:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800feec:	60a0      	str	r0, [r4, #8]
 800feee:	4629      	mov	r1, r5
 800fef0:	f000 fe13 	bl	8010b1a <GUI__memset>
 800fef4:	68a3      	ldr	r3, [r4, #8]
 800fef6:	2202      	movs	r2, #2
 800fef8:	84da      	strh	r2, [r3, #38]	; 0x26
 800fefa:	2201      	movs	r2, #1
 800fefc:	621a      	str	r2, [r3, #32]
 800fefe:	4a02      	ldr	r2, [pc, #8]	; (800ff08 <GUIDRV_FlexColor__InitOnce+0x30>)
 800ff00:	641c      	str	r4, [r3, #64]	; 0x40
 800ff02:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800ff06:	bd38      	pop	{r3, r4, r5, pc}
 800ff08:	0800fd39 	.word	0x0800fd39

0800ff0c <_SetDevFunc>:
 800ff0c:	b570      	push	{r4, r5, r6, lr}
 800ff0e:	4606      	mov	r6, r0
 800ff10:	460d      	mov	r5, r1
 800ff12:	4614      	mov	r4, r2
 800ff14:	f7ff ffe0 	bl	800fed8 <GUIDRV_FlexColor__InitOnce>
 800ff18:	68b3      	ldr	r3, [r6, #8]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d03b      	beq.n	800ff96 <_SetDevFunc+0x8a>
 800ff1e:	2d26      	cmp	r5, #38	; 0x26
 800ff20:	d002      	beq.n	800ff28 <_SetDevFunc+0x1c>
 800ff22:	2d27      	cmp	r5, #39	; 0x27
 800ff24:	d016      	beq.n	800ff54 <_SetDevFunc+0x48>
 800ff26:	bd70      	pop	{r4, r5, r6, pc}
 800ff28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff2a:	2a10      	cmp	r2, #16
 800ff2c:	d002      	beq.n	800ff34 <_SetDevFunc+0x28>
 800ff2e:	2a12      	cmp	r2, #18
 800ff30:	d008      	beq.n	800ff44 <_SetDevFunc+0x38>
 800ff32:	bd70      	pop	{r4, r5, r6, pc}
 800ff34:	4a18      	ldr	r2, [pc, #96]	; (800ff98 <_SetDevFunc+0x8c>)
 800ff36:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 800ff3a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800ff3e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800ff42:	bd70      	pop	{r4, r5, r6, pc}
 800ff44:	4a15      	ldr	r2, [pc, #84]	; (800ff9c <_SetDevFunc+0x90>)
 800ff46:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 800ff4a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800ff4e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800ff52:	bd70      	pop	{r4, r5, r6, pc}
 800ff54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff56:	2a10      	cmp	r2, #16
 800ff58:	d002      	beq.n	800ff60 <_SetDevFunc+0x54>
 800ff5a:	2a12      	cmp	r2, #18
 800ff5c:	d00e      	beq.n	800ff7c <_SetDevFunc+0x70>
 800ff5e:	bd70      	pop	{r4, r5, r6, pc}
 800ff60:	b13c      	cbz	r4, 800ff72 <_SetDevFunc+0x66>
 800ff62:	4a0f      	ldr	r2, [pc, #60]	; (800ffa0 <_SetDevFunc+0x94>)
 800ff64:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 800ff68:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800ff6c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800ff70:	bd70      	pop	{r4, r5, r6, pc}
 800ff72:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 800ff76:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
 800ff7a:	bd70      	pop	{r4, r5, r6, pc}
 800ff7c:	b13c      	cbz	r4, 800ff8e <_SetDevFunc+0x82>
 800ff7e:	4a09      	ldr	r2, [pc, #36]	; (800ffa4 <_SetDevFunc+0x98>)
 800ff80:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800ff84:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800ff88:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800ff8c:	bd70      	pop	{r4, r5, r6, pc}
 800ff8e:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 800ff92:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 800ff96:	bd70      	pop	{r4, r5, r6, pc}
 800ff98:	0800fbc9 	.word	0x0800fbc9
 800ff9c:	0800fbd7 	.word	0x0800fbd7
 800ffa0:	0800fbe5 	.word	0x0800fbe5
 800ffa4:	0800fc1b 	.word	0x0800fc1b

0800ffa8 <_GetDevFunc_Init>:
 800ffa8:	b538      	push	{r3, r4, r5, lr}
 800ffaa:	4605      	mov	r5, r0
 800ffac:	f7ff ff94 	bl	800fed8 <GUIDRV_FlexColor__InitOnce>
 800ffb0:	68ac      	ldr	r4, [r5, #8]
 800ffb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ffb6:	f003 fdf9 	bl	8013bac <GUI_ALLOC_GetFixedBlock>
 800ffba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ffbc:	66a0      	str	r0, [r4, #104]	; 0x68
 800ffbe:	3307      	adds	r3, #7
 800ffc0:	10d8      	asrs	r0, r3, #3
 800ffc2:	6823      	ldr	r3, [r4, #0]
 800ffc4:	4358      	muls	r0, r3
 800ffc6:	f003 fdf1 	bl	8013bac <GUI_ALLOC_GetFixedBlock>
 800ffca:	2101      	movs	r1, #1
 800ffcc:	2200      	movs	r2, #0
 800ffce:	66e0      	str	r0, [r4, #108]	; 0x6c
 800ffd0:	69a8      	ldr	r0, [r5, #24]
 800ffd2:	f7f1 f89b 	bl	800110c <LCD_X_DisplayDriver>
 800ffd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800ffda:	4605      	mov	r5, r0
 800ffdc:	4620      	mov	r0, r4
 800ffde:	4798      	blx	r3
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800ffe6:	4798      	blx	r3
 800ffe8:	2d00      	cmp	r5, #0
 800ffea:	bfd4      	ite	le
 800ffec:	2000      	movle	r0, #0
 800ffee:	2001      	movgt	r0, #1
 800fff0:	bd38      	pop	{r3, r4, r5, pc}

0800fff2 <_GetDevFunc_SetSize>:
 800fff2:	b570      	push	{r4, r5, r6, lr}
 800fff4:	4604      	mov	r4, r0
 800fff6:	460d      	mov	r5, r1
 800fff8:	4616      	mov	r6, r2
 800fffa:	f7ff ff6d 	bl	800fed8 <GUIDRV_FlexColor__InitOnce>
 800fffe:	68a3      	ldr	r3, [r4, #8]
 8010000:	e883 0060 	stmia.w	r3, {r5, r6}
 8010004:	bd70      	pop	{r4, r5, r6, pc}

08010006 <_GetDevFunc_SetVSize>:
 8010006:	b570      	push	{r4, r5, r6, lr}
 8010008:	4604      	mov	r4, r0
 801000a:	460d      	mov	r5, r1
 801000c:	4616      	mov	r6, r2
 801000e:	f7ff ff63 	bl	800fed8 <GUIDRV_FlexColor__InitOnce>
 8010012:	68a3      	ldr	r3, [r4, #8]
 8010014:	609d      	str	r5, [r3, #8]
 8010016:	60de      	str	r6, [r3, #12]
 8010018:	bd70      	pop	{r4, r5, r6, pc}

0801001a <GUIDRV_FlexColor_Config>:
 801001a:	b538      	push	{r3, r4, r5, lr}
 801001c:	4605      	mov	r5, r0
 801001e:	460c      	mov	r4, r1
 8010020:	f7ff ff5a 	bl	800fed8 <GUIDRV_FlexColor__InitOnce>
 8010024:	68ab      	ldr	r3, [r5, #8]
 8010026:	6822      	ldr	r2, [r4, #0]
 8010028:	62da      	str	r2, [r3, #44]	; 0x2c
 801002a:	6862      	ldr	r2, [r4, #4]
 801002c:	631a      	str	r2, [r3, #48]	; 0x30
 801002e:	68a2      	ldr	r2, [r4, #8]
 8010030:	635a      	str	r2, [r3, #52]	; 0x34
 8010032:	0752      	lsls	r2, r2, #29
 8010034:	d507      	bpl.n	8010046 <GUIDRV_FlexColor_Config+0x2c>
 8010036:	e893 0006 	ldmia.w	r3, {r1, r2}
 801003a:	601a      	str	r2, [r3, #0]
 801003c:	6059      	str	r1, [r3, #4]
 801003e:	68da      	ldr	r2, [r3, #12]
 8010040:	6899      	ldr	r1, [r3, #8]
 8010042:	60d9      	str	r1, [r3, #12]
 8010044:	609a      	str	r2, [r3, #8]
 8010046:	89a2      	ldrh	r2, [r4, #12]
 8010048:	849a      	strh	r2, [r3, #36]	; 0x24
 801004a:	6922      	ldr	r2, [r4, #16]
 801004c:	b112      	cbz	r2, 8010054 <GUIDRV_FlexColor_Config+0x3a>
 801004e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8010052:	621a      	str	r2, [r3, #32]
 8010054:	bd38      	pop	{r3, r4, r5, pc}

08010056 <GUIDRV_FlexColor_SetFunc>:
 8010056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801005a:	4604      	mov	r4, r0
 801005c:	461f      	mov	r7, r3
 801005e:	4616      	mov	r6, r2
 8010060:	4688      	mov	r8, r1
 8010062:	f7ff ff39 	bl	800fed8 <GUIDRV_FlexColor__InitOnce>
 8010066:	68a5      	ldr	r5, [r4, #8]
 8010068:	4641      	mov	r1, r8
 801006a:	2268      	movs	r2, #104	; 0x68
 801006c:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 8010070:	f00a fbae 	bl	801a7d0 <memcpy>
 8010074:	4620      	mov	r0, r4
 8010076:	47b0      	blx	r6
 8010078:	4620      	mov	r0, r4
 801007a:	47b8      	blx	r7
 801007c:	6923      	ldr	r3, [r4, #16]
 801007e:	689b      	ldr	r3, [r3, #8]
 8010080:	4798      	blx	r3
 8010082:	62a8      	str	r0, [r5, #40]	; 0x28
 8010084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010088 <LCD_UpdateColorIndices>:
 8010088:	b510      	push	{r4, lr}
 801008a:	4c07      	ldr	r4, [pc, #28]	; (80100a8 <LCD_UpdateColorIndices+0x20>)
 801008c:	6823      	ldr	r3, [r4, #0]
 801008e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010090:	f000 fca4 	bl	80109dc <LCD_Color2Index>
 8010094:	f000 fcc2 	bl	8010a1c <LCD_SetColorIndex>
 8010098:	6823      	ldr	r3, [r4, #0]
 801009a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801009c:	f000 fc9e 	bl	80109dc <LCD_Color2Index>
 80100a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100a4:	f000 bcd6 	b.w	8010a54 <LCD_SetBkColorIndex>
 80100a8:	20000110 	.word	0x20000110

080100ac <LCD_SetClipRectEx>:
 80100ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100ae:	4c09      	ldr	r4, [pc, #36]	; (80100d4 <LCD_SetClipRectEx+0x28>)
 80100b0:	6823      	ldr	r3, [r4, #0]
 80100b2:	7c5a      	ldrb	r2, [r3, #17]
 80100b4:	4b08      	ldr	r3, [pc, #32]	; (80100d8 <LCD_SetClipRectEx+0x2c>)
 80100b6:	4605      	mov	r5, r0
 80100b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80100bc:	68c2      	ldr	r2, [r0, #12]
 80100be:	4669      	mov	r1, sp
 80100c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80100c2:	4790      	blx	r2
 80100c4:	6820      	ldr	r0, [r4, #0]
 80100c6:	4629      	mov	r1, r5
 80100c8:	466a      	mov	r2, sp
 80100ca:	3008      	adds	r0, #8
 80100cc:	f000 fe14 	bl	8010cf8 <GUI__IntersectRects>
 80100d0:	b003      	add	sp, #12
 80100d2:	bd30      	pop	{r4, r5, pc}
 80100d4:	20000110 	.word	0x20000110
 80100d8:	2001d5dc 	.word	0x2001d5dc

080100dc <LCD_SetVSizeEx>:
 80100dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100de:	460d      	mov	r5, r1
 80100e0:	4614      	mov	r4, r2
 80100e2:	f002 fddd 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 80100e6:	9001      	str	r0, [sp, #4]
 80100e8:	b908      	cbnz	r0, 80100ee <LCD_SetVSizeEx+0x12>
 80100ea:	2001      	movs	r0, #1
 80100ec:	e00c      	b.n	8010108 <LCD_SetVSizeEx+0x2c>
 80100ee:	68c3      	ldr	r3, [r0, #12]
 80100f0:	210a      	movs	r1, #10
 80100f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f4:	a801      	add	r0, sp, #4
 80100f6:	4798      	blx	r3
 80100f8:	4603      	mov	r3, r0
 80100fa:	2800      	cmp	r0, #0
 80100fc:	d0f5      	beq.n	80100ea <LCD_SetVSizeEx+0xe>
 80100fe:	9801      	ldr	r0, [sp, #4]
 8010100:	4629      	mov	r1, r5
 8010102:	4622      	mov	r2, r4
 8010104:	4798      	blx	r3
 8010106:	2000      	movs	r0, #0
 8010108:	b003      	add	sp, #12
 801010a:	bd30      	pop	{r4, r5, pc}

0801010c <LCD_SetSizeEx>:
 801010c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801010e:	460d      	mov	r5, r1
 8010110:	4614      	mov	r4, r2
 8010112:	f002 fdc5 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 8010116:	9001      	str	r0, [sp, #4]
 8010118:	b908      	cbnz	r0, 801011e <LCD_SetSizeEx+0x12>
 801011a:	2001      	movs	r0, #1
 801011c:	e00c      	b.n	8010138 <LCD_SetSizeEx+0x2c>
 801011e:	68c3      	ldr	r3, [r0, #12]
 8010120:	210b      	movs	r1, #11
 8010122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010124:	a801      	add	r0, sp, #4
 8010126:	4798      	blx	r3
 8010128:	4603      	mov	r3, r0
 801012a:	2800      	cmp	r0, #0
 801012c:	d0f5      	beq.n	801011a <LCD_SetSizeEx+0xe>
 801012e:	9801      	ldr	r0, [sp, #4]
 8010130:	4629      	mov	r1, r5
 8010132:	4622      	mov	r2, r4
 8010134:	4798      	blx	r3
 8010136:	2000      	movs	r0, #0
 8010138:	b003      	add	sp, #12
 801013a:	bd30      	pop	{r4, r5, pc}

0801013c <LCD_SetVisEx>:
 801013c:	b513      	push	{r0, r1, r4, lr}
 801013e:	460c      	mov	r4, r1
 8010140:	f002 fdae 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 8010144:	9001      	str	r0, [sp, #4]
 8010146:	b908      	cbnz	r0, 801014c <LCD_SetVisEx+0x10>
 8010148:	2001      	movs	r0, #1
 801014a:	e00b      	b.n	8010164 <LCD_SetVisEx+0x28>
 801014c:	68c3      	ldr	r3, [r0, #12]
 801014e:	2106      	movs	r1, #6
 8010150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010152:	a801      	add	r0, sp, #4
 8010154:	4798      	blx	r3
 8010156:	4603      	mov	r3, r0
 8010158:	2800      	cmp	r0, #0
 801015a:	d0f5      	beq.n	8010148 <LCD_SetVisEx+0xc>
 801015c:	9801      	ldr	r0, [sp, #4]
 801015e:	4621      	mov	r1, r4
 8010160:	4798      	blx	r3
 8010162:	2000      	movs	r0, #0
 8010164:	b002      	add	sp, #8
 8010166:	bd10      	pop	{r4, pc}

08010168 <LCD_SetPosEx>:
 8010168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801016a:	460d      	mov	r5, r1
 801016c:	4614      	mov	r4, r2
 801016e:	f002 fd97 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 8010172:	9001      	str	r0, [sp, #4]
 8010174:	b908      	cbnz	r0, 801017a <LCD_SetPosEx+0x12>
 8010176:	2001      	movs	r0, #1
 8010178:	e00c      	b.n	8010194 <LCD_SetPosEx+0x2c>
 801017a:	68c3      	ldr	r3, [r0, #12]
 801017c:	2103      	movs	r1, #3
 801017e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010180:	a801      	add	r0, sp, #4
 8010182:	4798      	blx	r3
 8010184:	4603      	mov	r3, r0
 8010186:	2800      	cmp	r0, #0
 8010188:	d0f5      	beq.n	8010176 <LCD_SetPosEx+0xe>
 801018a:	9801      	ldr	r0, [sp, #4]
 801018c:	4629      	mov	r1, r5
 801018e:	4622      	mov	r2, r4
 8010190:	4798      	blx	r3
 8010192:	2000      	movs	r0, #0
 8010194:	b003      	add	sp, #12
 8010196:	bd30      	pop	{r4, r5, pc}

08010198 <LCD_SetLUTEntryEx>:
 8010198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801019a:	460d      	mov	r5, r1
 801019c:	4614      	mov	r4, r2
 801019e:	f002 fd7f 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 80101a2:	9001      	str	r0, [sp, #4]
 80101a4:	b908      	cbnz	r0, 80101aa <LCD_SetLUTEntryEx+0x12>
 80101a6:	2001      	movs	r0, #1
 80101a8:	e00c      	b.n	80101c4 <LCD_SetLUTEntryEx+0x2c>
 80101aa:	68c3      	ldr	r3, [r0, #12]
 80101ac:	2110      	movs	r1, #16
 80101ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101b0:	a801      	add	r0, sp, #4
 80101b2:	4798      	blx	r3
 80101b4:	4603      	mov	r3, r0
 80101b6:	2800      	cmp	r0, #0
 80101b8:	d0f5      	beq.n	80101a6 <LCD_SetLUTEntryEx+0xe>
 80101ba:	9801      	ldr	r0, [sp, #4]
 80101bc:	4629      	mov	r1, r5
 80101be:	4622      	mov	r2, r4
 80101c0:	4798      	blx	r3
 80101c2:	2000      	movs	r0, #0
 80101c4:	b003      	add	sp, #12
 80101c6:	bd30      	pop	{r4, r5, pc}

080101c8 <LCD_GetPosEx>:
 80101c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101ca:	460d      	mov	r5, r1
 80101cc:	4614      	mov	r4, r2
 80101ce:	f002 fd67 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 80101d2:	9001      	str	r0, [sp, #4]
 80101d4:	b908      	cbnz	r0, 80101da <LCD_GetPosEx+0x12>
 80101d6:	2001      	movs	r0, #1
 80101d8:	e00c      	b.n	80101f4 <LCD_GetPosEx+0x2c>
 80101da:	68c3      	ldr	r3, [r0, #12]
 80101dc:	2104      	movs	r1, #4
 80101de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e0:	a801      	add	r0, sp, #4
 80101e2:	4798      	blx	r3
 80101e4:	4603      	mov	r3, r0
 80101e6:	2800      	cmp	r0, #0
 80101e8:	d0f5      	beq.n	80101d6 <LCD_GetPosEx+0xe>
 80101ea:	9801      	ldr	r0, [sp, #4]
 80101ec:	4629      	mov	r1, r5
 80101ee:	4622      	mov	r2, r4
 80101f0:	4798      	blx	r3
 80101f2:	2000      	movs	r0, #0
 80101f4:	b003      	add	sp, #12
 80101f6:	bd30      	pop	{r4, r5, pc}

080101f8 <_GetDevProp>:
 80101f8:	2801      	cmp	r0, #1
 80101fa:	b510      	push	{r4, lr}
 80101fc:	460c      	mov	r4, r1
 80101fe:	dc08      	bgt.n	8010212 <_GetDevProp+0x1a>
 8010200:	f002 fd4e 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 8010204:	b120      	cbz	r0, 8010210 <_GetDevProp+0x18>
 8010206:	68c3      	ldr	r3, [r0, #12]
 8010208:	4621      	mov	r1, r4
 801020a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801020c:	4798      	blx	r3
 801020e:	bd10      	pop	{r4, pc}
 8010210:	bd10      	pop	{r4, pc}
 8010212:	2000      	movs	r0, #0
 8010214:	bd10      	pop	{r4, pc}

08010216 <_GetMaxValue>:
 8010216:	b538      	push	{r3, r4, r5, lr}
 8010218:	4604      	mov	r4, r0
 801021a:	4621      	mov	r1, r4
 801021c:	2001      	movs	r0, #1
 801021e:	f7ff ffeb 	bl	80101f8 <_GetDevProp>
 8010222:	4621      	mov	r1, r4
 8010224:	4605      	mov	r5, r0
 8010226:	2000      	movs	r0, #0
 8010228:	f7ff ffe6 	bl	80101f8 <_GetDevProp>
 801022c:	42a8      	cmp	r0, r5
 801022e:	bfb8      	it	lt
 8010230:	4628      	movlt	r0, r5
 8010232:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010236:	bd38      	pop	{r3, r4, r5, pc}

08010238 <LCD_GetXSizeEx>:
 8010238:	2101      	movs	r1, #1
 801023a:	f7ff bfdd 	b.w	80101f8 <_GetDevProp>

0801023e <LCD_GetYSizeEx>:
 801023e:	2102      	movs	r1, #2
 8010240:	f7ff bfda 	b.w	80101f8 <_GetDevProp>

08010244 <LCD_GetVXSizeEx>:
 8010244:	2103      	movs	r1, #3
 8010246:	f7ff bfd7 	b.w	80101f8 <_GetDevProp>

0801024a <LCD_GetVYSizeEx>:
 801024a:	2104      	movs	r1, #4
 801024c:	f7ff bfd4 	b.w	80101f8 <_GetDevProp>

08010250 <LCD_GetBitsPerPixelEx>:
 8010250:	2108      	movs	r1, #8
 8010252:	f7ff bfd1 	b.w	80101f8 <_GetDevProp>

08010256 <LCD_GetNumColorsEx>:
 8010256:	2109      	movs	r1, #9
 8010258:	f7ff bfce 	b.w	80101f8 <_GetDevProp>

0801025c <LCD_GetXSize>:
 801025c:	4b02      	ldr	r3, [pc, #8]	; (8010268 <LCD_GetXSize+0xc>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	7c58      	ldrb	r0, [r3, #17]
 8010262:	f7ff bfe9 	b.w	8010238 <LCD_GetXSizeEx>
 8010266:	bf00      	nop
 8010268:	20000110 	.word	0x20000110

0801026c <LCD_GetYSize>:
 801026c:	4b02      	ldr	r3, [pc, #8]	; (8010278 <LCD_GetYSize+0xc>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	7c58      	ldrb	r0, [r3, #17]
 8010272:	f7ff bfe4 	b.w	801023e <LCD_GetYSizeEx>
 8010276:	bf00      	nop
 8010278:	20000110 	.word	0x20000110

0801027c <LCD_GetNumColors>:
 801027c:	4b02      	ldr	r3, [pc, #8]	; (8010288 <LCD_GetNumColors+0xc>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	7c58      	ldrb	r0, [r3, #17]
 8010282:	f7ff bfe8 	b.w	8010256 <LCD_GetNumColorsEx>
 8010286:	bf00      	nop
 8010288:	20000110 	.word	0x20000110

0801028c <GUI_GetBitsPerPixelEx>:
 801028c:	b508      	push	{r3, lr}
 801028e:	4b04      	ldr	r3, [pc, #16]	; (80102a0 <GUI_GetBitsPerPixelEx+0x14>)
 8010290:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8010294:	68c3      	ldr	r3, [r0, #12]
 8010296:	2108      	movs	r1, #8
 8010298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801029a:	4798      	blx	r3
 801029c:	bd08      	pop	{r3, pc}
 801029e:	bf00      	nop
 80102a0:	2001d5dc 	.word	0x2001d5dc

080102a4 <LCD_GetPaletteEx>:
 80102a4:	b508      	push	{r3, lr}
 80102a6:	f002 fcfb 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 80102aa:	b120      	cbz	r0, 80102b6 <LCD_GetPaletteEx+0x12>
 80102ac:	68c3      	ldr	r3, [r0, #12]
 80102ae:	2102      	movs	r1, #2
 80102b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102b2:	4798      	blx	r3
 80102b4:	bd08      	pop	{r3, pc}
 80102b6:	bd08      	pop	{r3, pc}

080102b8 <LCD_GetPalette>:
 80102b8:	4b02      	ldr	r3, [pc, #8]	; (80102c4 <LCD_GetPalette+0xc>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	7c58      	ldrb	r0, [r3, #17]
 80102be:	f7ff bff1 	b.w	80102a4 <LCD_GetPaletteEx>
 80102c2:	bf00      	nop
 80102c4:	20000110 	.word	0x20000110

080102c8 <GUI_GetpfIndex2ColorEx>:
 80102c8:	4b02      	ldr	r3, [pc, #8]	; (80102d4 <GUI_GetpfIndex2ColorEx+0xc>)
 80102ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80102ce:	691b      	ldr	r3, [r3, #16]
 80102d0:	6858      	ldr	r0, [r3, #4]
 80102d2:	4770      	bx	lr
 80102d4:	2001d5dc 	.word	0x2001d5dc

080102d8 <GUI_GetpfColor2IndexEx>:
 80102d8:	4b02      	ldr	r3, [pc, #8]	; (80102e4 <GUI_GetpfColor2IndexEx+0xc>)
 80102da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80102de:	691b      	ldr	r3, [r3, #16]
 80102e0:	6818      	ldr	r0, [r3, #0]
 80102e2:	4770      	bx	lr
 80102e4:	2001d5dc 	.word	0x2001d5dc

080102e8 <LCD_GetXSizeMax>:
 80102e8:	2001      	movs	r0, #1
 80102ea:	f7ff bf94 	b.w	8010216 <_GetMaxValue>

080102ee <LCD_GetYSizeMax>:
 80102ee:	2002      	movs	r0, #2
 80102f0:	f7ff bf91 	b.w	8010216 <_GetMaxValue>

080102f4 <LCD_GetVXSizeMax>:
 80102f4:	2003      	movs	r0, #3
 80102f6:	f7ff bf8e 	b.w	8010216 <_GetMaxValue>
	...

080102fc <LCD_SetDisplaySize>:
 80102fc:	4b02      	ldr	r3, [pc, #8]	; (8010308 <LCD_SetDisplaySize+0xc>)
 80102fe:	6018      	str	r0, [r3, #0]
 8010300:	4b02      	ldr	r3, [pc, #8]	; (801030c <LCD_SetDisplaySize+0x10>)
 8010302:	6019      	str	r1, [r3, #0]
 8010304:	4770      	bx	lr
 8010306:	bf00      	nop
 8010308:	2001d0f4 	.word	0x2001d0f4
 801030c:	2001d0f0 	.word	0x2001d0f0

08010310 <LCD_GetXSizeDisplay>:
 8010310:	4b01      	ldr	r3, [pc, #4]	; (8010318 <LCD_GetXSizeDisplay+0x8>)
 8010312:	6818      	ldr	r0, [r3, #0]
 8010314:	4770      	bx	lr
 8010316:	bf00      	nop
 8010318:	2001d0f4 	.word	0x2001d0f4

0801031c <LCD_GetYSizeDisplay>:
 801031c:	4b01      	ldr	r3, [pc, #4]	; (8010324 <LCD_GetYSizeDisplay+0x8>)
 801031e:	6818      	ldr	r0, [r3, #0]
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop
 8010324:	2001d0f0 	.word	0x2001d0f0

08010328 <LCD__GetBPP>:
 8010328:	2800      	cmp	r0, #0
 801032a:	d03b      	beq.n	80103a4 <LCD__GetBPP+0x7c>
 801032c:	f030 0301 	bics.w	r3, r0, #1
 8010330:	d029      	beq.n	8010386 <LCD__GetBPP+0x5e>
 8010332:	f030 0303 	bics.w	r3, r0, #3
 8010336:	d028      	beq.n	801038a <LCD__GetBPP+0x62>
 8010338:	f030 0307 	bics.w	r3, r0, #7
 801033c:	d027      	beq.n	801038e <LCD__GetBPP+0x66>
 801033e:	f030 030f 	bics.w	r3, r0, #15
 8010342:	d026      	beq.n	8010392 <LCD__GetBPP+0x6a>
 8010344:	f030 031f 	bics.w	r3, r0, #31
 8010348:	d025      	beq.n	8010396 <LCD__GetBPP+0x6e>
 801034a:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 801034e:	d024      	beq.n	801039a <LCD__GetBPP+0x72>
 8010350:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 8010354:	f023 0301 	bic.w	r3, r3, #1
 8010358:	b30b      	cbz	r3, 801039e <LCD__GetBPP+0x76>
 801035a:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 801035e:	f023 030f 	bic.w	r3, r3, #15
 8010362:	b1e3      	cbz	r3, 801039e <LCD__GetBPP+0x76>
 8010364:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 8010368:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801036c:	b1bb      	cbz	r3, 801039e <LCD__GetBPP+0x76>
 801036e:	0c03      	lsrs	r3, r0, #16
 8010370:	041b      	lsls	r3, r3, #16
 8010372:	b1a3      	cbz	r3, 801039e <LCD__GetBPP+0x76>
 8010374:	0c83      	lsrs	r3, r0, #18
 8010376:	049b      	lsls	r3, r3, #18
 8010378:	b19b      	cbz	r3, 80103a2 <LCD__GetBPP+0x7a>
 801037a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801037e:	bf0c      	ite	eq
 8010380:	2018      	moveq	r0, #24
 8010382:	2020      	movne	r0, #32
 8010384:	4770      	bx	lr
 8010386:	2001      	movs	r0, #1
 8010388:	4770      	bx	lr
 801038a:	2002      	movs	r0, #2
 801038c:	4770      	bx	lr
 801038e:	2003      	movs	r0, #3
 8010390:	4770      	bx	lr
 8010392:	2004      	movs	r0, #4
 8010394:	4770      	bx	lr
 8010396:	2005      	movs	r0, #5
 8010398:	4770      	bx	lr
 801039a:	2008      	movs	r0, #8
 801039c:	4770      	bx	lr
 801039e:	2010      	movs	r0, #16
 80103a0:	4770      	bx	lr
 80103a2:	2012      	movs	r0, #18
 80103a4:	4770      	bx	lr

080103a6 <LCD__GetBPPDevice>:
 80103a6:	b508      	push	{r3, lr}
 80103a8:	f7ff ffbe 	bl	8010328 <LCD__GetBPP>
 80103ac:	2801      	cmp	r0, #1
 80103ae:	d00f      	beq.n	80103d0 <LCD__GetBPPDevice+0x2a>
 80103b0:	1e83      	subs	r3, r0, #2
 80103b2:	2b06      	cmp	r3, #6
 80103b4:	d909      	bls.n	80103ca <LCD__GetBPPDevice+0x24>
 80103b6:	f1a0 0309 	sub.w	r3, r0, #9
 80103ba:	2b07      	cmp	r3, #7
 80103bc:	d907      	bls.n	80103ce <LCD__GetBPPDevice+0x28>
 80103be:	3811      	subs	r0, #17
 80103c0:	2810      	cmp	r0, #16
 80103c2:	bf34      	ite	cc
 80103c4:	2020      	movcc	r0, #32
 80103c6:	2000      	movcs	r0, #0
 80103c8:	bd08      	pop	{r3, pc}
 80103ca:	2008      	movs	r0, #8
 80103cc:	bd08      	pop	{r3, pc}
 80103ce:	2010      	movs	r0, #16
 80103d0:	bd08      	pop	{r3, pc}
	...

080103d4 <_SetDrawMode>:
 80103d4:	b570      	push	{r4, r5, r6, lr}
 80103d6:	4b08      	ldr	r3, [pc, #32]	; (80103f8 <_SetDrawMode+0x24>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	7c1a      	ldrb	r2, [r3, #16]
 80103dc:	ea80 0102 	eor.w	r1, r0, r2
 80103e0:	0749      	lsls	r1, r1, #29
 80103e2:	d505      	bpl.n	80103f0 <_SetDrawMode+0x1c>
 80103e4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80103e6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80103e8:	6826      	ldr	r6, [r4, #0]
 80103ea:	680d      	ldr	r5, [r1, #0]
 80103ec:	6025      	str	r5, [r4, #0]
 80103ee:	600e      	str	r6, [r1, #0]
 80103f0:	7418      	strb	r0, [r3, #16]
 80103f2:	4610      	mov	r0, r2
 80103f4:	bd70      	pop	{r4, r5, r6, pc}
 80103f6:	bf00      	nop
 80103f8:	20000110 	.word	0x20000110

080103fc <LCD_SetDrawMode>:
 80103fc:	b508      	push	{r3, lr}
 80103fe:	4b02      	ldr	r3, [pc, #8]	; (8010408 <LCD_SetDrawMode+0xc>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	689b      	ldr	r3, [r3, #8]
 8010404:	4798      	blx	r3
 8010406:	bd08      	pop	{r3, pc}
 8010408:	200000f4 	.word	0x200000f4

0801040c <LCD_DrawPixel>:
 801040c:	b538      	push	{r3, r4, r5, lr}
 801040e:	4b14      	ldr	r3, [pc, #80]	; (8010460 <LCD_DrawPixel+0x54>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	460a      	mov	r2, r1
 8010414:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8010418:	428a      	cmp	r2, r1
 801041a:	4604      	mov	r4, r0
 801041c:	db1e      	blt.n	801045c <LCD_DrawPixel+0x50>
 801041e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8010422:	428a      	cmp	r2, r1
 8010424:	dc1a      	bgt.n	801045c <LCD_DrawPixel+0x50>
 8010426:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801042a:	4288      	cmp	r0, r1
 801042c:	db16      	blt.n	801045c <LCD_DrawPixel+0x50>
 801042e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8010432:	4288      	cmp	r0, r1
 8010434:	dc12      	bgt.n	801045c <LCD_DrawPixel+0x50>
 8010436:	7c19      	ldrb	r1, [r3, #16]
 8010438:	7c58      	ldrb	r0, [r3, #17]
 801043a:	f011 0f01 	tst.w	r1, #1
 801043e:	4909      	ldr	r1, [pc, #36]	; (8010464 <LCD_DrawPixel+0x58>)
 8010440:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8010444:	d004      	beq.n	8010450 <LCD_DrawPixel+0x44>
 8010446:	68c3      	ldr	r3, [r0, #12]
 8010448:	4621      	mov	r1, r4
 801044a:	69db      	ldr	r3, [r3, #28]
 801044c:	4798      	blx	r3
 801044e:	bd38      	pop	{r3, r4, r5, pc}
 8010450:	68c1      	ldr	r1, [r0, #12]
 8010452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010454:	698d      	ldr	r5, [r1, #24]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4621      	mov	r1, r4
 801045a:	47a8      	blx	r5
 801045c:	bd38      	pop	{r3, r4, r5, pc}
 801045e:	bf00      	nop
 8010460:	20000110 	.word	0x20000110
 8010464:	2001d5dc 	.word	0x2001d5dc

08010468 <LCD_DrawHLine>:
 8010468:	b538      	push	{r3, r4, r5, lr}
 801046a:	4b10      	ldr	r3, [pc, #64]	; (80104ac <LCD_DrawHLine+0x44>)
 801046c:	681c      	ldr	r4, [r3, #0]
 801046e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010472:	4299      	cmp	r1, r3
 8010474:	460d      	mov	r5, r1
 8010476:	db17      	blt.n	80104a8 <LCD_DrawHLine+0x40>
 8010478:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801047c:	4299      	cmp	r1, r3
 801047e:	dc13      	bgt.n	80104a8 <LCD_DrawHLine+0x40>
 8010480:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8010484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010488:	4288      	cmp	r0, r1
 801048a:	bfa8      	it	ge
 801048c:	4601      	movge	r1, r0
 801048e:	429a      	cmp	r2, r3
 8010490:	bfb8      	it	lt
 8010492:	4613      	movlt	r3, r2
 8010494:	428b      	cmp	r3, r1
 8010496:	db07      	blt.n	80104a8 <LCD_DrawHLine+0x40>
 8010498:	7c60      	ldrb	r0, [r4, #17]
 801049a:	4a05      	ldr	r2, [pc, #20]	; (80104b0 <LCD_DrawHLine+0x48>)
 801049c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80104a0:	68c2      	ldr	r2, [r0, #12]
 80104a2:	6894      	ldr	r4, [r2, #8]
 80104a4:	462a      	mov	r2, r5
 80104a6:	47a0      	blx	r4
 80104a8:	bd38      	pop	{r3, r4, r5, pc}
 80104aa:	bf00      	nop
 80104ac:	20000110 	.word	0x20000110
 80104b0:	2001d5dc 	.word	0x2001d5dc

080104b4 <LCD_DrawVLine>:
 80104b4:	b538      	push	{r3, r4, r5, lr}
 80104b6:	4b10      	ldr	r3, [pc, #64]	; (80104f8 <LCD_DrawVLine+0x44>)
 80104b8:	681c      	ldr	r4, [r3, #0]
 80104ba:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80104be:	4605      	mov	r5, r0
 80104c0:	429d      	cmp	r5, r3
 80104c2:	4610      	mov	r0, r2
 80104c4:	db17      	blt.n	80104f6 <LCD_DrawVLine+0x42>
 80104c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104ca:	429d      	cmp	r5, r3
 80104cc:	dc13      	bgt.n	80104f6 <LCD_DrawVLine+0x42>
 80104ce:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80104d2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80104d6:	4291      	cmp	r1, r2
 80104d8:	bfa8      	it	ge
 80104da:	460a      	movge	r2, r1
 80104dc:	4298      	cmp	r0, r3
 80104de:	bfb8      	it	lt
 80104e0:	4603      	movlt	r3, r0
 80104e2:	4293      	cmp	r3, r2
 80104e4:	db07      	blt.n	80104f6 <LCD_DrawVLine+0x42>
 80104e6:	7c60      	ldrb	r0, [r4, #17]
 80104e8:	4904      	ldr	r1, [pc, #16]	; (80104fc <LCD_DrawVLine+0x48>)
 80104ea:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80104ee:	68c1      	ldr	r1, [r0, #12]
 80104f0:	68cc      	ldr	r4, [r1, #12]
 80104f2:	4629      	mov	r1, r5
 80104f4:	47a0      	blx	r4
 80104f6:	bd38      	pop	{r3, r4, r5, pc}
 80104f8:	20000110 	.word	0x20000110
 80104fc:	2001d5dc 	.word	0x2001d5dc

08010500 <LCD_FillRect>:
 8010500:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010502:	460e      	mov	r6, r1
 8010504:	4912      	ldr	r1, [pc, #72]	; (8010550 <LCD_FillRect+0x50>)
 8010506:	680c      	ldr	r4, [r1, #0]
 8010508:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801050c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010510:	4288      	cmp	r0, r1
 8010512:	bfa8      	it	ge
 8010514:	4601      	movge	r1, r0
 8010516:	42aa      	cmp	r2, r5
 8010518:	bfb8      	it	lt
 801051a:	4615      	movlt	r5, r2
 801051c:	428d      	cmp	r5, r1
 801051e:	db14      	blt.n	801054a <LCD_FillRect+0x4a>
 8010520:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8010524:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8010528:	4296      	cmp	r6, r2
 801052a:	bfa8      	it	ge
 801052c:	4632      	movge	r2, r6
 801052e:	4283      	cmp	r3, r0
 8010530:	bfa8      	it	ge
 8010532:	4603      	movge	r3, r0
 8010534:	4293      	cmp	r3, r2
 8010536:	db08      	blt.n	801054a <LCD_FillRect+0x4a>
 8010538:	7c64      	ldrb	r4, [r4, #17]
 801053a:	4806      	ldr	r0, [pc, #24]	; (8010554 <LCD_FillRect+0x54>)
 801053c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010540:	68c4      	ldr	r4, [r0, #12]
 8010542:	9300      	str	r3, [sp, #0]
 8010544:	6924      	ldr	r4, [r4, #16]
 8010546:	462b      	mov	r3, r5
 8010548:	47a0      	blx	r4
 801054a:	b002      	add	sp, #8
 801054c:	bd70      	pop	{r4, r5, r6, pc}
 801054e:	bf00      	nop
 8010550:	20000110 	.word	0x20000110
 8010554:	2001d5dc 	.word	0x2001d5dc

08010558 <LCD__DrawBitmap_1bpp>:
 8010558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801055c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 801070c <LCD__DrawBitmap_1bpp+0x1b4>
 8010560:	b08f      	sub	sp, #60	; 0x3c
 8010562:	f8dc c000 	ldr.w	ip, [ip]
 8010566:	9009      	str	r0, [sp, #36]	; 0x24
 8010568:	460e      	mov	r6, r1
 801056a:	4615      	mov	r5, r2
 801056c:	469b      	mov	fp, r3
 801056e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8010570:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8010574:	f1bc 0f00 	cmp.w	ip, #0
 8010578:	d00d      	beq.n	8010596 <LCD__DrawBitmap_1bpp+0x3e>
 801057a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801057c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801057e:	9500      	str	r5, [sp, #0]
 8010580:	9601      	str	r6, [sp, #4]
 8010582:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8010584:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010586:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010588:	9702      	str	r7, [sp, #8]
 801058a:	9503      	str	r5, [sp, #12]
 801058c:	9404      	str	r4, [sp, #16]
 801058e:	9605      	str	r6, [sp, #20]
 8010590:	f8dc 4000 	ldr.w	r4, [ip]
 8010594:	e053      	b.n	801063e <LCD__DrawBitmap_1bpp+0xe6>
 8010596:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8010598:	9819      	ldr	r0, [sp, #100]	; 0x64
 801059a:	ea47 0300 	orr.w	r3, r7, r0
 801059e:	2b01      	cmp	r3, #1
 80105a0:	d14f      	bne.n	8010642 <LCD__DrawBitmap_1bpp+0xea>
 80105a2:	4b58      	ldr	r3, [pc, #352]	; (8010704 <LCD__DrawBitmap_1bpp+0x1ac>)
 80105a4:	6818      	ldr	r0, [r3, #0]
 80105a6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80105aa:	1a51      	subs	r1, r2, r1
 80105ac:	2900      	cmp	r1, #0
 80105ae:	dd08      	ble.n	80105c2 <LCD__DrawBitmap_1bpp+0x6a>
 80105b0:	ebc1 030b 	rsb	r3, r1, fp
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	f340 80a2 	ble.w	80106fe <LCD__DrawBitmap_1bpp+0x1a6>
 80105ba:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80105bc:	fb07 4401 	mla	r4, r7, r1, r4
 80105c0:	e001      	b.n	80105c6 <LCD__DrawBitmap_1bpp+0x6e>
 80105c2:	465b      	mov	r3, fp
 80105c4:	4632      	mov	r2, r6
 80105c6:	445e      	add	r6, fp
 80105c8:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 80105cc:	3e01      	subs	r6, #1
 80105ce:	1a76      	subs	r6, r6, r1
 80105d0:	2e00      	cmp	r6, #0
 80105d2:	dd03      	ble.n	80105dc <LCD__DrawBitmap_1bpp+0x84>
 80105d4:	1b9b      	subs	r3, r3, r6
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	f340 8091 	ble.w	80106fe <LCD__DrawBitmap_1bpp+0x1a6>
 80105dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105de:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 80105e2:	4429      	add	r1, r5
 80105e4:	3901      	subs	r1, #1
 80105e6:	1b89      	subs	r1, r1, r6
 80105e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80105ea:	2900      	cmp	r1, #0
 80105ec:	bfc8      	it	gt
 80105ee:	ebc1 0505 	rsbgt	r5, r1, r5
 80105f2:	ebc8 0106 	rsb	r1, r8, r6
 80105f6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80105fa:	42b1      	cmp	r1, r6
 80105fc:	da0c      	bge.n	8010618 <LCD__DrawBitmap_1bpp+0xc0>
 80105fe:	ebc1 0c06 	rsb	ip, r1, r6
 8010602:	eb08 070c 	add.w	r7, r8, ip
 8010606:	1b8e      	subs	r6, r1, r6
 8010608:	f02c 0c07 	bic.w	ip, ip, #7
 801060c:	4435      	add	r5, r6
 801060e:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 8010612:	4461      	add	r1, ip
 8010614:	f007 0807 	and.w	r8, r7, #7
 8010618:	2d00      	cmp	r5, #0
 801061a:	dd70      	ble.n	80106fe <LCD__DrawBitmap_1bpp+0x1a6>
 801061c:	7c46      	ldrb	r6, [r0, #17]
 801061e:	483a      	ldr	r0, [pc, #232]	; (8010708 <LCD__DrawBitmap_1bpp+0x1b0>)
 8010620:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8010622:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8010626:	68c6      	ldr	r6, [r0, #12]
 8010628:	9701      	str	r7, [sp, #4]
 801062a:	9403      	str	r4, [sp, #12]
 801062c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801062e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8010630:	9300      	str	r3, [sp, #0]
 8010632:	9702      	str	r7, [sp, #8]
 8010634:	f8cd 8010 	str.w	r8, [sp, #16]
 8010638:	9405      	str	r4, [sp, #20]
 801063a:	6874      	ldr	r4, [r6, #4]
 801063c:	462b      	mov	r3, r5
 801063e:	47a0      	blx	r4
 8010640:	e05d      	b.n	80106fe <LCD__DrawBitmap_1bpp+0x1a6>
 8010642:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8010644:	f1c7 0708 	rsb	r7, r7, #8
 8010648:	970c      	str	r7, [sp, #48]	; 0x30
 801064a:	4667      	mov	r7, ip
 801064c:	45dc      	cmp	ip, fp
 801064e:	da56      	bge.n	80106fe <LCD__DrawBitmap_1bpp+0x1a6>
 8010650:	4b2c      	ldr	r3, [pc, #176]	; (8010704 <LCD__DrawBitmap_1bpp+0x1ac>)
 8010652:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4430      	add	r0, r6
 8010658:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801065c:	900a      	str	r0, [sp, #40]	; 0x28
 801065e:	1e41      	subs	r1, r0, #1
 8010660:	4291      	cmp	r1, r2
 8010662:	910b      	str	r1, [sp, #44]	; 0x2c
 8010664:	db45      	blt.n	80106f2 <LCD__DrawBitmap_1bpp+0x19a>
 8010666:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801066a:	429e      	cmp	r6, r3
 801066c:	dc41      	bgt.n	80106f2 <LCD__DrawBitmap_1bpp+0x19a>
 801066e:	f04f 0800 	mov.w	r8, #0
 8010672:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010676:	9408      	str	r4, [sp, #32]
 8010678:	46c2      	mov	sl, r8
 801067a:	45aa      	cmp	sl, r5
 801067c:	da39      	bge.n	80106f2 <LCD__DrawBitmap_1bpp+0x19a>
 801067e:	f1b8 0f00 	cmp.w	r8, #0
 8010682:	d105      	bne.n	8010690 <LCD__DrawBitmap_1bpp+0x138>
 8010684:	9a08      	ldr	r2, [sp, #32]
 8010686:	7817      	ldrb	r7, [r2, #0]
 8010688:	3201      	adds	r2, #1
 801068a:	9208      	str	r2, [sp, #32]
 801068c:	f04f 0808 	mov.w	r8, #8
 8010690:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010692:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010694:	4a1b      	ldr	r2, [pc, #108]	; (8010704 <LCD__DrawBitmap_1bpp+0x1ac>)
 8010696:	fa47 f300 	asr.w	r3, r7, r0
 801069a:	ebc1 0808 	rsb	r8, r1, r8
 801069e:	408f      	lsls	r7, r1
 80106a0:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 80106a4:	b2ff      	uxtb	r7, r7
 80106a6:	d103      	bne.n	80106b0 <LCD__DrawBitmap_1bpp+0x158>
 80106a8:	6810      	ldr	r0, [r2, #0]
 80106aa:	7c00      	ldrb	r0, [r0, #16]
 80106ac:	0780      	lsls	r0, r0, #30
 80106ae:	d41b      	bmi.n	80106e8 <LCD__DrawBitmap_1bpp+0x190>
 80106b0:	6812      	ldr	r2, [r2, #0]
 80106b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80106b4:	6810      	ldr	r0, [r2, #0]
 80106b6:	900d      	str	r0, [sp, #52]	; 0x34
 80106b8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80106ba:	b110      	cbz	r0, 80106c2 <LCD__DrawBitmap_1bpp+0x16a>
 80106bc:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80106c0:	e000      	b.n	80106c4 <LCD__DrawBitmap_1bpp+0x16c>
 80106c2:	b2db      	uxtb	r3, r3
 80106c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80106c6:	6013      	str	r3, [r2, #0]
 80106c8:	1e4a      	subs	r2, r1, #1
 80106ca:	444a      	add	r2, r9
 80106cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106ce:	f8cd c01c 	str.w	ip, [sp, #28]
 80106d2:	4648      	mov	r0, r9
 80106d4:	4631      	mov	r1, r6
 80106d6:	f7ff ff13 	bl	8010500 <LCD_FillRect>
 80106da:	4b0a      	ldr	r3, [pc, #40]	; (8010704 <LCD__DrawBitmap_1bpp+0x1ac>)
 80106dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80106e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106e6:	601a      	str	r2, [r3, #0]
 80106e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80106ea:	f10a 0a01 	add.w	sl, sl, #1
 80106ee:	4499      	add	r9, r3
 80106f0:	e7c3      	b.n	801067a <LCD__DrawBitmap_1bpp+0x122>
 80106f2:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80106f4:	f10c 0c01 	add.w	ip, ip, #1
 80106f8:	4434      	add	r4, r6
 80106fa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80106fc:	e7a6      	b.n	801064c <LCD__DrawBitmap_1bpp+0xf4>
 80106fe:	b00f      	add	sp, #60	; 0x3c
 8010700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010704:	20000110 	.word	0x20000110
 8010708:	2001d5dc 	.word	0x2001d5dc
 801070c:	2001d5b0 	.word	0x2001d5b0

08010710 <LCD_DrawBitmap>:
 8010710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010714:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8010924 <LCD_DrawBitmap+0x214>
 8010718:	b091      	sub	sp, #68	; 0x44
 801071a:	f8dc 9000 	ldr.w	r9, [ip]
 801071e:	9207      	str	r2, [sp, #28]
 8010720:	4605      	mov	r5, r0
 8010722:	4688      	mov	r8, r1
 8010724:	469b      	mov	fp, r3
 8010726:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8010728:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801072a:	f1b9 0f00 	cmp.w	r9, #0
 801072e:	d00c      	beq.n	801074a <LCD_DrawBitmap+0x3a>
 8010730:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8010732:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8010734:	9500      	str	r5, [sp, #0]
 8010736:	9701      	str	r7, [sp, #4]
 8010738:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801073a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 801073c:	9602      	str	r6, [sp, #8]
 801073e:	9503      	str	r5, [sp, #12]
 8010740:	9404      	str	r4, [sp, #16]
 8010742:	9705      	str	r7, [sp, #20]
 8010744:	f8d9 4000 	ldr.w	r4, [r9]
 8010748:	e081      	b.n	801084e <LCD_DrawBitmap+0x13e>
 801074a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801074c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801074e:	ea47 0300 	orr.w	r3, r7, r0
 8010752:	2b01      	cmp	r3, #1
 8010754:	d17d      	bne.n	8010852 <LCD_DrawBitmap+0x142>
 8010756:	4b71      	ldr	r3, [pc, #452]	; (801091c <LCD_DrawBitmap+0x20c>)
 8010758:	6818      	ldr	r0, [r3, #0]
 801075a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801075e:	1a53      	subs	r3, r2, r1
 8010760:	2b00      	cmp	r3, #0
 8010762:	dd08      	ble.n	8010776 <LCD_DrawBitmap+0x66>
 8010764:	ebc3 010b 	rsb	r1, r3, fp
 8010768:	2900      	cmp	r1, #0
 801076a:	f340 80d4 	ble.w	8010916 <LCD_DrawBitmap+0x206>
 801076e:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8010770:	fb07 4403 	mla	r4, r7, r3, r4
 8010774:	e001      	b.n	801077a <LCD_DrawBitmap+0x6a>
 8010776:	4659      	mov	r1, fp
 8010778:	4642      	mov	r2, r8
 801077a:	44d8      	add	r8, fp
 801077c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8010780:	f108 38ff 	add.w	r8, r8, #4294967295
 8010784:	ebc3 0808 	rsb	r8, r3, r8
 8010788:	f1b8 0f00 	cmp.w	r8, #0
 801078c:	dd04      	ble.n	8010798 <LCD_DrawBitmap+0x88>
 801078e:	ebc8 0101 	rsb	r1, r8, r1
 8010792:	2900      	cmp	r1, #0
 8010794:	f340 80bf 	ble.w	8010916 <LCD_DrawBitmap+0x206>
 8010798:	9b07      	ldr	r3, [sp, #28]
 801079a:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 801079e:	442b      	add	r3, r5
 80107a0:	3b01      	subs	r3, #1
 80107a2:	ebcc 0303 	rsb	r3, ip, r3
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	dd02      	ble.n	80107b0 <LCD_DrawBitmap+0xa0>
 80107aa:	9f07      	ldr	r7, [sp, #28]
 80107ac:	1aff      	subs	r7, r7, r3
 80107ae:	9707      	str	r7, [sp, #28]
 80107b0:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 80107b4:	4565      	cmp	r5, ip
 80107b6:	da33      	bge.n	8010820 <LCD_DrawBitmap+0x110>
 80107b8:	9f07      	ldr	r7, [sp, #28]
 80107ba:	ebc5 030c 	rsb	r3, r5, ip
 80107be:	1aff      	subs	r7, r7, r3
 80107c0:	2e08      	cmp	r6, #8
 80107c2:	9707      	str	r7, [sp, #28]
 80107c4:	d027      	beq.n	8010816 <LCD_DrawBitmap+0x106>
 80107c6:	dc0d      	bgt.n	80107e4 <LCD_DrawBitmap+0xd4>
 80107c8:	2e02      	cmp	r6, #2
 80107ca:	d014      	beq.n	80107f6 <LCD_DrawBitmap+0xe6>
 80107cc:	2e04      	cmp	r6, #4
 80107ce:	d01a      	beq.n	8010806 <LCD_DrawBitmap+0xf6>
 80107d0:	2e01      	cmp	r6, #1
 80107d2:	d126      	bne.n	8010822 <LCD_DrawBitmap+0x112>
 80107d4:	f023 0c07 	bic.w	ip, r3, #7
 80107d8:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 80107dc:	4465      	add	r5, ip
 80107de:	f003 0307 	and.w	r3, r3, #7
 80107e2:	e01e      	b.n	8010822 <LCD_DrawBitmap+0x112>
 80107e4:	2e18      	cmp	r6, #24
 80107e6:	d018      	beq.n	801081a <LCD_DrawBitmap+0x10a>
 80107e8:	2e20      	cmp	r6, #32
 80107ea:	d016      	beq.n	801081a <LCD_DrawBitmap+0x10a>
 80107ec:	2e10      	cmp	r6, #16
 80107ee:	d118      	bne.n	8010822 <LCD_DrawBitmap+0x112>
 80107f0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80107f4:	e013      	b.n	801081e <LCD_DrawBitmap+0x10e>
 80107f6:	f023 0c03 	bic.w	ip, r3, #3
 80107fa:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 80107fe:	4465      	add	r5, ip
 8010800:	f003 0303 	and.w	r3, r3, #3
 8010804:	e00d      	b.n	8010822 <LCD_DrawBitmap+0x112>
 8010806:	f023 0c01 	bic.w	ip, r3, #1
 801080a:	eb04 0463 	add.w	r4, r4, r3, asr #1
 801080e:	4465      	add	r5, ip
 8010810:	f003 0301 	and.w	r3, r3, #1
 8010814:	e005      	b.n	8010822 <LCD_DrawBitmap+0x112>
 8010816:	441c      	add	r4, r3
 8010818:	e001      	b.n	801081e <LCD_DrawBitmap+0x10e>
 801081a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801081e:	4665      	mov	r5, ip
 8010820:	2300      	movs	r3, #0
 8010822:	9f07      	ldr	r7, [sp, #28]
 8010824:	2f00      	cmp	r7, #0
 8010826:	dd76      	ble.n	8010916 <LCD_DrawBitmap+0x206>
 8010828:	f890 e011 	ldrb.w	lr, [r0, #17]
 801082c:	483c      	ldr	r0, [pc, #240]	; (8010920 <LCD_DrawBitmap+0x210>)
 801082e:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8010830:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 8010834:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8010838:	9403      	str	r4, [sp, #12]
 801083a:	e88d 0042 	stmia.w	sp, {r1, r6}
 801083e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8010840:	9304      	str	r3, [sp, #16]
 8010842:	9702      	str	r7, [sp, #8]
 8010844:	9405      	str	r4, [sp, #20]
 8010846:	f8de 4004 	ldr.w	r4, [lr, #4]
 801084a:	9b07      	ldr	r3, [sp, #28]
 801084c:	4629      	mov	r1, r5
 801084e:	47a0      	blx	r4
 8010850:	e061      	b.n	8010916 <LCD_DrawBitmap+0x206>
 8010852:	f1c6 0708 	rsb	r7, r6, #8
 8010856:	970e      	str	r7, [sp, #56]	; 0x38
 8010858:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801085c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801085e:	455f      	cmp	r7, fp
 8010860:	da59      	bge.n	8010916 <LCD_DrawBitmap+0x206>
 8010862:	4b2e      	ldr	r3, [pc, #184]	; (801091c <LCD_DrawBitmap+0x20c>)
 8010864:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4447      	add	r7, r8
 801086a:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801086e:	970c      	str	r7, [sp, #48]	; 0x30
 8010870:	3f01      	subs	r7, #1
 8010872:	4297      	cmp	r7, r2
 8010874:	970d      	str	r7, [sp, #52]	; 0x34
 8010876:	db46      	blt.n	8010906 <LCD_DrawBitmap+0x1f6>
 8010878:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801087c:	4598      	cmp	r8, r3
 801087e:	dc42      	bgt.n	8010906 <LCD_DrawBitmap+0x1f6>
 8010880:	f04f 0a00 	mov.w	sl, #0
 8010884:	940b      	str	r4, [sp, #44]	; 0x2c
 8010886:	46ac      	mov	ip, r5
 8010888:	4657      	mov	r7, sl
 801088a:	9807      	ldr	r0, [sp, #28]
 801088c:	4287      	cmp	r7, r0
 801088e:	da3a      	bge.n	8010906 <LCD_DrawBitmap+0x1f6>
 8010890:	f1ba 0f00 	cmp.w	sl, #0
 8010894:	d106      	bne.n	80108a4 <LCD_DrawBitmap+0x194>
 8010896:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010898:	f890 9000 	ldrb.w	r9, [r0]
 801089c:	3001      	adds	r0, #1
 801089e:	900b      	str	r0, [sp, #44]	; 0x2c
 80108a0:	f04f 0a08 	mov.w	sl, #8
 80108a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80108a6:	4a1d      	ldr	r2, [pc, #116]	; (801091c <LCD_DrawBitmap+0x20c>)
 80108a8:	fa49 f301 	asr.w	r3, r9, r1
 80108ac:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 80108b0:	fa09 f906 	lsl.w	r9, r9, r6
 80108b4:	fa5f f989 	uxtb.w	r9, r9
 80108b8:	ebc6 0a0a 	rsb	sl, r6, sl
 80108bc:	d103      	bne.n	80108c6 <LCD_DrawBitmap+0x1b6>
 80108be:	6810      	ldr	r0, [r2, #0]
 80108c0:	7c00      	ldrb	r0, [r0, #16]
 80108c2:	0780      	lsls	r0, r0, #30
 80108c4:	d41b      	bmi.n	80108fe <LCD_DrawBitmap+0x1ee>
 80108c6:	6812      	ldr	r2, [r2, #0]
 80108c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80108ca:	6810      	ldr	r0, [r2, #0]
 80108cc:	900f      	str	r0, [sp, #60]	; 0x3c
 80108ce:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80108d0:	b110      	cbz	r0, 80108d8 <LCD_DrawBitmap+0x1c8>
 80108d2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80108d6:	e000      	b.n	80108da <LCD_DrawBitmap+0x1ca>
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	991a      	ldr	r1, [sp, #104]	; 0x68
 80108dc:	6013      	str	r3, [r2, #0]
 80108de:	1e4a      	subs	r2, r1, #1
 80108e0:	4462      	add	r2, ip
 80108e2:	4660      	mov	r0, ip
 80108e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108e6:	f8cd c020 	str.w	ip, [sp, #32]
 80108ea:	4641      	mov	r1, r8
 80108ec:	f7ff fe08 	bl	8010500 <LCD_FillRect>
 80108f0:	4b0a      	ldr	r3, [pc, #40]	; (801091c <LCD_DrawBitmap+0x20c>)
 80108f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	f8dd c020 	ldr.w	ip, [sp, #32]
 80108fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108fc:	601a      	str	r2, [r3, #0]
 80108fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010900:	3701      	adds	r7, #1
 8010902:	449c      	add	ip, r3
 8010904:	e7c1      	b.n	801088a <LCD_DrawBitmap+0x17a>
 8010906:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8010908:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801090c:	3701      	adds	r7, #1
 801090e:	970a      	str	r7, [sp, #40]	; 0x28
 8010910:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8010912:	443c      	add	r4, r7
 8010914:	e7a2      	b.n	801085c <LCD_DrawBitmap+0x14c>
 8010916:	b011      	add	sp, #68	; 0x44
 8010918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801091c:	20000110 	.word	0x20000110
 8010920:	2001d5dc 	.word	0x2001d5dc
 8010924:	2001d5b0 	.word	0x2001d5b0

08010928 <LCD_SetClipRectMax>:
 8010928:	b508      	push	{r3, lr}
 801092a:	4b05      	ldr	r3, [pc, #20]	; (8010940 <LCD_SetClipRectMax+0x18>)
 801092c:	6819      	ldr	r1, [r3, #0]
 801092e:	4b05      	ldr	r3, [pc, #20]	; (8010944 <LCD_SetClipRectMax+0x1c>)
 8010930:	7c4a      	ldrb	r2, [r1, #17]
 8010932:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010936:	68c3      	ldr	r3, [r0, #12]
 8010938:	3108      	adds	r1, #8
 801093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801093c:	4798      	blx	r3
 801093e:	bd08      	pop	{r3, pc}
 8010940:	20000110 	.word	0x20000110
 8010944:	2001d5dc 	.word	0x2001d5dc

08010948 <emWin_LCD_Init>:
 8010948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801094a:	f7ff ffed 	bl	8010928 <LCD_SetClipRectMax>
 801094e:	f006 fb8f 	bl	8017070 <LCD_InitColors>
 8010952:	4604      	mov	r4, r0
 8010954:	2800      	cmp	r0, #0
 8010956:	d13d      	bne.n	80109d4 <emWin_LCD_Init+0x8c>
 8010958:	4605      	mov	r5, r0
 801095a:	4628      	mov	r0, r5
 801095c:	f002 f9a0 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 8010960:	9001      	str	r0, [sp, #4]
 8010962:	b148      	cbz	r0, 8010978 <emWin_LCD_Init+0x30>
 8010964:	68c3      	ldr	r3, [r0, #12]
 8010966:	210c      	movs	r1, #12
 8010968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801096a:	a801      	add	r0, sp, #4
 801096c:	4798      	blx	r3
 801096e:	4603      	mov	r3, r0
 8010970:	b370      	cbz	r0, 80109d0 <emWin_LCD_Init+0x88>
 8010972:	9801      	ldr	r0, [sp, #4]
 8010974:	4798      	blx	r3
 8010976:	4304      	orrs	r4, r0
 8010978:	3501      	adds	r5, #1
 801097a:	2d02      	cmp	r5, #2
 801097c:	d1ed      	bne.n	801095a <emWin_LCD_Init+0x12>
 801097e:	bb4c      	cbnz	r4, 80109d4 <emWin_LCD_Init+0x8c>
 8010980:	f006 fbc2 	bl	8017108 <LCD_InitLUT>
 8010984:	2401      	movs	r4, #1
 8010986:	4620      	mov	r0, r4
 8010988:	f002 f98a 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 801098c:	9001      	str	r0, [sp, #4]
 801098e:	b1d0      	cbz	r0, 80109c6 <emWin_LCD_Init+0x7e>
 8010990:	4620      	mov	r0, r4
 8010992:	f001 fac5 	bl	8011f20 <GUI_SelectLayer>
 8010996:	2004      	movs	r0, #4
 8010998:	f7ff fd30 	bl	80103fc <LCD_SetDrawMode>
 801099c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80109a0:	2000      	movs	r0, #0
 80109a2:	4601      	mov	r1, r0
 80109a4:	4613      	mov	r3, r2
 80109a6:	f7ff fdab 	bl	8010500 <LCD_FillRect>
 80109aa:	2000      	movs	r0, #0
 80109ac:	f7ff fd26 	bl	80103fc <LCD_SetDrawMode>
 80109b0:	a802      	add	r0, sp, #8
 80109b2:	210e      	movs	r1, #14
 80109b4:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80109b8:	68db      	ldr	r3, [r3, #12]
 80109ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109bc:	4798      	blx	r3
 80109be:	4603      	mov	r3, r0
 80109c0:	b108      	cbz	r0, 80109c6 <emWin_LCD_Init+0x7e>
 80109c2:	9801      	ldr	r0, [sp, #4]
 80109c4:	4798      	blx	r3
 80109c6:	f114 34ff 	adds.w	r4, r4, #4294967295
 80109ca:	d2dc      	bcs.n	8010986 <emWin_LCD_Init+0x3e>
 80109cc:	2000      	movs	r0, #0
 80109ce:	e002      	b.n	80109d6 <emWin_LCD_Init+0x8e>
 80109d0:	2001      	movs	r0, #1
 80109d2:	e000      	b.n	80109d6 <emWin_LCD_Init+0x8e>
 80109d4:	4620      	mov	r0, r4
 80109d6:	b003      	add	sp, #12
 80109d8:	bd30      	pop	{r4, r5, pc}
	...

080109dc <LCD_Color2Index>:
 80109dc:	b508      	push	{r3, lr}
 80109de:	4b05      	ldr	r3, [pc, #20]	; (80109f4 <LCD_Color2Index+0x18>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	7c5a      	ldrb	r2, [r3, #17]
 80109e4:	4b04      	ldr	r3, [pc, #16]	; (80109f8 <LCD_Color2Index+0x1c>)
 80109e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109ea:	691b      	ldr	r3, [r3, #16]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	4798      	blx	r3
 80109f0:	bd08      	pop	{r3, pc}
 80109f2:	bf00      	nop
 80109f4:	20000110 	.word	0x20000110
 80109f8:	2001d5dc 	.word	0x2001d5dc

080109fc <LCD_Index2Color>:
 80109fc:	b508      	push	{r3, lr}
 80109fe:	4b05      	ldr	r3, [pc, #20]	; (8010a14 <LCD_Index2Color+0x18>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	7c5a      	ldrb	r2, [r3, #17]
 8010a04:	4b04      	ldr	r3, [pc, #16]	; (8010a18 <LCD_Index2Color+0x1c>)
 8010a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a0a:	691b      	ldr	r3, [r3, #16]
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	4798      	blx	r3
 8010a10:	bd08      	pop	{r3, pc}
 8010a12:	bf00      	nop
 8010a14:	20000110 	.word	0x20000110
 8010a18:	2001d5dc 	.word	0x2001d5dc

08010a1c <LCD_SetColorIndex>:
 8010a1c:	4b04      	ldr	r3, [pc, #16]	; (8010a30 <LCD_SetColorIndex+0x14>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	7c1a      	ldrb	r2, [r3, #16]
 8010a22:	0752      	lsls	r2, r2, #29
 8010a24:	bf4c      	ite	mi
 8010a26:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 8010a28:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 8010a2a:	6018      	str	r0, [r3, #0]
 8010a2c:	4770      	bx	lr
 8010a2e:	bf00      	nop
 8010a30:	20000110 	.word	0x20000110

08010a34 <_SetColor>:
 8010a34:	b508      	push	{r3, lr}
 8010a36:	4b06      	ldr	r3, [pc, #24]	; (8010a50 <_SetColor+0x1c>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010a3c:	4281      	cmp	r1, r0
 8010a3e:	d006      	beq.n	8010a4e <_SetColor+0x1a>
 8010a40:	6318      	str	r0, [r3, #48]	; 0x30
 8010a42:	f7ff ffcb 	bl	80109dc <LCD_Color2Index>
 8010a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010a4a:	f7ff bfe7 	b.w	8010a1c <LCD_SetColorIndex>
 8010a4e:	bd08      	pop	{r3, pc}
 8010a50:	20000110 	.word	0x20000110

08010a54 <LCD_SetBkColorIndex>:
 8010a54:	4b04      	ldr	r3, [pc, #16]	; (8010a68 <LCD_SetBkColorIndex+0x14>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	7c1a      	ldrb	r2, [r3, #16]
 8010a5a:	0752      	lsls	r2, r2, #29
 8010a5c:	bf4c      	ite	mi
 8010a5e:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8010a60:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8010a62:	6018      	str	r0, [r3, #0]
 8010a64:	4770      	bx	lr
 8010a66:	bf00      	nop
 8010a68:	20000110 	.word	0x20000110

08010a6c <_SetBkColor>:
 8010a6c:	b508      	push	{r3, lr}
 8010a6e:	4b06      	ldr	r3, [pc, #24]	; (8010a88 <_SetBkColor+0x1c>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010a74:	4281      	cmp	r1, r0
 8010a76:	d006      	beq.n	8010a86 <_SetBkColor+0x1a>
 8010a78:	6358      	str	r0, [r3, #52]	; 0x34
 8010a7a:	f7ff ffaf 	bl	80109dc <LCD_Color2Index>
 8010a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010a82:	f7ff bfe7 	b.w	8010a54 <LCD_SetBkColorIndex>
 8010a86:	bd08      	pop	{r3, pc}
 8010a88:	20000110 	.word	0x20000110

08010a8c <LCD_SetBkColor>:
 8010a8c:	b508      	push	{r3, lr}
 8010a8e:	4b02      	ldr	r3, [pc, #8]	; (8010a98 <LCD_SetBkColor+0xc>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	4798      	blx	r3
 8010a96:	bd08      	pop	{r3, pc}
 8010a98:	200000f4 	.word	0x200000f4

08010a9c <LCD_SetColor>:
 8010a9c:	b508      	push	{r3, lr}
 8010a9e:	4b02      	ldr	r3, [pc, #8]	; (8010aa8 <LCD_SetColor+0xc>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	4798      	blx	r3
 8010aa6:	bd08      	pop	{r3, pc}
 8010aa8:	200000f4 	.word	0x200000f4

08010aac <GUI__strlen>:
 8010aac:	f04f 33ff 	mov.w	r3, #4294967295
 8010ab0:	b118      	cbz	r0, 8010aba <GUI__strlen+0xe>
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	5cc2      	ldrb	r2, [r0, r3]
 8010ab6:	2a00      	cmp	r2, #0
 8010ab8:	d1fb      	bne.n	8010ab2 <GUI__strlen+0x6>
 8010aba:	4618      	mov	r0, r3
 8010abc:	4770      	bx	lr

08010abe <GUI__memset16>:
 8010abe:	b570      	push	{r4, r5, r6, lr}
 8010ac0:	0784      	lsls	r4, r0, #30
 8010ac2:	d502      	bpl.n	8010aca <GUI__memset16+0xc>
 8010ac4:	8001      	strh	r1, [r0, #0]
 8010ac6:	3a01      	subs	r2, #1
 8010ac8:	3002      	adds	r0, #2
 8010aca:	0855      	lsrs	r5, r2, #1
 8010acc:	462b      	mov	r3, r5
 8010ace:	b305      	cbz	r5, 8010b12 <GUI__memset16+0x54>
 8010ad0:	2d03      	cmp	r5, #3
 8010ad2:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 8010ad6:	dc02      	bgt.n	8010ade <GUI__memset16+0x20>
 8010ad8:	4606      	mov	r6, r0
 8010ada:	461d      	mov	r5, r3
 8010adc:	e012      	b.n	8010b04 <GUI__memset16+0x46>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	462e      	mov	r6, r5
 8010ae2:	3e04      	subs	r6, #4
 8010ae4:	2e03      	cmp	r6, #3
 8010ae6:	601c      	str	r4, [r3, #0]
 8010ae8:	605c      	str	r4, [r3, #4]
 8010aea:	609c      	str	r4, [r3, #8]
 8010aec:	60dc      	str	r4, [r3, #12]
 8010aee:	f103 0310 	add.w	r3, r3, #16
 8010af2:	dcf6      	bgt.n	8010ae2 <GUI__memset16+0x24>
 8010af4:	3d04      	subs	r5, #4
 8010af6:	08ab      	lsrs	r3, r5, #2
 8010af8:	1c5e      	adds	r6, r3, #1
 8010afa:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8010afe:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 8010b02:	e7e9      	b.n	8010ad8 <GUI__memset16+0x1a>
 8010b04:	b11d      	cbz	r5, 8010b0e <GUI__memset16+0x50>
 8010b06:	f846 4b04 	str.w	r4, [r6], #4
 8010b0a:	3d01      	subs	r5, #1
 8010b0c:	e7fa      	b.n	8010b04 <GUI__memset16+0x46>
 8010b0e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8010b12:	07d3      	lsls	r3, r2, #31
 8010b14:	bf48      	it	mi
 8010b16:	8001      	strhmi	r1, [r0, #0]
 8010b18:	bd70      	pop	{r4, r5, r6, pc}

08010b1a <GUI__memset>:
 8010b1a:	b570      	push	{r4, r5, r6, lr}
 8010b1c:	b12a      	cbz	r2, 8010b2a <GUI__memset+0x10>
 8010b1e:	0783      	lsls	r3, r0, #30
 8010b20:	d003      	beq.n	8010b2a <GUI__memset+0x10>
 8010b22:	f800 1b01 	strb.w	r1, [r0], #1
 8010b26:	3a01      	subs	r2, #1
 8010b28:	e7f8      	b.n	8010b1c <GUI__memset+0x2>
 8010b2a:	0893      	lsrs	r3, r2, #2
 8010b2c:	d101      	bne.n	8010b32 <GUI__memset+0x18>
 8010b2e:	4402      	add	r2, r0
 8010b30:	e017      	b.n	8010b62 <GUI__memset+0x48>
 8010b32:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 8010b36:	f002 0203 	and.w	r2, r2, #3
 8010b3a:	434c      	muls	r4, r1
 8010b3c:	2b03      	cmp	r3, #3
 8010b3e:	4605      	mov	r5, r0
 8010b40:	dd06      	ble.n	8010b50 <GUI__memset+0x36>
 8010b42:	6004      	str	r4, [r0, #0]
 8010b44:	6044      	str	r4, [r0, #4]
 8010b46:	6084      	str	r4, [r0, #8]
 8010b48:	60c4      	str	r4, [r0, #12]
 8010b4a:	3b04      	subs	r3, #4
 8010b4c:	3010      	adds	r0, #16
 8010b4e:	e7f5      	b.n	8010b3c <GUI__memset+0x22>
 8010b50:	461e      	mov	r6, r3
 8010b52:	b11b      	cbz	r3, 8010b5c <GUI__memset+0x42>
 8010b54:	f845 4b04 	str.w	r4, [r5], #4
 8010b58:	3b01      	subs	r3, #1
 8010b5a:	e7fa      	b.n	8010b52 <GUI__memset+0x38>
 8010b5c:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8010b60:	e7e5      	b.n	8010b2e <GUI__memset+0x14>
 8010b62:	4290      	cmp	r0, r2
 8010b64:	d002      	beq.n	8010b6c <GUI__memset+0x52>
 8010b66:	f800 1b01 	strb.w	r1, [r0], #1
 8010b6a:	e7fa      	b.n	8010b62 <GUI__memset+0x48>
 8010b6c:	bd70      	pop	{r4, r5, r6, pc}

08010b6e <GUI__SetText>:
 8010b6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b70:	6807      	ldr	r7, [r0, #0]
 8010b72:	4605      	mov	r5, r0
 8010b74:	4638      	mov	r0, r7
 8010b76:	460e      	mov	r6, r1
 8010b78:	f006 fb22 	bl	80171c0 <GUI__strcmp_hp>
 8010b7c:	b908      	cbnz	r0, 8010b82 <GUI__SetText+0x14>
 8010b7e:	2000      	movs	r0, #0
 8010b80:	e02e      	b.n	8010be0 <GUI__SetText+0x72>
 8010b82:	4630      	mov	r0, r6
 8010b84:	f7ff ff92 	bl	8010aac <GUI__strlen>
 8010b88:	1c44      	adds	r4, r0, #1
 8010b8a:	4638      	mov	r0, r7
 8010b8c:	f002 fee4 	bl	8013958 <GUI_ALLOC_GetSize>
 8010b90:	4284      	cmp	r4, r0
 8010b92:	d10f      	bne.n	8010bb4 <GUI__SetText+0x46>
 8010b94:	2c00      	cmp	r4, #0
 8010b96:	d0f2      	beq.n	8010b7e <GUI__SetText+0x10>
 8010b98:	4638      	mov	r0, r7
 8010b9a:	f002 feaf 	bl	80138fc <GUI_ALLOC_LockH>
 8010b9e:	ad02      	add	r5, sp, #8
 8010ba0:	4631      	mov	r1, r6
 8010ba2:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010ba6:	4622      	mov	r2, r4
 8010ba8:	f009 fe12 	bl	801a7d0 <memcpy>
 8010bac:	4628      	mov	r0, r5
 8010bae:	f002 feb3 	bl	8013918 <GUI_ALLOC_UnlockH>
 8010bb2:	e014      	b.n	8010bde <GUI__SetText+0x70>
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f003 f8f5 	bl	8013da4 <GUI_ALLOC_AllocNoInit>
 8010bba:	4607      	mov	r7, r0
 8010bbc:	2800      	cmp	r0, #0
 8010bbe:	d0de      	beq.n	8010b7e <GUI__SetText+0x10>
 8010bc0:	f002 fe9c 	bl	80138fc <GUI_ALLOC_LockH>
 8010bc4:	ac02      	add	r4, sp, #8
 8010bc6:	4631      	mov	r1, r6
 8010bc8:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010bcc:	f009 fe50 	bl	801a870 <strcpy>
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	f002 fea1 	bl	8013918 <GUI_ALLOC_UnlockH>
 8010bd6:	4628      	mov	r0, r5
 8010bd8:	f003 f8e8 	bl	8013dac <GUI_ALLOC_FreePtr>
 8010bdc:	602f      	str	r7, [r5, #0]
 8010bde:	2001      	movs	r0, #1
 8010be0:	b003      	add	sp, #12
 8010be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010be4 <GUI__ReduceRect>:
 8010be4:	880b      	ldrh	r3, [r1, #0]
 8010be6:	b292      	uxth	r2, r2
 8010be8:	4413      	add	r3, r2
 8010bea:	8003      	strh	r3, [r0, #0]
 8010bec:	888b      	ldrh	r3, [r1, #4]
 8010bee:	1a9b      	subs	r3, r3, r2
 8010bf0:	8083      	strh	r3, [r0, #4]
 8010bf2:	884b      	ldrh	r3, [r1, #2]
 8010bf4:	4413      	add	r3, r2
 8010bf6:	8043      	strh	r3, [r0, #2]
 8010bf8:	88cb      	ldrh	r3, [r1, #6]
 8010bfa:	1a9a      	subs	r2, r3, r2
 8010bfc:	80c2      	strh	r2, [r0, #6]
 8010bfe:	4770      	bx	lr

08010c00 <GUI__ManageCacheEx>:
 8010c00:	2801      	cmp	r0, #1
 8010c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c04:	4604      	mov	r4, r0
 8010c06:	460d      	mov	r5, r1
 8010c08:	dc65      	bgt.n	8010cd6 <GUI__ManageCacheEx+0xd6>
 8010c0a:	4b34      	ldr	r3, [pc, #208]	; (8010cdc <GUI__ManageCacheEx+0xdc>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	b103      	cbz	r3, 8010c12 <GUI__ManageCacheEx+0x12>
 8010c10:	4798      	blx	r3
 8010c12:	2d01      	cmp	r5, #1
 8010c14:	d004      	beq.n	8010c20 <GUI__ManageCacheEx+0x20>
 8010c16:	2d02      	cmp	r5, #2
 8010c18:	d021      	beq.n	8010c5e <GUI__ManageCacheEx+0x5e>
 8010c1a:	2d00      	cmp	r5, #0
 8010c1c:	d15b      	bne.n	8010cd6 <GUI__ManageCacheEx+0xd6>
 8010c1e:	e035      	b.n	8010c8c <GUI__ManageCacheEx+0x8c>
 8010c20:	4e2f      	ldr	r6, [pc, #188]	; (8010ce0 <GUI__ManageCacheEx+0xe0>)
 8010c22:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 8010c26:	b9b7      	cbnz	r7, 8010c56 <GUI__ManageCacheEx+0x56>
 8010c28:	4620      	mov	r0, r4
 8010c2a:	f002 f839 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 8010c2e:	9001      	str	r0, [sp, #4]
 8010c30:	2800      	cmp	r0, #0
 8010c32:	d050      	beq.n	8010cd6 <GUI__ManageCacheEx+0xd6>
 8010c34:	68c3      	ldr	r3, [r0, #12]
 8010c36:	210d      	movs	r1, #13
 8010c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c3a:	a801      	add	r0, sp, #4
 8010c3c:	4798      	blx	r3
 8010c3e:	4603      	mov	r3, r0
 8010c40:	2800      	cmp	r0, #0
 8010c42:	d048      	beq.n	8010cd6 <GUI__ManageCacheEx+0xd6>
 8010c44:	9801      	ldr	r0, [sp, #4]
 8010c46:	4629      	mov	r1, r5
 8010c48:	4798      	blx	r3
 8010c4a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8010c4e:	3301      	adds	r3, #1
 8010c50:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 8010c54:	e018      	b.n	8010c88 <GUI__ManageCacheEx+0x88>
 8010c56:	3701      	adds	r7, #1
 8010c58:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8010c5c:	e03b      	b.n	8010cd6 <GUI__ManageCacheEx+0xd6>
 8010c5e:	4620      	mov	r0, r4
 8010c60:	f002 f81e 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 8010c64:	9001      	str	r0, [sp, #4]
 8010c66:	2800      	cmp	r0, #0
 8010c68:	d035      	beq.n	8010cd6 <GUI__ManageCacheEx+0xd6>
 8010c6a:	68c3      	ldr	r3, [r0, #12]
 8010c6c:	210d      	movs	r1, #13
 8010c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c70:	a801      	add	r0, sp, #4
 8010c72:	4798      	blx	r3
 8010c74:	4604      	mov	r4, r0
 8010c76:	2800      	cmp	r0, #0
 8010c78:	d02d      	beq.n	8010cd6 <GUI__ManageCacheEx+0xd6>
 8010c7a:	4b1a      	ldr	r3, [pc, #104]	; (8010ce4 <GUI__ManageCacheEx+0xe4>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	b103      	cbz	r3, 8010c82 <GUI__ManageCacheEx+0x82>
 8010c80:	4798      	blx	r3
 8010c82:	9801      	ldr	r0, [sp, #4]
 8010c84:	2102      	movs	r1, #2
 8010c86:	47a0      	blx	r4
 8010c88:	2000      	movs	r0, #0
 8010c8a:	e025      	b.n	8010cd8 <GUI__ManageCacheEx+0xd8>
 8010c8c:	4d14      	ldr	r5, [pc, #80]	; (8010ce0 <GUI__ManageCacheEx+0xe0>)
 8010c8e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8010c92:	2b01      	cmp	r3, #1
 8010c94:	d001      	beq.n	8010c9a <GUI__ManageCacheEx+0x9a>
 8010c96:	2001      	movs	r0, #1
 8010c98:	e015      	b.n	8010cc6 <GUI__ManageCacheEx+0xc6>
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f002 f800 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 8010ca0:	9001      	str	r0, [sp, #4]
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	d0f7      	beq.n	8010c96 <GUI__ManageCacheEx+0x96>
 8010ca6:	68c3      	ldr	r3, [r0, #12]
 8010ca8:	210d      	movs	r1, #13
 8010caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cac:	a801      	add	r0, sp, #4
 8010cae:	4798      	blx	r3
 8010cb0:	4606      	mov	r6, r0
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	d0ef      	beq.n	8010c96 <GUI__ManageCacheEx+0x96>
 8010cb6:	4b0b      	ldr	r3, [pc, #44]	; (8010ce4 <GUI__ManageCacheEx+0xe4>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	b103      	cbz	r3, 8010cbe <GUI__ManageCacheEx+0xbe>
 8010cbc:	4798      	blx	r3
 8010cbe:	9801      	ldr	r0, [sp, #4]
 8010cc0:	2100      	movs	r1, #0
 8010cc2:	47b0      	blx	r6
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	bf18      	it	ne
 8010cce:	3b01      	subne	r3, #1
 8010cd0:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 8010cd4:	e000      	b.n	8010cd8 <GUI__ManageCacheEx+0xd8>
 8010cd6:	2001      	movs	r0, #1
 8010cd8:	b003      	add	sp, #12
 8010cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cdc:	2001d104 	.word	0x2001d104
 8010ce0:	2001d0fc 	.word	0x2001d0fc
 8010ce4:	2001d0f8 	.word	0x2001d0f8

08010ce8 <GUI__ManageCache>:
 8010ce8:	4b02      	ldr	r3, [pc, #8]	; (8010cf4 <GUI__ManageCache+0xc>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4601      	mov	r1, r0
 8010cee:	7c58      	ldrb	r0, [r3, #17]
 8010cf0:	f7ff bf86 	b.w	8010c00 <GUI__ManageCacheEx>
 8010cf4:	20000110 	.word	0x20000110

08010cf8 <GUI__IntersectRects>:
 8010cf8:	b570      	push	{r4, r5, r6, lr}
 8010cfa:	f9b2 3000 	ldrsh.w	r3, [r2]
 8010cfe:	f9b1 4000 	ldrsh.w	r4, [r1]
 8010d02:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8010d06:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 8010d0a:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8010d0e:	429c      	cmp	r4, r3
 8010d10:	bfb8      	it	lt
 8010d12:	461c      	movlt	r4, r3
 8010d14:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8010d18:	429d      	cmp	r5, r3
 8010d1a:	bfa8      	it	ge
 8010d1c:	462b      	movge	r3, r5
 8010d1e:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8010d22:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010d26:	42ae      	cmp	r6, r5
 8010d28:	bfb8      	it	lt
 8010d2a:	4635      	movlt	r5, r6
 8010d2c:	b2a4      	uxth	r4, r4
 8010d2e:	b2ad      	uxth	r5, r5
 8010d30:	4291      	cmp	r1, r2
 8010d32:	bfb8      	it	lt
 8010d34:	460a      	movlt	r2, r1
 8010d36:	8004      	strh	r4, [r0, #0]
 8010d38:	8085      	strh	r5, [r0, #4]
 8010d3a:	b224      	sxth	r4, r4
 8010d3c:	b22d      	sxth	r5, r5
 8010d3e:	b29b      	uxth	r3, r3
 8010d40:	b292      	uxth	r2, r2
 8010d42:	42a5      	cmp	r5, r4
 8010d44:	8043      	strh	r3, [r0, #2]
 8010d46:	80c2      	strh	r2, [r0, #6]
 8010d48:	db06      	blt.n	8010d58 <GUI__IntersectRects+0x60>
 8010d4a:	b210      	sxth	r0, r2
 8010d4c:	b21b      	sxth	r3, r3
 8010d4e:	4298      	cmp	r0, r3
 8010d50:	bfb4      	ite	lt
 8010d52:	2000      	movlt	r0, #0
 8010d54:	2001      	movge	r0, #1
 8010d56:	bd70      	pop	{r4, r5, r6, pc}
 8010d58:	2000      	movs	r0, #0
 8010d5a:	bd70      	pop	{r4, r5, r6, pc}

08010d5c <GUI__IntersectRect>:
 8010d5c:	880b      	ldrh	r3, [r1, #0]
 8010d5e:	b510      	push	{r4, lr}
 8010d60:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010d64:	b21a      	sxth	r2, r3
 8010d66:	4294      	cmp	r4, r2
 8010d68:	bfb8      	it	lt
 8010d6a:	8003      	strhlt	r3, [r0, #0]
 8010d6c:	884b      	ldrh	r3, [r1, #2]
 8010d6e:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8010d72:	b21a      	sxth	r2, r3
 8010d74:	4294      	cmp	r4, r2
 8010d76:	bfb8      	it	lt
 8010d78:	8043      	strhlt	r3, [r0, #2]
 8010d7a:	888b      	ldrh	r3, [r1, #4]
 8010d7c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8010d80:	b21a      	sxth	r2, r3
 8010d82:	4294      	cmp	r4, r2
 8010d84:	bfc8      	it	gt
 8010d86:	8083      	strhgt	r3, [r0, #4]
 8010d88:	88cb      	ldrh	r3, [r1, #6]
 8010d8a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8010d8e:	b21a      	sxth	r2, r3
 8010d90:	4291      	cmp	r1, r2
 8010d92:	bfc8      	it	gt
 8010d94:	80c3      	strhgt	r3, [r0, #6]
 8010d96:	bd10      	pop	{r4, pc}

08010d98 <GUI__MixColors>:
 8010d98:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 8010d9c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8010da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010da2:	d027      	beq.n	8010df4 <GUI__MixColors+0x5c>
 8010da4:	43d3      	mvns	r3, r2
 8010da6:	b2db      	uxtb	r3, r3
 8010da8:	b2cd      	uxtb	r5, r1
 8010daa:	b2c6      	uxtb	r6, r0
 8010dac:	435d      	muls	r5, r3
 8010dae:	fb02 5506 	mla	r5, r2, r6, r5
 8010db2:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 8010db6:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 8010dba:	435e      	muls	r6, r3
 8010dbc:	fb02 6604 	mla	r6, r2, r4, r6
 8010dc0:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 8010dc4:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 8010dc8:	435c      	muls	r4, r3
 8010dca:	0e09      	lsrs	r1, r1, #24
 8010dcc:	0e00      	lsrs	r0, r0, #24
 8010dce:	fb02 4407 	mla	r4, r2, r7, r4
 8010dd2:	434b      	muls	r3, r1
 8010dd4:	0a36      	lsrs	r6, r6, #8
 8010dd6:	fb02 3200 	mla	r2, r2, r0, r3
 8010dda:	0a24      	lsrs	r4, r4, #8
 8010ddc:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8010de0:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 8010de4:	4318      	orrs	r0, r3
 8010de6:	0412      	lsls	r2, r2, #16
 8010de8:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 8010dec:	4318      	orrs	r0, r3
 8010dee:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8010df2:	4310      	orrs	r0, r2
 8010df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08010df8 <_OnExit>:
 8010df8:	b570      	push	{r4, r5, r6, lr}
 8010dfa:	4c0a      	ldr	r4, [pc, #40]	; (8010e24 <_OnExit+0x2c>)
 8010dfc:	4d0a      	ldr	r5, [pc, #40]	; (8010e28 <_OnExit+0x30>)
 8010dfe:	6820      	ldr	r0, [r4, #0]
 8010e00:	4e0a      	ldr	r6, [pc, #40]	; (8010e2c <_OnExit+0x34>)
 8010e02:	f002 fd67 	bl	80138d4 <GUI_ALLOC_FreeFixedBlock>
 8010e06:	6828      	ldr	r0, [r5, #0]
 8010e08:	f002 fd64 	bl	80138d4 <GUI_ALLOC_FreeFixedBlock>
 8010e0c:	6830      	ldr	r0, [r6, #0]
 8010e0e:	f002 fd61 	bl	80138d4 <GUI_ALLOC_FreeFixedBlock>
 8010e12:	4a07      	ldr	r2, [pc, #28]	; (8010e30 <_OnExit+0x38>)
 8010e14:	2300      	movs	r3, #0
 8010e16:	6013      	str	r3, [r2, #0]
 8010e18:	4a06      	ldr	r2, [pc, #24]	; (8010e34 <_OnExit+0x3c>)
 8010e1a:	6033      	str	r3, [r6, #0]
 8010e1c:	602b      	str	r3, [r5, #0]
 8010e1e:	6023      	str	r3, [r4, #0]
 8010e20:	6013      	str	r3, [r2, #0]
 8010e22:	bd70      	pop	{r4, r5, r6, pc}
 8010e24:	2001d10c 	.word	0x2001d10c
 8010e28:	2001d108 	.word	0x2001d108
 8010e2c:	2001d110 	.word	0x2001d110
 8010e30:	2001d114 	.word	0x2001d114
 8010e34:	2001d124 	.word	0x2001d124

08010e38 <GUI__GetAlphaBuffer>:
 8010e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e3c:	461c      	mov	r4, r3
 8010e3e:	4b28      	ldr	r3, [pc, #160]	; (8010ee0 <GUI__GetAlphaBuffer+0xa8>)
 8010e40:	4617      	mov	r7, r2
 8010e42:	681a      	ldr	r2, [r3, #0]
 8010e44:	4606      	mov	r6, r0
 8010e46:	4688      	mov	r8, r1
 8010e48:	b932      	cbnz	r2, 8010e58 <GUI__GetAlphaBuffer+0x20>
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	4825      	ldr	r0, [pc, #148]	; (8010ee4 <GUI__GetAlphaBuffer+0xac>)
 8010e4e:	601a      	str	r2, [r3, #0]
 8010e50:	4b25      	ldr	r3, [pc, #148]	; (8010ee8 <GUI__GetAlphaBuffer+0xb0>)
 8010e52:	6003      	str	r3, [r0, #0]
 8010e54:	f002 f926 	bl	80130a4 <GUI__RegisterExit>
 8010e58:	4d24      	ldr	r5, [pc, #144]	; (8010eec <GUI__GetAlphaBuffer+0xb4>)
 8010e5a:	682b      	ldr	r3, [r5, #0]
 8010e5c:	b933      	cbnz	r3, 8010e6c <GUI__GetAlphaBuffer+0x34>
 8010e5e:	4b24      	ldr	r3, [pc, #144]	; (8010ef0 <GUI__GetAlphaBuffer+0xb8>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	602b      	str	r3, [r5, #0]
 8010e64:	b913      	cbnz	r3, 8010e6c <GUI__GetAlphaBuffer+0x34>
 8010e66:	f7ff fa45 	bl	80102f4 <LCD_GetVXSizeMax>
 8010e6a:	6028      	str	r0, [r5, #0]
 8010e6c:	b10c      	cbz	r4, 8010e72 <GUI__GetAlphaBuffer+0x3a>
 8010e6e:	682b      	ldr	r3, [r5, #0]
 8010e70:	6023      	str	r3, [r4, #0]
 8010e72:	b196      	cbz	r6, 8010e9a <GUI__GetAlphaBuffer+0x62>
 8010e74:	4b1f      	ldr	r3, [pc, #124]	; (8010ef4 <GUI__GetAlphaBuffer+0xbc>)
 8010e76:	681a      	ldr	r2, [r3, #0]
 8010e78:	4699      	mov	r9, r3
 8010e7a:	2400      	movs	r4, #0
 8010e7c:	b94a      	cbnz	r2, 8010e92 <GUI__GetAlphaBuffer+0x5a>
 8010e7e:	6828      	ldr	r0, [r5, #0]
 8010e80:	0080      	lsls	r0, r0, #2
 8010e82:	f002 fe93 	bl	8013bac <GUI_ALLOC_GetFixedBlock>
 8010e86:	f1d0 0401 	rsbs	r4, r0, #1
 8010e8a:	f8c9 0000 	str.w	r0, [r9]
 8010e8e:	bf38      	it	cc
 8010e90:	2400      	movcc	r4, #0
 8010e92:	f8d9 3000 	ldr.w	r3, [r9]
 8010e96:	6033      	str	r3, [r6, #0]
 8010e98:	e000      	b.n	8010e9c <GUI__GetAlphaBuffer+0x64>
 8010e9a:	4634      	mov	r4, r6
 8010e9c:	f1b8 0f00 	cmp.w	r8, #0
 8010ea0:	d00d      	beq.n	8010ebe <GUI__GetAlphaBuffer+0x86>
 8010ea2:	4e15      	ldr	r6, [pc, #84]	; (8010ef8 <GUI__GetAlphaBuffer+0xc0>)
 8010ea4:	6833      	ldr	r3, [r6, #0]
 8010ea6:	b93b      	cbnz	r3, 8010eb8 <GUI__GetAlphaBuffer+0x80>
 8010ea8:	6828      	ldr	r0, [r5, #0]
 8010eaa:	0080      	lsls	r0, r0, #2
 8010eac:	f002 fe7e 	bl	8013bac <GUI_ALLOC_GetFixedBlock>
 8010eb0:	2800      	cmp	r0, #0
 8010eb2:	6030      	str	r0, [r6, #0]
 8010eb4:	bf08      	it	eq
 8010eb6:	2401      	moveq	r4, #1
 8010eb8:	6833      	ldr	r3, [r6, #0]
 8010eba:	f8c8 3000 	str.w	r3, [r8]
 8010ebe:	b167      	cbz	r7, 8010eda <GUI__GetAlphaBuffer+0xa2>
 8010ec0:	4e0e      	ldr	r6, [pc, #56]	; (8010efc <GUI__GetAlphaBuffer+0xc4>)
 8010ec2:	6833      	ldr	r3, [r6, #0]
 8010ec4:	b93b      	cbnz	r3, 8010ed6 <GUI__GetAlphaBuffer+0x9e>
 8010ec6:	6828      	ldr	r0, [r5, #0]
 8010ec8:	0080      	lsls	r0, r0, #2
 8010eca:	f002 fe6f 	bl	8013bac <GUI_ALLOC_GetFixedBlock>
 8010ece:	2800      	cmp	r0, #0
 8010ed0:	6030      	str	r0, [r6, #0]
 8010ed2:	bf08      	it	eq
 8010ed4:	2401      	moveq	r4, #1
 8010ed6:	6833      	ldr	r3, [r6, #0]
 8010ed8:	603b      	str	r3, [r7, #0]
 8010eda:	4620      	mov	r0, r4
 8010edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ee0:	2001d124 	.word	0x2001d124
 8010ee4:	2001d11c 	.word	0x2001d11c
 8010ee8:	08010df9 	.word	0x08010df9
 8010eec:	2001d114 	.word	0x2001d114
 8010ef0:	2001d5e4 	.word	0x2001d5e4
 8010ef4:	2001d10c 	.word	0x2001d10c
 8010ef8:	2001d108 	.word	0x2001d108
 8010efc:	2001d110 	.word	0x2001d110

08010f00 <GUI__DoAlphaBlending>:
 8010f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f04:	b093      	sub	sp, #76	; 0x4c
 8010f06:	2400      	movs	r4, #0
 8010f08:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010f0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8010f0c:	910c      	str	r1, [sp, #48]	; 0x30
 8010f0e:	4690      	mov	r8, r2
 8010f10:	461f      	mov	r7, r3
 8010f12:	6034      	str	r4, [r6, #0]
 8010f14:	a80f      	add	r0, sp, #60	; 0x3c
 8010f16:	a910      	add	r1, sp, #64	; 0x40
 8010f18:	4622      	mov	r2, r4
 8010f1a:	ab11      	add	r3, sp, #68	; 0x44
 8010f1c:	f7ff ff8c 	bl	8010e38 <GUI__GetAlphaBuffer>
 8010f20:	4605      	mov	r5, r0
 8010f22:	2800      	cmp	r0, #0
 8010f24:	f040 80c3 	bne.w	80110ae <GUI__DoAlphaBlending+0x1ae>
 8010f28:	4c63      	ldr	r4, [pc, #396]	; (80110b8 <GUI__DoAlphaBlending+0x1b8>)
 8010f2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010f2c:	6823      	ldr	r3, [r4, #0]
 8010f2e:	7c58      	ldrb	r0, [r3, #17]
 8010f30:	4b62      	ldr	r3, [pc, #392]	; (80110bc <GUI__DoAlphaBlending+0x1bc>)
 8010f32:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010f36:	9307      	str	r3, [sp, #28]
 8010f38:	4297      	cmp	r7, r2
 8010f3a:	bfa8      	it	ge
 8010f3c:	4617      	movge	r7, r2
 8010f3e:	691a      	ldr	r2, [r3, #16]
 8010f40:	920d      	str	r2, [sp, #52]	; 0x34
 8010f42:	970a      	str	r7, [sp, #40]	; 0x28
 8010f44:	f7ff f9a2 	bl	801028c <GUI_GetBitsPerPixelEx>
 8010f48:	6823      	ldr	r3, [r4, #0]
 8010f4a:	9008      	str	r0, [sp, #32]
 8010f4c:	7c58      	ldrb	r0, [r3, #17]
 8010f4e:	f7ff f9bb 	bl	80102c8 <GUI_GetpfIndex2ColorEx>
 8010f52:	4b5b      	ldr	r3, [pc, #364]	; (80110c0 <GUI__DoAlphaBlending+0x1c0>)
 8010f54:	9004      	str	r0, [sp, #16]
 8010f56:	4298      	cmp	r0, r3
 8010f58:	d005      	beq.n	8010f66 <GUI__DoAlphaBlending+0x66>
 8010f5a:	4b5a      	ldr	r3, [pc, #360]	; (80110c4 <GUI__DoAlphaBlending+0x1c4>)
 8010f5c:	1ac3      	subs	r3, r0, r3
 8010f5e:	bf18      	it	ne
 8010f60:	2301      	movne	r3, #1
 8010f62:	9306      	str	r3, [sp, #24]
 8010f64:	e000      	b.n	8010f68 <GUI__DoAlphaBlending+0x68>
 8010f66:	9506      	str	r5, [sp, #24]
 8010f68:	2500      	movs	r5, #0
 8010f6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010f6c:	46ab      	mov	fp, r5
 8010f6e:	4643      	mov	r3, r8
 8010f70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010f72:	f853 0b04 	ldr.w	r0, [r3], #4
 8010f76:	9305      	str	r3, [sp, #20]
 8010f78:	4790      	blx	r2
 8010f7a:	0e03      	lsrs	r3, r0, #24
 8010f7c:	4681      	mov	r9, r0
 8010f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8010f80:	f000 8085 	beq.w	801108e <GUI__DoAlphaBlending+0x18e>
 8010f84:	f1bb 0f00 	cmp.w	fp, #0
 8010f88:	d13f      	bne.n	801100a <GUI__DoAlphaBlending+0x10a>
 8010f8a:	4b4b      	ldr	r3, [pc, #300]	; (80110b8 <GUI__DoAlphaBlending+0x1b8>)
 8010f8c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010f96:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8010f9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010f9c:	442f      	add	r7, r5
 8010f9e:	42bb      	cmp	r3, r7
 8010fa0:	bfc8      	it	gt
 8010fa2:	ebc7 0b03 	rsbgt	fp, r7, r3
 8010fa6:	eb0b 0a05 	add.w	sl, fp, r5
 8010faa:	bfc8      	it	gt
 8010fac:	461f      	movgt	r7, r3
 8010fae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fb0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8010fb4:	4453      	add	r3, sl
 8010fb6:	4494      	add	ip, r2
 8010fb8:	9300      	str	r3, [sp, #0]
 8010fba:	9b07      	ldr	r3, [sp, #28]
 8010fbc:	9301      	str	r3, [sp, #4]
 8010fbe:	f10c 32ff 	add.w	r2, ip, #4294967295
 8010fc2:	4638      	mov	r0, r7
 8010fc4:	460b      	mov	r3, r1
 8010fc6:	f8cd c00c 	str.w	ip, [sp, #12]
 8010fca:	f006 f817 	bl	8016ffc <GUI_ReadRectEx>
 8010fce:	9a08      	ldr	r2, [sp, #32]
 8010fd0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010fd2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010fd6:	2a17      	cmp	r2, #23
 8010fd8:	dc06      	bgt.n	8010fe8 <GUI__DoAlphaBlending+0xe8>
 8010fda:	4450      	add	r0, sl
 8010fdc:	ebcb 0104 	rsb	r1, fp, r4
 8010fe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fe2:	f006 f9b9 	bl	8017358 <GUI__ExpandPixelIndicesEx>
 8010fe6:	e001      	b.n	8010fec <GUI__DoAlphaBlending+0xec>
 8010fe8:	9b06      	ldr	r3, [sp, #24]
 8010fea:	b913      	cbnz	r3, 8010ff2 <GUI__DoAlphaBlending+0xf2>
 8010fec:	f04f 0b01 	mov.w	fp, #1
 8010ff0:	e00b      	b.n	801100a <GUI__DoAlphaBlending+0x10a>
 8010ff2:	ebc7 070c 	rsb	r7, r7, ip
 8010ff6:	4482      	add	sl, r0
 8010ff8:	f8da 0000 	ldr.w	r0, [sl]
 8010ffc:	9a04      	ldr	r2, [sp, #16]
 8010ffe:	4790      	blx	r2
 8011000:	3f01      	subs	r7, #1
 8011002:	f84a 0b04 	str.w	r0, [sl], #4
 8011006:	d1f7      	bne.n	8010ff8 <GUI__DoAlphaBlending+0xf8>
 8011008:	e7f0      	b.n	8010fec <GUI__DoAlphaBlending+0xec>
 801100a:	4b2f      	ldr	r3, [pc, #188]	; (80110c8 <GUI__DoAlphaBlending+0x1c8>)
 801100c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801100e:	f8d3 c000 	ldr.w	ip, [r3]
 8011012:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8011014:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 8011018:	f1bc 0f00 	cmp.w	ip, #0
 801101c:	d024      	beq.n	8011068 <GUI__DoAlphaBlending+0x168>
 801101e:	eb07 020a 	add.w	r2, r7, sl
 8011022:	4451      	add	r1, sl
 8011024:	9210      	str	r2, [sp, #64]	; 0x40
 8011026:	4623      	mov	r3, r4
 8011028:	910f      	str	r1, [sp, #60]	; 0x3c
 801102a:	4640      	mov	r0, r8
 801102c:	47e0      	blx	ip
 801102e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011030:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011032:	2300      	movs	r3, #0
 8011034:	f858 1003 	ldr.w	r1, [r8, r3]
 8011038:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 801103c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8011040:	58e8      	ldr	r0, [r5, r3]
 8011042:	d101      	bne.n	8011048 <GUI__DoAlphaBlending+0x148>
 8011044:	50d0      	str	r0, [r2, r3]
 8011046:	e005      	b.n	8011054 <GUI__DoAlphaBlending+0x154>
 8011048:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 801104c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8011050:	bf08      	it	eq
 8011052:	50d1      	streq	r1, [r2, r3]
 8011054:	3c01      	subs	r4, #1
 8011056:	f103 0304 	add.w	r3, r3, #4
 801105a:	d1eb      	bne.n	8011034 <GUI__DoAlphaBlending+0x134>
 801105c:	6833      	ldr	r3, [r6, #0]
 801105e:	9710      	str	r7, [sp, #64]	; 0x40
 8011060:	f043 0301 	orr.w	r3, r3, #1
 8011064:	6033      	str	r3, [r6, #0]
 8011066:	e020      	b.n	80110aa <GUI__DoAlphaBlending+0x1aa>
 8011068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801106a:	2bff      	cmp	r3, #255	; 0xff
 801106c:	d104      	bne.n	8011078 <GUI__DoAlphaBlending+0x178>
 801106e:	f851 300a 	ldr.w	r3, [r1, sl]
 8011072:	f847 300a 	str.w	r3, [r7, sl]
 8011076:	e011      	b.n	801109c <GUI__DoAlphaBlending+0x19c>
 8011078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801107a:	f851 100a 	ldr.w	r1, [r1, sl]
 801107e:	43da      	mvns	r2, r3
 8011080:	4648      	mov	r0, r9
 8011082:	b2d2      	uxtb	r2, r2
 8011084:	f7ff fe88 	bl	8010d98 <GUI__MixColors>
 8011088:	f847 000a 	str.w	r0, [r7, sl]
 801108c:	e002      	b.n	8011094 <GUI__DoAlphaBlending+0x194>
 801108e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011090:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011094:	6833      	ldr	r3, [r6, #0]
 8011096:	f043 0301 	orr.w	r3, r3, #1
 801109a:	6033      	str	r3, [r6, #0]
 801109c:	3c01      	subs	r4, #1
 801109e:	f105 0501 	add.w	r5, r5, #1
 80110a2:	d002      	beq.n	80110aa <GUI__DoAlphaBlending+0x1aa>
 80110a4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80110a8:	e761      	b.n	8010f6e <GUI__DoAlphaBlending+0x6e>
 80110aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80110ac:	e000      	b.n	80110b0 <GUI__DoAlphaBlending+0x1b0>
 80110ae:	4620      	mov	r0, r4
 80110b0:	b013      	add	sp, #76	; 0x4c
 80110b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110b6:	bf00      	nop
 80110b8:	20000110 	.word	0x20000110
 80110bc:	2001d5dc 	.word	0x2001d5dc
 80110c0:	080140a7 	.word	0x080140a7
 80110c4:	080140a5 	.word	0x080140a5
 80110c8:	2001d118 	.word	0x2001d118

080110cc <GUI__AllocAlphaBuffer>:
 80110cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110ce:	b108      	cbz	r0, 80110d4 <GUI__AllocAlphaBuffer+0x8>
 80110d0:	aa03      	add	r2, sp, #12
 80110d2:	e000      	b.n	80110d6 <GUI__AllocAlphaBuffer+0xa>
 80110d4:	4602      	mov	r2, r0
 80110d6:	a801      	add	r0, sp, #4
 80110d8:	a902      	add	r1, sp, #8
 80110da:	2300      	movs	r3, #0
 80110dc:	f7ff feac 	bl	8010e38 <GUI__GetAlphaBuffer>
 80110e0:	b005      	add	sp, #20
 80110e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080110e8 <GUI_SignalEvent>:
 80110e8:	b508      	push	{r3, lr}
 80110ea:	4b02      	ldr	r3, [pc, #8]	; (80110f4 <GUI_SignalEvent+0xc>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	b103      	cbz	r3, 80110f2 <GUI_SignalEvent+0xa>
 80110f0:	4798      	blx	r3
 80110f2:	bd08      	pop	{r3, pc}
 80110f4:	2001d128 	.word	0x2001d128

080110f8 <_GetDecs>:
 80110f8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80110fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011100:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8011138 <_GetDecs+0x40>
 8011104:	bf48      	it	mi
 8011106:	eeb1 0a40 	vnegmi.f32	s0, s0
 801110a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801110e:	2000      	movs	r0, #0
 8011110:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011118:	d00c      	beq.n	8011134 <_GetDecs+0x3c>
 801111a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801111e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011122:	3001      	adds	r0, #1
 8011124:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8011128:	b2c0      	uxtb	r0, r0
 801112a:	ee17 3a90 	vmov	r3, s15
 801112e:	2b00      	cmp	r3, #0
 8011130:	d0f3      	beq.n	801111a <_GetDecs+0x22>
 8011132:	4770      	bx	lr
 8011134:	4770      	bx	lr
 8011136:	bf00      	nop
 8011138:	3089705f 	.word	0x3089705f

0801113c <_RoundHalfUp>:
 801113c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011144:	b508      	push	{r3, lr}
 8011146:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801114a:	d50a      	bpl.n	8011162 <_RoundHalfUp+0x26>
 801114c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011150:	ee17 0a90 	vmov	r0, s15
 8011154:	f7ef fa18 	bl	8000588 <__aeabi_f2d>
 8011158:	ec41 0b10 	vmov	d0, r0, r1
 801115c:	f009 ff78 	bl	801b050 <ceil>
 8011160:	e009      	b.n	8011176 <_RoundHalfUp+0x3a>
 8011162:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011166:	ee17 0a90 	vmov	r0, s15
 801116a:	f7ef fa0d 	bl	8000588 <__aeabi_f2d>
 801116e:	ec41 0b10 	vmov	d0, r0, r1
 8011172:	f009 fff1 	bl	801b158 <floor>
 8011176:	ec51 0b10 	vmov	r0, r1, d0
 801117a:	f7ef fd3f 	bl	8000bfc <__aeabi_d2f>
 801117e:	ee00 0a10 	vmov	s0, r0
 8011182:	bd08      	pop	{r3, pc}

08011184 <_DispFloatFix>:
 8011184:	4b0e      	ldr	r3, [pc, #56]	; (80111c0 <_DispFloatFix+0x3c>)
 8011186:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801118a:	ee07 3a90 	vmov	s15, r3
 801118e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011192:	b570      	push	{r4, r5, r6, lr}
 8011194:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011198:	4605      	mov	r5, r0
 801119a:	460c      	mov	r4, r1
 801119c:	4616      	mov	r6, r2
 801119e:	f7ff ffcd 	bl	801113c <_RoundHalfUp>
 80111a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80111a6:	4629      	mov	r1, r5
 80111a8:	ee10 0a10 	vmov	r0, s0
 80111ac:	4622      	mov	r2, r4
 80111ae:	b11e      	cbz	r6, 80111b8 <_DispFloatFix+0x34>
 80111b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111b4:	f000 b8ae 	b.w	8011314 <GUI_DispSDecShift>
 80111b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111bc:	f000 b89d 	b.w	80112fa <GUI_DispDecShift>
 80111c0:	08020ba8 	.word	0x08020ba8

080111c4 <_DispFloatMin>:
 80111c4:	b538      	push	{r3, r4, r5, lr}
 80111c6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80111ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ce:	ed2d 8b02 	vpush	{d8}
 80111d2:	4604      	mov	r4, r0
 80111d4:	eeb0 8a40 	vmov.f32	s16, s0
 80111d8:	460d      	mov	r5, r1
 80111da:	d052      	beq.n	8011282 <_DispFloatMin+0xbe>
 80111dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80111e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e4:	db24      	blt.n	8011230 <_DispFloatMin+0x6c>
 80111e6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80111ea:	eeb4 0ae8 	vcmpe.f32	s0, s17
 80111ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111f2:	d51d      	bpl.n	8011230 <_DispFloatMin+0x6c>
 80111f4:	f7ff ff80 	bl	80110f8 <_GetDecs>
 80111f8:	42a0      	cmp	r0, r4
 80111fa:	dc02      	bgt.n	8011202 <_DispFloatMin+0x3e>
 80111fc:	ee78 7a28 	vadd.f32	s15, s16, s17
 8011200:	e046      	b.n	8011290 <_DispFloatMin+0xcc>
 8011202:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011206:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801120e:	db09      	blt.n	8011224 <_DispFloatMin+0x60>
 8011210:	eddf 7a36 	vldr	s15, [pc, #216]	; 80112ec <_DispFloatMin+0x128>
 8011214:	2c00      	cmp	r4, #0
 8011216:	bf18      	it	ne
 8011218:	eef0 7a68 	vmovne.f32	s15, s17
 801121c:	bf08      	it	eq
 801121e:	eeb0 8a68 	vmoveq.f32	s16, s17
 8011222:	e035      	b.n	8011290 <_DispFloatMin+0xcc>
 8011224:	b344      	cbz	r4, 8011278 <_DispFloatMin+0xb4>
 8011226:	eef0 7a68 	vmov.f32	s15, s17
 801122a:	ed9f 8a30 	vldr	s16, [pc, #192]	; 80112ec <_DispFloatMin+0x128>
 801122e:	e02f      	b.n	8011290 <_DispFloatMin+0xcc>
 8011230:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011238:	d528      	bpl.n	801128c <_DispFloatMin+0xc8>
 801123a:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 801123e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011246:	dd21      	ble.n	801128c <_DispFloatMin+0xc8>
 8011248:	eeb0 0a48 	vmov.f32	s0, s16
 801124c:	f7ff ff54 	bl	80110f8 <_GetDecs>
 8011250:	42a0      	cmp	r0, r4
 8011252:	dc04      	bgt.n	801125e <_DispFloatMin+0x9a>
 8011254:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011258:	ee78 7a67 	vsub.f32	s15, s16, s15
 801125c:	e018      	b.n	8011290 <_DispFloatMin+0xcc>
 801125e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8011262:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801126a:	d803      	bhi.n	8011274 <_DispFloatMin+0xb0>
 801126c:	b94c      	cbnz	r4, 8011282 <_DispFloatMin+0xbe>
 801126e:	eeb0 8a68 	vmov.f32	s16, s17
 8011272:	e00b      	b.n	801128c <_DispFloatMin+0xc8>
 8011274:	b144      	cbz	r4, 8011288 <_DispFloatMin+0xc4>
 8011276:	e004      	b.n	8011282 <_DispFloatMin+0xbe>
 8011278:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80112ec <_DispFloatMin+0x128>
 801127c:	eeb0 8a67 	vmov.f32	s16, s15
 8011280:	e006      	b.n	8011290 <_DispFloatMin+0xcc>
 8011282:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011286:	e003      	b.n	8011290 <_DispFloatMin+0xcc>
 8011288:	ed9f 8a18 	vldr	s16, [pc, #96]	; 80112ec <_DispFloatMin+0x128>
 801128c:	eef0 7a48 	vmov.f32	s15, s16
 8011290:	4b17      	ldr	r3, [pc, #92]	; (80112f0 <_DispFloatMin+0x12c>)
 8011292:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011296:	ee00 3a10 	vmov	s0, r3
 801129a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801129e:	ee27 0a80 	vmul.f32	s0, s15, s0
 80112a2:	f7ff ff4b 	bl	801113c <_RoundHalfUp>
 80112a6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80112aa:	ee10 0a10 	vmov	r0, s0
 80112ae:	f002 fd93 	bl	8013dd8 <GUI_Long2Len>
 80112b2:	2d01      	cmp	r5, #1
 80112b4:	ebc4 0000 	rsb	r0, r4, r0
 80112b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80112bc:	d105      	bne.n	80112ca <_DispFloatMin+0x106>
 80112be:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80112c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c6:	bfc8      	it	gt
 80112c8:	3001      	addgt	r0, #1
 80112ca:	eeb0 0a48 	vmov.f32	s0, s16
 80112ce:	ecbd 8b02 	vpop	{d8}
 80112d2:	2c00      	cmp	r4, #0
 80112d4:	bf0c      	ite	eq
 80112d6:	4623      	moveq	r3, r4
 80112d8:	1c63      	addne	r3, r4, #1
 80112da:	4418      	add	r0, r3
 80112dc:	4621      	mov	r1, r4
 80112de:	462a      	mov	r2, r5
 80112e0:	b2c0      	uxtb	r0, r0
 80112e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112e6:	f7ff bf4d 	b.w	8011184 <_DispFloatFix>
 80112ea:	bf00      	nop
 80112ec:	00000000 	.word	0x00000000
 80112f0:	08020ba8 	.word	0x08020ba8

080112f4 <GUI_DispFloatMin>:
 80112f4:	2100      	movs	r1, #0
 80112f6:	f7ff bf65 	b.w	80111c4 <_DispFloatMin>

080112fa <GUI_DispDecShift>:
 80112fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112fc:	ab04      	add	r3, sp, #16
 80112fe:	ac01      	add	r4, sp, #4
 8011300:	f843 4d10 	str.w	r4, [r3, #-16]!
 8011304:	466b      	mov	r3, sp
 8011306:	f002 fd8b 	bl	8013e20 <GUI_AddDecShift>
 801130a:	4620      	mov	r0, r4
 801130c:	f001 fc44 	bl	8012b98 <GUI_DispString>
 8011310:	b004      	add	sp, #16
 8011312:	bd10      	pop	{r4, pc}

08011314 <GUI_DispSDecShift>:
 8011314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011316:	b085      	sub	sp, #20
 8011318:	ac04      	add	r4, sp, #16
 801131a:	460d      	mov	r5, r1
 801131c:	ae01      	add	r6, sp, #4
 801131e:	4669      	mov	r1, sp
 8011320:	4617      	mov	r7, r2
 8011322:	f844 6d10 	str.w	r6, [r4, #-16]!
 8011326:	f002 fd6f 	bl	8013e08 <GUI_AddSign>
 801132a:	2800      	cmp	r0, #0
 801132c:	bfc4      	itt	gt
 801132e:	f105 35ff 	addgt.w	r5, r5, #4294967295
 8011332:	b2ed      	uxtbgt	r5, r5
 8011334:	4629      	mov	r1, r5
 8011336:	463a      	mov	r2, r7
 8011338:	466b      	mov	r3, sp
 801133a:	f002 fd71 	bl	8013e20 <GUI_AddDecShift>
 801133e:	4630      	mov	r0, r6
 8011340:	f001 fc2a 	bl	8012b98 <GUI_DispString>
 8011344:	b005      	add	sp, #20
 8011346:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011348 <_OnExit>:
 8011348:	4a03      	ldr	r2, [pc, #12]	; (8011358 <_OnExit+0x10>)
 801134a:	2300      	movs	r3, #0
 801134c:	6013      	str	r3, [r2, #0]
 801134e:	4a03      	ldr	r2, [pc, #12]	; (801135c <_OnExit+0x14>)
 8011350:	6013      	str	r3, [r2, #0]
 8011352:	4a03      	ldr	r2, [pc, #12]	; (8011360 <_OnExit+0x18>)
 8011354:	6013      	str	r3, [r2, #0]
 8011356:	4770      	bx	lr
 8011358:	2001d12c 	.word	0x2001d12c
 801135c:	2001d130 	.word	0x2001d130
 8011360:	2001d13c 	.word	0x2001d13c

08011364 <GUI_TIMER_Exec>:
 8011364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011368:	4b19      	ldr	r3, [pc, #100]	; (80113d0 <GUI_TIMER_Exec+0x6c>)
 801136a:	681f      	ldr	r7, [r3, #0]
 801136c:	b085      	sub	sp, #20
 801136e:	2500      	movs	r5, #0
 8011370:	4698      	mov	r8, r3
 8011372:	f8d8 3000 	ldr.w	r3, [r8]
 8011376:	4c16      	ldr	r4, [pc, #88]	; (80113d0 <GUI_TIMER_Exec+0x6c>)
 8011378:	b333      	cbz	r3, 80113c8 <GUI_TIMER_Exec+0x64>
 801137a:	f000 f991 	bl	80116a0 <GUI_GetTime>
 801137e:	4606      	mov	r6, r0
 8011380:	6820      	ldr	r0, [r4, #0]
 8011382:	f002 fabb 	bl	80138fc <GUI_ALLOC_LockH>
 8011386:	4603      	mov	r3, r0
 8011388:	a804      	add	r0, sp, #16
 801138a:	6959      	ldr	r1, [r3, #20]
 801138c:	f840 3d10 	str.w	r3, [r0, #-16]!
 8011390:	1b89      	subs	r1, r1, r6
 8011392:	2900      	cmp	r1, #0
 8011394:	dc13      	bgt.n	80113be <GUI_TIMER_Exec+0x5a>
 8011396:	6821      	ldr	r1, [r4, #0]
 8011398:	9103      	str	r1, [sp, #12]
 801139a:	9601      	str	r6, [sp, #4]
 801139c:	6919      	ldr	r1, [r3, #16]
 801139e:	685e      	ldr	r6, [r3, #4]
 80113a0:	9102      	str	r1, [sp, #8]
 80113a2:	4668      	mov	r0, sp
 80113a4:	6026      	str	r6, [r4, #0]
 80113a6:	f8d3 9000 	ldr.w	r9, [r3]
 80113aa:	f002 fab5 	bl	8013918 <GUI_ALLOC_UnlockH>
 80113ae:	a801      	add	r0, sp, #4
 80113b0:	47c8      	blx	r9
 80113b2:	b14e      	cbz	r6, 80113c8 <GUI_TIMER_Exec+0x64>
 80113b4:	6823      	ldr	r3, [r4, #0]
 80113b6:	42bb      	cmp	r3, r7
 80113b8:	d005      	beq.n	80113c6 <GUI_TIMER_Exec+0x62>
 80113ba:	2501      	movs	r5, #1
 80113bc:	e7d9      	b.n	8011372 <GUI_TIMER_Exec+0xe>
 80113be:	4668      	mov	r0, sp
 80113c0:	f002 faaa 	bl	8013918 <GUI_ALLOC_UnlockH>
 80113c4:	e000      	b.n	80113c8 <GUI_TIMER_Exec+0x64>
 80113c6:	2500      	movs	r5, #0
 80113c8:	4628      	mov	r0, r5
 80113ca:	b005      	add	sp, #20
 80113cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113d0:	2001d130 	.word	0x2001d130

080113d4 <_Link>:
 80113d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113d6:	4c25      	ldr	r4, [pc, #148]	; (801146c <_Link+0x98>)
 80113d8:	b085      	sub	sp, #20
 80113da:	4605      	mov	r5, r0
 80113dc:	f002 fa8e 	bl	80138fc <GUI_ALLOC_LockH>
 80113e0:	6823      	ldr	r3, [r4, #0]
 80113e2:	9001      	str	r0, [sp, #4]
 80113e4:	b913      	cbnz	r3, 80113ec <_Link+0x18>
 80113e6:	6025      	str	r5, [r4, #0]
 80113e8:	6043      	str	r3, [r0, #4]
 80113ea:	e039      	b.n	8011460 <_Link+0x8c>
 80113ec:	4618      	mov	r0, r3
 80113ee:	f002 fa85 	bl	80138fc <GUI_ALLOC_LockH>
 80113f2:	ab04      	add	r3, sp, #16
 80113f4:	6946      	ldr	r6, [r0, #20]
 80113f6:	f843 0d10 	str.w	r0, [r3, #-16]!
 80113fa:	4668      	mov	r0, sp
 80113fc:	f002 fa8c 	bl	8013918 <GUI_ALLOC_UnlockH>
 8011400:	9b01      	ldr	r3, [sp, #4]
 8011402:	695a      	ldr	r2, [r3, #20]
 8011404:	1b92      	subs	r2, r2, r6
 8011406:	2a00      	cmp	r2, #0
 8011408:	dc03      	bgt.n	8011412 <_Link+0x3e>
 801140a:	6822      	ldr	r2, [r4, #0]
 801140c:	605a      	str	r2, [r3, #4]
 801140e:	6025      	str	r5, [r4, #0]
 8011410:	e026      	b.n	8011460 <_Link+0x8c>
 8011412:	6826      	ldr	r6, [r4, #0]
 8011414:	4630      	mov	r0, r6
 8011416:	f002 fa71 	bl	80138fc <GUI_ALLOC_LockH>
 801141a:	ac04      	add	r4, sp, #16
 801141c:	6846      	ldr	r6, [r0, #4]
 801141e:	f844 0d08 	str.w	r0, [r4, #-8]!
 8011422:	b1be      	cbz	r6, 8011454 <_Link+0x80>
 8011424:	4630      	mov	r0, r6
 8011426:	f002 fa69 	bl	80138fc <GUI_ALLOC_LockH>
 801142a:	ab04      	add	r3, sp, #16
 801142c:	6947      	ldr	r7, [r0, #20]
 801142e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8011432:	4618      	mov	r0, r3
 8011434:	f002 fa70 	bl	8013918 <GUI_ALLOC_UnlockH>
 8011438:	9a01      	ldr	r2, [sp, #4]
 801143a:	6953      	ldr	r3, [r2, #20]
 801143c:	1bdb      	subs	r3, r3, r7
 801143e:	2b00      	cmp	r3, #0
 8011440:	9b02      	ldr	r3, [sp, #8]
 8011442:	dc02      	bgt.n	801144a <_Link+0x76>
 8011444:	6056      	str	r6, [r2, #4]
 8011446:	605d      	str	r5, [r3, #4]
 8011448:	e007      	b.n	801145a <_Link+0x86>
 801144a:	4620      	mov	r0, r4
 801144c:	685e      	ldr	r6, [r3, #4]
 801144e:	f002 fa63 	bl	8013918 <GUI_ALLOC_UnlockH>
 8011452:	e7df      	b.n	8011414 <_Link+0x40>
 8011454:	9b01      	ldr	r3, [sp, #4]
 8011456:	605e      	str	r6, [r3, #4]
 8011458:	6045      	str	r5, [r0, #4]
 801145a:	4620      	mov	r0, r4
 801145c:	f002 fa5c 	bl	8013918 <GUI_ALLOC_UnlockH>
 8011460:	a801      	add	r0, sp, #4
 8011462:	f002 fa59 	bl	8013918 <GUI_ALLOC_UnlockH>
 8011466:	b005      	add	sp, #20
 8011468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801146a:	bf00      	nop
 801146c:	2001d130 	.word	0x2001d130

08011470 <_Unlink>:
 8011470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011472:	4605      	mov	r5, r0
 8011474:	b1f0      	cbz	r0, 80114b4 <_Unlink+0x44>
 8011476:	f002 fa41 	bl	80138fc <GUI_ALLOC_LockH>
 801147a:	4b0f      	ldr	r3, [pc, #60]	; (80114b8 <_Unlink+0x48>)
 801147c:	9000      	str	r0, [sp, #0]
 801147e:	681c      	ldr	r4, [r3, #0]
 8011480:	42ac      	cmp	r4, r5
 8011482:	d104      	bne.n	801148e <_Unlink+0x1e>
 8011484:	6842      	ldr	r2, [r0, #4]
 8011486:	601a      	str	r2, [r3, #0]
 8011488:	e011      	b.n	80114ae <_Unlink+0x3e>
 801148a:	f002 fa45 	bl	8013918 <GUI_ALLOC_UnlockH>
 801148e:	b174      	cbz	r4, 80114ae <_Unlink+0x3e>
 8011490:	4620      	mov	r0, r4
 8011492:	f002 fa33 	bl	80138fc <GUI_ALLOC_LockH>
 8011496:	4603      	mov	r3, r0
 8011498:	a802      	add	r0, sp, #8
 801149a:	685c      	ldr	r4, [r3, #4]
 801149c:	f840 3d04 	str.w	r3, [r0, #-4]!
 80114a0:	42ac      	cmp	r4, r5
 80114a2:	d1f2      	bne.n	801148a <_Unlink+0x1a>
 80114a4:	9a00      	ldr	r2, [sp, #0]
 80114a6:	6852      	ldr	r2, [r2, #4]
 80114a8:	605a      	str	r2, [r3, #4]
 80114aa:	f002 fa35 	bl	8013918 <GUI_ALLOC_UnlockH>
 80114ae:	4668      	mov	r0, sp
 80114b0:	f002 fa32 	bl	8013918 <GUI_ALLOC_UnlockH>
 80114b4:	b003      	add	sp, #12
 80114b6:	bd30      	pop	{r4, r5, pc}
 80114b8:	2001d130 	.word	0x2001d130

080114bc <GUI_TIMER__GetFirstTimer>:
 80114bc:	2300      	movs	r3, #0
 80114be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114c0:	6003      	str	r3, [r0, #0]
 80114c2:	4b09      	ldr	r3, [pc, #36]	; (80114e8 <GUI_TIMER__GetFirstTimer+0x2c>)
 80114c4:	681c      	ldr	r4, [r3, #0]
 80114c6:	4605      	mov	r5, r0
 80114c8:	b154      	cbz	r4, 80114e0 <GUI_TIMER__GetFirstTimer+0x24>
 80114ca:	4620      	mov	r0, r4
 80114cc:	f002 fa16 	bl	80138fc <GUI_ALLOC_LockH>
 80114d0:	ab02      	add	r3, sp, #8
 80114d2:	6902      	ldr	r2, [r0, #16]
 80114d4:	f843 0d04 	str.w	r0, [r3, #-4]!
 80114d8:	602a      	str	r2, [r5, #0]
 80114da:	4618      	mov	r0, r3
 80114dc:	f002 fa1c 	bl	8013918 <GUI_ALLOC_UnlockH>
 80114e0:	4620      	mov	r0, r4
 80114e2:	b003      	add	sp, #12
 80114e4:	bd30      	pop	{r4, r5, pc}
 80114e6:	bf00      	nop
 80114e8:	2001d12c 	.word	0x2001d12c

080114ec <GUI_TIMER__GetNextTimerLin>:
 80114ec:	2300      	movs	r3, #0
 80114ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114f0:	600b      	str	r3, [r1, #0]
 80114f2:	460e      	mov	r6, r1
 80114f4:	4604      	mov	r4, r0
 80114f6:	b190      	cbz	r0, 801151e <GUI_TIMER__GetNextTimerLin+0x32>
 80114f8:	f002 fa00 	bl	80138fc <GUI_ALLOC_LockH>
 80114fc:	ad02      	add	r5, sp, #8
 80114fe:	6884      	ldr	r4, [r0, #8]
 8011500:	f845 0d04 	str.w	r0, [r5, #-4]!
 8011504:	b144      	cbz	r4, 8011518 <GUI_TIMER__GetNextTimerLin+0x2c>
 8011506:	4628      	mov	r0, r5
 8011508:	f002 fa06 	bl	8013918 <GUI_ALLOC_UnlockH>
 801150c:	4620      	mov	r0, r4
 801150e:	f002 f9f5 	bl	80138fc <GUI_ALLOC_LockH>
 8011512:	6903      	ldr	r3, [r0, #16]
 8011514:	9001      	str	r0, [sp, #4]
 8011516:	6033      	str	r3, [r6, #0]
 8011518:	4628      	mov	r0, r5
 801151a:	f002 f9fd 	bl	8013918 <GUI_ALLOC_UnlockH>
 801151e:	4620      	mov	r0, r4
 8011520:	b002      	add	sp, #8
 8011522:	bd70      	pop	{r4, r5, r6, pc}

08011524 <GUI_TIMER_Create>:
 8011524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011528:	4681      	mov	r9, r0
 801152a:	201c      	movs	r0, #28
 801152c:	460e      	mov	r6, r1
 801152e:	4690      	mov	r8, r2
 8011530:	461f      	mov	r7, r3
 8011532:	f002 fcc3 	bl	8013ebc <GUI_ALLOC_AllocZero>
 8011536:	4604      	mov	r4, r0
 8011538:	2800      	cmp	r0, #0
 801153a:	d031      	beq.n	80115a0 <GUI_TIMER_Create+0x7c>
 801153c:	4b1a      	ldr	r3, [pc, #104]	; (80115a8 <GUI_TIMER_Create+0x84>)
 801153e:	4a1b      	ldr	r2, [pc, #108]	; (80115ac <GUI_TIMER_Create+0x88>)
 8011540:	601a      	str	r2, [r3, #0]
 8011542:	f002 f9db 	bl	80138fc <GUI_ALLOC_LockH>
 8011546:	9000      	str	r0, [sp, #0]
 8011548:	b916      	cbnz	r6, 8011550 <GUI_TIMER_Create+0x2c>
 801154a:	f000 f8a9 	bl	80116a0 <GUI_GetTime>
 801154e:	4606      	mov	r6, r0
 8011550:	a802      	add	r0, sp, #8
 8011552:	f850 5d08 	ldr.w	r5, [r0, #-8]!
 8011556:	4668      	mov	r0, sp
 8011558:	616e      	str	r6, [r5, #20]
 801155a:	f8c5 9000 	str.w	r9, [r5]
 801155e:	f8c5 8010 	str.w	r8, [r5, #16]
 8011562:	81af      	strh	r7, [r5, #12]
 8011564:	f002 f9d8 	bl	8013918 <GUI_ALLOC_UnlockH>
 8011568:	4620      	mov	r0, r4
 801156a:	f7ff ff33 	bl	80113d4 <_Link>
 801156e:	4b10      	ldr	r3, [pc, #64]	; (80115b0 <GUI_TIMER_Create+0x8c>)
 8011570:	681a      	ldr	r2, [r3, #0]
 8011572:	b932      	cbnz	r2, 8011582 <GUI_TIMER_Create+0x5e>
 8011574:	2201      	movs	r2, #1
 8011576:	480f      	ldr	r0, [pc, #60]	; (80115b4 <GUI_TIMER_Create+0x90>)
 8011578:	601a      	str	r2, [r3, #0]
 801157a:	4b0f      	ldr	r3, [pc, #60]	; (80115b8 <GUI_TIMER_Create+0x94>)
 801157c:	6003      	str	r3, [r0, #0]
 801157e:	f001 fd91 	bl	80130a4 <GUI__RegisterExit>
 8011582:	4620      	mov	r0, r4
 8011584:	f002 f9ba 	bl	80138fc <GUI_ALLOC_LockH>
 8011588:	4a0c      	ldr	r2, [pc, #48]	; (80115bc <GUI_TIMER_Create+0x98>)
 801158a:	9001      	str	r0, [sp, #4]
 801158c:	6813      	ldr	r3, [r2, #0]
 801158e:	b913      	cbnz	r3, 8011596 <GUI_TIMER_Create+0x72>
 8011590:	6014      	str	r4, [r2, #0]
 8011592:	6083      	str	r3, [r0, #8]
 8011594:	e001      	b.n	801159a <GUI_TIMER_Create+0x76>
 8011596:	6083      	str	r3, [r0, #8]
 8011598:	6014      	str	r4, [r2, #0]
 801159a:	a801      	add	r0, sp, #4
 801159c:	f002 f9bc 	bl	8013918 <GUI_ALLOC_UnlockH>
 80115a0:	4620      	mov	r0, r4
 80115a2:	b003      	add	sp, #12
 80115a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115a8:	2001d5c0 	.word	0x2001d5c0
 80115ac:	08011365 	.word	0x08011365
 80115b0:	2001d13c 	.word	0x2001d13c
 80115b4:	2001d134 	.word	0x2001d134
 80115b8:	08011349 	.word	0x08011349
 80115bc:	2001d12c 	.word	0x2001d12c

080115c0 <GUI_TIMER_Delete>:
 80115c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80115c2:	4604      	mov	r4, r0
 80115c4:	b358      	cbz	r0, 801161e <GUI_TIMER_Delete+0x5e>
 80115c6:	4d17      	ldr	r5, [pc, #92]	; (8011624 <GUI_TIMER_Delete+0x64>)
 80115c8:	682e      	ldr	r6, [r5, #0]
 80115ca:	4286      	cmp	r6, r0
 80115cc:	d10b      	bne.n	80115e6 <GUI_TIMER_Delete+0x26>
 80115ce:	f002 f995 	bl	80138fc <GUI_ALLOC_LockH>
 80115d2:	ab02      	add	r3, sp, #8
 80115d4:	6882      	ldr	r2, [r0, #8]
 80115d6:	f843 0d04 	str.w	r0, [r3, #-4]!
 80115da:	602a      	str	r2, [r5, #0]
 80115dc:	4618      	mov	r0, r3
 80115de:	e016      	b.n	801160e <GUI_TIMER_Delete+0x4e>
 80115e0:	4668      	mov	r0, sp
 80115e2:	f002 f999 	bl	8013918 <GUI_ALLOC_UnlockH>
 80115e6:	4630      	mov	r0, r6
 80115e8:	f002 f988 	bl	80138fc <GUI_ALLOC_LockH>
 80115ec:	6886      	ldr	r6, [r0, #8]
 80115ee:	ad02      	add	r5, sp, #8
 80115f0:	42a6      	cmp	r6, r4
 80115f2:	f845 0d08 	str.w	r0, [r5, #-8]!
 80115f6:	d1f3      	bne.n	80115e0 <GUI_TIMER_Delete+0x20>
 80115f8:	4620      	mov	r0, r4
 80115fa:	f002 f97f 	bl	80138fc <GUI_ALLOC_LockH>
 80115fe:	9b00      	ldr	r3, [sp, #0]
 8011600:	6882      	ldr	r2, [r0, #8]
 8011602:	9001      	str	r0, [sp, #4]
 8011604:	609a      	str	r2, [r3, #8]
 8011606:	a801      	add	r0, sp, #4
 8011608:	f002 f986 	bl	8013918 <GUI_ALLOC_UnlockH>
 801160c:	4668      	mov	r0, sp
 801160e:	f002 f983 	bl	8013918 <GUI_ALLOC_UnlockH>
 8011612:	4620      	mov	r0, r4
 8011614:	f7ff ff2c 	bl	8011470 <_Unlink>
 8011618:	4620      	mov	r0, r4
 801161a:	f002 f9a9 	bl	8013970 <GUI_ALLOC_Free>
 801161e:	b002      	add	sp, #8
 8011620:	bd70      	pop	{r4, r5, r6, pc}
 8011622:	bf00      	nop
 8011624:	2001d12c 	.word	0x2001d12c

08011628 <GUI_TIMER_SetPeriod>:
 8011628:	b513      	push	{r0, r1, r4, lr}
 801162a:	460c      	mov	r4, r1
 801162c:	b140      	cbz	r0, 8011640 <GUI_TIMER_SetPeriod+0x18>
 801162e:	f002 f965 	bl	80138fc <GUI_ALLOC_LockH>
 8011632:	ab02      	add	r3, sp, #8
 8011634:	6184      	str	r4, [r0, #24]
 8011636:	f843 0d04 	str.w	r0, [r3, #-4]!
 801163a:	4618      	mov	r0, r3
 801163c:	f002 f96c 	bl	8013918 <GUI_ALLOC_UnlockH>
 8011640:	b002      	add	sp, #8
 8011642:	bd10      	pop	{r4, pc}

08011644 <GUI_TIMER_Restart>:
 8011644:	b513      	push	{r0, r1, r4, lr}
 8011646:	4604      	mov	r4, r0
 8011648:	b198      	cbz	r0, 8011672 <GUI_TIMER_Restart+0x2e>
 801164a:	f002 f957 	bl	80138fc <GUI_ALLOC_LockH>
 801164e:	9001      	str	r0, [sp, #4]
 8011650:	f000 f826 	bl	80116a0 <GUI_GetTime>
 8011654:	ab02      	add	r3, sp, #8
 8011656:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801165a:	6991      	ldr	r1, [r2, #24]
 801165c:	4408      	add	r0, r1
 801165e:	6150      	str	r0, [r2, #20]
 8011660:	4618      	mov	r0, r3
 8011662:	f002 f959 	bl	8013918 <GUI_ALLOC_UnlockH>
 8011666:	4620      	mov	r0, r4
 8011668:	f7ff ff02 	bl	8011470 <_Unlink>
 801166c:	4620      	mov	r0, r4
 801166e:	f7ff feb1 	bl	80113d4 <_Link>
 8011672:	b002      	add	sp, #8
 8011674:	bd10      	pop	{r4, pc}

08011676 <GUI_TIMER_GetFlag>:
 8011676:	b513      	push	{r0, r1, r4, lr}
 8011678:	460c      	mov	r4, r1
 801167a:	b168      	cbz	r0, 8011698 <GUI_TIMER_GetFlag+0x22>
 801167c:	f002 f93e 	bl	80138fc <GUI_ALLOC_LockH>
 8011680:	ab02      	add	r3, sp, #8
 8011682:	8982      	ldrh	r2, [r0, #12]
 8011684:	f843 0d04 	str.w	r0, [r3, #-4]!
 8011688:	4214      	tst	r4, r2
 801168a:	4618      	mov	r0, r3
 801168c:	bf0c      	ite	eq
 801168e:	2400      	moveq	r4, #0
 8011690:	2401      	movne	r4, #1
 8011692:	f002 f941 	bl	8013918 <GUI_ALLOC_UnlockH>
 8011696:	e000      	b.n	801169a <GUI_TIMER_GetFlag+0x24>
 8011698:	2401      	movs	r4, #1
 801169a:	4620      	mov	r0, r4
 801169c:	b002      	add	sp, #8
 801169e:	bd10      	pop	{r4, pc}

080116a0 <GUI_GetTime>:
 80116a0:	f7ef bc88 	b.w	8000fb4 <GUI_X_GetTime>

080116a4 <GUI_Delay>:
 80116a4:	b538      	push	{r3, r4, r5, lr}
 80116a6:	4605      	mov	r5, r0
 80116a8:	f7ef fc84 	bl	8000fb4 <GUI_X_GetTime>
 80116ac:	4405      	add	r5, r0
 80116ae:	f7ef fc81 	bl	8000fb4 <GUI_X_GetTime>
 80116b2:	1a2c      	subs	r4, r5, r0
 80116b4:	2c00      	cmp	r4, #0
 80116b6:	dd08      	ble.n	80116ca <GUI_Delay+0x26>
 80116b8:	f000 fe12 	bl	80122e0 <GUI_Exec>
 80116bc:	2c05      	cmp	r4, #5
 80116be:	bfb4      	ite	lt
 80116c0:	4620      	movlt	r0, r4
 80116c2:	2005      	movge	r0, #5
 80116c4:	f7ef fc82 	bl	8000fcc <GUI_X_Delay>
 80116c8:	e7f1      	b.n	80116ae <GUI_Delay+0xa>
 80116ca:	bd38      	pop	{r3, r4, r5, pc}

080116cc <GUI_TOUCH_Calibrate>:
 80116cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80116ce:	2801      	cmp	r0, #1
 80116d0:	9c08      	ldr	r4, [sp, #32]
 80116d2:	d845      	bhi.n	8011760 <GUI_TOUCH_Calibrate+0x94>
 80116d4:	4d25      	ldr	r5, [pc, #148]	; (801176c <GUI_TOUCH_Calibrate+0xa0>)
 80116d6:	d00c      	beq.n	80116f2 <GUI_TOUCH_Calibrate+0x26>
 80116d8:	4e25      	ldr	r6, [pc, #148]	; (8011770 <GUI_TOUCH_Calibrate+0xa4>)
 80116da:	e886 0006 	stmia.w	r6, {r1, r2}
 80116de:	6829      	ldr	r1, [r5, #0]
 80116e0:	f001 0206 	and.w	r2, r1, #6
 80116e4:	2a06      	cmp	r2, #6
 80116e6:	4a23      	ldr	r2, [pc, #140]	; (8011774 <GUI_TOUCH_Calibrate+0xa8>)
 80116e8:	d010      	beq.n	801170c <GUI_TOUCH_Calibrate+0x40>
 80116ea:	f001 0105 	and.w	r1, r1, #5
 80116ee:	2901      	cmp	r1, #1
 80116f0:	e00b      	b.n	801170a <GUI_TOUCH_Calibrate+0x3e>
 80116f2:	4e21      	ldr	r6, [pc, #132]	; (8011778 <GUI_TOUCH_Calibrate+0xac>)
 80116f4:	e886 0006 	stmia.w	r6, {r1, r2}
 80116f8:	6829      	ldr	r1, [r5, #0]
 80116fa:	f001 0205 	and.w	r2, r1, #5
 80116fe:	2a05      	cmp	r2, #5
 8011700:	4a1e      	ldr	r2, [pc, #120]	; (801177c <GUI_TOUCH_Calibrate+0xb0>)
 8011702:	d003      	beq.n	801170c <GUI_TOUCH_Calibrate+0x40>
 8011704:	f001 0106 	and.w	r1, r1, #6
 8011708:	2902      	cmp	r1, #2
 801170a:	d102      	bne.n	8011712 <GUI_TOUCH_Calibrate+0x46>
 801170c:	6014      	str	r4, [r2, #0]
 801170e:	6053      	str	r3, [r2, #4]
 8011710:	e001      	b.n	8011716 <GUI_TOUCH_Calibrate+0x4a>
 8011712:	e882 0018 	stmia.w	r2, {r3, r4}
 8011716:	4b1a      	ldr	r3, [pc, #104]	; (8011780 <GUI_TOUCH_Calibrate+0xb4>)
 8011718:	781a      	ldrb	r2, [r3, #0]
 801171a:	4102      	asrs	r2, r0
 801171c:	07d2      	lsls	r2, r2, #31
 801171e:	bf44      	itt	mi
 8011720:	2200      	movmi	r2, #0
 8011722:	701a      	strbmi	r2, [r3, #0]
 8011724:	2201      	movs	r2, #1
 8011726:	fa02 f000 	lsl.w	r0, r2, r0
 801172a:	781a      	ldrb	r2, [r3, #0]
 801172c:	4310      	orrs	r0, r2
 801172e:	b2c0      	uxtb	r0, r0
 8011730:	2803      	cmp	r0, #3
 8011732:	7018      	strb	r0, [r3, #0]
 8011734:	d116      	bne.n	8011764 <GUI_TOUCH_Calibrate+0x98>
 8011736:	4c13      	ldr	r4, [pc, #76]	; (8011784 <GUI_TOUCH_Calibrate+0xb8>)
 8011738:	6823      	ldr	r3, [r4, #0]
 801173a:	7c58      	ldrb	r0, [r3, #17]
 801173c:	f7fe fd7c 	bl	8010238 <LCD_GetXSizeEx>
 8011740:	6823      	ldr	r3, [r4, #0]
 8011742:	4605      	mov	r5, r0
 8011744:	7c58      	ldrb	r0, [r3, #17]
 8011746:	f7fe fd7a 	bl	801023e <LCD_GetYSizeEx>
 801174a:	4b0c      	ldr	r3, [pc, #48]	; (801177c <GUI_TOUCH_Calibrate+0xb0>)
 801174c:	9002      	str	r0, [sp, #8]
 801174e:	e88d 0028 	stmia.w	sp, {r3, r5}
 8011752:	4907      	ldr	r1, [pc, #28]	; (8011770 <GUI_TOUCH_Calibrate+0xa4>)
 8011754:	4a08      	ldr	r2, [pc, #32]	; (8011778 <GUI_TOUCH_Calibrate+0xac>)
 8011756:	4b07      	ldr	r3, [pc, #28]	; (8011774 <GUI_TOUCH_Calibrate+0xa8>)
 8011758:	2002      	movs	r0, #2
 801175a:	f000 f8ff 	bl	801195c <GUI_TOUCH_CalcCoefficients>
 801175e:	e002      	b.n	8011766 <GUI_TOUCH_Calibrate+0x9a>
 8011760:	2001      	movs	r0, #1
 8011762:	e000      	b.n	8011766 <GUI_TOUCH_Calibrate+0x9a>
 8011764:	2000      	movs	r0, #0
 8011766:	b004      	add	sp, #16
 8011768:	bd70      	pop	{r4, r5, r6, pc}
 801176a:	bf00      	nop
 801176c:	2001d154 	.word	0x2001d154
 8011770:	2001d140 	.word	0x2001d140
 8011774:	2001d15c 	.word	0x2001d15c
 8011778:	2001d168 	.word	0x2001d168
 801177c:	2001d148 	.word	0x2001d148
 8011780:	2001d150 	.word	0x2001d150
 8011784:	20000110 	.word	0x20000110

08011788 <GUI_TOUCH_Exec>:
 8011788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801178a:	4c29      	ldr	r4, [pc, #164]	; (8011830 <GUI_TOUCH_Exec+0xa8>)
 801178c:	4d29      	ldr	r5, [pc, #164]	; (8011834 <GUI_TOUCH_Exec+0xac>)
 801178e:	7823      	ldrb	r3, [r4, #0]
 8011790:	b087      	sub	sp, #28
 8011792:	4626      	mov	r6, r4
 8011794:	b943      	cbnz	r3, 80117a8 <GUI_TOUCH_Exec+0x20>
 8011796:	f7ef fc4f 	bl	8001038 <GUI_TOUCH_X_MeasureY>
 801179a:	6028      	str	r0, [r5, #0]
 801179c:	f7ef fc3e 	bl	800101c <GUI_TOUCH_X_ActivateY>
 80117a0:	7823      	ldrb	r3, [r4, #0]
 80117a2:	3301      	adds	r3, #1
 80117a4:	7023      	strb	r3, [r4, #0]
 80117a6:	e040      	b.n	801182a <GUI_TOUCH_Exec+0xa2>
 80117a8:	f7ef fc3f 	bl	800102a <GUI_TOUCH_X_MeasureX>
 80117ac:	4c22      	ldr	r4, [pc, #136]	; (8011838 <GUI_TOUCH_Exec+0xb0>)
 80117ae:	6020      	str	r0, [r4, #0]
 80117b0:	f7ef fc2d 	bl	800100e <GUI_TOUCH_X_ActivateX>
 80117b4:	6823      	ldr	r3, [r4, #0]
 80117b6:	9301      	str	r3, [sp, #4]
 80117b8:	682b      	ldr	r3, [r5, #0]
 80117ba:	9302      	str	r3, [sp, #8]
 80117bc:	f006 f972 	bl	8017aa4 <GUI_TOUCH_GetLayer>
 80117c0:	a902      	add	r1, sp, #8
 80117c2:	f88d 0015 	strb.w	r0, [sp, #21]
 80117c6:	a801      	add	r0, sp, #4
 80117c8:	f000 f88a 	bl	80118e0 <GUI_TOUCH_CalibratePoint>
 80117cc:	4c1b      	ldr	r4, [pc, #108]	; (801183c <GUI_TOUCH_Exec+0xb4>)
 80117ce:	b148      	cbz	r0, 80117e4 <GUI_TOUCH_Exec+0x5c>
 80117d0:	7823      	ldrb	r3, [r4, #0]
 80117d2:	b343      	cbz	r3, 8011826 <GUI_TOUCH_Exec+0x9e>
 80117d4:	4b1a      	ldr	r3, [pc, #104]	; (8011840 <GUI_TOUCH_Exec+0xb8>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	9303      	str	r3, [sp, #12]
 80117da:	4b1a      	ldr	r3, [pc, #104]	; (8011844 <GUI_TOUCH_Exec+0xbc>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	9304      	str	r3, [sp, #16]
 80117e0:	2500      	movs	r5, #0
 80117e2:	e01a      	b.n	801181a <GUI_TOUCH_Exec+0x92>
 80117e4:	4816      	ldr	r0, [pc, #88]	; (8011840 <GUI_TOUCH_Exec+0xb8>)
 80117e6:	4917      	ldr	r1, [pc, #92]	; (8011844 <GUI_TOUCH_Exec+0xbc>)
 80117e8:	f894 c000 	ldrb.w	ip, [r4]
 80117ec:	9a01      	ldr	r2, [sp, #4]
 80117ee:	6807      	ldr	r7, [r0, #0]
 80117f0:	9b02      	ldr	r3, [sp, #8]
 80117f2:	680d      	ldr	r5, [r1, #0]
 80117f4:	f1bc 0f00 	cmp.w	ip, #0
 80117f8:	d00a      	beq.n	8011810 <GUI_TOUCH_Exec+0x88>
 80117fa:	1bd7      	subs	r7, r2, r7
 80117fc:	1b5d      	subs	r5, r3, r5
 80117fe:	2f00      	cmp	r7, #0
 8011800:	bfb8      	it	lt
 8011802:	427f      	neglt	r7, r7
 8011804:	2d00      	cmp	r5, #0
 8011806:	bfb8      	it	lt
 8011808:	426d      	neglt	r5, r5
 801180a:	443d      	add	r5, r7
 801180c:	2d02      	cmp	r5, #2
 801180e:	dd0a      	ble.n	8011826 <GUI_TOUCH_Exec+0x9e>
 8011810:	6002      	str	r2, [r0, #0]
 8011812:	9203      	str	r2, [sp, #12]
 8011814:	600b      	str	r3, [r1, #0]
 8011816:	9304      	str	r3, [sp, #16]
 8011818:	2501      	movs	r5, #1
 801181a:	a803      	add	r0, sp, #12
 801181c:	f88d 5014 	strb.w	r5, [sp, #20]
 8011820:	f000 fae8 	bl	8011df4 <GUI_TOUCH_StoreStateEx>
 8011824:	7025      	strb	r5, [r4, #0]
 8011826:	2300      	movs	r3, #0
 8011828:	7033      	strb	r3, [r6, #0]
 801182a:	b007      	add	sp, #28
 801182c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801182e:	bf00      	nop
 8011830:	2001d159 	.word	0x2001d159
 8011834:	2001d170 	.word	0x2001d170
 8011838:	2001d164 	.word	0x2001d164
 801183c:	2001d158 	.word	0x2001d158
 8011840:	200000fc 	.word	0x200000fc
 8011844:	200000f8 	.word	0x200000f8

08011848 <GUI_TOUCH_TransformPoint>:
 8011848:	b570      	push	{r4, r5, r6, lr}
 801184a:	4b22      	ldr	r3, [pc, #136]	; (80118d4 <GUI_TOUCH_TransformPoint+0x8c>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	ed2d 8b02 	vpush	{d8}
 8011852:	4606      	mov	r6, r0
 8011854:	460d      	mov	r5, r1
 8011856:	b3c3      	cbz	r3, 80118ca <GUI_TOUCH_TransformPoint+0x82>
 8011858:	edd0 7a00 	vldr	s15, [r0]
 801185c:	4c1e      	ldr	r4, [pc, #120]	; (80118d8 <GUI_TOUCH_TransformPoint+0x90>)
 801185e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8011862:	edd1 7a00 	vldr	s15, [r1]
 8011866:	ed94 7a01 	vldr	s14, [r4, #4]
 801186a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 801186e:	edd4 7a00 	vldr	s15, [r4]
 8011872:	ee28 7a87 	vmul.f32	s14, s17, s14
 8011876:	eea7 7a88 	vfma.f32	s14, s15, s16
 801187a:	edd4 7a02 	vldr	s15, [r4, #8]
 801187e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011882:	ee17 0a90 	vmov	r0, s15
 8011886:	f7ee fe7f 	bl	8000588 <__aeabi_f2d>
 801188a:	2200      	movs	r2, #0
 801188c:	4b13      	ldr	r3, [pc, #76]	; (80118dc <GUI_TOUCH_TransformPoint+0x94>)
 801188e:	f7ee fd1d 	bl	80002cc <__adddf3>
 8011892:	f7ef f96b 	bl	8000b6c <__aeabi_d2iz>
 8011896:	edd4 7a04 	vldr	s15, [r4, #16]
 801189a:	ed94 7a03 	vldr	s14, [r4, #12]
 801189e:	6030      	str	r0, [r6, #0]
 80118a0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80118a4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80118a8:	ed94 7a05 	vldr	s14, [r4, #20]
 80118ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80118b0:	ee17 0a10 	vmov	r0, s14
 80118b4:	f7ee fe68 	bl	8000588 <__aeabi_f2d>
 80118b8:	2200      	movs	r2, #0
 80118ba:	4b08      	ldr	r3, [pc, #32]	; (80118dc <GUI_TOUCH_TransformPoint+0x94>)
 80118bc:	f7ee fd06 	bl	80002cc <__adddf3>
 80118c0:	f7ef f954 	bl	8000b6c <__aeabi_d2iz>
 80118c4:	6028      	str	r0, [r5, #0]
 80118c6:	2000      	movs	r0, #0
 80118c8:	e000      	b.n	80118cc <GUI_TOUCH_TransformPoint+0x84>
 80118ca:	2001      	movs	r0, #1
 80118cc:	ecbd 8b02 	vpop	{d8}
 80118d0:	bd70      	pop	{r4, r5, r6, pc}
 80118d2:	bf00      	nop
 80118d4:	2001d184 	.word	0x2001d184
 80118d8:	2001d188 	.word	0x2001d188
 80118dc:	3fe00000 	.word	0x3fe00000

080118e0 <GUI_TOUCH_CalibratePoint>:
 80118e0:	4b18      	ldr	r3, [pc, #96]	; (8011944 <GUI_TOUCH_CalibratePoint+0x64>)
 80118e2:	6802      	ldr	r2, [r0, #0]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	b570      	push	{r4, r5, r6, lr}
 80118ea:	4605      	mov	r5, r0
 80118ec:	460c      	mov	r4, r1
 80118ee:	db27      	blt.n	8011940 <GUI_TOUCH_CalibratePoint+0x60>
 80118f0:	4e15      	ldr	r6, [pc, #84]	; (8011948 <GUI_TOUCH_CalibratePoint+0x68>)
 80118f2:	680b      	ldr	r3, [r1, #0]
 80118f4:	6836      	ldr	r6, [r6, #0]
 80118f6:	42b3      	cmp	r3, r6
 80118f8:	db22      	blt.n	8011940 <GUI_TOUCH_CalibratePoint+0x60>
 80118fa:	4e14      	ldr	r6, [pc, #80]	; (801194c <GUI_TOUCH_CalibratePoint+0x6c>)
 80118fc:	6836      	ldr	r6, [r6, #0]
 80118fe:	42b2      	cmp	r2, r6
 8011900:	dc1e      	bgt.n	8011940 <GUI_TOUCH_CalibratePoint+0x60>
 8011902:	4a13      	ldr	r2, [pc, #76]	; (8011950 <GUI_TOUCH_CalibratePoint+0x70>)
 8011904:	6812      	ldr	r2, [r2, #0]
 8011906:	4293      	cmp	r3, r2
 8011908:	dc1a      	bgt.n	8011940 <GUI_TOUCH_CalibratePoint+0x60>
 801190a:	f7ff ff9d 	bl	8011848 <GUI_TOUCH_TransformPoint>
 801190e:	b9c0      	cbnz	r0, 8011942 <GUI_TOUCH_CalibratePoint+0x62>
 8011910:	682a      	ldr	r2, [r5, #0]
 8011912:	2a00      	cmp	r2, #0
 8011914:	da01      	bge.n	801191a <GUI_TOUCH_CalibratePoint+0x3a>
 8011916:	6028      	str	r0, [r5, #0]
 8011918:	e006      	b.n	8011928 <GUI_TOUCH_CalibratePoint+0x48>
 801191a:	4b0e      	ldr	r3, [pc, #56]	; (8011954 <GUI_TOUCH_CalibratePoint+0x74>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	429a      	cmp	r2, r3
 8011920:	bfa4      	itt	ge
 8011922:	f103 33ff 	addge.w	r3, r3, #4294967295
 8011926:	602b      	strge	r3, [r5, #0]
 8011928:	6822      	ldr	r2, [r4, #0]
 801192a:	2a00      	cmp	r2, #0
 801192c:	da01      	bge.n	8011932 <GUI_TOUCH_CalibratePoint+0x52>
 801192e:	2300      	movs	r3, #0
 8011930:	e004      	b.n	801193c <GUI_TOUCH_CalibratePoint+0x5c>
 8011932:	4b09      	ldr	r3, [pc, #36]	; (8011958 <GUI_TOUCH_CalibratePoint+0x78>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	429a      	cmp	r2, r3
 8011938:	db03      	blt.n	8011942 <GUI_TOUCH_CalibratePoint+0x62>
 801193a:	3b01      	subs	r3, #1
 801193c:	6023      	str	r3, [r4, #0]
 801193e:	bd70      	pop	{r4, r5, r6, pc}
 8011940:	2001      	movs	r0, #1
 8011942:	bd70      	pop	{r4, r5, r6, pc}
 8011944:	2001d174 	.word	0x2001d174
 8011948:	2001d178 	.word	0x2001d178
 801194c:	2001d1a4 	.word	0x2001d1a4
 8011950:	2001d1a0 	.word	0x2001d1a0
 8011954:	2001d17c 	.word	0x2001d17c
 8011958:	2001d180 	.word	0x2001d180

0801195c <GUI_TOUCH_CalcCoefficients>:
 801195c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011960:	ed2d 8b02 	vpush	{d8}
 8011964:	f8df c3bc 	ldr.w	ip, [pc, #956]	; 8011d24 <GUI_TOUCH_CalcCoefficients+0x3c8>
 8011968:	b08c      	sub	sp, #48	; 0x30
 801196a:	2400      	movs	r4, #0
 801196c:	2802      	cmp	r0, #2
 801196e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8011970:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011972:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8011976:	f8cc 4000 	str.w	r4, [ip]
 801197a:	d135      	bne.n	80119e8 <GUI_TOUCH_CalcCoefficients+0x8c>
 801197c:	c912      	ldmia	r1, {r1, r4}
 801197e:	6818      	ldr	r0, [r3, #0]
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	1a61      	subs	r1, r4, r1
 8011984:	1a1b      	subs	r3, r3, r0
 8011986:	ee00 1a10 	vmov	s0, r1
 801198a:	ee07 3a90 	vmov	s15, r3
 801198e:	eeb8 7ac0 	vcvt.f32.s32	s14, s0
 8011992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011996:	ee05 0a10 	vmov	s10, r0
 801199a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801199e:	6850      	ldr	r0, [r2, #4]
 80119a0:	6812      	ldr	r2, [r2, #0]
 80119a2:	4bdb      	ldr	r3, [pc, #876]	; (8011d10 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 80119a4:	2100      	movs	r1, #0
 80119a6:	1a82      	subs	r2, r0, r2
 80119a8:	6059      	str	r1, [r3, #4]
 80119aa:	60d9      	str	r1, [r3, #12]
 80119ac:	6839      	ldr	r1, [r7, #0]
 80119ae:	eeb8 7ac5 	vcvt.f32.s32	s14, s10
 80119b2:	ee06 2a10 	vmov	s12, r2
 80119b6:	687a      	ldr	r2, [r7, #4]
 80119b8:	edc3 7a00 	vstr	s15, [r3]
 80119bc:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80119c0:	1a52      	subs	r2, r2, r1
 80119c2:	edc3 7a02 	vstr	s15, [r3, #8]
 80119c6:	ee07 2a90 	vmov	s15, r2
 80119ca:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 80119ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119d2:	ee06 1a90 	vmov	s13, r1
 80119d6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80119da:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
 80119de:	edc3 7a04 	vstr	s15, [r3, #16]
 80119e2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80119e6:	e144      	b.n	8011c72 <GUI_TOUCH_CalcCoefficients+0x316>
 80119e8:	f340 8148 	ble.w	8011c7c <GUI_TOUCH_CalcCoefficients+0x320>
 80119ec:	2803      	cmp	r0, #3
 80119ee:	d128      	bne.n	8011a42 <GUI_TOUCH_CalcCoefficients+0xe6>
 80119f0:	4620      	mov	r0, r4
 80119f2:	581d      	ldr	r5, [r3, r0]
 80119f4:	ee00 5a10 	vmov	s0, r5
 80119f8:	583d      	ldr	r5, [r7, r0]
 80119fa:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 80119fe:	ac00      	add	r4, sp, #0
 8011a00:	ee00 5a10 	vmov	s0, r5
 8011a04:	580d      	ldr	r5, [r1, r0]
 8011a06:	4404      	add	r4, r0
 8011a08:	edc4 7a00 	vstr	s15, [r4]
 8011a0c:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8011a10:	ac03      	add	r4, sp, #12
 8011a12:	ee00 5a10 	vmov	s0, r5
 8011a16:	4404      	add	r4, r0
 8011a18:	5815      	ldr	r5, [r2, r0]
 8011a1a:	edc4 7a00 	vstr	s15, [r4]
 8011a1e:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8011a22:	ac0c      	add	r4, sp, #48	; 0x30
 8011a24:	4404      	add	r4, r0
 8011a26:	ee00 5a10 	vmov	s0, r5
 8011a2a:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8011a2e:	ac0c      	add	r4, sp, #48	; 0x30
 8011a30:	4404      	add	r4, r0
 8011a32:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8011a36:	3004      	adds	r0, #4
 8011a38:	280c      	cmp	r0, #12
 8011a3a:	ed44 7a03 	vstr	s15, [r4, #-12]
 8011a3e:	d1d8      	bne.n	80119f2 <GUI_TOUCH_CalcCoefficients+0x96>
 8011a40:	e09b      	b.n	8011b7a <GUI_TOUCH_CalcCoefficients+0x21e>
 8011a42:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011a46:	44a1      	add	r9, r4
 8011a48:	f04f 0800 	mov.w	r8, #0
 8011a4c:	f849 8c0c 	str.w	r8, [r9, #-12]
 8011a50:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011a54:	44a1      	add	r9, r4
 8011a56:	f849 8c18 	str.w	r8, [r9, #-24]
 8011a5a:	f10d 090c 	add.w	r9, sp, #12
 8011a5e:	44a1      	add	r9, r4
 8011a60:	f8c9 8000 	str.w	r8, [r9]
 8011a64:	f10d 0900 	add.w	r9, sp, #0
 8011a68:	44a1      	add	r9, r4
 8011a6a:	3404      	adds	r4, #4
 8011a6c:	2c0c      	cmp	r4, #12
 8011a6e:	f8c9 8000 	str.w	r8, [r9]
 8011a72:	d1e6      	bne.n	8011a42 <GUI_TOUCH_CalcCoefficients+0xe6>
 8011a74:	ed9d 7a02 	vldr	s14, [sp, #8]
 8011a78:	eddd 7a05 	vldr	s15, [sp, #20]
 8011a7c:	eddd 3a08 	vldr	s7, [sp, #32]
 8011a80:	ed9d 4a0b 	vldr	s8, [sp, #44]	; 0x2c
 8011a84:	eddd 1a00 	vldr	s3, [sp]
 8011a88:	eddd 5a01 	vldr	s11, [sp, #4]
 8011a8c:	ed9d 2a04 	vldr	s4, [sp, #16]
 8011a90:	eddd 2a06 	vldr	s5, [sp, #24]
 8011a94:	ed9d 3a07 	vldr	s6, [sp, #28]
 8011a98:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 8011a9c:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 8011aa0:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8011aa4:	2400      	movs	r4, #0
 8011aa6:	591d      	ldr	r5, [r3, r4]
 8011aa8:	ee00 5a10 	vmov	s0, r5
 8011aac:	593d      	ldr	r5, [r7, r4]
 8011aae:	eeb8 6ac0 	vcvt.f32.s32	s12, s0
 8011ab2:	ee00 5a10 	vmov	s0, r5
 8011ab6:	590d      	ldr	r5, [r1, r4]
 8011ab8:	eef8 6ac0 	vcvt.f32.s32	s13, s0
 8011abc:	ee00 5a10 	vmov	s0, r5
 8011ac0:	5915      	ldr	r5, [r2, r4]
 8011ac2:	eef8 4ac0 	vcvt.f32.s32	s9, s0
 8011ac6:	ee00 5a10 	vmov	s0, r5
 8011aca:	eeb8 5ac0 	vcvt.f32.s32	s10, s0
 8011ace:	eee6 2a24 	vfma.f32	s5, s12, s9
 8011ad2:	3404      	adds	r4, #4
 8011ad4:	4544      	cmp	r4, r8
 8011ad6:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8011ada:	eea6 3aa4 	vfma.f32	s6, s13, s9
 8011ade:	eef0 4a60 	vmov.f32	s9, s1
 8011ae2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011ae6:	eee6 1a06 	vfma.f32	s3, s12, s12
 8011aea:	eee6 5a26 	vfma.f32	s11, s12, s13
 8011aee:	eee6 4a05 	vfma.f32	s9, s12, s10
 8011af2:	eeb0 6a41 	vmov.f32	s12, s2
 8011af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011afa:	ee34 4a05 	vadd.f32	s8, s8, s10
 8011afe:	eea6 2aa6 	vfma.f32	s4, s13, s13
 8011b02:	eea6 6a85 	vfma.f32	s12, s13, s10
 8011b06:	d004      	beq.n	8011b12 <GUI_TOUCH_CalcCoefficients+0x1b6>
 8011b08:	eef0 0a64 	vmov.f32	s1, s9
 8011b0c:	eeb0 1a46 	vmov.f32	s2, s12
 8011b10:	e7c9      	b.n	8011aa6 <GUI_TOUCH_CalcCoefficients+0x14a>
 8011b12:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8011b16:	ee05 0a10 	vmov	s10, r0
 8011b1a:	edcd 6a01 	vstr	s13, [sp, #4]
 8011b1e:	eef8 6ac5 	vcvt.f32.s32	s13, s10
 8011b22:	eec1 1a87 	vdiv.f32	s3, s3, s14
 8011b26:	eec5 5a87 	vdiv.f32	s11, s11, s14
 8011b2a:	ee82 2a27 	vdiv.f32	s4, s4, s15
 8011b2e:	eec2 2a87 	vdiv.f32	s5, s5, s14
 8011b32:	ee83 3a27 	vdiv.f32	s6, s6, s15
 8011b36:	eec4 4a87 	vdiv.f32	s9, s9, s14
 8011b3a:	ee86 6a27 	vdiv.f32	s12, s12, s15
 8011b3e:	ee87 7a26 	vdiv.f32	s14, s14, s13
 8011b42:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8011b46:	eec3 3aa6 	vdiv.f32	s7, s7, s13
 8011b4a:	eec4 6a26 	vdiv.f32	s13, s8, s13
 8011b4e:	edcd 1a00 	vstr	s3, [sp]
 8011b52:	edcd 5a03 	vstr	s11, [sp, #12]
 8011b56:	ed8d 2a04 	vstr	s4, [sp, #16]
 8011b5a:	edcd 2a06 	vstr	s5, [sp, #24]
 8011b5e:	ed8d 3a07 	vstr	s6, [sp, #28]
 8011b62:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 8011b66:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 8011b6a:	ed8d 7a02 	vstr	s14, [sp, #8]
 8011b6e:	edcd 7a05 	vstr	s15, [sp, #20]
 8011b72:	edcd 3a08 	vstr	s7, [sp, #32]
 8011b76:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 8011b7a:	ed9d 7a02 	vldr	s14, [sp, #8]
 8011b7e:	eddd 4a05 	vldr	s9, [sp, #20]
 8011b82:	ed9d 6a01 	vldr	s12, [sp, #4]
 8011b86:	ed9d 3a03 	vldr	s6, [sp, #12]
 8011b8a:	eddd 5a00 	vldr	s11, [sp]
 8011b8e:	eddd 2a04 	vldr	s5, [sp, #16]
 8011b92:	ee76 6a47 	vsub.f32	s13, s12, s14
 8011b96:	ee73 1a64 	vsub.f32	s3, s6, s9
 8011b9a:	ee35 2ac7 	vsub.f32	s4, s11, s14
 8011b9e:	ee32 1ae4 	vsub.f32	s2, s5, s9
 8011ba2:	ee61 7ae6 	vnmul.f32	s15, s3, s13
 8011ba6:	eee2 7a01 	vfma.f32	s15, s4, s2
 8011baa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb2:	d063      	beq.n	8011c7c <GUI_TOUCH_CalcCoefficients+0x320>
 8011bb4:	ed9d 4a08 	vldr	s8, [sp, #32]
 8011bb8:	eddd 0a07 	vldr	s1, [sp, #28]
 8011bbc:	eddd 3a06 	vldr	s7, [sp, #24]
 8011bc0:	4b53      	ldr	r3, [pc, #332]	; (8011d10 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 8011bc2:	ee30 8ac4 	vsub.f32	s16, s1, s8
 8011bc6:	ee33 5ac4 	vsub.f32	s10, s7, s8
 8011bca:	ee21 0ac8 	vnmul.f32	s0, s3, s16
 8011bce:	eea5 0a01 	vfma.f32	s0, s10, s2
 8011bd2:	ee26 5ac5 	vnmul.f32	s10, s13, s10
 8011bd6:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8011bda:	eea8 5a02 	vfma.f32	s10, s16, s4
 8011bde:	ed83 0a00 	vstr	s0, [r3]
 8011be2:	ee85 5a27 	vdiv.f32	s10, s10, s15
 8011be6:	ed83 5a01 	vstr	s10, [r3, #4]
 8011bea:	ee23 5ac7 	vnmul.f32	s10, s7, s14
 8011bee:	eea5 5a84 	vfma.f32	s10, s11, s8
 8011bf2:	ee24 4a46 	vnmul.f32	s8, s8, s12
 8011bf6:	ee22 5a85 	vmul.f32	s10, s5, s10
 8011bfa:	eea7 4a20 	vfma.f32	s8, s14, s1
 8011bfe:	eea3 5a04 	vfma.f32	s10, s6, s8
 8011c02:	ee20 4ae5 	vnmul.f32	s8, s1, s11
 8011c06:	eea6 4a23 	vfma.f32	s8, s12, s7
 8011c0a:	eddd 3a0a 	vldr	s7, [sp, #40]	; 0x28
 8011c0e:	eea4 5a84 	vfma.f32	s10, s9, s8
 8011c12:	ed9d 4a09 	vldr	s8, [sp, #36]	; 0x24
 8011c16:	ee85 5a27 	vdiv.f32	s10, s10, s15
 8011c1a:	ed83 5a02 	vstr	s10, [r3, #8]
 8011c1e:	ed9d 5a0b 	vldr	s10, [sp, #44]	; 0x2c
 8011c22:	ee34 0a45 	vsub.f32	s0, s8, s10
 8011c26:	ee73 0ac5 	vsub.f32	s1, s7, s10
 8011c2a:	ee66 6ac0 	vnmul.f32	s13, s13, s0
 8011c2e:	ee61 1ae0 	vnmul.f32	s3, s3, s1
 8011c32:	eee0 6a82 	vfma.f32	s13, s1, s4
 8011c36:	eee0 1a01 	vfma.f32	s3, s0, s2
 8011c3a:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 8011c3e:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 8011c42:	edc3 6a04 	vstr	s13, [r3, #16]
 8011c46:	ee64 6a47 	vnmul.f32	s13, s8, s14
 8011c4a:	edc3 1a03 	vstr	s3, [r3, #12]
 8011c4e:	eee5 6a85 	vfma.f32	s13, s11, s10
 8011c52:	ee25 5a46 	vnmul.f32	s10, s10, s12
 8011c56:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8011c5a:	eea7 5a23 	vfma.f32	s10, s14, s7
 8011c5e:	ee63 5ae5 	vnmul.f32	s11, s7, s11
 8011c62:	eee3 6a05 	vfma.f32	s13, s6, s10
 8011c66:	eee6 5a04 	vfma.f32	s11, s12, s8
 8011c6a:	eee4 6aa5 	vfma.f32	s13, s9, s11
 8011c6e:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8011c72:	edc3 7a05 	vstr	s15, [r3, #20]
 8011c76:	2301      	movs	r3, #1
 8011c78:	f8cc 3000 	str.w	r3, [ip]
 8011c7c:	f8dc 0000 	ldr.w	r0, [ip]
 8011c80:	2800      	cmp	r0, #0
 8011c82:	f000 80a7 	beq.w	8011dd4 <GUI_TOUCH_CalcCoefficients+0x478>
 8011c86:	4b23      	ldr	r3, [pc, #140]	; (8011d14 <GUI_TOUCH_CalcCoefficients+0x3b8>)
 8011c88:	eddf 7a23 	vldr	s15, [pc, #140]	; 8011d18 <GUI_TOUCH_CalcCoefficients+0x3bc>
 8011c8c:	601e      	str	r6, [r3, #0]
 8011c8e:	4b23      	ldr	r3, [pc, #140]	; (8011d1c <GUI_TOUCH_CalcCoefficients+0x3c0>)
 8011c90:	f8c3 a000 	str.w	sl, [r3]
 8011c94:	4b1e      	ldr	r3, [pc, #120]	; (8011d10 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 8011c96:	ed93 7a00 	vldr	s14, [r3]
 8011c9a:	eeb4 7a67 	vcmp.f32	s14, s15
 8011c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca2:	d012      	beq.n	8011cca <GUI_TOUCH_CalcCoefficients+0x36e>
 8011ca4:	edd3 6a01 	vldr	s13, [r3, #4]
 8011ca8:	eee6 7ae7 	vfms.f32	s15, s13, s15
 8011cac:	edd3 6a02 	vldr	s13, [r3, #8]
 8011cb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011cb4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011cb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011cbc:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8011cc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cc4:	ee17 1a90 	vmov	r1, s15
 8011cc8:	e001      	b.n	8011cce <GUI_TOUCH_CalcCoefficients+0x372>
 8011cca:	f04f 31ff 	mov.w	r1, #4294967295
 8011cce:	edd3 7a04 	vldr	s15, [r3, #16]
 8011cd2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8011d18 <GUI_TOUCH_CalcCoefficients+0x3bc>
 8011cd6:	4c12      	ldr	r4, [pc, #72]	; (8011d20 <GUI_TOUCH_CalcCoefficients+0x3c4>)
 8011cd8:	4a0d      	ldr	r2, [pc, #52]	; (8011d10 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 8011cda:	6021      	str	r1, [r4, #0]
 8011cdc:	eef4 7a66 	vcmp.f32	s15, s13
 8011ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce4:	4627      	mov	r7, r4
 8011ce6:	d01f      	beq.n	8011d28 <GUI_TOUCH_CalcCoefficients+0x3cc>
 8011ce8:	ed92 6a03 	vldr	s12, [r2, #12]
 8011cec:	eee6 6a66 	vfms.f32	s13, s12, s13
 8011cf0:	ed92 6a05 	vldr	s12, [r2, #20]
 8011cf4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8011cf8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011cfc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8011d00:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 8011d04:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8011d08:	ee16 2a90 	vmov	r2, s13
 8011d0c:	e00e      	b.n	8011d2c <GUI_TOUCH_CalcCoefficients+0x3d0>
 8011d0e:	bf00      	nop
 8011d10:	2001d188 	.word	0x2001d188
 8011d14:	2001d17c 	.word	0x2001d17c
 8011d18:	00000000 	.word	0x00000000
 8011d1c:	2001d180 	.word	0x2001d180
 8011d20:	2001d174 	.word	0x2001d174
 8011d24:	2001d184 	.word	0x2001d184
 8011d28:	f04f 32ff 	mov.w	r2, #4294967295
 8011d2c:	4c2e      	ldr	r4, [pc, #184]	; (8011de8 <GUI_TOUCH_CalcCoefficients+0x48c>)
 8011d2e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011d32:	3e01      	subs	r6, #1
 8011d34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d3c:	ee05 6a90 	vmov	s11, r6
 8011d40:	6022      	str	r2, [r4, #0]
 8011d42:	ee06 aa10 	vmov	s12, sl
 8011d46:	4626      	mov	r6, r4
 8011d48:	d016      	beq.n	8011d78 <GUI_TOUCH_CalcCoefficients+0x41c>
 8011d4a:	ed93 5a01 	vldr	s10, [r3, #4]
 8011d4e:	eef8 4ac6 	vcvt.f32.s32	s9, s12
 8011d52:	eef8 6ae5 	vcvt.f32.s32	s13, s11
 8011d56:	eee4 6ac5 	vfms.f32	s13, s9, s10
 8011d5a:	ed93 5a02 	vldr	s10, [r3, #8]
 8011d5e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8011d62:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8011d66:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8011d6a:	ee86 7a87 	vdiv.f32	s14, s13, s14
 8011d6e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011d72:	ee17 4a10 	vmov	r4, s14
 8011d76:	e001      	b.n	8011d7c <GUI_TOUCH_CalcCoefficients+0x420>
 8011d78:	f04f 34ff 	mov.w	r4, #4294967295
 8011d7c:	4d1b      	ldr	r5, [pc, #108]	; (8011dec <GUI_TOUCH_CalcCoefficients+0x490>)
 8011d7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d86:	602c      	str	r4, [r5, #0]
 8011d88:	46ac      	mov	ip, r5
 8011d8a:	d016      	beq.n	8011dba <GUI_TOUCH_CalcCoefficients+0x45e>
 8011d8c:	edd3 6a03 	vldr	s13, [r3, #12]
 8011d90:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8011d94:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 8011d98:	eea5 7ae6 	vfms.f32	s14, s11, s13
 8011d9c:	edd3 6a05 	vldr	s13, [r3, #20]
 8011da0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011da4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011da8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011dac:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8011db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011db4:	ee17 3a90 	vmov	r3, s15
 8011db8:	e001      	b.n	8011dbe <GUI_TOUCH_CalcCoefficients+0x462>
 8011dba:	f04f 33ff 	mov.w	r3, #4294967295
 8011dbe:	42a1      	cmp	r1, r4
 8011dc0:	4d0b      	ldr	r5, [pc, #44]	; (8011df0 <GUI_TOUCH_CalcCoefficients+0x494>)
 8011dc2:	bfc4      	itt	gt
 8011dc4:	603c      	strgt	r4, [r7, #0]
 8011dc6:	f8cc 1000 	strgt.w	r1, [ip]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	602b      	str	r3, [r5, #0]
 8011dce:	bfc4      	itt	gt
 8011dd0:	6033      	strgt	r3, [r6, #0]
 8011dd2:	602a      	strgt	r2, [r5, #0]
 8011dd4:	f1d0 0001 	rsbs	r0, r0, #1
 8011dd8:	bf38      	it	cc
 8011dda:	2000      	movcc	r0, #0
 8011ddc:	b00c      	add	sp, #48	; 0x30
 8011dde:	ecbd 8b02 	vpop	{d8}
 8011de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011de6:	bf00      	nop
 8011de8:	2001d178 	.word	0x2001d178
 8011dec:	2001d1a4 	.word	0x2001d1a4
 8011df0:	2001d1a0 	.word	0x2001d1a0

08011df4 <GUI_TOUCH_StoreStateEx>:
 8011df4:	b530      	push	{r4, r5, lr}
 8011df6:	4d0f      	ldr	r5, [pc, #60]	; (8011e34 <GUI_TOUCH_StoreStateEx+0x40>)
 8011df8:	b085      	sub	sp, #20
 8011dfa:	4629      	mov	r1, r5
 8011dfc:	220c      	movs	r2, #12
 8011dfe:	4604      	mov	r4, r0
 8011e00:	f008 fcd8 	bl	801a7b4 <memcmp>
 8011e04:	b1a0      	cbz	r0, 8011e30 <GUI_TOUCH_StoreStateEx+0x3c>
 8011e06:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011e0a:	4b0b      	ldr	r3, [pc, #44]	; (8011e38 <GUI_TOUCH_StoreStateEx+0x44>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011e12:	b153      	cbz	r3, 8011e2a <GUI_TOUCH_StoreStateEx+0x36>
 8011e14:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011e18:	ad01      	add	r5, sp, #4
 8011e1a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011e1e:	4628      	mov	r0, r5
 8011e20:	a902      	add	r1, sp, #8
 8011e22:	4798      	blx	r3
 8011e24:	b920      	cbnz	r0, 8011e30 <GUI_TOUCH_StoreStateEx+0x3c>
 8011e26:	4628      	mov	r0, r5
 8011e28:	e000      	b.n	8011e2c <GUI_TOUCH_StoreStateEx+0x38>
 8011e2a:	4620      	mov	r0, r4
 8011e2c:	f000 f92c 	bl	8012088 <GUI_PID_StoreState>
 8011e30:	b005      	add	sp, #20
 8011e32:	bd30      	pop	{r4, r5, pc}
 8011e34:	2001d1a8 	.word	0x2001d1a8
 8011e38:	2001d1b4 	.word	0x2001d1b4

08011e3c <GUI_SetTextMode>:
 8011e3c:	4b03      	ldr	r3, [pc, #12]	; (8011e4c <GUI_SetTextMode+0x10>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 8011e44:	8558      	strh	r0, [r3, #42]	; 0x2a
 8011e46:	4610      	mov	r0, r2
 8011e48:	4770      	bx	lr
 8011e4a:	bf00      	nop
 8011e4c:	20000110 	.word	0x20000110

08011e50 <GUI_SetTextAlign>:
 8011e50:	4b03      	ldr	r3, [pc, #12]	; (8011e60 <GUI_SetTextAlign+0x10>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8011e58:	8598      	strh	r0, [r3, #44]	; 0x2c
 8011e5a:	4610      	mov	r0, r2
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop
 8011e60:	20000110 	.word	0x20000110

08011e64 <GUI_SetLineStyle>:
 8011e64:	4b02      	ldr	r3, [pc, #8]	; (8011e70 <GUI_SetLineStyle+0xc>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	7e9a      	ldrb	r2, [r3, #26]
 8011e6a:	7698      	strb	r0, [r3, #26]
 8011e6c:	4610      	mov	r0, r2
 8011e6e:	4770      	bx	lr
 8011e70:	20000110 	.word	0x20000110

08011e74 <GUI_SetFont>:
 8011e74:	4b03      	ldr	r3, [pc, #12]	; (8011e84 <GUI_SetFont+0x10>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	69d9      	ldr	r1, [r3, #28]
 8011e7a:	b100      	cbz	r0, 8011e7e <GUI_SetFont+0xa>
 8011e7c:	61d8      	str	r0, [r3, #28]
 8011e7e:	4608      	mov	r0, r1
 8011e80:	4770      	bx	lr
 8011e82:	bf00      	nop
 8011e84:	20000110 	.word	0x20000110

08011e88 <GUI_SetDrawMode>:
 8011e88:	f7fe bab8 	b.w	80103fc <LCD_SetDrawMode>

08011e8c <GL_SetDefault>:
 8011e8c:	b508      	push	{r3, lr}
 8011e8e:	2000      	movs	r0, #0
 8011e90:	f000 f81c 	bl	8011ecc <GUI_SetBkColor>
 8011e94:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011e98:	f000 f81a 	bl	8011ed0 <GUI_SetColor>
 8011e9c:	2001      	movs	r0, #1
 8011e9e:	f000 f8c1 	bl	8012024 <GUI_SetPenSize>
 8011ea2:	2000      	movs	r0, #0
 8011ea4:	f7ff ffd4 	bl	8011e50 <GUI_SetTextAlign>
 8011ea8:	2000      	movs	r0, #0
 8011eaa:	f7ff ffc7 	bl	8011e3c <GUI_SetTextMode>
 8011eae:	2000      	movs	r0, #0
 8011eb0:	f7ff ffea 	bl	8011e88 <GUI_SetDrawMode>
 8011eb4:	4b04      	ldr	r3, [pc, #16]	; (8011ec8 <GL_SetDefault+0x3c>)
 8011eb6:	6818      	ldr	r0, [r3, #0]
 8011eb8:	f7ff ffdc 	bl	8011e74 <GUI_SetFont>
 8011ebc:	2000      	movs	r0, #0
 8011ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011ec2:	f7ff bfcf 	b.w	8011e64 <GUI_SetLineStyle>
 8011ec6:	bf00      	nop
 8011ec8:	20000114 	.word	0x20000114

08011ecc <GUI_SetBkColor>:
 8011ecc:	f7fe bdde 	b.w	8010a8c <LCD_SetBkColor>

08011ed0 <GUI_SetColor>:
 8011ed0:	f7fe bde4 	b.w	8010a9c <LCD_SetColor>

08011ed4 <GUI__AlphaPreserveTrans>:
 8011ed4:	b510      	push	{r4, lr}
 8011ed6:	4b07      	ldr	r3, [pc, #28]	; (8011ef4 <GUI__AlphaPreserveTrans+0x20>)
 8011ed8:	781c      	ldrb	r4, [r3, #0]
 8011eda:	b120      	cbz	r0, 8011ee6 <GUI__AlphaPreserveTrans+0x12>
 8011edc:	2201      	movs	r2, #1
 8011ede:	701a      	strb	r2, [r3, #0]
 8011ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ee4:	e002      	b.n	8011eec <GUI__AlphaPreserveTrans+0x18>
 8011ee6:	7018      	strb	r0, [r3, #0]
 8011ee8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011eec:	f005 f94a 	bl	8017184 <LCD_AA_SetAndMask>
 8011ef0:	4620      	mov	r0, r4
 8011ef2:	bd10      	pop	{r4, pc}
 8011ef4:	2001d5cd 	.word	0x2001d5cd

08011ef8 <GUI_GetCursorLayer>:
 8011ef8:	2801      	cmp	r0, #1
 8011efa:	bf9a      	itte	ls
 8011efc:	4b02      	ldrls	r3, [pc, #8]	; (8011f08 <GUI_GetCursorLayer+0x10>)
 8011efe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8011f02:	2000      	movhi	r0, #0
 8011f04:	4770      	bx	lr
 8011f06:	bf00      	nop
 8011f08:	2001d1b8 	.word	0x2001d1b8

08011f0c <GUI_GetLayerPosEx>:
 8011f0c:	b538      	push	{r3, r4, r5, lr}
 8011f0e:	460d      	mov	r5, r1
 8011f10:	4614      	mov	r4, r2
 8011f12:	f7fe f959 	bl	80101c8 <LCD_GetPosEx>
 8011f16:	b110      	cbz	r0, 8011f1e <GUI_GetLayerPosEx+0x12>
 8011f18:	2300      	movs	r3, #0
 8011f1a:	602b      	str	r3, [r5, #0]
 8011f1c:	6023      	str	r3, [r4, #0]
 8011f1e:	bd38      	pop	{r3, r4, r5, pc}

08011f20 <GUI_SelectLayer>:
 8011f20:	b570      	push	{r4, r5, r6, lr}
 8011f22:	4d08      	ldr	r5, [pc, #32]	; (8011f44 <GUI_SelectLayer+0x24>)
 8011f24:	682b      	ldr	r3, [r5, #0]
 8011f26:	2801      	cmp	r0, #1
 8011f28:	4604      	mov	r4, r0
 8011f2a:	7c5e      	ldrb	r6, [r3, #17]
 8011f2c:	d808      	bhi.n	8011f40 <GUI_SelectLayer+0x20>
 8011f2e:	f000 feb7 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 8011f32:	b128      	cbz	r0, 8011f40 <GUI_SelectLayer+0x20>
 8011f34:	682b      	ldr	r3, [r5, #0]
 8011f36:	745c      	strb	r4, [r3, #17]
 8011f38:	f000 f80e 	bl	8011f58 <GUI_SelectLCD>
 8011f3c:	4b02      	ldr	r3, [pc, #8]	; (8011f48 <GUI_SelectLayer+0x28>)
 8011f3e:	601c      	str	r4, [r3, #0]
 8011f40:	4630      	mov	r0, r6
 8011f42:	bd70      	pop	{r4, r5, r6, pc}
 8011f44:	20000110 	.word	0x20000110
 8011f48:	2001d580 	.word	0x2001d580

08011f4c <GUI_SetLayerPosEx>:
 8011f4c:	f7fe b90c 	b.w	8010168 <LCD_SetPosEx>

08011f50 <GUI_SetLayerSizeEx>:
 8011f50:	f7fe b8dc 	b.w	801010c <LCD_SetSizeEx>

08011f54 <GUI_SetLayerVisEx>:
 8011f54:	f7fe b8f2 	b.w	801013c <LCD_SetVisEx>

08011f58 <GUI_SelectLCD>:
 8011f58:	b508      	push	{r3, lr}
 8011f5a:	f004 ff3b 	bl	8016dd4 <LCD_SelectLCD>
 8011f5e:	f7fe f893 	bl	8010088 <LCD_UpdateColorIndices>
 8011f62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011f66:	f7fb bebd 	b.w	800dce4 <WM_Activate>
	...

08011f6c <GUI_SaveContext_W>:
 8011f6c:	b508      	push	{r3, lr}
 8011f6e:	4b03      	ldr	r3, [pc, #12]	; (8011f7c <GUI_SaveContext_W+0x10>)
 8011f70:	2270      	movs	r2, #112	; 0x70
 8011f72:	6819      	ldr	r1, [r3, #0]
 8011f74:	f008 fc2c 	bl	801a7d0 <memcpy>
 8011f78:	bd08      	pop	{r3, pc}
 8011f7a:	bf00      	nop
 8011f7c:	20000110 	.word	0x20000110

08011f80 <GUI_RestoreContext>:
 8011f80:	b508      	push	{r3, lr}
 8011f82:	4b03      	ldr	r3, [pc, #12]	; (8011f90 <GUI_RestoreContext+0x10>)
 8011f84:	4601      	mov	r1, r0
 8011f86:	2270      	movs	r2, #112	; 0x70
 8011f88:	6818      	ldr	r0, [r3, #0]
 8011f8a:	f008 fc21 	bl	801a7d0 <memcpy>
 8011f8e:	bd08      	pop	{r3, pc}
 8011f90:	20000110 	.word	0x20000110

08011f94 <GUI_RectsIntersect>:
 8011f94:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011f98:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	dc14      	bgt.n	8011fca <GUI_RectsIntersect+0x36>
 8011fa0:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8011fa4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	dc0e      	bgt.n	8011fca <GUI_RectsIntersect+0x36>
 8011fac:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011fb0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	dc08      	bgt.n	8011fca <GUI_RectsIntersect+0x36>
 8011fb8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011fbc:	f9b1 2000 	ldrsh.w	r2, [r1]
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	bfcc      	ite	gt
 8011fc4:	2000      	movgt	r0, #0
 8011fc6:	2001      	movle	r0, #1
 8011fc8:	4770      	bx	lr
 8011fca:	2000      	movs	r0, #0
 8011fcc:	4770      	bx	lr

08011fce <GUI_ALLOC_Realloc>:
 8011fce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fd0:	4604      	mov	r4, r0
 8011fd2:	4608      	mov	r0, r1
 8011fd4:	460e      	mov	r6, r1
 8011fd6:	f001 fee5 	bl	8013da4 <GUI_ALLOC_AllocNoInit>
 8011fda:	4605      	mov	r5, r0
 8011fdc:	b1f8      	cbz	r0, 801201e <GUI_ALLOC_Realloc+0x50>
 8011fde:	b1f4      	cbz	r4, 801201e <GUI_ALLOC_Realloc+0x50>
 8011fe0:	4620      	mov	r0, r4
 8011fe2:	f001 fcb9 	bl	8013958 <GUI_ALLOC_GetSize>
 8011fe6:	42b0      	cmp	r0, r6
 8011fe8:	bfb4      	ite	lt
 8011fea:	4607      	movlt	r7, r0
 8011fec:	4637      	movge	r7, r6
 8011fee:	4628      	mov	r0, r5
 8011ff0:	f001 fc84 	bl	80138fc <GUI_ALLOC_LockH>
 8011ff4:	9000      	str	r0, [sp, #0]
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	f001 fc80 	bl	80138fc <GUI_ALLOC_LockH>
 8011ffc:	ae02      	add	r6, sp, #8
 8011ffe:	4601      	mov	r1, r0
 8012000:	463a      	mov	r2, r7
 8012002:	9001      	str	r0, [sp, #4]
 8012004:	f856 0d08 	ldr.w	r0, [r6, #-8]!
 8012008:	f008 fbe2 	bl	801a7d0 <memcpy>
 801200c:	4668      	mov	r0, sp
 801200e:	f001 fc83 	bl	8013918 <GUI_ALLOC_UnlockH>
 8012012:	a801      	add	r0, sp, #4
 8012014:	f001 fc80 	bl	8013918 <GUI_ALLOC_UnlockH>
 8012018:	4620      	mov	r0, r4
 801201a:	f001 fca9 	bl	8013970 <GUI_ALLOC_Free>
 801201e:	4628      	mov	r0, r5
 8012020:	b003      	add	sp, #12
 8012022:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012024 <GUI_SetPenSize>:
 8012024:	4b02      	ldr	r3, [pc, #8]	; (8012030 <GUI_SetPenSize+0xc>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	7e1a      	ldrb	r2, [r3, #24]
 801202a:	7618      	strb	r0, [r3, #24]
 801202c:	4610      	mov	r0, r2
 801202e:	4770      	bx	lr
 8012030:	20000110 	.word	0x20000110

08012034 <GUI_PID_GetState>:
 8012034:	4a11      	ldr	r2, [pc, #68]	; (801207c <GUI_PID_GetState+0x48>)
 8012036:	4912      	ldr	r1, [pc, #72]	; (8012080 <GUI_PID_GetState+0x4c>)
 8012038:	6813      	ldr	r3, [r2, #0]
 801203a:	6809      	ldr	r1, [r1, #0]
 801203c:	428b      	cmp	r3, r1
 801203e:	b570      	push	{r4, r5, r6, lr}
 8012040:	4604      	mov	r4, r0
 8012042:	4616      	mov	r6, r2
 8012044:	4d0f      	ldr	r5, [pc, #60]	; (8012084 <GUI_PID_GetState+0x50>)
 8012046:	d109      	bne.n	801205c <GUI_PID_GetState+0x28>
 8012048:	42ab      	cmp	r3, r5
 801204a:	bf06      	itte	eq
 801204c:	333c      	addeq	r3, #60	; 0x3c
 801204e:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 8012052:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 8012056:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801205a:	e00a      	b.n	8012072 <GUI_PID_GetState+0x3e>
 801205c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012060:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012064:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 8012068:	4293      	cmp	r3, r2
 801206a:	bf18      	it	ne
 801206c:	f103 050c 	addne.w	r5, r3, #12
 8012070:	6035      	str	r5, [r6, #0]
 8012072:	7a20      	ldrb	r0, [r4, #8]
 8012074:	3000      	adds	r0, #0
 8012076:	bf18      	it	ne
 8012078:	2001      	movne	r0, #1
 801207a:	bd70      	pop	{r4, r5, r6, pc}
 801207c:	20000104 	.word	0x20000104
 8012080:	20000100 	.word	0x20000100
 8012084:	2001d1c4 	.word	0x2001d1c4

08012088 <GUI_PID_StoreState>:
 8012088:	4a21      	ldr	r2, [pc, #132]	; (8012110 <GUI_PID_StoreState+0x88>)
 801208a:	4922      	ldr	r1, [pc, #136]	; (8012114 <GUI_PID_StoreState+0x8c>)
 801208c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012090:	6011      	str	r1, [r2, #0]
 8012092:	4f21      	ldr	r7, [pc, #132]	; (8012118 <GUI_PID_StoreState+0x90>)
 8012094:	4921      	ldr	r1, [pc, #132]	; (801211c <GUI_PID_StoreState+0x94>)
 8012096:	683a      	ldr	r2, [r7, #0]
 8012098:	680c      	ldr	r4, [r1, #0]
 801209a:	4603      	mov	r3, r0
 801209c:	4820      	ldr	r0, [pc, #128]	; (8012120 <GUI_PID_StoreState+0x98>)
 801209e:	4294      	cmp	r4, r2
 80120a0:	468c      	mov	ip, r1
 80120a2:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 80120a6:	d017      	beq.n	80120d8 <GUI_PID_StoreState+0x50>
 80120a8:	4282      	cmp	r2, r0
 80120aa:	bf14      	ite	ne
 80120ac:	f1a2 010c 	subne.w	r1, r2, #12
 80120b0:	4631      	moveq	r1, r6
 80120b2:	7a1d      	ldrb	r5, [r3, #8]
 80120b4:	f891 8008 	ldrb.w	r8, [r1, #8]
 80120b8:	45a8      	cmp	r8, r5
 80120ba:	d10d      	bne.n	80120d8 <GUI_PID_StoreState+0x50>
 80120bc:	428c      	cmp	r4, r1
 80120be:	d00b      	beq.n	80120d8 <GUI_PID_StoreState+0x50>
 80120c0:	4281      	cmp	r1, r0
 80120c2:	bf14      	ite	ne
 80120c4:	390c      	subne	r1, #12
 80120c6:	4917      	ldreq	r1, [pc, #92]	; (8012124 <GUI_PID_StoreState+0x9c>)
 80120c8:	7a09      	ldrb	r1, [r1, #8]
 80120ca:	42a9      	cmp	r1, r5
 80120cc:	d104      	bne.n	80120d8 <GUI_PID_StoreState+0x50>
 80120ce:	4282      	cmp	r2, r0
 80120d0:	bf14      	ite	ne
 80120d2:	3a0c      	subne	r2, #12
 80120d4:	4a13      	ldreq	r2, [pc, #76]	; (8012124 <GUI_PID_StoreState+0x9c>)
 80120d6:	603a      	str	r2, [r7, #0]
 80120d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80120dc:	683d      	ldr	r5, [r7, #0]
 80120de:	42b5      	cmp	r5, r6
 80120e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80120e4:	bf0c      	ite	eq
 80120e6:	4d0e      	ldreq	r5, [pc, #56]	; (8012120 <GUI_PID_StoreState+0x98>)
 80120e8:	350c      	addne	r5, #12
 80120ea:	42ac      	cmp	r4, r5
 80120ec:	603d      	str	r5, [r7, #0]
 80120ee:	d105      	bne.n	80120fc <GUI_PID_StoreState+0x74>
 80120f0:	42b4      	cmp	r4, r6
 80120f2:	bf14      	ite	ne
 80120f4:	340c      	addne	r4, #12
 80120f6:	4c0a      	ldreq	r4, [pc, #40]	; (8012120 <GUI_PID_StoreState+0x98>)
 80120f8:	f8cc 4000 	str.w	r4, [ip]
 80120fc:	4a0a      	ldr	r2, [pc, #40]	; (8012128 <GUI_PID_StoreState+0xa0>)
 80120fe:	6812      	ldr	r2, [r2, #0]
 8012100:	b10a      	cbz	r2, 8012106 <GUI_PID_StoreState+0x7e>
 8012102:	4618      	mov	r0, r3
 8012104:	4790      	blx	r2
 8012106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801210a:	f7fe bfed 	b.w	80110e8 <GUI_SignalEvent>
 801210e:	bf00      	nop
 8012110:	2001d5e8 	.word	0x2001d5e8
 8012114:	080150e9 	.word	0x080150e9
 8012118:	20000100 	.word	0x20000100
 801211c:	20000104 	.word	0x20000104
 8012120:	2001d1c4 	.word	0x2001d1c4
 8012124:	2001d200 	.word	0x2001d200
 8012128:	2001d1c0 	.word	0x2001d1c0

0801212c <GUI_PID_IsEmpty>:
 801212c:	4b03      	ldr	r3, [pc, #12]	; (801213c <GUI_PID_IsEmpty+0x10>)
 801212e:	6818      	ldr	r0, [r3, #0]
 8012130:	4b03      	ldr	r3, [pc, #12]	; (8012140 <GUI_PID_IsEmpty+0x14>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	1ac3      	subs	r3, r0, r3
 8012136:	4258      	negs	r0, r3
 8012138:	4158      	adcs	r0, r3
 801213a:	4770      	bx	lr
 801213c:	20000104 	.word	0x20000104
 8012140:	20000100 	.word	0x20000100

08012144 <GUI_GetKey>:
 8012144:	4b02      	ldr	r3, [pc, #8]	; (8012150 <GUI_GetKey+0xc>)
 8012146:	2200      	movs	r2, #0
 8012148:	6818      	ldr	r0, [r3, #0]
 801214a:	601a      	str	r2, [r3, #0]
 801214c:	4770      	bx	lr
 801214e:	bf00      	nop
 8012150:	2001d20c 	.word	0x2001d20c

08012154 <GUI_StoreKey>:
 8012154:	4b02      	ldr	r3, [pc, #8]	; (8012160 <GUI_StoreKey+0xc>)
 8012156:	681a      	ldr	r2, [r3, #0]
 8012158:	b902      	cbnz	r2, 801215c <GUI_StoreKey+0x8>
 801215a:	6018      	str	r0, [r3, #0]
 801215c:	f7fe bfc4 	b.w	80110e8 <GUI_SignalEvent>
 8012160:	2001d20c 	.word	0x2001d20c

08012164 <GUI_PollKeyMsg>:
 8012164:	4a0a      	ldr	r2, [pc, #40]	; (8012190 <GUI_PollKeyMsg+0x2c>)
 8012166:	490b      	ldr	r1, [pc, #44]	; (8012194 <GUI_PollKeyMsg+0x30>)
 8012168:	6813      	ldr	r3, [r2, #0]
 801216a:	6809      	ldr	r1, [r1, #0]
 801216c:	428b      	cmp	r3, r1
 801216e:	b510      	push	{r4, lr}
 8012170:	d00b      	beq.n	801218a <GUI_PollKeyMsg+0x26>
 8012172:	4c09      	ldr	r4, [pc, #36]	; (8012198 <GUI_PollKeyMsg+0x34>)
 8012174:	42a3      	cmp	r3, r4
 8012176:	e893 0003 	ldmia.w	r3, {r0, r1}
 801217a:	bf14      	ite	ne
 801217c:	3308      	addne	r3, #8
 801217e:	3b50      	subeq	r3, #80	; 0x50
 8012180:	6013      	str	r3, [r2, #0]
 8012182:	f003 fa79 	bl	8015678 <WM_OnKey>
 8012186:	2001      	movs	r0, #1
 8012188:	bd10      	pop	{r4, pc}
 801218a:	2000      	movs	r0, #0
 801218c:	bd10      	pop	{r4, pc}
 801218e:	bf00      	nop
 8012190:	2000010c 	.word	0x2000010c
 8012194:	20000108 	.word	0x20000108
 8012198:	2001d260 	.word	0x2001d260

0801219c <GUI_MoveRect>:
 801219c:	b168      	cbz	r0, 80121ba <GUI_MoveRect+0x1e>
 801219e:	8803      	ldrh	r3, [r0, #0]
 80121a0:	b289      	uxth	r1, r1
 80121a2:	440b      	add	r3, r1
 80121a4:	8003      	strh	r3, [r0, #0]
 80121a6:	8883      	ldrh	r3, [r0, #4]
 80121a8:	4419      	add	r1, r3
 80121aa:	8843      	ldrh	r3, [r0, #2]
 80121ac:	8081      	strh	r1, [r0, #4]
 80121ae:	b292      	uxth	r2, r2
 80121b0:	4413      	add	r3, r2
 80121b2:	8043      	strh	r3, [r0, #2]
 80121b4:	88c3      	ldrh	r3, [r0, #6]
 80121b6:	441a      	add	r2, r3
 80121b8:	80c2      	strh	r2, [r0, #6]
 80121ba:	4770      	bx	lr

080121bc <GUI_MergeRect>:
 80121bc:	b510      	push	{r4, lr}
 80121be:	b338      	cbz	r0, 8012210 <GUI_MergeRect+0x54>
 80121c0:	b309      	cbz	r1, 8012206 <GUI_MergeRect+0x4a>
 80121c2:	b30a      	cbz	r2, 8012208 <GUI_MergeRect+0x4c>
 80121c4:	f9b1 4000 	ldrsh.w	r4, [r1]
 80121c8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80121cc:	429c      	cmp	r4, r3
 80121ce:	bfb8      	it	lt
 80121d0:	4623      	movlt	r3, r4
 80121d2:	8003      	strh	r3, [r0, #0]
 80121d4:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80121d8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80121dc:	429c      	cmp	r4, r3
 80121de:	bfb8      	it	lt
 80121e0:	4623      	movlt	r3, r4
 80121e2:	8043      	strh	r3, [r0, #2]
 80121e4:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80121e8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80121ec:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 80121f0:	429c      	cmp	r4, r3
 80121f2:	bfa8      	it	ge
 80121f4:	4623      	movge	r3, r4
 80121f6:	8083      	strh	r3, [r0, #4]
 80121f8:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 80121fc:	4299      	cmp	r1, r3
 80121fe:	bfa8      	it	ge
 8012200:	460b      	movge	r3, r1
 8012202:	80c3      	strh	r3, [r0, #6]
 8012204:	bd10      	pop	{r4, pc}
 8012206:	4611      	mov	r1, r2
 8012208:	680b      	ldr	r3, [r1, #0]
 801220a:	6003      	str	r3, [r0, #0]
 801220c:	684b      	ldr	r3, [r1, #4]
 801220e:	6043      	str	r3, [r0, #4]
 8012210:	bd10      	pop	{r4, pc}
	...

08012214 <GUI_GotoXY>:
 8012214:	4b02      	ldr	r3, [pc, #8]	; (8012220 <GUI_GotoXY+0xc>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	8458      	strh	r0, [r3, #34]	; 0x22
 801221a:	8499      	strh	r1, [r3, #36]	; 0x24
 801221c:	2000      	movs	r0, #0
 801221e:	4770      	bx	lr
 8012220:	20000110 	.word	0x20000110

08012224 <GUI_GetYDistOfFont>:
 8012224:	7e40      	ldrb	r0, [r0, #25]
 8012226:	4770      	bx	lr

08012228 <GUI_GetStringDistX>:
 8012228:	b510      	push	{r4, lr}
 801222a:	4604      	mov	r4, r0
 801222c:	f005 f87c 	bl	8017328 <GUI__GetNumChars>
 8012230:	4601      	mov	r1, r0
 8012232:	4620      	mov	r0, r4
 8012234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012238:	f001 b9a8 	b.w	801358c <GUI__GetLineDistX>

0801223c <GUI_GetOrg>:
 801223c:	4b04      	ldr	r3, [pc, #16]	; (8012250 <GUI_GetOrg+0x14>)
 801223e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012242:	6003      	str	r3, [r0, #0]
 8012244:	4b03      	ldr	r3, [pc, #12]	; (8012254 <GUI_GetOrg+0x18>)
 8012246:	f9b3 3000 	ldrsh.w	r3, [r3]
 801224a:	600b      	str	r3, [r1, #0]
 801224c:	4770      	bx	lr
 801224e:	bf00      	nop
 8012250:	2001d5c4 	.word	0x2001d5c4
 8012254:	2001d5b8 	.word	0x2001d5b8

08012258 <GUI_GetLineStyle>:
 8012258:	4b01      	ldr	r3, [pc, #4]	; (8012260 <GUI_GetLineStyle+0x8>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	7e98      	ldrb	r0, [r3, #26]
 801225e:	4770      	bx	lr
 8012260:	20000110 	.word	0x20000110

08012264 <GUI_GetFontSizeY>:
 8012264:	f005 b86e 	b.w	8017344 <GUI__GetFontSizeY>

08012268 <GUI_FillRect>:
 8012268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801226a:	4c0f      	ldr	r4, [pc, #60]	; (80122a8 <GUI_FillRect+0x40>)
 801226c:	6824      	ldr	r4, [r4, #0]
 801226e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8012270:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8012272:	1947      	adds	r7, r0, r5
 8012274:	190e      	adds	r6, r1, r4
 8012276:	4415      	add	r5, r2
 8012278:	441c      	add	r4, r3
 801227a:	4668      	mov	r0, sp
 801227c:	f8ad 7000 	strh.w	r7, [sp]
 8012280:	f8ad 5004 	strh.w	r5, [sp, #4]
 8012284:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012288:	f8ad 4006 	strh.w	r4, [sp, #6]
 801228c:	f7fb fb48 	bl	800d920 <WM__InitIVRSearch>
 8012290:	b140      	cbz	r0, 80122a4 <GUI_FillRect+0x3c>
 8012292:	4638      	mov	r0, r7
 8012294:	4631      	mov	r1, r6
 8012296:	462a      	mov	r2, r5
 8012298:	4623      	mov	r3, r4
 801229a:	f7fe f931 	bl	8010500 <LCD_FillRect>
 801229e:	f7fb fa7d 	bl	800d79c <WM__GetNextIVR>
 80122a2:	e7f5      	b.n	8012290 <GUI_FillRect+0x28>
 80122a4:	b003      	add	sp, #12
 80122a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122a8:	20000110 	.word	0x20000110

080122ac <GUI_Exec1>:
 80122ac:	4b0a      	ldr	r3, [pc, #40]	; (80122d8 <GUI_Exec1+0x2c>)
 80122ae:	b510      	push	{r4, lr}
 80122b0:	681c      	ldr	r4, [r3, #0]
 80122b2:	b11c      	cbz	r4, 80122bc <GUI_Exec1+0x10>
 80122b4:	47a0      	blx	r4
 80122b6:	1c04      	adds	r4, r0, #0
 80122b8:	bf18      	it	ne
 80122ba:	2401      	movne	r4, #1
 80122bc:	f7fb fc64 	bl	800db88 <WM_Exec>
 80122c0:	4b06      	ldr	r3, [pc, #24]	; (80122dc <GUI_Exec1+0x30>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	2800      	cmp	r0, #0
 80122c6:	bf18      	it	ne
 80122c8:	2401      	movne	r4, #1
 80122ca:	b11b      	cbz	r3, 80122d4 <GUI_Exec1+0x28>
 80122cc:	4798      	blx	r3
 80122ce:	2800      	cmp	r0, #0
 80122d0:	bf18      	it	ne
 80122d2:	2401      	movne	r4, #1
 80122d4:	4620      	mov	r0, r4
 80122d6:	bd10      	pop	{r4, pc}
 80122d8:	2001d5c0 	.word	0x2001d5c0
 80122dc:	2001d5d8 	.word	0x2001d5d8

080122e0 <GUI_Exec>:
 80122e0:	b510      	push	{r4, lr}
 80122e2:	2400      	movs	r4, #0
 80122e4:	f7ff ffe2 	bl	80122ac <GUI_Exec1>
 80122e8:	b108      	cbz	r0, 80122ee <GUI_Exec+0xe>
 80122ea:	2401      	movs	r4, #1
 80122ec:	e7fa      	b.n	80122e4 <GUI_Exec+0x4>
 80122ee:	4620      	mov	r0, r4
 80122f0:	bd10      	pop	{r4, pc}
	...

080122f4 <GUI_DrawVLine>:
 80122f4:	4b0f      	ldr	r3, [pc, #60]	; (8012334 <GUI_DrawVLine+0x40>)
 80122f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80122fc:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 80122fe:	4406      	add	r6, r0
 8012300:	190d      	adds	r5, r1, r4
 8012302:	b2b3      	uxth	r3, r6
 8012304:	4414      	add	r4, r2
 8012306:	4668      	mov	r0, sp
 8012308:	f8ad 3000 	strh.w	r3, [sp]
 801230c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012310:	f8ad 5002 	strh.w	r5, [sp, #2]
 8012314:	f8ad 4006 	strh.w	r4, [sp, #6]
 8012318:	f7fb fb02 	bl	800d920 <WM__InitIVRSearch>
 801231c:	b138      	cbz	r0, 801232e <GUI_DrawVLine+0x3a>
 801231e:	4630      	mov	r0, r6
 8012320:	4629      	mov	r1, r5
 8012322:	4622      	mov	r2, r4
 8012324:	f7fe f8c6 	bl	80104b4 <LCD_DrawVLine>
 8012328:	f7fb fa38 	bl	800d79c <WM__GetNextIVR>
 801232c:	e7f6      	b.n	801231c <GUI_DrawVLine+0x28>
 801232e:	b002      	add	sp, #8
 8012330:	bd70      	pop	{r4, r5, r6, pc}
 8012332:	bf00      	nop
 8012334:	20000110 	.word	0x20000110

08012338 <_SetLineColor>:
 8012338:	4b1e      	ldr	r3, [pc, #120]	; (80123b4 <_SetLineColor+0x7c>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	7e9b      	ldrb	r3, [r3, #26]
 801233e:	3b01      	subs	r3, #1
 8012340:	2b03      	cmp	r3, #3
 8012342:	d832      	bhi.n	80123aa <_SetLineColor+0x72>
 8012344:	e8df f003 	tbb	[pc, r3]
 8012348:	221a0d02 	.word	0x221a0d02
 801234c:	4b1a      	ldr	r3, [pc, #104]	; (80123b8 <_SetLineColor+0x80>)
 801234e:	3006      	adds	r0, #6
 8012350:	4003      	ands	r3, r0
 8012352:	2b00      	cmp	r3, #0
 8012354:	da03      	bge.n	801235e <_SetLineColor+0x26>
 8012356:	3b01      	subs	r3, #1
 8012358:	f063 030f 	orn	r3, r3, #15
 801235c:	3301      	adds	r3, #1
 801235e:	2b0b      	cmp	r3, #11
 8012360:	e008      	b.n	8012374 <_SetLineColor+0x3c>
 8012362:	4b16      	ldr	r3, [pc, #88]	; (80123bc <_SetLineColor+0x84>)
 8012364:	4003      	ands	r3, r0
 8012366:	2b00      	cmp	r3, #0
 8012368:	da03      	bge.n	8012372 <_SetLineColor+0x3a>
 801236a:	3b01      	subs	r3, #1
 801236c:	f063 0303 	orn	r3, r3, #3
 8012370:	3301      	adds	r3, #1
 8012372:	2b01      	cmp	r3, #1
 8012374:	bfcc      	ite	gt
 8012376:	2000      	movgt	r0, #0
 8012378:	2001      	movle	r0, #1
 801237a:	4770      	bx	lr
 801237c:	2314      	movs	r3, #20
 801237e:	fb90 f2f3 	sdiv	r2, r0, r3
 8012382:	fb03 0012 	mls	r0, r3, r2, r0
 8012386:	280b      	cmp	r0, #11
 8012388:	dc09      	bgt.n	801239e <_SetLineColor+0x66>
 801238a:	e010      	b.n	80123ae <_SetLineColor+0x76>
 801238c:	2318      	movs	r3, #24
 801238e:	fb90 f2f3 	sdiv	r2, r0, r3
 8012392:	fb03 0012 	mls	r0, r3, r2, r0
 8012396:	280b      	cmp	r0, #11
 8012398:	dd09      	ble.n	80123ae <_SetLineColor+0x76>
 801239a:	f020 0004 	bic.w	r0, r0, #4
 801239e:	3810      	subs	r0, #16
 80123a0:	2801      	cmp	r0, #1
 80123a2:	bf8c      	ite	hi
 80123a4:	2000      	movhi	r0, #0
 80123a6:	2001      	movls	r0, #1
 80123a8:	4770      	bx	lr
 80123aa:	2000      	movs	r0, #0
 80123ac:	4770      	bx	lr
 80123ae:	2001      	movs	r0, #1
 80123b0:	4770      	bx	lr
 80123b2:	bf00      	nop
 80123b4:	20000110 	.word	0x20000110
 80123b8:	8000000f 	.word	0x8000000f
 80123bc:	80000003 	.word	0x80000003

080123c0 <GUI_sin>:
 80123c0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80123c4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80123c8:	bfc6      	itte	gt
 80123ca:	f5a0 6000 	subgt.w	r0, r0, #2048	; 0x800
 80123ce:	2101      	movgt	r1, #1
 80123d0:	2100      	movle	r1, #0
 80123d2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80123d6:	bfc8      	it	gt
 80123d8:	f5c0 6000 	rsbgt	r0, r0, #2048	; 0x800
 80123dc:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 80123e0:	b510      	push	{r4, lr}
 80123e2:	1182      	asrs	r2, r0, #6
 80123e4:	4c0b      	ldr	r4, [pc, #44]	; (8012414 <GUI_sin+0x54>)
 80123e6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80123ea:	b29b      	uxth	r3, r3
 80123ec:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 80123f0:	2b40      	cmp	r3, #64	; 0x40
 80123f2:	fb00 f003 	mul.w	r0, r0, r3
 80123f6:	d008      	beq.n	801240a <GUI_sin+0x4a>
 80123f8:	2a10      	cmp	r2, #16
 80123fa:	d006      	beq.n	801240a <GUI_sin+0x4a>
 80123fc:	3201      	adds	r2, #1
 80123fe:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8012402:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8012406:	fb03 0002 	mla	r0, r3, r2, r0
 801240a:	3020      	adds	r0, #32
 801240c:	0980      	lsrs	r0, r0, #6
 801240e:	b101      	cbz	r1, 8012412 <GUI_sin+0x52>
 8012410:	4240      	negs	r0, r0
 8012412:	bd10      	pop	{r4, pc}
 8012414:	08020b3c 	.word	0x08020b3c

08012418 <GUI_cos>:
 8012418:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 801241c:	f7ff bfd0 	b.w	80123c0 <GUI_sin>

08012420 <GL_DrawLine1Ex>:
 8012420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012424:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8012428:	1a17      	subs	r7, r2, r0
 801242a:	1a5c      	subs	r4, r3, r1
 801242c:	ea54 0c07 	orrs.w	ip, r4, r7
 8012430:	4605      	mov	r5, r0
 8012432:	460e      	mov	r6, r1
 8012434:	f8d8 b000 	ldr.w	fp, [r8]
 8012438:	d104      	bne.n	8012444 <GL_DrawLine1Ex+0x24>
 801243a:	b003      	add	sp, #12
 801243c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012440:	f007 ba22 	b.w	8019888 <GL_DrawPoint>
 8012444:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
 8012448:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
 801244c:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 8012450:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8012454:	4288      	cmp	r0, r1
 8012456:	db04      	blt.n	8012462 <GL_DrawLine1Ex+0x42>
 8012458:	4621      	mov	r1, r4
 801245a:	463c      	mov	r4, r7
 801245c:	460f      	mov	r7, r1
 801245e:	2100      	movs	r1, #0
 8012460:	e006      	b.n	8012470 <GL_DrawLine1Ex+0x50>
 8012462:	4611      	mov	r1, r2
 8012464:	461a      	mov	r2, r3
 8012466:	460b      	mov	r3, r1
 8012468:	4629      	mov	r1, r5
 801246a:	4635      	mov	r5, r6
 801246c:	460e      	mov	r6, r1
 801246e:	2101      	movs	r1, #1
 8012470:	9100      	str	r1, [sp, #0]
 8012472:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 8012476:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 801247a:	428c      	cmp	r4, r1
 801247c:	d008      	beq.n	8012490 <GL_DrawLine1Ex+0x70>
 801247e:	461e      	mov	r6, r3
 8012480:	462b      	mov	r3, r5
 8012482:	4264      	negs	r4, r4
 8012484:	4615      	mov	r5, r2
 8012486:	427f      	negs	r7, r7
 8012488:	461a      	mov	r2, r3
 801248a:	f04f 3aff 	mov.w	sl, #4294967295
 801248e:	e001      	b.n	8012494 <GL_DrawLine1Ex+0x74>
 8012490:	f04f 0a01 	mov.w	sl, #1
 8012494:	2f00      	cmp	r7, #0
 8012496:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80125e0 <GL_DrawLine1Ex+0x1c0>
 801249a:	d13e      	bne.n	801251a <GL_DrawLine1Ex+0xfa>
 801249c:	9b00      	ldr	r3, [sp, #0]
 801249e:	b1d3      	cbz	r3, 80124d6 <GL_DrawLine1Ex+0xb6>
 80124a0:	f8d9 3000 	ldr.w	r3, [r9]
 80124a4:	7e9b      	ldrb	r3, [r3, #26]
 80124a6:	b98b      	cbnz	r3, 80124cc <GL_DrawLine1Ex+0xac>
 80124a8:	4630      	mov	r0, r6
 80124aa:	4629      	mov	r1, r5
 80124ac:	b003      	add	sp, #12
 80124ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124b2:	f7fd bfff 	b.w	80104b4 <LCD_DrawVLine>
 80124b6:	f7ff ff3f 	bl	8012338 <_SetLineColor>
 80124ba:	b930      	cbnz	r0, 80124ca <GL_DrawLine1Ex+0xaa>
 80124bc:	f8d9 3000 	ldr.w	r3, [r9]
 80124c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80124c2:	4630      	mov	r0, r6
 80124c4:	685b      	ldr	r3, [r3, #4]
 80124c6:	1979      	adds	r1, r7, r5
 80124c8:	4798      	blx	r3
 80124ca:	3701      	adds	r7, #1
 80124cc:	42a7      	cmp	r7, r4
 80124ce:	eb07 000b 	add.w	r0, r7, fp
 80124d2:	ddf0      	ble.n	80124b6 <GL_DrawLine1Ex+0x96>
 80124d4:	e01d      	b.n	8012512 <GL_DrawLine1Ex+0xf2>
 80124d6:	f8d9 3000 	ldr.w	r3, [r9]
 80124da:	7e99      	ldrb	r1, [r3, #26]
 80124dc:	b111      	cbz	r1, 80124e4 <GL_DrawLine1Ex+0xc4>
 80124de:	f8dd a000 	ldr.w	sl, [sp]
 80124e2:	e012      	b.n	801250a <GL_DrawLine1Ex+0xea>
 80124e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80124e6:	4628      	mov	r0, r5
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	4631      	mov	r1, r6
 80124ec:	4798      	blx	r3
 80124ee:	e074      	b.n	80125da <GL_DrawLine1Ex+0x1ba>
 80124f0:	f7ff ff22 	bl	8012338 <_SetLineColor>
 80124f4:	b938      	cbnz	r0, 8012506 <GL_DrawLine1Ex+0xe6>
 80124f6:	f8d9 3000 	ldr.w	r3, [r9]
 80124fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80124fc:	eb0a 0005 	add.w	r0, sl, r5
 8012500:	685b      	ldr	r3, [r3, #4]
 8012502:	4631      	mov	r1, r6
 8012504:	4798      	blx	r3
 8012506:	f10a 0a01 	add.w	sl, sl, #1
 801250a:	45a2      	cmp	sl, r4
 801250c:	eb0a 000b 	add.w	r0, sl, fp
 8012510:	ddee      	ble.n	80124f0 <GL_DrawLine1Ex+0xd0>
 8012512:	3801      	subs	r0, #1
 8012514:	f8c8 0000 	str.w	r0, [r8]
 8012518:	e05f      	b.n	80125da <GL_DrawLine1Ex+0x1ba>
 801251a:	f8d9 1000 	ldr.w	r1, [r9]
 801251e:	f04f 0202 	mov.w	r2, #2
 8012522:	7e89      	ldrb	r1, [r1, #26]
 8012524:	fb94 f2f2 	sdiv	r2, r4, r2
 8012528:	bfb8      	it	lt
 801252a:	4252      	neglt	r2, r2
 801252c:	b9d9      	cbnz	r1, 8012566 <GL_DrawLine1Ex+0x146>
 801252e:	4693      	mov	fp, r2
 8012530:	46a8      	mov	r8, r5
 8012532:	ebc5 0308 	rsb	r3, r5, r8
 8012536:	42a3      	cmp	r3, r4
 8012538:	dc4f      	bgt.n	80125da <GL_DrawLine1Ex+0x1ba>
 801253a:	9b00      	ldr	r3, [sp, #0]
 801253c:	fb9b f1f4 	sdiv	r1, fp, r4
 8012540:	4431      	add	r1, r6
 8012542:	b92b      	cbnz	r3, 8012550 <GL_DrawLine1Ex+0x130>
 8012544:	f8d9 3000 	ldr.w	r3, [r9]
 8012548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801254a:	4640      	mov	r0, r8
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	e005      	b.n	801255c <GL_DrawLine1Ex+0x13c>
 8012550:	f8d9 3000 	ldr.w	r3, [r9]
 8012554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	4608      	mov	r0, r1
 801255a:	4641      	mov	r1, r8
 801255c:	4798      	blx	r3
 801255e:	f108 0801 	add.w	r8, r8, #1
 8012562:	44bb      	add	fp, r7
 8012564:	e7e5      	b.n	8012532 <GL_DrawLine1Ex+0x112>
 8012566:	f1ba 3fff 	cmp.w	sl, #4294967295
 801256a:	bf04      	itt	eq
 801256c:	eb04 010b 	addeq.w	r1, r4, fp
 8012570:	f8c8 1000 	streq.w	r1, [r8]
 8012574:	9201      	str	r2, [sp, #4]
 8012576:	46ab      	mov	fp, r5
 8012578:	ebc5 010b 	rsb	r1, r5, fp
 801257c:	42a1      	cmp	r1, r4
 801257e:	f8d8 0000 	ldr.w	r0, [r8]
 8012582:	dc1e      	bgt.n	80125c2 <GL_DrawLine1Ex+0x1a2>
 8012584:	4450      	add	r0, sl
 8012586:	f8c8 0000 	str.w	r0, [r8]
 801258a:	f7ff fed5 	bl	8012338 <_SetLineColor>
 801258e:	b980      	cbnz	r0, 80125b2 <GL_DrawLine1Ex+0x192>
 8012590:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012594:	f8d9 0000 	ldr.w	r0, [r9]
 8012598:	9b00      	ldr	r3, [sp, #0]
 801259a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801259c:	fb9c f1f4 	sdiv	r1, ip, r4
 80125a0:	4431      	add	r1, r6
 80125a2:	b913      	cbnz	r3, 80125aa <GL_DrawLine1Ex+0x18a>
 80125a4:	6843      	ldr	r3, [r0, #4]
 80125a6:	4658      	mov	r0, fp
 80125a8:	e002      	b.n	80125b0 <GL_DrawLine1Ex+0x190>
 80125aa:	6843      	ldr	r3, [r0, #4]
 80125ac:	4608      	mov	r0, r1
 80125ae:	4659      	mov	r1, fp
 80125b0:	4798      	blx	r3
 80125b2:	f8dd c004 	ldr.w	ip, [sp, #4]
 80125b6:	44bc      	add	ip, r7
 80125b8:	f10b 0b01 	add.w	fp, fp, #1
 80125bc:	f8cd c004 	str.w	ip, [sp, #4]
 80125c0:	e7da      	b.n	8012578 <GL_DrawLine1Ex+0x158>
 80125c2:	f1ba 3fff 	cmp.w	sl, #4294967295
 80125c6:	bf04      	itt	eq
 80125c8:	1824      	addeq	r4, r4, r0
 80125ca:	f8c8 4000 	streq.w	r4, [r8]
 80125ce:	f8d8 2000 	ldr.w	r2, [r8]
 80125d2:	ebca 0302 	rsb	r3, sl, r2
 80125d6:	f8c8 3000 	str.w	r3, [r8]
 80125da:	b003      	add	sp, #12
 80125dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125e0:	20000110 	.word	0x20000110

080125e4 <GL_DrawLineEx>:
 80125e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125e8:	4d67      	ldr	r5, [pc, #412]	; (8012788 <GL_DrawLineEx+0x1a4>)
 80125ea:	682c      	ldr	r4, [r5, #0]
 80125ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80125f0:	f1bb 0f01 	cmp.w	fp, #1
 80125f4:	b087      	sub	sp, #28
 80125f6:	4681      	mov	r9, r0
 80125f8:	4688      	mov	r8, r1
 80125fa:	4617      	mov	r7, r2
 80125fc:	461e      	mov	r6, r3
 80125fe:	46aa      	mov	sl, r5
 8012600:	d104      	bne.n	801260c <GL_DrawLineEx+0x28>
 8012602:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8012604:	9400      	str	r4, [sp, #0]
 8012606:	f7ff ff0b 	bl	8012420 <GL_DrawLine1Ex>
 801260a:	e0ba      	b.n	8012782 <GL_DrawLineEx+0x19e>
 801260c:	1a84      	subs	r4, r0, r2
 801260e:	1acd      	subs	r5, r1, r3
 8012610:	ea54 0305 	orrs.w	r3, r4, r5
 8012614:	f000 80b5 	beq.w	8012782 <GL_DrawLineEx+0x19e>
 8012618:	2c00      	cmp	r4, #0
 801261a:	bfba      	itte	lt
 801261c:	4264      	neglt	r4, r4
 801261e:	2301      	movlt	r3, #1
 8012620:	2300      	movge	r3, #0
 8012622:	2d00      	cmp	r5, #0
 8012624:	bfbc      	itt	lt
 8012626:	426d      	neglt	r5, r5
 8012628:	f043 0302 	orrlt.w	r3, r3, #2
 801262c:	42a5      	cmp	r5, r4
 801262e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012632:	dd04      	ble.n	801263e <GL_DrawLineEx+0x5a>
 8012634:	4622      	mov	r2, r4
 8012636:	f043 0304 	orr.w	r3, r3, #4
 801263a:	462c      	mov	r4, r5
 801263c:	4615      	mov	r5, r2
 801263e:	2202      	movs	r2, #2
 8012640:	fb94 f2f2 	sdiv	r2, r4, r2
 8012644:	eb02 2585 	add.w	r5, r2, r5, lsl #10
 8012648:	fb95 f4f4 	sdiv	r4, r5, r4
 801264c:	11a1      	asrs	r1, r4, #6
 801264e:	4a4f      	ldr	r2, [pc, #316]	; (801278c <GL_DrawLineEx+0x1a8>)
 8012650:	f3c4 0483 	ubfx	r4, r4, #2, #4
 8012654:	f1c4 0510 	rsb	r5, r4, #16
 8012658:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
 801265c:	2d10      	cmp	r5, #16
 801265e:	fb05 f000 	mul.w	r0, r5, r0
 8012662:	d004      	beq.n	801266e <GL_DrawLineEx+0x8a>
 8012664:	3101      	adds	r1, #1
 8012666:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801266a:	fb04 0002 	mla	r0, r4, r2, r0
 801266e:	2210      	movs	r2, #16
 8012670:	3008      	adds	r0, #8
 8012672:	fb90 f0f2 	sdiv	r0, r0, r2
 8012676:	0759      	lsls	r1, r3, #29
 8012678:	bf48      	it	mi
 801267a:	f5c0 6080 	rsbmi	r0, r0, #1024	; 0x400
 801267e:	07da      	lsls	r2, r3, #31
 8012680:	bf48      	it	mi
 8012682:	f5c0 6000 	rsbmi	r0, r0, #2048	; 0x800
 8012686:	079b      	lsls	r3, r3, #30
 8012688:	bf48      	it	mi
 801268a:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 801268e:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8012692:	4628      	mov	r0, r5
 8012694:	f7ff fec0 	bl	8012418 <GUI_cos>
 8012698:	fb00 f40b 	mul.w	r4, r0, fp
 801269c:	4628      	mov	r0, r5
 801269e:	f7ff fe8f 	bl	80123c0 <GUI_sin>
 80126a2:	2c00      	cmp	r4, #0
 80126a4:	fb00 f00b 	mul.w	r0, r0, fp
 80126a8:	da04      	bge.n	80126b4 <GL_DrawLineEx+0xd0>
 80126aa:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 80126ae:	129b      	asrs	r3, r3, #10
 80126b0:	425b      	negs	r3, r3
 80126b2:	e002      	b.n	80126ba <GL_DrawLineEx+0xd6>
 80126b4:	f504 7300 	add.w	r3, r4, #512	; 0x200
 80126b8:	129b      	asrs	r3, r3, #10
 80126ba:	2800      	cmp	r0, #0
 80126bc:	da06      	bge.n	80126cc <GL_DrawLineEx+0xe8>
 80126be:	f5c0 7b00 	rsb	fp, r0, #512	; 0x200
 80126c2:	ea4f 2bab 	mov.w	fp, fp, asr #10
 80126c6:	f1cb 0b00 	rsb	fp, fp, #0
 80126ca:	e003      	b.n	80126d4 <GL_DrawLineEx+0xf0>
 80126cc:	f500 7b00 	add.w	fp, r0, #512	; 0x200
 80126d0:	ea4f 2bab 	mov.w	fp, fp, asr #10
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	dd03      	ble.n	80126e0 <GL_DrawLineEx+0xfc>
 80126d8:	1c58      	adds	r0, r3, #1
 80126da:	1040      	asrs	r0, r0, #1
 80126dc:	105b      	asrs	r3, r3, #1
 80126de:	e005      	b.n	80126ec <GL_DrawLineEx+0x108>
 80126e0:	2202      	movs	r2, #2
 80126e2:	fb93 f0f2 	sdiv	r0, r3, r2
 80126e6:	3b01      	subs	r3, #1
 80126e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80126ec:	f1bb 0f00 	cmp.w	fp, #0
 80126f0:	dd05      	ble.n	80126fe <GL_DrawLineEx+0x11a>
 80126f2:	f10b 0201 	add.w	r2, fp, #1
 80126f6:	1052      	asrs	r2, r2, #1
 80126f8:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 80126fc:	e006      	b.n	801270c <GL_DrawLineEx+0x128>
 80126fe:	2102      	movs	r1, #2
 8012700:	fb9b f2f1 	sdiv	r2, fp, r1
 8012704:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012708:	fb9b fbf1 	sdiv	fp, fp, r1
 801270c:	b280      	uxth	r0, r0
 801270e:	fa1f f489 	uxth.w	r4, r9
 8012712:	1901      	adds	r1, r0, r4
 8012714:	b292      	uxth	r2, r2
 8012716:	f8ad 1008 	strh.w	r1, [sp, #8]
 801271a:	fa1f fb8b 	uxth.w	fp, fp
 801271e:	fa1f f188 	uxth.w	r1, r8
 8012722:	1855      	adds	r5, r2, r1
 8012724:	ebcb 0101 	rsb	r1, fp, r1
 8012728:	b29b      	uxth	r3, r3
 801272a:	f8ad 100e 	strh.w	r1, [sp, #14]
 801272e:	b2b9      	uxth	r1, r7
 8012730:	1ae4      	subs	r4, r4, r3
 8012732:	1acb      	subs	r3, r1, r3
 8012734:	f8ad 3010 	strh.w	r3, [sp, #16]
 8012738:	b2b3      	uxth	r3, r6
 801273a:	4401      	add	r1, r0
 801273c:	ebcb 0b03 	rsb	fp, fp, r3
 8012740:	4413      	add	r3, r2
 8012742:	2200      	movs	r2, #0
 8012744:	f8ad 1014 	strh.w	r1, [sp, #20]
 8012748:	f8ad 3016 	strh.w	r3, [sp, #22]
 801274c:	a802      	add	r0, sp, #8
 801274e:	4613      	mov	r3, r2
 8012750:	2104      	movs	r1, #4
 8012752:	f8ad 500a 	strh.w	r5, [sp, #10]
 8012756:	f8ad 400c 	strh.w	r4, [sp, #12]
 801275a:	f8ad b012 	strh.w	fp, [sp, #18]
 801275e:	f006 ffb1 	bl	80196c4 <GL_FillPolygon>
 8012762:	f8da 3000 	ldr.w	r3, [sl]
 8012766:	7e5b      	ldrb	r3, [r3, #25]
 8012768:	b91b      	cbnz	r3, 8012772 <GL_DrawLineEx+0x18e>
 801276a:	4648      	mov	r0, r9
 801276c:	4641      	mov	r1, r8
 801276e:	f007 f88b 	bl	8019888 <GL_DrawPoint>
 8012772:	f8da 3000 	ldr.w	r3, [sl]
 8012776:	7e5b      	ldrb	r3, [r3, #25]
 8012778:	b91b      	cbnz	r3, 8012782 <GL_DrawLineEx+0x19e>
 801277a:	4638      	mov	r0, r7
 801277c:	4631      	mov	r1, r6
 801277e:	f007 f883 	bl	8019888 <GL_DrawPoint>
 8012782:	b007      	add	sp, #28
 8012784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012788:	20000110 	.word	0x20000110
 801278c:	08020b5e 	.word	0x08020b5e

08012790 <GL_DrawLine>:
 8012790:	b530      	push	{r4, r5, lr}
 8012792:	b085      	sub	sp, #20
 8012794:	ac04      	add	r4, sp, #16
 8012796:	2500      	movs	r5, #0
 8012798:	f844 5d04 	str.w	r5, [r4, #-4]!
 801279c:	9400      	str	r4, [sp, #0]
 801279e:	f7ff ff21 	bl	80125e4 <GL_DrawLineEx>
 80127a2:	b005      	add	sp, #20
 80127a4:	bd30      	pop	{r4, r5, pc}
	...

080127a8 <GUI_DrawLine>:
 80127a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127ac:	461e      	mov	r6, r3
 80127ae:	4b0c      	ldr	r3, [pc, #48]	; (80127e0 <GUI_DrawLine+0x38>)
 80127b0:	681c      	ldr	r4, [r3, #0]
 80127b2:	4681      	mov	r9, r0
 80127b4:	2000      	movs	r0, #0
 80127b6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80127b8:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80127ba:	4688      	mov	r8, r1
 80127bc:	4617      	mov	r7, r2
 80127be:	f7fb f8af 	bl	800d920 <WM__InitIVRSearch>
 80127c2:	b150      	cbz	r0, 80127da <GUI_DrawLine+0x32>
 80127c4:	eb09 0005 	add.w	r0, r9, r5
 80127c8:	eb08 0104 	add.w	r1, r8, r4
 80127cc:	197a      	adds	r2, r7, r5
 80127ce:	1933      	adds	r3, r6, r4
 80127d0:	f7ff ffde 	bl	8012790 <GL_DrawLine>
 80127d4:	f7fa ffe2 	bl	800d79c <WM__GetNextIVR>
 80127d8:	e7f3      	b.n	80127c2 <GUI_DrawLine+0x1a>
 80127da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127de:	bf00      	nop
 80127e0:	20000110 	.word	0x20000110

080127e4 <GUI_DrawHLine>:
 80127e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127e6:	4f10      	ldr	r7, [pc, #64]	; (8012828 <GUI_DrawHLine+0x44>)
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80127ec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80127ee:	4405      	add	r5, r0
 80127f0:	190e      	adds	r6, r1, r4
 80127f2:	b2ab      	uxth	r3, r5
 80127f4:	4414      	add	r4, r2
 80127f6:	4668      	mov	r0, sp
 80127f8:	f8ad 6000 	strh.w	r6, [sp]
 80127fc:	f8ad 4004 	strh.w	r4, [sp, #4]
 8012800:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012804:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012808:	f7fb f88a 	bl	800d920 <WM__InitIVRSearch>
 801280c:	b148      	cbz	r0, 8012822 <GUI_DrawHLine+0x3e>
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012812:	4630      	mov	r0, r6
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	4629      	mov	r1, r5
 8012818:	4622      	mov	r2, r4
 801281a:	4798      	blx	r3
 801281c:	f7fa ffbe 	bl	800d79c <WM__GetNextIVR>
 8012820:	e7f4      	b.n	801280c <GUI_DrawHLine+0x28>
 8012822:	b003      	add	sp, #12
 8012824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012826:	bf00      	nop
 8012828:	20000110 	.word	0x20000110

0801282c <GUI_DrawGraphEx>:
 801282c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012830:	4698      	mov	r8, r3
 8012832:	4b81      	ldr	r3, [pc, #516]	; (8012a38 <GUI_DrawGraphEx+0x20c>)
 8012834:	b08b      	sub	sp, #44	; 0x2c
 8012836:	468a      	mov	sl, r1
 8012838:	6819      	ldr	r1, [r3, #0]
 801283a:	9006      	str	r0, [sp, #24]
 801283c:	2000      	movs	r0, #0
 801283e:	4691      	mov	r9, r2
 8012840:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012842:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8012844:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 8012846:	6d0c      	ldr	r4, [r1, #80]	; 0x50
 8012848:	f7fb f86a 	bl	800d920 <WM__InitIVRSearch>
 801284c:	2800      	cmp	r0, #0
 801284e:	f000 80ef 	beq.w	8012a30 <GUI_DrawGraphEx+0x204>
 8012852:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8012856:	9806      	ldr	r0, [sp, #24]
 8012858:	3b01      	subs	r3, #1
 801285a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801285e:	9307      	str	r3, [sp, #28]
 8012860:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012862:	2b00      	cmp	r3, #0
 8012864:	bf14      	ite	ne
 8012866:	f06f 0301 	mvnne.w	r3, #1
 801286a:	2302      	moveq	r3, #2
 801286c:	44a9      	add	r9, r5
 801286e:	4444      	add	r4, r8
 8012870:	9309      	str	r3, [sp, #36]	; 0x24
 8012872:	b927      	cbnz	r7, 801287e <GUI_DrawGraphEx+0x52>
 8012874:	f7fa ff92 	bl	800d79c <WM__GetNextIVR>
 8012878:	2800      	cmp	r0, #0
 801287a:	d1fa      	bne.n	8012872 <GUI_DrawGraphEx+0x46>
 801287c:	e0d8      	b.n	8012a30 <GUI_DrawGraphEx+0x204>
 801287e:	2e00      	cmp	r6, #0
 8012880:	d0f8      	beq.n	8012874 <GUI_DrawGraphEx+0x48>
 8012882:	f1ba 0f00 	cmp.w	sl, #0
 8012886:	ddf5      	ble.n	8012874 <GUI_DrawGraphEx+0x48>
 8012888:	1c7b      	adds	r3, r7, #1
 801288a:	d104      	bne.n	8012896 <GUI_DrawGraphEx+0x6a>
 801288c:	2e01      	cmp	r6, #1
 801288e:	bf14      	ite	ne
 8012890:	2302      	movne	r3, #2
 8012892:	2301      	moveq	r3, #1
 8012894:	e00a      	b.n	80128ac <GUI_DrawGraphEx+0x80>
 8012896:	2f01      	cmp	r7, #1
 8012898:	d104      	bne.n	80128a4 <GUI_DrawGraphEx+0x78>
 801289a:	2e01      	cmp	r6, #1
 801289c:	bf14      	ite	ne
 801289e:	2303      	movne	r3, #3
 80128a0:	2300      	moveq	r3, #0
 80128a2:	e003      	b.n	80128ac <GUI_DrawGraphEx+0x80>
 80128a4:	2e01      	cmp	r6, #1
 80128a6:	bf14      	ite	ne
 80128a8:	2305      	movne	r3, #5
 80128aa:	2304      	moveq	r3, #4
 80128ac:	9305      	str	r3, [sp, #20]
 80128ae:	4b62      	ldr	r3, [pc, #392]	; (8012a38 <GUI_DrawGraphEx+0x20c>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	695b      	ldr	r3, [r3, #20]
 80128b4:	b1eb      	cbz	r3, 80128f2 <GUI_DrawGraphEx+0xc6>
 80128b6:	f9b3 8000 	ldrsh.w	r8, [r3]
 80128ba:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80128be:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80128c2:	f9b3 b006 	ldrsh.w	fp, [r3, #6]
 80128c6:	9004      	str	r0, [sp, #16]
 80128c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80128cc:	45c1      	cmp	r9, r8
 80128ce:	eb09 030a 	add.w	r3, r9, sl
 80128d2:	bfb8      	it	lt
 80128d4:	ebc9 0808 	rsblt	r8, r9, r8
 80128d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80128dc:	bfb4      	ite	lt
 80128de:	ea28 78e8 	biclt.w	r8, r8, r8, asr #31
 80128e2:	f04f 0800 	movge.w	r8, #0
 80128e6:	4293      	cmp	r3, r2
 80128e8:	dd0a      	ble.n	8012900 <GUI_DrawGraphEx+0xd4>
 80128ea:	ebc9 0202 	rsb	r2, r9, r2
 80128ee:	3201      	adds	r2, #1
 80128f0:	e007      	b.n	8012902 <GUI_DrawGraphEx+0xd6>
 80128f2:	f04f 3bff 	mov.w	fp, #4294967295
 80128f6:	4652      	mov	r2, sl
 80128f8:	f8cd b010 	str.w	fp, [sp, #16]
 80128fc:	4698      	mov	r8, r3
 80128fe:	e000      	b.n	8012902 <GUI_DrawGraphEx+0xd6>
 8012900:	4652      	mov	r2, sl
 8012902:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012904:	b91b      	cbnz	r3, 801290e <GUI_DrawGraphEx+0xe2>
 8012906:	9b06      	ldr	r3, [sp, #24]
 8012908:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 801290c:	e000      	b.n	8012910 <GUI_DrawGraphEx+0xe4>
 801290e:	9b07      	ldr	r3, [sp, #28]
 8012910:	4590      	cmp	r8, r2
 8012912:	9303      	str	r3, [sp, #12]
 8012914:	daae      	bge.n	8012874 <GUI_DrawGraphEx+0x48>
 8012916:	444a      	add	r2, r9
 8012918:	9208      	str	r2, [sp, #32]
 801291a:	2200      	movs	r2, #0
 801291c:	44c8      	add	r8, r9
 801291e:	2301      	movs	r3, #1
 8012920:	9202      	str	r2, [sp, #8]
 8012922:	9803      	ldr	r0, [sp, #12]
 8012924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012926:	8805      	ldrh	r5, [r0, #0]
 8012928:	4408      	add	r0, r1
 801292a:	b22d      	sxth	r5, r5
 801292c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8012930:	428d      	cmp	r5, r1
 8012932:	9003      	str	r0, [sp, #12]
 8012934:	d10d      	bne.n	8012952 <GUI_DrawGraphEx+0x126>
 8012936:	9802      	ldr	r0, [sp, #8]
 8012938:	2800      	cmp	r0, #0
 801293a:	d16f      	bne.n	8012a1c <GUI_DrawGraphEx+0x1f0>
 801293c:	2b00      	cmp	r3, #0
 801293e:	d16f      	bne.n	8012a20 <GUI_DrawGraphEx+0x1f4>
 8012940:	4611      	mov	r1, r2
 8012942:	f108 30ff 	add.w	r0, r8, #4294967295
 8012946:	9201      	str	r2, [sp, #4]
 8012948:	f7fd fd60 	bl	801040c <LCD_DrawPixel>
 801294c:	2301      	movs	r3, #1
 801294e:	9a01      	ldr	r2, [sp, #4]
 8012950:	e067      	b.n	8012a22 <GUI_DrawGraphEx+0x1f6>
 8012952:	9805      	ldr	r0, [sp, #20]
 8012954:	1e41      	subs	r1, r0, #1
 8012956:	b1db      	cbz	r3, 8012990 <GUI_DrawGraphEx+0x164>
 8012958:	2904      	cmp	r1, #4
 801295a:	d817      	bhi.n	801298c <GUI_DrawGraphEx+0x160>
 801295c:	e8df f001 	tbb	[pc, r1]
 8012960:	0b070503 	.word	0x0b070503
 8012964:	0f          	.byte	0x0f
 8012965:	00          	.byte	0x00
 8012966:	1b62      	subs	r2, r4, r5
 8012968:	e00e      	b.n	8012988 <GUI_DrawGraphEx+0x15c>
 801296a:	1b65      	subs	r5, r4, r5
 801296c:	e000      	b.n	8012970 <GUI_DrawGraphEx+0x144>
 801296e:	4425      	add	r5, r4
 8012970:	fbb5 f2f6 	udiv	r2, r5, r6
 8012974:	e008      	b.n	8012988 <GUI_DrawGraphEx+0x15c>
 8012976:	4425      	add	r5, r4
 8012978:	fb07 f205 	mul.w	r2, r7, r5
 801297c:	e004      	b.n	8012988 <GUI_DrawGraphEx+0x15c>
 801297e:	4425      	add	r5, r4
 8012980:	fb07 f205 	mul.w	r2, r7, r5
 8012984:	fbb2 f2f6 	udiv	r2, r2, r6
 8012988:	2300      	movs	r3, #0
 801298a:	e04a      	b.n	8012a22 <GUI_DrawGraphEx+0x1f6>
 801298c:	192a      	adds	r2, r5, r4
 801298e:	e7fb      	b.n	8012988 <GUI_DrawGraphEx+0x15c>
 8012990:	2904      	cmp	r1, #4
 8012992:	d812      	bhi.n	80129ba <GUI_DrawGraphEx+0x18e>
 8012994:	e8df f001 	tbb	[pc, r1]
 8012998:	0b070503 	.word	0x0b070503
 801299c:	0e          	.byte	0x0e
 801299d:	00          	.byte	0x00
 801299e:	1b65      	subs	r5, r4, r5
 80129a0:	e00c      	b.n	80129bc <GUI_DrawGraphEx+0x190>
 80129a2:	1b65      	subs	r5, r4, r5
 80129a4:	e000      	b.n	80129a8 <GUI_DrawGraphEx+0x17c>
 80129a6:	4425      	add	r5, r4
 80129a8:	fbb5 f5f6 	udiv	r5, r5, r6
 80129ac:	e006      	b.n	80129bc <GUI_DrawGraphEx+0x190>
 80129ae:	4425      	add	r5, r4
 80129b0:	437d      	muls	r5, r7
 80129b2:	e003      	b.n	80129bc <GUI_DrawGraphEx+0x190>
 80129b4:	4425      	add	r5, r4
 80129b6:	437d      	muls	r5, r7
 80129b8:	e7f6      	b.n	80129a8 <GUI_DrawGraphEx+0x17c>
 80129ba:	4425      	add	r5, r4
 80129bc:	9904      	ldr	r1, [sp, #16]
 80129be:	428a      	cmp	r2, r1
 80129c0:	da01      	bge.n	80129c6 <GUI_DrawGraphEx+0x19a>
 80129c2:	428d      	cmp	r5, r1
 80129c4:	db25      	blt.n	8012a12 <GUI_DrawGraphEx+0x1e6>
 80129c6:	455a      	cmp	r2, fp
 80129c8:	dd01      	ble.n	80129ce <GUI_DrawGraphEx+0x1a2>
 80129ca:	455d      	cmp	r5, fp
 80129cc:	dc21      	bgt.n	8012a12 <GUI_DrawGraphEx+0x1e6>
 80129ce:	eb05 0c02 	add.w	ip, r5, r2
 80129d2:	2102      	movs	r1, #2
 80129d4:	42aa      	cmp	r2, r5
 80129d6:	fb9c fcf1 	sdiv	ip, ip, r1
 80129da:	f108 30ff 	add.w	r0, r8, #4294967295
 80129de:	dc0b      	bgt.n	80129f8 <GUI_DrawGraphEx+0x1cc>
 80129e0:	4611      	mov	r1, r2
 80129e2:	4662      	mov	r2, ip
 80129e4:	e88d 1008 	stmia.w	sp, {r3, ip}
 80129e8:	f7fd fd64 	bl	80104b4 <LCD_DrawVLine>
 80129ec:	f8dd c004 	ldr.w	ip, [sp, #4]
 80129f0:	4640      	mov	r0, r8
 80129f2:	4661      	mov	r1, ip
 80129f4:	462a      	mov	r2, r5
 80129f6:	e009      	b.n	8012a0c <GUI_DrawGraphEx+0x1e0>
 80129f8:	4661      	mov	r1, ip
 80129fa:	e88d 1008 	stmia.w	sp, {r3, ip}
 80129fe:	f7fd fd59 	bl	80104b4 <LCD_DrawVLine>
 8012a02:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012a06:	4640      	mov	r0, r8
 8012a08:	4629      	mov	r1, r5
 8012a0a:	4662      	mov	r2, ip
 8012a0c:	f7fd fd52 	bl	80104b4 <LCD_DrawVLine>
 8012a10:	9b00      	ldr	r3, [sp, #0]
 8012a12:	9a02      	ldr	r2, [sp, #8]
 8012a14:	3201      	adds	r2, #1
 8012a16:	9202      	str	r2, [sp, #8]
 8012a18:	462a      	mov	r2, r5
 8012a1a:	e002      	b.n	8012a22 <GUI_DrawGraphEx+0x1f6>
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	9302      	str	r3, [sp, #8]
 8012a20:	2301      	movs	r3, #1
 8012a22:	9808      	ldr	r0, [sp, #32]
 8012a24:	f108 0801 	add.w	r8, r8, #1
 8012a28:	4580      	cmp	r8, r0
 8012a2a:	f47f af7a 	bne.w	8012922 <GUI_DrawGraphEx+0xf6>
 8012a2e:	e721      	b.n	8012874 <GUI_DrawGraphEx+0x48>
 8012a30:	b00b      	add	sp, #44	; 0x2c
 8012a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a36:	bf00      	nop
 8012a38:	20000110 	.word	0x20000110

08012a3c <GUI_WrapGetNumLines>:
 8012a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a3e:	4605      	mov	r5, r0
 8012a40:	460e      	mov	r6, r1
 8012a42:	4617      	mov	r7, r2
 8012a44:	2400      	movs	r4, #0
 8012a46:	4628      	mov	r0, r5
 8012a48:	4631      	mov	r1, r6
 8012a4a:	463a      	mov	r2, r7
 8012a4c:	f004 fc62 	bl	8017314 <GUI__WrapGetNumBytesToNextLine>
 8012a50:	b110      	cbz	r0, 8012a58 <GUI_WrapGetNumLines+0x1c>
 8012a52:	4405      	add	r5, r0
 8012a54:	3401      	adds	r4, #1
 8012a56:	e7f6      	b.n	8012a46 <GUI_WrapGetNumLines+0xa>
 8012a58:	4620      	mov	r0, r4
 8012a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012a5c <GUI_DispStringInRectWrap>:
 8012a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a60:	b089      	sub	sp, #36	; 0x24
 8012a62:	460c      	mov	r4, r1
 8012a64:	9202      	str	r2, [sp, #8]
 8012a66:	9303      	str	r3, [sp, #12]
 8012a68:	4605      	mov	r5, r0
 8012a6a:	2800      	cmp	r0, #0
 8012a6c:	f000 8091 	beq.w	8012b92 <GUI_DispStringInRectWrap+0x136>
 8012a70:	f8b1 a000 	ldrh.w	sl, [r1]
 8012a74:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 8012a78:	884e      	ldrh	r6, [r1, #2]
 8012a7a:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 8012a7e:	fa0f f289 	sxth.w	r2, r9
 8012a82:	fa0f f38a 	sxth.w	r3, sl
 8012a86:	1ad3      	subs	r3, r2, r3
 8012a88:	3301      	adds	r3, #1
 8012a8a:	9301      	str	r3, [sp, #4]
 8012a8c:	f000 fe1a 	bl	80136c4 <GUI_GetFontDistY>
 8012a90:	9902      	ldr	r1, [sp, #8]
 8012a92:	f011 070c 	ands.w	r7, r1, #12
 8012a96:	4680      	mov	r8, r0
 8012a98:	d01b      	beq.n	8012ad2 <GUI_DispStringInRectWrap+0x76>
 8012a9a:	4628      	mov	r0, r5
 8012a9c:	9901      	ldr	r1, [sp, #4]
 8012a9e:	9a03      	ldr	r2, [sp, #12]
 8012aa0:	f7ff ffcc 	bl	8012a3c <GUI_WrapGetNumLines>
 8012aa4:	2f08      	cmp	r7, #8
 8012aa6:	d003      	beq.n	8012ab0 <GUI_DispStringInRectWrap+0x54>
 8012aa8:	2f0c      	cmp	r7, #12
 8012aaa:	d006      	beq.n	8012aba <GUI_DispStringInRectWrap+0x5e>
 8012aac:	2f04      	cmp	r7, #4
 8012aae:	d110      	bne.n	8012ad2 <GUI_DispStringInRectWrap+0x76>
 8012ab0:	f10b 0601 	add.w	r6, fp, #1
 8012ab4:	fb00 6618 	mls	r6, r0, r8, r6
 8012ab8:	e00a      	b.n	8012ad0 <GUI_DispStringInRectWrap+0x74>
 8012aba:	b232      	sxth	r2, r6
 8012abc:	fa0f f38b 	sxth.w	r3, fp
 8012ac0:	1a9b      	subs	r3, r3, r2
 8012ac2:	3301      	adds	r3, #1
 8012ac4:	fb08 3010 	mls	r0, r8, r0, r3
 8012ac8:	2302      	movs	r3, #2
 8012aca:	fb90 f0f3 	sdiv	r0, r0, r3
 8012ace:	4406      	add	r6, r0
 8012ad0:	b2b6      	uxth	r6, r6
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	f7f9 fb86 	bl	800c1e4 <WM_SetUserClipRect>
 8012ad8:	4607      	mov	r7, r0
 8012ada:	b178      	cbz	r0, 8012afc <GUI_DispStringInRectWrap+0xa0>
 8012adc:	a804      	add	r0, sp, #16
 8012ade:	4621      	mov	r1, r4
 8012ae0:	463a      	mov	r2, r7
 8012ae2:	f8ad a010 	strh.w	sl, [sp, #16]
 8012ae6:	f8ad 6012 	strh.w	r6, [sp, #18]
 8012aea:	f8ad 9014 	strh.w	r9, [sp, #20]
 8012aee:	f8ad b016 	strh.w	fp, [sp, #22]
 8012af2:	f7fe f901 	bl	8010cf8 <GUI__IntersectRects>
 8012af6:	a804      	add	r0, sp, #16
 8012af8:	f7f9 fb74 	bl	800c1e4 <WM_SetUserClipRect>
 8012afc:	9901      	ldr	r1, [sp, #4]
 8012afe:	9a03      	ldr	r2, [sp, #12]
 8012b00:	4628      	mov	r0, r5
 8012b02:	f004 fbd5 	bl	80172b0 <GUI__WrapGetNumCharsDisp>
 8012b06:	eb06 0b08 	add.w	fp, r6, r8
 8012b0a:	4602      	mov	r2, r0
 8012b0c:	fa1f fb8b 	uxth.w	fp, fp
 8012b10:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012b14:	4611      	mov	r1, r2
 8012b16:	4628      	mov	r0, r5
 8012b18:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012b1c:	9200      	str	r2, [sp, #0]
 8012b1e:	f8ad a018 	strh.w	sl, [sp, #24]
 8012b22:	f8ad 601a 	strh.w	r6, [sp, #26]
 8012b26:	f8ad 901c 	strh.w	r9, [sp, #28]
 8012b2a:	f000 fd2f 	bl	801358c <GUI__GetLineDistX>
 8012b2e:	9902      	ldr	r1, [sp, #8]
 8012b30:	9a00      	ldr	r2, [sp, #0]
 8012b32:	f001 0303 	and.w	r3, r1, #3
 8012b36:	2b01      	cmp	r3, #1
 8012b38:	d013      	beq.n	8012b62 <GUI_DispStringInRectWrap+0x106>
 8012b3a:	2b02      	cmp	r3, #2
 8012b3c:	d004      	beq.n	8012b48 <GUI_DispStringInRectWrap+0xec>
 8012b3e:	b9ab      	cbnz	r3, 8012b6c <GUI_DispStringInRectWrap+0x110>
 8012b40:	8823      	ldrh	r3, [r4, #0]
 8012b42:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012b46:	e011      	b.n	8012b6c <GUI_DispStringInRectWrap+0x110>
 8012b48:	8821      	ldrh	r1, [r4, #0]
 8012b4a:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 8012b4e:	b20e      	sxth	r6, r1
 8012b50:	ebc6 060e 	rsb	r6, r6, lr
 8012b54:	1a30      	subs	r0, r6, r0
 8012b56:	fb90 f3f3 	sdiv	r3, r0, r3
 8012b5a:	4419      	add	r1, r3
 8012b5c:	f8ad 1018 	strh.w	r1, [sp, #24]
 8012b60:	e004      	b.n	8012b6c <GUI_DispStringInRectWrap+0x110>
 8012b62:	88a3      	ldrh	r3, [r4, #4]
 8012b64:	3301      	adds	r3, #1
 8012b66:	1a18      	subs	r0, r3, r0
 8012b68:	f8ad 0018 	strh.w	r0, [sp, #24]
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	4611      	mov	r1, r2
 8012b70:	aa06      	add	r2, sp, #24
 8012b72:	f000 fd3b 	bl	80135ec <GUI__DispLine>
 8012b76:	4628      	mov	r0, r5
 8012b78:	9901      	ldr	r1, [sp, #4]
 8012b7a:	9a03      	ldr	r2, [sp, #12]
 8012b7c:	f004 fbca 	bl	8017314 <GUI__WrapGetNumBytesToNextLine>
 8012b80:	4405      	add	r5, r0
 8012b82:	fa1f f68b 	uxth.w	r6, fp
 8012b86:	782b      	ldrb	r3, [r5, #0]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d1b7      	bne.n	8012afc <GUI_DispStringInRectWrap+0xa0>
 8012b8c:	4638      	mov	r0, r7
 8012b8e:	f7f9 fb29 	bl	800c1e4 <WM_SetUserClipRect>
 8012b92:	b009      	add	sp, #36	; 0x24
 8012b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b98 <GUI_DispString>:
 8012b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	2800      	cmp	r0, #0
 8012ba0:	d079      	beq.n	8012c96 <GUI_DispString+0xfe>
 8012ba2:	4d3e      	ldr	r5, [pc, #248]	; (8012c9c <GUI_DispString+0x104>)
 8012ba4:	f000 fd8e 	bl	80136c4 <GUI_GetFontDistY>
 8012ba8:	682b      	ldr	r3, [r5, #0]
 8012baa:	4680      	mov	r8, r0
 8012bac:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 8012bb0:	f000 fd70 	bl	8013694 <GUI_GetYAdjust>
 8012bb4:	682b      	ldr	r3, [r5, #0]
 8012bb6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8012bb8:	b287      	uxth	r7, r0
 8012bba:	1bd2      	subs	r2, r2, r7
 8012bbc:	849a      	strh	r2, [r3, #36]	; 0x24
 8012bbe:	7823      	ldrb	r3, [r4, #0]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d05d      	beq.n	8012c80 <GUI_DispString+0xe8>
 8012bc4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8012bc8:	4620      	mov	r0, r4
 8012bca:	f000 fcb1 	bl	8013530 <GUI__GetLineNumChars>
 8012bce:	4606      	mov	r6, r0
 8012bd0:	4631      	mov	r1, r6
 8012bd2:	4620      	mov	r0, r4
 8012bd4:	f000 fcda 	bl	801358c <GUI__GetLineDistX>
 8012bd8:	682b      	ldr	r3, [r5, #0]
 8012bda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8012bdc:	f002 0203 	and.w	r2, r2, #3
 8012be0:	2a01      	cmp	r2, #1
 8012be2:	d005      	beq.n	8012bf0 <GUI_DispString+0x58>
 8012be4:	2a02      	cmp	r2, #2
 8012be6:	bf14      	ite	ne
 8012be8:	2200      	movne	r2, #0
 8012bea:	fb90 f2f2 	sdiveq	r2, r0, r2
 8012bee:	e000      	b.n	8012bf2 <GUI_DispString+0x5a>
 8012bf0:	4602      	mov	r2, r0
 8012bf2:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8012bf4:	1a8a      	subs	r2, r1, r2
 8012bf6:	b292      	uxth	r2, r2
 8012bf8:	b291      	uxth	r1, r2
 8012bfa:	8459      	strh	r1, [r3, #34]	; 0x22
 8012bfc:	fa1f fa80 	uxth.w	sl, r0
 8012c00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012c02:	f8ad 1000 	strh.w	r1, [sp]
 8012c06:	f10a 31ff 	add.w	r1, sl, #4294967295
 8012c0a:	440a      	add	r2, r1
 8012c0c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012c10:	fa1f fb88 	uxth.w	fp, r8
 8012c14:	3b01      	subs	r3, #1
 8012c16:	445b      	add	r3, fp
 8012c18:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	4631      	mov	r1, r6
 8012c20:	466a      	mov	r2, sp
 8012c22:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012c26:	f000 fce1 	bl	80135ec <GUI__DispLine>
 8012c2a:	682b      	ldr	r3, [r5, #0]
 8012c2c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012c30:	849a      	strh	r2, [r3, #36]	; 0x24
 8012c32:	4620      	mov	r0, r4
 8012c34:	4631      	mov	r1, r6
 8012c36:	f004 ff23 	bl	8017a80 <GUI_UC__NumChars2NumBytes>
 8012c3a:	5c23      	ldrb	r3, [r4, r0]
 8012c3c:	2b0a      	cmp	r3, #10
 8012c3e:	eb04 0200 	add.w	r2, r4, r0
 8012c42:	d001      	beq.n	8012c48 <GUI_DispString+0xb0>
 8012c44:	2b0d      	cmp	r3, #13
 8012c46:	d112      	bne.n	8012c6e <GUI_DispString+0xd6>
 8012c48:	682b      	ldr	r3, [r5, #0]
 8012c4a:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8012c4c:	f001 0103 	and.w	r1, r1, #3
 8012c50:	3901      	subs	r1, #1
 8012c52:	2901      	cmp	r1, #1
 8012c54:	bf8a      	itet	hi
 8012c56:	8c19      	ldrhhi	r1, [r3, #32]
 8012c58:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 8012c5c:	8459      	strhhi	r1, [r3, #34]	; 0x22
 8012c5e:	7811      	ldrb	r1, [r2, #0]
 8012c60:	290a      	cmp	r1, #10
 8012c62:	d10b      	bne.n	8012c7c <GUI_DispString+0xe4>
 8012c64:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8012c66:	448b      	add	fp, r1
 8012c68:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 8012c6c:	e006      	b.n	8012c7c <GUI_DispString+0xe4>
 8012c6e:	4b0b      	ldr	r3, [pc, #44]	; (8012c9c <GUI_DispString+0x104>)
 8012c70:	f8bd 0000 	ldrh.w	r0, [sp]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	4482      	add	sl, r0
 8012c78:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 8012c7c:	7813      	ldrb	r3, [r2, #0]
 8012c7e:	b943      	cbnz	r3, 8012c92 <GUI_DispString+0xfa>
 8012c80:	682b      	ldr	r3, [r5, #0]
 8012c82:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8012c84:	4417      	add	r7, r2
 8012c86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8012c88:	849f      	strh	r7, [r3, #36]	; 0x24
 8012c8a:	f022 0203 	bic.w	r2, r2, #3
 8012c8e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8012c90:	e001      	b.n	8012c96 <GUI_DispString+0xfe>
 8012c92:	1c54      	adds	r4, r2, #1
 8012c94:	e793      	b.n	8012bbe <GUI_DispString+0x26>
 8012c96:	b003      	add	sp, #12
 8012c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c9c:	20000110 	.word	0x20000110

08012ca0 <GUI_DEVICE__GetpDriver>:
 8012ca0:	2801      	cmp	r0, #1
 8012ca2:	dc09      	bgt.n	8012cb8 <GUI_DEVICE__GetpDriver+0x18>
 8012ca4:	4b05      	ldr	r3, [pc, #20]	; (8012cbc <GUI_DEVICE__GetpDriver+0x1c>)
 8012ca6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8012caa:	b120      	cbz	r0, 8012cb6 <GUI_DEVICE__GetpDriver+0x16>
 8012cac:	68c3      	ldr	r3, [r0, #12]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	b11b      	cbz	r3, 8012cba <GUI_DEVICE__GetpDriver+0x1a>
 8012cb2:	6800      	ldr	r0, [r0, #0]
 8012cb4:	e7f9      	b.n	8012caa <GUI_DEVICE__GetpDriver+0xa>
 8012cb6:	4770      	bx	lr
 8012cb8:	2000      	movs	r0, #0
 8012cba:	4770      	bx	lr
 8012cbc:	2001d5dc 	.word	0x2001d5dc

08012cc0 <GUI_DEVICE_Delete>:
 8012cc0:	f000 be08 	b.w	80138d4 <GUI_ALLOC_FreeFixedBlock>

08012cc4 <GUI_DEVICE_Create>:
 8012cc4:	2b01      	cmp	r3, #1
 8012cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cc8:	4606      	mov	r6, r0
 8012cca:	460d      	mov	r5, r1
 8012ccc:	4617      	mov	r7, r2
 8012cce:	461c      	mov	r4, r3
 8012cd0:	dd01      	ble.n	8012cd6 <GUI_DEVICE_Create+0x12>
 8012cd2:	2000      	movs	r0, #0
 8012cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cd6:	201c      	movs	r0, #28
 8012cd8:	f000 ff68 	bl	8013bac <GUI_ALLOC_GetFixedBlock>
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d0f8      	beq.n	8012cd2 <GUI_DEVICE_Create+0xe>
 8012ce0:	b10d      	cbz	r5, 8012ce6 <GUI_DEVICE_Create+0x22>
 8012ce2:	6105      	str	r5, [r0, #16]
 8012ce4:	e009      	b.n	8012cfa <GUI_DEVICE_Create+0x36>
 8012ce6:	4b09      	ldr	r3, [pc, #36]	; (8012d0c <GUI_DEVICE_Create+0x48>)
 8012ce8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8012cec:	b129      	cbz	r1, 8012cfa <GUI_DEVICE_Create+0x36>
 8012cee:	680b      	ldr	r3, [r1, #0]
 8012cf0:	b10b      	cbz	r3, 8012cf6 <GUI_DEVICE_Create+0x32>
 8012cf2:	4619      	mov	r1, r3
 8012cf4:	e7fb      	b.n	8012cee <GUI_DEVICE_Create+0x2a>
 8012cf6:	690b      	ldr	r3, [r1, #16]
 8012cf8:	6103      	str	r3, [r0, #16]
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	6083      	str	r3, [r0, #8]
 8012cfe:	6184      	str	r4, [r0, #24]
 8012d00:	8287      	strh	r7, [r0, #20]
 8012d02:	60c6      	str	r6, [r0, #12]
 8012d04:	6003      	str	r3, [r0, #0]
 8012d06:	6043      	str	r3, [r0, #4]
 8012d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d0a:	bf00      	nop
 8012d0c:	2001d5dc 	.word	0x2001d5dc

08012d10 <GUI_DEVICE_Unlink>:
 8012d10:	4b09      	ldr	r3, [pc, #36]	; (8012d38 <GUI_DEVICE_Unlink+0x28>)
 8012d12:	6982      	ldr	r2, [r0, #24]
 8012d14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d18:	4281      	cmp	r1, r0
 8012d1a:	bf04      	itt	eq
 8012d1c:	6801      	ldreq	r1, [r0, #0]
 8012d1e:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 8012d22:	6843      	ldr	r3, [r0, #4]
 8012d24:	b10b      	cbz	r3, 8012d2a <GUI_DEVICE_Unlink+0x1a>
 8012d26:	6802      	ldr	r2, [r0, #0]
 8012d28:	601a      	str	r2, [r3, #0]
 8012d2a:	6802      	ldr	r2, [r0, #0]
 8012d2c:	b102      	cbz	r2, 8012d30 <GUI_DEVICE_Unlink+0x20>
 8012d2e:	6053      	str	r3, [r2, #4]
 8012d30:	2300      	movs	r3, #0
 8012d32:	6003      	str	r3, [r0, #0]
 8012d34:	6043      	str	r3, [r0, #4]
 8012d36:	4770      	bx	lr
 8012d38:	2001d5dc 	.word	0x2001d5dc

08012d3c <GUI_DEVICE_Link>:
 8012d3c:	b570      	push	{r4, r5, r6, lr}
 8012d3e:	b338      	cbz	r0, 8012d90 <GUI_DEVICE_Link+0x54>
 8012d40:	6982      	ldr	r2, [r0, #24]
 8012d42:	2a01      	cmp	r2, #1
 8012d44:	dc24      	bgt.n	8012d90 <GUI_DEVICE_Link+0x54>
 8012d46:	4919      	ldr	r1, [pc, #100]	; (8012dac <GUI_DEVICE_Link+0x70>)
 8012d48:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8012d4c:	460d      	mov	r5, r1
 8012d4e:	b913      	cbnz	r3, 8012d56 <GUI_DEVICE_Link+0x1a>
 8012d50:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8012d54:	e01a      	b.n	8012d8c <GUI_DEVICE_Link+0x50>
 8012d56:	6859      	ldr	r1, [r3, #4]
 8012d58:	b109      	cbz	r1, 8012d5e <GUI_DEVICE_Link+0x22>
 8012d5a:	460b      	mov	r3, r1
 8012d5c:	e7fb      	b.n	8012d56 <GUI_DEVICE_Link+0x1a>
 8012d5e:	68c1      	ldr	r1, [r0, #12]
 8012d60:	680e      	ldr	r6, [r1, #0]
 8012d62:	68d9      	ldr	r1, [r3, #12]
 8012d64:	680c      	ldr	r4, [r1, #0]
 8012d66:	42b4      	cmp	r4, r6
 8012d68:	dd03      	ble.n	8012d72 <GUI_DEVICE_Link+0x36>
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d1f8      	bne.n	8012d62 <GUI_DEVICE_Link+0x26>
 8012d70:	e00e      	b.n	8012d90 <GUI_DEVICE_Link+0x54>
 8012d72:	d102      	bne.n	8012d7a <GUI_DEVICE_Link+0x3e>
 8012d74:	8a81      	ldrh	r1, [r0, #20]
 8012d76:	2901      	cmp	r1, #1
 8012d78:	d011      	beq.n	8012d9e <GUI_DEVICE_Link+0x62>
 8012d7a:	6859      	ldr	r1, [r3, #4]
 8012d7c:	b199      	cbz	r1, 8012da6 <GUI_DEVICE_Link+0x6a>
 8012d7e:	6008      	str	r0, [r1, #0]
 8012d80:	6041      	str	r1, [r0, #4]
 8012d82:	6058      	str	r0, [r3, #4]
 8012d84:	4298      	cmp	r0, r3
 8012d86:	bf08      	it	eq
 8012d88:	2300      	moveq	r3, #0
 8012d8a:	6003      	str	r3, [r0, #0]
 8012d8c:	2000      	movs	r0, #0
 8012d8e:	bd70      	pop	{r4, r5, r6, pc}
 8012d90:	2001      	movs	r0, #1
 8012d92:	bd70      	pop	{r4, r5, r6, pc}
 8012d94:	68cb      	ldr	r3, [r1, #12]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	42a3      	cmp	r3, r4
 8012d9a:	460b      	mov	r3, r1
 8012d9c:	dbed      	blt.n	8012d7a <GUI_DEVICE_Link+0x3e>
 8012d9e:	6819      	ldr	r1, [r3, #0]
 8012da0:	2900      	cmp	r1, #0
 8012da2:	d1f7      	bne.n	8012d94 <GUI_DEVICE_Link+0x58>
 8012da4:	e7e9      	b.n	8012d7a <GUI_DEVICE_Link+0x3e>
 8012da6:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 8012daa:	e7ea      	b.n	8012d82 <GUI_DEVICE_Link+0x46>
 8012dac:	2001d5dc 	.word	0x2001d5dc

08012db0 <GUI_DEVICE_CreateAndLink>:
 8012db0:	b538      	push	{r3, r4, r5, lr}
 8012db2:	461d      	mov	r5, r3
 8012db4:	f7ff ff86 	bl	8012cc4 <GUI_DEVICE_Create>
 8012db8:	4604      	mov	r4, r0
 8012dba:	b148      	cbz	r0, 8012dd0 <GUI_DEVICE_CreateAndLink+0x20>
 8012dbc:	f7ff ffbe 	bl	8012d3c <GUI_DEVICE_Link>
 8012dc0:	68e3      	ldr	r3, [r4, #12]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	b923      	cbnz	r3, 8012dd0 <GUI_DEVICE_CreateAndLink+0x20>
 8012dc6:	4b03      	ldr	r3, [pc, #12]	; (8012dd4 <GUI_DEVICE_CreateAndLink+0x24>)
 8012dc8:	3516      	adds	r5, #22
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8012dd0:	4620      	mov	r0, r4
 8012dd2:	bd38      	pop	{r3, r4, r5, pc}
 8012dd4:	20000110 	.word	0x20000110

08012dd8 <_OnExit>:
 8012dd8:	4b03      	ldr	r3, [pc, #12]	; (8012de8 <_OnExit+0x10>)
 8012dda:	4804      	ldr	r0, [pc, #16]	; (8012dec <_OnExit+0x14>)
 8012ddc:	2100      	movs	r1, #0
 8012dde:	2228      	movs	r2, #40	; 0x28
 8012de0:	6019      	str	r1, [r3, #0]
 8012de2:	f7fd be9a 	b.w	8010b1a <GUI__memset>
 8012de6:	bf00      	nop
 8012de8:	2001d298 	.word	0x2001d298
 8012dec:	2001d270 	.word	0x2001d270

08012df0 <_Show>:
 8012df0:	b510      	push	{r4, lr}
 8012df2:	4604      	mov	r4, r0
 8012df4:	f7ff f880 	bl	8011ef8 <GUI_GetCursorLayer>
 8012df8:	b120      	cbz	r0, 8012e04 <_Show+0x14>
 8012dfa:	2101      	movs	r1, #1
 8012dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e00:	f7ff b8a8 	b.w	8011f54 <GUI_SetLayerVisEx>
 8012e04:	4b06      	ldr	r3, [pc, #24]	; (8012e20 <_Show+0x30>)
 8012e06:	2014      	movs	r0, #20
 8012e08:	fb00 3004 	mla	r0, r0, r4, r3
 8012e0c:	7943      	ldrb	r3, [r0, #5]
 8012e0e:	b133      	cbz	r3, 8012e1e <_Show+0x2e>
 8012e10:	2301      	movs	r3, #1
 8012e12:	7103      	strb	r3, [r0, #4]
 8012e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e18:	6900      	ldr	r0, [r0, #16]
 8012e1a:	f006 bbb1 	b.w	8019580 <GUI_SPRITE_Show>
 8012e1e:	bd10      	pop	{r4, pc}
 8012e20:	2001d270 	.word	0x2001d270

08012e24 <GUI_CURSOR_SelectEx>:
 8012e24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e28:	4605      	mov	r5, r0
 8012e2a:	4608      	mov	r0, r1
 8012e2c:	460c      	mov	r4, r1
 8012e2e:	f7ff f863 	bl	8011ef8 <GUI_GetCursorLayer>
 8012e32:	2314      	movs	r3, #20
 8012e34:	4363      	muls	r3, r4
 8012e36:	4e2a      	ldr	r6, [pc, #168]	; (8012ee0 <GUI_CURSOR_SelectEx+0xbc>)
 8012e38:	f856 9003 	ldr.w	r9, [r6, r3]
 8012e3c:	4b29      	ldr	r3, [pc, #164]	; (8012ee4 <GUI_CURSOR_SelectEx+0xc0>)
 8012e3e:	681a      	ldr	r2, [r3, #0]
 8012e40:	4607      	mov	r7, r0
 8012e42:	b932      	cbnz	r2, 8012e52 <GUI_CURSOR_SelectEx+0x2e>
 8012e44:	2201      	movs	r2, #1
 8012e46:	4828      	ldr	r0, [pc, #160]	; (8012ee8 <GUI_CURSOR_SelectEx+0xc4>)
 8012e48:	601a      	str	r2, [r3, #0]
 8012e4a:	4b28      	ldr	r3, [pc, #160]	; (8012eec <GUI_CURSOR_SelectEx+0xc8>)
 8012e4c:	6003      	str	r3, [r0, #0]
 8012e4e:	f000 f929 	bl	80130a4 <GUI__RegisterExit>
 8012e52:	b1f7      	cbz	r7, 8012e92 <GUI_CURSOR_SelectEx+0x6e>
 8012e54:	4638      	mov	r0, r7
 8012e56:	f7ff f863 	bl	8011f20 <GUI_SelectLayer>
 8012e5a:	4680      	mov	r8, r0
 8012e5c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8012e60:	f7ff f834 	bl	8011ecc <GUI_SetBkColor>
 8012e64:	f000 f90e 	bl	8013084 <GUI_Clear>
 8012e68:	2100      	movs	r1, #0
 8012e6a:	6828      	ldr	r0, [r5, #0]
 8012e6c:	460a      	mov	r2, r1
 8012e6e:	f006 fec1 	bl	8019bf4 <GUI_DrawBitmap>
 8012e72:	682b      	ldr	r3, [r5, #0]
 8012e74:	4638      	mov	r0, r7
 8012e76:	8819      	ldrh	r1, [r3, #0]
 8012e78:	885a      	ldrh	r2, [r3, #2]
 8012e7a:	f7ff f869 	bl	8011f50 <GUI_SetLayerSizeEx>
 8012e7e:	2314      	movs	r3, #20
 8012e80:	4363      	muls	r3, r4
 8012e82:	18f2      	adds	r2, r6, r3
 8012e84:	50f5      	str	r5, [r6, r3]
 8012e86:	2301      	movs	r3, #1
 8012e88:	7153      	strb	r3, [r2, #5]
 8012e8a:	4640      	mov	r0, r8
 8012e8c:	f7ff f848 	bl	8011f20 <GUI_SelectLayer>
 8012e90:	e01f      	b.n	8012ed2 <GUI_CURSOR_SelectEx+0xae>
 8012e92:	2314      	movs	r3, #20
 8012e94:	4363      	muls	r3, r4
 8012e96:	eb06 0803 	add.w	r8, r6, r3
 8012e9a:	50f5      	str	r5, [r6, r3]
 8012e9c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	f888 3005 	strb.w	r3, [r8, #5]
 8012ea6:	b118      	cbz	r0, 8012eb0 <GUI_CURSOR_SelectEx+0x8c>
 8012ea8:	f006 f8c4 	bl	8019034 <GUI_SPRITE_Delete>
 8012eac:	f8c8 7010 	str.w	r7, [r8, #16]
 8012eb0:	b195      	cbz	r5, 8012ed8 <GUI_CURSOR_SelectEx+0xb4>
 8012eb2:	2314      	movs	r3, #20
 8012eb4:	fb03 6604 	mla	r6, r3, r4, r6
 8012eb8:	686f      	ldr	r7, [r5, #4]
 8012eba:	68f3      	ldr	r3, [r6, #12]
 8012ebc:	68b1      	ldr	r1, [r6, #8]
 8012ebe:	68aa      	ldr	r2, [r5, #8]
 8012ec0:	2001      	movs	r0, #1
 8012ec2:	9000      	str	r0, [sp, #0]
 8012ec4:	1a9a      	subs	r2, r3, r2
 8012ec6:	6828      	ldr	r0, [r5, #0]
 8012ec8:	1bc9      	subs	r1, r1, r7
 8012eca:	4623      	mov	r3, r4
 8012ecc:	f006 f852 	bl	8018f74 <GUI_SPRITE__CreateEx>
 8012ed0:	6130      	str	r0, [r6, #16]
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	f7ff ff8c 	bl	8012df0 <_Show>
 8012ed8:	4648      	mov	r0, r9
 8012eda:	b003      	add	sp, #12
 8012edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ee0:	2001d270 	.word	0x2001d270
 8012ee4:	2001d298 	.word	0x2001d298
 8012ee8:	2001d268 	.word	0x2001d268
 8012eec:	08012dd9 	.word	0x08012dd9

08012ef0 <GUI_CURSOR_GetStateEx>:
 8012ef0:	4b02      	ldr	r3, [pc, #8]	; (8012efc <GUI_CURSOR_GetStateEx+0xc>)
 8012ef2:	2214      	movs	r2, #20
 8012ef4:	fb02 3000 	mla	r0, r2, r0, r3
 8012ef8:	7940      	ldrb	r0, [r0, #5]
 8012efa:	4770      	bx	lr
 8012efc:	2001d270 	.word	0x2001d270

08012f00 <GUI_CURSOR_SetPositionEx>:
 8012f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f02:	4606      	mov	r6, r0
 8012f04:	4610      	mov	r0, r2
 8012f06:	460d      	mov	r5, r1
 8012f08:	4614      	mov	r4, r2
 8012f0a:	f7fe fff5 	bl	8011ef8 <GUI_GetCursorLayer>
 8012f0e:	4f15      	ldr	r7, [pc, #84]	; (8012f64 <GUI_CURSOR_SetPositionEx+0x64>)
 8012f10:	2314      	movs	r3, #20
 8012f12:	b148      	cbz	r0, 8012f28 <GUI_CURSOR_SetPositionEx+0x28>
 8012f14:	435c      	muls	r4, r3
 8012f16:	593b      	ldr	r3, [r7, r4]
 8012f18:	6859      	ldr	r1, [r3, #4]
 8012f1a:	689a      	ldr	r2, [r3, #8]
 8012f1c:	1a71      	subs	r1, r6, r1
 8012f1e:	1aaa      	subs	r2, r5, r2
 8012f20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012f24:	f7ff b812 	b.w	8011f4c <GUI_SetLayerPosEx>
 8012f28:	fb03 7304 	mla	r3, r3, r4, r7
 8012f2c:	f103 0208 	add.w	r2, r3, #8
 8012f30:	689b      	ldr	r3, [r3, #8]
 8012f32:	42b3      	cmp	r3, r6
 8012f34:	d102      	bne.n	8012f3c <GUI_CURSOR_SetPositionEx+0x3c>
 8012f36:	6853      	ldr	r3, [r2, #4]
 8012f38:	42ab      	cmp	r3, r5
 8012f3a:	d011      	beq.n	8012f60 <GUI_CURSOR_SetPositionEx+0x60>
 8012f3c:	2314      	movs	r3, #20
 8012f3e:	4363      	muls	r3, r4
 8012f40:	18fa      	adds	r2, r7, r3
 8012f42:	6910      	ldr	r0, [r2, #16]
 8012f44:	b138      	cbz	r0, 8012f56 <GUI_CURSOR_SetPositionEx+0x56>
 8012f46:	4a07      	ldr	r2, [pc, #28]	; (8012f64 <GUI_CURSOR_SetPositionEx+0x64>)
 8012f48:	58d3      	ldr	r3, [r2, r3]
 8012f4a:	6859      	ldr	r1, [r3, #4]
 8012f4c:	689a      	ldr	r2, [r3, #8]
 8012f4e:	1a71      	subs	r1, r6, r1
 8012f50:	1aaa      	subs	r2, r5, r2
 8012f52:	f006 f891 	bl	8019078 <GUI_SPRITE_SetPosition>
 8012f56:	2314      	movs	r3, #20
 8012f58:	fb03 7404 	mla	r4, r3, r4, r7
 8012f5c:	60a6      	str	r6, [r4, #8]
 8012f5e:	60e5      	str	r5, [r4, #12]
 8012f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f62:	bf00      	nop
 8012f64:	2001d270 	.word	0x2001d270

08012f68 <_OnExit>:
 8012f68:	b510      	push	{r4, lr}
 8012f6a:	4b07      	ldr	r3, [pc, #28]	; (8012f88 <_OnExit+0x20>)
 8012f6c:	4807      	ldr	r0, [pc, #28]	; (8012f8c <_OnExit+0x24>)
 8012f6e:	2400      	movs	r4, #0
 8012f70:	4621      	mov	r1, r4
 8012f72:	2270      	movs	r2, #112	; 0x70
 8012f74:	601c      	str	r4, [r3, #0]
 8012f76:	f7fd fdd0 	bl	8010b1a <GUI__memset>
 8012f7a:	4621      	mov	r1, r4
 8012f7c:	4804      	ldr	r0, [pc, #16]	; (8012f90 <_OnExit+0x28>)
 8012f7e:	2208      	movs	r2, #8
 8012f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f84:	f7fd bdc9 	b.w	8010b1a <GUI__memset>
 8012f88:	2001d318 	.word	0x2001d318
 8012f8c:	2001d2a0 	.word	0x2001d2a0
 8012f90:	2001d5dc 	.word	0x2001d5dc

08012f94 <_InitContext>:
 8012f94:	b538      	push	{r3, r4, r5, lr}
 8012f96:	4d19      	ldr	r5, [pc, #100]	; (8012ffc <_InitContext+0x68>)
 8012f98:	682b      	ldr	r3, [r5, #0]
 8012f9a:	1d1a      	adds	r2, r3, #4
 8012f9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8012f9e:	f103 0208 	add.w	r2, r3, #8
 8012fa2:	639b      	str	r3, [r3, #56]	; 0x38
 8012fa4:	641b      	str	r3, [r3, #64]	; 0x40
 8012fa6:	6142      	str	r2, [r0, #20]
 8012fa8:	7c5a      	ldrb	r2, [r3, #17]
 8012faa:	4b15      	ldr	r3, [pc, #84]	; (8013000 <_InitContext+0x6c>)
 8012fac:	4604      	mov	r4, r0
 8012fae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012fb2:	68c3      	ldr	r3, [r0, #12]
 8012fb4:	f104 0108 	add.w	r1, r4, #8
 8012fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fba:	4798      	blx	r3
 8012fbc:	4b11      	ldr	r3, [pc, #68]	; (8013004 <_InitContext+0x70>)
 8012fbe:	6663      	str	r3, [r4, #100]	; 0x64
 8012fc0:	4b11      	ldr	r3, [pc, #68]	; (8013008 <_InitContext+0x74>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	61e3      	str	r3, [r4, #28]
 8012fc6:	682b      	ldr	r3, [r5, #0]
 8012fc8:	3308      	adds	r3, #8
 8012fca:	6163      	str	r3, [r4, #20]
 8012fcc:	2301      	movs	r3, #1
 8012fce:	7623      	strb	r3, [r4, #24]
 8012fd0:	f7f9 fd22 	bl	800ca18 <WM_GetDesktopWindow>
 8012fd4:	2303      	movs	r3, #3
 8012fd6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8012fda:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8012fde:	6323      	str	r3, [r4, #48]	; 0x30
 8012fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8012fe2:	64a0      	str	r0, [r4, #72]	; 0x48
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	f7fd fd51 	bl	8010a8c <LCD_SetBkColor>
 8012fea:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012fee:	f7fd fd55 	bl	8010a9c <LCD_SetColor>
 8012ff2:	4b06      	ldr	r3, [pc, #24]	; (801300c <_InitContext+0x78>)
 8012ff4:	4a06      	ldr	r2, [pc, #24]	; (8013010 <_InitContext+0x7c>)
 8012ff6:	601a      	str	r2, [r3, #0]
 8012ff8:	bd38      	pop	{r3, r4, r5, pc}
 8012ffa:	bf00      	nop
 8012ffc:	20000110 	.word	0x20000110
 8013000:	2001d5dc 	.word	0x2001d5dc
 8013004:	08020ba0 	.word	0x08020ba0
 8013008:	20000114 	.word	0x20000114
 801300c:	2001d5d4 	.word	0x2001d5d4
 8013010:	080257e0 	.word	0x080257e0

08013014 <GUI_SetDefaultFont>:
 8013014:	4b01      	ldr	r3, [pc, #4]	; (801301c <GUI_SetDefaultFont+0x8>)
 8013016:	6018      	str	r0, [r3, #0]
 8013018:	4770      	bx	lr
 801301a:	bf00      	nop
 801301c:	20000114 	.word	0x20000114

08013020 <GUI_ClearRect>:
 8013020:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013024:	4607      	mov	r7, r0
 8013026:	2004      	movs	r0, #4
 8013028:	469a      	mov	sl, r3
 801302a:	460e      	mov	r6, r1
 801302c:	4691      	mov	r9, r2
 801302e:	f7fd f9e5 	bl	80103fc <LCD_SetDrawMode>
 8013032:	4b13      	ldr	r3, [pc, #76]	; (8013080 <GUI_ClearRect+0x60>)
 8013034:	681c      	ldr	r4, [r3, #0]
 8013036:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8013038:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801303a:	442f      	add	r7, r5
 801303c:	4426      	add	r6, r4
 801303e:	4680      	mov	r8, r0
 8013040:	444d      	add	r5, r9
 8013042:	4454      	add	r4, sl
 8013044:	4668      	mov	r0, sp
 8013046:	f8ad 7000 	strh.w	r7, [sp]
 801304a:	f8ad 5004 	strh.w	r5, [sp, #4]
 801304e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8013052:	f8ad 4006 	strh.w	r4, [sp, #6]
 8013056:	f7fa fc63 	bl	800d920 <WM__InitIVRSearch>
 801305a:	b928      	cbnz	r0, 8013068 <GUI_ClearRect+0x48>
 801305c:	4640      	mov	r0, r8
 801305e:	f7fd f9cd 	bl	80103fc <LCD_SetDrawMode>
 8013062:	b002      	add	sp, #8
 8013064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013068:	4638      	mov	r0, r7
 801306a:	4631      	mov	r1, r6
 801306c:	462a      	mov	r2, r5
 801306e:	4623      	mov	r3, r4
 8013070:	f7fd fa46 	bl	8010500 <LCD_FillRect>
 8013074:	f7fa fb92 	bl	800d79c <WM__GetNextIVR>
 8013078:	2800      	cmp	r0, #0
 801307a:	d1f5      	bne.n	8013068 <GUI_ClearRect+0x48>
 801307c:	e7ee      	b.n	801305c <GUI_ClearRect+0x3c>
 801307e:	bf00      	nop
 8013080:	20000110 	.word	0x20000110

08013084 <GUI_Clear>:
 8013084:	b510      	push	{r4, lr}
 8013086:	2000      	movs	r0, #0
 8013088:	4601      	mov	r1, r0
 801308a:	f7ff f8c3 	bl	8012214 <GUI_GotoXY>
 801308e:	4804      	ldr	r0, [pc, #16]	; (80130a0 <GUI_Clear+0x1c>)
 8013090:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8013094:	4601      	mov	r1, r0
 8013096:	4613      	mov	r3, r2
 8013098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801309c:	f7ff bfc0 	b.w	8013020 <GUI_ClearRect>
 80130a0:	ffffc001 	.word	0xffffc001

080130a4 <GUI__RegisterExit>:
 80130a4:	b480      	push	{r7}
 80130a6:	b083      	sub	sp, #12
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	4b05      	ldr	r3, [pc, #20]	; (80130c4 <GUI__RegisterExit+0x20>)
 80130ae:	681a      	ldr	r2, [r3, #0]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	605a      	str	r2, [r3, #4]
 80130b4:	4b03      	ldr	r3, [pc, #12]	; (80130c4 <GUI__RegisterExit+0x20>)
 80130b6:	687a      	ldr	r2, [r7, #4]
 80130b8:	601a      	str	r2, [r3, #0]
 80130ba:	370c      	adds	r7, #12
 80130bc:	46bd      	mov	sp, r7
 80130be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c2:	4770      	bx	lr
 80130c4:	2001d29c 	.word	0x2001d29c

080130c8 <GUI__Config>:
 80130c8:	b508      	push	{r3, lr}
 80130ca:	4b08      	ldr	r3, [pc, #32]	; (80130ec <GUI__Config+0x24>)
 80130cc:	681a      	ldr	r2, [r3, #0]
 80130ce:	b962      	cbnz	r2, 80130ea <GUI__Config+0x22>
 80130d0:	2201      	movs	r2, #1
 80130d2:	601a      	str	r2, [r3, #0]
 80130d4:	f7ed ff5e 	bl	8000f94 <GUI_X_Config>
 80130d8:	f7ed ffb6 	bl	8001048 <LCD_X_Config>
 80130dc:	4804      	ldr	r0, [pc, #16]	; (80130f0 <GUI__Config+0x28>)
 80130de:	4b05      	ldr	r3, [pc, #20]	; (80130f4 <GUI__Config+0x2c>)
 80130e0:	6003      	str	r3, [r0, #0]
 80130e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80130e6:	f7ff bfdd 	b.w	80130a4 <GUI__RegisterExit>
 80130ea:	bd08      	pop	{r3, pc}
 80130ec:	2001d318 	.word	0x2001d318
 80130f0:	2001d310 	.word	0x2001d310
 80130f4:	08012f69 	.word	0x08012f69

080130f8 <GUI_Init>:
 80130f8:	b590      	push	{r4, r7, lr}
 80130fa:	b083      	sub	sp, #12
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	4b20      	ldr	r3, [pc, #128]	; (8013180 <GUI_Init+0x88>)
 8013100:	4a1f      	ldr	r2, [pc, #124]	; (8013180 <GUI_Init+0x88>)
 8013102:	6812      	ldr	r2, [r2, #0]
 8013104:	f022 0201 	bic.w	r2, r2, #1
 8013108:	601a      	str	r2, [r3, #0]
 801310a:	4b1e      	ldr	r3, [pc, #120]	; (8013184 <GUI_Init+0x8c>)
 801310c:	2201      	movs	r2, #1
 801310e:	601a      	str	r2, [r3, #0]
 8013110:	4b1d      	ldr	r3, [pc, #116]	; (8013188 <GUI_Init+0x90>)
 8013112:	4a1e      	ldr	r2, [pc, #120]	; (801318c <GUI_Init+0x94>)
 8013114:	601a      	str	r2, [r3, #0]
 8013116:	4b1c      	ldr	r3, [pc, #112]	; (8013188 <GUI_Init+0x90>)
 8013118:	681a      	ldr	r2, [r3, #0]
 801311a:	4b1d      	ldr	r3, [pc, #116]	; (8013190 <GUI_Init+0x98>)
 801311c:	429a      	cmp	r2, r3
 801311e:	d000      	beq.n	8013122 <GUI_Init+0x2a>
 8013120:	e7fe      	b.n	8013120 <GUI_Init+0x28>
 8013122:	f7ff ffd1 	bl	80130c8 <GUI__Config>
 8013126:	4b1b      	ldr	r3, [pc, #108]	; (8013194 <GUI_Init+0x9c>)
 8013128:	222e      	movs	r2, #46	; 0x2e
 801312a:	701a      	strb	r2, [r3, #0]
 801312c:	f7ed ff68 	bl	8001000 <GUI_X_Init>
 8013130:	4819      	ldr	r0, [pc, #100]	; (8013198 <GUI_Init+0xa0>)
 8013132:	f7ff ff2f 	bl	8012f94 <_InitContext>
 8013136:	f7fd fc07 	bl	8010948 <emWin_LCD_Init>
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	f7fd f8e8 	bl	8010310 <LCD_GetXSizeDisplay>
 8013140:	4603      	mov	r3, r0
 8013142:	2b00      	cmp	r3, #0
 8013144:	d004      	beq.n	8013150 <GUI_Init+0x58>
 8013146:	f7fd f8e9 	bl	801031c <LCD_GetYSizeDisplay>
 801314a:	4603      	mov	r3, r0
 801314c:	2b00      	cmp	r3, #0
 801314e:	d109      	bne.n	8013164 <GUI_Init+0x6c>
 8013150:	f7fd f8ca 	bl	80102e8 <LCD_GetXSizeMax>
 8013154:	4604      	mov	r4, r0
 8013156:	f7fd f8ca 	bl	80102ee <LCD_GetYSizeMax>
 801315a:	4603      	mov	r3, r0
 801315c:	4620      	mov	r0, r4
 801315e:	4619      	mov	r1, r3
 8013160:	f7fd f8cc 	bl	80102fc <LCD_SetDisplaySize>
 8013164:	2000      	movs	r0, #0
 8013166:	2100      	movs	r1, #0
 8013168:	f004 fca2 	bl	8017ab0 <GUI_SetOrg>
 801316c:	f7fa fe24 	bl	800ddb8 <WM_Init>
 8013170:	4b0a      	ldr	r3, [pc, #40]	; (801319c <GUI_Init+0xa4>)
 8013172:	2201      	movs	r2, #1
 8013174:	701a      	strb	r2, [r3, #0]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	4618      	mov	r0, r3
 801317a:	370c      	adds	r7, #12
 801317c:	46bd      	mov	sp, r7
 801317e:	bd90      	pop	{r4, r7, pc}
 8013180:	e0002000 	.word	0xe0002000
 8013184:	40023008 	.word	0x40023008
 8013188:	40023000 	.word	0x40023000
 801318c:	f407a5c2 	.word	0xf407a5c2
 8013190:	b5e8b5cd 	.word	0xb5e8b5cd
 8013194:	2001d5ae 	.word	0x2001d5ae
 8013198:	2001d2a0 	.word	0x2001d2a0
 801319c:	2001d5cc 	.word	0x2001d5cc

080131a0 <GUI_ClearRectEx>:
 80131a0:	4603      	mov	r3, r0
 80131a2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80131a6:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80131aa:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80131ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80131b2:	f7ff bf35 	b.w	8013020 <GUI_ClearRect>

080131b6 <GUIPROP__FindChar>:
 80131b6:	b138      	cbz	r0, 80131c8 <GUIPROP__FindChar+0x12>
 80131b8:	8803      	ldrh	r3, [r0, #0]
 80131ba:	428b      	cmp	r3, r1
 80131bc:	d802      	bhi.n	80131c4 <GUIPROP__FindChar+0xe>
 80131be:	8843      	ldrh	r3, [r0, #2]
 80131c0:	428b      	cmp	r3, r1
 80131c2:	d201      	bcs.n	80131c8 <GUIPROP__FindChar+0x12>
 80131c4:	6880      	ldr	r0, [r0, #8]
 80131c6:	e7f6      	b.n	80131b6 <GUIPROP__FindChar>
 80131c8:	4770      	bx	lr
	...

080131cc <GUIPROP_DispChar>:
 80131cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131d0:	4c38      	ldr	r4, [pc, #224]	; (80132b4 <GUIPROP_DispChar+0xe8>)
 80131d2:	6823      	ldr	r3, [r4, #0]
 80131d4:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 80131d8:	69db      	ldr	r3, [r3, #28]
 80131da:	4605      	mov	r5, r0
 80131dc:	b089      	sub	sp, #36	; 0x24
 80131de:	69d8      	ldr	r0, [r3, #28]
 80131e0:	4629      	mov	r1, r5
 80131e2:	f7ff ffe8 	bl	80131b6 <GUIPROP__FindChar>
 80131e6:	2800      	cmp	r0, #0
 80131e8:	d061      	beq.n	80132ae <GUIPROP_DispChar+0xe2>
 80131ea:	f8b0 8000 	ldrh.w	r8, [r0]
 80131ee:	6847      	ldr	r7, [r0, #4]
 80131f0:	ebc8 0805 	rsb	r8, r8, r5
 80131f4:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 80131f8:	4648      	mov	r0, r9
 80131fa:	f896 b002 	ldrb.w	fp, [r6, #2]
 80131fe:	f7fd f8fd 	bl	80103fc <LCD_SetDrawMode>
 8013202:	6825      	ldr	r5, [r4, #0]
 8013204:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 8013208:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 801320c:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 8013210:	f89e c01a 	ldrb.w	ip, [lr, #26]
 8013214:	f89e 3018 	ldrb.w	r3, [lr, #24]
 8013218:	9306      	str	r3, [sp, #24]
 801321a:	4682      	mov	sl, r0
 801321c:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 8013220:	f8cd c000 	str.w	ip, [sp]
 8013224:	f89e e01b 	ldrb.w	lr, [lr, #27]
 8013228:	f8cd e004 	str.w	lr, [sp, #4]
 801322c:	f04f 0e01 	mov.w	lr, #1
 8013230:	f8cd b00c 	str.w	fp, [sp, #12]
 8013234:	f8cd e008 	str.w	lr, [sp, #8]
 8013238:	6873      	ldr	r3, [r6, #4]
 801323a:	9304      	str	r3, [sp, #16]
 801323c:	6bad      	ldr	r5, [r5, #56]	; 0x38
 801323e:	9b06      	ldr	r3, [sp, #24]
 8013240:	9505      	str	r5, [sp, #20]
 8013242:	f7fd fa65 	bl	8010710 <LCD_DrawBitmap>
 8013246:	6823      	ldr	r3, [r4, #0]
 8013248:	69da      	ldr	r2, [r3, #28]
 801324a:	f892 b019 	ldrb.w	fp, [r2, #25]
 801324e:	7e11      	ldrb	r1, [r2, #24]
 8013250:	458b      	cmp	fp, r1
 8013252:	d920      	bls.n	8013296 <GUIPROP_DispChar+0xca>
 8013254:	f1b9 0f02 	cmp.w	r9, #2
 8013258:	7ed5      	ldrb	r5, [r2, #27]
 801325a:	d01c      	beq.n	8013296 <GUIPROP_DispChar+0xca>
 801325c:	9107      	str	r1, [sp, #28]
 801325e:	f006 f9b7 	bl	80195d0 <GUI_GetColor>
 8013262:	4681      	mov	r9, r0
 8013264:	f006 f9ad 	bl	80195c2 <GUI_GetBkColor>
 8013268:	f7fe fe32 	bl	8011ed0 <GUI_SetColor>
 801326c:	6824      	ldr	r4, [r4, #0]
 801326e:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 8013272:	69e2      	ldr	r2, [r4, #28]
 8013274:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8013278:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801327c:	7ed2      	ldrb	r2, [r2, #27]
 801327e:	9907      	ldr	r1, [sp, #28]
 8013280:	fb07 0202 	mla	r2, r7, r2, r0
 8013284:	fb01 3105 	mla	r1, r1, r5, r3
 8013288:	fb0b 3305 	mla	r3, fp, r5, r3
 801328c:	f7fd f938 	bl	8010500 <LCD_FillRect>
 8013290:	4648      	mov	r0, r9
 8013292:	f7fe fe1d 	bl	8011ed0 <GUI_SetColor>
 8013296:	4650      	mov	r0, sl
 8013298:	f7fd f8b0 	bl	80103fc <LCD_SetDrawMode>
 801329c:	4b05      	ldr	r3, [pc, #20]	; (80132b4 <GUIPROP_DispChar+0xe8>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	69da      	ldr	r2, [r3, #28]
 80132a2:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80132a4:	7e90      	ldrb	r0, [r2, #26]
 80132a6:	7872      	ldrb	r2, [r6, #1]
 80132a8:	fb00 1202 	mla	r2, r0, r2, r1
 80132ac:	845a      	strh	r2, [r3, #34]	; 0x22
 80132ae:	b009      	add	sp, #36	; 0x24
 80132b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132b4:	20000110 	.word	0x20000110

080132b8 <GUIPROP_GetCharDistX>:
 80132b8:	4b0d      	ldr	r3, [pc, #52]	; (80132f0 <GUIPROP_GetCharDistX+0x38>)
 80132ba:	b570      	push	{r4, r5, r6, lr}
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	69dd      	ldr	r5, [r3, #28]
 80132c0:	4606      	mov	r6, r0
 80132c2:	460c      	mov	r4, r1
 80132c4:	69e8      	ldr	r0, [r5, #28]
 80132c6:	4631      	mov	r1, r6
 80132c8:	f7ff ff75 	bl	80131b6 <GUIPROP__FindChar>
 80132cc:	b170      	cbz	r0, 80132ec <GUIPROP_GetCharDistX+0x34>
 80132ce:	8803      	ldrh	r3, [r0, #0]
 80132d0:	6842      	ldr	r2, [r0, #4]
 80132d2:	1af6      	subs	r6, r6, r3
 80132d4:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 80132d8:	7858      	ldrb	r0, [r3, #1]
 80132da:	7eab      	ldrb	r3, [r5, #26]
 80132dc:	fb10 f003 	smulbb	r0, r0, r3
 80132e0:	b124      	cbz	r4, 80132ec <GUIPROP_GetCharDistX+0x34>
 80132e2:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 80132e6:	fb12 f303 	smulbb	r3, r2, r3
 80132ea:	6023      	str	r3, [r4, #0]
 80132ec:	bd70      	pop	{r4, r5, r6, pc}
 80132ee:	bf00      	nop
 80132f0:	20000110 	.word	0x20000110

080132f4 <GUIPROP_GetFontInfo>:
 80132f4:	2301      	movs	r3, #1
 80132f6:	800b      	strh	r3, [r1, #0]
 80132f8:	4770      	bx	lr

080132fa <GUIPROP_IsInFont>:
 80132fa:	b508      	push	{r3, lr}
 80132fc:	69c0      	ldr	r0, [r0, #28]
 80132fe:	f7ff ff5a 	bl	80131b6 <GUIPROP__FindChar>
 8013302:	3000      	adds	r0, #0
 8013304:	bf18      	it	ne
 8013306:	2001      	movne	r0, #1
 8013308:	bd08      	pop	{r3, pc}
	...

0801330c <GUIMONO_DispChar>:
 801330c:	4b52      	ldr	r3, [pc, #328]	; (8013458 <GUIMONO_DispChar+0x14c>)
 801330e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	69d9      	ldr	r1, [r3, #28]
 8013316:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 8013318:	69cc      	ldr	r4, [r1, #28]
 801331a:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 801331c:	89a2      	ldrh	r2, [r4, #12]
 801331e:	4290      	cmp	r0, r2
 8013320:	b08b      	sub	sp, #44	; 0x2c
 8013322:	d308      	bcc.n	8013336 <GUIMONO_DispChar+0x2a>
 8013324:	89e6      	ldrh	r6, [r4, #14]
 8013326:	4286      	cmp	r6, r0
 8013328:	d305      	bcc.n	8013336 <GUIMONO_DispChar+0x2a>
 801332a:	f8d4 9000 	ldr.w	r9, [r4]
 801332e:	1a82      	subs	r2, r0, r2
 8013330:	f04f 3bff 	mov.w	fp, #4294967295
 8013334:	e015      	b.n	8013362 <GUIMONO_DispChar+0x56>
 8013336:	68a2      	ldr	r2, [r4, #8]
 8013338:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801333c:	2a00      	cmp	r2, #0
 801333e:	f000 8081 	beq.w	8013444 <GUIMONO_DispChar+0x138>
 8013342:	8816      	ldrh	r6, [r2, #0]
 8013344:	42b0      	cmp	r0, r6
 8013346:	d37d      	bcc.n	8013444 <GUIMONO_DispChar+0x138>
 8013348:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 801334c:	4584      	cmp	ip, r0
 801334e:	d379      	bcc.n	8013444 <GUIMONO_DispChar+0x138>
 8013350:	6852      	ldr	r2, [r2, #4]
 8013352:	1b80      	subs	r0, r0, r6
 8013354:	b280      	uxth	r0, r0
 8013356:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 801335a:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 801335e:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 8013362:	1c50      	adds	r0, r2, #1
 8013364:	d06e      	beq.n	8013444 <GUIMONO_DispChar+0x138>
 8013366:	f891 8018 	ldrb.w	r8, [r1, #24]
 801336a:	7ca1      	ldrb	r1, [r4, #18]
 801336c:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 8013370:	7c26      	ldrb	r6, [r4, #16]
 8013372:	9206      	str	r2, [sp, #24]
 8013374:	fb18 f101 	smulbb	r1, r8, r1
 8013378:	9107      	str	r1, [sp, #28]
 801337a:	fa0f f18a 	sxth.w	r1, sl
 801337e:	4608      	mov	r0, r1
 8013380:	9108      	str	r1, [sp, #32]
 8013382:	f7fd f83b 	bl	80103fc <LCD_SetDrawMode>
 8013386:	4934      	ldr	r1, [pc, #208]	; (8013458 <GUIMONO_DispChar+0x14c>)
 8013388:	9009      	str	r0, [sp, #36]	; 0x24
 801338a:	680b      	ldr	r3, [r1, #0]
 801338c:	9a06      	ldr	r2, [sp, #24]
 801338e:	69d9      	ldr	r1, [r3, #28]
 8013390:	7e88      	ldrb	r0, [r1, #26]
 8013392:	9000      	str	r0, [sp, #0]
 8013394:	7ec9      	ldrb	r1, [r1, #27]
 8013396:	9101      	str	r1, [sp, #4]
 8013398:	2101      	movs	r1, #1
 801339a:	9102      	str	r1, [sp, #8]
 801339c:	7ca1      	ldrb	r1, [r4, #18]
 801339e:	9103      	str	r1, [sp, #12]
 80133a0:	9907      	ldr	r1, [sp, #28]
 80133a2:	fb01 9202 	mla	r2, r1, r2, r9
 80133a6:	9204      	str	r2, [sp, #16]
 80133a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133aa:	9305      	str	r3, [sp, #20]
 80133ac:	b23f      	sxth	r7, r7
 80133ae:	b22d      	sxth	r5, r5
 80133b0:	4638      	mov	r0, r7
 80133b2:	4629      	mov	r1, r5
 80133b4:	4632      	mov	r2, r6
 80133b6:	4643      	mov	r3, r8
 80133b8:	f7fd f9aa 	bl	8010710 <LCD_DrawBitmap>
 80133bc:	f1bb 3fff 	cmp.w	fp, #4294967295
 80133c0:	d01b      	beq.n	80133fa <GUIMONO_DispChar+0xee>
 80133c2:	f04a 0002 	orr.w	r0, sl, #2
 80133c6:	b200      	sxth	r0, r0
 80133c8:	f7fd f818 	bl	80103fc <LCD_SetDrawMode>
 80133cc:	4a22      	ldr	r2, [pc, #136]	; (8013458 <GUIMONO_DispChar+0x14c>)
 80133ce:	6813      	ldr	r3, [r2, #0]
 80133d0:	69da      	ldr	r2, [r3, #28]
 80133d2:	7e91      	ldrb	r1, [r2, #26]
 80133d4:	9100      	str	r1, [sp, #0]
 80133d6:	7ed2      	ldrb	r2, [r2, #27]
 80133d8:	9201      	str	r2, [sp, #4]
 80133da:	2101      	movs	r1, #1
 80133dc:	9102      	str	r1, [sp, #8]
 80133de:	9907      	ldr	r1, [sp, #28]
 80133e0:	7ca2      	ldrb	r2, [r4, #18]
 80133e2:	9203      	str	r2, [sp, #12]
 80133e4:	fb01 920b 	mla	r2, r1, fp, r9
 80133e8:	9204      	str	r2, [sp, #16]
 80133ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133ec:	9305      	str	r3, [sp, #20]
 80133ee:	4638      	mov	r0, r7
 80133f0:	4629      	mov	r1, r5
 80133f2:	4632      	mov	r2, r6
 80133f4:	4643      	mov	r3, r8
 80133f6:	f7fd f98b 	bl	8010710 <LCD_DrawBitmap>
 80133fa:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8013458 <GUIMONO_DispChar+0x14c>
 80133fe:	f8d8 3000 	ldr.w	r3, [r8]
 8013402:	69db      	ldr	r3, [r3, #28]
 8013404:	7e5a      	ldrb	r2, [r3, #25]
 8013406:	7e1b      	ldrb	r3, [r3, #24]
 8013408:	429a      	cmp	r2, r3
 801340a:	d917      	bls.n	801343c <GUIMONO_DispChar+0x130>
 801340c:	9a08      	ldr	r2, [sp, #32]
 801340e:	2a02      	cmp	r2, #2
 8013410:	d014      	beq.n	801343c <GUIMONO_DispChar+0x130>
 8013412:	f08a 0004 	eor.w	r0, sl, #4
 8013416:	b200      	sxth	r0, r0
 8013418:	f7fc fff0 	bl	80103fc <LCD_SetDrawMode>
 801341c:	f8d8 3000 	ldr.w	r3, [r8]
 8013420:	69db      	ldr	r3, [r3, #28]
 8013422:	f893 e018 	ldrb.w	lr, [r3, #24]
 8013426:	7ed9      	ldrb	r1, [r3, #27]
 8013428:	7e9a      	ldrb	r2, [r3, #26]
 801342a:	7e5b      	ldrb	r3, [r3, #25]
 801342c:	4638      	mov	r0, r7
 801342e:	fb0e 5101 	mla	r1, lr, r1, r5
 8013432:	fb06 7202 	mla	r2, r6, r2, r7
 8013436:	442b      	add	r3, r5
 8013438:	f7fd f862 	bl	8010500 <LCD_FillRect>
 801343c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801343e:	b2d8      	uxtb	r0, r3
 8013440:	f7fc ffdc 	bl	80103fc <LCD_SetDrawMode>
 8013444:	4b04      	ldr	r3, [pc, #16]	; (8013458 <GUIMONO_DispChar+0x14c>)
 8013446:	7c61      	ldrb	r1, [r4, #17]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801344c:	440a      	add	r2, r1
 801344e:	845a      	strh	r2, [r3, #34]	; 0x22
 8013450:	b00b      	add	sp, #44	; 0x2c
 8013452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013456:	bf00      	nop
 8013458:	20000110 	.word	0x20000110

0801345c <GUIMONO_GetCharDistX>:
 801345c:	4b04      	ldr	r3, [pc, #16]	; (8013470 <GUIMONO_GetCharDistX+0x14>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	69db      	ldr	r3, [r3, #28]
 8013462:	69db      	ldr	r3, [r3, #28]
 8013464:	b109      	cbz	r1, 801346a <GUIMONO_GetCharDistX+0xe>
 8013466:	7c1a      	ldrb	r2, [r3, #16]
 8013468:	600a      	str	r2, [r1, #0]
 801346a:	7c58      	ldrb	r0, [r3, #17]
 801346c:	4770      	bx	lr
 801346e:	bf00      	nop
 8013470:	20000110 	.word	0x20000110

08013474 <GUIMONO_GetFontInfo>:
 8013474:	2302      	movs	r3, #2
 8013476:	800b      	strh	r3, [r1, #0]
 8013478:	4770      	bx	lr

0801347a <GUIMONO_IsInFont>:
 801347a:	69c3      	ldr	r3, [r0, #28]
 801347c:	899a      	ldrh	r2, [r3, #12]
 801347e:	428a      	cmp	r2, r1
 8013480:	d802      	bhi.n	8013488 <GUIMONO_IsInFont+0xe>
 8013482:	89da      	ldrh	r2, [r3, #14]
 8013484:	428a      	cmp	r2, r1
 8013486:	d20f      	bcs.n	80134a8 <GUIMONO_IsInFont+0x2e>
 8013488:	6898      	ldr	r0, [r3, #8]
 801348a:	b180      	cbz	r0, 80134ae <GUIMONO_IsInFont+0x34>
 801348c:	8803      	ldrh	r3, [r0, #0]
 801348e:	4299      	cmp	r1, r3
 8013490:	d30c      	bcc.n	80134ac <GUIMONO_IsInFont+0x32>
 8013492:	8842      	ldrh	r2, [r0, #2]
 8013494:	428a      	cmp	r2, r1
 8013496:	d309      	bcc.n	80134ac <GUIMONO_IsInFont+0x32>
 8013498:	1ac9      	subs	r1, r1, r3
 801349a:	6842      	ldr	r2, [r0, #4]
 801349c:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 80134a0:	43c0      	mvns	r0, r0
 80134a2:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80134a6:	4770      	bx	lr
 80134a8:	2001      	movs	r0, #1
 80134aa:	4770      	bx	lr
 80134ac:	2000      	movs	r0, #0
 80134ae:	4770      	bx	lr

080134b0 <_Log2VisBuffered>:
 80134b0:	4770      	bx	lr
	...

080134b4 <_DispLine>:
 80134b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80134b6:	4615      	mov	r5, r2
 80134b8:	ab02      	add	r3, sp, #8
 80134ba:	4a1a      	ldr	r2, [pc, #104]	; (8013524 <_DispLine+0x70>)
 80134bc:	f843 1d08 	str.w	r1, [r3, #-8]!
 80134c0:	9001      	str	r0, [sp, #4]
 80134c2:	6812      	ldr	r2, [r2, #0]
 80134c4:	4c18      	ldr	r4, [pc, #96]	; (8013528 <_DispLine+0x74>)
 80134c6:	4669      	mov	r1, sp
 80134c8:	4790      	blx	r2
 80134ca:	6823      	ldr	r3, [r4, #0]
 80134cc:	9001      	str	r0, [sp, #4]
 80134ce:	6958      	ldr	r0, [r3, #20]
 80134d0:	b958      	cbnz	r0, 80134ea <_DispLine+0x36>
 80134d2:	2001      	movs	r0, #1
 80134d4:	f7fd fc08 	bl	8010ce8 <GUI__ManageCache>
 80134d8:	6823      	ldr	r3, [r4, #0]
 80134da:	69db      	ldr	r3, [r3, #28]
 80134dc:	695b      	ldr	r3, [r3, #20]
 80134de:	b1bb      	cbz	r3, 8013510 <_DispLine+0x5c>
 80134e0:	689b      	ldr	r3, [r3, #8]
 80134e2:	9801      	ldr	r0, [sp, #4]
 80134e4:	9900      	ldr	r1, [sp, #0]
 80134e6:	4798      	blx	r3
 80134e8:	e017      	b.n	801351a <_DispLine+0x66>
 80134ea:	4629      	mov	r1, r5
 80134ec:	f7fe fd52 	bl	8011f94 <GUI_RectsIntersect>
 80134f0:	2800      	cmp	r0, #0
 80134f2:	d1ee      	bne.n	80134d2 <_DispLine+0x1e>
 80134f4:	e014      	b.n	8013520 <_DispLine+0x6c>
 80134f6:	a801      	add	r0, sp, #4
 80134f8:	f004 faae 	bl	8017a58 <GUI_UC__GetCharCodeInc>
 80134fc:	6823      	ldr	r3, [r4, #0]
 80134fe:	69db      	ldr	r3, [r3, #28]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	4605      	mov	r5, r0
 8013504:	4798      	blx	r3
 8013506:	4b09      	ldr	r3, [pc, #36]	; (801352c <_DispLine+0x78>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	b10b      	cbz	r3, 8013510 <_DispLine+0x5c>
 801350c:	4628      	mov	r0, r5
 801350e:	4798      	blx	r3
 8013510:	9b00      	ldr	r3, [sp, #0]
 8013512:	3b01      	subs	r3, #1
 8013514:	2b00      	cmp	r3, #0
 8013516:	9300      	str	r3, [sp, #0]
 8013518:	daed      	bge.n	80134f6 <_DispLine+0x42>
 801351a:	2000      	movs	r0, #0
 801351c:	f7fd fbe4 	bl	8010ce8 <GUI__ManageCache>
 8013520:	b003      	add	sp, #12
 8013522:	bd30      	pop	{r4, r5, pc}
 8013524:	2000011c 	.word	0x2000011c
 8013528:	20000110 	.word	0x20000110
 801352c:	2001d5c8 	.word	0x2001d5c8

08013530 <GUI__GetLineNumChars>:
 8013530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013532:	460d      	mov	r5, r1
 8013534:	9001      	str	r0, [sp, #4]
 8013536:	4604      	mov	r4, r0
 8013538:	b198      	cbz	r0, 8013562 <GUI__GetLineNumChars+0x32>
 801353a:	4b0b      	ldr	r3, [pc, #44]	; (8013568 <GUI__GetLineNumChars+0x38>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	69db      	ldr	r3, [r3, #28]
 8013540:	695b      	ldr	r3, [r3, #20]
 8013542:	b10b      	cbz	r3, 8013548 <GUI__GetLineNumChars+0x18>
 8013544:	685b      	ldr	r3, [r3, #4]
 8013546:	b90b      	cbnz	r3, 801354c <GUI__GetLineNumChars+0x1c>
 8013548:	2400      	movs	r4, #0
 801354a:	e008      	b.n	801355e <GUI__GetLineNumChars+0x2e>
 801354c:	4798      	blx	r3
 801354e:	e009      	b.n	8013564 <GUI__GetLineNumChars+0x34>
 8013550:	a801      	add	r0, sp, #4
 8013552:	f004 fa81 	bl	8017a58 <GUI_UC__GetCharCodeInc>
 8013556:	b120      	cbz	r0, 8013562 <GUI__GetLineNumChars+0x32>
 8013558:	280a      	cmp	r0, #10
 801355a:	d002      	beq.n	8013562 <GUI__GetLineNumChars+0x32>
 801355c:	3401      	adds	r4, #1
 801355e:	42ac      	cmp	r4, r5
 8013560:	dbf6      	blt.n	8013550 <GUI__GetLineNumChars+0x20>
 8013562:	4620      	mov	r0, r4
 8013564:	b003      	add	sp, #12
 8013566:	bd30      	pop	{r4, r5, pc}
 8013568:	20000110 	.word	0x20000110

0801356c <GUI__GetOverlap>:
 801356c:	b513      	push	{r0, r1, r4, lr}
 801356e:	a902      	add	r1, sp, #8
 8013570:	2400      	movs	r4, #0
 8013572:	f841 4d04 	str.w	r4, [r1, #-4]!
 8013576:	f000 f8b7 	bl	80136e8 <GUI_GetCharDistXEx>
 801357a:	9b01      	ldr	r3, [sp, #4]
 801357c:	4283      	cmp	r3, r0
 801357e:	bfcc      	ite	gt
 8013580:	ebc0 0003 	rsbgt	r0, r0, r3
 8013584:	4620      	movle	r0, r4
 8013586:	b002      	add	sp, #8
 8013588:	bd10      	pop	{r4, pc}
	...

0801358c <GUI__GetLineDistX>:
 801358c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801358e:	4a15      	ldr	r2, [pc, #84]	; (80135e4 <GUI__GetLineDistX+0x58>)
 8013590:	9001      	str	r0, [sp, #4]
 8013592:	ab02      	add	r3, sp, #8
 8013594:	6812      	ldr	r2, [r2, #0]
 8013596:	f843 1d08 	str.w	r1, [r3, #-8]!
 801359a:	4669      	mov	r1, sp
 801359c:	4790      	blx	r2
 801359e:	9001      	str	r0, [sp, #4]
 80135a0:	b1f0      	cbz	r0, 80135e0 <GUI__GetLineDistX+0x54>
 80135a2:	4b11      	ldr	r3, [pc, #68]	; (80135e8 <GUI__GetLineDistX+0x5c>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	69db      	ldr	r3, [r3, #28]
 80135a8:	695b      	ldr	r3, [r3, #20]
 80135aa:	b10b      	cbz	r3, 80135b0 <GUI__GetLineDistX+0x24>
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	b913      	cbnz	r3, 80135b6 <GUI__GetLineDistX+0x2a>
 80135b0:	2500      	movs	r5, #0
 80135b2:	462c      	mov	r4, r5
 80135b4:	e002      	b.n	80135bc <GUI__GetLineDistX+0x30>
 80135b6:	9900      	ldr	r1, [sp, #0]
 80135b8:	4798      	blx	r3
 80135ba:	e011      	b.n	80135e0 <GUI__GetLineDistX+0x54>
 80135bc:	9b00      	ldr	r3, [sp, #0]
 80135be:	3b01      	subs	r3, #1
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	9300      	str	r3, [sp, #0]
 80135c4:	db07      	blt.n	80135d6 <GUI__GetLineDistX+0x4a>
 80135c6:	a801      	add	r0, sp, #4
 80135c8:	f004 fa46 	bl	8017a58 <GUI_UC__GetCharCodeInc>
 80135cc:	4605      	mov	r5, r0
 80135ce:	f000 f881 	bl	80136d4 <GUI_GetCharDistX>
 80135d2:	4404      	add	r4, r0
 80135d4:	e7f2      	b.n	80135bc <GUI__GetLineDistX+0x30>
 80135d6:	4628      	mov	r0, r5
 80135d8:	f7ff ffc8 	bl	801356c <GUI__GetOverlap>
 80135dc:	4420      	add	r0, r4
 80135de:	e7ff      	b.n	80135e0 <GUI__GetLineDistX+0x54>
 80135e0:	b003      	add	sp, #12
 80135e2:	bd30      	pop	{r4, r5, pc}
 80135e4:	2000011c 	.word	0x2000011c
 80135e8:	20000110 	.word	0x20000110

080135ec <GUI__DispLine>:
 80135ec:	4b27      	ldr	r3, [pc, #156]	; (801368c <GUI__DispLine+0xa0>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80135f2:	4605      	mov	r5, r0
 80135f4:	460c      	mov	r4, r1
 80135f6:	b163      	cbz	r3, 8013612 <GUI__DispLine+0x26>
 80135f8:	2000      	movs	r0, #0
 80135fa:	f7fa f991 	bl	800d920 <WM__InitIVRSearch>
 80135fe:	2800      	cmp	r0, #0
 8013600:	d041      	beq.n	8013686 <GUI__DispLine+0x9a>
 8013602:	4628      	mov	r0, r5
 8013604:	4621      	mov	r1, r4
 8013606:	466a      	mov	r2, sp
 8013608:	f7ff ff54 	bl	80134b4 <_DispLine>
 801360c:	f7fa f8c6 	bl	800d79c <WM__GetNextIVR>
 8013610:	e7f5      	b.n	80135fe <GUI__DispLine+0x12>
 8013612:	6810      	ldr	r0, [r2, #0]
 8013614:	6851      	ldr	r1, [r2, #4]
 8013616:	4e1e      	ldr	r6, [pc, #120]	; (8013690 <GUI__DispLine+0xa4>)
 8013618:	466b      	mov	r3, sp
 801361a:	c303      	stmia	r3!, {r0, r1}
 801361c:	6833      	ldr	r3, [r6, #0]
 801361e:	f8bd 1000 	ldrh.w	r1, [sp]
 8013622:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8013626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801362a:	4411      	add	r1, r2
 801362c:	f8ad 1000 	strh.w	r1, [sp]
 8013630:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8013634:	4419      	add	r1, r3
 8013636:	f8ad 1002 	strh.w	r1, [sp, #2]
 801363a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801363e:	440a      	add	r2, r1
 8013640:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013644:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013648:	4668      	mov	r0, sp
 801364a:	4413      	add	r3, r2
 801364c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013650:	f7fa f966 	bl	800d920 <WM__InitIVRSearch>
 8013654:	6833      	ldr	r3, [r6, #0]
 8013656:	b940      	cbnz	r0, 801366a <GUI__DispLine+0x7e>
 8013658:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801365a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801365c:	1a8a      	subs	r2, r1, r2
 801365e:	845a      	strh	r2, [r3, #34]	; 0x22
 8013660:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8013662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013664:	1a8a      	subs	r2, r1, r2
 8013666:	849a      	strh	r2, [r3, #36]	; 0x24
 8013668:	e00d      	b.n	8013686 <GUI__DispLine+0x9a>
 801366a:	f8bd 2000 	ldrh.w	r2, [sp]
 801366e:	845a      	strh	r2, [r3, #34]	; 0x22
 8013670:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013674:	849a      	strh	r2, [r3, #36]	; 0x24
 8013676:	4628      	mov	r0, r5
 8013678:	4621      	mov	r1, r4
 801367a:	466a      	mov	r2, sp
 801367c:	f7ff ff1a 	bl	80134b4 <_DispLine>
 8013680:	f7fa f88c 	bl	800d79c <WM__GetNextIVR>
 8013684:	e7e6      	b.n	8013654 <GUI__DispLine+0x68>
 8013686:	b002      	add	sp, #8
 8013688:	bd70      	pop	{r4, r5, r6, pc}
 801368a:	bf00      	nop
 801368c:	2001d5b0 	.word	0x2001d5b0
 8013690:	20000110 	.word	0x20000110

08013694 <GUI_GetYAdjust>:
 8013694:	4b0a      	ldr	r3, [pc, #40]	; (80136c0 <GUI_GetYAdjust+0x2c>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801369a:	f002 020c 	and.w	r2, r2, #12
 801369e:	2a08      	cmp	r2, #8
 80136a0:	d007      	beq.n	80136b2 <GUI_GetYAdjust+0x1e>
 80136a2:	2a0c      	cmp	r2, #12
 80136a4:	d005      	beq.n	80136b2 <GUI_GetYAdjust+0x1e>
 80136a6:	2a04      	cmp	r2, #4
 80136a8:	d107      	bne.n	80136ba <GUI_GetYAdjust+0x26>
 80136aa:	69db      	ldr	r3, [r3, #28]
 80136ac:	7e18      	ldrb	r0, [r3, #24]
 80136ae:	3801      	subs	r0, #1
 80136b0:	4770      	bx	lr
 80136b2:	69db      	ldr	r3, [r3, #28]
 80136b4:	7e18      	ldrb	r0, [r3, #24]
 80136b6:	0840      	lsrs	r0, r0, #1
 80136b8:	4770      	bx	lr
 80136ba:	2000      	movs	r0, #0
 80136bc:	4770      	bx	lr
 80136be:	bf00      	nop
 80136c0:	20000110 	.word	0x20000110

080136c4 <GUI_GetFontDistY>:
 80136c4:	4b02      	ldr	r3, [pc, #8]	; (80136d0 <GUI_GetFontDistY+0xc>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	69db      	ldr	r3, [r3, #28]
 80136ca:	7e58      	ldrb	r0, [r3, #25]
 80136cc:	4770      	bx	lr
 80136ce:	bf00      	nop
 80136d0:	20000110 	.word	0x20000110

080136d4 <GUI_GetCharDistX>:
 80136d4:	b508      	push	{r3, lr}
 80136d6:	4b03      	ldr	r3, [pc, #12]	; (80136e4 <GUI_GetCharDistX+0x10>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	69db      	ldr	r3, [r3, #28]
 80136dc:	2100      	movs	r1, #0
 80136de:	685b      	ldr	r3, [r3, #4]
 80136e0:	4798      	blx	r3
 80136e2:	bd08      	pop	{r3, pc}
 80136e4:	20000110 	.word	0x20000110

080136e8 <GUI_GetCharDistXEx>:
 80136e8:	b508      	push	{r3, lr}
 80136ea:	4b03      	ldr	r3, [pc, #12]	; (80136f8 <GUI_GetCharDistXEx+0x10>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	69db      	ldr	r3, [r3, #28]
 80136f0:	685b      	ldr	r3, [r3, #4]
 80136f2:	4798      	blx	r3
 80136f4:	bd08      	pop	{r3, pc}
 80136f6:	bf00      	nop
 80136f8:	20000110 	.word	0x20000110

080136fc <_PushFreeBlock>:
 80136fc:	4b07      	ldr	r3, [pc, #28]	; (801371c <_PushFreeBlock+0x20>)
 80136fe:	685a      	ldr	r2, [r3, #4]
 8013700:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013702:	3201      	adds	r2, #1
 8013704:	b510      	push	{r4, lr}
 8013706:	605a      	str	r2, [r3, #4]
 8013708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801370a:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 801370e:	6061      	str	r1, [r4, #4]
 8013710:	2100      	movs	r1, #0
 8013712:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8013716:	6258      	str	r0, [r3, #36]	; 0x24
 8013718:	bd10      	pop	{r4, pc}
 801371a:	bf00      	nop
 801371c:	2001d5ec 	.word	0x2001d5ec

08013720 <_OnExit>:
 8013720:	b538      	push	{r3, r4, r5, lr}
 8013722:	4d0b      	ldr	r5, [pc, #44]	; (8013750 <_OnExit+0x30>)
 8013724:	2400      	movs	r4, #0
 8013726:	f105 0040 	add.w	r0, r5, #64	; 0x40
 801372a:	4621      	mov	r1, r4
 801372c:	2280      	movs	r2, #128	; 0x80
 801372e:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 8013732:	f7fd f9f2 	bl	8010b1a <GUI__memset>
 8013736:	4628      	mov	r0, r5
 8013738:	4621      	mov	r1, r4
 801373a:	22c0      	movs	r2, #192	; 0xc0
 801373c:	f7fd f9ed 	bl	8010b1a <GUI__memset>
 8013740:	4621      	mov	r1, r4
 8013742:	4804      	ldr	r0, [pc, #16]	; (8013754 <_OnExit+0x34>)
 8013744:	220c      	movs	r2, #12
 8013746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801374a:	f7fd b9e6 	b.w	8010b1a <GUI__memset>
 801374e:	bf00      	nop
 8013750:	2001d5ec 	.word	0x2001d5ec
 8013754:	2001d31c 	.word	0x2001d31c

08013758 <_RemoveFreeBlock>:
 8013758:	b510      	push	{r4, lr}
 801375a:	6842      	ldr	r2, [r0, #4]
 801375c:	230f      	movs	r3, #15
 801375e:	490d      	ldr	r1, [pc, #52]	; (8013794 <_RemoveFreeBlock+0x3c>)
 8013760:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 8013764:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8013766:	42a2      	cmp	r2, r4
 8013768:	d203      	bcs.n	8013772 <_RemoveFreeBlock+0x1a>
 801376a:	f113 33ff 	adds.w	r3, r3, #4294967295
 801376e:	d2f6      	bcs.n	801375e <_RemoveFreeBlock+0x6>
 8013770:	bd10      	pop	{r4, pc}
 8013772:	2b0f      	cmp	r3, #15
 8013774:	d80c      	bhi.n	8013790 <_RemoveFreeBlock+0x38>
 8013776:	680c      	ldr	r4, [r1, #0]
 8013778:	1aa2      	subs	r2, r4, r2
 801377a:	600a      	str	r2, [r1, #0]
 801377c:	6882      	ldr	r2, [r0, #8]
 801377e:	68c0      	ldr	r0, [r0, #12]
 8013780:	b102      	cbz	r2, 8013784 <_RemoveFreeBlock+0x2c>
 8013782:	6050      	str	r0, [r2, #4]
 8013784:	b108      	cbz	r0, 801378a <_RemoveFreeBlock+0x32>
 8013786:	6002      	str	r2, [r0, #0]
 8013788:	bd10      	pop	{r4, pc}
 801378a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801378e:	645a      	str	r2, [r3, #68]	; 0x44
 8013790:	bd10      	pop	{r4, pc}
 8013792:	bf00      	nop
 8013794:	2001d5ec 	.word	0x2001d5ec

08013798 <_AddFreeMemory>:
 8013798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801379a:	4e26      	ldr	r6, [pc, #152]	; (8013834 <_AddFreeMemory+0x9c>)
 801379c:	68f3      	ldr	r3, [r6, #12]
 801379e:	1e5a      	subs	r2, r3, #1
 80137a0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80137a2:	4605      	mov	r5, r0
 80137a4:	4413      	add	r3, r2
 80137a6:	1808      	adds	r0, r1, r0
 80137a8:	4298      	cmp	r0, r3
 80137aa:	460c      	mov	r4, r1
 80137ac:	d805      	bhi.n	80137ba <_AddFreeMemory+0x22>
 80137ae:	594b      	ldr	r3, [r1, r5]
 80137b0:	b91b      	cbnz	r3, 80137ba <_AddFreeMemory+0x22>
 80137b2:	6843      	ldr	r3, [r0, #4]
 80137b4:	441d      	add	r5, r3
 80137b6:	f7ff ffcf 	bl	8013758 <_RemoveFreeBlock>
 80137ba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80137bc:	429c      	cmp	r4, r3
 80137be:	d90a      	bls.n	80137d6 <_AddFreeMemory+0x3e>
 80137c0:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80137c4:	1be7      	subs	r7, r4, r7
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	b92b      	cbnz	r3, 80137d6 <_AddFreeMemory+0x3e>
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4638      	mov	r0, r7
 80137ce:	441d      	add	r5, r3
 80137d0:	f7ff ffc2 	bl	8013758 <_RemoveFreeBlock>
 80137d4:	463c      	mov	r4, r7
 80137d6:	230f      	movs	r3, #15
 80137d8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80137dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80137de:	4295      	cmp	r5, r2
 80137e0:	d203      	bcs.n	80137ea <_AddFreeMemory+0x52>
 80137e2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80137e6:	d2f7      	bcs.n	80137d8 <_AddFreeMemory+0x40>
 80137e8:	e022      	b.n	8013830 <_AddFreeMemory+0x98>
 80137ea:	2b0f      	cmp	r3, #15
 80137ec:	d820      	bhi.n	8013830 <_AddFreeMemory+0x98>
 80137ee:	3308      	adds	r3, #8
 80137f0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80137f4:	1961      	adds	r1, r4, r5
 80137f6:	6852      	ldr	r2, [r2, #4]
 80137f8:	60a2      	str	r2, [r4, #8]
 80137fa:	2000      	movs	r0, #0
 80137fc:	e884 0021 	stmia.w	r4, {r0, r5}
 8013800:	6124      	str	r4, [r4, #16]
 8013802:	f841 5c04 	str.w	r5, [r1, #-4]
 8013806:	f104 0108 	add.w	r1, r4, #8
 801380a:	b102      	cbz	r2, 801380e <_AddFreeMemory+0x76>
 801380c:	6051      	str	r1, [r2, #4]
 801380e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8013812:	60e0      	str	r0, [r4, #12]
 8013814:	6059      	str	r1, [r3, #4]
 8013816:	6833      	ldr	r3, [r6, #0]
 8013818:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 801381c:	4a05      	ldr	r2, [pc, #20]	; (8013834 <_AddFreeMemory+0x9c>)
 801381e:	442b      	add	r3, r5
 8013820:	6033      	str	r3, [r6, #0]
 8013822:	b929      	cbnz	r1, 8013830 <_AddFreeMemory+0x98>
 8013824:	68d1      	ldr	r1, [r2, #12]
 8013826:	1acb      	subs	r3, r1, r3
 8013828:	6891      	ldr	r1, [r2, #8]
 801382a:	4299      	cmp	r1, r3
 801382c:	bf38      	it	cc
 801382e:	6093      	strcc	r3, [r2, #8]
 8013830:	4628      	mov	r0, r5
 8013832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013834:	2001d5ec 	.word	0x2001d5ec

08013838 <_RemoveHoles>:
 8013838:	4b25      	ldr	r3, [pc, #148]	; (80138d0 <_RemoveHoles+0x98>)
 801383a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801383e:	68da      	ldr	r2, [r3, #12]
 8013840:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8013842:	3a01      	subs	r2, #1
 8013844:	4682      	mov	sl, r0
 8013846:	eb02 0904 	add.w	r9, r2, r4
 801384a:	469b      	mov	fp, r3
 801384c:	e894 0028 	ldmia.w	r4, {r3, r5}
 8013850:	2b00      	cmp	r3, #0
 8013852:	d133      	bne.n	80138bc <_RemoveHoles+0x84>
 8013854:	eb04 0805 	add.w	r8, r4, r5
 8013858:	45c8      	cmp	r8, r9
 801385a:	d22f      	bcs.n	80138bc <_RemoveHoles+0x84>
 801385c:	f854 c005 	ldr.w	ip, [r4, r5]
 8013860:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8013864:	f1bc 0f00 	cmp.w	ip, #0
 8013868:	d028      	beq.n	80138bc <_RemoveHoles+0x84>
 801386a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 801386e:	4f18      	ldr	r7, [pc, #96]	; (80138d0 <_RemoveHoles+0x98>)
 8013870:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 8013874:	2b01      	cmp	r3, #1
 8013876:	d121      	bne.n	80138bc <_RemoveHoles+0x84>
 8013878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801387a:	4620      	mov	r0, r4
 801387c:	e88d 1008 	stmia.w	sp, {r3, ip}
 8013880:	f7ff ff6a 	bl	8013758 <_RemoveFreeBlock>
 8013884:	f8d8 1000 	ldr.w	r1, [r8]
 8013888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801388a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801388e:	4620      	mov	r0, r4
 8013890:	6054      	str	r4, [r2, #4]
 8013892:	4641      	mov	r1, r8
 8013894:	4632      	mov	r2, r6
 8013896:	f006 ffa9 	bl	801a7ec <memmove>
 801389a:	e89d 1008 	ldmia.w	sp, {r3, ip}
 801389e:	459c      	cmp	ip, r3
 80138a0:	d102      	bne.n	80138a8 <_RemoveHoles+0x70>
 80138a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138a4:	1b5b      	subs	r3, r3, r5
 80138a6:	637b      	str	r3, [r7, #52]	; 0x34
 80138a8:	4628      	mov	r0, r5
 80138aa:	19a1      	adds	r1, r4, r6
 80138ac:	f7ff ff74 	bl	8013798 <_AddFreeMemory>
 80138b0:	f1ba 0f00 	cmp.w	sl, #0
 80138b4:	d001      	beq.n	80138ba <_RemoveHoles+0x82>
 80138b6:	4582      	cmp	sl, r0
 80138b8:	d905      	bls.n	80138c6 <_RemoveHoles+0x8e>
 80138ba:	4635      	mov	r5, r6
 80138bc:	442c      	add	r4, r5
 80138be:	454c      	cmp	r4, r9
 80138c0:	d3c4      	bcc.n	801384c <_RemoveHoles+0x14>
 80138c2:	2001      	movs	r0, #1
 80138c4:	e000      	b.n	80138c8 <_RemoveHoles+0x90>
 80138c6:	2000      	movs	r0, #0
 80138c8:	b003      	add	sp, #12
 80138ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ce:	bf00      	nop
 80138d0:	2001d5ec 	.word	0x2001d5ec

080138d4 <GUI_ALLOC_FreeFixedBlock>:
 80138d4:	b128      	cbz	r0, 80138e2 <GUI_ALLOC_FreeFixedBlock+0xe>
 80138d6:	4a03      	ldr	r2, [pc, #12]	; (80138e4 <GUI_ALLOC_FreeFixedBlock+0x10>)
 80138d8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80138da:	6003      	str	r3, [r0, #0]
 80138dc:	b103      	cbz	r3, 80138e0 <GUI_ALLOC_FreeFixedBlock+0xc>
 80138de:	6058      	str	r0, [r3, #4]
 80138e0:	63d0      	str	r0, [r2, #60]	; 0x3c
 80138e2:	4770      	bx	lr
 80138e4:	2001d5ec 	.word	0x2001d5ec

080138e8 <GUI_ALLOC_h2p>:
 80138e8:	b128      	cbz	r0, 80138f6 <GUI_ALLOC_h2p+0xe>
 80138ea:	4b03      	ldr	r3, [pc, #12]	; (80138f8 <GUI_ALLOC_h2p+0x10>)
 80138ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138ee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80138f2:	6840      	ldr	r0, [r0, #4]
 80138f4:	3008      	adds	r0, #8
 80138f6:	4770      	bx	lr
 80138f8:	2001d5ec 	.word	0x2001d5ec

080138fc <GUI_ALLOC_LockH>:
 80138fc:	4b05      	ldr	r3, [pc, #20]	; (8013914 <GUI_ALLOC_LockH+0x18>)
 80138fe:	69d9      	ldr	r1, [r3, #28]
 8013900:	3101      	adds	r1, #1
 8013902:	61d9      	str	r1, [r3, #28]
 8013904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013906:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 801390a:	3101      	adds	r1, #1
 801390c:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 8013910:	f7ff bfea 	b.w	80138e8 <GUI_ALLOC_h2p>
 8013914:	2001d5ec 	.word	0x2001d5ec

08013918 <GUI_ALLOC_UnlockH>:
 8013918:	b530      	push	{r4, r5, lr}
 801391a:	6802      	ldr	r2, [r0, #0]
 801391c:	4b09      	ldr	r3, [pc, #36]	; (8013944 <GUI_ALLOC_UnlockH+0x2c>)
 801391e:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8013922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013924:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 8013928:	2c01      	cmp	r4, #1
 801392a:	d903      	bls.n	8013934 <GUI_ALLOC_UnlockH+0x1c>
 801392c:	69dd      	ldr	r5, [r3, #28]
 801392e:	b10d      	cbz	r5, 8013934 <GUI_ALLOC_UnlockH+0x1c>
 8013930:	3d01      	subs	r5, #1
 8013932:	61dd      	str	r5, [r3, #28]
 8013934:	3c01      	subs	r4, #1
 8013936:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 801393a:	2300      	movs	r3, #0
 801393c:	6003      	str	r3, [r0, #0]
 801393e:	4618      	mov	r0, r3
 8013940:	bd30      	pop	{r4, r5, pc}
 8013942:	bf00      	nop
 8013944:	2001d5ec 	.word	0x2001d5ec

08013948 <GUI_ALLOC_AssignMemory>:
 8013948:	4b02      	ldr	r3, [pc, #8]	; (8013954 <GUI_ALLOC_AssignMemory+0xc>)
 801394a:	f021 0103 	bic.w	r1, r1, #3
 801394e:	6018      	str	r0, [r3, #0]
 8013950:	6059      	str	r1, [r3, #4]
 8013952:	4770      	bx	lr
 8013954:	2001d31c 	.word	0x2001d31c

08013958 <GUI_ALLOC_GetSize>:
 8013958:	b130      	cbz	r0, 8013968 <GUI_ALLOC_GetSize+0x10>
 801395a:	4b04      	ldr	r3, [pc, #16]	; (801396c <GUI_ALLOC_GetSize+0x14>)
 801395c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801395e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8013962:	6843      	ldr	r3, [r0, #4]
 8013964:	6858      	ldr	r0, [r3, #4]
 8013966:	380c      	subs	r0, #12
 8013968:	4770      	bx	lr
 801396a:	bf00      	nop
 801396c:	2001d5ec 	.word	0x2001d5ec

08013970 <GUI_ALLOC_Free>:
 8013970:	b510      	push	{r4, lr}
 8013972:	4604      	mov	r4, r0
 8013974:	b180      	cbz	r0, 8013998 <GUI_ALLOC_Free+0x28>
 8013976:	4b09      	ldr	r3, [pc, #36]	; (801399c <GUI_ALLOC_Free+0x2c>)
 8013978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801397a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 801397e:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8013982:	2b01      	cmp	r3, #1
 8013984:	d108      	bne.n	8013998 <GUI_ALLOC_Free+0x28>
 8013986:	6851      	ldr	r1, [r2, #4]
 8013988:	6848      	ldr	r0, [r1, #4]
 801398a:	f7ff ff05 	bl	8013798 <_AddFreeMemory>
 801398e:	4620      	mov	r0, r4
 8013990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013994:	f7ff beb2 	b.w	80136fc <_PushFreeBlock>
 8013998:	bd10      	pop	{r4, pc}
 801399a:	bf00      	nop
 801399c:	2001d5ec 	.word	0x2001d5ec

080139a0 <_EnlargeBlocks>:
 80139a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139a4:	4c22      	ldr	r4, [pc, #136]	; (8013a30 <_EnlargeBlocks+0x90>)
 80139a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80139a8:	b93b      	cbnz	r3, 80139ba <_EnlargeBlocks+0x1a>
 80139aa:	4b22      	ldr	r3, [pc, #136]	; (8013a34 <_EnlargeBlocks+0x94>)
 80139ac:	689d      	ldr	r5, [r3, #8]
 80139ae:	685b      	ldr	r3, [r3, #4]
 80139b0:	3508      	adds	r5, #8
 80139b2:	fbb3 f5f5 	udiv	r5, r3, r5
 80139b6:	3502      	adds	r5, #2
 80139b8:	e003      	b.n	80139c2 <_EnlargeBlocks+0x22>
 80139ba:	6923      	ldr	r3, [r4, #16]
 80139bc:	1d1d      	adds	r5, r3, #4
 80139be:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 80139c2:	00e8      	lsls	r0, r5, #3
 80139c4:	f000 f978 	bl	8013cb8 <_Alloc>
 80139c8:	4680      	mov	r8, r0
 80139ca:	b360      	cbz	r0, 8013a26 <_EnlargeBlocks+0x86>
 80139cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139ce:	6922      	ldr	r2, [r4, #16]
 80139d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80139d2:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 80139d6:	00d2      	lsls	r2, r2, #3
 80139d8:	685e      	ldr	r6, [r3, #4]
 80139da:	3608      	adds	r6, #8
 80139dc:	4630      	mov	r0, r6
 80139de:	f006 fef7 	bl	801a7d0 <memcpy>
 80139e2:	6922      	ldr	r2, [r4, #16]
 80139e4:	6366      	str	r6, [r4, #52]	; 0x34
 80139e6:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 80139ea:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 80139ee:	3104      	adds	r1, #4
 80139f0:	4613      	mov	r3, r2
 80139f2:	1e68      	subs	r0, r5, #1
 80139f4:	4283      	cmp	r3, r0
 80139f6:	f101 0108 	add.w	r1, r1, #8
 80139fa:	d203      	bcs.n	8013a04 <_EnlargeBlocks+0x64>
 80139fc:	3301      	adds	r3, #1
 80139fe:	f841 3c08 	str.w	r3, [r1, #-8]
 8013a02:	e7f6      	b.n	80139f2 <_EnlargeBlocks+0x52>
 8013a04:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8013a08:	2600      	movs	r6, #0
 8013a0a:	605e      	str	r6, [r3, #4]
 8013a0c:	6863      	ldr	r3, [r4, #4]
 8013a0e:	6262      	str	r2, [r4, #36]	; 0x24
 8013a10:	1a9b      	subs	r3, r3, r2
 8013a12:	442b      	add	r3, r5
 8013a14:	6063      	str	r3, [r4, #4]
 8013a16:	6125      	str	r5, [r4, #16]
 8013a18:	4638      	mov	r0, r7
 8013a1a:	b13f      	cbz	r7, 8013a2c <_EnlargeBlocks+0x8c>
 8013a1c:	f7ff ffa8 	bl	8013970 <GUI_ALLOC_Free>
 8013a20:	4630      	mov	r0, r6
 8013a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a26:	2001      	movs	r0, #1
 8013a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a30:	2001d5ec 	.word	0x2001d5ec
 8013a34:	2001d31c 	.word	0x2001d31c

08013a38 <_InitOnce>:
 8013a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a3a:	4e58      	ldr	r6, [pc, #352]	; (8013b9c <_InitOnce+0x164>)
 8013a3c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8013a40:	2900      	cmp	r1, #0
 8013a42:	f040 80aa 	bne.w	8013b9a <_InitOnce+0x162>
 8013a46:	4d56      	ldr	r5, [pc, #344]	; (8013ba0 <_InitOnce+0x168>)
 8013a48:	686a      	ldr	r2, [r5, #4]
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 8013a50:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8013a54:	bf28      	it	cs
 8013a56:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 8013a5a:	682b      	ldr	r3, [r5, #0]
 8013a5c:	0894      	lsrs	r4, r2, #2
 8013a5e:	2000      	movs	r0, #0
 8013a60:	42a0      	cmp	r0, r4
 8013a62:	d00c      	beq.n	8013a7e <_InitOnce+0x46>
 8013a64:	1847      	adds	r7, r0, r1
 8013a66:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8013a6a:	fbb7 fefe 	udiv	lr, r7, lr
 8013a6e:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8013a72:	ebce 0707 	rsb	r7, lr, r7
 8013a76:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8013a7a:	3001      	adds	r0, #1
 8013a7c:	e7f0      	b.n	8013a60 <_InitOnce+0x28>
 8013a7e:	2000      	movs	r0, #0
 8013a80:	42a0      	cmp	r0, r4
 8013a82:	d016      	beq.n	8013ab2 <_InitOnce+0x7a>
 8013a84:	1847      	adds	r7, r0, r1
 8013a86:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8013a8a:	fbb7 fefe 	udiv	lr, r7, lr
 8013a8e:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8013a92:	ebce 0e07 	rsb	lr, lr, r7
 8013a96:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8013a9a:	4577      	cmp	r7, lr
 8013a9c:	d007      	beq.n	8013aae <_InitOnce+0x76>
 8013a9e:	68aa      	ldr	r2, [r5, #8]
 8013aa0:	4b3f      	ldr	r3, [pc, #252]	; (8013ba0 <_InitOnce+0x168>)
 8013aa2:	2a00      	cmp	r2, #0
 8013aa4:	d155      	bne.n	8013b52 <_InitOnce+0x11a>
 8013aa6:	685a      	ldr	r2, [r3, #4]
 8013aa8:	0892      	lsrs	r2, r2, #2
 8013aaa:	609a      	str	r2, [r3, #8]
 8013aac:	e051      	b.n	8013b52 <_InitOnce+0x11a>
 8013aae:	3001      	adds	r0, #1
 8013ab0:	e7e6      	b.n	8013a80 <_InitOnce+0x48>
 8013ab2:	3101      	adds	r1, #1
 8013ab4:	2902      	cmp	r1, #2
 8013ab6:	d1d2      	bne.n	8013a5e <_InitOnce+0x26>
 8013ab8:	0854      	lsrs	r4, r2, #1
 8013aba:	2100      	movs	r1, #0
 8013abc:	2000      	movs	r0, #0
 8013abe:	42a0      	cmp	r0, r4
 8013ac0:	d00c      	beq.n	8013adc <_InitOnce+0xa4>
 8013ac2:	1847      	adds	r7, r0, r1
 8013ac4:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8013ac8:	fbb7 fefe 	udiv	lr, r7, lr
 8013acc:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8013ad0:	ebce 0707 	rsb	r7, lr, r7
 8013ad4:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 8013ad8:	3001      	adds	r0, #1
 8013ada:	e7f0      	b.n	8013abe <_InitOnce+0x86>
 8013adc:	2000      	movs	r0, #0
 8013ade:	42a0      	cmp	r0, r4
 8013ae0:	d00f      	beq.n	8013b02 <_InitOnce+0xca>
 8013ae2:	1847      	adds	r7, r0, r1
 8013ae4:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8013ae8:	fbb7 fefe 	udiv	lr, r7, lr
 8013aec:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8013af0:	ebce 0707 	rsb	r7, lr, r7
 8013af4:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 8013af8:	b2bf      	uxth	r7, r7
 8013afa:	45bc      	cmp	ip, r7
 8013afc:	d1cf      	bne.n	8013a9e <_InitOnce+0x66>
 8013afe:	3001      	adds	r0, #1
 8013b00:	e7ed      	b.n	8013ade <_InitOnce+0xa6>
 8013b02:	3101      	adds	r1, #1
 8013b04:	2902      	cmp	r1, #2
 8013b06:	d1d9      	bne.n	8013abc <_InitOnce+0x84>
 8013b08:	2100      	movs	r1, #0
 8013b0a:	2000      	movs	r0, #0
 8013b0c:	4290      	cmp	r0, r2
 8013b0e:	d007      	beq.n	8013b20 <_InitOnce+0xe8>
 8013b10:	1844      	adds	r4, r0, r1
 8013b12:	27ff      	movs	r7, #255	; 0xff
 8013b14:	fbb4 f7f7 	udiv	r7, r4, r7
 8013b18:	443c      	add	r4, r7
 8013b1a:	541c      	strb	r4, [r3, r0]
 8013b1c:	3001      	adds	r0, #1
 8013b1e:	e7f5      	b.n	8013b0c <_InitOnce+0xd4>
 8013b20:	2000      	movs	r0, #0
 8013b22:	4290      	cmp	r0, r2
 8013b24:	d00b      	beq.n	8013b3e <_InitOnce+0x106>
 8013b26:	1844      	adds	r4, r0, r1
 8013b28:	27ff      	movs	r7, #255	; 0xff
 8013b2a:	fbb4 f7f7 	udiv	r7, r4, r7
 8013b2e:	443c      	add	r4, r7
 8013b30:	5c1f      	ldrb	r7, [r3, r0]
 8013b32:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 8013b36:	42a7      	cmp	r7, r4
 8013b38:	d1b1      	bne.n	8013a9e <_InitOnce+0x66>
 8013b3a:	3001      	adds	r0, #1
 8013b3c:	e7f1      	b.n	8013b22 <_InitOnce+0xea>
 8013b3e:	3101      	adds	r1, #1
 8013b40:	2902      	cmp	r1, #2
 8013b42:	d1e2      	bne.n	8013b0a <_InitOnce+0xd2>
 8013b44:	2100      	movs	r1, #0
 8013b46:	4291      	cmp	r1, r2
 8013b48:	d0a9      	beq.n	8013a9e <_InitOnce+0x66>
 8013b4a:	2000      	movs	r0, #0
 8013b4c:	5458      	strb	r0, [r3, r1]
 8013b4e:	3101      	adds	r1, #1
 8013b50:	e7f9      	b.n	8013b46 <_InitOnce+0x10e>
 8013b52:	4814      	ldr	r0, [pc, #80]	; (8013ba4 <_InitOnce+0x16c>)
 8013b54:	4b14      	ldr	r3, [pc, #80]	; (8013ba8 <_InitOnce+0x170>)
 8013b56:	6003      	str	r3, [r0, #0]
 8013b58:	f7ff faa4 	bl	80130a4 <GUI__RegisterExit>
 8013b5c:	235a      	movs	r3, #90	; 0x5a
 8013b5e:	6233      	str	r3, [r6, #32]
 8013b60:	2300      	movs	r3, #0
 8013b62:	2110      	movs	r1, #16
 8013b64:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8013b68:	4099      	lsls	r1, r3
 8013b6a:	3301      	adds	r3, #1
 8013b6c:	2b10      	cmp	r3, #16
 8013b6e:	4c0b      	ldr	r4, [pc, #44]	; (8013b9c <_InitOnce+0x164>)
 8013b70:	6411      	str	r1, [r2, #64]	; 0x40
 8013b72:	d1f6      	bne.n	8013b62 <_InitOnce+0x12a>
 8013b74:	6868      	ldr	r0, [r5, #4]
 8013b76:	6829      	ldr	r1, [r5, #0]
 8013b78:	63a1      	str	r1, [r4, #56]	; 0x38
 8013b7a:	2302      	movs	r3, #2
 8013b7c:	6123      	str	r3, [r4, #16]
 8013b7e:	f1a0 0314 	sub.w	r3, r0, #20
 8013b82:	440b      	add	r3, r1
 8013b84:	2501      	movs	r5, #1
 8013b86:	6363      	str	r3, [r4, #52]	; 0x34
 8013b88:	60e0      	str	r0, [r4, #12]
 8013b8a:	605d      	str	r5, [r3, #4]
 8013b8c:	6265      	str	r5, [r4, #36]	; 0x24
 8013b8e:	6065      	str	r5, [r4, #4]
 8013b90:	f7ff fe02 	bl	8013798 <_AddFreeMemory>
 8013b94:	f7ff ff04 	bl	80139a0 <_EnlargeBlocks>
 8013b98:	6325      	str	r5, [r4, #48]	; 0x30
 8013b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b9c:	2001d5ec 	.word	0x2001d5ec
 8013ba0:	2001d31c 	.word	0x2001d31c
 8013ba4:	2001d328 	.word	0x2001d328
 8013ba8:	08013721 	.word	0x08013721

08013bac <GUI_ALLOC_GetFixedBlock>:
 8013bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bb0:	4605      	mov	r5, r0
 8013bb2:	4e26      	ldr	r6, [pc, #152]	; (8013c4c <GUI_ALLOC_GetFixedBlock+0xa0>)
 8013bb4:	3503      	adds	r5, #3
 8013bb6:	f7ff ff3f 	bl	8013a38 <_InitOnce>
 8013bba:	f025 0503 	bic.w	r5, r5, #3
 8013bbe:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8013bc0:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8013bc2:	3504      	adds	r5, #4
 8013bc4:	429d      	cmp	r5, r3
 8013bc6:	bf38      	it	cc
 8013bc8:	461d      	movcc	r5, r3
 8013bca:	4614      	mov	r4, r2
 8013bcc:	b12c      	cbz	r4, 8013bda <GUI_ALLOC_GetFixedBlock+0x2e>
 8013bce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013bd2:	42ab      	cmp	r3, r5
 8013bd4:	d02c      	beq.n	8013c30 <GUI_ALLOC_GetFixedBlock+0x84>
 8013bd6:	6824      	ldr	r4, [r4, #0]
 8013bd8:	e7f8      	b.n	8013bcc <GUI_ALLOC_GetFixedBlock+0x20>
 8013bda:	68f3      	ldr	r3, [r6, #12]
 8013bdc:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8013bde:	eb02 0803 	add.w	r8, r2, r3
 8013be2:	f858 7c04 	ldr.w	r7, [r8, #-4]
 8013be6:	ebc7 0708 	rsb	r7, r7, r8
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	b133      	cbz	r3, 8013bfc <GUI_ALLOC_GetFixedBlock+0x50>
 8013bee:	4620      	mov	r0, r4
 8013bf0:	f7ff fe22 	bl	8013838 <_RemoveHoles>
 8013bf4:	f858 7c04 	ldr.w	r7, [r8, #-4]
 8013bf8:	ebc7 0708 	rsb	r7, r7, r8
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	bb13      	cbnz	r3, 8013c46 <GUI_ALLOC_GetFixedBlock+0x9a>
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	42ab      	cmp	r3, r5
 8013c04:	db1f      	blt.n	8013c46 <GUI_ALLOC_GetFixedBlock+0x9a>
 8013c06:	4638      	mov	r0, r7
 8013c08:	1d1c      	adds	r4, r3, #4
 8013c0a:	f7ff fda5 	bl	8013758 <_RemoveFreeBlock>
 8013c0e:	68f3      	ldr	r3, [r6, #12]
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	1b5b      	subs	r3, r3, r5
 8013c14:	60f3      	str	r3, [r6, #12]
 8013c16:	6973      	ldr	r3, [r6, #20]
 8013c18:	1b64      	subs	r4, r4, r5
 8013c1a:	442b      	add	r3, r5
 8013c1c:	1b40      	subs	r0, r0, r5
 8013c1e:	443c      	add	r4, r7
 8013c20:	6173      	str	r3, [r6, #20]
 8013c22:	d002      	beq.n	8013c2a <GUI_ALLOC_GetFixedBlock+0x7e>
 8013c24:	4639      	mov	r1, r7
 8013c26:	f7ff fdb7 	bl	8013798 <_AddFreeMemory>
 8013c2a:	f844 5c04 	str.w	r5, [r4, #-4]
 8013c2e:	e00a      	b.n	8013c46 <GUI_ALLOC_GetFixedBlock+0x9a>
 8013c30:	6823      	ldr	r3, [r4, #0]
 8013c32:	b10b      	cbz	r3, 8013c38 <GUI_ALLOC_GetFixedBlock+0x8c>
 8013c34:	6861      	ldr	r1, [r4, #4]
 8013c36:	6059      	str	r1, [r3, #4]
 8013c38:	6861      	ldr	r1, [r4, #4]
 8013c3a:	b101      	cbz	r1, 8013c3e <GUI_ALLOC_GetFixedBlock+0x92>
 8013c3c:	600b      	str	r3, [r1, #0]
 8013c3e:	42a2      	cmp	r2, r4
 8013c40:	d101      	bne.n	8013c46 <GUI_ALLOC_GetFixedBlock+0x9a>
 8013c42:	6823      	ldr	r3, [r4, #0]
 8013c44:	63f3      	str	r3, [r6, #60]	; 0x3c
 8013c46:	4620      	mov	r0, r4
 8013c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c4c:	2001d5ec 	.word	0x2001d5ec

08013c50 <GUI_ALLOC_GetMaxSize>:
 8013c50:	b508      	push	{r3, lr}
 8013c52:	f7ff fef1 	bl	8013a38 <_InitOnce>
 8013c56:	2200      	movs	r2, #0
 8013c58:	4b0b      	ldr	r3, [pc, #44]	; (8013c88 <GUI_ALLOC_GetMaxSize+0x38>)
 8013c5a:	4413      	add	r3, r2
 8013c5c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013c60:	b113      	cbz	r3, 8013c68 <GUI_ALLOC_GetMaxSize+0x18>
 8013c62:	689b      	ldr	r3, [r3, #8]
 8013c64:	2000      	movs	r0, #0
 8013c66:	e00b      	b.n	8013c80 <GUI_ALLOC_GetMaxSize+0x30>
 8013c68:	3a08      	subs	r2, #8
 8013c6a:	f112 0f80 	cmn.w	r2, #128	; 0x80
 8013c6e:	d1f3      	bne.n	8013c58 <GUI_ALLOC_GetMaxSize+0x8>
 8013c70:	e7f8      	b.n	8013c64 <GUI_ALLOC_GetMaxSize+0x14>
 8013c72:	685a      	ldr	r2, [r3, #4]
 8013c74:	689b      	ldr	r3, [r3, #8]
 8013c76:	4290      	cmp	r0, r2
 8013c78:	bf38      	it	cc
 8013c7a:	4610      	movcc	r0, r2
 8013c7c:	b113      	cbz	r3, 8013c84 <GUI_ALLOC_GetMaxSize+0x34>
 8013c7e:	689b      	ldr	r3, [r3, #8]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d1f6      	bne.n	8013c72 <GUI_ALLOC_GetMaxSize+0x22>
 8013c84:	380c      	subs	r0, #12
 8013c86:	bd08      	pop	{r3, pc}
 8013c88:	2001d5ec 	.word	0x2001d5ec

08013c8c <GUI_ALLOC_RequestSize>:
 8013c8c:	b508      	push	{r3, lr}
 8013c8e:	f7ff ffdf 	bl	8013c50 <GUI_ALLOC_GetMaxSize>
 8013c92:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8013c96:	f04f 0364 	mov.w	r3, #100	; 0x64
 8013c9a:	4a06      	ldr	r2, [pc, #24]	; (8013cb4 <GUI_ALLOC_RequestSize+0x28>)
 8013c9c:	d904      	bls.n	8013ca8 <GUI_ALLOC_RequestSize+0x1c>
 8013c9e:	fb90 f0f3 	sdiv	r0, r0, r3
 8013ca2:	6a13      	ldr	r3, [r2, #32]
 8013ca4:	4358      	muls	r0, r3
 8013ca6:	bd08      	pop	{r3, pc}
 8013ca8:	6a12      	ldr	r2, [r2, #32]
 8013caa:	4350      	muls	r0, r2
 8013cac:	fbb0 f0f3 	udiv	r0, r0, r3
 8013cb0:	bd08      	pop	{r3, pc}
 8013cb2:	bf00      	nop
 8013cb4:	2001d5ec 	.word	0x2001d5ec

08013cb8 <_Alloc>:
 8013cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cbc:	4d38      	ldr	r5, [pc, #224]	; (8013da0 <_Alloc+0xe8>)
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	f7ff feba 	bl	8013a38 <_InitOnce>
 8013cc4:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 8013cc6:	682b      	ldr	r3, [r5, #0]
 8013cc8:	42bc      	cmp	r4, r7
 8013cca:	bf24      	itt	cs
 8013ccc:	1ce7      	addcs	r7, r4, #3
 8013cce:	f027 0703 	biccs.w	r7, r7, #3
 8013cd2:	370c      	adds	r7, #12
 8013cd4:	429f      	cmp	r7, r3
 8013cd6:	4c32      	ldr	r4, [pc, #200]	; (8013da0 <_Alloc+0xe8>)
 8013cd8:	d83e      	bhi.n	8013d58 <_Alloc+0xa0>
 8013cda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013cdc:	6862      	ldr	r2, [r4, #4]
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d90f      	bls.n	8013d02 <_Alloc+0x4a>
 8013ce2:	686b      	ldr	r3, [r5, #4]
 8013ce4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8013ce6:	3b01      	subs	r3, #1
 8013ce8:	606b      	str	r3, [r5, #4]
 8013cea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8013cec:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8013cf0:	eb03 0209 	add.w	r2, r3, r9
 8013cf4:	6852      	ldr	r2, [r2, #4]
 8013cf6:	626a      	str	r2, [r5, #36]	; 0x24
 8013cf8:	2201      	movs	r2, #1
 8013cfa:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 8013cfe:	b956      	cbnz	r6, 8013d16 <_Alloc+0x5e>
 8013d00:	e02a      	b.n	8013d58 <_Alloc+0xa0>
 8013d02:	3b01      	subs	r3, #1
 8013d04:	6323      	str	r3, [r4, #48]	; 0x30
 8013d06:	f7ff fe4b 	bl	80139a0 <_EnlargeBlocks>
 8013d0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013d0c:	3301      	adds	r3, #1
 8013d0e:	6323      	str	r3, [r4, #48]	; 0x30
 8013d10:	2800      	cmp	r0, #0
 8013d12:	d0e6      	beq.n	8013ce2 <_Alloc+0x2a>
 8013d14:	e020      	b.n	8013d58 <_Alloc+0xa0>
 8013d16:	230f      	movs	r3, #15
 8013d18:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8013d1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013d1e:	4297      	cmp	r7, r2
 8013d20:	d20c      	bcs.n	8013d3c <_Alloc+0x84>
 8013d22:	f113 33ff 	adds.w	r3, r3, #4294967295
 8013d26:	d2f7      	bcs.n	8013d18 <_Alloc+0x60>
 8013d28:	e008      	b.n	8013d3c <_Alloc+0x84>
 8013d2a:	6894      	ldr	r4, [r2, #8]
 8013d2c:	b12c      	cbz	r4, 8013d3a <_Alloc+0x82>
 8013d2e:	6862      	ldr	r2, [r4, #4]
 8013d30:	4297      	cmp	r7, r2
 8013d32:	d914      	bls.n	8013d5e <_Alloc+0xa6>
 8013d34:	68a2      	ldr	r2, [r4, #8]
 8013d36:	2a00      	cmp	r2, #0
 8013d38:	d1f7      	bne.n	8013d2a <_Alloc+0x72>
 8013d3a:	3301      	adds	r3, #1
 8013d3c:	2b0f      	cmp	r3, #15
 8013d3e:	d803      	bhi.n	8013d48 <_Alloc+0x90>
 8013d40:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8013d44:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8013d46:	e7f6      	b.n	8013d36 <_Alloc+0x7e>
 8013d48:	4638      	mov	r0, r7
 8013d4a:	f7ff fd75 	bl	8013838 <_RemoveHoles>
 8013d4e:	2800      	cmp	r0, #0
 8013d50:	d0e1      	beq.n	8013d16 <_Alloc+0x5e>
 8013d52:	4630      	mov	r0, r6
 8013d54:	f7ff fcd2 	bl	80136fc <_PushFreeBlock>
 8013d58:	2000      	movs	r0, #0
 8013d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d5e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013d62:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8013d64:	ebc7 0208 	rsb	r2, r7, r8
 8013d68:	330c      	adds	r3, #12
 8013d6a:	4620      	mov	r0, r4
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	bf38      	it	cc
 8013d70:	4647      	movcc	r7, r8
 8013d72:	f7ff fcf1 	bl	8013758 <_RemoveFreeBlock>
 8013d76:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8013d78:	444b      	add	r3, r9
 8013d7a:	19e1      	adds	r1, r4, r7
 8013d7c:	605c      	str	r4, [r3, #4]
 8013d7e:	45b8      	cmp	r8, r7
 8013d80:	f04f 0300 	mov.w	r3, #0
 8013d84:	e884 00c0 	stmia.w	r4, {r6, r7}
 8013d88:	60a3      	str	r3, [r4, #8]
 8013d8a:	6124      	str	r4, [r4, #16]
 8013d8c:	f841 7c04 	str.w	r7, [r1, #-4]
 8013d90:	dd03      	ble.n	8013d9a <_Alloc+0xe2>
 8013d92:	ebc7 0008 	rsb	r0, r7, r8
 8013d96:	f7ff fcff 	bl	8013798 <_AddFreeMemory>
 8013d9a:	4630      	mov	r0, r6
 8013d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013da0:	2001d5ec 	.word	0x2001d5ec

08013da4 <GUI_ALLOC_AllocNoInit>:
 8013da4:	b108      	cbz	r0, 8013daa <GUI_ALLOC_AllocNoInit+0x6>
 8013da6:	f7ff bf87 	b.w	8013cb8 <_Alloc>
 8013daa:	4770      	bx	lr

08013dac <GUI_ALLOC_FreePtr>:
 8013dac:	b510      	push	{r4, lr}
 8013dae:	4604      	mov	r4, r0
 8013db0:	6800      	ldr	r0, [r0, #0]
 8013db2:	f7ff fddd 	bl	8013970 <GUI_ALLOC_Free>
 8013db6:	2300      	movs	r3, #0
 8013db8:	6023      	str	r3, [r4, #0]
 8013dba:	bd10      	pop	{r4, pc}

08013dbc <GUI_ALLOC_FreePtrArray>:
 8013dbc:	b570      	push	{r4, r5, r6, lr}
 8013dbe:	4605      	mov	r5, r0
 8013dc0:	460e      	mov	r6, r1
 8013dc2:	2400      	movs	r4, #0
 8013dc4:	42b4      	cmp	r4, r6
 8013dc6:	da05      	bge.n	8013dd4 <GUI_ALLOC_FreePtrArray+0x18>
 8013dc8:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8013dcc:	f7ff ffee 	bl	8013dac <GUI_ALLOC_FreePtr>
 8013dd0:	3401      	adds	r4, #1
 8013dd2:	e7f7      	b.n	8013dc4 <GUI_ALLOC_FreePtrArray+0x8>
 8013dd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08013dd8 <GUI_Long2Len>:
 8013dd8:	b510      	push	{r4, lr}
 8013dda:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 8013dde:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 8013de2:	2200      	movs	r2, #0
 8013de4:	1c53      	adds	r3, r2, #1
 8013de6:	2b0a      	cmp	r3, #10
 8013de8:	d006      	beq.n	8013df8 <GUI_Long2Len+0x20>
 8013dea:	4c06      	ldr	r4, [pc, #24]	; (8013e04 <GUI_Long2Len+0x2c>)
 8013dec:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8013df0:	42a1      	cmp	r1, r4
 8013df2:	d301      	bcc.n	8013df8 <GUI_Long2Len+0x20>
 8013df4:	461a      	mov	r2, r3
 8013df6:	e7f5      	b.n	8013de4 <GUI_Long2Len+0xc>
 8013df8:	2800      	cmp	r0, #0
 8013dfa:	bfb8      	it	lt
 8013dfc:	1c93      	addlt	r3, r2, #2
 8013dfe:	4618      	mov	r0, r3
 8013e00:	bd10      	pop	{r4, pc}
 8013e02:	bf00      	nop
 8013e04:	08020ba8 	.word	0x08020ba8

08013e08 <GUI_AddSign>:
 8013e08:	2800      	cmp	r0, #0
 8013e0a:	dd07      	ble.n	8013e1c <GUI_AddSign+0x14>
 8013e0c:	680b      	ldr	r3, [r1, #0]
 8013e0e:	1c5a      	adds	r2, r3, #1
 8013e10:	600a      	str	r2, [r1, #0]
 8013e12:	222b      	movs	r2, #43	; 0x2b
 8013e14:	701a      	strb	r2, [r3, #0]
 8013e16:	680b      	ldr	r3, [r1, #0]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	701a      	strb	r2, [r3, #0]
 8013e1c:	4770      	bx	lr
	...

08013e20 <GUI_AddDecShift>:
 8013e20:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8013e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e26:	681c      	ldr	r4, [r3, #0]
 8013e28:	d109      	bne.n	8013e3e <GUI_AddDecShift+0x1e>
 8013e2a:	1c60      	adds	r0, r4, #1
 8013e2c:	6018      	str	r0, [r3, #0]
 8013e2e:	3901      	subs	r1, #1
 8013e30:	202d      	movs	r0, #45	; 0x2d
 8013e32:	7020      	strb	r0, [r4, #0]
 8013e34:	b2c9      	uxtb	r1, r1
 8013e36:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013e3a:	2601      	movs	r6, #1
 8013e3c:	e00c      	b.n	8013e58 <GUI_AddDecShift+0x38>
 8013e3e:	2800      	cmp	r0, #0
 8013e40:	da06      	bge.n	8013e50 <GUI_AddDecShift+0x30>
 8013e42:	1c65      	adds	r5, r4, #1
 8013e44:	601d      	str	r5, [r3, #0]
 8013e46:	252d      	movs	r5, #45	; 0x2d
 8013e48:	7025      	strb	r5, [r4, #0]
 8013e4a:	4240      	negs	r0, r0
 8013e4c:	2401      	movs	r4, #1
 8013e4e:	e000      	b.n	8013e52 <GUI_AddDecShift+0x32>
 8013e50:	2400      	movs	r4, #0
 8013e52:	1b09      	subs	r1, r1, r4
 8013e54:	b2c9      	uxtb	r1, r1
 8013e56:	2600      	movs	r6, #0
 8013e58:	b30a      	cbz	r2, 8013e9e <GUI_AddDecShift+0x7e>
 8013e5a:	3901      	subs	r1, #1
 8013e5c:	b2c9      	uxtb	r1, r1
 8013e5e:	e01e      	b.n	8013e9e <GUI_AddDecShift+0x7e>
 8013e60:	1e4d      	subs	r5, r1, #1
 8013e62:	4291      	cmp	r1, r2
 8013e64:	b2ed      	uxtb	r5, r5
 8013e66:	d105      	bne.n	8013e74 <GUI_AddDecShift+0x54>
 8013e68:	681c      	ldr	r4, [r3, #0]
 8013e6a:	1c67      	adds	r7, r4, #1
 8013e6c:	601f      	str	r7, [r3, #0]
 8013e6e:	4f11      	ldr	r7, [pc, #68]	; (8013eb4 <GUI_AddDecShift+0x94>)
 8013e70:	783f      	ldrb	r7, [r7, #0]
 8013e72:	7027      	strb	r7, [r4, #0]
 8013e74:	4c10      	ldr	r4, [pc, #64]	; (8013eb8 <GUI_AddDecShift+0x98>)
 8013e76:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
 8013e7a:	fb90 f4f7 	sdiv	r4, r0, r7
 8013e7e:	b2e4      	uxtb	r4, r4
 8013e80:	2c0a      	cmp	r4, #10
 8013e82:	d80e      	bhi.n	8013ea2 <GUI_AddDecShift+0x82>
 8013e84:	fb07 0014 	mls	r0, r7, r4, r0
 8013e88:	b17d      	cbz	r5, 8013eaa <GUI_AddDecShift+0x8a>
 8013e8a:	2c0a      	cmp	r4, #10
 8013e8c:	bf18      	it	ne
 8013e8e:	4629      	movne	r1, r5
 8013e90:	681d      	ldr	r5, [r3, #0]
 8013e92:	bf08      	it	eq
 8013e94:	2401      	moveq	r4, #1
 8013e96:	1c6f      	adds	r7, r5, #1
 8013e98:	3430      	adds	r4, #48	; 0x30
 8013e9a:	601f      	str	r7, [r3, #0]
 8013e9c:	702c      	strb	r4, [r5, #0]
 8013e9e:	2900      	cmp	r1, #0
 8013ea0:	d1de      	bne.n	8013e60 <GUI_AddDecShift+0x40>
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	701a      	strb	r2, [r3, #0]
 8013ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eaa:	2e00      	cmp	r6, #0
 8013eac:	d0ed      	beq.n	8013e8a <GUI_AddDecShift+0x6a>
 8013eae:	3401      	adds	r4, #1
 8013eb0:	b2e4      	uxtb	r4, r4
 8013eb2:	e7ea      	b.n	8013e8a <GUI_AddDecShift+0x6a>
 8013eb4:	2001d5ae 	.word	0x2001d5ae
 8013eb8:	08020ba8 	.word	0x08020ba8

08013ebc <GUI_ALLOC_AllocZero>:
 8013ebc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013ebe:	4605      	mov	r5, r0
 8013ec0:	f7ff ff70 	bl	8013da4 <GUI_ALLOC_AllocNoInit>
 8013ec4:	4606      	mov	r6, r0
 8013ec6:	b158      	cbz	r0, 8013ee0 <GUI_ALLOC_AllocZero+0x24>
 8013ec8:	f7ff fd18 	bl	80138fc <GUI_ALLOC_LockH>
 8013ecc:	ac02      	add	r4, sp, #8
 8013ece:	2100      	movs	r1, #0
 8013ed0:	f844 0d04 	str.w	r0, [r4, #-4]!
 8013ed4:	462a      	mov	r2, r5
 8013ed6:	f7fc fe20 	bl	8010b1a <GUI__memset>
 8013eda:	4620      	mov	r0, r4
 8013edc:	f7ff fd1c 	bl	8013918 <GUI_ALLOC_UnlockH>
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	b002      	add	sp, #8
 8013ee4:	bd70      	pop	{r4, r5, r6, pc}

08013ee6 <GUI_ALLOC_AllocInit>:
 8013ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013ee8:	4605      	mov	r5, r0
 8013eea:	460c      	mov	r4, r1
 8013eec:	b909      	cbnz	r1, 8013ef2 <GUI_ALLOC_AllocInit+0xc>
 8013eee:	2000      	movs	r0, #0
 8013ef0:	e014      	b.n	8013f1c <GUI_ALLOC_AllocInit+0x36>
 8013ef2:	4608      	mov	r0, r1
 8013ef4:	f7ff ff56 	bl	8013da4 <GUI_ALLOC_AllocNoInit>
 8013ef8:	4606      	mov	r6, r0
 8013efa:	2800      	cmp	r0, #0
 8013efc:	d0f7      	beq.n	8013eee <GUI_ALLOC_AllocInit+0x8>
 8013efe:	f7ff fcfd 	bl	80138fc <GUI_ALLOC_LockH>
 8013f02:	4629      	mov	r1, r5
 8013f04:	9001      	str	r0, [sp, #4]
 8013f06:	4622      	mov	r2, r4
 8013f08:	b115      	cbz	r5, 8013f10 <GUI_ALLOC_AllocInit+0x2a>
 8013f0a:	f006 fc61 	bl	801a7d0 <memcpy>
 8013f0e:	e001      	b.n	8013f14 <GUI_ALLOC_AllocInit+0x2e>
 8013f10:	f7fc fe03 	bl	8010b1a <GUI__memset>
 8013f14:	a801      	add	r0, sp, #4
 8013f16:	f7ff fcff 	bl	8013918 <GUI_ALLOC_UnlockH>
 8013f1a:	4630      	mov	r0, r6
 8013f1c:	b002      	add	sp, #8
 8013f1e:	bd70      	pop	{r4, r5, r6, pc}

08013f20 <GUI_DrawRect>:
 8013f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013f24:	4c1e      	ldr	r4, [pc, #120]	; (8013fa0 <GUI_DrawRect+0x80>)
 8013f26:	f8d4 e000 	ldr.w	lr, [r4]
 8013f2a:	f8de 404c 	ldr.w	r4, [lr, #76]	; 0x4c
 8013f2e:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
 8013f32:	1905      	adds	r5, r0, r4
 8013f34:	4414      	add	r4, r2
 8013f36:	f89e 2018 	ldrb.w	r2, [lr, #24]
 8013f3a:	3a01      	subs	r2, #1
 8013f3c:	b292      	uxth	r2, r2
 8013f3e:	198f      	adds	r7, r1, r6
 8013f40:	441e      	add	r6, r3
 8013f42:	1aab      	subs	r3, r5, r2
 8013f44:	f8ad 3000 	strh.w	r3, [sp]
 8013f48:	1913      	adds	r3, r2, r4
 8013f4a:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013f4e:	4668      	mov	r0, sp
 8013f50:	1abb      	subs	r3, r7, r2
 8013f52:	4432      	add	r2, r6
 8013f54:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013f58:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013f5c:	f7f9 fce0 	bl	800d920 <WM__InitIVRSearch>
 8013f60:	b1d0      	cbz	r0, 8013f98 <GUI_DrawRect+0x78>
 8013f62:	4628      	mov	r0, r5
 8013f64:	4639      	mov	r1, r7
 8013f66:	4622      	mov	r2, r4
 8013f68:	f7fc fa7e 	bl	8010468 <LCD_DrawHLine>
 8013f6c:	f107 0901 	add.w	r9, r7, #1
 8013f70:	4628      	mov	r0, r5
 8013f72:	4631      	mov	r1, r6
 8013f74:	4622      	mov	r2, r4
 8013f76:	f106 38ff 	add.w	r8, r6, #4294967295
 8013f7a:	f7fc fa75 	bl	8010468 <LCD_DrawHLine>
 8013f7e:	4628      	mov	r0, r5
 8013f80:	4649      	mov	r1, r9
 8013f82:	4642      	mov	r2, r8
 8013f84:	f7fc fa96 	bl	80104b4 <LCD_DrawVLine>
 8013f88:	4620      	mov	r0, r4
 8013f8a:	4649      	mov	r1, r9
 8013f8c:	4642      	mov	r2, r8
 8013f8e:	f7fc fa91 	bl	80104b4 <LCD_DrawVLine>
 8013f92:	f7f9 fc03 	bl	800d79c <WM__GetNextIVR>
 8013f96:	e7e3      	b.n	8013f60 <GUI_DrawRect+0x40>
 8013f98:	b003      	add	sp, #12
 8013f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f9e:	bf00      	nop
 8013fa0:	20000110 	.word	0x20000110

08013fa4 <LCD_Index2Color_M565>:
 8013fa4:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 8013fa8:	4b06      	ldr	r3, [pc, #24]	; (8013fc4 <LCD_Index2Color_M565+0x20>)
 8013faa:	f000 021f 	and.w	r2, r0, #31
 8013fae:	f3c0 1045 	ubfx	r0, r0, #5, #6
 8013fb2:	5c9a      	ldrb	r2, [r3, r2]
 8013fb4:	5c5b      	ldrb	r3, [r3, r1]
 8013fb6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8013fba:	4a03      	ldr	r2, [pc, #12]	; (8013fc8 <LCD_Index2Color_M565+0x24>)
 8013fbc:	5c10      	ldrb	r0, [r2, r0]
 8013fbe:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8013fc2:	4770      	bx	lr
 8013fc4:	080255be 	.word	0x080255be
 8013fc8:	0802557e 	.word	0x0802557e

08013fcc <_Color2Index_M565>:
 8013fcc:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8013fd0:	4b06      	ldr	r3, [pc, #24]	; (8013fec <_Color2Index_M565+0x20>)
 8013fd2:	b2c2      	uxtb	r2, r0
 8013fd4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8013fd8:	5c9a      	ldrb	r2, [r3, r2]
 8013fda:	5c5b      	ldrb	r3, [r3, r1]
 8013fdc:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8013fe0:	4a03      	ldr	r2, [pc, #12]	; (8013ff0 <_Color2Index_M565+0x24>)
 8013fe2:	5c10      	ldrb	r0, [r2, r0]
 8013fe4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8013fe8:	4770      	bx	lr
 8013fea:	bf00      	nop
 8013fec:	080256de 	.word	0x080256de
 8013ff0:	080255de 	.word	0x080255de

08013ff4 <_GetIndexMask_M565>:
 8013ff4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013ff8:	4770      	bx	lr
	...

08013ffc <_Color2IndexBulk>:
 8013ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ffe:	4f0f      	ldr	r7, [pc, #60]	; (801403c <_Color2IndexBulk+0x40>)
 8014000:	683f      	ldr	r7, [r7, #0]
 8014002:	4606      	mov	r6, r0
 8014004:	460d      	mov	r5, r1
 8014006:	4614      	mov	r4, r2
 8014008:	469c      	mov	ip, r3
 801400a:	b10f      	cbz	r7, 8014010 <_Color2IndexBulk+0x14>
 801400c:	47b8      	blx	r7
 801400e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014010:	f856 2b04 	ldr.w	r2, [r6], #4
 8014014:	490a      	ldr	r1, [pc, #40]	; (8014040 <_Color2IndexBulk+0x44>)
 8014016:	b2d3      	uxtb	r3, r2
 8014018:	3c01      	subs	r4, #1
 801401a:	5cc8      	ldrb	r0, [r1, r3]
 801401c:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8014020:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8014024:	5ccb      	ldrb	r3, [r1, r3]
 8014026:	4907      	ldr	r1, [pc, #28]	; (8014044 <_Color2IndexBulk+0x48>)
 8014028:	5c8a      	ldrb	r2, [r1, r2]
 801402a:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
 801402e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8014032:	802b      	strh	r3, [r5, #0]
 8014034:	4465      	add	r5, ip
 8014036:	d1eb      	bne.n	8014010 <_Color2IndexBulk+0x14>
 8014038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801403a:	bf00      	nop
 801403c:	2001d334 	.word	0x2001d334
 8014040:	080256de 	.word	0x080256de
 8014044:	080255de 	.word	0x080255de

08014048 <_Index2ColorBulk>:
 8014048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801404a:	4e13      	ldr	r6, [pc, #76]	; (8014098 <_Index2ColorBulk+0x50>)
 801404c:	6836      	ldr	r6, [r6, #0]
 801404e:	4684      	mov	ip, r0
 8014050:	4614      	mov	r4, r2
 8014052:	461d      	mov	r5, r3
 8014054:	b10e      	cbz	r6, 801405a <_Index2ColorBulk+0x12>
 8014056:	47b0      	blx	r6
 8014058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801405a:	1e50      	subs	r0, r2, #1
 801405c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8014060:	3a01      	subs	r2, #1
 8014062:	fb03 c000 	mla	r0, r3, r0, ip
 8014066:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801406a:	8802      	ldrh	r2, [r0, #0]
 801406c:	4b0b      	ldr	r3, [pc, #44]	; (801409c <_Index2ColorBulk+0x54>)
 801406e:	f002 061f 	and.w	r6, r2, #31
 8014072:	0ad7      	lsrs	r7, r2, #11
 8014074:	5d9e      	ldrb	r6, [r3, r6]
 8014076:	5ddb      	ldrb	r3, [r3, r7]
 8014078:	f3c2 1245 	ubfx	r2, r2, #5, #6
 801407c:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8014080:	4e07      	ldr	r6, [pc, #28]	; (80140a0 <_Index2ColorBulk+0x58>)
 8014082:	5cb2      	ldrb	r2, [r6, r2]
 8014084:	3c01      	subs	r4, #1
 8014086:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801408a:	f841 3904 	str.w	r3, [r1], #-4
 801408e:	ebc5 0000 	rsb	r0, r5, r0
 8014092:	d1ea      	bne.n	801406a <_Index2ColorBulk+0x22>
 8014094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014096:	bf00      	nop
 8014098:	2001d330 	.word	0x2001d330
 801409c:	080255be 	.word	0x080255be
 80140a0:	0802557e 	.word	0x0802557e

080140a4 <LCD_Index2Color_888>:
 80140a4:	4770      	bx	lr

080140a6 <LCD_Index2Color_8888>:
 80140a6:	4770      	bx	lr

080140a8 <_Color2Index_8888>:
 80140a8:	4770      	bx	lr

080140aa <_GetIndexMask_8888>:
 80140aa:	f04f 30ff 	mov.w	r0, #4294967295
 80140ae:	4770      	bx	lr

080140b0 <_Color2IndexBulk>:
 80140b0:	b510      	push	{r4, lr}
 80140b2:	f850 4b04 	ldr.w	r4, [r0], #4
 80140b6:	600c      	str	r4, [r1, #0]
 80140b8:	3a01      	subs	r2, #1
 80140ba:	4419      	add	r1, r3
 80140bc:	d1f9      	bne.n	80140b2 <_Color2IndexBulk+0x2>
 80140be:	bd10      	pop	{r4, pc}

080140c0 <_Index2ColorBulk>:
 80140c0:	b510      	push	{r4, lr}
 80140c2:	6804      	ldr	r4, [r0, #0]
 80140c4:	f841 4b04 	str.w	r4, [r1], #4
 80140c8:	3a01      	subs	r2, #1
 80140ca:	4418      	add	r0, r3
 80140cc:	d1f9      	bne.n	80140c2 <_Index2ColorBulk+0x2>
 80140ce:	bd10      	pop	{r4, pc}

080140d0 <_DrawDownRect>:
 80140d0:	b510      	push	{r4, lr}
 80140d2:	b09c      	sub	sp, #112	; 0x70
 80140d4:	4604      	mov	r4, r0
 80140d6:	4668      	mov	r0, sp
 80140d8:	f7fd ff48 	bl	8011f6c <GUI_SaveContext_W>
 80140dc:	4b09      	ldr	r3, [pc, #36]	; (8014104 <_DrawDownRect+0x34>)
 80140de:	6818      	ldr	r0, [r3, #0]
 80140e0:	f7fc fcdc 	bl	8010a9c <LCD_SetColor>
 80140e4:	f9b4 0000 	ldrsh.w	r0, [r4]
 80140e8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80140ec:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80140f0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80140f4:	f7ff ff14 	bl	8013f20 <GUI_DrawRect>
 80140f8:	4668      	mov	r0, sp
 80140fa:	f7fd ff41 	bl	8011f80 <GUI_RestoreContext>
 80140fe:	b01c      	add	sp, #112	; 0x70
 8014100:	bd10      	pop	{r4, pc}
 8014102:	bf00      	nop
 8014104:	2001d338 	.word	0x2001d338

08014108 <_DrawUpRect>:
 8014108:	b510      	push	{r4, lr}
 801410a:	b09c      	sub	sp, #112	; 0x70
 801410c:	4604      	mov	r4, r0
 801410e:	4668      	mov	r0, sp
 8014110:	f7fd ff2c 	bl	8011f6c <GUI_SaveContext_W>
 8014114:	4b09      	ldr	r3, [pc, #36]	; (801413c <_DrawUpRect+0x34>)
 8014116:	6818      	ldr	r0, [r3, #0]
 8014118:	f7fc fcc0 	bl	8010a9c <LCD_SetColor>
 801411c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014120:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014124:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014128:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801412c:	f7ff fef8 	bl	8013f20 <GUI_DrawRect>
 8014130:	4668      	mov	r0, sp
 8014132:	f7fd ff25 	bl	8011f80 <GUI_RestoreContext>
 8014136:	b01c      	add	sp, #112	; 0x70
 8014138:	bd10      	pop	{r4, pc}
 801413a:	bf00      	nop
 801413c:	2001d338 	.word	0x2001d338

08014140 <_DrawDown>:
 8014140:	b507      	push	{r0, r1, r2, lr}
 8014142:	4668      	mov	r0, sp
 8014144:	f7f8 fc96 	bl	800ca74 <WM_GetClientRect>
 8014148:	4668      	mov	r0, sp
 801414a:	f7ff ffc1 	bl	80140d0 <_DrawDownRect>
 801414e:	b003      	add	sp, #12
 8014150:	f85d fb04 	ldr.w	pc, [sp], #4

08014154 <_DrawUp>:
 8014154:	b507      	push	{r0, r1, r2, lr}
 8014156:	4668      	mov	r0, sp
 8014158:	f7f8 fc8c 	bl	800ca74 <WM_GetClientRect>
 801415c:	4668      	mov	r0, sp
 801415e:	f7ff ffd3 	bl	8014108 <_DrawUpRect>
 8014162:	b003      	add	sp, #12
 8014164:	f85d fb04 	ldr.w	pc, [sp], #4

08014168 <SCROLLBAR_GetValue>:
 8014168:	b513      	push	{r0, r1, r4, lr}
 801416a:	4604      	mov	r4, r0
 801416c:	b140      	cbz	r0, 8014180 <SCROLLBAR_GetValue+0x18>
 801416e:	f7ff fbc5 	bl	80138fc <GUI_ALLOC_LockH>
 8014172:	ab02      	add	r3, sp, #8
 8014174:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8014176:	f843 0d04 	str.w	r0, [r3, #-4]!
 801417a:	4618      	mov	r0, r3
 801417c:	f7ff fbcc 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014180:	4620      	mov	r0, r4
 8014182:	b002      	add	sp, #8
 8014184:	bd10      	pop	{r4, pc}

08014186 <SCROLLBAR_CreateAttached>:
 8014186:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014188:	f001 0308 	and.w	r3, r1, #8
 801418c:	2b00      	cmp	r3, #0
 801418e:	f240 348a 	movw	r4, #906	; 0x38a
 8014192:	f240 528a 	movw	r2, #1418	; 0x58a
 8014196:	bf08      	it	eq
 8014198:	4622      	moveq	r2, r4
 801419a:	bf0c      	ite	eq
 801419c:	23ff      	moveq	r3, #255	; 0xff
 801419e:	23fe      	movne	r3, #254	; 0xfe
 80141a0:	e88d 0005 	stmia.w	sp, {r0, r2}
 80141a4:	2000      	movs	r0, #0
 80141a6:	9102      	str	r1, [sp, #8]
 80141a8:	9303      	str	r3, [sp, #12]
 80141aa:	4602      	mov	r2, r0
 80141ac:	4603      	mov	r3, r0
 80141ae:	4601      	mov	r1, r0
 80141b0:	f000 f8ae 	bl	8014310 <SCROLLBAR_CreateEx>
 80141b4:	2106      	movs	r1, #6
 80141b6:	4604      	mov	r4, r0
 80141b8:	f7f8 fa27 	bl	800c60a <WM_NotifyParent>
 80141bc:	4620      	mov	r0, r4
 80141be:	b004      	add	sp, #16
 80141c0:	bd10      	pop	{r4, pc}

080141c2 <_DeleteTimer>:
 80141c2:	b507      	push	{r0, r1, r2, lr}
 80141c4:	f7ff fb9a 	bl	80138fc <GUI_ALLOC_LockH>
 80141c8:	9001      	str	r0, [sp, #4]
 80141ca:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80141cc:	f001 f962 	bl	8015494 <WM_DeleteTimer>
 80141d0:	a802      	add	r0, sp, #8
 80141d2:	2200      	movs	r2, #0
 80141d4:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80141d8:	665a      	str	r2, [r3, #100]	; 0x64
 80141da:	65da      	str	r2, [r3, #92]	; 0x5c
 80141dc:	f7ff fb9c 	bl	8013918 <GUI_ALLOC_UnlockH>
 80141e0:	b003      	add	sp, #12
 80141e2:	f85d fb04 	ldr.w	pc, [sp], #4

080141e6 <SCROLLBAR__Rect2VRect>:
 80141e6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80141e8:	071b      	lsls	r3, r3, #28
 80141ea:	b510      	push	{r4, lr}
 80141ec:	d512      	bpl.n	8014214 <SCROLLBAR__Rect2VRect+0x2e>
 80141ee:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80141f2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80141f6:	8808      	ldrh	r0, [r1, #0]
 80141f8:	884c      	ldrh	r4, [r1, #2]
 80141fa:	800c      	strh	r4, [r1, #0]
 80141fc:	1ad3      	subs	r3, r2, r3
 80141fe:	888a      	ldrh	r2, [r1, #4]
 8014200:	88cc      	ldrh	r4, [r1, #6]
 8014202:	808c      	strh	r4, [r1, #4]
 8014204:	3301      	adds	r3, #1
 8014206:	b29b      	uxth	r3, r3
 8014208:	43c0      	mvns	r0, r0
 801420a:	43d2      	mvns	r2, r2
 801420c:	4418      	add	r0, r3
 801420e:	4413      	add	r3, r2
 8014210:	80c8      	strh	r0, [r1, #6]
 8014212:	804b      	strh	r3, [r1, #2]
 8014214:	bd10      	pop	{r4, pc}

08014216 <SCROLLBAR__InvalidatePartner>:
 8014216:	b510      	push	{r4, lr}
 8014218:	4604      	mov	r4, r0
 801421a:	f001 fa52 	bl	80156c2 <WM_GetScrollPartner>
 801421e:	f7f9 f942 	bl	800d4a6 <WM_InvalidateWindow>
 8014222:	4620      	mov	r0, r4
 8014224:	f7f8 fb26 	bl	800c874 <WM_GetParent>
 8014228:	2125      	movs	r1, #37	; 0x25
 801422a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801422e:	f7f8 b96f 	b.w	800c510 <WM_SendMessageNoPara>
	...

08014234 <SCROLLBAR_CreateUser>:
 8014234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014236:	b089      	sub	sp, #36	; 0x24
 8014238:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801423a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801423c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801423e:	b9fa      	cbnz	r2, 8014280 <SCROLLBAR_CreateUser+0x4c>
 8014240:	b9f3      	cbnz	r3, 8014280 <SCROLLBAR_CreateUser+0x4c>
 8014242:	4630      	mov	r0, r6
 8014244:	a906      	add	r1, sp, #24
 8014246:	f7f8 fb91 	bl	800c96c <WM_GetInsideRectEx>
 801424a:	f014 0f08 	tst.w	r4, #8
 801424e:	4b2c      	ldr	r3, [pc, #176]	; (8014300 <SCROLLBAR_CreateUser+0xcc>)
 8014250:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8014254:	f9bd e01e 	ldrsh.w	lr, [sp, #30]
 8014258:	d009      	beq.n	801426e <SCROLLBAR_CreateUser+0x3a>
 801425a:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 801425e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014262:	1c78      	adds	r0, r7, #1
 8014264:	ebc1 030e 	rsb	r3, r1, lr
 8014268:	1a80      	subs	r0, r0, r2
 801426a:	3301      	adds	r3, #1
 801426c:	e008      	b.n	8014280 <SCROLLBAR_CreateUser+0x4c>
 801426e:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8014272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014276:	f10e 0101 	add.w	r1, lr, #1
 801427a:	1a3a      	subs	r2, r7, r0
 801427c:	1ac9      	subs	r1, r1, r3
 801427e:	3201      	adds	r2, #1
 8014280:	9600      	str	r6, [sp, #0]
 8014282:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014284:	9601      	str	r6, [sp, #4]
 8014286:	4e1f      	ldr	r6, [pc, #124]	; (8014304 <SCROLLBAR_CreateUser+0xd0>)
 8014288:	9602      	str	r6, [sp, #8]
 801428a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801428c:	363c      	adds	r6, #60	; 0x3c
 801428e:	9603      	str	r6, [sp, #12]
 8014290:	f7f9 f94a 	bl	800d528 <WM_CreateWindowAsChild>
 8014294:	4606      	mov	r6, r0
 8014296:	2800      	cmp	r0, #0
 8014298:	d02f      	beq.n	80142fa <SCROLLBAR_CreateUser+0xc6>
 801429a:	f7ff fb2f 	bl	80138fc <GUI_ALLOC_LockH>
 801429e:	f004 0208 	and.w	r2, r4, #8
 80142a2:	06e3      	lsls	r3, r4, #27
 80142a4:	bf48      	it	mi
 80142a6:	f042 0210 	orrmi.w	r2, r2, #16
 80142aa:	f1a5 03fe 	sub.w	r3, r5, #254	; 0xfe
 80142ae:	bf48      	it	mi
 80142b0:	b292      	uxthmi	r2, r2
 80142b2:	2b01      	cmp	r3, #1
 80142b4:	bf88      	it	hi
 80142b6:	f042 0210 	orrhi.w	r2, r2, #16
 80142ba:	4629      	mov	r1, r5
 80142bc:	9005      	str	r0, [sp, #20]
 80142be:	f7f4 fd31 	bl	8008d24 <WIDGET__Init>
 80142c2:	4b11      	ldr	r3, [pc, #68]	; (8014308 <SCROLLBAR_CreateUser+0xd4>)
 80142c4:	af08      	add	r7, sp, #32
 80142c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80142c8:	f857 4d0c 	ldr.w	r4, [r7, #-12]!
 80142cc:	f104 0534 	add.w	r5, r4, #52	; 0x34
 80142d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80142d4:	2364      	movs	r3, #100	; 0x64
 80142d6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80142d8:	4d0c      	ldr	r5, [pc, #48]	; (801430c <SCROLLBAR_CreateUser+0xd8>)
 80142da:	230a      	movs	r3, #10
 80142dc:	6563      	str	r3, [r4, #84]	; 0x54
 80142de:	2300      	movs	r3, #0
 80142e0:	6523      	str	r3, [r4, #80]	; 0x50
 80142e2:	682b      	ldr	r3, [r5, #0]
 80142e4:	6463      	str	r3, [r4, #68]	; 0x44
 80142e6:	4638      	mov	r0, r7
 80142e8:	f7ff fb16 	bl	8013918 <GUI_ALLOC_UnlockH>
 80142ec:	682b      	ldr	r3, [r5, #0]
 80142ee:	4630      	mov	r0, r6
 80142f0:	685b      	ldr	r3, [r3, #4]
 80142f2:	4798      	blx	r3
 80142f4:	4630      	mov	r0, r6
 80142f6:	f7ff ff8e 	bl	8014216 <SCROLLBAR__InvalidatePartner>
 80142fa:	4630      	mov	r0, r6
 80142fc:	b009      	add	sp, #36	; 0x24
 80142fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014300:	20000134 	.word	0x20000134
 8014304:	080143b3 	.word	0x080143b3
 8014308:	20000120 	.word	0x20000120
 801430c:	20000130 	.word	0x20000130

08014310 <SCROLLBAR_CreateEx>:
 8014310:	b510      	push	{r4, lr}
 8014312:	b086      	sub	sp, #24
 8014314:	9c08      	ldr	r4, [sp, #32]
 8014316:	9400      	str	r4, [sp, #0]
 8014318:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801431a:	9401      	str	r4, [sp, #4]
 801431c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801431e:	9402      	str	r4, [sp, #8]
 8014320:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014322:	9403      	str	r4, [sp, #12]
 8014324:	2400      	movs	r4, #0
 8014326:	9404      	str	r4, [sp, #16]
 8014328:	f7ff ff84 	bl	8014234 <SCROLLBAR_CreateUser>
 801432c:	b006      	add	sp, #24
 801432e:	bd10      	pop	{r4, pc}

08014330 <SCROLLBAR_SetValue>:
 8014330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014332:	460c      	mov	r4, r1
 8014334:	4605      	mov	r5, r0
 8014336:	b300      	cbz	r0, 801437a <SCROLLBAR_SetValue+0x4a>
 8014338:	f7ff fae0 	bl	80138fc <GUI_ALLOC_LockH>
 801433c:	2c00      	cmp	r4, #0
 801433e:	9001      	str	r0, [sp, #4]
 8014340:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8014342:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8014344:	db05      	blt.n	8014352 <SCROLLBAR_SetValue+0x22>
 8014346:	1a8a      	subs	r2, r1, r2
 8014348:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801434c:	4294      	cmp	r4, r2
 801434e:	dc02      	bgt.n	8014356 <SCROLLBAR_SetValue+0x26>
 8014350:	e000      	b.n	8014354 <SCROLLBAR_SetValue+0x24>
 8014352:	2400      	movs	r4, #0
 8014354:	4622      	mov	r2, r4
 8014356:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8014358:	4291      	cmp	r1, r2
 801435a:	d00b      	beq.n	8014374 <SCROLLBAR_SetValue+0x44>
 801435c:	6502      	str	r2, [r0, #80]	; 0x50
 801435e:	4628      	mov	r0, r5
 8014360:	f7f9 f8a1 	bl	800d4a6 <WM_InvalidateWindow>
 8014364:	a801      	add	r0, sp, #4
 8014366:	f7ff fad7 	bl	8013918 <GUI_ALLOC_UnlockH>
 801436a:	4628      	mov	r0, r5
 801436c:	2105      	movs	r1, #5
 801436e:	f7f8 f94c 	bl	800c60a <WM_NotifyParent>
 8014372:	e002      	b.n	801437a <SCROLLBAR_SetValue+0x4a>
 8014374:	a801      	add	r0, sp, #4
 8014376:	f7ff facf 	bl	8013918 <GUI_ALLOC_UnlockH>
 801437a:	b003      	add	sp, #12
 801437c:	bd30      	pop	{r4, r5, pc}

0801437e <SCROLLBAR_AddValue>:
 801437e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014380:	460d      	mov	r5, r1
 8014382:	4606      	mov	r6, r0
 8014384:	b160      	cbz	r0, 80143a0 <SCROLLBAR_AddValue+0x22>
 8014386:	f7ff fab9 	bl	80138fc <GUI_ALLOC_LockH>
 801438a:	4602      	mov	r2, r0
 801438c:	a802      	add	r0, sp, #8
 801438e:	6d14      	ldr	r4, [r2, #80]	; 0x50
 8014390:	f840 2d04 	str.w	r2, [r0, #-4]!
 8014394:	f7ff fac0 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014398:	4630      	mov	r0, r6
 801439a:	1961      	adds	r1, r4, r5
 801439c:	f7ff ffc8 	bl	8014330 <SCROLLBAR_SetValue>
 80143a0:	b002      	add	sp, #8
 80143a2:	bd70      	pop	{r4, r5, r6, pc}

080143a4 <SCROLLBAR_Dec>:
 80143a4:	f04f 31ff 	mov.w	r1, #4294967295
 80143a8:	f7ff bfe9 	b.w	801437e <SCROLLBAR_AddValue>

080143ac <SCROLLBAR_Inc>:
 80143ac:	2101      	movs	r1, #1
 80143ae:	f7ff bfe6 	b.w	801437e <SCROLLBAR_AddValue>

080143b2 <SCROLLBAR_Callback>:
 80143b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143b6:	6844      	ldr	r4, [r0, #4]
 80143b8:	4680      	mov	r8, r0
 80143ba:	b08f      	sub	sp, #60	; 0x3c
 80143bc:	4620      	mov	r0, r4
 80143be:	4641      	mov	r1, r8
 80143c0:	f7f4 fcb8 	bl	8008d34 <WIDGET_HandleActive>
 80143c4:	2800      	cmp	r0, #0
 80143c6:	f000 81c0 	beq.w	801474a <SCROLLBAR_Callback+0x398>
 80143ca:	f8d8 3000 	ldr.w	r3, [r8]
 80143ce:	2b23      	cmp	r3, #35	; 0x23
 80143d0:	f000 8182 	beq.w	80146d8 <SCROLLBAR_Callback+0x326>
 80143d4:	dc0b      	bgt.n	80143ee <SCROLLBAR_Callback+0x3c>
 80143d6:	2b0e      	cmp	r3, #14
 80143d8:	f000 812a 	beq.w	8014630 <SCROLLBAR_Callback+0x27e>
 80143dc:	2b0f      	cmp	r3, #15
 80143de:	d012      	beq.n	8014406 <SCROLLBAR_Callback+0x54>
 80143e0:	2b0b      	cmp	r3, #11
 80143e2:	f040 81af 	bne.w	8014744 <SCROLLBAR_Callback+0x392>
 80143e6:	4620      	mov	r0, r4
 80143e8:	f7ff ff15 	bl	8014216 <SCROLLBAR__InvalidatePartner>
 80143ec:	e1aa      	b.n	8014744 <SCROLLBAR_Callback+0x392>
 80143ee:	f240 1213 	movw	r2, #275	; 0x113
 80143f2:	4293      	cmp	r3, r2
 80143f4:	f000 817f 	beq.w	80146f6 <SCROLLBAR_Callback+0x344>
 80143f8:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80143fc:	d012      	beq.n	8014424 <SCROLLBAR_Callback+0x72>
 80143fe:	2b24      	cmp	r3, #36	; 0x24
 8014400:	f040 81a0 	bne.w	8014744 <SCROLLBAR_Callback+0x392>
 8014404:	e143      	b.n	801468e <SCROLLBAR_Callback+0x2dc>
 8014406:	4620      	mov	r0, r4
 8014408:	f7ff fa78 	bl	80138fc <GUI_ALLOC_LockH>
 801440c:	9005      	str	r0, [sp, #20]
 801440e:	2800      	cmp	r0, #0
 8014410:	f000 819b 	beq.w	801474a <SCROLLBAR_Callback+0x398>
 8014414:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8014416:	a805      	add	r0, sp, #20
 8014418:	681d      	ldr	r5, [r3, #0]
 801441a:	f7ff fa7d 	bl	8013918 <GUI_ALLOC_UnlockH>
 801441e:	4620      	mov	r0, r4
 8014420:	47a8      	blx	r5
 8014422:	e192      	b.n	801474a <SCROLLBAR_Callback+0x398>
 8014424:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8014428:	2f00      	cmp	r7, #0
 801442a:	f000 818b 	beq.w	8014744 <SCROLLBAR_Callback+0x392>
 801442e:	7a3b      	ldrb	r3, [r7, #8]
 8014430:	4620      	mov	r0, r4
 8014432:	2b00      	cmp	r3, #0
 8014434:	f000 80d6 	beq.w	80145e4 <SCROLLBAR_Callback+0x232>
 8014438:	f7ff fa60 	bl	80138fc <GUI_ALLOC_LockH>
 801443c:	a905      	add	r1, sp, #20
 801443e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8014440:	9003      	str	r0, [sp, #12]
 8014442:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8014444:	4620      	mov	r0, r4
 8014446:	4798      	blx	r3
 8014448:	9b03      	ldr	r3, [sp, #12]
 801444a:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
 801444e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8014450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014452:	f01a 0f08 	tst.w	sl, #8
 8014456:	ebc5 0902 	rsb	r9, r5, r2
 801445a:	d003      	beq.n	8014464 <SCROLLBAR_Callback+0xb2>
 801445c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8014460:	603a      	str	r2, [r7, #0]
 8014462:	6079      	str	r1, [r7, #4]
 8014464:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014466:	683f      	ldr	r7, [r7, #0]
 8014468:	2a03      	cmp	r2, #3
 801446a:	d114      	bne.n	8014496 <SCROLLBAR_Callback+0xe4>
 801446c:	4620      	mov	r0, r4
 801446e:	f7ff fea8 	bl	80141c2 <_DeleteTimer>
 8014472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014474:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014476:	2002      	movs	r0, #2
 8014478:	fb93 f3f0 	sdiv	r3, r3, r0
 801447c:	1aff      	subs	r7, r7, r3
 801447e:	9b06      	ldr	r3, [sp, #24]
 8014480:	1afb      	subs	r3, r7, r3
 8014482:	1e58      	subs	r0, r3, #1
 8014484:	fb00 f009 	mul.w	r0, r0, r9
 8014488:	f003 f93e 	bl	8017708 <GUI__DivideRound32>
 801448c:	9b03      	ldr	r3, [sp, #12]
 801448e:	4606      	mov	r6, r0
 8014490:	6618      	str	r0, [r3, #96]	; 0x60
 8014492:	a803      	add	r0, sp, #12
 8014494:	e07e      	b.n	8014594 <SCROLLBAR_Callback+0x1e2>
 8014496:	9806      	ldr	r0, [sp, #24]
 8014498:	4287      	cmp	r7, r0
 801449a:	dc0b      	bgt.n	80144b4 <SCROLLBAR_Callback+0x102>
 801449c:	2a02      	cmp	r2, #2
 801449e:	d039      	beq.n	8014514 <SCROLLBAR_Callback+0x162>
 80144a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80144a2:	b113      	cbz	r3, 80144aa <SCROLLBAR_Callback+0xf8>
 80144a4:	4620      	mov	r0, r4
 80144a6:	f7ff fe8c 	bl	80141c2 <_DeleteTimer>
 80144aa:	9b03      	ldr	r3, [sp, #12]
 80144ac:	2202      	movs	r2, #2
 80144ae:	3e01      	subs	r6, #1
 80144b0:	659a      	str	r2, [r3, #88]	; 0x58
 80144b2:	e02f      	b.n	8014514 <SCROLLBAR_Callback+0x162>
 80144b4:	9907      	ldr	r1, [sp, #28]
 80144b6:	428f      	cmp	r7, r1
 80144b8:	da02      	bge.n	80144c0 <SCROLLBAR_Callback+0x10e>
 80144ba:	1b76      	subs	r6, r6, r5
 80144bc:	426d      	negs	r5, r5
 80144be:	e02f      	b.n	8014520 <SCROLLBAR_Callback+0x16e>
 80144c0:	9908      	ldr	r1, [sp, #32]
 80144c2:	428f      	cmp	r7, r1
 80144c4:	dc12      	bgt.n	80144ec <SCROLLBAR_Callback+0x13a>
 80144c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80144c8:	2900      	cmp	r1, #0
 80144ca:	dd0b      	ble.n	80144e4 <SCROLLBAR_Callback+0x132>
 80144cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144ce:	2202      	movs	r2, #2
 80144d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80144d4:	1aff      	subs	r7, r7, r3
 80144d6:	1a3f      	subs	r7, r7, r0
 80144d8:	3f01      	subs	r7, #1
 80144da:	fb07 f009 	mul.w	r0, r7, r9
 80144de:	f003 f913 	bl	8017708 <GUI__DivideRound32>
 80144e2:	4606      	mov	r6, r0
 80144e4:	9b03      	ldr	r3, [sp, #12]
 80144e6:	2203      	movs	r2, #3
 80144e8:	659a      	str	r2, [r3, #88]	; 0x58
 80144ea:	e016      	b.n	801451a <SCROLLBAR_Callback+0x168>
 80144ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80144ee:	428f      	cmp	r7, r1
 80144f0:	da01      	bge.n	80144f6 <SCROLLBAR_Callback+0x144>
 80144f2:	442e      	add	r6, r5
 80144f4:	e014      	b.n	8014520 <SCROLLBAR_Callback+0x16e>
 80144f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80144f8:	428f      	cmp	r7, r1
 80144fa:	dc0e      	bgt.n	801451a <SCROLLBAR_Callback+0x168>
 80144fc:	2a01      	cmp	r2, #1
 80144fe:	d00e      	beq.n	801451e <SCROLLBAR_Callback+0x16c>
 8014500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014502:	b113      	cbz	r3, 801450a <SCROLLBAR_Callback+0x158>
 8014504:	4620      	mov	r0, r4
 8014506:	f7ff fe5c 	bl	80141c2 <_DeleteTimer>
 801450a:	9b03      	ldr	r3, [sp, #12]
 801450c:	2501      	movs	r5, #1
 801450e:	3601      	adds	r6, #1
 8014510:	659d      	str	r5, [r3, #88]	; 0x58
 8014512:	e005      	b.n	8014520 <SCROLLBAR_Callback+0x16e>
 8014514:	f04f 35ff 	mov.w	r5, #4294967295
 8014518:	e002      	b.n	8014520 <SCROLLBAR_Callback+0x16e>
 801451a:	2500      	movs	r5, #0
 801451c:	e000      	b.n	8014520 <SCROLLBAR_Callback+0x16e>
 801451e:	4615      	mov	r5, r2
 8014520:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8014524:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014526:	f8db 305c 	ldr.w	r3, [fp, #92]	; 0x5c
 801452a:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 801452e:	9a06      	ldr	r2, [sp, #24]
 8014530:	b171      	cbz	r1, 8014550 <SCROLLBAR_Callback+0x19e>
 8014532:	2002      	movs	r0, #2
 8014534:	fb9e f0f0 	sdiv	r0, lr, r0
 8014538:	1a38      	subs	r0, r7, r0
 801453a:	1a80      	subs	r0, r0, r2
 801453c:	3801      	subs	r0, #1
 801453e:	fb00 f009 	mul.w	r0, r0, r9
 8014542:	9301      	str	r3, [sp, #4]
 8014544:	f003 f8e0 	bl	8017708 <GUI__DivideRound32>
 8014548:	9b01      	ldr	r3, [sp, #4]
 801454a:	f8cb 0060 	str.w	r0, [fp, #96]	; 0x60
 801454e:	e009      	b.n	8014564 <SCROLLBAR_Callback+0x1b2>
 8014550:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 8014554:	2a01      	cmp	r2, #1
 8014556:	bf04      	itt	eq
 8014558:	f8db 104c 	ldreq.w	r1, [fp, #76]	; 0x4c
 801455c:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8014560:	f8cb 1060 	str.w	r1, [fp, #96]	; 0x60
 8014564:	a803      	add	r0, sp, #12
 8014566:	9301      	str	r3, [sp, #4]
 8014568:	f7ff f9d6 	bl	8013918 <GUI_ALLOC_UnlockH>
 801456c:	9b01      	ldr	r3, [sp, #4]
 801456e:	b1a5      	cbz	r5, 801459a <SCROLLBAR_Callback+0x1e8>
 8014570:	b9bb      	cbnz	r3, 80145a2 <SCROLLBAR_Callback+0x1f0>
 8014572:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014576:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801457a:	4620      	mov	r0, r4
 801457c:	f000 ffc2 	bl	8015504 <WM_CreateTimer>
 8014580:	4607      	mov	r7, r0
 8014582:	4620      	mov	r0, r4
 8014584:	f7ff f9ba 	bl	80138fc <GUI_ALLOC_LockH>
 8014588:	4602      	mov	r2, r0
 801458a:	a80e      	add	r0, sp, #56	; 0x38
 801458c:	f840 2d28 	str.w	r2, [r0, #-40]!
 8014590:	6657      	str	r7, [r2, #100]	; 0x64
 8014592:	65d5      	str	r5, [r2, #92]	; 0x5c
 8014594:	f7ff f9c0 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014598:	e003      	b.n	80145a2 <SCROLLBAR_Callback+0x1f0>
 801459a:	b113      	cbz	r3, 80145a2 <SCROLLBAR_Callback+0x1f0>
 801459c:	4620      	mov	r0, r4
 801459e:	f7ff fe10 	bl	80141c2 <_DeleteTimer>
 80145a2:	4620      	mov	r0, r4
 80145a4:	2101      	movs	r1, #1
 80145a6:	f7f7 ff97 	bl	800c4d8 <WM_SetCapture>
 80145aa:	4620      	mov	r0, r4
 80145ac:	4631      	mov	r1, r6
 80145ae:	f7ff febf 	bl	8014330 <SCROLLBAR_SetValue>
 80145b2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80145b6:	f040 80c5 	bne.w	8014744 <SCROLLBAR_Callback+0x392>
 80145ba:	4620      	mov	r0, r4
 80145bc:	f7ff f99e 	bl	80138fc <GUI_ALLOC_LockH>
 80145c0:	ab0e      	add	r3, sp, #56	; 0x38
 80145c2:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80145c4:	f843 0d28 	str.w	r0, [r3, #-40]!
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7ff f9a5 	bl	8013918 <GUI_ALLOC_UnlockH>
 80145ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80145d2:	4620      	mov	r0, r4
 80145d4:	f7f4 fb7a 	bl	8008ccc <WIDGET_OrState>
 80145d8:	07a9      	lsls	r1, r5, #30
 80145da:	f140 80b3 	bpl.w	8014744 <SCROLLBAR_Callback+0x392>
 80145de:	4620      	mov	r0, r4
 80145e0:	2101      	movs	r1, #1
 80145e2:	e074      	b.n	80146ce <SCROLLBAR_Callback+0x31c>
 80145e4:	f7ff f98a 	bl	80138fc <GUI_ALLOC_LockH>
 80145e8:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 80145ea:	9003      	str	r0, [sp, #12]
 80145ec:	a803      	add	r0, sp, #12
 80145ee:	f7ff f993 	bl	8013918 <GUI_ALLOC_UnlockH>
 80145f2:	05ea      	lsls	r2, r5, #23
 80145f4:	f140 80a6 	bpl.w	8014744 <SCROLLBAR_Callback+0x392>
 80145f8:	4620      	mov	r0, r4
 80145fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80145fe:	f7f4 fb7b 	bl	8008cf8 <WIDGET_AndState>
 8014602:	4620      	mov	r0, r4
 8014604:	f7ff f97a 	bl	80138fc <GUI_ALLOC_LockH>
 8014608:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801460a:	9005      	str	r0, [sp, #20]
 801460c:	b113      	cbz	r3, 8014614 <SCROLLBAR_Callback+0x262>
 801460e:	4620      	mov	r0, r4
 8014610:	f7ff fdd7 	bl	80141c2 <_DeleteTimer>
 8014614:	a80e      	add	r0, sp, #56	; 0x38
 8014616:	2200      	movs	r2, #0
 8014618:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 801461c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801461e:	659a      	str	r2, [r3, #88]	; 0x58
 8014620:	f7ff f97a 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014624:	07ab      	lsls	r3, r5, #30
 8014626:	f140 808d 	bpl.w	8014744 <SCROLLBAR_Callback+0x392>
 801462a:	4620      	mov	r0, r4
 801462c:	2102      	movs	r1, #2
 801462e:	e04e      	b.n	80146ce <SCROLLBAR_Callback+0x31c>
 8014630:	4620      	mov	r0, r4
 8014632:	f7ff f963 	bl	80138fc <GUI_ALLOC_LockH>
 8014636:	ab0e      	add	r3, sp, #56	; 0x38
 8014638:	6d45      	ldr	r5, [r0, #84]	; 0x54
 801463a:	f843 0d24 	str.w	r0, [r3, #-36]!
 801463e:	4618      	mov	r0, r3
 8014640:	f7ff f96a 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014644:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8014648:	6813      	ldr	r3, [r2, #0]
 801464a:	6852      	ldr	r2, [r2, #4]
 801464c:	2a00      	cmp	r2, #0
 801464e:	dd79      	ble.n	8014744 <SCROLLBAR_Callback+0x392>
 8014650:	3b10      	subs	r3, #16
 8014652:	2b12      	cmp	r3, #18
 8014654:	d876      	bhi.n	8014744 <SCROLLBAR_Callback+0x392>
 8014656:	e8df f003 	tbb	[pc, r3]
 801465a:	1616      	.short	0x1616
 801465c:	75751212 	.word	0x75751212
 8014660:	75757575 	.word	0x75757575
 8014664:	75757575 	.word	0x75757575
 8014668:	0a757575 	.word	0x0a757575
 801466c:	0d          	.byte	0x0d
 801466d:	00          	.byte	0x00
 801466e:	4620      	mov	r0, r4
 8014670:	4629      	mov	r1, r5
 8014672:	e001      	b.n	8014678 <SCROLLBAR_Callback+0x2c6>
 8014674:	4620      	mov	r0, r4
 8014676:	4269      	negs	r1, r5
 8014678:	f7ff fe81 	bl	801437e <SCROLLBAR_AddValue>
 801467c:	e062      	b.n	8014744 <SCROLLBAR_Callback+0x392>
 801467e:	4620      	mov	r0, r4
 8014680:	f7ff fe94 	bl	80143ac <SCROLLBAR_Inc>
 8014684:	e05e      	b.n	8014744 <SCROLLBAR_Callback+0x392>
 8014686:	4620      	mov	r0, r4
 8014688:	f7ff fe8c 	bl	80143a4 <SCROLLBAR_Dec>
 801468c:	e05a      	b.n	8014744 <SCROLLBAR_Callback+0x392>
 801468e:	4620      	mov	r0, r4
 8014690:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8014694:	f7ff f932 	bl	80138fc <GUI_ALLOC_LockH>
 8014698:	ad0e      	add	r5, sp, #56	; 0x38
 801469a:	4603      	mov	r3, r0
 801469c:	f845 0d24 	str.w	r0, [r5, #-36]!
 80146a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80146a2:	6830      	ldr	r0, [r6, #0]
 80146a4:	68b1      	ldr	r1, [r6, #8]
 80146a6:	4290      	cmp	r0, r2
 80146a8:	6872      	ldr	r2, [r6, #4]
 80146aa:	d105      	bne.n	80146b8 <SCROLLBAR_Callback+0x306>
 80146ac:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 80146ae:	428e      	cmp	r6, r1
 80146b0:	d102      	bne.n	80146b8 <SCROLLBAR_Callback+0x306>
 80146b2:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80146b4:	4296      	cmp	r6, r2
 80146b6:	d00d      	beq.n	80146d4 <SCROLLBAR_Callback+0x322>
 80146b8:	64d8      	str	r0, [r3, #76]	; 0x4c
 80146ba:	6559      	str	r1, [r3, #84]	; 0x54
 80146bc:	651a      	str	r2, [r3, #80]	; 0x50
 80146be:	4620      	mov	r0, r4
 80146c0:	f7f8 fef1 	bl	800d4a6 <WM_InvalidateWindow>
 80146c4:	4628      	mov	r0, r5
 80146c6:	f7ff f927 	bl	8013918 <GUI_ALLOC_UnlockH>
 80146ca:	4620      	mov	r0, r4
 80146cc:	2105      	movs	r1, #5
 80146ce:	f7f7 ff9c 	bl	800c60a <WM_NotifyParent>
 80146d2:	e037      	b.n	8014744 <SCROLLBAR_Callback+0x392>
 80146d4:	4628      	mov	r0, r5
 80146d6:	e033      	b.n	8014740 <SCROLLBAR_Callback+0x38e>
 80146d8:	4620      	mov	r0, r4
 80146da:	f7ff f90f 	bl	80138fc <GUI_ALLOC_LockH>
 80146de:	9005      	str	r0, [sp, #20]
 80146e0:	2800      	cmp	r0, #0
 80146e2:	d02f      	beq.n	8014744 <SCROLLBAR_Callback+0x392>
 80146e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80146e8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80146ea:	601a      	str	r2, [r3, #0]
 80146ec:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80146ee:	609a      	str	r2, [r3, #8]
 80146f0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80146f2:	605a      	str	r2, [r3, #4]
 80146f4:	e023      	b.n	801473e <SCROLLBAR_Callback+0x38c>
 80146f6:	4620      	mov	r0, r4
 80146f8:	f7ff f900 	bl	80138fc <GUI_ALLOC_LockH>
 80146fc:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80146fe:	9005      	str	r0, [sp, #20]
 8014700:	b111      	cbz	r1, 8014708 <SCROLLBAR_Callback+0x356>
 8014702:	4620      	mov	r0, r4
 8014704:	f7ff fe3b 	bl	801437e <SCROLLBAR_AddValue>
 8014708:	9b05      	ldr	r3, [sp, #20]
 801470a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801470c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801470e:	2a00      	cmp	r2, #0
 8014710:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014712:	dd05      	ble.n	8014720 <SCROLLBAR_Callback+0x36e>
 8014714:	4291      	cmp	r1, r2
 8014716:	bfb4      	ite	lt
 8014718:	2100      	movlt	r1, #0
 801471a:	2101      	movge	r1, #1
 801471c:	dd06      	ble.n	801472c <SCROLLBAR_Callback+0x37a>
 801471e:	e004      	b.n	801472a <SCROLLBAR_Callback+0x378>
 8014720:	4291      	cmp	r1, r2
 8014722:	bfcc      	ite	gt
 8014724:	2100      	movgt	r1, #0
 8014726:	2101      	movle	r1, #1
 8014728:	da00      	bge.n	801472c <SCROLLBAR_Callback+0x37a>
 801472a:	651a      	str	r2, [r3, #80]	; 0x50
 801472c:	b119      	cbz	r1, 8014736 <SCROLLBAR_Callback+0x384>
 801472e:	4620      	mov	r0, r4
 8014730:	f7ff fd47 	bl	80141c2 <_DeleteTimer>
 8014734:	e003      	b.n	801473e <SCROLLBAR_Callback+0x38c>
 8014736:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8014738:	2132      	movs	r1, #50	; 0x32
 801473a:	f000 ff13 	bl	8015564 <WM_RestartTimer>
 801473e:	a805      	add	r0, sp, #20
 8014740:	f7ff f8ea 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014744:	4640      	mov	r0, r8
 8014746:	f7f9 fadf 	bl	800dd08 <WM_DefaultProc>
 801474a:	b00f      	add	sp, #60	; 0x3c
 801474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014750 <LISTVIEW_GetRBorder>:
 8014750:	b513      	push	{r0, r1, r4, lr}
 8014752:	4604      	mov	r4, r0
 8014754:	b148      	cbz	r0, 801476a <LISTVIEW_GetRBorder+0x1a>
 8014756:	f7ff f8d1 	bl	80138fc <GUI_ALLOC_LockH>
 801475a:	ab02      	add	r3, sp, #8
 801475c:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
 8014760:	f843 0d04 	str.w	r0, [r3, #-4]!
 8014764:	4618      	mov	r0, r3
 8014766:	f7ff f8d7 	bl	8013918 <GUI_ALLOC_UnlockH>
 801476a:	4620      	mov	r0, r4
 801476c:	b002      	add	sp, #8
 801476e:	bd10      	pop	{r4, pc}

08014770 <LISTVIEW_GetLBorder>:
 8014770:	b513      	push	{r0, r1, r4, lr}
 8014772:	4604      	mov	r4, r0
 8014774:	b148      	cbz	r0, 801478a <LISTVIEW_GetLBorder+0x1a>
 8014776:	f7ff f8c1 	bl	80138fc <GUI_ALLOC_LockH>
 801477a:	ab02      	add	r3, sp, #8
 801477c:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8014780:	f843 0d04 	str.w	r0, [r3, #-4]!
 8014784:	4618      	mov	r0, r3
 8014786:	f7ff f8c7 	bl	8013918 <GUI_ALLOC_UnlockH>
 801478a:	4620      	mov	r0, r4
 801478c:	b002      	add	sp, #8
 801478e:	bd10      	pop	{r4, pc}

08014790 <LISTVIEW_GetWrapMode>:
 8014790:	b513      	push	{r0, r1, r4, lr}
 8014792:	b150      	cbz	r0, 80147aa <LISTVIEW_GetWrapMode+0x1a>
 8014794:	f7ff f8b2 	bl	80138fc <GUI_ALLOC_LockH>
 8014798:	ab02      	add	r3, sp, #8
 801479a:	f890 406e 	ldrb.w	r4, [r0, #110]	; 0x6e
 801479e:	f843 0d04 	str.w	r0, [r3, #-4]!
 80147a2:	4618      	mov	r0, r3
 80147a4:	f7ff f8b8 	bl	8013918 <GUI_ALLOC_UnlockH>
 80147a8:	e000      	b.n	80147ac <LISTVIEW_GetWrapMode+0x1c>
 80147aa:	24ff      	movs	r4, #255	; 0xff
 80147ac:	4620      	mov	r0, r4
 80147ae:	b002      	add	sp, #8
 80147b0:	bd10      	pop	{r4, pc}

080147b2 <LISTVIEW_GetSel>:
 80147b2:	b513      	push	{r0, r1, r4, lr}
 80147b4:	b148      	cbz	r0, 80147ca <LISTVIEW_GetSel+0x18>
 80147b6:	f7ff f8a1 	bl	80138fc <GUI_ALLOC_LockH>
 80147ba:	ab02      	add	r3, sp, #8
 80147bc:	6f44      	ldr	r4, [r0, #116]	; 0x74
 80147be:	f843 0d04 	str.w	r0, [r3, #-4]!
 80147c2:	4618      	mov	r0, r3
 80147c4:	f7ff f8a8 	bl	8013918 <GUI_ALLOC_UnlockH>
 80147c8:	e001      	b.n	80147ce <LISTVIEW_GetSel+0x1c>
 80147ca:	f04f 34ff 	mov.w	r4, #4294967295
 80147ce:	4620      	mov	r0, r4
 80147d0:	b002      	add	sp, #8
 80147d2:	bd10      	pop	{r4, pc}

080147d4 <LISTVIEW_RowIsDisabled>:
 80147d4:	b513      	push	{r0, r1, r4, lr}
 80147d6:	f7f4 fe24 	bl	8009422 <LISTVIEW__GetpRow>
 80147da:	9001      	str	r0, [sp, #4]
 80147dc:	b120      	cbz	r0, 80147e8 <LISTVIEW_RowIsDisabled+0x14>
 80147de:	7904      	ldrb	r4, [r0, #4]
 80147e0:	a801      	add	r0, sp, #4
 80147e2:	f7ff f899 	bl	8013918 <GUI_ALLOC_UnlockH>
 80147e6:	e000      	b.n	80147ea <LISTVIEW_RowIsDisabled+0x16>
 80147e8:	4604      	mov	r4, r0
 80147ea:	4620      	mov	r0, r4
 80147ec:	b002      	add	sp, #8
 80147ee:	bd10      	pop	{r4, pc}

080147f0 <HEADER_DrawSkinFlex>:
 80147f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147f4:	6843      	ldr	r3, [r0, #4]
 80147f6:	2b06      	cmp	r3, #6
 80147f8:	b086      	sub	sp, #24
 80147fa:	4604      	mov	r4, r0
 80147fc:	d03f      	beq.n	801487e <HEADER_DrawSkinFlex+0x8e>
 80147fe:	dc38      	bgt.n	8014872 <HEADER_DrawSkinFlex+0x82>
 8014800:	2b02      	cmp	r3, #2
 8014802:	f000 80da 	beq.w	80149ba <HEADER_DrawSkinFlex+0x1ca>
 8014806:	2b05      	cmp	r3, #5
 8014808:	f040 8137 	bne.w	8014a7a <HEADER_DrawSkinFlex+0x28a>
 801480c:	4d9d      	ldr	r5, [pc, #628]	; (8014a84 <HEADER_DrawSkinFlex+0x294>)
 801480e:	6943      	ldr	r3, [r0, #20]
 8014810:	69c6      	ldr	r6, [r0, #28]
 8014812:	6828      	ldr	r0, [r5, #0]
 8014814:	441e      	add	r6, r3
 8014816:	f7fd fb5b 	bl	8011ed0 <GUI_SetColor>
 801481a:	69e2      	ldr	r2, [r4, #28]
 801481c:	69a0      	ldr	r0, [r4, #24]
 801481e:	6961      	ldr	r1, [r4, #20]
 8014820:	3a01      	subs	r2, #1
 8014822:	f7fd fd67 	bl	80122f4 <GUI_DrawVLine>
 8014826:	6921      	ldr	r1, [r4, #16]
 8014828:	69a2      	ldr	r2, [r4, #24]
 801482a:	69e0      	ldr	r0, [r4, #28]
 801482c:	f7fd ffda 	bl	80127e4 <GUI_DrawHLine>
 8014830:	6868      	ldr	r0, [r5, #4]
 8014832:	f7fd fb4d 	bl	8011ed0 <GUI_SetColor>
 8014836:	69e2      	ldr	r2, [r4, #28]
 8014838:	6920      	ldr	r0, [r4, #16]
 801483a:	6961      	ldr	r1, [r4, #20]
 801483c:	3a01      	subs	r2, #1
 801483e:	f7fd fd59 	bl	80122f4 <GUI_DrawVLine>
 8014842:	68ab      	ldr	r3, [r5, #8]
 8014844:	6920      	ldr	r0, [r4, #16]
 8014846:	69a2      	ldr	r2, [r4, #24]
 8014848:	9300      	str	r3, [sp, #0]
 801484a:	68eb      	ldr	r3, [r5, #12]
 801484c:	9301      	str	r3, [sp, #4]
 801484e:	1076      	asrs	r6, r6, #1
 8014850:	3001      	adds	r0, #1
 8014852:	6961      	ldr	r1, [r4, #20]
 8014854:	3a01      	subs	r2, #1
 8014856:	1e73      	subs	r3, r6, #1
 8014858:	f005 f918 	bl	8019a8c <GUI_DrawGradientV>
 801485c:	6929      	ldr	r1, [r5, #16]
 801485e:	6920      	ldr	r0, [r4, #16]
 8014860:	69a2      	ldr	r2, [r4, #24]
 8014862:	69e3      	ldr	r3, [r4, #28]
 8014864:	9100      	str	r1, [sp, #0]
 8014866:	6969      	ldr	r1, [r5, #20]
 8014868:	9101      	str	r1, [sp, #4]
 801486a:	3001      	adds	r0, #1
 801486c:	4631      	mov	r1, r6
 801486e:	3a01      	subs	r2, #1
 8014870:	e100      	b.n	8014a74 <HEADER_DrawSkinFlex+0x284>
 8014872:	2b0c      	cmp	r3, #12
 8014874:	f000 80d4 	beq.w	8014a20 <HEADER_DrawSkinFlex+0x230>
 8014878:	2b12      	cmp	r3, #18
 801487a:	d04c      	beq.n	8014916 <HEADER_DrawSkinFlex+0x126>
 801487c:	e0fd      	b.n	8014a7a <HEADER_DrawSkinFlex+0x28a>
 801487e:	6800      	ldr	r0, [r0, #0]
 8014880:	f7ff f83c 	bl	80138fc <GUI_ALLOC_LockH>
 8014884:	ab06      	add	r3, sp, #24
 8014886:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8014888:	f843 0d0c 	str.w	r0, [r3, #-12]!
 801488c:	4618      	mov	r0, r3
 801488e:	f7ff f843 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014892:	4628      	mov	r0, r5
 8014894:	68a1      	ldr	r1, [r4, #8]
 8014896:	f7f6 fb13 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 801489a:	9004      	str	r0, [sp, #16]
 801489c:	2800      	cmp	r0, #0
 801489e:	f000 80ec 	beq.w	8014a7a <HEADER_DrawSkinFlex+0x28a>
 80148a2:	6885      	ldr	r5, [r0, #8]
 80148a4:	8886      	ldrh	r6, [r0, #4]
 80148a6:	f8d0 8000 	ldr.w	r8, [r0]
 80148aa:	a804      	add	r0, sp, #16
 80148ac:	f7ff f834 	bl	8013918 <GUI_ALLOC_UnlockH>
 80148b0:	4628      	mov	r0, r5
 80148b2:	f000 f9a3 	bl	8014bfc <GUI_DRAW__GetXSize>
 80148b6:	4607      	mov	r7, r0
 80148b8:	4628      	mov	r0, r5
 80148ba:	f000 f9b1 	bl	8014c20 <GUI_DRAW__GetYSize>
 80148be:	f006 0103 	and.w	r1, r6, #3
 80148c2:	2901      	cmp	r1, #1
 80148c4:	d006      	beq.n	80148d4 <HEADER_DrawSkinFlex+0xe4>
 80148c6:	2902      	cmp	r1, #2
 80148c8:	d107      	bne.n	80148da <HEADER_DrawSkinFlex+0xea>
 80148ca:	ebc7 0208 	rsb	r2, r7, r8
 80148ce:	fb92 f2f1 	sdiv	r2, r2, r1
 80148d2:	e003      	b.n	80148dc <HEADER_DrawSkinFlex+0xec>
 80148d4:	ebc7 0208 	rsb	r2, r7, r8
 80148d8:	e000      	b.n	80148dc <HEADER_DrawSkinFlex+0xec>
 80148da:	2200      	movs	r2, #0
 80148dc:	f006 030c 	and.w	r3, r6, #12
 80148e0:	2b04      	cmp	r3, #4
 80148e2:	6966      	ldr	r6, [r4, #20]
 80148e4:	d009      	beq.n	80148fa <HEADER_DrawSkinFlex+0x10a>
 80148e6:	2b0c      	cmp	r3, #12
 80148e8:	d10c      	bne.n	8014904 <HEADER_DrawSkinFlex+0x114>
 80148ea:	69e3      	ldr	r3, [r4, #28]
 80148ec:	1b9b      	subs	r3, r3, r6
 80148ee:	3301      	adds	r3, #1
 80148f0:	1a1b      	subs	r3, r3, r0
 80148f2:	2102      	movs	r1, #2
 80148f4:	fb93 f3f1 	sdiv	r3, r3, r1
 80148f8:	e005      	b.n	8014906 <HEADER_DrawSkinFlex+0x116>
 80148fa:	69e3      	ldr	r3, [r4, #28]
 80148fc:	1b9b      	subs	r3, r3, r6
 80148fe:	3301      	adds	r3, #1
 8014900:	1a1b      	subs	r3, r3, r0
 8014902:	e000      	b.n	8014906 <HEADER_DrawSkinFlex+0x116>
 8014904:	2300      	movs	r3, #0
 8014906:	6927      	ldr	r7, [r4, #16]
 8014908:	6821      	ldr	r1, [r4, #0]
 801490a:	4628      	mov	r0, r5
 801490c:	443a      	add	r2, r7
 801490e:	4433      	add	r3, r6
 8014910:	f000 f95b 	bl	8014bca <GUI_DRAW__Draw>
 8014914:	e0b1      	b.n	8014a7a <HEADER_DrawSkinFlex+0x28a>
 8014916:	6800      	ldr	r0, [r0, #0]
 8014918:	f7fe fff0 	bl	80138fc <GUI_ALLOC_LockH>
 801491c:	4603      	mov	r3, r0
 801491e:	a806      	add	r0, sp, #24
 8014920:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8014922:	f840 3d10 	str.w	r3, [r0, #-16]!
 8014926:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8014928:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801492a:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 801492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014930:	f8d3 9000 	ldr.w	r9, [r3]
 8014934:	f7fe fff0 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014938:	4628      	mov	r0, r5
 801493a:	68a1      	ldr	r1, [r4, #8]
 801493c:	f7f6 fac0 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 8014940:	9003      	str	r0, [sp, #12]
 8014942:	2800      	cmp	r0, #0
 8014944:	f000 8099 	beq.w	8014a7a <HEADER_DrawSkinFlex+0x28a>
 8014948:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 801494c:	f100 0a0c 	add.w	sl, r0, #12
 8014950:	a803      	add	r0, sp, #12
 8014952:	f7fe ffe1 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014956:	6923      	ldr	r3, [r4, #16]
 8014958:	f8ad 3010 	strh.w	r3, [sp, #16]
 801495c:	6963      	ldr	r3, [r4, #20]
 801495e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8014962:	a804      	add	r0, sp, #16
 8014964:	69a3      	ldr	r3, [r4, #24]
 8014966:	f8ad 3014 	strh.w	r3, [sp, #20]
 801496a:	4601      	mov	r1, r0
 801496c:	69e3      	ldr	r3, [r4, #28]
 801496e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014972:	464a      	mov	r2, r9
 8014974:	f7fc f936 	bl	8010be4 <GUI__ReduceRect>
 8014978:	68a3      	ldr	r3, [r4, #8]
 801497a:	4598      	cmp	r8, r3
 801497c:	d10e      	bne.n	801499c <HEADER_DrawSkinFlex+0x1ac>
 801497e:	69e1      	ldr	r1, [r4, #28]
 8014980:	6963      	ldr	r3, [r4, #20]
 8014982:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014986:	1acb      	subs	r3, r1, r3
 8014988:	3b04      	subs	r3, #4
 801498a:	2103      	movs	r1, #3
 801498c:	fb93 f3f1 	sdiv	r3, r3, r1
 8014990:	3a01      	subs	r2, #1
 8014992:	3b01      	subs	r3, #1
 8014994:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8014998:	f8ad 3014 	strh.w	r3, [sp, #20]
 801499c:	4638      	mov	r0, r7
 801499e:	f7fd fa97 	bl	8011ed0 <GUI_SetColor>
 80149a2:	2002      	movs	r0, #2
 80149a4:	f7fd fa4a 	bl	8011e3c <GUI_SetTextMode>
 80149a8:	4630      	mov	r0, r6
 80149aa:	f7fd fa63 	bl	8011e74 <GUI_SetFont>
 80149ae:	4650      	mov	r0, sl
 80149b0:	a904      	add	r1, sp, #16
 80149b2:	462a      	mov	r2, r5
 80149b4:	f005 fa0d 	bl	8019dd2 <GUI_DispStringInRect>
 80149b8:	e05f      	b.n	8014a7a <HEADER_DrawSkinFlex+0x28a>
 80149ba:	6800      	ldr	r0, [r0, #0]
 80149bc:	f7fe ff9e 	bl	80138fc <GUI_ALLOC_LockH>
 80149c0:	ab06      	add	r3, sp, #24
 80149c2:	6e47      	ldr	r7, [r0, #100]	; 0x64
 80149c4:	f843 0d08 	str.w	r0, [r3, #-8]!
 80149c8:	4618      	mov	r0, r3
 80149ca:	f7fe ffa5 	bl	8013918 <GUI_ALLOC_UnlockH>
 80149ce:	6963      	ldr	r3, [r4, #20]
 80149d0:	69e2      	ldr	r2, [r4, #28]
 80149d2:	69a6      	ldr	r6, [r4, #24]
 80149d4:	ebc3 0802 	rsb	r8, r3, r2
 80149d8:	4b2a      	ldr	r3, [pc, #168]	; (8014a84 <HEADER_DrawSkinFlex+0x294>)
 80149da:	2103      	movs	r1, #3
 80149dc:	f1a8 0804 	sub.w	r8, r8, #4
 80149e0:	fb98 f8f1 	sdiv	r8, r8, r1
 80149e4:	6998      	ldr	r0, [r3, #24]
 80149e6:	f108 39ff 	add.w	r9, r8, #4294967295
 80149ea:	f7fd fa71 	bl	8011ed0 <GUI_SetColor>
 80149ee:	3e04      	subs	r6, #4
 80149f0:	69e5      	ldr	r5, [r4, #28]
 80149f2:	6963      	ldr	r3, [r4, #20]
 80149f4:	007f      	lsls	r7, r7, #1
 80149f6:	ebc9 0606 	rsb	r6, r9, r6
 80149fa:	f1c7 0701 	rsb	r7, r7, #1
 80149fe:	ea4f 0969 	mov.w	r9, r9, asr #1
 8014a02:	1aed      	subs	r5, r5, r3
 8014a04:	fb07 f909 	mul.w	r9, r7, r9
 8014a08:	ebc9 0565 	rsb	r5, r9, r5, asr #1
 8014a0c:	4644      	mov	r4, r8
 8014a0e:	3c01      	subs	r4, #1
 8014a10:	d433      	bmi.n	8014a7a <HEADER_DrawSkinFlex+0x28a>
 8014a12:	4628      	mov	r0, r5
 8014a14:	1b31      	subs	r1, r6, r4
 8014a16:	1932      	adds	r2, r6, r4
 8014a18:	f7fd fee4 	bl	80127e4 <GUI_DrawHLine>
 8014a1c:	443d      	add	r5, r7
 8014a1e:	e7f6      	b.n	8014a0e <HEADER_DrawSkinFlex+0x21e>
 8014a20:	4d18      	ldr	r5, [pc, #96]	; (8014a84 <HEADER_DrawSkinFlex+0x294>)
 8014a22:	6943      	ldr	r3, [r0, #20]
 8014a24:	69c6      	ldr	r6, [r0, #28]
 8014a26:	6828      	ldr	r0, [r5, #0]
 8014a28:	441e      	add	r6, r3
 8014a2a:	f7fd fa51 	bl	8011ed0 <GUI_SetColor>
 8014a2e:	6921      	ldr	r1, [r4, #16]
 8014a30:	69a2      	ldr	r2, [r4, #24]
 8014a32:	69e0      	ldr	r0, [r4, #28]
 8014a34:	f7fd fed6 	bl	80127e4 <GUI_DrawHLine>
 8014a38:	6868      	ldr	r0, [r5, #4]
 8014a3a:	f7fd fa49 	bl	8011ed0 <GUI_SetColor>
 8014a3e:	69e2      	ldr	r2, [r4, #28]
 8014a40:	6920      	ldr	r0, [r4, #16]
 8014a42:	6961      	ldr	r1, [r4, #20]
 8014a44:	3a01      	subs	r2, #1
 8014a46:	f7fd fc55 	bl	80122f4 <GUI_DrawVLine>
 8014a4a:	68ab      	ldr	r3, [r5, #8]
 8014a4c:	6920      	ldr	r0, [r4, #16]
 8014a4e:	9300      	str	r3, [sp, #0]
 8014a50:	68eb      	ldr	r3, [r5, #12]
 8014a52:	9301      	str	r3, [sp, #4]
 8014a54:	1076      	asrs	r6, r6, #1
 8014a56:	3001      	adds	r0, #1
 8014a58:	6961      	ldr	r1, [r4, #20]
 8014a5a:	69a2      	ldr	r2, [r4, #24]
 8014a5c:	1e73      	subs	r3, r6, #1
 8014a5e:	f005 f815 	bl	8019a8c <GUI_DrawGradientV>
 8014a62:	692a      	ldr	r2, [r5, #16]
 8014a64:	6920      	ldr	r0, [r4, #16]
 8014a66:	69e3      	ldr	r3, [r4, #28]
 8014a68:	9200      	str	r2, [sp, #0]
 8014a6a:	696a      	ldr	r2, [r5, #20]
 8014a6c:	9201      	str	r2, [sp, #4]
 8014a6e:	69a2      	ldr	r2, [r4, #24]
 8014a70:	3001      	adds	r0, #1
 8014a72:	4631      	mov	r1, r6
 8014a74:	3b01      	subs	r3, #1
 8014a76:	f005 f809 	bl	8019a8c <GUI_DrawGradientV>
 8014a7a:	2000      	movs	r0, #0
 8014a7c:	b006      	add	sp, #24
 8014a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a82:	bf00      	nop
 8014a84:	20000138 	.word	0x20000138

08014a88 <_Create>:
 8014a88:	b530      	push	{r4, r5, lr}
 8014a8a:	b08b      	sub	sp, #44	; 0x2c
 8014a8c:	4605      	mov	r5, r0
 8014a8e:	f7fe ff35 	bl	80138fc <GUI_ALLOC_LockH>
 8014a92:	ab0a      	add	r3, sp, #40	; 0x28
 8014a94:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8014a96:	f843 0d28 	str.w	r0, [r3, #-40]!
 8014a9a:	4668      	mov	r0, sp
 8014a9c:	6894      	ldr	r4, [r2, #8]
 8014a9e:	f7fe ff3b 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014aa2:	a80a      	add	r0, sp, #40	; 0x28
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	9302      	str	r3, [sp, #8]
 8014aa8:	f840 5d24 	str.w	r5, [r0, #-36]!
 8014aac:	6823      	ldr	r3, [r4, #0]
 8014aae:	4798      	blx	r3
 8014ab0:	b00b      	add	sp, #44	; 0x2c
 8014ab2:	bd30      	pop	{r4, r5, pc}

08014ab4 <_Paint>:
 8014ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab8:	b093      	sub	sp, #76	; 0x4c
 8014aba:	4683      	mov	fp, r0
 8014abc:	f7fe ff1e 	bl	80138fc <GUI_ALLOC_LockH>
 8014ac0:	4604      	mov	r4, r0
 8014ac2:	a812      	add	r0, sp, #72	; 0x48
 8014ac4:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8014ac6:	f840 4d3c 	str.w	r4, [r0, #-60]!
 8014aca:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8014acc:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8014ace:	f8d4 9068 	ldr.w	r9, [r4, #104]	; 0x68
 8014ad2:	f8d4 a060 	ldr.w	sl, [r4, #96]	; 0x60
 8014ad6:	f7fe ff1f 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014ada:	4630      	mov	r0, r6
 8014adc:	f7f6 f95b 	bl	800ad96 <GUI_ARRAY_GetNumItems>
 8014ae0:	a907      	add	r1, sp, #28
 8014ae2:	4680      	mov	r8, r0
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	f7f4 f8b8 	bl	8008c5a <WIDGET__GetClientRect>
 8014aea:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014aee:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014af2:	b21a      	sxth	r2, r3
 8014af4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014af8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8014afc:	920e      	str	r2, [sp, #56]	; 0x38
 8014afe:	f1c7 0b00 	rsb	fp, r7, #0
 8014b02:	b21a      	sxth	r2, r3
 8014b04:	9210      	str	r2, [sp, #64]	; 0x40
 8014b06:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014b0a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8014b0e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8014b12:	2400      	movs	r4, #0
 8014b14:	4544      	cmp	r4, r8
 8014b16:	da3e      	bge.n	8014b96 <_Paint+0xe2>
 8014b18:	4621      	mov	r1, r4
 8014b1a:	4630      	mov	r0, r6
 8014b1c:	f7f6 f9d0 	bl	800aec0 <GUI_ARRAY_GetpItemLocked>
 8014b20:	a912      	add	r1, sp, #72	; 0x48
 8014b22:	6883      	ldr	r3, [r0, #8]
 8014b24:	f841 0d38 	str.w	r0, [r1, #-56]!
 8014b28:	6802      	ldr	r2, [r0, #0]
 8014b2a:	9201      	str	r2, [sp, #4]
 8014b2c:	4608      	mov	r0, r1
 8014b2e:	9300      	str	r3, [sp, #0]
 8014b30:	f7fe fef2 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014b34:	454c      	cmp	r4, r9
 8014b36:	bfb4      	ite	lt
 8014b38:	4639      	movlt	r1, r7
 8014b3a:	2100      	movge	r1, #0
 8014b3c:	9a01      	ldr	r2, [sp, #4]
 8014b3e:	448b      	add	fp, r1
 8014b40:	445a      	add	r2, fp
 8014b42:	3a01      	subs	r2, #1
 8014b44:	a805      	add	r0, sp, #20
 8014b46:	920f      	str	r2, [sp, #60]	; 0x3c
 8014b48:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014b4c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8014b50:	f8ad b014 	strh.w	fp, [sp, #20]
 8014b54:	f7f7 fb46 	bl	800c1e4 <WM_SetUserClipRect>
 8014b58:	2205      	movs	r2, #5
 8014b5a:	940b      	str	r4, [sp, #44]	; 0x2c
 8014b5c:	920a      	str	r2, [sp, #40]	; 0x28
 8014b5e:	a809      	add	r0, sp, #36	; 0x24
 8014b60:	47a8      	blx	r5
 8014b62:	9b00      	ldr	r3, [sp, #0]
 8014b64:	b11b      	cbz	r3, 8014b6e <_Paint+0xba>
 8014b66:	2306      	movs	r3, #6
 8014b68:	930a      	str	r3, [sp, #40]	; 0x28
 8014b6a:	a809      	add	r0, sp, #36	; 0x24
 8014b6c:	47a8      	blx	r5
 8014b6e:	2312      	movs	r3, #18
 8014b70:	930a      	str	r3, [sp, #40]	; 0x28
 8014b72:	a809      	add	r0, sp, #36	; 0x24
 8014b74:	47a8      	blx	r5
 8014b76:	45a2      	cmp	sl, r4
 8014b78:	d103      	bne.n	8014b82 <_Paint+0xce>
 8014b7a:	2302      	movs	r3, #2
 8014b7c:	930a      	str	r3, [sp, #40]	; 0x28
 8014b7e:	a809      	add	r0, sp, #36	; 0x24
 8014b80:	47a8      	blx	r5
 8014b82:	2000      	movs	r0, #0
 8014b84:	f7f7 fb2e 	bl	800c1e4 <WM_SetUserClipRect>
 8014b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014b8c:	1ad3      	subs	r3, r2, r3
 8014b8e:	3301      	adds	r3, #1
 8014b90:	449b      	add	fp, r3
 8014b92:	3401      	adds	r4, #1
 8014b94:	e7be      	b.n	8014b14 <_Paint+0x60>
 8014b96:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014b9a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014b9c:	b21a      	sxth	r2, r3
 8014b9e:	4291      	cmp	r1, r2
 8014ba0:	da10      	bge.n	8014bc4 <_Paint+0x110>
 8014ba2:	a805      	add	r0, sp, #20
 8014ba4:	920f      	str	r2, [sp, #60]	; 0x3c
 8014ba6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014baa:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8014bae:	f8ad b014 	strh.w	fp, [sp, #20]
 8014bb2:	f7f7 fb17 	bl	800c1e4 <WM_SetUserClipRect>
 8014bb6:	230c      	movs	r3, #12
 8014bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8014bba:	a809      	add	r0, sp, #36	; 0x24
 8014bbc:	47a8      	blx	r5
 8014bbe:	2000      	movs	r0, #0
 8014bc0:	f7f7 fb10 	bl	800c1e4 <WM_SetUserClipRect>
 8014bc4:	b013      	add	sp, #76	; 0x4c
 8014bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014bca <GUI_DRAW__Draw>:
 8014bca:	e92d 43e3 	stmdb	sp!, {r0, r1, r5, r6, r7, r8, r9, lr}
 8014bce:	4688      	mov	r8, r1
 8014bd0:	4617      	mov	r7, r2
 8014bd2:	461e      	mov	r6, r3
 8014bd4:	4681      	mov	r9, r0
 8014bd6:	b170      	cbz	r0, 8014bf6 <GUI_DRAW__Draw+0x2c>
 8014bd8:	f7fe fe90 	bl	80138fc <GUI_ALLOC_LockH>
 8014bdc:	4605      	mov	r5, r0
 8014bde:	a802      	add	r0, sp, #8
 8014be0:	682b      	ldr	r3, [r5, #0]
 8014be2:	f840 5d04 	str.w	r5, [r0, #-4]!
 8014be6:	681d      	ldr	r5, [r3, #0]
 8014be8:	f7fe fe96 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014bec:	4648      	mov	r0, r9
 8014bee:	4641      	mov	r1, r8
 8014bf0:	463a      	mov	r2, r7
 8014bf2:	4633      	mov	r3, r6
 8014bf4:	47a8      	blx	r5
 8014bf6:	b002      	add	sp, #8
 8014bf8:	e8bd 83e0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, pc}

08014bfc <GUI_DRAW__GetXSize>:
 8014bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014bfe:	4604      	mov	r4, r0
 8014c00:	b160      	cbz	r0, 8014c1c <GUI_DRAW__GetXSize+0x20>
 8014c02:	f7fe fe7b 	bl	80138fc <GUI_ALLOC_LockH>
 8014c06:	ab02      	add	r3, sp, #8
 8014c08:	6802      	ldr	r2, [r0, #0]
 8014c0a:	f843 0d04 	str.w	r0, [r3, #-4]!
 8014c0e:	4618      	mov	r0, r3
 8014c10:	6855      	ldr	r5, [r2, #4]
 8014c12:	f7fe fe81 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014c16:	4620      	mov	r0, r4
 8014c18:	47a8      	blx	r5
 8014c1a:	e7ff      	b.n	8014c1c <GUI_DRAW__GetXSize+0x20>
 8014c1c:	b003      	add	sp, #12
 8014c1e:	bd30      	pop	{r4, r5, pc}

08014c20 <GUI_DRAW__GetYSize>:
 8014c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c22:	4604      	mov	r4, r0
 8014c24:	b160      	cbz	r0, 8014c40 <GUI_DRAW__GetYSize+0x20>
 8014c26:	f7fe fe69 	bl	80138fc <GUI_ALLOC_LockH>
 8014c2a:	ab02      	add	r3, sp, #8
 8014c2c:	6802      	ldr	r2, [r0, #0]
 8014c2e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8014c32:	4618      	mov	r0, r3
 8014c34:	6895      	ldr	r5, [r2, #8]
 8014c36:	f7fe fe6f 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014c3a:	4620      	mov	r0, r4
 8014c3c:	47a8      	blx	r5
 8014c3e:	e7ff      	b.n	8014c40 <GUI_DRAW__GetYSize+0x20>
 8014c40:	b003      	add	sp, #12
 8014c42:	bd30      	pop	{r4, r5, pc}

08014c44 <BUTTON_DrawSkinFlex>:
 8014c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c48:	6883      	ldr	r3, [r0, #8]
 8014c4a:	4a8a      	ldr	r2, [pc, #552]	; (8014e74 <BUTTON_DrawSkinFlex+0x230>)
 8014c4c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8014c50:	6843      	ldr	r3, [r0, #4]
 8014c52:	2b05      	cmp	r3, #5
 8014c54:	b088      	sub	sp, #32
 8014c56:	4604      	mov	r4, r0
 8014c58:	d00e      	beq.n	8014c78 <BUTTON_DrawSkinFlex+0x34>
 8014c5a:	dc06      	bgt.n	8014c6a <BUTTON_DrawSkinFlex+0x26>
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	f040 8104 	bne.w	8014e6a <BUTTON_DrawSkinFlex+0x226>
 8014c62:	6800      	ldr	r0, [r0, #0]
 8014c64:	f7f7 faca 	bl	800c1fc <WM_SetHasTrans>
 8014c68:	e0ff      	b.n	8014e6a <BUTTON_DrawSkinFlex+0x226>
 8014c6a:	2b06      	cmp	r3, #6
 8014c6c:	f000 8088 	beq.w	8014d80 <BUTTON_DrawSkinFlex+0x13c>
 8014c70:	2b12      	cmp	r3, #18
 8014c72:	f000 80a9 	beq.w	8014dc8 <BUTTON_DrawSkinFlex+0x184>
 8014c76:	e0f8      	b.n	8014e6a <BUTTON_DrawSkinFlex+0x226>
 8014c78:	69ee      	ldr	r6, [r5, #28]
 8014c7a:	2e00      	cmp	r6, #0
 8014c7c:	d051      	beq.n	8014d22 <BUTTON_DrawSkinFlex+0xde>
 8014c7e:	9600      	str	r6, [sp, #0]
 8014c80:	682b      	ldr	r3, [r5, #0]
 8014c82:	9301      	str	r3, [sp, #4]
 8014c84:	686b      	ldr	r3, [r5, #4]
 8014c86:	9302      	str	r3, [sp, #8]
 8014c88:	68ab      	ldr	r3, [r5, #8]
 8014c8a:	9303      	str	r3, [sp, #12]
 8014c8c:	3010      	adds	r0, #16
 8014c8e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8014c90:	f002 fc48 	bl	8017524 <GUI__DrawTwinArc4>
 8014c94:	2600      	movs	r6, #0
 8014c96:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8014c9a:	f7fd f919 	bl	8011ed0 <GUI_SetColor>
 8014c9e:	69eb      	ldr	r3, [r5, #28]
 8014ca0:	6960      	ldr	r0, [r4, #20]
 8014ca2:	6921      	ldr	r1, [r4, #16]
 8014ca4:	69a2      	ldr	r2, [r4, #24]
 8014ca6:	4430      	add	r0, r6
 8014ca8:	4419      	add	r1, r3
 8014caa:	1ad2      	subs	r2, r2, r3
 8014cac:	f7fd fd9a 	bl	80127e4 <GUI_DrawHLine>
 8014cb0:	69eb      	ldr	r3, [r5, #28]
 8014cb2:	69e0      	ldr	r0, [r4, #28]
 8014cb4:	6921      	ldr	r1, [r4, #16]
 8014cb6:	69a2      	ldr	r2, [r4, #24]
 8014cb8:	1b80      	subs	r0, r0, r6
 8014cba:	4419      	add	r1, r3
 8014cbc:	1ad2      	subs	r2, r2, r3
 8014cbe:	f7fd fd91 	bl	80127e4 <GUI_DrawHLine>
 8014cc2:	69eb      	ldr	r3, [r5, #28]
 8014cc4:	6920      	ldr	r0, [r4, #16]
 8014cc6:	6961      	ldr	r1, [r4, #20]
 8014cc8:	69e2      	ldr	r2, [r4, #28]
 8014cca:	4430      	add	r0, r6
 8014ccc:	4419      	add	r1, r3
 8014cce:	1ad2      	subs	r2, r2, r3
 8014cd0:	f7fd fb10 	bl	80122f4 <GUI_DrawVLine>
 8014cd4:	69eb      	ldr	r3, [r5, #28]
 8014cd6:	69a0      	ldr	r0, [r4, #24]
 8014cd8:	6961      	ldr	r1, [r4, #20]
 8014cda:	69e2      	ldr	r2, [r4, #28]
 8014cdc:	1b80      	subs	r0, r0, r6
 8014cde:	4419      	add	r1, r3
 8014ce0:	1ad2      	subs	r2, r2, r3
 8014ce2:	3601      	adds	r6, #1
 8014ce4:	f7fd fb06 	bl	80122f4 <GUI_DrawVLine>
 8014ce8:	2e02      	cmp	r6, #2
 8014cea:	d1d4      	bne.n	8014c96 <BUTTON_DrawSkinFlex+0x52>
 8014cec:	68a8      	ldr	r0, [r5, #8]
 8014cee:	f7fd f8ef 	bl	8011ed0 <GUI_SetColor>
 8014cf2:	69eb      	ldr	r3, [r5, #28]
 8014cf4:	6920      	ldr	r0, [r4, #16]
 8014cf6:	69e6      	ldr	r6, [r4, #28]
 8014cf8:	6961      	ldr	r1, [r4, #20]
 8014cfa:	18c2      	adds	r2, r0, r3
 8014cfc:	4419      	add	r1, r3
 8014cfe:	3002      	adds	r0, #2
 8014d00:	1af3      	subs	r3, r6, r3
 8014d02:	3a01      	subs	r2, #1
 8014d04:	f7fd fab0 	bl	8012268 <GUI_FillRect>
 8014d08:	69eb      	ldr	r3, [r5, #28]
 8014d0a:	69a2      	ldr	r2, [r4, #24]
 8014d0c:	69e6      	ldr	r6, [r4, #28]
 8014d0e:	6961      	ldr	r1, [r4, #20]
 8014d10:	1ad0      	subs	r0, r2, r3
 8014d12:	4419      	add	r1, r3
 8014d14:	3001      	adds	r0, #1
 8014d16:	1af3      	subs	r3, r6, r3
 8014d18:	3a02      	subs	r2, #2
 8014d1a:	f7fd faa5 	bl	8012268 <GUI_FillRect>
 8014d1e:	69ee      	ldr	r6, [r5, #28]
 8014d20:	e00f      	b.n	8014d42 <BUTTON_DrawSkinFlex+0xfe>
 8014d22:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8014d26:	f7fd f8d3 	bl	8011ed0 <GUI_SetColor>
 8014d2a:	f104 0010 	add.w	r0, r4, #16
 8014d2e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8014d30:	4430      	add	r0, r6
 8014d32:	4431      	add	r1, r6
 8014d34:	1b92      	subs	r2, r2, r6
 8014d36:	1b9b      	subs	r3, r3, r6
 8014d38:	3601      	adds	r6, #1
 8014d3a:	f7ff f8f1 	bl	8013f20 <GUI_DrawRect>
 8014d3e:	2e02      	cmp	r6, #2
 8014d40:	d1ef      	bne.n	8014d22 <BUTTON_DrawSkinFlex+0xde>
 8014d42:	f104 0010 	add.w	r0, r4, #16
 8014d46:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8014d48:	68ef      	ldr	r7, [r5, #12]
 8014d4a:	9700      	str	r7, [sp, #0]
 8014d4c:	692f      	ldr	r7, [r5, #16]
 8014d4e:	9701      	str	r7, [sp, #4]
 8014d50:	440b      	add	r3, r1
 8014d52:	4430      	add	r0, r6
 8014d54:	1b92      	subs	r2, r2, r6
 8014d56:	3102      	adds	r1, #2
 8014d58:	105b      	asrs	r3, r3, #1
 8014d5a:	f004 fe97 	bl	8019a8c <GUI_DrawGradientV>
 8014d5e:	69e3      	ldr	r3, [r4, #28]
 8014d60:	6962      	ldr	r2, [r4, #20]
 8014d62:	6920      	ldr	r0, [r4, #16]
 8014d64:	441a      	add	r2, r3
 8014d66:	1051      	asrs	r1, r2, #1
 8014d68:	69a2      	ldr	r2, [r4, #24]
 8014d6a:	696c      	ldr	r4, [r5, #20]
 8014d6c:	9400      	str	r4, [sp, #0]
 8014d6e:	69ac      	ldr	r4, [r5, #24]
 8014d70:	9401      	str	r4, [sp, #4]
 8014d72:	4430      	add	r0, r6
 8014d74:	3101      	adds	r1, #1
 8014d76:	1b92      	subs	r2, r2, r6
 8014d78:	3b02      	subs	r3, #2
 8014d7a:	f004 fe87 	bl	8019a8c <GUI_DrawGradientV>
 8014d7e:	e074      	b.n	8014e6a <BUTTON_DrawSkinFlex+0x226>
 8014d80:	6800      	ldr	r0, [r0, #0]
 8014d82:	f7fe fdbb 	bl	80138fc <GUI_ALLOC_LockH>
 8014d86:	9004      	str	r0, [sp, #16]
 8014d88:	6820      	ldr	r0, [r4, #0]
 8014d8a:	f000 f8e5 	bl	8014f58 <WM__IsEnabled>
 8014d8e:	9b04      	ldr	r3, [sp, #16]
 8014d90:	b130      	cbz	r0, 8014da0 <BUTTON_DrawSkinFlex+0x15c>
 8014d92:	68a2      	ldr	r2, [r4, #8]
 8014d94:	b952      	cbnz	r2, 8014dac <BUTTON_DrawSkinFlex+0x168>
 8014d96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014d98:	3200      	adds	r2, #0
 8014d9a:	bf18      	it	ne
 8014d9c:	2201      	movne	r2, #1
 8014d9e:	e006      	b.n	8014dae <BUTTON_DrawSkinFlex+0x16a>
 8014da0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8014da2:	2a00      	cmp	r2, #0
 8014da4:	bf0c      	ite	eq
 8014da6:	2200      	moveq	r2, #0
 8014da8:	2202      	movne	r2, #2
 8014daa:	e000      	b.n	8014dae <BUTTON_DrawSkinFlex+0x16a>
 8014dac:	2200      	movs	r2, #0
 8014dae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014db2:	a804      	add	r0, sp, #16
 8014db4:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8014db6:	f7fe fdaf 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014dba:	2200      	movs	r2, #0
 8014dbc:	4628      	mov	r0, r5
 8014dbe:	6821      	ldr	r1, [r4, #0]
 8014dc0:	4613      	mov	r3, r2
 8014dc2:	f7ff ff02 	bl	8014bca <GUI_DRAW__Draw>
 8014dc6:	e050      	b.n	8014e6a <BUTTON_DrawSkinFlex+0x226>
 8014dc8:	6800      	ldr	r0, [r0, #0]
 8014dca:	f7fe fd97 	bl	80138fc <GUI_ALLOC_LockH>
 8014dce:	ae08      	add	r6, sp, #32
 8014dd0:	6e87      	ldr	r7, [r0, #104]	; 0x68
 8014dd2:	f846 0d10 	str.w	r0, [r6, #-16]!
 8014dd6:	2f00      	cmp	r7, #0
 8014dd8:	d044      	beq.n	8014e64 <BUTTON_DrawSkinFlex+0x220>
 8014dda:	68a2      	ldr	r2, [r4, #8]
 8014ddc:	f9b0 805c 	ldrsh.w	r8, [r0, #92]	; 0x5c
 8014de0:	b122      	cbz	r2, 8014dec <BUTTON_DrawSkinFlex+0x1a8>
 8014de2:	2a03      	cmp	r2, #3
 8014de4:	bf14      	ite	ne
 8014de6:	2100      	movne	r1, #0
 8014de8:	2102      	moveq	r1, #2
 8014dea:	e000      	b.n	8014dee <BUTTON_DrawSkinFlex+0x1aa>
 8014dec:	2101      	movs	r1, #1
 8014dee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014df2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8014df4:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8014df6:	f7fd f83d 	bl	8011e74 <GUI_SetFont>
 8014dfa:	4620      	mov	r0, r4
 8014dfc:	f7fd f868 	bl	8011ed0 <GUI_SetColor>
 8014e00:	a806      	add	r0, sp, #24
 8014e02:	f004 fbec 	bl	80195de <GUI_GetClientRect>
 8014e06:	8bab      	ldrh	r3, [r5, #28]
 8014e08:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8014e0c:	441a      	add	r2, r3
 8014e0e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014e12:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8014e16:	1ad3      	subs	r3, r2, r3
 8014e18:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014e1c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8014e20:	3302      	adds	r3, #2
 8014e22:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014e26:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014e2a:	3b02      	subs	r3, #2
 8014e2c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014e30:	9b04      	ldr	r3, [sp, #16]
 8014e32:	a806      	add	r0, sp, #24
 8014e34:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 8014e38:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 8014e3c:	f7fd f9ae 	bl	801219c <GUI_MoveRect>
 8014e40:	4630      	mov	r0, r6
 8014e42:	f7fe fd69 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014e46:	2002      	movs	r0, #2
 8014e48:	f7fc fff8 	bl	8011e3c <GUI_SetTextMode>
 8014e4c:	4638      	mov	r0, r7
 8014e4e:	f7fe fd55 	bl	80138fc <GUI_ALLOC_LockH>
 8014e52:	ac08      	add	r4, sp, #32
 8014e54:	a906      	add	r1, sp, #24
 8014e56:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8014e5a:	4642      	mov	r2, r8
 8014e5c:	f004 ffb9 	bl	8019dd2 <GUI_DispStringInRect>
 8014e60:	4620      	mov	r0, r4
 8014e62:	e000      	b.n	8014e66 <BUTTON_DrawSkinFlex+0x222>
 8014e64:	4630      	mov	r0, r6
 8014e66:	f7fe fd57 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014e6a:	2000      	movs	r0, #0
 8014e6c:	b008      	add	sp, #32
 8014e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e72:	bf00      	nop
 8014e74:	08020c1c 	.word	0x08020c1c

08014e78 <_Create>:
 8014e78:	b530      	push	{r4, r5, lr}
 8014e7a:	b08b      	sub	sp, #44	; 0x2c
 8014e7c:	2100      	movs	r1, #0
 8014e7e:	4604      	mov	r4, r0
 8014e80:	2224      	movs	r2, #36	; 0x24
 8014e82:	a801      	add	r0, sp, #4
 8014e84:	f005 fccc 	bl	801a820 <memset>
 8014e88:	4620      	mov	r0, r4
 8014e8a:	f7fe fd37 	bl	80138fc <GUI_ALLOC_LockH>
 8014e8e:	ab0a      	add	r3, sp, #40	; 0x28
 8014e90:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8014e92:	f843 0d28 	str.w	r0, [r3, #-40]!
 8014e96:	6895      	ldr	r5, [r2, #8]
 8014e98:	4668      	mov	r0, sp
 8014e9a:	f7fe fd3d 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	9302      	str	r3, [sp, #8]
 8014ea2:	9401      	str	r4, [sp, #4]
 8014ea4:	682b      	ldr	r3, [r5, #0]
 8014ea6:	a801      	add	r0, sp, #4
 8014ea8:	4798      	blx	r3
 8014eaa:	b00b      	add	sp, #44	; 0x2c
 8014eac:	bd30      	pop	{r4, r5, pc}

08014eae <_Paint>:
 8014eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eb2:	b08a      	sub	sp, #40	; 0x28
 8014eb4:	4605      	mov	r5, r0
 8014eb6:	f7fe fd21 	bl	80138fc <GUI_ALLOC_LockH>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	a80a      	add	r0, sp, #40	; 0x28
 8014ebe:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8014ec0:	f840 3d28 	str.w	r3, [r0, #-40]!
 8014ec4:	4668      	mov	r0, sp
 8014ec6:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8014ec8:	8e5f      	ldrh	r7, [r3, #50]	; 0x32
 8014eca:	f7fe fd25 	bl	8013918 <GUI_ALLOC_UnlockH>
 8014ece:	4628      	mov	r0, r5
 8014ed0:	f7f7 fc70 	bl	800c7b4 <WM_GetWindowSizeX>
 8014ed4:	4680      	mov	r8, r0
 8014ed6:	4628      	mov	r0, r5
 8014ed8:	f7f7 fc81 	bl	800c7de <WM_GetWindowSizeY>
 8014edc:	2300      	movs	r3, #0
 8014ede:	9306      	str	r3, [sp, #24]
 8014ee0:	9305      	str	r3, [sp, #20]
 8014ee2:	3801      	subs	r0, #1
 8014ee4:	f108 33ff 	add.w	r3, r8, #4294967295
 8014ee8:	f016 0610 	ands.w	r6, r6, #16
 8014eec:	9501      	str	r5, [sp, #4]
 8014eee:	9307      	str	r3, [sp, #28]
 8014ef0:	9008      	str	r0, [sp, #32]
 8014ef2:	d001      	beq.n	8014ef8 <_Paint+0x4a>
 8014ef4:	2303      	movs	r3, #3
 8014ef6:	e007      	b.n	8014f08 <_Paint+0x5a>
 8014ef8:	05fa      	lsls	r2, r7, #23
 8014efa:	d501      	bpl.n	8014f00 <_Paint+0x52>
 8014efc:	9603      	str	r6, [sp, #12]
 8014efe:	e004      	b.n	8014f0a <_Paint+0x5c>
 8014f00:	07fb      	lsls	r3, r7, #31
 8014f02:	bf4c      	ite	mi
 8014f04:	2301      	movmi	r3, #1
 8014f06:	2302      	movpl	r3, #2
 8014f08:	9303      	str	r3, [sp, #12]
 8014f0a:	2305      	movs	r3, #5
 8014f0c:	9302      	str	r3, [sp, #8]
 8014f0e:	a801      	add	r0, sp, #4
 8014f10:	47a0      	blx	r4
 8014f12:	2306      	movs	r3, #6
 8014f14:	9302      	str	r3, [sp, #8]
 8014f16:	a801      	add	r0, sp, #4
 8014f18:	47a0      	blx	r4
 8014f1a:	2312      	movs	r3, #18
 8014f1c:	9302      	str	r3, [sp, #8]
 8014f1e:	a801      	add	r0, sp, #4
 8014f20:	47a0      	blx	r4
 8014f22:	230a      	movs	r3, #10
 8014f24:	9302      	str	r3, [sp, #8]
 8014f26:	a801      	add	r0, sp, #4
 8014f28:	47a0      	blx	r4
 8014f2a:	b00a      	add	sp, #40	; 0x28
 8014f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014f30 <WM__SendMessageNoPara>:
 8014f30:	b530      	push	{r4, r5, lr}
 8014f32:	b085      	sub	sp, #20
 8014f34:	4604      	mov	r4, r0
 8014f36:	2210      	movs	r2, #16
 8014f38:	460d      	mov	r5, r1
 8014f3a:	4668      	mov	r0, sp
 8014f3c:	2100      	movs	r1, #0
 8014f3e:	f005 fc6f 	bl	801a820 <memset>
 8014f42:	4620      	mov	r0, r4
 8014f44:	f7fe fcd0 	bl	80138e8 <GUI_ALLOC_h2p>
 8014f48:	6903      	ldr	r3, [r0, #16]
 8014f4a:	b11b      	cbz	r3, 8014f54 <WM__SendMessageNoPara+0x24>
 8014f4c:	9401      	str	r4, [sp, #4]
 8014f4e:	9500      	str	r5, [sp, #0]
 8014f50:	4668      	mov	r0, sp
 8014f52:	4798      	blx	r3
 8014f54:	b005      	add	sp, #20
 8014f56:	bd30      	pop	{r4, r5, pc}

08014f58 <WM__IsEnabled>:
 8014f58:	b508      	push	{r3, lr}
 8014f5a:	f7fe fcc5 	bl	80138e8 <GUI_ALLOC_h2p>
 8014f5e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014f60:	f080 0010 	eor.w	r0, r0, #16
 8014f64:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8014f68:	bd08      	pop	{r3, pc}

08014f6a <WM__GetPrevSibling>:
 8014f6a:	b538      	push	{r3, r4, r5, lr}
 8014f6c:	4605      	mov	r5, r0
 8014f6e:	f000 f82d 	bl	8014fcc <WM__GetFirstSibling>
 8014f72:	4604      	mov	r4, r0
 8014f74:	b154      	cbz	r4, 8014f8c <WM__GetPrevSibling+0x22>
 8014f76:	42ac      	cmp	r4, r5
 8014f78:	d007      	beq.n	8014f8a <WM__GetPrevSibling+0x20>
 8014f7a:	4620      	mov	r0, r4
 8014f7c:	f7fe fcb4 	bl	80138e8 <GUI_ALLOC_h2p>
 8014f80:	6a03      	ldr	r3, [r0, #32]
 8014f82:	42ab      	cmp	r3, r5
 8014f84:	d002      	beq.n	8014f8c <WM__GetPrevSibling+0x22>
 8014f86:	461c      	mov	r4, r3
 8014f88:	e7f4      	b.n	8014f74 <WM__GetPrevSibling+0xa>
 8014f8a:	2400      	movs	r4, #0
 8014f8c:	4620      	mov	r0, r4
 8014f8e:	bd38      	pop	{r3, r4, r5, pc}

08014f90 <WM__GetLastSibling>:
 8014f90:	b510      	push	{r4, lr}
 8014f92:	4604      	mov	r4, r0
 8014f94:	b130      	cbz	r0, 8014fa4 <WM__GetLastSibling+0x14>
 8014f96:	4620      	mov	r0, r4
 8014f98:	f7fe fca6 	bl	80138e8 <GUI_ALLOC_h2p>
 8014f9c:	6a03      	ldr	r3, [r0, #32]
 8014f9e:	b10b      	cbz	r3, 8014fa4 <WM__GetLastSibling+0x14>
 8014fa0:	461c      	mov	r4, r3
 8014fa2:	e7f8      	b.n	8014f96 <WM__GetLastSibling+0x6>
 8014fa4:	4620      	mov	r0, r4
 8014fa6:	bd10      	pop	{r4, pc}

08014fa8 <WM__GetFocussedChild>:
 8014fa8:	b538      	push	{r3, r4, r5, lr}
 8014faa:	4d06      	ldr	r5, [pc, #24]	; (8014fc4 <WM__GetFocussedChild+0x1c>)
 8014fac:	4c06      	ldr	r4, [pc, #24]	; (8014fc8 <WM__GetFocussedChild+0x20>)
 8014fae:	682b      	ldr	r3, [r5, #0]
 8014fb0:	4601      	mov	r1, r0
 8014fb2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8014fb6:	f005 fb21 	bl	801a5fc <WM__IsChild>
 8014fba:	b110      	cbz	r0, 8014fc2 <WM__GetFocussedChild+0x1a>
 8014fbc:	682b      	ldr	r3, [r5, #0]
 8014fbe:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8014fc2:	bd38      	pop	{r3, r4, r5, pc}
 8014fc4:	2001d580 	.word	0x2001d580
 8014fc8:	2001d570 	.word	0x2001d570

08014fcc <WM__GetFirstSibling>:
 8014fcc:	b508      	push	{r3, lr}
 8014fce:	f7f7 fc51 	bl	800c874 <WM_GetParent>
 8014fd2:	b118      	cbz	r0, 8014fdc <WM__GetFirstSibling+0x10>
 8014fd4:	f7fe fc88 	bl	80138e8 <GUI_ALLOC_h2p>
 8014fd8:	69c0      	ldr	r0, [r0, #28]
 8014fda:	bd08      	pop	{r3, pc}
 8014fdc:	bd08      	pop	{r3, pc}
	...

08014fe0 <WM_ValidateWindow>:
 8014fe0:	b507      	push	{r0, r1, r2, lr}
 8014fe2:	b178      	cbz	r0, 8015004 <WM_ValidateWindow+0x24>
 8014fe4:	f7fe fc8a 	bl	80138fc <GUI_ALLOC_LockH>
 8014fe8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014fea:	9001      	str	r0, [sp, #4]
 8014fec:	069a      	lsls	r2, r3, #26
 8014fee:	d506      	bpl.n	8014ffe <WM_ValidateWindow+0x1e>
 8014ff0:	f023 0320 	bic.w	r3, r3, #32
 8014ff4:	6283      	str	r3, [r0, #40]	; 0x28
 8014ff6:	4b05      	ldr	r3, [pc, #20]	; (801500c <WM_ValidateWindow+0x2c>)
 8014ff8:	881a      	ldrh	r2, [r3, #0]
 8014ffa:	3a01      	subs	r2, #1
 8014ffc:	801a      	strh	r2, [r3, #0]
 8014ffe:	a801      	add	r0, sp, #4
 8015000:	f7fe fc8a 	bl	8013918 <GUI_ALLOC_UnlockH>
 8015004:	b003      	add	sp, #12
 8015006:	f85d fb04 	ldr.w	pc, [sp], #4
 801500a:	bf00      	nop
 801500c:	2001d578 	.word	0x2001d578

08015010 <WM__IsInModalArea>:
 8015010:	4b12      	ldr	r3, [pc, #72]	; (801505c <WM__IsInModalArea+0x4c>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	2b00      	cmp	r3, #0
 8015016:	b570      	push	{r4, r5, r6, lr}
 8015018:	4604      	mov	r4, r0
 801501a:	da0f      	bge.n	801503c <WM__IsInModalArea+0x2c>
 801501c:	4e10      	ldr	r6, [pc, #64]	; (8015060 <WM__IsInModalArea+0x50>)
 801501e:	4d11      	ldr	r5, [pc, #68]	; (8015064 <WM__IsInModalArea+0x54>)
 8015020:	6833      	ldr	r3, [r6, #0]
 8015022:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8015026:	4620      	mov	r0, r4
 8015028:	6859      	ldr	r1, [r3, #4]
 801502a:	f7f7 f89c 	bl	800c166 <WM__IsAncestor>
 801502e:	6833      	ldr	r3, [r6, #0]
 8015030:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8015034:	686a      	ldr	r2, [r5, #4]
 8015036:	686b      	ldr	r3, [r5, #4]
 8015038:	b942      	cbnz	r2, 801504c <WM__IsInModalArea+0x3c>
 801503a:	e00c      	b.n	8015056 <WM__IsInModalArea+0x46>
 801503c:	4a0a      	ldr	r2, [pc, #40]	; (8015068 <WM__IsInModalArea+0x58>)
 801503e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8015042:	f7f7 f890 	bl	800c166 <WM__IsAncestor>
 8015046:	2800      	cmp	r0, #0
 8015048:	d1e8      	bne.n	801501c <WM__IsInModalArea+0xc>
 801504a:	bd70      	pop	{r4, r5, r6, pc}
 801504c:	b918      	cbnz	r0, 8015056 <WM__IsInModalArea+0x46>
 801504e:	1ae3      	subs	r3, r4, r3
 8015050:	4258      	negs	r0, r3
 8015052:	4158      	adcs	r0, r3
 8015054:	bd70      	pop	{r4, r5, r6, pc}
 8015056:	2001      	movs	r0, #1
 8015058:	bd70      	pop	{r4, r5, r6, pc}
 801505a:	bf00      	nop
 801505c:	200001ec 	.word	0x200001ec
 8015060:	2001d580 	.word	0x2001d580
 8015064:	2001d6cc 	.word	0x2001d6cc
 8015068:	2001d560 	.word	0x2001d560

0801506c <WM__SendPIDMessage>:
 801506c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801506e:	4606      	mov	r6, r0
 8015070:	460c      	mov	r4, r1
 8015072:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8015074:	b085      	sub	sp, #20
 8015076:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801507a:	230d      	movs	r3, #13
 801507c:	9602      	str	r6, [sp, #8]
 801507e:	9300      	str	r3, [sp, #0]
 8015080:	4637      	mov	r7, r6
 8015082:	4638      	mov	r0, r7
 8015084:	f7f7 fb57 	bl	800c736 <WM_IsWindow>
 8015088:	b150      	cbz	r0, 80150a0 <WM__SendPIDMessage+0x34>
 801508a:	4638      	mov	r0, r7
 801508c:	f7f7 fbf2 	bl	800c874 <WM_GetParent>
 8015090:	4607      	mov	r7, r0
 8015092:	2800      	cmp	r0, #0
 8015094:	d0f5      	beq.n	8015082 <WM__SendPIDMessage+0x16>
 8015096:	4669      	mov	r1, sp
 8015098:	9403      	str	r4, [sp, #12]
 801509a:	f005 faa2 	bl	801a5e2 <WM__SendMessageIfEnabled>
 801509e:	e7f0      	b.n	8015082 <WM__SendPIDMessage+0x16>
 80150a0:	4630      	mov	r0, r6
 80150a2:	4621      	mov	r1, r4
 80150a4:	f005 fa9d 	bl	801a5e2 <WM__SendMessageIfEnabled>
 80150a8:	b005      	add	sp, #20
 80150aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080150ac <WM__SendTouchMessage>:
 80150ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80150ae:	68cc      	ldr	r4, [r1, #12]
 80150b0:	4606      	mov	r6, r0
 80150b2:	460d      	mov	r5, r1
 80150b4:	b194      	cbz	r4, 80150dc <WM__SendTouchMessage+0x30>
 80150b6:	f7fe fc21 	bl	80138fc <GUI_ALLOC_LockH>
 80150ba:	ab02      	add	r3, sp, #8
 80150bc:	4602      	mov	r2, r0
 80150be:	f843 0d04 	str.w	r0, [r3, #-4]!
 80150c2:	6821      	ldr	r1, [r4, #0]
 80150c4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80150c8:	1a09      	subs	r1, r1, r0
 80150ca:	6021      	str	r1, [r4, #0]
 80150cc:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80150d0:	6862      	ldr	r2, [r4, #4]
 80150d2:	1a52      	subs	r2, r2, r1
 80150d4:	6062      	str	r2, [r4, #4]
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7fe fc1e 	bl	8013918 <GUI_ALLOC_UnlockH>
 80150dc:	4630      	mov	r0, r6
 80150de:	4629      	mov	r1, r5
 80150e0:	f7ff ffc4 	bl	801506c <WM__SendPIDMessage>
 80150e4:	b002      	add	sp, #8
 80150e6:	bd70      	pop	{r4, r5, r6, pc}

080150e8 <WM_HandlePID>:
 80150e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150ec:	b097      	sub	sp, #92	; 0x5c
 80150ee:	ae06      	add	r6, sp, #24
 80150f0:	f04f 080c 	mov.w	r8, #12
 80150f4:	2100      	movs	r1, #0
 80150f6:	4642      	mov	r2, r8
 80150f8:	4630      	mov	r0, r6
 80150fa:	f005 fb91 	bl	801a820 <memset>
 80150fe:	f7fd f815 	bl	801212c <GUI_PID_IsEmpty>
 8015102:	b108      	cbz	r0, 8015108 <WM_HandlePID+0x20>
 8015104:	2000      	movs	r0, #0
 8015106:	e1aa      	b.n	801545e <WM_HandlePID+0x376>
 8015108:	ac09      	add	r4, sp, #36	; 0x24
 801510a:	4620      	mov	r0, r4
 801510c:	f7fc ff92 	bl	8012034 <GUI_PID_GetState>
 8015110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015112:	4dad      	ldr	r5, [pc, #692]	; (80153c8 <WM_HandlePID+0x2e0>)
 8015114:	4fad      	ldr	r7, [pc, #692]	; (80153cc <WM_HandlePID+0x2e4>)
 8015116:	1c5a      	adds	r2, r3, #1
 8015118:	d112      	bne.n	8015140 <WM_HandlePID+0x58>
 801511a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801511c:	3301      	adds	r3, #1
 801511e:	d11e      	bne.n	801515e <WM_HandlePID+0x76>
 8015120:	682b      	ldr	r3, [r5, #0]
 8015122:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8015126:	fb08 f803 	mul.w	r8, r8, r3
 801512a:	eb07 0308 	add.w	r3, r7, r8
 801512e:	7a19      	ldrb	r1, [r3, #8]
 8015130:	4291      	cmp	r1, r2
 8015132:	d0e7      	beq.n	8015104 <WM_HandlePID+0x1c>
 8015134:	f857 2008 	ldr.w	r2, [r7, r8]
 8015138:	685b      	ldr	r3, [r3, #4]
 801513a:	9209      	str	r2, [sp, #36]	; 0x24
 801513c:	930a      	str	r3, [sp, #40]	; 0x28
 801513e:	e00e      	b.n	801515e <WM_HandlePID+0x76>
 8015140:	2b00      	cmp	r3, #0
 8015142:	db0c      	blt.n	801515e <WM_HandlePID+0x76>
 8015144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015146:	2a00      	cmp	r2, #0
 8015148:	db09      	blt.n	801515e <WM_HandlePID+0x76>
 801514a:	49a1      	ldr	r1, [pc, #644]	; (80153d0 <WM_HandlePID+0x2e8>)
 801514c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015150:	440b      	add	r3, r1
 8015152:	9309      	str	r3, [sp, #36]	; 0x24
 8015154:	4b9f      	ldr	r3, [pc, #636]	; (80153d4 <WM_HandlePID+0x2ec>)
 8015156:	f9b3 3000 	ldrsh.w	r3, [r3]
 801515a:	441a      	add	r2, r3
 801515c:	920a      	str	r2, [sp, #40]	; 0x28
 801515e:	a804      	add	r0, sp, #16
 8015160:	f000 fad0 	bl	8015704 <WM__AddCriticalHandle>
 8015164:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8015168:	2b01      	cmp	r3, #1
 801516a:	bf98      	it	ls
 801516c:	602b      	strls	r3, [r5, #0]
 801516e:	6828      	ldr	r0, [r5, #0]
 8015170:	a901      	add	r1, sp, #4
 8015172:	aa02      	add	r2, sp, #8
 8015174:	f7fc feca 	bl	8011f0c <GUI_GetLayerPosEx>
 8015178:	9b01      	ldr	r3, [sp, #4]
 801517a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801517c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801517e:	1ac0      	subs	r0, r0, r3
 8015180:	9b02      	ldr	r3, [sp, #8]
 8015182:	9009      	str	r0, [sp, #36]	; 0x24
 8015184:	1ac9      	subs	r1, r1, r3
 8015186:	682b      	ldr	r3, [r5, #0]
 8015188:	910a      	str	r1, [sp, #40]	; 0x28
 801518a:	220c      	movs	r2, #12
 801518c:	435a      	muls	r2, r3
 801518e:	18bb      	adds	r3, r7, r2
 8015190:	58ba      	ldr	r2, [r7, r2]
 8015192:	4282      	cmp	r2, r0
 8015194:	d108      	bne.n	80151a8 <WM_HandlePID+0xc0>
 8015196:	685a      	ldr	r2, [r3, #4]
 8015198:	428a      	cmp	r2, r1
 801519a:	d105      	bne.n	80151a8 <WM_HandlePID+0xc0>
 801519c:	7a1a      	ldrb	r2, [r3, #8]
 801519e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80151a2:	429a      	cmp	r2, r3
 80151a4:	f000 8156 	beq.w	8015454 <WM_HandlePID+0x36c>
 80151a8:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80151ac:	f7fd fea8 	bl	8012f00 <GUI_CURSOR_SetPositionEx>
 80151b0:	4b89      	ldr	r3, [pc, #548]	; (80153d8 <WM_HandlePID+0x2f0>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	b113      	cbz	r3, 80151bc <WM_HandlePID+0xd4>
 80151b6:	4620      	mov	r0, r4
 80151b8:	2100      	movs	r1, #0
 80151ba:	4798      	blx	r3
 80151bc:	682b      	ldr	r3, [r5, #0]
 80151be:	4a87      	ldr	r2, [pc, #540]	; (80153dc <WM_HandlePID+0x2f4>)
 80151c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80151c4:	b918      	cbnz	r0, 80151ce <WM_HandlePID+0xe6>
 80151c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80151c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80151ca:	f000 fa3b 	bl	8015644 <WM_Screen2hWin>
 80151ce:	4b84      	ldr	r3, [pc, #528]	; (80153e0 <WM_HandlePID+0x2f8>)
 80151d0:	9005      	str	r0, [sp, #20]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	b113      	cbz	r3, 80151dc <WM_HandlePID+0xf4>
 80151d6:	9905      	ldr	r1, [sp, #20]
 80151d8:	4620      	mov	r0, r4
 80151da:	4798      	blx	r3
 80151dc:	4981      	ldr	r1, [pc, #516]	; (80153e4 <WM_HandlePID+0x2fc>)
 80151de:	682b      	ldr	r3, [r5, #0]
 80151e0:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 80153c8 <WM_HandlePID+0x2e0>
 80151e4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80151e8:	4688      	mov	r8, r1
 80151ea:	685a      	ldr	r2, [r3, #4]
 80151ec:	9805      	ldr	r0, [sp, #20]
 80151ee:	b312      	cbz	r2, 8015236 <WM_HandlePID+0x14e>
 80151f0:	4282      	cmp	r2, r0
 80151f2:	d020      	beq.n	8015236 <WM_HandlePID+0x14e>
 80151f4:	6858      	ldr	r0, [r3, #4]
 80151f6:	f7ff ff0b 	bl	8015010 <WM__IsInModalArea>
 80151fa:	b1e0      	cbz	r0, 8015236 <WM_HandlePID+0x14e>
 80151fc:	f8d9 3000 	ldr.w	r3, [r9]
 8015200:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8015204:	6858      	ldr	r0, [r3, #4]
 8015206:	f7ff fea7 	bl	8014f58 <WM__IsEnabled>
 801520a:	b1a0      	cbz	r0, 8015236 <WM_HandlePID+0x14e>
 801520c:	2312      	movs	r3, #18
 801520e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8015212:	9312      	str	r3, [sp, #72]	; 0x48
 8015214:	f8d9 3000 	ldr.w	r3, [r9]
 8015218:	9615      	str	r6, [sp, #84]	; 0x54
 801521a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801521e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8015222:	6858      	ldr	r0, [r3, #4]
 8015224:	a912      	add	r1, sp, #72	; 0x48
 8015226:	f7ff ff41 	bl	80150ac <WM__SendTouchMessage>
 801522a:	f8d9 3000 	ldr.w	r3, [r9]
 801522e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8015232:	2200      	movs	r2, #0
 8015234:	605a      	str	r2, [r3, #4]
 8015236:	9805      	ldr	r0, [sp, #20]
 8015238:	f7ff feea 	bl	8015010 <WM__IsInModalArea>
 801523c:	b908      	cbnz	r0, 8015242 <WM_HandlePID+0x15a>
 801523e:	2600      	movs	r6, #0
 8015240:	e0fb      	b.n	801543a <WM_HandlePID+0x352>
 8015242:	682b      	ldr	r3, [r5, #0]
 8015244:	9905      	ldr	r1, [sp, #20]
 8015246:	f8df a180 	ldr.w	sl, [pc, #384]	; 80153c8 <WM_HandlePID+0x2e0>
 801524a:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80153cc <WM_HandlePID+0x2e4>
 801524e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8015252:	f04f 080c 	mov.w	r8, #12
 8015256:	fb08 7303 	mla	r3, r8, r3, r7
 801525a:	6051      	str	r1, [r2, #4]
 801525c:	7a1a      	ldrb	r2, [r3, #8]
 801525e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8015262:	429a      	cmp	r2, r3
 8015264:	d062      	beq.n	801532c <WM_HandlePID+0x244>
 8015266:	9b05      	ldr	r3, [sp, #20]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d05f      	beq.n	801532c <WM_HandlePID+0x244>
 801526c:	9805      	ldr	r0, [sp, #20]
 801526e:	f7fe fb45 	bl	80138fc <GUI_ALLOC_LockH>
 8015272:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8015276:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 801527a:	f8da 3000 	ldr.w	r3, [sl]
 801527e:	9003      	str	r0, [sp, #12]
 8015280:	fb08 9303 	mla	r3, r8, r3, r9
 8015284:	7a1b      	ldrb	r3, [r3, #8]
 8015286:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 801528a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801528e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015290:	1a9b      	subs	r3, r3, r2
 8015292:	930f      	str	r3, [sp, #60]	; 0x3c
 8015294:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801529a:	eb0d 0008 	add.w	r0, sp, r8
 801529e:	1a9b      	subs	r3, r3, r2
 80152a0:	9310      	str	r3, [sp, #64]	; 0x40
 80152a2:	f7fe fb39 	bl	8013918 <GUI_ALLOC_UnlockH>
 80152a6:	f8da e000 	ldr.w	lr, [sl]
 80152aa:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80153e8 <WM_HandlePID+0x300>
 80152ae:	ab0f      	add	r3, sp, #60	; 0x3c
 80152b0:	9315      	str	r3, [sp, #84]	; 0x54
 80152b2:	2311      	movs	r3, #17
 80152b4:	9312      	str	r3, [sp, #72]	; 0x48
 80152b6:	fb08 930e 	mla	r3, r8, lr, r9
 80152ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80152be:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80152c2:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80152c6:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80152ca:	721a      	strb	r2, [r3, #8]
 80152cc:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80152d0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80152d4:	b133      	cbz	r3, 80152e4 <WM_HandlePID+0x1fc>
 80152d6:	eb0a 030e 	add.w	r3, sl, lr
 80152da:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80152de:	9a05      	ldr	r2, [sp, #20]
 80152e0:	605a      	str	r2, [r3, #4]
 80152e2:	e000      	b.n	80152e6 <WM_HandlePID+0x1fe>
 80152e4:	4699      	mov	r9, r3
 80152e6:	eb0a 030e 	add.w	r3, sl, lr
 80152ea:	a912      	add	r1, sp, #72	; 0x48
 80152ec:	f8d3 b004 	ldr.w	fp, [r3, #4]
 80152f0:	9805      	ldr	r0, [sp, #20]
 80152f2:	f005 f976 	bl	801a5e2 <WM__SendMessageIfEnabled>
 80152f6:	682b      	ldr	r3, [r5, #0]
 80152f8:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 80152fc:	6851      	ldr	r1, [r2, #4]
 80152fe:	458b      	cmp	fp, r1
 8015300:	bf1c      	itt	ne
 8015302:	6852      	ldrne	r2, [r2, #4]
 8015304:	9205      	strne	r2, [sp, #20]
 8015306:	220c      	movs	r2, #12
 8015308:	fb02 7303 	mla	r3, r2, r3, r7
 801530c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8015310:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015314:	f1b9 0f00 	cmp.w	r9, #0
 8015318:	d008      	beq.n	801532c <WM_HandlePID+0x244>
 801531a:	4648      	mov	r0, r9
 801531c:	f7f7 fa0b 	bl	800c736 <WM_IsWindow>
 8015320:	b120      	cbz	r0, 801532c <WM_HandlePID+0x244>
 8015322:	682b      	ldr	r3, [r5, #0]
 8015324:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8015328:	f8c3 9004 	str.w	r9, [r3, #4]
 801532c:	682a      	ldr	r2, [r5, #0]
 801532e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8015332:	210c      	movs	r1, #12
 8015334:	4351      	muls	r1, r2
 8015336:	1878      	adds	r0, r7, r1
 8015338:	f890 8008 	ldrb.w	r8, [r0, #8]
 801533c:	ea53 0808 	orrs.w	r8, r3, r8
 8015340:	d064      	beq.n	801540c <WM_HandlePID+0x324>
 8015342:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80153e8 <WM_HandlePID+0x300>
 8015346:	f44f 7e10 	mov.w	lr, #576	; 0x240
 801534a:	00d2      	lsls	r2, r2, #3
 801534c:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8015350:	eb08 0e02 	add.w	lr, r8, r2
 8015354:	f8de 9004 	ldr.w	r9, [lr, #4]
 8015358:	f8dd c014 	ldr.w	ip, [sp, #20]
 801535c:	45e1      	cmp	r9, ip
 801535e:	d01c      	beq.n	801539a <WM_HandlePID+0x2b2>
 8015360:	f8de e004 	ldr.w	lr, [lr, #4]
 8015364:	f1be 0f00 	cmp.w	lr, #0
 8015368:	d017      	beq.n	801539a <WM_HandlePID+0x2b2>
 801536a:	b113      	cbz	r3, 8015372 <WM_HandlePID+0x28a>
 801536c:	2300      	movs	r3, #0
 801536e:	9315      	str	r3, [sp, #84]	; 0x54
 8015370:	e009      	b.n	8015386 <WM_HandlePID+0x29e>
 8015372:	f8df e058 	ldr.w	lr, [pc, #88]	; 80153cc <WM_HandlePID+0x2e4>
 8015376:	f88d 3020 	strb.w	r3, [sp, #32]
 801537a:	f85e 1001 	ldr.w	r1, [lr, r1]
 801537e:	9106      	str	r1, [sp, #24]
 8015380:	6841      	ldr	r1, [r0, #4]
 8015382:	9107      	str	r1, [sp, #28]
 8015384:	9615      	str	r6, [sp, #84]	; 0x54
 8015386:	4442      	add	r2, r8
 8015388:	a912      	add	r1, sp, #72	; 0x48
 801538a:	6850      	ldr	r0, [r2, #4]
 801538c:	f7ff fe8e 	bl	80150ac <WM__SendTouchMessage>
 8015390:	682b      	ldr	r3, [r5, #0]
 8015392:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8015396:	2200      	movs	r2, #0
 8015398:	605a      	str	r2, [r3, #4]
 801539a:	682b      	ldr	r3, [r5, #0]
 801539c:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
 80153a0:	220c      	movs	r2, #12
 80153a2:	fb02 7203 	mla	r2, r2, r3, r7
 80153a6:	f882 e008 	strb.w	lr, [r2, #8]
 80153aa:	9a05      	ldr	r2, [sp, #20]
 80153ac:	2a00      	cmp	r2, #0
 80153ae:	d043      	beq.n	8015438 <WM_HandlePID+0x350>
 80153b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80153b4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80153b8:	f1be 0f00 	cmp.w	lr, #0
 80153bc:	d016      	beq.n	80153ec <WM_HandlePID+0x304>
 80153be:	9a05      	ldr	r2, [sp, #20]
 80153c0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80153c4:	e01b      	b.n	80153fe <WM_HandlePID+0x316>
 80153c6:	bf00      	nop
 80153c8:	2001d580 	.word	0x2001d580
 80153cc:	2001d344 	.word	0x2001d344
 80153d0:	2001d5c4 	.word	0x2001d5c4
 80153d4:	2001d5b8 	.word	0x2001d5b8
 80153d8:	2001d33c 	.word	0x2001d33c
 80153dc:	2001d59c 	.word	0x2001d59c
 80153e0:	2001d340 	.word	0x2001d340
 80153e4:	2001d6ac 	.word	0x2001d6ac
 80153e8:	2001d6bc 	.word	0x2001d6bc
 80153ec:	4b1d      	ldr	r3, [pc, #116]	; (8015464 <WM_HandlePID+0x37c>)
 80153ee:	781b      	ldrb	r3, [r3, #0]
 80153f0:	b10b      	cbz	r3, 80153f6 <WM_HandlePID+0x30e>
 80153f2:	f7f7 f88b 	bl	800c50c <WM_ReleaseCapture>
 80153f6:	682b      	ldr	r3, [r5, #0]
 80153f8:	2200      	movs	r2, #0
 80153fa:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80153fe:	605a      	str	r2, [r3, #4]
 8015400:	9805      	ldr	r0, [sp, #20]
 8015402:	9615      	str	r6, [sp, #84]	; 0x54
 8015404:	a912      	add	r1, sp, #72	; 0x48
 8015406:	f7ff fe51 	bl	80150ac <WM__SendTouchMessage>
 801540a:	e015      	b.n	8015438 <WM_HandlePID+0x350>
 801540c:	9b05      	ldr	r3, [sp, #20]
 801540e:	2b00      	cmp	r3, #0
 8015410:	f43f af15 	beq.w	801523e <WM_HandlePID+0x156>
 8015414:	9805      	ldr	r0, [sp, #20]
 8015416:	f7ff fd9f 	bl	8014f58 <WM__IsEnabled>
 801541a:	2800      	cmp	r0, #0
 801541c:	f43f af0f 	beq.w	801523e <WM_HandlePID+0x156>
 8015420:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8015424:	2310      	movs	r3, #16
 8015426:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801542a:	9805      	ldr	r0, [sp, #20]
 801542c:	9312      	str	r3, [sp, #72]	; 0x48
 801542e:	a912      	add	r1, sp, #72	; 0x48
 8015430:	9615      	str	r6, [sp, #84]	; 0x54
 8015432:	f7ff fe3b 	bl	80150ac <WM__SendTouchMessage>
 8015436:	e702      	b.n	801523e <WM_HandlePID+0x156>
 8015438:	2601      	movs	r6, #1
 801543a:	682b      	ldr	r3, [r5, #0]
 801543c:	220c      	movs	r2, #12
 801543e:	fb02 7703 	mla	r7, r2, r3, r7
 8015442:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8015446:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801544a:	4620      	mov	r0, r4
 801544c:	4619      	mov	r1, r3
 801544e:	f000 f909 	bl	8015664 <WM_PID__SetPrevState>
 8015452:	e000      	b.n	8015456 <WM_HandlePID+0x36e>
 8015454:	2600      	movs	r6, #0
 8015456:	a804      	add	r0, sp, #16
 8015458:	f000 f95c 	bl	8015714 <WM__RemoveCriticalHandle>
 801545c:	4630      	mov	r0, r6
 801545e:	b017      	add	sp, #92	; 0x5c
 8015460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015464:	2001d584 	.word	0x2001d584

08015468 <_cbTimer>:
 8015468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801546a:	4604      	mov	r4, r0
 801546c:	2100      	movs	r1, #0
 801546e:	4668      	mov	r0, sp
 8015470:	2210      	movs	r2, #16
 8015472:	f005 f9d5 	bl	801a820 <memset>
 8015476:	6860      	ldr	r0, [r4, #4]
 8015478:	b150      	cbz	r0, 8015490 <_cbTimer+0x28>
 801547a:	f7fe fa35 	bl	80138e8 <GUI_ALLOC_h2p>
 801547e:	f240 1313 	movw	r3, #275	; 0x113
 8015482:	6840      	ldr	r0, [r0, #4]
 8015484:	9300      	str	r3, [sp, #0]
 8015486:	4669      	mov	r1, sp
 8015488:	6863      	ldr	r3, [r4, #4]
 801548a:	9303      	str	r3, [sp, #12]
 801548c:	f7f7 ffb4 	bl	800d3f8 <WM_SendMessage>
 8015490:	b004      	add	sp, #16
 8015492:	bd10      	pop	{r4, pc}

08015494 <WM_DeleteTimer>:
 8015494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015496:	4605      	mov	r5, r0
 8015498:	b168      	cbz	r0, 80154b6 <WM_DeleteTimer+0x22>
 801549a:	f7fe fa2f 	bl	80138fc <GUI_ALLOC_LockH>
 801549e:	ac02      	add	r4, sp, #8
 80154a0:	f844 0d04 	str.w	r0, [r4, #-4]!
 80154a4:	6800      	ldr	r0, [r0, #0]
 80154a6:	f7fc f88b 	bl	80115c0 <GUI_TIMER_Delete>
 80154aa:	4620      	mov	r0, r4
 80154ac:	f7fe fa34 	bl	8013918 <GUI_ALLOC_UnlockH>
 80154b0:	4628      	mov	r0, r5
 80154b2:	f7fe fa5d 	bl	8013970 <GUI_ALLOC_Free>
 80154b6:	b003      	add	sp, #12
 80154b8:	bd30      	pop	{r4, r5, pc}

080154ba <WM__DeleteAssocTimer>:
 80154ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80154bc:	4605      	mov	r5, r0
 80154be:	a801      	add	r0, sp, #4
 80154c0:	f7fb fffc 	bl	80114bc <GUI_TIMER__GetFirstTimer>
 80154c4:	4604      	mov	r4, r0
 80154c6:	b1dc      	cbz	r4, 8015500 <WM__DeleteAssocTimer+0x46>
 80154c8:	4620      	mov	r0, r4
 80154ca:	2101      	movs	r1, #1
 80154cc:	f7fc f8d3 	bl	8011676 <GUI_TIMER_GetFlag>
 80154d0:	9b01      	ldr	r3, [sp, #4]
 80154d2:	b183      	cbz	r3, 80154f6 <WM__DeleteAssocTimer+0x3c>
 80154d4:	b178      	cbz	r0, 80154f6 <WM__DeleteAssocTimer+0x3c>
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7fe fa06 	bl	80138e8 <GUI_ALLOC_h2p>
 80154dc:	6843      	ldr	r3, [r0, #4]
 80154de:	42ab      	cmp	r3, r5
 80154e0:	d109      	bne.n	80154f6 <WM__DeleteAssocTimer+0x3c>
 80154e2:	4620      	mov	r0, r4
 80154e4:	a901      	add	r1, sp, #4
 80154e6:	9e01      	ldr	r6, [sp, #4]
 80154e8:	f7fc f800 	bl	80114ec <GUI_TIMER__GetNextTimerLin>
 80154ec:	4604      	mov	r4, r0
 80154ee:	4630      	mov	r0, r6
 80154f0:	f7ff ffd0 	bl	8015494 <WM_DeleteTimer>
 80154f4:	e7e7      	b.n	80154c6 <WM__DeleteAssocTimer+0xc>
 80154f6:	4620      	mov	r0, r4
 80154f8:	a901      	add	r1, sp, #4
 80154fa:	f7fb fff7 	bl	80114ec <GUI_TIMER__GetNextTimerLin>
 80154fe:	e7e1      	b.n	80154c4 <WM__DeleteAssocTimer+0xa>
 8015500:	b002      	add	sp, #8
 8015502:	bd70      	pop	{r4, r5, r6, pc}

08015504 <WM_CreateTimer>:
 8015504:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015508:	4680      	mov	r8, r0
 801550a:	200c      	movs	r0, #12
 801550c:	460f      	mov	r7, r1
 801550e:	4616      	mov	r6, r2
 8015510:	f7fe fcd4 	bl	8013ebc <GUI_ALLOC_AllocZero>
 8015514:	4604      	mov	r4, r0
 8015516:	b1f0      	cbz	r0, 8015556 <WM_CreateTimer+0x52>
 8015518:	f7fc f8c2 	bl	80116a0 <GUI_GetTime>
 801551c:	4622      	mov	r2, r4
 801551e:	1981      	adds	r1, r0, r6
 8015520:	2301      	movs	r3, #1
 8015522:	480f      	ldr	r0, [pc, #60]	; (8015560 <WM_CreateTimer+0x5c>)
 8015524:	f7fb fffe 	bl	8011524 <GUI_TIMER_Create>
 8015528:	4605      	mov	r5, r0
 801552a:	4620      	mov	r0, r4
 801552c:	b185      	cbz	r5, 8015550 <WM_CreateTimer+0x4c>
 801552e:	f7fe f9e5 	bl	80138fc <GUI_ALLOC_LockH>
 8015532:	4603      	mov	r3, r0
 8015534:	a802      	add	r0, sp, #8
 8015536:	f8c3 8004 	str.w	r8, [r3, #4]
 801553a:	f840 3d04 	str.w	r3, [r0, #-4]!
 801553e:	609f      	str	r7, [r3, #8]
 8015540:	601d      	str	r5, [r3, #0]
 8015542:	f7fe f9e9 	bl	8013918 <GUI_ALLOC_UnlockH>
 8015546:	4628      	mov	r0, r5
 8015548:	4631      	mov	r1, r6
 801554a:	f7fc f86d 	bl	8011628 <GUI_TIMER_SetPeriod>
 801554e:	e002      	b.n	8015556 <WM_CreateTimer+0x52>
 8015550:	f7fe fa0e 	bl	8013970 <GUI_ALLOC_Free>
 8015554:	462c      	mov	r4, r5
 8015556:	4620      	mov	r0, r4
 8015558:	b002      	add	sp, #8
 801555a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801555e:	bf00      	nop
 8015560:	08015469 	.word	0x08015469

08015564 <WM_RestartTimer>:
 8015564:	b513      	push	{r0, r1, r4, lr}
 8015566:	460c      	mov	r4, r1
 8015568:	b180      	cbz	r0, 801558c <WM_RestartTimer+0x28>
 801556a:	f7fe f9c7 	bl	80138fc <GUI_ALLOC_LockH>
 801556e:	9001      	str	r0, [sp, #4]
 8015570:	b11c      	cbz	r4, 801557a <WM_RestartTimer+0x16>
 8015572:	6800      	ldr	r0, [r0, #0]
 8015574:	4621      	mov	r1, r4
 8015576:	f7fc f857 	bl	8011628 <GUI_TIMER_SetPeriod>
 801557a:	ac02      	add	r4, sp, #8
 801557c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8015580:	6818      	ldr	r0, [r3, #0]
 8015582:	f7fc f85f 	bl	8011644 <GUI_TIMER_Restart>
 8015586:	4620      	mov	r0, r4
 8015588:	f7fe f9c6 	bl	8013918 <GUI_ALLOC_UnlockH>
 801558c:	b002      	add	sp, #8
 801558e:	bd10      	pop	{r4, pc}

08015590 <WM_SendToParent>:
 8015590:	b538      	push	{r3, r4, r5, lr}
 8015592:	4605      	mov	r5, r0
 8015594:	460c      	mov	r4, r1
 8015596:	b141      	cbz	r1, 80155aa <WM_SendToParent+0x1a>
 8015598:	f7f7 f96c 	bl	800c874 <WM_GetParent>
 801559c:	b128      	cbz	r0, 80155aa <WM_SendToParent+0x1a>
 801559e:	60a5      	str	r5, [r4, #8]
 80155a0:	4621      	mov	r1, r4
 80155a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80155a6:	f7f6 bdb7 	b.w	800c118 <WM__SendMessage>
 80155aa:	bd38      	pop	{r3, r4, r5, pc}

080155ac <WM__IsInWindow>:
 80155ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80155ae:	f013 0302 	ands.w	r3, r3, #2
 80155b2:	d012      	beq.n	80155da <WM__IsInWindow+0x2e>
 80155b4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80155b8:	4299      	cmp	r1, r3
 80155ba:	db10      	blt.n	80155de <WM__IsInWindow+0x32>
 80155bc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80155c0:	4299      	cmp	r1, r3
 80155c2:	dc0c      	bgt.n	80155de <WM__IsInWindow+0x32>
 80155c4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80155c8:	429a      	cmp	r2, r3
 80155ca:	db08      	blt.n	80155de <WM__IsInWindow+0x32>
 80155cc:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80155d0:	4282      	cmp	r2, r0
 80155d2:	bfcc      	ite	gt
 80155d4:	2000      	movgt	r0, #0
 80155d6:	2001      	movle	r0, #1
 80155d8:	4770      	bx	lr
 80155da:	4618      	mov	r0, r3
 80155dc:	4770      	bx	lr
 80155de:	2000      	movs	r0, #0
 80155e0:	4770      	bx	lr

080155e2 <_Screen2hWin>:
 80155e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80155e6:	460e      	mov	r6, r1
 80155e8:	4617      	mov	r7, r2
 80155ea:	4698      	mov	r8, r3
 80155ec:	4605      	mov	r5, r0
 80155ee:	b320      	cbz	r0, 801563a <_Screen2hWin+0x58>
 80155f0:	f7fe f984 	bl	80138fc <GUI_ALLOC_LockH>
 80155f4:	4639      	mov	r1, r7
 80155f6:	4642      	mov	r2, r8
 80155f8:	4604      	mov	r4, r0
 80155fa:	9001      	str	r0, [sp, #4]
 80155fc:	f7ff ffd6 	bl	80155ac <WM__IsInWindow>
 8015600:	4681      	mov	r9, r0
 8015602:	b920      	cbnz	r0, 801560e <_Screen2hWin+0x2c>
 8015604:	a801      	add	r0, sp, #4
 8015606:	f7fe f987 	bl	8013918 <GUI_ALLOC_UnlockH>
 801560a:	4648      	mov	r0, r9
 801560c:	e016      	b.n	801563c <_Screen2hWin+0x5a>
 801560e:	69e4      	ldr	r4, [r4, #28]
 8015610:	b91c      	cbnz	r4, 801561a <_Screen2hWin+0x38>
 8015612:	a801      	add	r0, sp, #4
 8015614:	f7fe f980 	bl	8013918 <GUI_ALLOC_UnlockH>
 8015618:	e00f      	b.n	801563a <_Screen2hWin+0x58>
 801561a:	42b4      	cmp	r4, r6
 801561c:	d0f9      	beq.n	8015612 <_Screen2hWin+0x30>
 801561e:	4620      	mov	r0, r4
 8015620:	4631      	mov	r1, r6
 8015622:	463a      	mov	r2, r7
 8015624:	4643      	mov	r3, r8
 8015626:	f7ff ffdc 	bl	80155e2 <_Screen2hWin>
 801562a:	2800      	cmp	r0, #0
 801562c:	bf18      	it	ne
 801562e:	4605      	movne	r5, r0
 8015630:	4620      	mov	r0, r4
 8015632:	f7fe f959 	bl	80138e8 <GUI_ALLOC_h2p>
 8015636:	6a04      	ldr	r4, [r0, #32]
 8015638:	e7ea      	b.n	8015610 <_Screen2hWin+0x2e>
 801563a:	4628      	mov	r0, r5
 801563c:	b003      	add	sp, #12
 801563e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08015644 <WM_Screen2hWin>:
 8015644:	b570      	push	{r4, r5, r6, lr}
 8015646:	4b06      	ldr	r3, [pc, #24]	; (8015660 <WM_Screen2hWin+0x1c>)
 8015648:	460c      	mov	r4, r1
 801564a:	4605      	mov	r5, r0
 801564c:	6818      	ldr	r0, [r3, #0]
 801564e:	f000 f84d 	bl	80156ec <WM_GetDesktopWindowEx>
 8015652:	462a      	mov	r2, r5
 8015654:	4623      	mov	r3, r4
 8015656:	2100      	movs	r1, #0
 8015658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801565c:	f7ff bfc1 	b.w	80155e2 <_Screen2hWin>
 8015660:	2001d580 	.word	0x2001d580

08015664 <WM_PID__SetPrevState>:
 8015664:	4b03      	ldr	r3, [pc, #12]	; (8015674 <WM_PID__SetPrevState+0x10>)
 8015666:	220c      	movs	r2, #12
 8015668:	fb02 3301 	mla	r3, r2, r1, r3
 801566c:	c807      	ldmia	r0, {r0, r1, r2}
 801566e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015672:	4770      	bx	lr
 8015674:	2001d35c 	.word	0x2001d35c

08015678 <WM_OnKey>:
 8015678:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801567a:	4a0a      	ldr	r2, [pc, #40]	; (80156a4 <WM_OnKey+0x2c>)
 801567c:	4603      	mov	r3, r0
 801567e:	6810      	ldr	r0, [r2, #0]
 8015680:	4a09      	ldr	r2, [pc, #36]	; (80156a8 <WM_OnKey+0x30>)
 8015682:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8015686:	b148      	cbz	r0, 801569c <WM_OnKey+0x24>
 8015688:	9300      	str	r3, [sp, #0]
 801568a:	230e      	movs	r3, #14
 801568c:	9101      	str	r1, [sp, #4]
 801568e:	9302      	str	r3, [sp, #8]
 8015690:	a902      	add	r1, sp, #8
 8015692:	ab00      	add	r3, sp, #0
 8015694:	9305      	str	r3, [sp, #20]
 8015696:	f7f6 fd3f 	bl	800c118 <WM__SendMessage>
 801569a:	2001      	movs	r0, #1
 801569c:	b007      	add	sp, #28
 801569e:	f85d fb04 	ldr.w	pc, [sp], #4
 80156a2:	bf00      	nop
 80156a4:	2001d580 	.word	0x2001d580
 80156a8:	2001d570 	.word	0x2001d570

080156ac <WM_GetWindowRectEx>:
 80156ac:	b510      	push	{r4, lr}
 80156ae:	460c      	mov	r4, r1
 80156b0:	b130      	cbz	r0, 80156c0 <WM_GetWindowRectEx+0x14>
 80156b2:	b129      	cbz	r1, 80156c0 <WM_GetWindowRectEx+0x14>
 80156b4:	f7fe f918 	bl	80138e8 <GUI_ALLOC_h2p>
 80156b8:	4603      	mov	r3, r0
 80156ba:	cb03      	ldmia	r3!, {r0, r1}
 80156bc:	6020      	str	r0, [r4, #0]
 80156be:	6061      	str	r1, [r4, #4]
 80156c0:	bd10      	pop	{r4, pc}

080156c2 <WM_GetScrollPartner>:
 80156c2:	b538      	push	{r3, r4, r5, lr}
 80156c4:	4605      	mov	r5, r0
 80156c6:	f7f7 f95d 	bl	800c984 <WM_GetId>
 80156ca:	28ff      	cmp	r0, #255	; 0xff
 80156cc:	4604      	mov	r4, r0
 80156ce:	d003      	beq.n	80156d8 <WM_GetScrollPartner+0x16>
 80156d0:	28fe      	cmp	r0, #254	; 0xfe
 80156d2:	bf08      	it	eq
 80156d4:	24ff      	moveq	r4, #255	; 0xff
 80156d6:	e000      	b.n	80156da <WM_GetScrollPartner+0x18>
 80156d8:	24fe      	movs	r4, #254	; 0xfe
 80156da:	4628      	mov	r0, r5
 80156dc:	f7f7 f8ca 	bl	800c874 <WM_GetParent>
 80156e0:	4621      	mov	r1, r4
 80156e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156e6:	f7f7 b993 	b.w	800ca10 <WM_GetDialogItem>
	...

080156ec <WM_GetDesktopWindowEx>:
 80156ec:	2801      	cmp	r0, #1
 80156ee:	bf9a      	itte	ls
 80156f0:	4b02      	ldrls	r3, [pc, #8]	; (80156fc <WM_GetDesktopWindowEx+0x10>)
 80156f2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80156f6:	2000      	movhi	r0, #0
 80156f8:	4770      	bx	lr
 80156fa:	bf00      	nop
 80156fc:	2001d560 	.word	0x2001d560

08015700 <WM_ForEachDesc>:
 8015700:	f004 bf90 	b.w	801a624 <WM__ForEachDesc>

08015704 <WM__AddCriticalHandle>:
 8015704:	4b02      	ldr	r3, [pc, #8]	; (8015710 <WM__AddCriticalHandle+0xc>)
 8015706:	681a      	ldr	r2, [r3, #0]
 8015708:	6002      	str	r2, [r0, #0]
 801570a:	6018      	str	r0, [r3, #0]
 801570c:	4770      	bx	lr
 801570e:	bf00      	nop
 8015710:	2001d594 	.word	0x2001d594

08015714 <WM__RemoveCriticalHandle>:
 8015714:	4a09      	ldr	r2, [pc, #36]	; (801573c <WM__RemoveCriticalHandle+0x28>)
 8015716:	6813      	ldr	r3, [r2, #0]
 8015718:	b510      	push	{r4, lr}
 801571a:	4614      	mov	r4, r2
 801571c:	b16b      	cbz	r3, 801573a <WM__RemoveCriticalHandle+0x26>
 801571e:	2200      	movs	r2, #0
 8015720:	4283      	cmp	r3, r0
 8015722:	d105      	bne.n	8015730 <WM__RemoveCriticalHandle+0x1c>
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	b10a      	cbz	r2, 801572c <WM__RemoveCriticalHandle+0x18>
 8015728:	6013      	str	r3, [r2, #0]
 801572a:	bd10      	pop	{r4, pc}
 801572c:	6023      	str	r3, [r4, #0]
 801572e:	bd10      	pop	{r4, pc}
 8015730:	6819      	ldr	r1, [r3, #0]
 8015732:	b111      	cbz	r1, 801573a <WM__RemoveCriticalHandle+0x26>
 8015734:	461a      	mov	r2, r3
 8015736:	460b      	mov	r3, r1
 8015738:	e7f2      	b.n	8015720 <WM__RemoveCriticalHandle+0xc>
 801573a:	bd10      	pop	{r4, pc}
 801573c:	2001d594 	.word	0x2001d594

08015740 <WM_BringToBottom>:
 8015740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015744:	4604      	mov	r4, r0
 8015746:	b087      	sub	sp, #28
 8015748:	2800      	cmp	r0, #0
 801574a:	d039      	beq.n	80157c0 <WM_BringToBottom+0x80>
 801574c:	f7fe f8d6 	bl	80138fc <GUI_ALLOC_LockH>
 8015750:	4603      	mov	r3, r0
 8015752:	9001      	str	r0, [sp, #4]
 8015754:	c803      	ldmia	r0, {r0, r1}
 8015756:	ad04      	add	r5, sp, #16
 8015758:	e885 0003 	stmia.w	r5, {r0, r1}
 801575c:	a801      	add	r0, sp, #4
 801575e:	6a1e      	ldr	r6, [r3, #32]
 8015760:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8015764:	f7fe f8d8 	bl	8013918 <GUI_ALLOC_UnlockH>
 8015768:	4620      	mov	r0, r4
 801576a:	f7ff fbfe 	bl	8014f6a <WM__GetPrevSibling>
 801576e:	4607      	mov	r7, r0
 8015770:	b330      	cbz	r0, 80157c0 <WM_BringToBottom+0x80>
 8015772:	4620      	mov	r0, r4
 8015774:	f7f7 f87e 	bl	800c874 <WM_GetParent>
 8015778:	f019 0f02 	tst.w	r9, #2
 801577c:	4680      	mov	r8, r0
 801577e:	d004      	beq.n	801578a <WM_BringToBottom+0x4a>
 8015780:	4628      	mov	r0, r5
 8015782:	4641      	mov	r1, r8
 8015784:	4632      	mov	r2, r6
 8015786:	f7f7 fe1f 	bl	800d3c8 <WM__InvalidateRectEx>
 801578a:	4620      	mov	r0, r4
 801578c:	f7fe f8b6 	bl	80138fc <GUI_ALLOC_LockH>
 8015790:	9001      	str	r0, [sp, #4]
 8015792:	4640      	mov	r0, r8
 8015794:	f7fe f8b2 	bl	80138fc <GUI_ALLOC_LockH>
 8015798:	9003      	str	r0, [sp, #12]
 801579a:	4638      	mov	r0, r7
 801579c:	f7fe f8ae 	bl	80138fc <GUI_ALLOC_LockH>
 80157a0:	9b03      	ldr	r3, [sp, #12]
 80157a2:	9a01      	ldr	r2, [sp, #4]
 80157a4:	69d9      	ldr	r1, [r3, #28]
 80157a6:	6206      	str	r6, [r0, #32]
 80157a8:	9002      	str	r0, [sp, #8]
 80157aa:	6211      	str	r1, [r2, #32]
 80157ac:	a801      	add	r0, sp, #4
 80157ae:	61dc      	str	r4, [r3, #28]
 80157b0:	f7fe f8b2 	bl	8013918 <GUI_ALLOC_UnlockH>
 80157b4:	a803      	add	r0, sp, #12
 80157b6:	f7fe f8af 	bl	8013918 <GUI_ALLOC_UnlockH>
 80157ba:	a802      	add	r0, sp, #8
 80157bc:	f7fe f8ac 	bl	8013918 <GUI_ALLOC_UnlockH>
 80157c0:	b007      	add	sp, #28
 80157c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080157c6 <_Convert16>:
 80157c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157ca:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80157ce:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80157d2:	4605      	mov	r5, r0
 80157d4:	460e      	mov	r6, r1
 80157d6:	4690      	mov	r8, r2
 80157d8:	461f      	mov	r7, r3
 80157da:	4614      	mov	r4, r2
 80157dc:	4689      	mov	r9, r1
 80157de:	f835 0b02 	ldrh.w	r0, [r5], #2
 80157e2:	47d8      	blx	fp
 80157e4:	47d0      	blx	sl
 80157e6:	3c01      	subs	r4, #1
 80157e8:	f849 0b04 	str.w	r0, [r9], #4
 80157ec:	d1f7      	bne.n	80157de <_Convert16+0x18>
 80157ee:	2f1f      	cmp	r7, #31
 80157f0:	d806      	bhi.n	8015800 <_Convert16+0x3a>
 80157f2:	4630      	mov	r0, r6
 80157f4:	4641      	mov	r1, r8
 80157f6:	463a      	mov	r2, r7
 80157f8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157fc:	f001 bf91 	b.w	8017722 <GUI__CompactPixelIndices>
 8015800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015804 <_Convert8>:
 8015804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015808:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801580c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8015810:	4605      	mov	r5, r0
 8015812:	460e      	mov	r6, r1
 8015814:	4690      	mov	r8, r2
 8015816:	461f      	mov	r7, r3
 8015818:	4689      	mov	r9, r1
 801581a:	4604      	mov	r4, r0
 801581c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015820:	47d8      	blx	fp
 8015822:	47d0      	blx	sl
 8015824:	1b2b      	subs	r3, r5, r4
 8015826:	4443      	add	r3, r8
 8015828:	f849 0b04 	str.w	r0, [r9], #4
 801582c:	2b00      	cmp	r3, #0
 801582e:	d1f5      	bne.n	801581c <_Convert8+0x18>
 8015830:	2f1f      	cmp	r7, #31
 8015832:	d806      	bhi.n	8015842 <_Convert8+0x3e>
 8015834:	4630      	mov	r0, r6
 8015836:	4641      	mov	r1, r8
 8015838:	463a      	mov	r2, r7
 801583a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801583e:	f001 bf70 	b.w	8017722 <GUI__CompactPixelIndices>
 8015842:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015848 <GUI_MEMDEV__WriteToActiveOpaque>:
 8015848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801584c:	b09d      	sub	sp, #116	; 0x74
 801584e:	4606      	mov	r6, r0
 8015850:	910f      	str	r1, [sp, #60]	; 0x3c
 8015852:	920d      	str	r2, [sp, #52]	; 0x34
 8015854:	2800      	cmp	r0, #0
 8015856:	f000 8386 	beq.w	8015f66 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 801585a:	f7fe f84f 	bl	80138fc <GUI_ALLOC_LockH>
 801585e:	ab1c      	add	r3, sp, #112	; 0x70
 8015860:	6944      	ldr	r4, [r0, #20]
 8015862:	f843 0d1c 	str.w	r0, [r3, #-28]!
 8015866:	4618      	mov	r0, r3
 8015868:	f7fe f856 	bl	8013918 <GUI_ALLOC_UnlockH>
 801586c:	4630      	mov	r0, r6
 801586e:	f7f9 fa87 	bl	800ed80 <GUI_MEMDEV_GetBitsPerPixel>
 8015872:	2808      	cmp	r0, #8
 8015874:	4601      	mov	r1, r0
 8015876:	dd02      	ble.n	801587e <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 8015878:	2c00      	cmp	r4, #0
 801587a:	f000 81c3 	beq.w	8015c04 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 801587e:	2201      	movs	r2, #1
 8015880:	f04f 0800 	mov.w	r8, #0
 8015884:	4630      	mov	r0, r6
 8015886:	921b      	str	r2, [sp, #108]	; 0x6c
 8015888:	920b      	str	r2, [sp, #44]	; 0x2c
 801588a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801588e:	f7fe f835 	bl	80138fc <GUI_ALLOC_LockH>
 8015892:	6803      	ldr	r3, [r0, #0]
 8015894:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 8015ea4 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 8015898:	691b      	ldr	r3, [r3, #16]
 801589a:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801589e:	685b      	ldr	r3, [r3, #4]
 80158a0:	930e      	str	r3, [sp, #56]	; 0x38
 80158a2:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 80158a6:	f8da 3000 	ldr.w	r3, [sl]
 80158aa:	f84b 0d14 	str.w	r0, [fp, #-20]!
 80158ae:	6904      	ldr	r4, [r0, #16]
 80158b0:	6945      	ldr	r5, [r0, #20]
 80158b2:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80158b6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80158ba:	7c58      	ldrb	r0, [r3, #17]
 80158bc:	9112      	str	r1, [sp, #72]	; 0x48
 80158be:	f7fa fce5 	bl	801028c <GUI_GetBitsPerPixelEx>
 80158c2:	f8da 3000 	ldr.w	r3, [sl]
 80158c6:	9010      	str	r0, [sp, #64]	; 0x40
 80158c8:	7c58      	ldrb	r0, [r3, #17]
 80158ca:	f7fa fcfd 	bl	80102c8 <GUI_GetpfIndex2ColorEx>
 80158ce:	4603      	mov	r3, r0
 80158d0:	4658      	mov	r0, fp
 80158d2:	9309      	str	r3, [sp, #36]	; 0x24
 80158d4:	f7fe f820 	bl	8013918 <GUI_ALLOC_UnlockH>
 80158d8:	2c08      	cmp	r4, #8
 80158da:	4651      	mov	r1, sl
 80158dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80158de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158e0:	d904      	bls.n	80158ec <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 80158e2:	2c10      	cmp	r4, #16
 80158e4:	bf8c      	ite	hi
 80158e6:	2204      	movhi	r2, #4
 80158e8:	2202      	movls	r2, #2
 80158ea:	e005      	b.n	80158f8 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 80158ec:	2c01      	cmp	r4, #1
 80158ee:	d103      	bne.n	80158f8 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 80158f0:	9411      	str	r4, [sp, #68]	; 0x44
 80158f2:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 80158f6:	e000      	b.n	80158fa <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 80158f8:	9211      	str	r2, [sp, #68]	; 0x44
 80158fa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80158fc:	4298      	cmp	r0, r3
 80158fe:	f000 80e2 	beq.w	8015ac6 <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 8015902:	680b      	ldr	r3, [r1, #0]
 8015904:	7c58      	ldrb	r0, [r3, #17]
 8015906:	f7fa fce7 	bl	80102d8 <GUI_GetpfColor2IndexEx>
 801590a:	9013      	str	r0, [sp, #76]	; 0x4c
 801590c:	00b8      	lsls	r0, r7, #2
 801590e:	f7fe fa49 	bl	8013da4 <GUI_ALLOC_AllocNoInit>
 8015912:	900c      	str	r0, [sp, #48]	; 0x30
 8015914:	2800      	cmp	r0, #0
 8015916:	f000 8326 	beq.w	8015f66 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 801591a:	4630      	mov	r0, r6
 801591c:	f7f8 fbcc 	bl	800e0b8 <GUI_MEMDEV_GetDataPtr>
 8015920:	4606      	mov	r6, r0
 8015922:	2d00      	cmp	r5, #0
 8015924:	f000 80be 	beq.w	8015aa4 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 8015928:	4628      	mov	r0, r5
 801592a:	f7fd ffe7 	bl	80138fc <GUI_ALLOC_LockH>
 801592e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8015932:	9018      	str	r0, [sp, #96]	; 0x60
 8015934:	f04f 0a00 	mov.w	sl, #0
 8015938:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801593a:	4592      	cmp	sl, r2
 801593c:	f280 80ae 	bge.w	8015a9c <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 8015940:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015942:	2300      	movs	r3, #0
 8015944:	9319      	str	r3, [sp, #100]	; 0x64
 8015946:	6883      	ldr	r3, [r0, #8]
 8015948:	a919      	add	r1, sp, #100	; 0x64
 801594a:	695b      	ldr	r3, [r3, #20]
 801594c:	4652      	mov	r2, sl
 801594e:	4798      	blx	r3
 8015950:	42b8      	cmp	r0, r7
 8015952:	4605      	mov	r5, r0
 8015954:	d12f      	bne.n	80159b6 <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 8015956:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015958:	f7fd ffd0 	bl	80138fc <GUI_ALLOC_LockH>
 801595c:	2c08      	cmp	r4, #8
 801595e:	4601      	mov	r1, r0
 8015960:	9016      	str	r0, [sp, #88]	; 0x58
 8015962:	d909      	bls.n	8015978 <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 8015964:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015966:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015968:	9200      	str	r2, [sp, #0]
 801596a:	9301      	str	r3, [sp, #4]
 801596c:	4630      	mov	r0, r6
 801596e:	463a      	mov	r2, r7
 8015970:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015972:	f7ff ff28 	bl	80157c6 <_Convert16>
 8015976:	e008      	b.n	801598a <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 8015978:	980e      	ldr	r0, [sp, #56]	; 0x38
 801597a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801597c:	9000      	str	r0, [sp, #0]
 801597e:	9201      	str	r2, [sp, #4]
 8015980:	4630      	mov	r0, r6
 8015982:	463a      	mov	r2, r7
 8015984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015986:	f7ff ff3d 	bl	8015804 <_Convert8>
 801598a:	2301      	movs	r3, #1
 801598c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801598e:	9002      	str	r0, [sp, #8]
 8015990:	ad1c      	add	r5, sp, #112	; 0x70
 8015992:	2200      	movs	r2, #0
 8015994:	9300      	str	r3, [sp, #0]
 8015996:	9301      	str	r3, [sp, #4]
 8015998:	9203      	str	r2, [sp, #12]
 801599a:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 801599e:	9204      	str	r2, [sp, #16]
 80159a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80159a2:	f8cd 8014 	str.w	r8, [sp, #20]
 80159a6:	4659      	mov	r1, fp
 80159a8:	463a      	mov	r2, r7
 80159aa:	f7fa feb1 	bl	8010710 <LCD_DrawBitmap>
 80159ae:	4628      	mov	r0, r5
 80159b0:	f7fd ffb2 	bl	8013918 <GUI_ALLOC_UnlockH>
 80159b4:	e060      	b.n	8015a78 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 80159b6:	2c01      	cmp	r4, #1
 80159b8:	d15c      	bne.n	8015a74 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 80159ba:	2d00      	cmp	r5, #0
 80159bc:	d05c      	beq.n	8015a78 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 80159be:	9819      	ldr	r0, [sp, #100]	; 0x64
 80159c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80159c2:	f8cd 900c 	str.w	r9, [sp, #12]
 80159c6:	2208      	movs	r2, #8
 80159c8:	fb90 f2f2 	sdiv	r2, r0, r2
 80159cc:	4432      	add	r2, r6
 80159ce:	2301      	movs	r3, #1
 80159d0:	9204      	str	r2, [sp, #16]
 80159d2:	f000 0207 	and.w	r2, r0, #7
 80159d6:	9300      	str	r3, [sp, #0]
 80159d8:	4408      	add	r0, r1
 80159da:	9301      	str	r3, [sp, #4]
 80159dc:	9302      	str	r3, [sp, #8]
 80159de:	9206      	str	r2, [sp, #24]
 80159e0:	4659      	mov	r1, fp
 80159e2:	462a      	mov	r2, r5
 80159e4:	f8cd 8014 	str.w	r8, [sp, #20]
 80159e8:	f7fa fdb6 	bl	8010558 <LCD__DrawBitmap_1bpp>
 80159ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80159ee:	9818      	ldr	r0, [sp, #96]	; 0x60
 80159f0:	441d      	add	r5, r3
 80159f2:	6883      	ldr	r3, [r0, #8]
 80159f4:	9519      	str	r5, [sp, #100]	; 0x64
 80159f6:	695b      	ldr	r3, [r3, #20]
 80159f8:	a919      	add	r1, sp, #100	; 0x64
 80159fa:	4652      	mov	r2, sl
 80159fc:	4798      	blx	r3
 80159fe:	4605      	mov	r5, r0
 8015a00:	e7db      	b.n	80159ba <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 8015a02:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015a04:	f7fd ff7a 	bl	80138fc <GUI_ALLOC_LockH>
 8015a08:	2c08      	cmp	r4, #8
 8015a0a:	4601      	mov	r1, r0
 8015a0c:	9016      	str	r0, [sp, #88]	; 0x58
 8015a0e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015a10:	d938      	bls.n	8015a84 <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 8015a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a14:	9200      	str	r2, [sp, #0]
 8015a16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015a18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015a1a:	9301      	str	r3, [sp, #4]
 8015a1c:	fb00 6002 	mla	r0, r0, r2, r6
 8015a20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a22:	462a      	mov	r2, r5
 8015a24:	f7ff fecf 	bl	80157c6 <_Convert16>
 8015a28:	2301      	movs	r3, #1
 8015a2a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 8015a2e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015a30:	9300      	str	r3, [sp, #0]
 8015a32:	2200      	movs	r2, #0
 8015a34:	9301      	str	r3, [sp, #4]
 8015a36:	9002      	str	r0, [sp, #8]
 8015a38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015a3a:	9203      	str	r2, [sp, #12]
 8015a3c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015a3e:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 8015a42:	9204      	str	r2, [sp, #16]
 8015a44:	4408      	add	r0, r1
 8015a46:	462a      	mov	r2, r5
 8015a48:	4659      	mov	r1, fp
 8015a4a:	f8cd 8014 	str.w	r8, [sp, #20]
 8015a4e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8015a52:	f7fa fe5d 	bl	8010710 <LCD_DrawBitmap>
 8015a56:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8015a5a:	4660      	mov	r0, ip
 8015a5c:	f7fd ff5c 	bl	8013918 <GUI_ALLOC_UnlockH>
 8015a60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015a62:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015a64:	441d      	add	r5, r3
 8015a66:	6883      	ldr	r3, [r0, #8]
 8015a68:	9519      	str	r5, [sp, #100]	; 0x64
 8015a6a:	695b      	ldr	r3, [r3, #20]
 8015a6c:	a919      	add	r1, sp, #100	; 0x64
 8015a6e:	4652      	mov	r2, sl
 8015a70:	4798      	blx	r3
 8015a72:	4605      	mov	r5, r0
 8015a74:	2d00      	cmp	r5, #0
 8015a76:	d1c4      	bne.n	8015a02 <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 8015a78:	444e      	add	r6, r9
 8015a7a:	f10a 0a01 	add.w	sl, sl, #1
 8015a7e:	f10b 0b01 	add.w	fp, fp, #1
 8015a82:	e759      	b.n	8015938 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 8015a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a86:	9300      	str	r3, [sp, #0]
 8015a88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015a8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015a8c:	9201      	str	r2, [sp, #4]
 8015a8e:	fb00 6003 	mla	r0, r0, r3, r6
 8015a92:	462a      	mov	r2, r5
 8015a94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a96:	f7ff feb5 	bl	8015804 <_Convert8>
 8015a9a:	e7c5      	b.n	8015a28 <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 8015a9c:	a818      	add	r0, sp, #96	; 0x60
 8015a9e:	f7fd ff3b 	bl	8013918 <GUI_ALLOC_UnlockH>
 8015aa2:	e00e      	b.n	8015ac2 <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 8015aa4:	2301      	movs	r3, #1
 8015aa6:	9300      	str	r3, [sp, #0]
 8015aa8:	9301      	str	r3, [sp, #4]
 8015aaa:	9004      	str	r0, [sp, #16]
 8015aac:	9402      	str	r4, [sp, #8]
 8015aae:	f8cd 900c 	str.w	r9, [sp, #12]
 8015ab2:	f8cd 8014 	str.w	r8, [sp, #20]
 8015ab6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015ab8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015aba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015abc:	463a      	mov	r2, r7
 8015abe:	f7fa fe27 	bl	8010710 <LCD_DrawBitmap>
 8015ac2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015ac4:	e24d      	b.n	8015f62 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8015ac6:	4630      	mov	r0, r6
 8015ac8:	f7f8 faf6 	bl	800e0b8 <GUI_MEMDEV_GetDataPtr>
 8015acc:	4606      	mov	r6, r0
 8015ace:	2d00      	cmp	r5, #0
 8015ad0:	f000 808a 	beq.w	8015be8 <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 8015ad4:	4628      	mov	r0, r5
 8015ad6:	f7fd ff11 	bl	80138fc <GUI_ALLOC_LockH>
 8015ada:	2500      	movs	r5, #0
 8015adc:	9018      	str	r0, [sp, #96]	; 0x60
 8015ade:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015ae0:	429d      	cmp	r5, r3
 8015ae2:	da7d      	bge.n	8015be0 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 8015ae4:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	9319      	str	r3, [sp, #100]	; 0x64
 8015aea:	6883      	ldr	r3, [r0, #8]
 8015aec:	a919      	add	r1, sp, #100	; 0x64
 8015aee:	695b      	ldr	r3, [r3, #20]
 8015af0:	462a      	mov	r2, r5
 8015af2:	4798      	blx	r3
 8015af4:	42b8      	cmp	r0, r7
 8015af6:	4682      	mov	sl, r0
 8015af8:	d124      	bne.n	8015b44 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 8015afa:	46aa      	mov	sl, r5
 8015afc:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015afe:	6883      	ldr	r3, [r0, #8]
 8015b00:	f10a 0b01 	add.w	fp, sl, #1
 8015b04:	695b      	ldr	r3, [r3, #20]
 8015b06:	a919      	add	r1, sp, #100	; 0x64
 8015b08:	465a      	mov	r2, fp
 8015b0a:	4798      	blx	r3
 8015b0c:	42b8      	cmp	r0, r7
 8015b0e:	d101      	bne.n	8015b14 <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 8015b10:	46da      	mov	sl, fp
 8015b12:	e7f3      	b.n	8015afc <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 8015b14:	ebc5 0b0a 	rsb	fp, r5, sl
 8015b18:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015b1a:	9604      	str	r6, [sp, #16]
 8015b1c:	2301      	movs	r3, #1
 8015b1e:	f10b 0b01 	add.w	fp, fp, #1
 8015b22:	9300      	str	r3, [sp, #0]
 8015b24:	9301      	str	r3, [sp, #4]
 8015b26:	4429      	add	r1, r5
 8015b28:	9402      	str	r4, [sp, #8]
 8015b2a:	f8cd 900c 	str.w	r9, [sp, #12]
 8015b2e:	f8cd 8014 	str.w	r8, [sp, #20]
 8015b32:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015b34:	463a      	mov	r2, r7
 8015b36:	465b      	mov	r3, fp
 8015b38:	f7fa fdea 	bl	8010710 <LCD_DrawBitmap>
 8015b3c:	fb09 660b 	mla	r6, r9, fp, r6
 8015b40:	4655      	mov	r5, sl
 8015b42:	e04b      	b.n	8015bdc <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 8015b44:	2c01      	cmp	r4, #1
 8015b46:	d127      	bne.n	8015b98 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 8015b48:	f1ba 0f00 	cmp.w	sl, #0
 8015b4c:	d022      	beq.n	8015b94 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 8015b4e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015b50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015b52:	f8cd 900c 	str.w	r9, [sp, #12]
 8015b56:	2208      	movs	r2, #8
 8015b58:	fb90 f2f2 	sdiv	r2, r0, r2
 8015b5c:	4432      	add	r2, r6
 8015b5e:	9204      	str	r2, [sp, #16]
 8015b60:	f000 0207 	and.w	r2, r0, #7
 8015b64:	4408      	add	r0, r1
 8015b66:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015b68:	9206      	str	r2, [sp, #24]
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	4652      	mov	r2, sl
 8015b6e:	9300      	str	r3, [sp, #0]
 8015b70:	9301      	str	r3, [sp, #4]
 8015b72:	9302      	str	r3, [sp, #8]
 8015b74:	4429      	add	r1, r5
 8015b76:	f8cd 8014 	str.w	r8, [sp, #20]
 8015b7a:	f7fa fced 	bl	8010558 <LCD__DrawBitmap_1bpp>
 8015b7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015b80:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015b82:	4453      	add	r3, sl
 8015b84:	9319      	str	r3, [sp, #100]	; 0x64
 8015b86:	6883      	ldr	r3, [r0, #8]
 8015b88:	a919      	add	r1, sp, #100	; 0x64
 8015b8a:	695b      	ldr	r3, [r3, #20]
 8015b8c:	462a      	mov	r2, r5
 8015b8e:	4798      	blx	r3
 8015b90:	4682      	mov	sl, r0
 8015b92:	e7d9      	b.n	8015b48 <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 8015b94:	444e      	add	r6, r9
 8015b96:	e021      	b.n	8015bdc <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 8015b98:	f1ba 0f00 	cmp.w	sl, #0
 8015b9c:	d0fa      	beq.n	8015b94 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 8015b9e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015ba0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015ba2:	9402      	str	r4, [sp, #8]
 8015ba4:	fb00 6201 	mla	r2, r0, r1, r6
 8015ba8:	9204      	str	r2, [sp, #16]
 8015baa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015bac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015bae:	f8cd 900c 	str.w	r9, [sp, #12]
 8015bb2:	2301      	movs	r3, #1
 8015bb4:	4410      	add	r0, r2
 8015bb6:	9300      	str	r3, [sp, #0]
 8015bb8:	4652      	mov	r2, sl
 8015bba:	9301      	str	r3, [sp, #4]
 8015bbc:	4429      	add	r1, r5
 8015bbe:	f8cd 8014 	str.w	r8, [sp, #20]
 8015bc2:	f7fa fda5 	bl	8010710 <LCD_DrawBitmap>
 8015bc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015bc8:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015bca:	4453      	add	r3, sl
 8015bcc:	9319      	str	r3, [sp, #100]	; 0x64
 8015bce:	6883      	ldr	r3, [r0, #8]
 8015bd0:	a919      	add	r1, sp, #100	; 0x64
 8015bd2:	695b      	ldr	r3, [r3, #20]
 8015bd4:	462a      	mov	r2, r5
 8015bd6:	4798      	blx	r3
 8015bd8:	4682      	mov	sl, r0
 8015bda:	e7dd      	b.n	8015b98 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 8015bdc:	3501      	adds	r5, #1
 8015bde:	e77e      	b.n	8015ade <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 8015be0:	a818      	add	r0, sp, #96	; 0x60
 8015be2:	f7fd fe99 	bl	8013918 <GUI_ALLOC_UnlockH>
 8015be6:	e1be      	b.n	8015f66 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8015be8:	2301      	movs	r3, #1
 8015bea:	9300      	str	r3, [sp, #0]
 8015bec:	9301      	str	r3, [sp, #4]
 8015bee:	9004      	str	r0, [sp, #16]
 8015bf0:	9402      	str	r4, [sp, #8]
 8015bf2:	f8cd 900c 	str.w	r9, [sp, #12]
 8015bf6:	f8cd 8014 	str.w	r8, [sp, #20]
 8015bfa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015bfc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015bfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015c00:	463a      	mov	r2, r7
 8015c02:	e041      	b.n	8015c88 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 8015c04:	4630      	mov	r0, r6
 8015c06:	910a      	str	r1, [sp, #40]	; 0x28
 8015c08:	f7fd fe78 	bl	80138fc <GUI_ALLOC_LockH>
 8015c0c:	4682      	mov	sl, r0
 8015c0e:	a81c      	add	r0, sp, #112	; 0x70
 8015c10:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8015c14:	f840 ad10 	str.w	sl, [r0, #-16]!
 8015c18:	f8da 4000 	ldr.w	r4, [sl]
 8015c1c:	9210      	str	r2, [sp, #64]	; 0x40
 8015c1e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015c22:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 8015c26:	4c9e      	ldr	r4, [pc, #632]	; (8015ea0 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 8015c28:	b213      	sxth	r3, r2
 8015c2a:	f8da 200c 	ldr.w	r2, [sl, #12]
 8015c2e:	920b      	str	r2, [sp, #44]	; 0x2c
 8015c30:	9309      	str	r3, [sp, #36]	; 0x24
 8015c32:	f7fd fe71 	bl	8013918 <GUI_ALLOC_UnlockH>
 8015c36:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8015c3a:	900e      	str	r0, [sp, #56]	; 0x38
 8015c3c:	4899      	ldr	r0, [pc, #612]	; (8015ea4 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 8015c3e:	6800      	ldr	r0, [r0, #0]
 8015c40:	7c40      	ldrb	r0, [r0, #17]
 8015c42:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8015c46:	6925      	ldr	r5, [r4, #16]
 8015c48:	f8d5 8000 	ldr.w	r8, [r5]
 8015c4c:	f7fa fb1e 	bl	801028c <GUI_GetBitsPerPixelEx>
 8015c50:	2808      	cmp	r0, #8
 8015c52:	fa0f fb87 	sxth.w	fp, r7
 8015c56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015c58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c5c:	d904      	bls.n	8015c68 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 8015c5e:	2810      	cmp	r0, #16
 8015c60:	bf8c      	ite	hi
 8015c62:	2404      	movhi	r4, #4
 8015c64:	2402      	movls	r4, #2
 8015c66:	e000      	b.n	8015c6a <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 8015c68:	2401      	movs	r4, #1
 8015c6a:	45a9      	cmp	r9, r5
 8015c6c:	d10f      	bne.n	8015c8e <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 8015c6e:	2001      	movs	r0, #1
 8015c70:	9203      	str	r2, [sp, #12]
 8015c72:	f10a 0218 	add.w	r2, sl, #24
 8015c76:	9000      	str	r0, [sp, #0]
 8015c78:	9001      	str	r0, [sp, #4]
 8015c7a:	9102      	str	r1, [sp, #8]
 8015c7c:	9204      	str	r2, [sp, #16]
 8015c7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015c80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015c82:	2200      	movs	r2, #0
 8015c84:	9205      	str	r2, [sp, #20]
 8015c86:	465a      	mov	r2, fp
 8015c88:	f7fa fd42 	bl	8010710 <LCD_DrawBitmap>
 8015c8c:	e16b      	b.n	8015f66 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8015c8e:	2920      	cmp	r1, #32
 8015c90:	f040 808e 	bne.w	8015db0 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 8015c94:	fb0b f004 	mul.w	r0, fp, r4
 8015c98:	f7fe f884 	bl	8013da4 <GUI_ALLOC_AllocNoInit>
 8015c9c:	900e      	str	r0, [sp, #56]	; 0x38
 8015c9e:	2800      	cmp	r0, #0
 8015ca0:	f000 8161 	beq.w	8015f66 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8015ca4:	f7fd fe2a 	bl	80138fc <GUI_ALLOC_LockH>
 8015ca8:	901a      	str	r0, [sp, #104]	; 0x68
 8015caa:	4630      	mov	r0, r6
 8015cac:	f7fd fe26 	bl	80138fc <GUI_ALLOC_LockH>
 8015cb0:	9018      	str	r0, [sp, #96]	; 0x60
 8015cb2:	692b      	ldr	r3, [r5, #16]
 8015cb4:	f100 0a18 	add.w	sl, r0, #24
 8015cb8:	ea4f 068b 	mov.w	r6, fp, lsl #2
 8015cbc:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d02f      	beq.n	8015d24 <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 8015cc4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8015cc8:	2c02      	cmp	r4, #2
 8015cca:	d003      	beq.n	8015cd4 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 8015ccc:	2c04      	cmp	r4, #4
 8015cce:	d001      	beq.n	8015cd4 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 8015cd0:	2c01      	cmp	r4, #1
 8015cd2:	d106      	bne.n	8015ce2 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 8015cd4:	4650      	mov	r0, sl
 8015cd6:	692f      	ldr	r7, [r5, #16]
 8015cd8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015cda:	465a      	mov	r2, fp
 8015cdc:	4623      	mov	r3, r4
 8015cde:	47b8      	blx	r7
 8015ce0:	44b2      	add	sl, r6
 8015ce2:	2301      	movs	r3, #1
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015ce8:	9300      	str	r3, [sp, #0]
 8015cea:	9301      	str	r3, [sp, #4]
 8015cec:	9203      	str	r2, [sp, #12]
 8015cee:	9104      	str	r1, [sp, #16]
 8015cf0:	9205      	str	r2, [sp, #20]
 8015cf2:	4641      	mov	r1, r8
 8015cf4:	465a      	mov	r2, fp
 8015cf6:	f8cd 9008 	str.w	r9, [sp, #8]
 8015cfa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015cfc:	f7fa fd08 	bl	8010710 <LCD_DrawBitmap>
 8015d00:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015d02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015d04:	f108 0701 	add.w	r7, r8, #1
 8015d08:	fa02 f381 	sxtah	r3, r2, r1
 8015d0c:	42bb      	cmp	r3, r7
 8015d0e:	d107      	bne.n	8015d20 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 8015d10:	a818      	add	r0, sp, #96	; 0x60
 8015d12:	f7fd fe01 	bl	8013918 <GUI_ALLOC_UnlockH>
 8015d16:	a81a      	add	r0, sp, #104	; 0x68
 8015d18:	f7fd fdfe 	bl	8013918 <GUI_ALLOC_UnlockH>
 8015d1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015d1e:	e120      	b.n	8015f62 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8015d20:	46b8      	mov	r8, r7
 8015d22:	e7d1      	b.n	8015cc8 <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 8015d24:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015d26:	2c02      	cmp	r4, #2
 8015d28:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8015d2a:	d00e      	beq.n	8015d4a <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 8015d2c:	2c04      	cmp	r4, #4
 8015d2e:	d018      	beq.n	8015d62 <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 8015d30:	2c01      	cmp	r4, #1
 8015d32:	d125      	bne.n	8015d80 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 8015d34:	2300      	movs	r3, #0
 8015d36:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8015d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8015d3c:	47c0      	blx	r8
 8015d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d40:	54f8      	strb	r0, [r7, r3]
 8015d42:	3301      	adds	r3, #1
 8015d44:	459b      	cmp	fp, r3
 8015d46:	d1f6      	bne.n	8015d36 <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 8015d48:	e019      	b.n	8015d7e <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8015d50:	9309      	str	r3, [sp, #36]	; 0x24
 8015d52:	47c0      	blx	r8
 8015d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d56:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 8015d5a:	3301      	adds	r3, #1
 8015d5c:	459b      	cmp	fp, r3
 8015d5e:	d1f5      	bne.n	8015d4c <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 8015d60:	e00d      	b.n	8015d7e <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 8015d62:	465a      	mov	r2, fp
 8015d64:	2300      	movs	r3, #0
 8015d66:	f85a 0003 	ldr.w	r0, [sl, r3]
 8015d6a:	920b      	str	r2, [sp, #44]	; 0x2c
 8015d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8015d6e:	47c0      	blx	r8
 8015d70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d74:	3a01      	subs	r2, #1
 8015d76:	50f8      	str	r0, [r7, r3]
 8015d78:	f103 0304 	add.w	r3, r3, #4
 8015d7c:	d1f3      	bne.n	8015d66 <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 8015d7e:	44b2      	add	sl, r6
 8015d80:	2301      	movs	r3, #1
 8015d82:	2200      	movs	r2, #0
 8015d84:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015d86:	9300      	str	r3, [sp, #0]
 8015d88:	9301      	str	r3, [sp, #4]
 8015d8a:	9203      	str	r2, [sp, #12]
 8015d8c:	9104      	str	r1, [sp, #16]
 8015d8e:	9205      	str	r2, [sp, #20]
 8015d90:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015d92:	f8cd 9008 	str.w	r9, [sp, #8]
 8015d96:	4629      	mov	r1, r5
 8015d98:	465a      	mov	r2, fp
 8015d9a:	f7fa fcb9 	bl	8010710 <LCD_DrawBitmap>
 8015d9e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015da0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015da2:	1c6f      	adds	r7, r5, #1
 8015da4:	fa01 f380 	sxtah	r3, r1, r0
 8015da8:	42bb      	cmp	r3, r7
 8015daa:	d0b1      	beq.n	8015d10 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 8015dac:	463d      	mov	r5, r7
 8015dae:	e7ba      	b.n	8015d26 <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 8015db0:	2910      	cmp	r1, #16
 8015db2:	f040 80d8 	bne.w	8015f66 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8015db6:	fa0f fa87 	sxth.w	sl, r7
 8015dba:	fb0a f004 	mul.w	r0, sl, r4
 8015dbe:	f7fd fff1 	bl	8013da4 <GUI_ALLOC_AllocNoInit>
 8015dc2:	9012      	str	r0, [sp, #72]	; 0x48
 8015dc4:	2800      	cmp	r0, #0
 8015dc6:	f000 80ce 	beq.w	8015f66 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8015dca:	f7fd fd97 	bl	80138fc <GUI_ALLOC_LockH>
 8015dce:	901a      	str	r0, [sp, #104]	; 0x68
 8015dd0:	4630      	mov	r0, r6
 8015dd2:	f7fd fd93 	bl	80138fc <GUI_ALLOC_LockH>
 8015dd6:	9018      	str	r0, [sp, #96]	; 0x60
 8015dd8:	692b      	ldr	r3, [r5, #16]
 8015dda:	f100 0618 	add.w	r6, r0, #24
 8015dde:	b113      	cbz	r3, 8015de6 <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 8015de0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015de4:	b92b      	cbnz	r3, 8015df2 <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 8015de6:	00e2      	lsls	r2, r4, #3
 8015de8:	b23f      	sxth	r7, r7
 8015dea:	9211      	str	r2, [sp, #68]	; 0x44
 8015dec:	007f      	lsls	r7, r7, #1
 8015dee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015df0:	e088      	b.n	8015f04 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 8015df2:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8015df6:	0080      	lsls	r0, r0, #2
 8015df8:	f7fd ffd4 	bl	8013da4 <GUI_ALLOC_AllocNoInit>
 8015dfc:	9011      	str	r0, [sp, #68]	; 0x44
 8015dfe:	b118      	cbz	r0, 8015e08 <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 8015e00:	f7fd fd7c 	bl	80138fc <GUI_ALLOC_LockH>
 8015e04:	9019      	str	r0, [sp, #100]	; 0x64
 8015e06:	e001      	b.n	8015e0c <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 8015e08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e0a:	9319      	str	r3, [sp, #100]	; 0x64
 8015e0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	f000 80a0 	beq.w	8015f54 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8015e14:	b23f      	sxth	r7, r7
 8015e16:	007f      	lsls	r7, r7, #1
 8015e18:	970e      	str	r7, [sp, #56]	; 0x38
 8015e1a:	00e7      	lsls	r7, r4, #3
 8015e1c:	9713      	str	r7, [sp, #76]	; 0x4c
 8015e1e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015e20:	970c      	str	r7, [sp, #48]	; 0x30
 8015e22:	2c02      	cmp	r4, #2
 8015e24:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8015e28:	d004      	beq.n	8015e34 <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 8015e2a:	2c04      	cmp	r4, #4
 8015e2c:	d007      	beq.n	8015e3e <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8015e2e:	2c01      	cmp	r4, #1
 8015e30:	d114      	bne.n	8015e5c <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 8015e32:	e004      	b.n	8015e3e <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8015e34:	4630      	mov	r0, r6
 8015e36:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015e38:	4652      	mov	r2, sl
 8015e3a:	4623      	mov	r3, r4
 8015e3c:	e003      	b.n	8015e46 <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 8015e3e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015e40:	4630      	mov	r0, r6
 8015e42:	4652      	mov	r2, sl
 8015e44:	2302      	movs	r3, #2
 8015e46:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8015e4a:	47b8      	blx	r7
 8015e4c:	692f      	ldr	r7, [r5, #16]
 8015e4e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015e50:	4641      	mov	r1, r8
 8015e52:	4652      	mov	r2, sl
 8015e54:	4623      	mov	r3, r4
 8015e56:	47b8      	blx	r7
 8015e58:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8015e5a:	443e      	add	r6, r7
 8015e5c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8015e5e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015e60:	9104      	str	r1, [sp, #16]
 8015e62:	2301      	movs	r3, #1
 8015e64:	2200      	movs	r2, #0
 8015e66:	f107 0801 	add.w	r8, r7, #1
 8015e6a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8015e6c:	9300      	str	r3, [sp, #0]
 8015e6e:	9301      	str	r3, [sp, #4]
 8015e70:	9702      	str	r7, [sp, #8]
 8015e72:	9203      	str	r2, [sp, #12]
 8015e74:	9205      	str	r2, [sp, #20]
 8015e76:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015e78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015e7a:	465a      	mov	r2, fp
 8015e7c:	f7fa fc48 	bl	8010710 <LCD_DrawBitmap>
 8015e80:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8015e82:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015e84:	fa00 f387 	sxtah	r3, r0, r7
 8015e88:	4543      	cmp	r3, r8
 8015e8a:	d002      	beq.n	8015e92 <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 8015e8c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8015e90:	e7c7      	b.n	8015e22 <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 8015e92:	a819      	add	r0, sp, #100	; 0x64
 8015e94:	f7fd fd40 	bl	8013918 <GUI_ALLOC_UnlockH>
 8015e98:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015e9a:	f7fd fd69 	bl	8013970 <GUI_ALLOC_Free>
 8015e9e:	e059      	b.n	8015f54 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8015ea0:	2001d5dc 	.word	0x2001d5dc
 8015ea4:	20000110 	.word	0x20000110
 8015ea8:	2c04      	cmp	r4, #4
 8015eaa:	d041      	beq.n	8015f30 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 8015eac:	2c01      	cmp	r4, #1
 8015eae:	d111      	bne.n	8015ed4 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 8015eb0:	464a      	mov	r2, r9
 8015eb2:	4631      	mov	r1, r6
 8015eb4:	f831 0b02 	ldrh.w	r0, [r1], #2
 8015eb8:	910a      	str	r1, [sp, #40]	; 0x28
 8015eba:	920b      	str	r2, [sp, #44]	; 0x2c
 8015ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ebe:	4798      	blx	r3
 8015ec0:	47c0      	blx	r8
 8015ec2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015ec4:	f802 0b01 	strb.w	r0, [r2], #1
 8015ec8:	eb09 000a 	add.w	r0, r9, sl
 8015ecc:	4282      	cmp	r2, r0
 8015ece:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015ed0:	d1f0      	bne.n	8015eb4 <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 8015ed2:	443e      	add	r6, r7
 8015ed4:	2301      	movs	r3, #1
 8015ed6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015ed8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015eda:	9300      	str	r3, [sp, #0]
 8015edc:	2200      	movs	r2, #0
 8015ede:	9301      	str	r3, [sp, #4]
 8015ee0:	9002      	str	r0, [sp, #8]
 8015ee2:	9203      	str	r2, [sp, #12]
 8015ee4:	9104      	str	r1, [sp, #16]
 8015ee6:	9205      	str	r2, [sp, #20]
 8015ee8:	4629      	mov	r1, r5
 8015eea:	465a      	mov	r2, fp
 8015eec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015eee:	f7fa fc0f 	bl	8010710 <LCD_DrawBitmap>
 8015ef2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015ef4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ef6:	f105 0901 	add.w	r9, r5, #1
 8015efa:	fa02 f381 	sxtah	r3, r2, r1
 8015efe:	454b      	cmp	r3, r9
 8015f00:	d028      	beq.n	8015f54 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8015f02:	464d      	mov	r5, r9
 8015f04:	2c02      	cmp	r4, #2
 8015f06:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8015f0a:	d1cd      	bne.n	8015ea8 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 8015f0c:	464b      	mov	r3, r9
 8015f0e:	4631      	mov	r1, r6
 8015f10:	46d9      	mov	r9, fp
 8015f12:	f831 0b02 	ldrh.w	r0, [r1], #2
 8015f16:	910a      	str	r1, [sp, #40]	; 0x28
 8015f18:	9309      	str	r3, [sp, #36]	; 0x24
 8015f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f1c:	4790      	blx	r2
 8015f1e:	47c0      	blx	r8
 8015f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f22:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015f24:	f823 0b02 	strh.w	r0, [r3], #2
 8015f28:	f1b9 0901 	subs.w	r9, r9, #1
 8015f2c:	d1f1      	bne.n	8015f12 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 8015f2e:	e7d0      	b.n	8015ed2 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 8015f30:	464b      	mov	r3, r9
 8015f32:	4631      	mov	r1, r6
 8015f34:	46d9      	mov	r9, fp
 8015f36:	f831 0b02 	ldrh.w	r0, [r1], #2
 8015f3a:	910a      	str	r1, [sp, #40]	; 0x28
 8015f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8015f3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f40:	4790      	blx	r2
 8015f42:	47c0      	blx	r8
 8015f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015f48:	f843 0b04 	str.w	r0, [r3], #4
 8015f4c:	f1b9 0901 	subs.w	r9, r9, #1
 8015f50:	d1f1      	bne.n	8015f36 <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 8015f52:	e7be      	b.n	8015ed2 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 8015f54:	a818      	add	r0, sp, #96	; 0x60
 8015f56:	f7fd fcdf 	bl	8013918 <GUI_ALLOC_UnlockH>
 8015f5a:	a81a      	add	r0, sp, #104	; 0x68
 8015f5c:	f7fd fcdc 	bl	8013918 <GUI_ALLOC_UnlockH>
 8015f60:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015f62:	f7fd fd05 	bl	8013970 <GUI_ALLOC_Free>
 8015f66:	b01d      	add	sp, #116	; 0x74
 8015f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f6c <GUI_MEMDEV__WriteToActiveAlpha>:
 8015f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f70:	b091      	sub	sp, #68	; 0x44
 8015f72:	460e      	mov	r6, r1
 8015f74:	4614      	mov	r4, r2
 8015f76:	900d      	str	r0, [sp, #52]	; 0x34
 8015f78:	f7fd fcc0 	bl	80138fc <GUI_ALLOC_LockH>
 8015f7c:	4602      	mov	r2, r0
 8015f7e:	a810      	add	r0, sp, #64	; 0x40
 8015f80:	6813      	ldr	r3, [r2, #0]
 8015f82:	4d5b      	ldr	r5, [pc, #364]	; (80160f0 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 8015f84:	691b      	ldr	r3, [r3, #16]
 8015f86:	f840 2d08 	str.w	r2, [r0, #-8]!
 8015f8a:	685b      	ldr	r3, [r3, #4]
 8015f8c:	f8b2 b008 	ldrh.w	fp, [r2, #8]
 8015f90:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 8015f94:	9309      	str	r3, [sp, #36]	; 0x24
 8015f96:	f7fd fcbf 	bl	8013918 <GUI_ALLOC_UnlockH>
 8015f9a:	682b      	ldr	r3, [r5, #0]
 8015f9c:	4f55      	ldr	r7, [pc, #340]	; (80160f4 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 8015f9e:	7c5b      	ldrb	r3, [r3, #17]
 8015fa0:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8015fa4:	68c3      	ldr	r3, [r0, #12]
 8015fa6:	2108      	movs	r1, #8
 8015fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015faa:	4798      	blx	r3
 8015fac:	682b      	ldr	r3, [r5, #0]
 8015fae:	7c5b      	ldrb	r3, [r3, #17]
 8015fb0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8015fb4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8015fb8:	2817      	cmp	r0, #23
 8015fba:	bf88      	it	hi
 8015fbc:	2020      	movhi	r0, #32
 8015fbe:	9008      	str	r0, [sp, #32]
 8015fc0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015fc4:	f8d8 2000 	ldr.w	r2, [r8]
 8015fc8:	910a      	str	r1, [sp, #40]	; 0x28
 8015fca:	2000      	movs	r0, #0
 8015fcc:	920b      	str	r2, [sp, #44]	; 0x2c
 8015fce:	f7fb f87d 	bl	80110cc <GUI__AllocAlphaBuffer>
 8015fd2:	2800      	cmp	r0, #0
 8015fd4:	f040 8089 	bne.w	80160ea <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8015fd8:	682a      	ldr	r2, [r5, #0]
 8015fda:	fa0f f78b 	sxth.w	r7, fp
 8015fde:	19f5      	adds	r5, r6, r7
 8015fe0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8015fe4:	3d01      	subs	r5, #1
 8015fe6:	1aed      	subs	r5, r5, r3
 8015fe8:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8015fec:	2d00      	cmp	r5, #0
 8015fee:	bfcc      	ite	gt
 8015ff0:	ebc5 0507 	rsbgt	r5, r5, r7
 8015ff4:	463d      	movle	r5, r7
 8015ff6:	42b3      	cmp	r3, r6
 8015ff8:	bfc3      	ittte	gt
 8015ffa:	ebc6 0103 	rsbgt	r1, r6, r3
 8015ffe:	ebc1 0505 	rsbgt	r5, r1, r5
 8016002:	461e      	movgt	r6, r3
 8016004:	2100      	movle	r1, #0
 8016006:	2d00      	cmp	r5, #0
 8016008:	dd6f      	ble.n	80160ea <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 801600a:	fa0f f389 	sxth.w	r3, r9
 801600e:	18e0      	adds	r0, r4, r3
 8016010:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 8016014:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8016018:	3801      	subs	r0, #1
 801601a:	ebcc 0000 	rsb	r0, ip, r0
 801601e:	2800      	cmp	r0, #0
 8016020:	bfc8      	it	gt
 8016022:	ebc0 0303 	rsbgt	r3, r0, r3
 8016026:	4294      	cmp	r4, r2
 8016028:	bfbd      	ittte	lt
 801602a:	ebc4 0a02 	rsblt	sl, r4, r2
 801602e:	ebca 0303 	rsblt	r3, sl, r3
 8016032:	4614      	movlt	r4, r2
 8016034:	f04f 0a00 	movge.w	sl, #0
 8016038:	2b00      	cmp	r3, #0
 801603a:	dd56      	ble.n	80160ea <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 801603c:	fb07 1a0a 	mla	sl, r7, sl, r1
 8016040:	18e3      	adds	r3, r4, r3
 8016042:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8016046:	930c      	str	r3, [sp, #48]	; 0x30
 8016048:	980d      	ldr	r0, [sp, #52]	; 0x34
 801604a:	f7f8 f835 	bl	800e0b8 <GUI_MEMDEV_GetDataPtr>
 801604e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016050:	9300      	str	r3, [sp, #0]
 8016052:	ab0f      	add	r3, sp, #60	; 0x3c
 8016054:	eb00 020a 	add.w	r2, r0, sl
 8016058:	9301      	str	r3, [sp, #4]
 801605a:	4630      	mov	r0, r6
 801605c:	4621      	mov	r1, r4
 801605e:	462b      	mov	r3, r5
 8016060:	f7fa ff4e 	bl	8010f00 <GUI__DoAlphaBlending>
 8016064:	4681      	mov	r9, r0
 8016066:	2800      	cmp	r0, #0
 8016068:	d03f      	beq.n	80160ea <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 801606a:	4b23      	ldr	r3, [pc, #140]	; (80160f8 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 801606c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801606e:	4299      	cmp	r1, r3
 8016070:	d01e      	beq.n	80160b0 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8016072:	4629      	mov	r1, r5
 8016074:	9a08      	ldr	r2, [sp, #32]
 8016076:	4643      	mov	r3, r8
 8016078:	f001 fcdd 	bl	8017a36 <GUI__CompactPixelIndicesEx>
 801607c:	b9c0      	cbnz	r0, 80160b0 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 801607e:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8016082:	f1bc 0f00 	cmp.w	ip, #0
 8016086:	d006      	beq.n	8016096 <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 8016088:	4648      	mov	r0, r9
 801608a:	4649      	mov	r1, r9
 801608c:	fa0f f28b 	sxth.w	r2, fp
 8016090:	2304      	movs	r3, #4
 8016092:	47e0      	blx	ip
 8016094:	e00c      	b.n	80160b0 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8016096:	464a      	mov	r2, r9
 8016098:	463b      	mov	r3, r7
 801609a:	6810      	ldr	r0, [r2, #0]
 801609c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801609e:	9206      	str	r2, [sp, #24]
 80160a0:	9307      	str	r3, [sp, #28]
 80160a2:	4788      	blx	r1
 80160a4:	9b07      	ldr	r3, [sp, #28]
 80160a6:	9a06      	ldr	r2, [sp, #24]
 80160a8:	3b01      	subs	r3, #1
 80160aa:	f842 0b04 	str.w	r0, [r2], #4
 80160ae:	d1f4      	bne.n	801609a <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 80160b0:	9a08      	ldr	r2, [sp, #32]
 80160b2:	9202      	str	r2, [sp, #8]
 80160b4:	2301      	movs	r3, #1
 80160b6:	2200      	movs	r2, #0
 80160b8:	f104 0c01 	add.w	ip, r4, #1
 80160bc:	9300      	str	r3, [sp, #0]
 80160be:	9301      	str	r3, [sp, #4]
 80160c0:	9203      	str	r2, [sp, #12]
 80160c2:	9205      	str	r2, [sp, #20]
 80160c4:	f8cd 9010 	str.w	r9, [sp, #16]
 80160c8:	4630      	mov	r0, r6
 80160ca:	4621      	mov	r1, r4
 80160cc:	462a      	mov	r2, r5
 80160ce:	f8cd c01c 	str.w	ip, [sp, #28]
 80160d2:	f7fa fb1d 	bl	8010710 <LCD_DrawBitmap>
 80160d6:	2304      	movs	r3, #4
 80160d8:	fb1b aa03 	smlabb	sl, fp, r3, sl
 80160dc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80160e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160e2:	459c      	cmp	ip, r3
 80160e4:	d001      	beq.n	80160ea <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80160e6:	4664      	mov	r4, ip
 80160e8:	e7ae      	b.n	8016048 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 80160ea:	b011      	add	sp, #68	; 0x44
 80160ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160f0:	20000110 	.word	0x20000110
 80160f4:	2001d5dc 	.word	0x2001d5dc
 80160f8:	080140a7 	.word	0x080140a7

080160fc <GUI_MEMDEV_WriteAt>:
 80160fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80160fe:	460c      	mov	r4, r1
 8016100:	4615      	mov	r5, r2
 8016102:	4606      	mov	r6, r0
 8016104:	b330      	cbz	r0, 8016154 <GUI_MEMDEV_WriteAt+0x58>
 8016106:	f7fd fbf9 	bl	80138fc <GUI_ALLOC_LockH>
 801610a:	4a13      	ldr	r2, [pc, #76]	; (8016158 <GUI_MEMDEV_WriteAt+0x5c>)
 801610c:	8943      	ldrh	r3, [r0, #10]
 801610e:	9001      	str	r0, [sp, #4]
 8016110:	4294      	cmp	r4, r2
 8016112:	8902      	ldrh	r2, [r0, #8]
 8016114:	bf04      	itt	eq
 8016116:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 801611a:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 801611e:	f8ad 4008 	strh.w	r4, [sp, #8]
 8016122:	3a01      	subs	r2, #1
 8016124:	3b01      	subs	r3, #1
 8016126:	4422      	add	r2, r4
 8016128:	442b      	add	r3, r5
 801612a:	a801      	add	r0, sp, #4
 801612c:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016130:	f8ad 500a 	strh.w	r5, [sp, #10]
 8016134:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016138:	f7fd fbee 	bl	8013918 <GUI_ALLOC_UnlockH>
 801613c:	a802      	add	r0, sp, #8
 801613e:	f7f7 fbef 	bl	800d920 <WM__InitIVRSearch>
 8016142:	b138      	cbz	r0, 8016154 <GUI_MEMDEV_WriteAt+0x58>
 8016144:	4630      	mov	r0, r6
 8016146:	4621      	mov	r1, r4
 8016148:	462a      	mov	r2, r5
 801614a:	f7f8 fd7b 	bl	800ec44 <GUI_MEMDEV__WriteToActiveAt>
 801614e:	f7f7 fb25 	bl	800d79c <WM__GetNextIVR>
 8016152:	e7f6      	b.n	8016142 <GUI_MEMDEV_WriteAt+0x46>
 8016154:	b004      	add	sp, #16
 8016156:	bd70      	pop	{r4, r5, r6, pc}
 8016158:	fffff001 	.word	0xfffff001

0801615c <GUI_MEMDEV_Write>:
 801615c:	4901      	ldr	r1, [pc, #4]	; (8016164 <GUI_MEMDEV_Write+0x8>)
 801615e:	460a      	mov	r2, r1
 8016160:	f7ff bfcc 	b.w	80160fc <GUI_MEMDEV_WriteAt>
 8016164:	fffff001 	.word	0xfffff001

08016168 <GUI_USAGE_BM_AddPixel>:
 8016168:	4603      	mov	r3, r0
 801616a:	b510      	push	{r4, lr}
 801616c:	f933 4b14 	ldrsh.w	r4, [r3], #20
 8016170:	1b09      	subs	r1, r1, r4
 8016172:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8016176:	6900      	ldr	r0, [r0, #16]
 8016178:	1b12      	subs	r2, r2, r4
 801617a:	fb00 3302 	mla	r3, r0, r2, r3
 801617e:	10c8      	asrs	r0, r1, #3
 8016180:	2280      	movs	r2, #128	; 0x80
 8016182:	f001 0107 	and.w	r1, r1, #7
 8016186:	fa42 f101 	asr.w	r1, r2, r1
 801618a:	5c1a      	ldrb	r2, [r3, r0]
 801618c:	4311      	orrs	r1, r2
 801618e:	5419      	strb	r1, [r3, r0]
 8016190:	bd10      	pop	{r4, pc}

08016192 <GUI_USAGE_BM_GetNextDirty>:
 8016192:	b570      	push	{r4, r5, r6, lr}
 8016194:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8016198:	680b      	ldr	r3, [r1, #0]
 801619a:	8886      	ldrh	r6, [r0, #4]
 801619c:	42a2      	cmp	r2, r4
 801619e:	da41      	bge.n	8016224 <GUI_USAGE_BM_GetNextDirty+0x92>
 80161a0:	b236      	sxth	r6, r6
 80161a2:	42b3      	cmp	r3, r6
 80161a4:	6904      	ldr	r4, [r0, #16]
 80161a6:	da3d      	bge.n	8016224 <GUI_USAGE_BM_GetNextDirty+0x92>
 80161a8:	3014      	adds	r0, #20
 80161aa:	fb04 0202 	mla	r2, r4, r2, r0
 80161ae:	10dd      	asrs	r5, r3, #3
 80161b0:	1e70      	subs	r0, r6, #1
 80161b2:	1954      	adds	r4, r2, r5
 80161b4:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 80161b8:	5d55      	ldrb	r5, [r2, r5]
 80161ba:	f003 0207 	and.w	r2, r3, #7
 80161be:	fa05 f202 	lsl.w	r2, r5, r2
 80161c2:	3401      	adds	r4, #1
 80161c4:	b2d2      	uxtb	r2, r2
 80161c6:	b93a      	cbnz	r2, 80161d8 <GUI_USAGE_BM_GetNextDirty+0x46>
 80161c8:	b368      	cbz	r0, 8016226 <GUI_USAGE_BM_GetNextDirty+0x94>
 80161ca:	3308      	adds	r3, #8
 80161cc:	f814 2b01 	ldrb.w	r2, [r4], #1
 80161d0:	3801      	subs	r0, #1
 80161d2:	f023 0307 	bic.w	r3, r3, #7
 80161d6:	e7f6      	b.n	80161c6 <GUI_USAGE_BM_GetNextDirty+0x34>
 80161d8:	0615      	lsls	r5, r2, #24
 80161da:	d403      	bmi.n	80161e4 <GUI_USAGE_BM_GetNextDirty+0x52>
 80161dc:	0052      	lsls	r2, r2, #1
 80161de:	b2d2      	uxtb	r2, r2
 80161e0:	3301      	adds	r3, #1
 80161e2:	e7f9      	b.n	80161d8 <GUI_USAGE_BM_GetNextDirty+0x46>
 80161e4:	2aff      	cmp	r2, #255	; 0xff
 80161e6:	461d      	mov	r5, r3
 80161e8:	d005      	beq.n	80161f6 <GUI_USAGE_BM_GetNextDirty+0x64>
 80161ea:	0656      	lsls	r6, r2, #25
 80161ec:	d504      	bpl.n	80161f8 <GUI_USAGE_BM_GetNextDirty+0x66>
 80161ee:	0052      	lsls	r2, r2, #1
 80161f0:	b2d2      	uxtb	r2, r2
 80161f2:	3301      	adds	r3, #1
 80161f4:	e7f9      	b.n	80161ea <GUI_USAGE_BM_GetNextDirty+0x58>
 80161f6:	3307      	adds	r3, #7
 80161f8:	f003 0207 	and.w	r2, r3, #7
 80161fc:	2a07      	cmp	r2, #7
 80161fe:	d10d      	bne.n	801621c <GUI_USAGE_BM_GetNextDirty+0x8a>
 8016200:	3801      	subs	r0, #1
 8016202:	d40b      	bmi.n	801621c <GUI_USAGE_BM_GetNextDirty+0x8a>
 8016204:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016208:	2aff      	cmp	r2, #255	; 0xff
 801620a:	d101      	bne.n	8016210 <GUI_USAGE_BM_GetNextDirty+0x7e>
 801620c:	3308      	adds	r3, #8
 801620e:	e7f7      	b.n	8016200 <GUI_USAGE_BM_GetNextDirty+0x6e>
 8016210:	0610      	lsls	r0, r2, #24
 8016212:	d503      	bpl.n	801621c <GUI_USAGE_BM_GetNextDirty+0x8a>
 8016214:	0052      	lsls	r2, r2, #1
 8016216:	b2d2      	uxtb	r2, r2
 8016218:	3301      	adds	r3, #1
 801621a:	e7f9      	b.n	8016210 <GUI_USAGE_BM_GetNextDirty+0x7e>
 801621c:	1b58      	subs	r0, r3, r5
 801621e:	600d      	str	r5, [r1, #0]
 8016220:	3001      	adds	r0, #1
 8016222:	bd70      	pop	{r4, r5, r6, pc}
 8016224:	2000      	movs	r0, #0
 8016226:	bd70      	pop	{r4, r5, r6, pc}

08016228 <_GUI_USAGE_BM_Delete>:
 8016228:	f7fd bba2 	b.w	8013970 <GUI_ALLOC_Free>

0801622c <GUI_USAGE_BM_Clear>:
 801622c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016230:	6902      	ldr	r2, [r0, #16]
 8016232:	2100      	movs	r1, #0
 8016234:	3014      	adds	r0, #20
 8016236:	435a      	muls	r2, r3
 8016238:	f004 baf2 	b.w	801a820 <memset>

0801623c <GUI_USAGE_BM_AddHLine>:
 801623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801623e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016242:	1b09      	subs	r1, r1, r4
 8016244:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8016248:	42a1      	cmp	r1, r4
 801624a:	da2f      	bge.n	80162ac <GUI_USAGE_BM_AddHLine+0x70>
 801624c:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8016250:	440b      	add	r3, r1
 8016252:	f100 0414 	add.w	r4, r0, #20
 8016256:	3b01      	subs	r3, #1
 8016258:	6900      	ldr	r0, [r0, #16]
 801625a:	1b52      	subs	r2, r2, r5
 801625c:	43de      	mvns	r6, r3
 801625e:	fb00 4202 	mla	r2, r0, r2, r4
 8016262:	f001 0707 	and.w	r7, r1, #7
 8016266:	10cc      	asrs	r4, r1, #3
 8016268:	f006 0607 	and.w	r6, r6, #7
 801626c:	21ff      	movs	r1, #255	; 0xff
 801626e:	fa41 f707 	asr.w	r7, r1, r7
 8016272:	fa01 f606 	lsl.w	r6, r1, r6
 8016276:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 801627a:	eb02 0504 	add.w	r5, r2, r4
 801627e:	b2ff      	uxtb	r7, r7
 8016280:	b2f6      	uxtb	r6, r6
 8016282:	5d10      	ldrb	r0, [r2, r4]
 8016284:	d103      	bne.n	801628e <GUI_USAGE_BM_AddHLine+0x52>
 8016286:	403e      	ands	r6, r7
 8016288:	4330      	orrs	r0, r6
 801628a:	5510      	strb	r0, [r2, r4]
 801628c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801628e:	4338      	orrs	r0, r7
 8016290:	5510      	strb	r0, [r2, r4]
 8016292:	1e5c      	subs	r4, r3, #1
 8016294:	2c00      	cmp	r4, #0
 8016296:	f105 0501 	add.w	r5, r5, #1
 801629a:	dd04      	ble.n	80162a6 <GUI_USAGE_BM_AddHLine+0x6a>
 801629c:	4628      	mov	r0, r5
 801629e:	4622      	mov	r2, r4
 80162a0:	f004 fabe 	bl	801a820 <memset>
 80162a4:	4425      	add	r5, r4
 80162a6:	782b      	ldrb	r3, [r5, #0]
 80162a8:	431e      	orrs	r6, r3
 80162aa:	702e      	strb	r6, [r5, #0]
 80162ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080162b0 <GUI_USAGE_BM_Create>:
 80162b0:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 80162b4:	f102 060f 	add.w	r6, r2, #15
 80162b8:	1136      	asrs	r6, r6, #4
 80162ba:	0076      	lsls	r6, r6, #1
 80162bc:	4682      	mov	sl, r0
 80162be:	fb06 f003 	mul.w	r0, r6, r3
 80162c2:	3014      	adds	r0, #20
 80162c4:	4689      	mov	r9, r1
 80162c6:	4690      	mov	r8, r2
 80162c8:	461f      	mov	r7, r3
 80162ca:	f7fd fdf7 	bl	8013ebc <GUI_ALLOC_AllocZero>
 80162ce:	4683      	mov	fp, r0
 80162d0:	b198      	cbz	r0, 80162fa <GUI_USAGE_BM_Create+0x4a>
 80162d2:	f7fd fb13 	bl	80138fc <GUI_ALLOC_LockH>
 80162d6:	4604      	mov	r4, r0
 80162d8:	4b0a      	ldr	r3, [pc, #40]	; (8016304 <GUI_USAGE_BM_Create+0x54>)
 80162da:	60a3      	str	r3, [r4, #8]
 80162dc:	a802      	add	r0, sp, #8
 80162de:	2301      	movs	r3, #1
 80162e0:	f840 4d04 	str.w	r4, [r0, #-4]!
 80162e4:	f8a4 8004 	strh.w	r8, [r4, #4]
 80162e8:	f8a4 a000 	strh.w	sl, [r4]
 80162ec:	f8a4 9002 	strh.w	r9, [r4, #2]
 80162f0:	80e7      	strh	r7, [r4, #6]
 80162f2:	81a3      	strh	r3, [r4, #12]
 80162f4:	6126      	str	r6, [r4, #16]
 80162f6:	f7fd fb0f 	bl	8013918 <GUI_ALLOC_UnlockH>
 80162fa:	4658      	mov	r0, fp
 80162fc:	b002      	add	sp, #8
 80162fe:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 8016302:	bf00      	nop
 8016304:	08020c2c 	.word	0x08020c2c

08016308 <GUI_USAGE_DecUseCnt>:
 8016308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801630a:	4605      	mov	r5, r0
 801630c:	f7fd faf6 	bl	80138fc <GUI_ALLOC_LockH>
 8016310:	4602      	mov	r2, r0
 8016312:	a802      	add	r0, sp, #8
 8016314:	8994      	ldrh	r4, [r2, #12]
 8016316:	f840 2d04 	str.w	r2, [r0, #-4]!
 801631a:	3c01      	subs	r4, #1
 801631c:	b2a4      	uxth	r4, r4
 801631e:	8194      	strh	r4, [r2, #12]
 8016320:	f7fd fafa 	bl	8013918 <GUI_ALLOC_UnlockH>
 8016324:	b914      	cbnz	r4, 801632c <GUI_USAGE_DecUseCnt+0x24>
 8016326:	4628      	mov	r0, r5
 8016328:	f7fd fb22 	bl	8013970 <GUI_ALLOC_Free>
 801632c:	b003      	add	sp, #12
 801632e:	bd30      	pop	{r4, r5, pc}

08016330 <GUI_USAGE_AddRect>:
 8016330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016334:	4605      	mov	r5, r0
 8016336:	4688      	mov	r8, r1
 8016338:	4617      	mov	r7, r2
 801633a:	4699      	mov	r9, r3
 801633c:	68a8      	ldr	r0, [r5, #8]
 801633e:	464b      	mov	r3, r9
 8016340:	6846      	ldr	r6, [r0, #4]
 8016342:	4641      	mov	r1, r8
 8016344:	4628      	mov	r0, r5
 8016346:	1c54      	adds	r4, r2, #1
 8016348:	47b0      	blx	r6
 801634a:	9b08      	ldr	r3, [sp, #32]
 801634c:	443b      	add	r3, r7
 801634e:	42a3      	cmp	r3, r4
 8016350:	d001      	beq.n	8016356 <GUI_USAGE_AddRect+0x26>
 8016352:	4622      	mov	r2, r4
 8016354:	e7f2      	b.n	801633c <GUI_USAGE_AddRect+0xc>
 8016356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801635c <GUI_MEMDEV_ReduceYSize>:
 801635c:	b513      	push	{r0, r1, r4, lr}
 801635e:	460c      	mov	r4, r1
 8016360:	b918      	cbnz	r0, 801636a <GUI_MEMDEV_ReduceYSize+0xe>
 8016362:	4b08      	ldr	r3, [pc, #32]	; (8016384 <GUI_MEMDEV_ReduceYSize+0x28>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8016368:	b150      	cbz	r0, 8016380 <GUI_MEMDEV_ReduceYSize+0x24>
 801636a:	f7fd fac7 	bl	80138fc <GUI_ALLOC_LockH>
 801636e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016372:	9001      	str	r0, [sp, #4]
 8016374:	429c      	cmp	r4, r3
 8016376:	bfb8      	it	lt
 8016378:	8144      	strhlt	r4, [r0, #10]
 801637a:	a801      	add	r0, sp, #4
 801637c:	f7fd facc 	bl	8013918 <GUI_ALLOC_UnlockH>
 8016380:	b002      	add	sp, #8
 8016382:	bd10      	pop	{r4, pc}
 8016384:	20000110 	.word	0x20000110

08016388 <GUI_MEMDEV_Clear>:
 8016388:	b513      	push	{r0, r1, r4, lr}
 801638a:	b918      	cbnz	r0, 8016394 <GUI_MEMDEV_Clear+0xc>
 801638c:	4b0d      	ldr	r3, [pc, #52]	; (80163c4 <GUI_MEMDEV_Clear+0x3c>)
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8016392:	b1a8      	cbz	r0, 80163c0 <GUI_MEMDEV_Clear+0x38>
 8016394:	f7fd fab2 	bl	80138fc <GUI_ALLOC_LockH>
 8016398:	ab02      	add	r3, sp, #8
 801639a:	6944      	ldr	r4, [r0, #20]
 801639c:	f843 0d08 	str.w	r0, [r3, #-8]!
 80163a0:	4668      	mov	r0, sp
 80163a2:	f7fd fab9 	bl	8013918 <GUI_ALLOC_UnlockH>
 80163a6:	b15c      	cbz	r4, 80163c0 <GUI_MEMDEV_Clear+0x38>
 80163a8:	4620      	mov	r0, r4
 80163aa:	f7fd faa7 	bl	80138fc <GUI_ALLOC_LockH>
 80163ae:	ac02      	add	r4, sp, #8
 80163b0:	6883      	ldr	r3, [r0, #8]
 80163b2:	f844 0d04 	str.w	r0, [r4, #-4]!
 80163b6:	689b      	ldr	r3, [r3, #8]
 80163b8:	4798      	blx	r3
 80163ba:	4620      	mov	r0, r4
 80163bc:	f7fd faac 	bl	8013918 <GUI_ALLOC_UnlockH>
 80163c0:	b002      	add	sp, #8
 80163c2:	bd10      	pop	{r4, pc}
 80163c4:	20000110 	.word	0x20000110

080163c8 <_GetDevData>:
 80163c8:	4802      	ldr	r0, [pc, #8]	; (80163d4 <_GetDevData+0xc>)
 80163ca:	2901      	cmp	r1, #1
 80163cc:	bf18      	it	ne
 80163ce:	2000      	movne	r0, #0
 80163d0:	4770      	bx	lr
 80163d2:	bf00      	nop
 80163d4:	08020c84 	.word	0x08020c84

080163d8 <_GetDevFunc>:
 80163d8:	4802      	ldr	r0, [pc, #8]	; (80163e4 <_GetDevFunc+0xc>)
 80163da:	2916      	cmp	r1, #22
 80163dc:	bf18      	it	ne
 80163de:	2000      	movne	r0, #0
 80163e0:	4770      	bx	lr
 80163e2:	bf00      	nop
 80163e4:	08015849 	.word	0x08015849

080163e8 <_SetOrg>:
 80163e8:	6800      	ldr	r0, [r0, #0]
 80163ea:	b508      	push	{r3, lr}
 80163ec:	b110      	cbz	r0, 80163f4 <_SetOrg+0xc>
 80163ee:	68c3      	ldr	r3, [r0, #12]
 80163f0:	6a1b      	ldr	r3, [r3, #32]
 80163f2:	4798      	blx	r3
 80163f4:	bd08      	pop	{r3, pc}

080163f6 <_GetDevProp>:
 80163f6:	6800      	ldr	r0, [r0, #0]
 80163f8:	b508      	push	{r3, lr}
 80163fa:	b118      	cbz	r0, 8016404 <_GetDevProp+0xe>
 80163fc:	68c3      	ldr	r3, [r0, #12]
 80163fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016400:	4798      	blx	r3
 8016402:	bd08      	pop	{r3, pc}
 8016404:	f04f 30ff 	mov.w	r0, #4294967295
 8016408:	bd08      	pop	{r3, pc}

0801640a <_GetRect>:
 801640a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801640c:	6880      	ldr	r0, [r0, #8]
 801640e:	460c      	mov	r4, r1
 8016410:	f7fd fa74 	bl	80138fc <GUI_ALLOC_LockH>
 8016414:	4603      	mov	r3, r0
 8016416:	a802      	add	r0, sp, #8
 8016418:	8899      	ldrh	r1, [r3, #4]
 801641a:	88da      	ldrh	r2, [r3, #6]
 801641c:	891d      	ldrh	r5, [r3, #8]
 801641e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8016422:	895b      	ldrh	r3, [r3, #10]
 8016424:	8021      	strh	r1, [r4, #0]
 8016426:	8062      	strh	r2, [r4, #2]
 8016428:	4429      	add	r1, r5
 801642a:	441a      	add	r2, r3
 801642c:	3901      	subs	r1, #1
 801642e:	3a01      	subs	r2, #1
 8016430:	80a1      	strh	r1, [r4, #4]
 8016432:	80e2      	strh	r2, [r4, #6]
 8016434:	f7fd fa70 	bl	8013918 <GUI_ALLOC_UnlockH>
 8016438:	b003      	add	sp, #12
 801643a:	bd30      	pop	{r4, r5, pc}

0801643c <_XY2PTR>:
 801643c:	4b0e      	ldr	r3, [pc, #56]	; (8016478 <_XY2PTR+0x3c>)
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016442:	4605      	mov	r5, r0
 8016444:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8016446:	460e      	mov	r6, r1
 8016448:	f7fd fa58 	bl	80138fc <GUI_ALLOC_LockH>
 801644c:	4603      	mov	r3, r0
 801644e:	a802      	add	r0, sp, #8
 8016450:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8016454:	f840 3d04 	str.w	r3, [r0, #-4]!
 8016458:	f103 0118 	add.w	r1, r3, #24
 801645c:	1b36      	subs	r6, r6, r4
 801645e:	68dc      	ldr	r4, [r3, #12]
 8016460:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016464:	fb04 1406 	mla	r4, r4, r6, r1
 8016468:	1aed      	subs	r5, r5, r3
 801646a:	f7fd fa55 	bl	8013918 <GUI_ALLOC_UnlockH>
 801646e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8016472:	4620      	mov	r0, r4
 8016474:	b002      	add	sp, #8
 8016476:	bd70      	pop	{r4, r5, r6, pc}
 8016478:	20000110 	.word	0x20000110

0801647c <_GetPixelIndex>:
 801647c:	b508      	push	{r3, lr}
 801647e:	4608      	mov	r0, r1
 8016480:	4611      	mov	r1, r2
 8016482:	f7ff ffdb 	bl	801643c <_XY2PTR>
 8016486:	8800      	ldrh	r0, [r0, #0]
 8016488:	bd08      	pop	{r3, pc}
	...

0801648c <_XorPixel>:
 801648c:	4b14      	ldr	r3, [pc, #80]	; (80164e0 <_XorPixel+0x54>)
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016492:	4607      	mov	r7, r0
 8016494:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8016496:	4615      	mov	r5, r2
 8016498:	460e      	mov	r6, r1
 801649a:	f7fd fa2f 	bl	80138fc <GUI_ALLOC_LockH>
 801649e:	4629      	mov	r1, r5
 80164a0:	9000      	str	r0, [sp, #0]
 80164a2:	4630      	mov	r0, r6
 80164a4:	f7ff ffca 	bl	801643c <_XY2PTR>
 80164a8:	693b      	ldr	r3, [r7, #16]
 80164aa:	4604      	mov	r4, r0
 80164ac:	689b      	ldr	r3, [r3, #8]
 80164ae:	4798      	blx	r3
 80164b0:	8823      	ldrh	r3, [r4, #0]
 80164b2:	4058      	eors	r0, r3
 80164b4:	9b00      	ldr	r3, [sp, #0]
 80164b6:	8020      	strh	r0, [r4, #0]
 80164b8:	6958      	ldr	r0, [r3, #20]
 80164ba:	b160      	cbz	r0, 80164d6 <_XorPixel+0x4a>
 80164bc:	f7fd fa1e 	bl	80138fc <GUI_ALLOC_LockH>
 80164c0:	ac02      	add	r4, sp, #8
 80164c2:	6883      	ldr	r3, [r0, #8]
 80164c4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	4631      	mov	r1, r6
 80164cc:	462a      	mov	r2, r5
 80164ce:	4798      	blx	r3
 80164d0:	4620      	mov	r0, r4
 80164d2:	f7fd fa21 	bl	8013918 <GUI_ALLOC_UnlockH>
 80164d6:	4668      	mov	r0, sp
 80164d8:	f7fd fa1e 	bl	8013918 <GUI_ALLOC_UnlockH>
 80164dc:	b003      	add	sp, #12
 80164de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164e0:	20000110 	.word	0x20000110

080164e4 <_SetPixelIndex>:
 80164e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80164e6:	461c      	mov	r4, r3
 80164e8:	4b10      	ldr	r3, [pc, #64]	; (801652c <_SetPixelIndex+0x48>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80164ee:	460e      	mov	r6, r1
 80164f0:	4615      	mov	r5, r2
 80164f2:	f7fd fa03 	bl	80138fc <GUI_ALLOC_LockH>
 80164f6:	4629      	mov	r1, r5
 80164f8:	9000      	str	r0, [sp, #0]
 80164fa:	4630      	mov	r0, r6
 80164fc:	f7ff ff9e 	bl	801643c <_XY2PTR>
 8016500:	9b00      	ldr	r3, [sp, #0]
 8016502:	8004      	strh	r4, [r0, #0]
 8016504:	6958      	ldr	r0, [r3, #20]
 8016506:	b160      	cbz	r0, 8016522 <_SetPixelIndex+0x3e>
 8016508:	f7fd f9f8 	bl	80138fc <GUI_ALLOC_LockH>
 801650c:	ac02      	add	r4, sp, #8
 801650e:	6883      	ldr	r3, [r0, #8]
 8016510:	f844 0d04 	str.w	r0, [r4, #-4]!
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	4631      	mov	r1, r6
 8016518:	462a      	mov	r2, r5
 801651a:	4798      	blx	r3
 801651c:	4620      	mov	r0, r4
 801651e:	f7fd f9fb 	bl	8013918 <GUI_ALLOC_UnlockH>
 8016522:	4668      	mov	r0, sp
 8016524:	f7fd f9f8 	bl	8013918 <GUI_ALLOC_UnlockH>
 8016528:	b002      	add	sp, #8
 801652a:	bd70      	pop	{r4, r5, r6, pc}
 801652c:	20000110 	.word	0x20000110

08016530 <_DrawVLine>:
 8016530:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016534:	4d2c      	ldr	r5, [pc, #176]	; (80165e8 <_DrawVLine+0xb8>)
 8016536:	461e      	mov	r6, r3
 8016538:	682b      	ldr	r3, [r5, #0]
 801653a:	4681      	mov	r9, r0
 801653c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801653e:	460f      	mov	r7, r1
 8016540:	4614      	mov	r4, r2
 8016542:	f7fd f9db 	bl	80138fc <GUI_ALLOC_LockH>
 8016546:	9000      	str	r0, [sp, #0]
 8016548:	6940      	ldr	r0, [r0, #20]
 801654a:	46aa      	mov	sl, r5
 801654c:	b108      	cbz	r0, 8016552 <_DrawVLine+0x22>
 801654e:	f7fd f9d5 	bl	80138fc <GUI_ALLOC_LockH>
 8016552:	9001      	str	r0, [sp, #4]
 8016554:	4621      	mov	r1, r4
 8016556:	4638      	mov	r0, r7
 8016558:	f7ff ff70 	bl	801643c <_XY2PTR>
 801655c:	9b00      	ldr	r3, [sp, #0]
 801655e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8016562:	f8da 3000 	ldr.w	r3, [sl]
 8016566:	7c1a      	ldrb	r2, [r3, #16]
 8016568:	07d2      	lsls	r2, r2, #31
 801656a:	4605      	mov	r5, r0
 801656c:	d51f      	bpl.n	80165ae <_DrawVLine+0x7e>
 801656e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016572:	689b      	ldr	r3, [r3, #8]
 8016574:	4798      	blx	r3
 8016576:	fa1f f880 	uxth.w	r8, r0
 801657a:	9801      	ldr	r0, [sp, #4]
 801657c:	b120      	cbz	r0, 8016588 <_DrawVLine+0x58>
 801657e:	6883      	ldr	r3, [r0, #8]
 8016580:	4639      	mov	r1, r7
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	4622      	mov	r2, r4
 8016586:	4798      	blx	r3
 8016588:	882b      	ldrh	r3, [r5, #0]
 801658a:	ea88 0303 	eor.w	r3, r8, r3
 801658e:	802b      	strh	r3, [r5, #0]
 8016590:	9b00      	ldr	r3, [sp, #0]
 8016592:	3401      	adds	r4, #1
 8016594:	68db      	ldr	r3, [r3, #12]
 8016596:	42b4      	cmp	r4, r6
 8016598:	441d      	add	r5, r3
 801659a:	ddee      	ble.n	801657a <_DrawVLine+0x4a>
 801659c:	4668      	mov	r0, sp
 801659e:	f7fd f9bb 	bl	8013918 <GUI_ALLOC_UnlockH>
 80165a2:	9b01      	ldr	r3, [sp, #4]
 80165a4:	b1eb      	cbz	r3, 80165e2 <_DrawVLine+0xb2>
 80165a6:	a801      	add	r0, sp, #4
 80165a8:	f7fd f9b6 	bl	8013918 <GUI_ALLOC_UnlockH>
 80165ac:	e019      	b.n	80165e2 <_DrawVLine+0xb2>
 80165ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165b0:	f8d3 9000 	ldr.w	r9, [r3]
 80165b4:	9b01      	ldr	r3, [sp, #4]
 80165b6:	b163      	cbz	r3, 80165d2 <_DrawVLine+0xa2>
 80165b8:	9801      	ldr	r0, [sp, #4]
 80165ba:	6883      	ldr	r3, [r0, #8]
 80165bc:	4622      	mov	r2, r4
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	4639      	mov	r1, r7
 80165c2:	3401      	adds	r4, #1
 80165c4:	4798      	blx	r3
 80165c6:	42b4      	cmp	r4, r6
 80165c8:	f8a5 9000 	strh.w	r9, [r5]
 80165cc:	4445      	add	r5, r8
 80165ce:	ddf3      	ble.n	80165b8 <_DrawVLine+0x88>
 80165d0:	e7e4      	b.n	801659c <_DrawVLine+0x6c>
 80165d2:	1b34      	subs	r4, r6, r4
 80165d4:	3401      	adds	r4, #1
 80165d6:	3c01      	subs	r4, #1
 80165d8:	f8a5 9000 	strh.w	r9, [r5]
 80165dc:	4445      	add	r5, r8
 80165de:	d1fa      	bne.n	80165d6 <_DrawVLine+0xa6>
 80165e0:	e7dc      	b.n	801659c <_DrawVLine+0x6c>
 80165e2:	b002      	add	sp, #8
 80165e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165e8:	20000110 	.word	0x20000110

080165ec <_FillRect>:
 80165ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165f0:	4f2a      	ldr	r7, [pc, #168]	; (801669c <_FillRect+0xb0>)
 80165f2:	4614      	mov	r4, r2
 80165f4:	683a      	ldr	r2, [r7, #0]
 80165f6:	4698      	mov	r8, r3
 80165f8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80165fa:	b087      	sub	sp, #28
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	9302      	str	r3, [sp, #8]
 8016600:	4682      	mov	sl, r0
 8016602:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8016604:	460e      	mov	r6, r1
 8016606:	f7fd f979 	bl	80138fc <GUI_ALLOC_LockH>
 801660a:	4621      	mov	r1, r4
 801660c:	9004      	str	r0, [sp, #16]
 801660e:	4630      	mov	r0, r6
 8016610:	f7ff ff14 	bl	801643c <_XY2PTR>
 8016614:	9a04      	ldr	r2, [sp, #16]
 8016616:	4605      	mov	r5, r0
 8016618:	6950      	ldr	r0, [r2, #20]
 801661a:	68d3      	ldr	r3, [r2, #12]
 801661c:	9303      	str	r3, [sp, #12]
 801661e:	ebc6 0908 	rsb	r9, r6, r8
 8016622:	f109 0801 	add.w	r8, r9, #1
 8016626:	46bb      	mov	fp, r7
 8016628:	b180      	cbz	r0, 801664c <_FillRect+0x60>
 801662a:	f7fd f967 	bl	80138fc <GUI_ALLOC_LockH>
 801662e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016630:	af06      	add	r7, sp, #24
 8016632:	1b13      	subs	r3, r2, r4
 8016634:	f847 0d04 	str.w	r0, [r7, #-4]!
 8016638:	3301      	adds	r3, #1
 801663a:	9300      	str	r3, [sp, #0]
 801663c:	4631      	mov	r1, r6
 801663e:	4622      	mov	r2, r4
 8016640:	4643      	mov	r3, r8
 8016642:	f7ff fe75 	bl	8016330 <GUI_USAGE_AddRect>
 8016646:	4638      	mov	r0, r7
 8016648:	f7fd f966 	bl	8013918 <GUI_ALLOC_UnlockH>
 801664c:	ea4f 0649 	mov.w	r6, r9, lsl #1
 8016650:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016652:	429c      	cmp	r4, r3
 8016654:	dc1c      	bgt.n	8016690 <_FillRect+0xa4>
 8016656:	f8db 3000 	ldr.w	r3, [fp]
 801665a:	7c1b      	ldrb	r3, [r3, #16]
 801665c:	07db      	lsls	r3, r3, #31
 801665e:	d50d      	bpl.n	801667c <_FillRect+0x90>
 8016660:	f8da 3010 	ldr.w	r3, [sl, #16]
 8016664:	689b      	ldr	r3, [r3, #8]
 8016666:	4798      	blx	r3
 8016668:	19aa      	adds	r2, r5, r6
 801666a:	b280      	uxth	r0, r0
 801666c:	1eab      	subs	r3, r5, #2
 801666e:	8859      	ldrh	r1, [r3, #2]
 8016670:	4041      	eors	r1, r0
 8016672:	f823 1f02 	strh.w	r1, [r3, #2]!
 8016676:	4293      	cmp	r3, r2
 8016678:	d1f9      	bne.n	801666e <_FillRect+0x82>
 801667a:	e005      	b.n	8016688 <_FillRect+0x9c>
 801667c:	9b02      	ldr	r3, [sp, #8]
 801667e:	4628      	mov	r0, r5
 8016680:	b299      	uxth	r1, r3
 8016682:	4642      	mov	r2, r8
 8016684:	f7fa fa1b 	bl	8010abe <GUI__memset16>
 8016688:	9a03      	ldr	r2, [sp, #12]
 801668a:	3401      	adds	r4, #1
 801668c:	4415      	add	r5, r2
 801668e:	e7df      	b.n	8016650 <_FillRect+0x64>
 8016690:	a804      	add	r0, sp, #16
 8016692:	f7fd f941 	bl	8013918 <GUI_ALLOC_UnlockH>
 8016696:	b007      	add	sp, #28
 8016698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801669c:	20000110 	.word	0x20000110

080166a0 <_DrawHLine>:
 80166a0:	b507      	push	{r0, r1, r2, lr}
 80166a2:	9200      	str	r2, [sp, #0]
 80166a4:	f7ff ffa2 	bl	80165ec <_FillRect>
 80166a8:	b003      	add	sp, #12
 80166aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080166b0 <_DrawBitmap>:
 80166b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166b4:	4c8a      	ldr	r4, [pc, #552]	; (80168e0 <_DrawBitmap+0x230>)
 80166b6:	b093      	sub	sp, #76	; 0x4c
 80166b8:	469b      	mov	fp, r3
 80166ba:	6823      	ldr	r3, [r4, #0]
 80166bc:	900d      	str	r0, [sp, #52]	; 0x34
 80166be:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80166c0:	9207      	str	r2, [sp, #28]
 80166c2:	460d      	mov	r5, r1
 80166c4:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 80166c8:	f7fd f918 	bl	80138fc <GUI_ALLOC_LockH>
 80166cc:	9010      	str	r0, [sp, #64]	; 0x40
 80166ce:	6940      	ldr	r0, [r0, #20]
 80166d0:	b108      	cbz	r0, 80166d6 <_DrawBitmap+0x26>
 80166d2:	f7fd f913 	bl	80138fc <GUI_ALLOC_LockH>
 80166d6:	9011      	str	r0, [sp, #68]	; 0x44
 80166d8:	a812      	add	r0, sp, #72	; 0x48
 80166da:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 80166de:	68db      	ldr	r3, [r3, #12]
 80166e0:	9308      	str	r3, [sp, #32]
 80166e2:	f7fd f919 	bl	8013918 <GUI_ALLOC_UnlockH>
 80166e6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80166e8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80166ea:	442e      	add	r6, r5
 80166ec:	9604      	str	r6, [sp, #16]
 80166ee:	b150      	cbz	r0, 8016706 <_DrawBitmap+0x56>
 80166f0:	6823      	ldr	r3, [r4, #0]
 80166f2:	7c1b      	ldrb	r3, [r3, #16]
 80166f4:	0799      	lsls	r1, r3, #30
 80166f6:	d106      	bne.n	8016706 <_DrawBitmap+0x56>
 80166f8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80166fa:	9700      	str	r7, [sp, #0]
 80166fc:	4631      	mov	r1, r6
 80166fe:	9a07      	ldr	r2, [sp, #28]
 8016700:	465b      	mov	r3, fp
 8016702:	f7ff fe15 	bl	8016330 <GUI_USAGE_AddRect>
 8016706:	9804      	ldr	r0, [sp, #16]
 8016708:	9907      	ldr	r1, [sp, #28]
 801670a:	f7ff fe97 	bl	801643c <_XY2PTR>
 801670e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016710:	2e10      	cmp	r6, #16
 8016712:	4604      	mov	r4, r0
 8016714:	d139      	bne.n	801678a <_DrawBitmap+0xda>
 8016716:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016718:	b11b      	cbz	r3, 8016722 <_DrawBitmap+0x72>
 801671a:	ea4f 064b 	mov.w	r6, fp, lsl #1
 801671e:	2500      	movs	r5, #0
 8016720:	e014      	b.n	801674c <_DrawBitmap+0x9c>
 8016722:	4b70      	ldr	r3, [pc, #448]	; (80168e4 <_DrawBitmap+0x234>)
 8016724:	681d      	ldr	r5, [r3, #0]
 8016726:	2d00      	cmp	r5, #0
 8016728:	d0f7      	beq.n	801671a <_DrawBitmap+0x6a>
 801672a:	9e08      	ldr	r6, [sp, #32]
 801672c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801672e:	9600      	str	r6, [sp, #0]
 8016730:	9701      	str	r7, [sp, #4]
 8016732:	4651      	mov	r1, sl
 8016734:	465a      	mov	r2, fp
 8016736:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016738:	47a8      	blx	r5
 801673a:	e345      	b.n	8016dc8 <_DrawBitmap+0x718>
 801673c:	f1ba 0f00 	cmp.w	sl, #0
 8016740:	d10a      	bne.n	8016758 <_DrawBitmap+0xa8>
 8016742:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8016744:	44ba      	add	sl, r7
 8016746:	9f08      	ldr	r7, [sp, #32]
 8016748:	3501      	adds	r5, #1
 801674a:	443c      	add	r4, r7
 801674c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801674e:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8016752:	42bd      	cmp	r5, r7
 8016754:	dbf2      	blt.n	801673c <_DrawBitmap+0x8c>
 8016756:	e013      	b.n	8016780 <_DrawBitmap+0xd0>
 8016758:	2c00      	cmp	r4, #0
 801675a:	d0f2      	beq.n	8016742 <_DrawBitmap+0x92>
 801675c:	4620      	mov	r0, r4
 801675e:	4651      	mov	r1, sl
 8016760:	4632      	mov	r2, r6
 8016762:	f004 f835 	bl	801a7d0 <memcpy>
 8016766:	f1b8 0f00 	cmp.w	r8, #0
 801676a:	d0ea      	beq.n	8016742 <_DrawBitmap+0x92>
 801676c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016770:	9a07      	ldr	r2, [sp, #28]
 8016772:	685f      	ldr	r7, [r3, #4]
 8016774:	9904      	ldr	r1, [sp, #16]
 8016776:	4640      	mov	r0, r8
 8016778:	442a      	add	r2, r5
 801677a:	465b      	mov	r3, fp
 801677c:	47b8      	blx	r7
 801677e:	e7e0      	b.n	8016742 <_DrawBitmap+0x92>
 8016780:	f1b8 0f00 	cmp.w	r8, #0
 8016784:	f040 831d 	bne.w	8016dc2 <_DrawBitmap+0x712>
 8016788:	e31e      	b.n	8016dc8 <_DrawBitmap+0x718>
 801678a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801678c:	2e17      	cmp	r6, #23
 801678e:	dd38      	ble.n	8016802 <_DrawBitmap+0x152>
 8016790:	2600      	movs	r6, #0
 8016792:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8016794:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016796:	42be      	cmp	r6, r7
 8016798:	f280 809d 	bge.w	80168d6 <_DrawBitmap+0x226>
 801679c:	9f07      	ldr	r7, [sp, #28]
 801679e:	4437      	add	r7, r6
 80167a0:	f1ba 0f00 	cmp.w	sl, #0
 80167a4:	d027      	beq.n	80167f6 <_DrawBitmap+0x146>
 80167a6:	b334      	cbz	r4, 80167f6 <_DrawBitmap+0x146>
 80167a8:	b13d      	cbz	r5, 80167ba <_DrawBitmap+0x10a>
 80167aa:	68ab      	ldr	r3, [r5, #8]
 80167ac:	9904      	ldr	r1, [sp, #16]
 80167ae:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80167b2:	4628      	mov	r0, r5
 80167b4:	463a      	mov	r2, r7
 80167b6:	465b      	mov	r3, fp
 80167b8:	47e0      	blx	ip
 80167ba:	1ea3      	subs	r3, r4, #2
 80167bc:	f1aa 0904 	sub.w	r9, sl, #4
 80167c0:	9303      	str	r3, [sp, #12]
 80167c2:	46d8      	mov	r8, fp
 80167c4:	9b04      	ldr	r3, [sp, #16]
 80167c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80167c8:	445b      	add	r3, fp
 80167ca:	ebc8 0103 	rsb	r1, r8, r3
 80167ce:	6903      	ldr	r3, [r0, #16]
 80167d0:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	9102      	str	r1, [sp, #8]
 80167d8:	4798      	blx	r3
 80167da:	9b03      	ldr	r3, [sp, #12]
 80167dc:	9902      	ldr	r1, [sp, #8]
 80167de:	f823 0f02 	strh.w	r0, [r3, #2]!
 80167e2:	9303      	str	r3, [sp, #12]
 80167e4:	b125      	cbz	r5, 80167f0 <_DrawBitmap+0x140>
 80167e6:	68ab      	ldr	r3, [r5, #8]
 80167e8:	4628      	mov	r0, r5
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	463a      	mov	r2, r7
 80167ee:	4798      	blx	r3
 80167f0:	f1b8 0801 	subs.w	r8, r8, #1
 80167f4:	d1e6      	bne.n	80167c4 <_DrawBitmap+0x114>
 80167f6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80167f8:	44ba      	add	sl, r7
 80167fa:	9f08      	ldr	r7, [sp, #32]
 80167fc:	3601      	adds	r6, #1
 80167fe:	443c      	add	r4, r7
 8016800:	e7c7      	b.n	8016792 <_DrawBitmap+0xe2>
 8016802:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016804:	2e08      	cmp	r6, #8
 8016806:	f100 0402 	add.w	r4, r0, #2
 801680a:	d16d      	bne.n	80168e8 <_DrawBitmap+0x238>
 801680c:	9e07      	ldr	r6, [sp, #28]
 801680e:	9f07      	ldr	r7, [sp, #28]
 8016810:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016812:	1bf3      	subs	r3, r6, r7
 8016814:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8016816:	42bb      	cmp	r3, r7
 8016818:	f1a4 0002 	sub.w	r0, r4, #2
 801681c:	da5b      	bge.n	80168d6 <_DrawBitmap+0x226>
 801681e:	4b30      	ldr	r3, [pc, #192]	; (80168e0 <_DrawBitmap+0x230>)
 8016820:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	7c1b      	ldrb	r3, [r3, #16]
 8016826:	b367      	cbz	r7, 8016882 <_DrawBitmap+0x1d2>
 8016828:	f013 0303 	ands.w	r3, r3, #3
 801682c:	d004      	beq.n	8016838 <_DrawBitmap+0x188>
 801682e:	2b02      	cmp	r3, #2
 8016830:	d14b      	bne.n	80168ca <_DrawBitmap+0x21a>
 8016832:	46a0      	mov	r8, r4
 8016834:	9f04      	ldr	r7, [sp, #16]
 8016836:	e01d      	b.n	8016874 <_DrawBitmap+0x1c4>
 8016838:	f81a 2003 	ldrb.w	r2, [sl, r3]
 801683c:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801683e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8016842:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8016846:	3301      	adds	r3, #1
 8016848:	455b      	cmp	r3, fp
 801684a:	d1f5      	bne.n	8016838 <_DrawBitmap+0x188>
 801684c:	e03d      	b.n	80168ca <_DrawBitmap+0x21a>
 801684e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8016850:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8016854:	f828 3c02 	strh.w	r3, [r8, #-2]
 8016858:	b12d      	cbz	r5, 8016866 <_DrawBitmap+0x1b6>
 801685a:	68ab      	ldr	r3, [r5, #8]
 801685c:	4628      	mov	r0, r5
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	4639      	mov	r1, r7
 8016862:	4632      	mov	r2, r6
 8016864:	4798      	blx	r3
 8016866:	9b04      	ldr	r3, [sp, #16]
 8016868:	3701      	adds	r7, #1
 801686a:	445b      	add	r3, fp
 801686c:	42bb      	cmp	r3, r7
 801686e:	f108 0802 	add.w	r8, r8, #2
 8016872:	d02a      	beq.n	80168ca <_DrawBitmap+0x21a>
 8016874:	9804      	ldr	r0, [sp, #16]
 8016876:	ebc0 030a 	rsb	r3, r0, sl
 801687a:	5ddb      	ldrb	r3, [r3, r7]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d0f2      	beq.n	8016866 <_DrawBitmap+0x1b6>
 8016880:	e7e5      	b.n	801684e <_DrawBitmap+0x19e>
 8016882:	f013 0303 	ands.w	r3, r3, #3
 8016886:	d004      	beq.n	8016892 <_DrawBitmap+0x1e2>
 8016888:	2b02      	cmp	r3, #2
 801688a:	d11e      	bne.n	80168ca <_DrawBitmap+0x21a>
 801688c:	46a0      	mov	r8, r4
 801688e:	9f04      	ldr	r7, [sp, #16]
 8016890:	e014      	b.n	80168bc <_DrawBitmap+0x20c>
 8016892:	4651      	mov	r1, sl
 8016894:	465a      	mov	r2, fp
 8016896:	f003 ff9b 	bl	801a7d0 <memcpy>
 801689a:	e016      	b.n	80168ca <_DrawBitmap+0x21a>
 801689c:	f828 3c02 	strh.w	r3, [r8, #-2]
 80168a0:	b12d      	cbz	r5, 80168ae <_DrawBitmap+0x1fe>
 80168a2:	68ab      	ldr	r3, [r5, #8]
 80168a4:	4628      	mov	r0, r5
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	4639      	mov	r1, r7
 80168aa:	4632      	mov	r2, r6
 80168ac:	4798      	blx	r3
 80168ae:	9b04      	ldr	r3, [sp, #16]
 80168b0:	3701      	adds	r7, #1
 80168b2:	445b      	add	r3, fp
 80168b4:	42bb      	cmp	r3, r7
 80168b6:	f108 0802 	add.w	r8, r8, #2
 80168ba:	d006      	beq.n	80168ca <_DrawBitmap+0x21a>
 80168bc:	9a04      	ldr	r2, [sp, #16]
 80168be:	ebc2 030a 	rsb	r3, r2, sl
 80168c2:	5ddb      	ldrb	r3, [r3, r7]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d0f2      	beq.n	80168ae <_DrawBitmap+0x1fe>
 80168c8:	e7e8      	b.n	801689c <_DrawBitmap+0x1ec>
 80168ca:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80168cc:	44ba      	add	sl, r7
 80168ce:	9f08      	ldr	r7, [sp, #32]
 80168d0:	3601      	adds	r6, #1
 80168d2:	443c      	add	r4, r7
 80168d4:	e79b      	b.n	801680e <_DrawBitmap+0x15e>
 80168d6:	2d00      	cmp	r5, #0
 80168d8:	f040 8273 	bne.w	8016dc2 <_DrawBitmap+0x712>
 80168dc:	e274      	b.n	8016dc8 <_DrawBitmap+0x718>
 80168de:	bf00      	nop
 80168e0:	20000110 	.word	0x20000110
 80168e4:	2001d374 	.word	0x2001d374
 80168e8:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80168ea:	4bab      	ldr	r3, [pc, #684]	; (8016b98 <_DrawBitmap+0x4e8>)
 80168ec:	9f20      	ldr	r7, [sp, #128]	; 0x80
 80168ee:	9409      	str	r4, [sp, #36]	; 0x24
 80168f0:	2e00      	cmp	r6, #0
 80168f2:	bf08      	it	eq
 80168f4:	461e      	moveq	r6, r3
 80168f6:	9621      	str	r6, [sp, #132]	; 0x84
 80168f8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80168fa:	0076      	lsls	r6, r6, #1
 80168fc:	960e      	str	r6, [sp, #56]	; 0x38
 80168fe:	00bf      	lsls	r7, r7, #2
 8016900:	9e07      	ldr	r6, [sp, #28]
 8016902:	970f      	str	r7, [sp, #60]	; 0x3c
 8016904:	9605      	str	r6, [sp, #20]
 8016906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016908:	9e05      	ldr	r6, [sp, #20]
 801690a:	9f07      	ldr	r7, [sp, #28]
 801690c:	1e9c      	subs	r4, r3, #2
 801690e:	1bf3      	subs	r3, r6, r7
 8016910:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8016912:	42b3      	cmp	r3, r6
 8016914:	f280 8253 	bge.w	8016dbe <_DrawBitmap+0x70e>
 8016918:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 801691a:	2f02      	cmp	r7, #2
 801691c:	f000 80d9 	beq.w	8016ad2 <_DrawBitmap+0x422>
 8016920:	2f04      	cmp	r7, #4
 8016922:	f000 8178 	beq.w	8016c16 <_DrawBitmap+0x566>
 8016926:	2f01      	cmp	r7, #1
 8016928:	f040 823f 	bne.w	8016daa <_DrawBitmap+0x6fa>
 801692c:	f8df 9270 	ldr.w	r9, [pc, #624]	; 8016ba0 <_DrawBitmap+0x4f0>
 8016930:	f8d9 3000 	ldr.w	r3, [r9]
 8016934:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8016936:	f7fc ffe1 	bl	80138fc <GUI_ALLOC_LockH>
 801693a:	f89a 3000 	ldrb.w	r3, [sl]
 801693e:	4a97      	ldr	r2, [pc, #604]	; (8016b9c <_DrawBitmap+0x4ec>)
 8016940:	9010      	str	r0, [sp, #64]	; 0x40
 8016942:	5cd5      	ldrb	r5, [r2, r3]
 8016944:	f8d9 3000 	ldr.w	r3, [r9]
 8016948:	9820      	ldr	r0, [sp, #128]	; 0x80
 801694a:	7c1b      	ldrb	r3, [r3, #16]
 801694c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801694e:	f003 0303 	and.w	r3, r3, #3
 8016952:	2b02      	cmp	r3, #2
 8016954:	465e      	mov	r6, fp
 8016956:	f1c0 0808 	rsb	r8, r0, #8
 801695a:	fa45 f500 	asr.w	r5, r5, r0
 801695e:	d022      	beq.n	80169a6 <_DrawBitmap+0x2f6>
 8016960:	2b03      	cmp	r3, #3
 8016962:	d062      	beq.n	8016a2a <_DrawBitmap+0x37a>
 8016964:	2b01      	cmp	r3, #1
 8016966:	d060      	beq.n	8016a2a <_DrawBitmap+0x37a>
 8016968:	4652      	mov	r2, sl
 801696a:	4546      	cmp	r6, r8
 801696c:	bf38      	it	cc
 801696e:	46b0      	movcc	r8, r6
 8016970:	ebc8 0606 	rsb	r6, r8, r6
 8016974:	4643      	mov	r3, r8
 8016976:	4621      	mov	r1, r4
 8016978:	f005 0001 	and.w	r0, r5, #1
 801697c:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801697e:	3b01      	subs	r3, #1
 8016980:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8016984:	f821 0b02 	strh.w	r0, [r1], #2
 8016988:	ea4f 0555 	mov.w	r5, r5, lsr #1
 801698c:	d1f4      	bne.n	8016978 <_DrawBitmap+0x2c8>
 801698e:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8016992:	2e00      	cmp	r6, #0
 8016994:	f000 8099 	beq.w	8016aca <_DrawBitmap+0x41a>
 8016998:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801699c:	497f      	ldr	r1, [pc, #508]	; (8016b9c <_DrawBitmap+0x4ec>)
 801699e:	f04f 0808 	mov.w	r8, #8
 80169a2:	5ccd      	ldrb	r5, [r1, r3]
 80169a4:	e7e1      	b.n	801696a <_DrawBitmap+0x2ba>
 80169a6:	9821      	ldr	r0, [sp, #132]	; 0x84
 80169a8:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80169ac:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 80169b0:	f8cd a018 	str.w	sl, [sp, #24]
 80169b4:	4546      	cmp	r6, r8
 80169b6:	bf38      	it	cc
 80169b8:	46b0      	movcc	r8, r6
 80169ba:	ebc8 0606 	rsb	r6, r8, r6
 80169be:	b32f      	cbz	r7, 8016a0c <_DrawBitmap+0x35c>
 80169c0:	b91d      	cbnz	r5, 80169ca <_DrawBitmap+0x31a>
 80169c2:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 80169c6:	44c1      	add	r9, r8
 80169c8:	e024      	b.n	8016a14 <_DrawBitmap+0x364>
 80169ca:	07ea      	lsls	r2, r5, #31
 80169cc:	d50b      	bpl.n	80169e6 <_DrawBitmap+0x336>
 80169ce:	68bb      	ldr	r3, [r7, #8]
 80169d0:	9a05      	ldr	r2, [sp, #20]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	f8cd c008 	str.w	ip, [sp, #8]
 80169d8:	4638      	mov	r0, r7
 80169da:	4649      	mov	r1, r9
 80169dc:	4798      	blx	r3
 80169de:	f8dd c008 	ldr.w	ip, [sp, #8]
 80169e2:	f8a4 c000 	strh.w	ip, [r4]
 80169e6:	f1b8 0801 	subs.w	r8, r8, #1
 80169ea:	f109 0901 	add.w	r9, r9, #1
 80169ee:	f104 0402 	add.w	r4, r4, #2
 80169f2:	d00f      	beq.n	8016a14 <_DrawBitmap+0x364>
 80169f4:	086d      	lsrs	r5, r5, #1
 80169f6:	e7e3      	b.n	80169c0 <_DrawBitmap+0x310>
 80169f8:	07eb      	lsls	r3, r5, #31
 80169fa:	bf48      	it	mi
 80169fc:	f8a4 c000 	strhmi.w	ip, [r4]
 8016a00:	f1b8 0801 	subs.w	r8, r8, #1
 8016a04:	f104 0402 	add.w	r4, r4, #2
 8016a08:	d004      	beq.n	8016a14 <_DrawBitmap+0x364>
 8016a0a:	086d      	lsrs	r5, r5, #1
 8016a0c:	2d00      	cmp	r5, #0
 8016a0e:	d1f3      	bne.n	80169f8 <_DrawBitmap+0x348>
 8016a10:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8016a14:	2e00      	cmp	r6, #0
 8016a16:	d058      	beq.n	8016aca <_DrawBitmap+0x41a>
 8016a18:	9906      	ldr	r1, [sp, #24]
 8016a1a:	4a60      	ldr	r2, [pc, #384]	; (8016b9c <_DrawBitmap+0x4ec>)
 8016a1c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016a20:	9106      	str	r1, [sp, #24]
 8016a22:	5cd5      	ldrb	r5, [r2, r3]
 8016a24:	f04f 0808 	mov.w	r8, #8
 8016a28:	e7c4      	b.n	80169b4 <_DrawBitmap+0x304>
 8016a2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016a2c:	6913      	ldr	r3, [r2, #16]
 8016a2e:	689b      	ldr	r3, [r3, #8]
 8016a30:	4798      	blx	r3
 8016a32:	9b04      	ldr	r3, [sp, #16]
 8016a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a36:	b280      	uxth	r0, r0
 8016a38:	900a      	str	r0, [sp, #40]	; 0x28
 8016a3a:	f10a 0901 	add.w	r9, sl, #1
 8016a3e:	4546      	cmp	r6, r8
 8016a40:	bf38      	it	cc
 8016a42:	46b0      	movcc	r8, r6
 8016a44:	ebc8 0606 	rsb	r6, r8, r6
 8016a48:	1ca3      	adds	r3, r4, #2
 8016a4a:	b31f      	cbz	r7, 8016a94 <_DrawBitmap+0x3e4>
 8016a4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8016a50:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016a52:	9a06      	ldr	r2, [sp, #24]
 8016a54:	4440      	add	r0, r8
 8016a56:	900c      	str	r0, [sp, #48]	; 0x30
 8016a58:	1a81      	subs	r1, r0, r2
 8016a5a:	07e8      	lsls	r0, r5, #31
 8016a5c:	d50d      	bpl.n	8016a7a <_DrawBitmap+0x3ca>
 8016a5e:	68ba      	ldr	r2, [r7, #8]
 8016a60:	4638      	mov	r0, r7
 8016a62:	f8d2 c000 	ldr.w	ip, [r2]
 8016a66:	9a05      	ldr	r2, [sp, #20]
 8016a68:	9302      	str	r3, [sp, #8]
 8016a6a:	47e0      	blx	ip
 8016a6c:	9b02      	ldr	r3, [sp, #8]
 8016a6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a70:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8016a74:	4042      	eors	r2, r0
 8016a76:	f823 2c02 	strh.w	r2, [r3, #-2]
 8016a7a:	9906      	ldr	r1, [sp, #24]
 8016a7c:	3901      	subs	r1, #1
 8016a7e:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8016a82:	f103 0302 	add.w	r3, r3, #2
 8016a86:	9106      	str	r1, [sp, #24]
 8016a88:	d1e2      	bne.n	8016a50 <_DrawBitmap+0x3a0>
 8016a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a8e:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8016a92:	e010      	b.n	8016ab6 <_DrawBitmap+0x406>
 8016a94:	4642      	mov	r2, r8
 8016a96:	07e9      	lsls	r1, r5, #31
 8016a98:	d505      	bpl.n	8016aa6 <_DrawBitmap+0x3f6>
 8016a9a:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 8016a9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016aa0:	4041      	eors	r1, r0
 8016aa2:	f823 1c02 	strh.w	r1, [r3, #-2]
 8016aa6:	3a01      	subs	r2, #1
 8016aa8:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8016aac:	f103 0302 	add.w	r3, r3, #2
 8016ab0:	d1f1      	bne.n	8016a96 <_DrawBitmap+0x3e6>
 8016ab2:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8016ab6:	b146      	cbz	r6, 8016aca <_DrawBitmap+0x41a>
 8016ab8:	f899 3000 	ldrb.w	r3, [r9]
 8016abc:	4a37      	ldr	r2, [pc, #220]	; (8016b9c <_DrawBitmap+0x4ec>)
 8016abe:	f109 0901 	add.w	r9, r9, #1
 8016ac2:	5cd5      	ldrb	r5, [r2, r3]
 8016ac4:	f04f 0808 	mov.w	r8, #8
 8016ac8:	e7b9      	b.n	8016a3e <_DrawBitmap+0x38e>
 8016aca:	a810      	add	r0, sp, #64	; 0x40
 8016acc:	f7fc ff24 	bl	8013918 <GUI_ALLOC_UnlockH>
 8016ad0:	e16b      	b.n	8016daa <_DrawBitmap+0x6fa>
 8016ad2:	4b33      	ldr	r3, [pc, #204]	; (8016ba0 <_DrawBitmap+0x4f0>)
 8016ad4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8016ada:	7c1b      	ldrb	r3, [r3, #16]
 8016adc:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8016ae0:	f1c6 0504 	rsb	r5, r6, #4
 8016ae4:	f89a 6000 	ldrb.w	r6, [sl]
 8016ae8:	f003 0303 	and.w	r3, r3, #3
 8016aec:	40be      	lsls	r6, r7
 8016aee:	2b01      	cmp	r3, #1
 8016af0:	b2ed      	uxtb	r5, r5
 8016af2:	b2f6      	uxtb	r6, r6
 8016af4:	d06a      	beq.n	8016bcc <_DrawBitmap+0x51c>
 8016af6:	d308      	bcc.n	8016b0a <_DrawBitmap+0x45a>
 8016af8:	2b02      	cmp	r3, #2
 8016afa:	f040 8156 	bne.w	8016daa <_DrawBitmap+0x6fa>
 8016afe:	f8cd a018 	str.w	sl, [sp, #24]
 8016b02:	465f      	mov	r7, fp
 8016b04:	f8dd c010 	ldr.w	ip, [sp, #16]
 8016b08:	e03e      	b.n	8016b88 <_DrawBitmap+0x4d8>
 8016b0a:	4652      	mov	r2, sl
 8016b0c:	465b      	mov	r3, fp
 8016b0e:	429d      	cmp	r5, r3
 8016b10:	bfc8      	it	gt
 8016b12:	b2dd      	uxtbgt	r5, r3
 8016b14:	1b5b      	subs	r3, r3, r5
 8016b16:	4629      	mov	r1, r5
 8016b18:	4620      	mov	r0, r4
 8016b1a:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 8016b1e:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8016b20:	3901      	subs	r1, #1
 8016b22:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 8016b26:	f820 cb02 	strh.w	ip, [r0], #2
 8016b2a:	00b6      	lsls	r6, r6, #2
 8016b2c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8016b30:	b2f6      	uxtb	r6, r6
 8016b32:	d1f2      	bne.n	8016b1a <_DrawBitmap+0x46a>
 8016b34:	3d01      	subs	r5, #1
 8016b36:	b2ed      	uxtb	r5, r5
 8016b38:	3501      	adds	r5, #1
 8016b3a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	f000 8133 	beq.w	8016daa <_DrawBitmap+0x6fa>
 8016b44:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8016b48:	2504      	movs	r5, #4
 8016b4a:	e7e0      	b.n	8016b0e <_DrawBitmap+0x45e>
 8016b4c:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8016b50:	eb08 010c 	add.w	r1, r8, ip
 8016b54:	d126      	bne.n	8016ba4 <_DrawBitmap+0x4f4>
 8016b56:	f108 0801 	add.w	r8, r8, #1
 8016b5a:	fa5f f388 	uxtb.w	r3, r8
 8016b5e:	00b6      	lsls	r6, r6, #2
 8016b60:	429d      	cmp	r5, r3
 8016b62:	b2f6      	uxtb	r6, r6
 8016b64:	d1f2      	bne.n	8016b4c <_DrawBitmap+0x49c>
 8016b66:	3d01      	subs	r5, #1
 8016b68:	b2ed      	uxtb	r5, r5
 8016b6a:	1c6b      	adds	r3, r5, #1
 8016b6c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016b70:	f10c 0301 	add.w	r3, ip, #1
 8016b74:	eb03 0c05 	add.w	ip, r3, r5
 8016b78:	2f00      	cmp	r7, #0
 8016b7a:	f000 8116 	beq.w	8016daa <_DrawBitmap+0x6fa>
 8016b7e:	9b06      	ldr	r3, [sp, #24]
 8016b80:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8016b84:	9306      	str	r3, [sp, #24]
 8016b86:	2504      	movs	r5, #4
 8016b88:	42bd      	cmp	r5, r7
 8016b8a:	bfc8      	it	gt
 8016b8c:	b2fd      	uxtbgt	r5, r7
 8016b8e:	1b7f      	subs	r7, r7, r5
 8016b90:	f04f 0800 	mov.w	r8, #0
 8016b94:	e7da      	b.n	8016b4c <_DrawBitmap+0x49c>
 8016b96:	bf00      	nop
 8016b98:	08020c44 	.word	0x08020c44
 8016b9c:	08020a30 	.word	0x08020a30
 8016ba0:	20000110 	.word	0x20000110
 8016ba4:	09b3      	lsrs	r3, r6, #6
 8016ba6:	9821      	ldr	r0, [sp, #132]	; 0x84
 8016ba8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8016bac:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 8016bb0:	f1b9 0f00 	cmp.w	r9, #0
 8016bb4:	d0cf      	beq.n	8016b56 <_DrawBitmap+0x4a6>
 8016bb6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016bba:	9a05      	ldr	r2, [sp, #20]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	f8cd c008 	str.w	ip, [sp, #8]
 8016bc2:	4648      	mov	r0, r9
 8016bc4:	4798      	blx	r3
 8016bc6:	f8dd c008 	ldr.w	ip, [sp, #8]
 8016bca:	e7c4      	b.n	8016b56 <_DrawBitmap+0x4a6>
 8016bcc:	4651      	mov	r1, sl
 8016bce:	465b      	mov	r3, fp
 8016bd0:	429d      	cmp	r5, r3
 8016bd2:	bfc8      	it	gt
 8016bd4:	b2dd      	uxtbgt	r5, r3
 8016bd6:	1b5b      	subs	r3, r3, r5
 8016bd8:	1ca2      	adds	r2, r4, #2
 8016bda:	4628      	mov	r0, r5
 8016bdc:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8016be0:	d005      	beq.n	8016bee <_DrawBitmap+0x53e>
 8016be2:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 8016be6:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 8016bea:	f822 7c02 	strh.w	r7, [r2, #-2]
 8016bee:	3801      	subs	r0, #1
 8016bf0:	00b6      	lsls	r6, r6, #2
 8016bf2:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8016bf6:	b2f6      	uxtb	r6, r6
 8016bf8:	f102 0202 	add.w	r2, r2, #2
 8016bfc:	d1ee      	bne.n	8016bdc <_DrawBitmap+0x52c>
 8016bfe:	3d01      	subs	r5, #1
 8016c00:	b2ed      	uxtb	r5, r5
 8016c02:	3501      	adds	r5, #1
 8016c04:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	f000 80ce 	beq.w	8016daa <_DrawBitmap+0x6fa>
 8016c0e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8016c12:	2504      	movs	r5, #4
 8016c14:	e7dc      	b.n	8016bd0 <_DrawBitmap+0x520>
 8016c16:	4a6e      	ldr	r2, [pc, #440]	; (8016dd0 <_DrawBitmap+0x720>)
 8016c18:	f89a 3000 	ldrb.w	r3, [sl]
 8016c1c:	6812      	ldr	r2, [r2, #0]
 8016c1e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016c20:	7c12      	ldrb	r2, [r2, #16]
 8016c22:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016c24:	f002 0203 	and.w	r2, r2, #3
 8016c28:	40bb      	lsls	r3, r7
 8016c2a:	2a01      	cmp	r2, #1
 8016c2c:	b2dd      	uxtb	r5, r3
 8016c2e:	f000 8095 	beq.w	8016d5c <_DrawBitmap+0x6ac>
 8016c32:	d302      	bcc.n	8016c3a <_DrawBitmap+0x58a>
 8016c34:	2a02      	cmp	r2, #2
 8016c36:	d036      	beq.n	8016ca6 <_DrawBitmap+0x5f6>
 8016c38:	e0b7      	b.n	8016daa <_DrawBitmap+0x6fa>
 8016c3a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016c3c:	b166      	cbz	r6, 8016c58 <_DrawBitmap+0x5a8>
 8016c3e:	092d      	lsrs	r5, r5, #4
 8016c40:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8016c42:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8016c46:	8023      	strh	r3, [r4, #0]
 8016c48:	f10a 0201 	add.w	r2, sl, #1
 8016c4c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016c4e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8016c52:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016c56:	e001      	b.n	8016c5c <_DrawBitmap+0x5ac>
 8016c58:	465b      	mov	r3, fp
 8016c5a:	4652      	mov	r2, sl
 8016c5c:	2b01      	cmp	r3, #1
 8016c5e:	dd19      	ble.n	8016c94 <_DrawBitmap+0x5e4>
 8016c60:	1058      	asrs	r0, r3, #1
 8016c62:	1d21      	adds	r1, r4, #4
 8016c64:	f003 0301 	and.w	r3, r3, #1
 8016c68:	eb02 0c00 	add.w	ip, r2, r0
 8016c6c:	092f      	lsrs	r7, r5, #4
 8016c6e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8016c70:	f005 050f 	and.w	r5, r5, #15
 8016c74:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8016c78:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8016c7c:	f821 7c04 	strh.w	r7, [r1, #-4]
 8016c80:	f821 5c02 	strh.w	r5, [r1, #-2]
 8016c84:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8016c88:	4562      	cmp	r2, ip
 8016c8a:	f101 0104 	add.w	r1, r1, #4
 8016c8e:	d1ed      	bne.n	8016c6c <_DrawBitmap+0x5bc>
 8016c90:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	f000 8088 	beq.w	8016daa <_DrawBitmap+0x6fa>
 8016c9a:	092d      	lsrs	r5, r5, #4
 8016c9c:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8016c9e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8016ca2:	8023      	strh	r3, [r4, #0]
 8016ca4:	e081      	b.n	8016daa <_DrawBitmap+0x6fa>
 8016ca6:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8016ca8:	b1c7      	cbz	r7, 8016cdc <_DrawBitmap+0x62c>
 8016caa:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8016cae:	d00b      	beq.n	8016cc8 <_DrawBitmap+0x618>
 8016cb0:	092d      	lsrs	r5, r5, #4
 8016cb2:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8016cb4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8016cb8:	8023      	strh	r3, [r4, #0]
 8016cba:	b12e      	cbz	r6, 8016cc8 <_DrawBitmap+0x618>
 8016cbc:	68b3      	ldr	r3, [r6, #8]
 8016cbe:	9904      	ldr	r1, [sp, #16]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	9a05      	ldr	r2, [sp, #20]
 8016cc4:	4630      	mov	r0, r6
 8016cc6:	4798      	blx	r3
 8016cc8:	9804      	ldr	r0, [sp, #16]
 8016cca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016ccc:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8016cd0:	1c47      	adds	r7, r0, #1
 8016cd2:	f10b 39ff 	add.w	r9, fp, #4294967295
 8016cd6:	f10a 0801 	add.w	r8, sl, #1
 8016cda:	e00f      	b.n	8016cfc <_DrawBitmap+0x64c>
 8016cdc:	46d9      	mov	r9, fp
 8016cde:	46d0      	mov	r8, sl
 8016ce0:	9f04      	ldr	r7, [sp, #16]
 8016ce2:	e00b      	b.n	8016cfc <_DrawBitmap+0x64c>
 8016ce4:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8016ce8:	d10c      	bne.n	8016d04 <_DrawBitmap+0x654>
 8016cea:	f015 050f 	ands.w	r5, r5, #15
 8016cee:	d117      	bne.n	8016d20 <_DrawBitmap+0x670>
 8016cf0:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 8016cf4:	3404      	adds	r4, #4
 8016cf6:	3702      	adds	r7, #2
 8016cf8:	f1a9 0902 	sub.w	r9, r9, #2
 8016cfc:	f1b9 0f01 	cmp.w	r9, #1
 8016d00:	dcf0      	bgt.n	8016ce4 <_DrawBitmap+0x634>
 8016d02:	e01a      	b.n	8016d3a <_DrawBitmap+0x68a>
 8016d04:	092b      	lsrs	r3, r5, #4
 8016d06:	9921      	ldr	r1, [sp, #132]	; 0x84
 8016d08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8016d0c:	8023      	strh	r3, [r4, #0]
 8016d0e:	2e00      	cmp	r6, #0
 8016d10:	d0eb      	beq.n	8016cea <_DrawBitmap+0x63a>
 8016d12:	68b3      	ldr	r3, [r6, #8]
 8016d14:	9a05      	ldr	r2, [sp, #20]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	4630      	mov	r0, r6
 8016d1a:	4639      	mov	r1, r7
 8016d1c:	4798      	blx	r3
 8016d1e:	e7e4      	b.n	8016cea <_DrawBitmap+0x63a>
 8016d20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016d22:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 8016d26:	8063      	strh	r3, [r4, #2]
 8016d28:	2e00      	cmp	r6, #0
 8016d2a:	d0e1      	beq.n	8016cf0 <_DrawBitmap+0x640>
 8016d2c:	68b3      	ldr	r3, [r6, #8]
 8016d2e:	9a05      	ldr	r2, [sp, #20]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	4630      	mov	r0, r6
 8016d34:	1c79      	adds	r1, r7, #1
 8016d36:	4798      	blx	r3
 8016d38:	e7da      	b.n	8016cf0 <_DrawBitmap+0x640>
 8016d3a:	f1b9 0f00 	cmp.w	r9, #0
 8016d3e:	d034      	beq.n	8016daa <_DrawBitmap+0x6fa>
 8016d40:	092d      	lsrs	r5, r5, #4
 8016d42:	d032      	beq.n	8016daa <_DrawBitmap+0x6fa>
 8016d44:	9821      	ldr	r0, [sp, #132]	; 0x84
 8016d46:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 8016d4a:	8023      	strh	r3, [r4, #0]
 8016d4c:	b36e      	cbz	r6, 8016daa <_DrawBitmap+0x6fa>
 8016d4e:	68b3      	ldr	r3, [r6, #8]
 8016d50:	9a05      	ldr	r2, [sp, #20]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	4630      	mov	r0, r6
 8016d56:	4639      	mov	r1, r7
 8016d58:	4798      	blx	r3
 8016d5a:	e026      	b.n	8016daa <_DrawBitmap+0x6fa>
 8016d5c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016d5e:	f1c6 0302 	rsb	r3, r6, #2
 8016d62:	b2db      	uxtb	r3, r3
 8016d64:	4650      	mov	r0, sl
 8016d66:	465a      	mov	r2, fp
 8016d68:	4293      	cmp	r3, r2
 8016d6a:	bfc8      	it	gt
 8016d6c:	b2d3      	uxtbgt	r3, r2
 8016d6e:	1ad2      	subs	r2, r2, r3
 8016d70:	1ca1      	adds	r1, r4, #2
 8016d72:	461e      	mov	r6, r3
 8016d74:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8016d78:	d005      	beq.n	8016d86 <_DrawBitmap+0x6d6>
 8016d7a:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 8016d7e:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 8016d82:	f821 7c02 	strh.w	r7, [r1, #-2]
 8016d86:	3e01      	subs	r6, #1
 8016d88:	012d      	lsls	r5, r5, #4
 8016d8a:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8016d8e:	b2ed      	uxtb	r5, r5
 8016d90:	f101 0102 	add.w	r1, r1, #2
 8016d94:	d1ee      	bne.n	8016d74 <_DrawBitmap+0x6c4>
 8016d96:	3b01      	subs	r3, #1
 8016d98:	b2db      	uxtb	r3, r3
 8016d9a:	3301      	adds	r3, #1
 8016d9c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016da0:	b11a      	cbz	r2, 8016daa <_DrawBitmap+0x6fa>
 8016da2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8016da6:	2302      	movs	r3, #2
 8016da8:	e7de      	b.n	8016d68 <_DrawBitmap+0x6b8>
 8016daa:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8016dac:	9b05      	ldr	r3, [sp, #20]
 8016dae:	9e08      	ldr	r6, [sp, #32]
 8016db0:	44ba      	add	sl, r7
 8016db2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016db4:	3301      	adds	r3, #1
 8016db6:	4437      	add	r7, r6
 8016db8:	9305      	str	r3, [sp, #20]
 8016dba:	9709      	str	r7, [sp, #36]	; 0x24
 8016dbc:	e5a3      	b.n	8016906 <_DrawBitmap+0x256>
 8016dbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016dc0:	b113      	cbz	r3, 8016dc8 <_DrawBitmap+0x718>
 8016dc2:	a811      	add	r0, sp, #68	; 0x44
 8016dc4:	f7fc fda8 	bl	8013918 <GUI_ALLOC_UnlockH>
 8016dc8:	b013      	add	sp, #76	; 0x4c
 8016dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dce:	bf00      	nop
 8016dd0:	20000110 	.word	0x20000110

08016dd4 <LCD_SelectLCD>:
 8016dd4:	b510      	push	{r4, lr}
 8016dd6:	4b0d      	ldr	r3, [pc, #52]	; (8016e0c <LCD_SelectLCD+0x38>)
 8016dd8:	681a      	ldr	r2, [r3, #0]
 8016dda:	7c51      	ldrb	r1, [r2, #17]
 8016ddc:	4a0c      	ldr	r2, [pc, #48]	; (8016e10 <LCD_SelectLCD+0x3c>)
 8016dde:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8016de2:	461c      	mov	r4, r3
 8016de4:	b140      	cbz	r0, 8016df8 <LCD_SelectLCD+0x24>
 8016de6:	68c3      	ldr	r3, [r0, #12]
 8016de8:	b113      	cbz	r3, 8016df0 <LCD_SelectLCD+0x1c>
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	2b04      	cmp	r3, #4
 8016dee:	d001      	beq.n	8016df4 <LCD_SelectLCD+0x20>
 8016df0:	6800      	ldr	r0, [r0, #0]
 8016df2:	e7f7      	b.n	8016de4 <LCD_SelectLCD+0x10>
 8016df4:	f7fb ff8c 	bl	8012d10 <GUI_DEVICE_Unlink>
 8016df8:	6823      	ldr	r3, [r4, #0]
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	661a      	str	r2, [r3, #96]	; 0x60
 8016dfe:	f103 0208 	add.w	r2, r3, #8
 8016e02:	615a      	str	r2, [r3, #20]
 8016e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e08:	f7f9 bd8e 	b.w	8010928 <LCD_SetClipRectMax>
 8016e0c:	20000110 	.word	0x20000110
 8016e10:	2001d5dc 	.word	0x2001d5dc

08016e14 <LCD_ReadRectEx>:
 8016e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e18:	b087      	sub	sp, #28
 8016e1a:	4617      	mov	r7, r2
 8016e1c:	9304      	str	r3, [sp, #16]
 8016e1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016e20:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016e22:	68da      	ldr	r2, [r3, #12]
 8016e24:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8016e26:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8016e2a:	4606      	mov	r6, r0
 8016e2c:	460d      	mov	r5, r1
 8016e2e:	b973      	cbnz	r3, 8016e4e <LCD_ReadRectEx+0x3a>
 8016e30:	4b71      	ldr	r3, [pc, #452]	; (8016ff8 <LCD_ReadRectEx+0x1e4>)
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	7c58      	ldrb	r0, [r3, #17]
 8016e36:	f7f9 fa29 	bl	801028c <GUI_GetBitsPerPixelEx>
 8016e3a:	2808      	cmp	r0, #8
 8016e3c:	4682      	mov	sl, r0
 8016e3e:	dd15      	ble.n	8016e6c <LCD_ReadRectEx+0x58>
 8016e40:	2810      	cmp	r0, #16
 8016e42:	bfcc      	ite	gt
 8016e44:	f04f 0904 	movgt.w	r9, #4
 8016e48:	f04f 0902 	movle.w	r9, #2
 8016e4c:	e010      	b.n	8016e70 <LCD_ReadRectEx+0x5c>
 8016e4e:	a811      	add	r0, sp, #68	; 0x44
 8016e50:	2101      	movs	r1, #1
 8016e52:	4798      	blx	r3
 8016e54:	4684      	mov	ip, r0
 8016e56:	2800      	cmp	r0, #0
 8016e58:	d0ea      	beq.n	8016e30 <LCD_ReadRectEx+0x1c>
 8016e5a:	9b04      	ldr	r3, [sp, #16]
 8016e5c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016e5e:	e88d 0018 	stmia.w	sp, {r3, r4}
 8016e62:	4631      	mov	r1, r6
 8016e64:	462a      	mov	r2, r5
 8016e66:	463b      	mov	r3, r7
 8016e68:	47e0      	blx	ip
 8016e6a:	e0c1      	b.n	8016ff0 <LCD_ReadRectEx+0x1dc>
 8016e6c:	f04f 0901 	mov.w	r9, #1
 8016e70:	f04f 0b00 	mov.w	fp, #0
 8016e74:	9b04      	ldr	r3, [sp, #16]
 8016e76:	429d      	cmp	r5, r3
 8016e78:	f300 80ba 	bgt.w	8016ff0 <LCD_ReadRectEx+0x1dc>
 8016e7c:	f1b9 0f02 	cmp.w	r9, #2
 8016e80:	d009      	beq.n	8016e96 <LCD_ReadRectEx+0x82>
 8016e82:	f1b9 0f04 	cmp.w	r9, #4
 8016e86:	d004      	beq.n	8016e92 <LCD_ReadRectEx+0x7e>
 8016e88:	f1b9 0f01 	cmp.w	r9, #1
 8016e8c:	f040 80ae 	bne.w	8016fec <LCD_ReadRectEx+0x1d8>
 8016e90:	e003      	b.n	8016e9a <LCD_ReadRectEx+0x86>
 8016e92:	46b4      	mov	ip, r6
 8016e94:	e09b      	b.n	8016fce <LCD_ReadRectEx+0x1ba>
 8016e96:	46b4      	mov	ip, r6
 8016e98:	e08a      	b.n	8016fb0 <LCD_ReadRectEx+0x19c>
 8016e9a:	f10a 32ff 	add.w	r2, sl, #4294967295
 8016e9e:	2a07      	cmp	r2, #7
 8016ea0:	f200 80a4 	bhi.w	8016fec <LCD_ReadRectEx+0x1d8>
 8016ea4:	e8df f002 	tbb	[pc, r2]
 8016ea8:	0606080a 	.word	0x0606080a
 8016eac:	04040404 	.word	0x04040404
 8016eb0:	46b4      	mov	ip, r6
 8016eb2:	e066      	b.n	8016f82 <LCD_ReadRectEx+0x16e>
 8016eb4:	46b4      	mov	ip, r6
 8016eb6:	e047      	b.n	8016f48 <LCD_ReadRectEx+0x134>
 8016eb8:	46b4      	mov	ip, r6
 8016eba:	e022      	b.n	8016f02 <LCD_ReadRectEx+0xee>
 8016ebc:	46b4      	mov	ip, r6
 8016ebe:	45bc      	cmp	ip, r7
 8016ec0:	f300 8094 	bgt.w	8016fec <LCD_ReadRectEx+0x1d8>
 8016ec4:	4661      	mov	r1, ip
 8016ec6:	462a      	mov	r2, r5
 8016ec8:	f8cd c00c 	str.w	ip, [sp, #12]
 8016ecc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016ece:	47c0      	blx	r8
 8016ed0:	f1cb 0207 	rsb	r2, fp, #7
 8016ed4:	fa00 f202 	lsl.w	r2, r0, r2
 8016ed8:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8016edc:	7820      	ldrb	r0, [r4, #0]
 8016ede:	fa41 f10b 	asr.w	r1, r1, fp
 8016ee2:	4001      	ands	r1, r0
 8016ee4:	430a      	orrs	r2, r1
 8016ee6:	7022      	strb	r2, [r4, #0]
 8016ee8:	f10b 0301 	add.w	r3, fp, #1
 8016eec:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8016ef0:	f023 0207 	bic.w	r2, r3, #7
 8016ef4:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8016ef8:	fa43 fb02 	asr.w	fp, r3, r2
 8016efc:	f10c 0c01 	add.w	ip, ip, #1
 8016f00:	e7dd      	b.n	8016ebe <LCD_ReadRectEx+0xaa>
 8016f02:	45bc      	cmp	ip, r7
 8016f04:	dc72      	bgt.n	8016fec <LCD_ReadRectEx+0x1d8>
 8016f06:	4661      	mov	r1, ip
 8016f08:	462a      	mov	r2, r5
 8016f0a:	f8cd c00c 	str.w	ip, [sp, #12]
 8016f0e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016f10:	47c0      	blx	r8
 8016f12:	ea4f 024b 	mov.w	r2, fp, lsl #1
 8016f16:	f1c2 0106 	rsb	r1, r2, #6
 8016f1a:	fa00 f101 	lsl.w	r1, r0, r1
 8016f1e:	f64f 703f 	movw	r0, #65343	; 0xff3f
 8016f22:	fa40 f202 	asr.w	r2, r0, r2
 8016f26:	7820      	ldrb	r0, [r4, #0]
 8016f28:	4002      	ands	r2, r0
 8016f2a:	4311      	orrs	r1, r2
 8016f2c:	7021      	strb	r1, [r4, #0]
 8016f2e:	f10b 0301 	add.w	r3, fp, #1
 8016f32:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8016f36:	f023 0203 	bic.w	r2, r3, #3
 8016f3a:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8016f3e:	fa43 fb02 	asr.w	fp, r3, r2
 8016f42:	f10c 0c01 	add.w	ip, ip, #1
 8016f46:	e7dc      	b.n	8016f02 <LCD_ReadRectEx+0xee>
 8016f48:	45bc      	cmp	ip, r7
 8016f4a:	dc4f      	bgt.n	8016fec <LCD_ReadRectEx+0x1d8>
 8016f4c:	4661      	mov	r1, ip
 8016f4e:	462a      	mov	r2, r5
 8016f50:	f8cd c00c 	str.w	ip, [sp, #12]
 8016f54:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016f56:	47c0      	blx	r8
 8016f58:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8016f5c:	f1c2 0104 	rsb	r1, r2, #4
 8016f60:	fa00 f101 	lsl.w	r1, r0, r1
 8016f64:	200f      	movs	r0, #15
 8016f66:	fa00 f202 	lsl.w	r2, r0, r2
 8016f6a:	7820      	ldrb	r0, [r4, #0]
 8016f6c:	4002      	ands	r2, r0
 8016f6e:	4311      	orrs	r1, r2
 8016f70:	7021      	strb	r1, [r4, #0]
 8016f72:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8016f76:	445c      	add	r4, fp
 8016f78:	f10c 0c01 	add.w	ip, ip, #1
 8016f7c:	f08b 0b01 	eor.w	fp, fp, #1
 8016f80:	e7e2      	b.n	8016f48 <LCD_ReadRectEx+0x134>
 8016f82:	4273      	negs	r3, r6
 8016f84:	1ba2      	subs	r2, r4, r6
 8016f86:	45bc      	cmp	ip, r7
 8016f88:	9305      	str	r3, [sp, #20]
 8016f8a:	4462      	add	r2, ip
 8016f8c:	dc0e      	bgt.n	8016fac <LCD_ReadRectEx+0x198>
 8016f8e:	4661      	mov	r1, ip
 8016f90:	462a      	mov	r2, r5
 8016f92:	f8cd c00c 	str.w	ip, [sp, #12]
 8016f96:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016f98:	47c0      	blx	r8
 8016f9a:	9a05      	ldr	r2, [sp, #20]
 8016f9c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8016fa0:	4422      	add	r2, r4
 8016fa2:	f802 000c 	strb.w	r0, [r2, ip]
 8016fa6:	f10c 0c01 	add.w	ip, ip, #1
 8016faa:	e7ea      	b.n	8016f82 <LCD_ReadRectEx+0x16e>
 8016fac:	4614      	mov	r4, r2
 8016fae:	e01d      	b.n	8016fec <LCD_ReadRectEx+0x1d8>
 8016fb0:	45bc      	cmp	ip, r7
 8016fb2:	dc1b      	bgt.n	8016fec <LCD_ReadRectEx+0x1d8>
 8016fb4:	4661      	mov	r1, ip
 8016fb6:	f8cd c00c 	str.w	ip, [sp, #12]
 8016fba:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016fbc:	462a      	mov	r2, r5
 8016fbe:	47c0      	blx	r8
 8016fc0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8016fc4:	f824 0b02 	strh.w	r0, [r4], #2
 8016fc8:	f10c 0c01 	add.w	ip, ip, #1
 8016fcc:	e7f0      	b.n	8016fb0 <LCD_ReadRectEx+0x19c>
 8016fce:	45bc      	cmp	ip, r7
 8016fd0:	dc0c      	bgt.n	8016fec <LCD_ReadRectEx+0x1d8>
 8016fd2:	4661      	mov	r1, ip
 8016fd4:	f8cd c00c 	str.w	ip, [sp, #12]
 8016fd8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016fda:	462a      	mov	r2, r5
 8016fdc:	47c0      	blx	r8
 8016fde:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8016fe2:	f844 0b04 	str.w	r0, [r4], #4
 8016fe6:	f10c 0c01 	add.w	ip, ip, #1
 8016fea:	e7f0      	b.n	8016fce <LCD_ReadRectEx+0x1ba>
 8016fec:	3501      	adds	r5, #1
 8016fee:	e741      	b.n	8016e74 <LCD_ReadRectEx+0x60>
 8016ff0:	b007      	add	sp, #28
 8016ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ff6:	bf00      	nop
 8016ff8:	20000110 	.word	0x20000110

08016ffc <GUI_ReadRectEx>:
 8016ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ffe:	4d16      	ldr	r5, [pc, #88]	; (8017058 <GUI_ReadRectEx+0x5c>)
 8017000:	9e05      	ldr	r6, [sp, #20]
 8017002:	682d      	ldr	r5, [r5, #0]
 8017004:	9c06      	ldr	r4, [sp, #24]
 8017006:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 801700a:	42b8      	cmp	r0, r7
 801700c:	bfb8      	it	lt
 801700e:	4638      	movlt	r0, r7
 8017010:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8017014:	42ba      	cmp	r2, r7
 8017016:	bfa8      	it	ge
 8017018:	463a      	movge	r2, r7
 801701a:	4282      	cmp	r2, r0
 801701c:	db1b      	blt.n	8017056 <GUI_ReadRectEx+0x5a>
 801701e:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8017022:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8017026:	42b9      	cmp	r1, r7
 8017028:	bfb8      	it	lt
 801702a:	4639      	movlt	r1, r7
 801702c:	42ab      	cmp	r3, r5
 801702e:	bfa8      	it	ge
 8017030:	462b      	movge	r3, r5
 8017032:	428b      	cmp	r3, r1
 8017034:	db0f      	blt.n	8017056 <GUI_ReadRectEx+0x5a>
 8017036:	68e5      	ldr	r5, [r4, #12]
 8017038:	682d      	ldr	r5, [r5, #0]
 801703a:	f035 0704 	bics.w	r7, r5, #4
 801703e:	d105      	bne.n	801704c <GUI_ReadRectEx+0x50>
 8017040:	9605      	str	r6, [sp, #20]
 8017042:	9406      	str	r4, [sp, #24]
 8017044:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017048:	f7ff bee4 	b.w	8016e14 <LCD_ReadRectEx>
 801704c:	6825      	ldr	r5, [r4, #0]
 801704e:	2d00      	cmp	r5, #0
 8017050:	d0f6      	beq.n	8017040 <GUI_ReadRectEx+0x44>
 8017052:	462c      	mov	r4, r5
 8017054:	e7ef      	b.n	8017036 <GUI_ReadRectEx+0x3a>
 8017056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017058:	20000110 	.word	0x20000110

0801705c <_OnExit>:
 801705c:	b510      	push	{r4, lr}
 801705e:	4c03      	ldr	r4, [pc, #12]	; (801706c <_OnExit+0x10>)
 8017060:	6820      	ldr	r0, [r4, #0]
 8017062:	f7fc fc37 	bl	80138d4 <GUI_ALLOC_FreeFixedBlock>
 8017066:	2300      	movs	r3, #0
 8017068:	6023      	str	r3, [r4, #0]
 801706a:	bd10      	pop	{r4, pc}
 801706c:	2001d6dc 	.word	0x2001d6dc

08017070 <LCD_InitColors>:
 8017070:	b538      	push	{r3, r4, r5, lr}
 8017072:	4d09      	ldr	r5, [pc, #36]	; (8017098 <LCD_InitColors+0x28>)
 8017074:	682c      	ldr	r4, [r5, #0]
 8017076:	b95c      	cbnz	r4, 8017090 <LCD_InitColors+0x20>
 8017078:	4b08      	ldr	r3, [pc, #32]	; (801709c <LCD_InitColors+0x2c>)
 801707a:	6818      	ldr	r0, [r3, #0]
 801707c:	0080      	lsls	r0, r0, #2
 801707e:	f7fc fd95 	bl	8013bac <GUI_ALLOC_GetFixedBlock>
 8017082:	6028      	str	r0, [r5, #0]
 8017084:	b130      	cbz	r0, 8017094 <LCD_InitColors+0x24>
 8017086:	4806      	ldr	r0, [pc, #24]	; (80170a0 <LCD_InitColors+0x30>)
 8017088:	4b06      	ldr	r3, [pc, #24]	; (80170a4 <LCD_InitColors+0x34>)
 801708a:	6003      	str	r3, [r0, #0]
 801708c:	f7fc f80a 	bl	80130a4 <GUI__RegisterExit>
 8017090:	2000      	movs	r0, #0
 8017092:	bd38      	pop	{r3, r4, r5, pc}
 8017094:	2001      	movs	r0, #1
 8017096:	bd38      	pop	{r3, r4, r5, pc}
 8017098:	2001d6dc 	.word	0x2001d6dc
 801709c:	200001f0 	.word	0x200001f0
 80170a0:	2001d378 	.word	0x2001d378
 80170a4:	0801705d 	.word	0x0801705d

080170a8 <LCD_GetpPalConvTableUncached>:
 80170a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170ac:	b320      	cbz	r0, 80170f8 <LCD_GetpPalConvTableUncached+0x50>
 80170ae:	6885      	ldr	r5, [r0, #8]
 80170b0:	b1dd      	cbz	r5, 80170ea <LCD_GetpPalConvTableUncached+0x42>
 80170b2:	4e12      	ldr	r6, [pc, #72]	; (80170fc <LCD_GetpPalConvTableUncached+0x54>)
 80170b4:	6833      	ldr	r3, [r6, #0]
 80170b6:	b1db      	cbz	r3, 80170f0 <LCD_GetpPalConvTableUncached+0x48>
 80170b8:	6803      	ldr	r3, [r0, #0]
 80170ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80170be:	dc1a      	bgt.n	80170f6 <LCD_GetpPalConvTableUncached+0x4e>
 80170c0:	4a0f      	ldr	r2, [pc, #60]	; (8017100 <LCD_GetpPalConvTableUncached+0x58>)
 80170c2:	6812      	ldr	r2, [r2, #0]
 80170c4:	2400      	movs	r4, #0
 80170c6:	429a      	cmp	r2, r3
 80170c8:	bfb4      	ite	lt
 80170ca:	4690      	movlt	r8, r2
 80170cc:	4698      	movge	r8, r3
 80170ce:	4544      	cmp	r4, r8
 80170d0:	da08      	bge.n	80170e4 <LCD_GetpPalConvTableUncached+0x3c>
 80170d2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80170d6:	6837      	ldr	r7, [r6, #0]
 80170d8:	f7f9 fc80 	bl	80109dc <LCD_Color2Index>
 80170dc:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 80170e0:	3401      	adds	r4, #1
 80170e2:	e7f4      	b.n	80170ce <LCD_GetpPalConvTableUncached+0x26>
 80170e4:	6830      	ldr	r0, [r6, #0]
 80170e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170ea:	4628      	mov	r0, r5
 80170ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170f0:	4618      	mov	r0, r3
 80170f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170f6:	2000      	movs	r0, #0
 80170f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170fc:	2001d6dc 	.word	0x2001d6dc
 8017100:	200001f0 	.word	0x200001f0

08017104 <LCD_GetpPalConvTableBM>:
 8017104:	f7ff bfd0 	b.w	80170a8 <LCD_GetpPalConvTableUncached>

08017108 <LCD_InitLUT>:
 8017108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801710c:	f003 fa9f 	bl	801a64e <LCD_GetNumLayers>
 8017110:	2400      	movs	r4, #0
 8017112:	4680      	mov	r8, r0
 8017114:	4544      	cmp	r4, r8
 8017116:	da2c      	bge.n	8017172 <LCD_InitLUT+0x6a>
 8017118:	4620      	mov	r0, r4
 801711a:	f7fb fdc1 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 801711e:	b330      	cbz	r0, 801716e <LCD_InitLUT+0x66>
 8017120:	4e15      	ldr	r6, [pc, #84]	; (8017178 <LCD_InitLUT+0x70>)
 8017122:	6833      	ldr	r3, [r6, #0]
 8017124:	4620      	mov	r0, r4
 8017126:	f893 9011 	ldrb.w	r9, [r3, #17]
 801712a:	745c      	strb	r4, [r3, #17]
 801712c:	f7f9 f890 	bl	8010250 <LCD_GetBitsPerPixelEx>
 8017130:	2808      	cmp	r0, #8
 8017132:	dd03      	ble.n	801713c <LCD_InitLUT+0x34>
 8017134:	6833      	ldr	r3, [r6, #0]
 8017136:	f883 9011 	strb.w	r9, [r3, #17]
 801713a:	e018      	b.n	801716e <LCD_InitLUT+0x66>
 801713c:	4b0f      	ldr	r3, [pc, #60]	; (801717c <LCD_InitLUT+0x74>)
 801713e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017142:	691a      	ldr	r2, [r3, #16]
 8017144:	4b0e      	ldr	r3, [pc, #56]	; (8017180 <LCD_InitLUT+0x78>)
 8017146:	429a      	cmp	r2, r3
 8017148:	d0f4      	beq.n	8017134 <LCD_InitLUT+0x2c>
 801714a:	4620      	mov	r0, r4
 801714c:	f7f9 f883 	bl	8010256 <LCD_GetNumColorsEx>
 8017150:	2500      	movs	r5, #0
 8017152:	4682      	mov	sl, r0
 8017154:	4555      	cmp	r5, sl
 8017156:	daed      	bge.n	8017134 <LCD_InitLUT+0x2c>
 8017158:	b2ef      	uxtb	r7, r5
 801715a:	4638      	mov	r0, r7
 801715c:	f7f9 fc4e 	bl	80109fc <LCD_Index2Color>
 8017160:	4639      	mov	r1, r7
 8017162:	4602      	mov	r2, r0
 8017164:	4620      	mov	r0, r4
 8017166:	f7f9 f817 	bl	8010198 <LCD_SetLUTEntryEx>
 801716a:	3501      	adds	r5, #1
 801716c:	e7f2      	b.n	8017154 <LCD_InitLUT+0x4c>
 801716e:	3401      	adds	r4, #1
 8017170:	e7d0      	b.n	8017114 <LCD_InitLUT+0xc>
 8017172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017176:	bf00      	nop
 8017178:	20000110 	.word	0x20000110
 801717c:	2001d5dc 	.word	0x2001d5dc
 8017180:	08025894 	.word	0x08025894

08017184 <LCD_AA_SetAndMask>:
 8017184:	4b02      	ldr	r3, [pc, #8]	; (8017190 <LCD_AA_SetAndMask+0xc>)
 8017186:	681a      	ldr	r2, [r3, #0]
 8017188:	6018      	str	r0, [r3, #0]
 801718a:	4610      	mov	r0, r2
 801718c:	4770      	bx	lr
 801718e:	bf00      	nop
 8017190:	200001f4 	.word	0x200001f4

08017194 <GUI__strcmp>:
 8017194:	b510      	push	{r4, lr}
 8017196:	4b09      	ldr	r3, [pc, #36]	; (80171bc <GUI__strcmp+0x28>)
 8017198:	2800      	cmp	r0, #0
 801719a:	bf08      	it	eq
 801719c:	4618      	moveq	r0, r3
 801719e:	2900      	cmp	r1, #0
 80171a0:	bf08      	it	eq
 80171a2:	4619      	moveq	r1, r3
 80171a4:	2300      	movs	r3, #0
 80171a6:	5cc4      	ldrb	r4, [r0, r3]
 80171a8:	5cca      	ldrb	r2, [r1, r3]
 80171aa:	42a2      	cmp	r2, r4
 80171ac:	d104      	bne.n	80171b8 <GUI__strcmp+0x24>
 80171ae:	3301      	adds	r3, #1
 80171b0:	2a00      	cmp	r2, #0
 80171b2:	d1f8      	bne.n	80171a6 <GUI__strcmp+0x12>
 80171b4:	4610      	mov	r0, r2
 80171b6:	bd10      	pop	{r4, pc}
 80171b8:	2001      	movs	r0, #1
 80171ba:	bd10      	pop	{r4, pc}
 80171bc:	080258b1 	.word	0x080258b1

080171c0 <GUI__strcmp_hp>:
 80171c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171c2:	460d      	mov	r5, r1
 80171c4:	b160      	cbz	r0, 80171e0 <GUI__strcmp_hp+0x20>
 80171c6:	f7fc fb99 	bl	80138fc <GUI_ALLOC_LockH>
 80171ca:	ac02      	add	r4, sp, #8
 80171cc:	4629      	mov	r1, r5
 80171ce:	f844 0d04 	str.w	r0, [r4, #-4]!
 80171d2:	f7ff ffdf 	bl	8017194 <GUI__strcmp>
 80171d6:	4605      	mov	r5, r0
 80171d8:	4620      	mov	r0, r4
 80171da:	f7fc fb9d 	bl	8013918 <GUI_ALLOC_UnlockH>
 80171de:	e000      	b.n	80171e2 <GUI__strcmp_hp+0x22>
 80171e0:	2501      	movs	r5, #1
 80171e2:	4628      	mov	r0, r5
 80171e4:	b003      	add	sp, #12
 80171e6:	bd30      	pop	{r4, r5, pc}

080171e8 <_GetWordWrap>:
 80171e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80171ec:	2500      	movs	r5, #0
 80171ee:	9001      	str	r0, [sp, #4]
 80171f0:	468a      	mov	sl, r1
 80171f2:	4691      	mov	r9, r2
 80171f4:	46a8      	mov	r8, r5
 80171f6:	462e      	mov	r6, r5
 80171f8:	462c      	mov	r4, r5
 80171fa:	462f      	mov	r7, r5
 80171fc:	a801      	add	r0, sp, #4
 80171fe:	f000 fc2b 	bl	8017a58 <GUI_UC__GetCharCodeInc>
 8017202:	2d00      	cmp	r5, #0
 8017204:	bf08      	it	eq
 8017206:	4605      	moveq	r5, r0
 8017208:	b108      	cbz	r0, 801720e <_GetWordWrap+0x26>
 801720a:	280a      	cmp	r0, #10
 801720c:	d10b      	bne.n	8017226 <_GetWordWrap+0x3e>
 801720e:	4626      	mov	r6, r4
 8017210:	2e00      	cmp	r6, #0
 8017212:	bf18      	it	ne
 8017214:	4634      	movne	r4, r6
 8017216:	f1b9 0f00 	cmp.w	r9, #0
 801721a:	d016      	beq.n	801724a <_GetWordWrap+0x62>
 801721c:	ebc8 0707 	rsb	r7, r8, r7
 8017220:	f8c9 7000 	str.w	r7, [r9]
 8017224:	e011      	b.n	801724a <_GetWordWrap+0x62>
 8017226:	2820      	cmp	r0, #32
 8017228:	d00d      	beq.n	8017246 <_GetWordWrap+0x5e>
 801722a:	2d20      	cmp	r5, #32
 801722c:	bf04      	itt	eq
 801722e:	4626      	moveq	r6, r4
 8017230:	2500      	moveq	r5, #0
 8017232:	f7fc fa4f 	bl	80136d4 <GUI_GetCharDistX>
 8017236:	4407      	add	r7, r0
 8017238:	4557      	cmp	r7, sl
 801723a:	4680      	mov	r8, r0
 801723c:	dd01      	ble.n	8017242 <_GetWordWrap+0x5a>
 801723e:	2c00      	cmp	r4, #0
 8017240:	d1e6      	bne.n	8017210 <_GetWordWrap+0x28>
 8017242:	3401      	adds	r4, #1
 8017244:	e7da      	b.n	80171fc <_GetWordWrap+0x14>
 8017246:	4626      	mov	r6, r4
 8017248:	e7f3      	b.n	8017232 <_GetWordWrap+0x4a>
 801724a:	4620      	mov	r0, r4
 801724c:	b002      	add	sp, #8
 801724e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017252 <_GetCharWrap>:
 8017252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017254:	2400      	movs	r4, #0
 8017256:	9001      	str	r0, [sp, #4]
 8017258:	460e      	mov	r6, r1
 801725a:	4625      	mov	r5, r4
 801725c:	a801      	add	r0, sp, #4
 801725e:	f000 fbfb 	bl	8017a58 <GUI_UC__GetCharCodeInc>
 8017262:	4607      	mov	r7, r0
 8017264:	b148      	cbz	r0, 801727a <_GetCharWrap+0x28>
 8017266:	f7fc fa35 	bl	80136d4 <GUI_GetCharDistX>
 801726a:	4405      	add	r5, r0
 801726c:	b10c      	cbz	r4, 8017272 <_GetCharWrap+0x20>
 801726e:	42b5      	cmp	r5, r6
 8017270:	dc03      	bgt.n	801727a <_GetCharWrap+0x28>
 8017272:	2f0a      	cmp	r7, #10
 8017274:	d001      	beq.n	801727a <_GetCharWrap+0x28>
 8017276:	3401      	adds	r4, #1
 8017278:	e7f0      	b.n	801725c <_GetCharWrap+0xa>
 801727a:	4620      	mov	r0, r4
 801727c:	b003      	add	sp, #12
 801727e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017280 <_WrapGetNumCharsDisp>:
 8017280:	2a01      	cmp	r2, #1
 8017282:	b510      	push	{r4, lr}
 8017284:	d005      	beq.n	8017292 <_WrapGetNumCharsDisp+0x12>
 8017286:	2a02      	cmp	r2, #2
 8017288:	d108      	bne.n	801729c <_WrapGetNumCharsDisp+0x1c>
 801728a:	4b07      	ldr	r3, [pc, #28]	; (80172a8 <_WrapGetNumCharsDisp+0x28>)
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	4798      	blx	r3
 8017290:	bd10      	pop	{r4, pc}
 8017292:	4a06      	ldr	r2, [pc, #24]	; (80172ac <_WrapGetNumCharsDisp+0x2c>)
 8017294:	6814      	ldr	r4, [r2, #0]
 8017296:	461a      	mov	r2, r3
 8017298:	47a0      	blx	r4
 801729a:	bd10      	pop	{r4, pc}
 801729c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80172a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80172a4:	f7fc b944 	b.w	8013530 <GUI__GetLineNumChars>
 80172a8:	200001f8 	.word	0x200001f8
 80172ac:	200001fc 	.word	0x200001fc

080172b0 <GUI__WrapGetNumCharsDisp>:
 80172b0:	2300      	movs	r3, #0
 80172b2:	f7ff bfe5 	b.w	8017280 <_WrapGetNumCharsDisp>

080172b6 <GUI__WrapGetNumCharsToNextLine>:
 80172b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172b8:	b085      	sub	sp, #20
 80172ba:	ab03      	add	r3, sp, #12
 80172bc:	4617      	mov	r7, r2
 80172be:	460e      	mov	r6, r1
 80172c0:	9001      	str	r0, [sp, #4]
 80172c2:	f7ff ffdd 	bl	8017280 <_WrapGetNumCharsDisp>
 80172c6:	9d01      	ldr	r5, [sp, #4]
 80172c8:	4604      	mov	r4, r0
 80172ca:	4621      	mov	r1, r4
 80172cc:	4628      	mov	r0, r5
 80172ce:	f000 fbd7 	bl	8017a80 <GUI_UC__NumChars2NumBytes>
 80172d2:	4428      	add	r0, r5
 80172d4:	ad04      	add	r5, sp, #16
 80172d6:	f845 0d0c 	str.w	r0, [r5, #-12]!
 80172da:	4628      	mov	r0, r5
 80172dc:	f000 fbbc 	bl	8017a58 <GUI_UC__GetCharCodeInc>
 80172e0:	280a      	cmp	r0, #10
 80172e2:	d101      	bne.n	80172e8 <GUI__WrapGetNumCharsToNextLine+0x32>
 80172e4:	3401      	adds	r4, #1
 80172e6:	e012      	b.n	801730e <GUI__WrapGetNumCharsToNextLine+0x58>
 80172e8:	2f01      	cmp	r7, #1
 80172ea:	d110      	bne.n	801730e <GUI__WrapGetNumCharsToNextLine+0x58>
 80172ec:	2820      	cmp	r0, #32
 80172ee:	d10e      	bne.n	801730e <GUI__WrapGetNumCharsToNextLine+0x58>
 80172f0:	f7fc f9f0 	bl	80136d4 <GUI_GetCharDistX>
 80172f4:	4607      	mov	r7, r0
 80172f6:	9b03      	ldr	r3, [sp, #12]
 80172f8:	429e      	cmp	r6, r3
 80172fa:	db08      	blt.n	801730e <GUI__WrapGetNumCharsToNextLine+0x58>
 80172fc:	443b      	add	r3, r7
 80172fe:	4628      	mov	r0, r5
 8017300:	9303      	str	r3, [sp, #12]
 8017302:	f000 fba9 	bl	8017a58 <GUI_UC__GetCharCodeInc>
 8017306:	2820      	cmp	r0, #32
 8017308:	f104 0401 	add.w	r4, r4, #1
 801730c:	d0f3      	beq.n	80172f6 <GUI__WrapGetNumCharsToNextLine+0x40>
 801730e:	4620      	mov	r0, r4
 8017310:	b005      	add	sp, #20
 8017312:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017314 <GUI__WrapGetNumBytesToNextLine>:
 8017314:	b510      	push	{r4, lr}
 8017316:	4604      	mov	r4, r0
 8017318:	f7ff ffcd 	bl	80172b6 <GUI__WrapGetNumCharsToNextLine>
 801731c:	4601      	mov	r1, r0
 801731e:	4620      	mov	r0, r4
 8017320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017324:	f000 bbac 	b.w	8017a80 <GUI_UC__NumChars2NumBytes>

08017328 <GUI__GetNumChars>:
 8017328:	b513      	push	{r0, r1, r4, lr}
 801732a:	9001      	str	r0, [sp, #4]
 801732c:	b130      	cbz	r0, 801733c <GUI__GetNumChars+0x14>
 801732e:	2400      	movs	r4, #0
 8017330:	a801      	add	r0, sp, #4
 8017332:	f000 fb91 	bl	8017a58 <GUI_UC__GetCharCodeInc>
 8017336:	b110      	cbz	r0, 801733e <GUI__GetNumChars+0x16>
 8017338:	3401      	adds	r4, #1
 801733a:	e7f9      	b.n	8017330 <GUI__GetNumChars+0x8>
 801733c:	4604      	mov	r4, r0
 801733e:	4620      	mov	r0, r4
 8017340:	b002      	add	sp, #8
 8017342:	bd10      	pop	{r4, pc}

08017344 <GUI__GetFontSizeY>:
 8017344:	4b03      	ldr	r3, [pc, #12]	; (8017354 <GUI__GetFontSizeY+0x10>)
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	69db      	ldr	r3, [r3, #28]
 801734a:	7e18      	ldrb	r0, [r3, #24]
 801734c:	7edb      	ldrb	r3, [r3, #27]
 801734e:	4358      	muls	r0, r3
 8017350:	4770      	bx	lr
 8017352:	bf00      	nop
 8017354:	20000110 	.word	0x20000110

08017358 <GUI__ExpandPixelIndicesEx>:
 8017358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801735c:	1e0c      	subs	r4, r1, #0
 801735e:	4605      	mov	r5, r0
 8017360:	f340 80b3 	ble.w	80174ca <GUI__ExpandPixelIndicesEx+0x172>
 8017364:	2a08      	cmp	r2, #8
 8017366:	685f      	ldr	r7, [r3, #4]
 8017368:	dd04      	ble.n	8017374 <GUI__ExpandPixelIndicesEx+0x1c>
 801736a:	2a10      	cmp	r2, #16
 801736c:	f340 8098 	ble.w	80174a0 <GUI__ExpandPixelIndicesEx+0x148>
 8017370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017374:	3a01      	subs	r2, #1
 8017376:	2a07      	cmp	r2, #7
 8017378:	f200 80a7 	bhi.w	80174ca <GUI__ExpandPixelIndicesEx+0x172>
 801737c:	e8df f002 	tbb	[pc, r2]
 8017380:	58a52d04 	.word	0x58a52d04
 8017384:	83a5a5a5 	.word	0x83a5a5a5
 8017388:	1e66      	subs	r6, r4, #1
 801738a:	10f2      	asrs	r2, r6, #3
 801738c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8017390:	3b01      	subs	r3, #1
 8017392:	eb05 0802 	add.w	r8, r5, r2
 8017396:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 801739a:	f006 0607 	and.w	r6, r6, #7
 801739e:	f815 a002 	ldrb.w	sl, [r5, r2]
 80173a2:	2580      	movs	r5, #128	; 0x80
 80173a4:	4135      	asrs	r5, r6
 80173a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80173aa:	b2ed      	uxtb	r5, r5
 80173ac:	f1c6 0307 	rsb	r3, r6, #7
 80173b0:	ea0a 0005 	and.w	r0, sl, r5
 80173b4:	4118      	asrs	r0, r3
 80173b6:	47b8      	blx	r7
 80173b8:	f849 0904 	str.w	r0, [r9], #-4
 80173bc:	b936      	cbnz	r6, 80173cc <GUI__ExpandPixelIndicesEx+0x74>
 80173be:	f898 a000 	ldrb.w	sl, [r8]
 80173c2:	2501      	movs	r5, #1
 80173c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80173c8:	2607      	movs	r6, #7
 80173ca:	e002      	b.n	80173d2 <GUI__ExpandPixelIndicesEx+0x7a>
 80173cc:	006d      	lsls	r5, r5, #1
 80173ce:	3e01      	subs	r6, #1
 80173d0:	b2ed      	uxtb	r5, r5
 80173d2:	3c01      	subs	r4, #1
 80173d4:	d1ea      	bne.n	80173ac <GUI__ExpandPixelIndicesEx+0x54>
 80173d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173da:	1e66      	subs	r6, r4, #1
 80173dc:	10b2      	asrs	r2, r6, #2
 80173de:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80173e2:	3b01      	subs	r3, #1
 80173e4:	f006 0603 	and.w	r6, r6, #3
 80173e8:	eb05 0802 	add.w	r8, r5, r2
 80173ec:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80173f0:	f815 a002 	ldrb.w	sl, [r5, r2]
 80173f4:	0073      	lsls	r3, r6, #1
 80173f6:	25c0      	movs	r5, #192	; 0xc0
 80173f8:	411d      	asrs	r5, r3
 80173fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80173fe:	b2ed      	uxtb	r5, r5
 8017400:	0073      	lsls	r3, r6, #1
 8017402:	f1c3 0306 	rsb	r3, r3, #6
 8017406:	ea0a 0005 	and.w	r0, sl, r5
 801740a:	4118      	asrs	r0, r3
 801740c:	47b8      	blx	r7
 801740e:	f849 0904 	str.w	r0, [r9], #-4
 8017412:	b936      	cbnz	r6, 8017422 <GUI__ExpandPixelIndicesEx+0xca>
 8017414:	2503      	movs	r5, #3
 8017416:	f898 a000 	ldrb.w	sl, [r8]
 801741a:	462e      	mov	r6, r5
 801741c:	f108 38ff 	add.w	r8, r8, #4294967295
 8017420:	e002      	b.n	8017428 <GUI__ExpandPixelIndicesEx+0xd0>
 8017422:	00ad      	lsls	r5, r5, #2
 8017424:	3e01      	subs	r6, #1
 8017426:	b2ed      	uxtb	r5, r5
 8017428:	3c01      	subs	r4, #1
 801742a:	d1e9      	bne.n	8017400 <GUI__ExpandPixelIndicesEx+0xa8>
 801742c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017430:	1e66      	subs	r6, r4, #1
 8017432:	1072      	asrs	r2, r6, #1
 8017434:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8017438:	3b01      	subs	r3, #1
 801743a:	f006 0601 	and.w	r6, r6, #1
 801743e:	eb05 0802 	add.w	r8, r5, r2
 8017442:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8017446:	f815 a002 	ldrb.w	sl, [r5, r2]
 801744a:	00b3      	lsls	r3, r6, #2
 801744c:	25f0      	movs	r5, #240	; 0xf0
 801744e:	411d      	asrs	r5, r3
 8017450:	f108 38ff 	add.w	r8, r8, #4294967295
 8017454:	b2ed      	uxtb	r5, r5
 8017456:	00b3      	lsls	r3, r6, #2
 8017458:	f1c3 0304 	rsb	r3, r3, #4
 801745c:	ea0a 0005 	and.w	r0, sl, r5
 8017460:	4118      	asrs	r0, r3
 8017462:	47b8      	blx	r7
 8017464:	f849 0904 	str.w	r0, [r9], #-4
 8017468:	b936      	cbnz	r6, 8017478 <GUI__ExpandPixelIndicesEx+0x120>
 801746a:	f898 a000 	ldrb.w	sl, [r8]
 801746e:	250f      	movs	r5, #15
 8017470:	f108 38ff 	add.w	r8, r8, #4294967295
 8017474:	2601      	movs	r6, #1
 8017476:	e002      	b.n	801747e <GUI__ExpandPixelIndicesEx+0x126>
 8017478:	012d      	lsls	r5, r5, #4
 801747a:	b2ed      	uxtb	r5, r5
 801747c:	2600      	movs	r6, #0
 801747e:	3c01      	subs	r4, #1
 8017480:	d1e9      	bne.n	8017456 <GUI__ExpandPixelIndicesEx+0xfe>
 8017482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017486:	192e      	adds	r6, r5, r4
 8017488:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801748c:	1b34      	subs	r4, r6, r4
 801748e:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8017492:	47b8      	blx	r7
 8017494:	42a6      	cmp	r6, r4
 8017496:	f845 0d04 	str.w	r0, [r5, #-4]!
 801749a:	d1f8      	bne.n	801748e <GUI__ExpandPixelIndicesEx+0x136>
 801749c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174a0:	695e      	ldr	r6, [r3, #20]
 80174a2:	b12e      	cbz	r6, 80174b0 <GUI__ExpandPixelIndicesEx+0x158>
 80174a4:	4629      	mov	r1, r5
 80174a6:	4622      	mov	r2, r4
 80174a8:	2302      	movs	r3, #2
 80174aa:	47b0      	blx	r6
 80174ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174b0:	0064      	lsls	r4, r4, #1
 80174b2:	4425      	add	r5, r4
 80174b4:	192e      	adds	r6, r5, r4
 80174b6:	1b2c      	subs	r4, r5, r4
 80174b8:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 80174bc:	47b8      	blx	r7
 80174be:	42a5      	cmp	r5, r4
 80174c0:	f846 0d04 	str.w	r0, [r6, #-4]!
 80174c4:	d1f8      	bne.n	80174b8 <GUI__ExpandPixelIndicesEx+0x160>
 80174c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080174ce <_GetTwinArcPara>:
 80174ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174d2:	fb01 f901 	mul.w	r9, r1, r1
 80174d6:	1e47      	subs	r7, r0, #1
 80174d8:	4604      	mov	r4, r0
 80174da:	4340      	muls	r0, r0
 80174dc:	ebc9 0000 	rsb	r0, r9, r0
 80174e0:	460d      	mov	r5, r1
 80174e2:	4692      	mov	sl, r2
 80174e4:	4698      	mov	r8, r3
 80174e6:	9e08      	ldr	r6, [sp, #32]
 80174e8:	f003 f8d0 	bl	801a68c <GUI__sqrt32>
 80174ec:	42bd      	cmp	r5, r7
 80174ee:	f8ca 0000 	str.w	r0, [sl]
 80174f2:	da10      	bge.n	8017516 <_GetTwinArcPara+0x48>
 80174f4:	fb07 f007 	mul.w	r0, r7, r7
 80174f8:	ebc9 0000 	rsb	r0, r9, r0
 80174fc:	f003 f8c6 	bl	801a68c <GUI__sqrt32>
 8017500:	3c02      	subs	r4, #2
 8017502:	42a5      	cmp	r5, r4
 8017504:	f8c8 0000 	str.w	r0, [r8]
 8017508:	da03      	bge.n	8017512 <_GetTwinArcPara+0x44>
 801750a:	3801      	subs	r0, #1
 801750c:	6030      	str	r0, [r6, #0]
 801750e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017512:	2300      	movs	r3, #0
 8017514:	e002      	b.n	801751c <_GetTwinArcPara+0x4e>
 8017516:	2300      	movs	r3, #0
 8017518:	f8c8 3000 	str.w	r3, [r8]
 801751c:	6033      	str	r3, [r6, #0]
 801751e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08017524 <GUI__DrawTwinArc4>:
 8017524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017528:	4d76      	ldr	r5, [pc, #472]	; (8017704 <GUI__DrawTwinArc4+0x1e0>)
 801752a:	682d      	ldr	r5, [r5, #0]
 801752c:	6cee      	ldr	r6, [r5, #76]	; 0x4c
 801752e:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8017530:	b08f      	sub	sp, #60	; 0x3c
 8017532:	4430      	add	r0, r6
 8017534:	4439      	add	r1, r7
 8017536:	9005      	str	r0, [sp, #20]
 8017538:	4416      	add	r6, r2
 801753a:	441f      	add	r7, r3
 801753c:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8017540:	a80c      	add	r0, sp, #48	; 0x30
 8017542:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017544:	9106      	str	r1, [sp, #24]
 8017546:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 801754a:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 801754e:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
 8017552:	f7f6 f9e5 	bl	800d920 <WM__InitIVRSearch>
 8017556:	2800      	cmp	r0, #0
 8017558:	f000 80d0 	beq.w	80176fc <GUI__DrawTwinArc4+0x1d8>
 801755c:	2c00      	cmp	r4, #0
 801755e:	dc02      	bgt.n	8017566 <GUI__DrawTwinArc4+0x42>
 8017560:	f7f6 f91c 	bl	800d79c <WM__GetNextIVR>
 8017564:	e7f7      	b.n	8017556 <GUI__DrawTwinArc4+0x32>
 8017566:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017568:	f7fa fcb2 	bl	8011ed0 <GUI_SetColor>
 801756c:	9b06      	ldr	r3, [sp, #24]
 801756e:	4423      	add	r3, r4
 8017570:	9307      	str	r3, [sp, #28]
 8017572:	9b06      	ldr	r3, [sp, #24]
 8017574:	1e65      	subs	r5, r4, #1
 8017576:	f103 0801 	add.w	r8, r3, #1
 801757a:	2d00      	cmp	r5, #0
 801757c:	d037      	beq.n	80175ee <GUI__DrawTwinArc4+0xca>
 801757e:	ab0b      	add	r3, sp, #44	; 0x2c
 8017580:	4629      	mov	r1, r5
 8017582:	9300      	str	r3, [sp, #0]
 8017584:	4620      	mov	r0, r4
 8017586:	aa09      	add	r2, sp, #36	; 0x24
 8017588:	ab0a      	add	r3, sp, #40	; 0x28
 801758a:	f7ff ffa0 	bl	80174ce <_GetTwinArcPara>
 801758e:	9b05      	ldr	r3, [sp, #20]
 8017590:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017592:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017594:	4423      	add	r3, r4
 8017596:	ebc1 0c03 	rsb	ip, r1, r3
 801759a:	ebc4 0b06 	rsb	fp, r4, r6
 801759e:	1a9b      	subs	r3, r3, r2
 80175a0:	3b01      	subs	r3, #1
 80175a2:	eb0b 0901 	add.w	r9, fp, r1
 80175a6:	4493      	add	fp, r2
 80175a8:	4660      	mov	r0, ip
 80175aa:	461a      	mov	r2, r3
 80175ac:	4641      	mov	r1, r8
 80175ae:	f10b 0b01 	add.w	fp, fp, #1
 80175b2:	9303      	str	r3, [sp, #12]
 80175b4:	f8cd c010 	str.w	ip, [sp, #16]
 80175b8:	f7f8 ff56 	bl	8010468 <LCD_DrawHLine>
 80175bc:	4641      	mov	r1, r8
 80175be:	4658      	mov	r0, fp
 80175c0:	464a      	mov	r2, r9
 80175c2:	f7f8 ff51 	bl	8010468 <LCD_DrawHLine>
 80175c6:	ebc4 0a07 	rsb	sl, r4, r7
 80175ca:	f8dd c010 	ldr.w	ip, [sp, #16]
 80175ce:	9b03      	ldr	r3, [sp, #12]
 80175d0:	44aa      	add	sl, r5
 80175d2:	4660      	mov	r0, ip
 80175d4:	461a      	mov	r2, r3
 80175d6:	4651      	mov	r1, sl
 80175d8:	f7f8 ff46 	bl	8010468 <LCD_DrawHLine>
 80175dc:	4658      	mov	r0, fp
 80175de:	4651      	mov	r1, sl
 80175e0:	464a      	mov	r2, r9
 80175e2:	f7f8 ff41 	bl	8010468 <LCD_DrawHLine>
 80175e6:	3d01      	subs	r5, #1
 80175e8:	f108 0801 	add.w	r8, r8, #1
 80175ec:	e7c5      	b.n	801757a <GUI__DrawTwinArc4+0x56>
 80175ee:	2c01      	cmp	r4, #1
 80175f0:	d0b6      	beq.n	8017560 <GUI__DrawTwinArc4+0x3c>
 80175f2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80175f4:	f7fa fc6c 	bl	8011ed0 <GUI_SetColor>
 80175f8:	9b07      	ldr	r3, [sp, #28]
 80175fa:	f1c4 0802 	rsb	r8, r4, #2
 80175fe:	1ea5      	subs	r5, r4, #2
 8017600:	4498      	add	r8, r3
 8017602:	2d00      	cmp	r5, #0
 8017604:	d037      	beq.n	8017676 <GUI__DrawTwinArc4+0x152>
 8017606:	ab0b      	add	r3, sp, #44	; 0x2c
 8017608:	4629      	mov	r1, r5
 801760a:	9300      	str	r3, [sp, #0]
 801760c:	4620      	mov	r0, r4
 801760e:	aa09      	add	r2, sp, #36	; 0x24
 8017610:	ab0a      	add	r3, sp, #40	; 0x28
 8017612:	f7ff ff5c 	bl	80174ce <_GetTwinArcPara>
 8017616:	9b05      	ldr	r3, [sp, #20]
 8017618:	990a      	ldr	r1, [sp, #40]	; 0x28
 801761a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801761c:	4423      	add	r3, r4
 801761e:	ebc1 0c03 	rsb	ip, r1, r3
 8017622:	ebc4 0b06 	rsb	fp, r4, r6
 8017626:	1a9b      	subs	r3, r3, r2
 8017628:	3b01      	subs	r3, #1
 801762a:	eb0b 0901 	add.w	r9, fp, r1
 801762e:	4493      	add	fp, r2
 8017630:	4660      	mov	r0, ip
 8017632:	461a      	mov	r2, r3
 8017634:	4641      	mov	r1, r8
 8017636:	f10b 0b01 	add.w	fp, fp, #1
 801763a:	9303      	str	r3, [sp, #12]
 801763c:	f8cd c010 	str.w	ip, [sp, #16]
 8017640:	f7f8 ff12 	bl	8010468 <LCD_DrawHLine>
 8017644:	4641      	mov	r1, r8
 8017646:	4658      	mov	r0, fp
 8017648:	464a      	mov	r2, r9
 801764a:	f7f8 ff0d 	bl	8010468 <LCD_DrawHLine>
 801764e:	ebc4 0a07 	rsb	sl, r4, r7
 8017652:	f8dd c010 	ldr.w	ip, [sp, #16]
 8017656:	9b03      	ldr	r3, [sp, #12]
 8017658:	44aa      	add	sl, r5
 801765a:	4660      	mov	r0, ip
 801765c:	461a      	mov	r2, r3
 801765e:	4651      	mov	r1, sl
 8017660:	f7f8 ff02 	bl	8010468 <LCD_DrawHLine>
 8017664:	4658      	mov	r0, fp
 8017666:	4651      	mov	r1, sl
 8017668:	464a      	mov	r2, r9
 801766a:	f7f8 fefd 	bl	8010468 <LCD_DrawHLine>
 801766e:	3d01      	subs	r5, #1
 8017670:	f108 0801 	add.w	r8, r8, #1
 8017674:	e7c5      	b.n	8017602 <GUI__DrawTwinArc4+0xde>
 8017676:	2c02      	cmp	r4, #2
 8017678:	f43f af72 	beq.w	8017560 <GUI__DrawTwinArc4+0x3c>
 801767c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801767e:	f7fa fc27 	bl	8011ed0 <GUI_SetColor>
 8017682:	9b07      	ldr	r3, [sp, #28]
 8017684:	f1c4 0803 	rsb	r8, r4, #3
 8017688:	1ee5      	subs	r5, r4, #3
 801768a:	4498      	add	r8, r3
 801768c:	2d00      	cmp	r5, #0
 801768e:	f43f af67 	beq.w	8017560 <GUI__DrawTwinArc4+0x3c>
 8017692:	ab0b      	add	r3, sp, #44	; 0x2c
 8017694:	4629      	mov	r1, r5
 8017696:	9300      	str	r3, [sp, #0]
 8017698:	4620      	mov	r0, r4
 801769a:	aa09      	add	r2, sp, #36	; 0x24
 801769c:	ab0a      	add	r3, sp, #40	; 0x28
 801769e:	f7ff ff16 	bl	80174ce <_GetTwinArcPara>
 80176a2:	9b05      	ldr	r3, [sp, #20]
 80176a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80176a6:	4423      	add	r3, r4
 80176a8:	ebc2 0c03 	rsb	ip, r2, r3
 80176ac:	ebc4 0b06 	rsb	fp, r4, r6
 80176b0:	3b01      	subs	r3, #1
 80176b2:	eb0b 0902 	add.w	r9, fp, r2
 80176b6:	4660      	mov	r0, ip
 80176b8:	461a      	mov	r2, r3
 80176ba:	4641      	mov	r1, r8
 80176bc:	f10b 0b01 	add.w	fp, fp, #1
 80176c0:	9303      	str	r3, [sp, #12]
 80176c2:	f8cd c010 	str.w	ip, [sp, #16]
 80176c6:	f7f8 fecf 	bl	8010468 <LCD_DrawHLine>
 80176ca:	4641      	mov	r1, r8
 80176cc:	4658      	mov	r0, fp
 80176ce:	464a      	mov	r2, r9
 80176d0:	f7f8 feca 	bl	8010468 <LCD_DrawHLine>
 80176d4:	ebc4 0a07 	rsb	sl, r4, r7
 80176d8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80176dc:	9b03      	ldr	r3, [sp, #12]
 80176de:	44aa      	add	sl, r5
 80176e0:	4660      	mov	r0, ip
 80176e2:	461a      	mov	r2, r3
 80176e4:	4651      	mov	r1, sl
 80176e6:	f7f8 febf 	bl	8010468 <LCD_DrawHLine>
 80176ea:	4658      	mov	r0, fp
 80176ec:	4651      	mov	r1, sl
 80176ee:	464a      	mov	r2, r9
 80176f0:	f7f8 feba 	bl	8010468 <LCD_DrawHLine>
 80176f4:	3d01      	subs	r5, #1
 80176f6:	f108 0801 	add.w	r8, r8, #1
 80176fa:	e7c7      	b.n	801768c <GUI__DrawTwinArc4+0x168>
 80176fc:	b00f      	add	sp, #60	; 0x3c
 80176fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017702:	bf00      	nop
 8017704:	20000110 	.word	0x20000110

08017708 <GUI__DivideRound32>:
 8017708:	b149      	cbz	r1, 801771e <GUI__DivideRound32+0x16>
 801770a:	2800      	cmp	r0, #0
 801770c:	ea4f 0361 	mov.w	r3, r1, asr #1
 8017710:	bfb4      	ite	lt
 8017712:	ebc3 0000 	rsblt	r0, r3, r0
 8017716:	18c0      	addge	r0, r0, r3
 8017718:	fb90 f0f1 	sdiv	r0, r0, r1
 801771c:	4770      	bx	lr
 801771e:	4608      	mov	r0, r1
 8017720:	4770      	bx	lr

08017722 <GUI__CompactPixelIndices>:
 8017722:	2a08      	cmp	r2, #8
 8017724:	b510      	push	{r4, lr}
 8017726:	dd0e      	ble.n	8017746 <GUI__CompactPixelIndices+0x24>
 8017728:	2a10      	cmp	r2, #16
 801772a:	dc0a      	bgt.n	8017742 <GUI__CompactPixelIndices+0x20>
 801772c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8017730:	4603      	mov	r3, r0
 8017732:	f850 2b04 	ldr.w	r2, [r0], #4
 8017736:	f823 2b02 	strh.w	r2, [r3], #2
 801773a:	428b      	cmp	r3, r1
 801773c:	d1f9      	bne.n	8017732 <GUI__CompactPixelIndices+0x10>
 801773e:	2001      	movs	r0, #1
 8017740:	bd10      	pop	{r4, pc}
 8017742:	2000      	movs	r0, #0
 8017744:	bd10      	pop	{r4, pc}
 8017746:	2a02      	cmp	r2, #2
 8017748:	d06d      	beq.n	8017826 <GUI__CompactPixelIndices+0x104>
 801774a:	2a04      	cmp	r2, #4
 801774c:	d054      	beq.n	80177f8 <GUI__CompactPixelIndices+0xd6>
 801774e:	2a01      	cmp	r2, #1
 8017750:	f040 8095 	bne.w	801787e <GUI__CompactPixelIndices+0x15c>
 8017754:	4604      	mov	r4, r0
 8017756:	6803      	ldr	r3, [r0, #0]
 8017758:	2901      	cmp	r1, #1
 801775a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801775e:	b2db      	uxtb	r3, r3
 8017760:	d047      	beq.n	80177f2 <GUI__CompactPixelIndices+0xd0>
 8017762:	6842      	ldr	r2, [r0, #4]
 8017764:	2902      	cmp	r1, #2
 8017766:	f002 0201 	and.w	r2, r2, #1
 801776a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801776e:	d102      	bne.n	8017776 <GUI__CompactPixelIndices+0x54>
 8017770:	f100 0208 	add.w	r2, r0, #8
 8017774:	e03e      	b.n	80177f4 <GUI__CompactPixelIndices+0xd2>
 8017776:	6882      	ldr	r2, [r0, #8]
 8017778:	2903      	cmp	r1, #3
 801777a:	f002 0201 	and.w	r2, r2, #1
 801777e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8017782:	d102      	bne.n	801778a <GUI__CompactPixelIndices+0x68>
 8017784:	f100 020c 	add.w	r2, r0, #12
 8017788:	e034      	b.n	80177f4 <GUI__CompactPixelIndices+0xd2>
 801778a:	68c2      	ldr	r2, [r0, #12]
 801778c:	2904      	cmp	r1, #4
 801778e:	f002 0201 	and.w	r2, r2, #1
 8017792:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8017796:	d102      	bne.n	801779e <GUI__CompactPixelIndices+0x7c>
 8017798:	f100 0210 	add.w	r2, r0, #16
 801779c:	e02a      	b.n	80177f4 <GUI__CompactPixelIndices+0xd2>
 801779e:	6902      	ldr	r2, [r0, #16]
 80177a0:	2905      	cmp	r1, #5
 80177a2:	f002 0201 	and.w	r2, r2, #1
 80177a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80177aa:	d102      	bne.n	80177b2 <GUI__CompactPixelIndices+0x90>
 80177ac:	f100 0214 	add.w	r2, r0, #20
 80177b0:	e020      	b.n	80177f4 <GUI__CompactPixelIndices+0xd2>
 80177b2:	6942      	ldr	r2, [r0, #20]
 80177b4:	2906      	cmp	r1, #6
 80177b6:	f002 0201 	and.w	r2, r2, #1
 80177ba:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80177be:	d102      	bne.n	80177c6 <GUI__CompactPixelIndices+0xa4>
 80177c0:	f100 0218 	add.w	r2, r0, #24
 80177c4:	e016      	b.n	80177f4 <GUI__CompactPixelIndices+0xd2>
 80177c6:	6982      	ldr	r2, [r0, #24]
 80177c8:	3907      	subs	r1, #7
 80177ca:	f002 0201 	and.w	r2, r2, #1
 80177ce:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80177d2:	d102      	bne.n	80177da <GUI__CompactPixelIndices+0xb8>
 80177d4:	f100 021c 	add.w	r2, r0, #28
 80177d8:	e005      	b.n	80177e6 <GUI__CompactPixelIndices+0xc4>
 80177da:	f100 0220 	add.w	r2, r0, #32
 80177de:	69c0      	ldr	r0, [r0, #28]
 80177e0:	f000 0001 	and.w	r0, r0, #1
 80177e4:	4303      	orrs	r3, r0
 80177e6:	f804 3b01 	strb.w	r3, [r4], #1
 80177ea:	2900      	cmp	r1, #0
 80177ec:	d0a7      	beq.n	801773e <GUI__CompactPixelIndices+0x1c>
 80177ee:	4610      	mov	r0, r2
 80177f0:	e7b1      	b.n	8017756 <GUI__CompactPixelIndices+0x34>
 80177f2:	1d02      	adds	r2, r0, #4
 80177f4:	2100      	movs	r1, #0
 80177f6:	e7f6      	b.n	80177e6 <GUI__CompactPixelIndices+0xc4>
 80177f8:	4602      	mov	r2, r0
 80177fa:	6803      	ldr	r3, [r0, #0]
 80177fc:	2901      	cmp	r1, #1
 80177fe:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8017802:	b2db      	uxtb	r3, r3
 8017804:	d102      	bne.n	801780c <GUI__CompactPixelIndices+0xea>
 8017806:	1d04      	adds	r4, r0, #4
 8017808:	2100      	movs	r1, #0
 801780a:	e006      	b.n	801781a <GUI__CompactPixelIndices+0xf8>
 801780c:	f100 0408 	add.w	r4, r0, #8
 8017810:	6840      	ldr	r0, [r0, #4]
 8017812:	f000 000f 	and.w	r0, r0, #15
 8017816:	4303      	orrs	r3, r0
 8017818:	3902      	subs	r1, #2
 801781a:	f802 3b01 	strb.w	r3, [r2], #1
 801781e:	2900      	cmp	r1, #0
 8017820:	d08d      	beq.n	801773e <GUI__CompactPixelIndices+0x1c>
 8017822:	4620      	mov	r0, r4
 8017824:	e7e9      	b.n	80177fa <GUI__CompactPixelIndices+0xd8>
 8017826:	4604      	mov	r4, r0
 8017828:	6803      	ldr	r3, [r0, #0]
 801782a:	2901      	cmp	r1, #1
 801782c:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8017830:	b2db      	uxtb	r3, r3
 8017832:	d021      	beq.n	8017878 <GUI__CompactPixelIndices+0x156>
 8017834:	6842      	ldr	r2, [r0, #4]
 8017836:	2902      	cmp	r1, #2
 8017838:	f002 0203 	and.w	r2, r2, #3
 801783c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8017840:	d102      	bne.n	8017848 <GUI__CompactPixelIndices+0x126>
 8017842:	f100 0208 	add.w	r2, r0, #8
 8017846:	e018      	b.n	801787a <GUI__CompactPixelIndices+0x158>
 8017848:	6882      	ldr	r2, [r0, #8]
 801784a:	2903      	cmp	r1, #3
 801784c:	f002 0203 	and.w	r2, r2, #3
 8017850:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8017854:	d102      	bne.n	801785c <GUI__CompactPixelIndices+0x13a>
 8017856:	f100 020c 	add.w	r2, r0, #12
 801785a:	e00e      	b.n	801787a <GUI__CompactPixelIndices+0x158>
 801785c:	f100 0210 	add.w	r2, r0, #16
 8017860:	68c0      	ldr	r0, [r0, #12]
 8017862:	f000 0003 	and.w	r0, r0, #3
 8017866:	4303      	orrs	r3, r0
 8017868:	3904      	subs	r1, #4
 801786a:	f804 3b01 	strb.w	r3, [r4], #1
 801786e:	2900      	cmp	r1, #0
 8017870:	f43f af65 	beq.w	801773e <GUI__CompactPixelIndices+0x1c>
 8017874:	4610      	mov	r0, r2
 8017876:	e7d7      	b.n	8017828 <GUI__CompactPixelIndices+0x106>
 8017878:	1d02      	adds	r2, r0, #4
 801787a:	2100      	movs	r1, #0
 801787c:	e7f5      	b.n	801786a <GUI__CompactPixelIndices+0x148>
 801787e:	2300      	movs	r3, #0
 8017880:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8017884:	54c2      	strb	r2, [r0, r3]
 8017886:	3301      	adds	r3, #1
 8017888:	428b      	cmp	r3, r1
 801788a:	d1f9      	bne.n	8017880 <GUI__CompactPixelIndices+0x15e>
 801788c:	e757      	b.n	801773e <GUI__CompactPixelIndices+0x1c>

0801788e <GUI__ConvertColor2Index>:
 801788e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017892:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017896:	681e      	ldr	r6, [r3, #0]
 8017898:	f1b8 0f00 	cmp.w	r8, #0
 801789c:	bf08      	it	eq
 801789e:	4680      	moveq	r8, r0
 80178a0:	2a08      	cmp	r2, #8
 80178a2:	4604      	mov	r4, r0
 80178a4:	460d      	mov	r5, r1
 80178a6:	dd05      	ble.n	80178b4 <GUI__ConvertColor2Index+0x26>
 80178a8:	2a10      	cmp	r2, #16
 80178aa:	f340 80b6 	ble.w	8017a1a <GUI__ConvertColor2Index+0x18c>
 80178ae:	2000      	movs	r0, #0
 80178b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178b4:	3a01      	subs	r2, #1
 80178b6:	2a07      	cmp	r2, #7
 80178b8:	f200 80a4 	bhi.w	8017a04 <GUI__ConvertColor2Index+0x176>
 80178bc:	e8df f002 	tbb	[pc, r2]
 80178c0:	87a26111 	.word	0x87a26111
 80178c4:	92a2a2a2 	.word	0x92a2a2a2
 80178c8:	69e0      	ldr	r0, [r4, #28]
 80178ca:	47b0      	blx	r6
 80178cc:	4338      	orrs	r0, r7
 80178ce:	f104 0920 	add.w	r9, r4, #32
 80178d2:	b2c7      	uxtb	r7, r0
 80178d4:	3d08      	subs	r5, #8
 80178d6:	f808 7b01 	strb.w	r7, [r8], #1
 80178da:	2d00      	cmp	r5, #0
 80178dc:	f000 8092 	beq.w	8017a04 <GUI__ConvertColor2Index+0x176>
 80178e0:	464c      	mov	r4, r9
 80178e2:	6820      	ldr	r0, [r4, #0]
 80178e4:	47b0      	blx	r6
 80178e6:	2d01      	cmp	r5, #1
 80178e8:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 80178ec:	b2c7      	uxtb	r7, r0
 80178ee:	f000 808c 	beq.w	8017a0a <GUI__ConvertColor2Index+0x17c>
 80178f2:	6860      	ldr	r0, [r4, #4]
 80178f4:	47b0      	blx	r6
 80178f6:	2d02      	cmp	r5, #2
 80178f8:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 80178fc:	b2c7      	uxtb	r7, r0
 80178fe:	d102      	bne.n	8017906 <GUI__ConvertColor2Index+0x78>
 8017900:	f104 0908 	add.w	r9, r4, #8
 8017904:	e083      	b.n	8017a0e <GUI__ConvertColor2Index+0x180>
 8017906:	68a0      	ldr	r0, [r4, #8]
 8017908:	47b0      	blx	r6
 801790a:	2d03      	cmp	r5, #3
 801790c:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 8017910:	b2c7      	uxtb	r7, r0
 8017912:	d102      	bne.n	801791a <GUI__ConvertColor2Index+0x8c>
 8017914:	f104 090c 	add.w	r9, r4, #12
 8017918:	e079      	b.n	8017a0e <GUI__ConvertColor2Index+0x180>
 801791a:	68e0      	ldr	r0, [r4, #12]
 801791c:	47b0      	blx	r6
 801791e:	2d04      	cmp	r5, #4
 8017920:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8017924:	b2c7      	uxtb	r7, r0
 8017926:	d102      	bne.n	801792e <GUI__ConvertColor2Index+0xa0>
 8017928:	f104 0910 	add.w	r9, r4, #16
 801792c:	e06f      	b.n	8017a0e <GUI__ConvertColor2Index+0x180>
 801792e:	6920      	ldr	r0, [r4, #16]
 8017930:	47b0      	blx	r6
 8017932:	2d05      	cmp	r5, #5
 8017934:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8017938:	b2c7      	uxtb	r7, r0
 801793a:	d102      	bne.n	8017942 <GUI__ConvertColor2Index+0xb4>
 801793c:	f104 0914 	add.w	r9, r4, #20
 8017940:	e065      	b.n	8017a0e <GUI__ConvertColor2Index+0x180>
 8017942:	6960      	ldr	r0, [r4, #20]
 8017944:	47b0      	blx	r6
 8017946:	2d06      	cmp	r5, #6
 8017948:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 801794c:	b2c7      	uxtb	r7, r0
 801794e:	d102      	bne.n	8017956 <GUI__ConvertColor2Index+0xc8>
 8017950:	f104 0918 	add.w	r9, r4, #24
 8017954:	e05b      	b.n	8017a0e <GUI__ConvertColor2Index+0x180>
 8017956:	69a0      	ldr	r0, [r4, #24]
 8017958:	47b0      	blx	r6
 801795a:	2d07      	cmp	r5, #7
 801795c:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 8017960:	b2c7      	uxtb	r7, r0
 8017962:	d1b1      	bne.n	80178c8 <GUI__ConvertColor2Index+0x3a>
 8017964:	f104 091c 	add.w	r9, r4, #28
 8017968:	e051      	b.n	8017a0e <GUI__ConvertColor2Index+0x180>
 801796a:	68e0      	ldr	r0, [r4, #12]
 801796c:	47b0      	blx	r6
 801796e:	4338      	orrs	r0, r7
 8017970:	f104 0910 	add.w	r9, r4, #16
 8017974:	b2c7      	uxtb	r7, r0
 8017976:	3d04      	subs	r5, #4
 8017978:	f808 7b01 	strb.w	r7, [r8], #1
 801797c:	2d00      	cmp	r5, #0
 801797e:	d041      	beq.n	8017a04 <GUI__ConvertColor2Index+0x176>
 8017980:	464c      	mov	r4, r9
 8017982:	6820      	ldr	r0, [r4, #0]
 8017984:	47b0      	blx	r6
 8017986:	2d01      	cmp	r5, #1
 8017988:	ea4f 1080 	mov.w	r0, r0, lsl #6
 801798c:	b2c7      	uxtb	r7, r0
 801798e:	d040      	beq.n	8017a12 <GUI__ConvertColor2Index+0x184>
 8017990:	6860      	ldr	r0, [r4, #4]
 8017992:	47b0      	blx	r6
 8017994:	2d02      	cmp	r5, #2
 8017996:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 801799a:	b2c7      	uxtb	r7, r0
 801799c:	d102      	bne.n	80179a4 <GUI__ConvertColor2Index+0x116>
 801799e:	f104 0908 	add.w	r9, r4, #8
 80179a2:	e038      	b.n	8017a16 <GUI__ConvertColor2Index+0x188>
 80179a4:	68a0      	ldr	r0, [r4, #8]
 80179a6:	47b0      	blx	r6
 80179a8:	2d03      	cmp	r5, #3
 80179aa:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 80179ae:	b2c7      	uxtb	r7, r0
 80179b0:	d1db      	bne.n	801796a <GUI__ConvertColor2Index+0xdc>
 80179b2:	f104 090c 	add.w	r9, r4, #12
 80179b6:	e02e      	b.n	8017a16 <GUI__ConvertColor2Index+0x188>
 80179b8:	6860      	ldr	r0, [r4, #4]
 80179ba:	47b0      	blx	r6
 80179bc:	4338      	orrs	r0, r7
 80179be:	f104 0908 	add.w	r9, r4, #8
 80179c2:	b2c7      	uxtb	r7, r0
 80179c4:	3d02      	subs	r5, #2
 80179c6:	f808 7b01 	strb.w	r7, [r8], #1
 80179ca:	b1dd      	cbz	r5, 8017a04 <GUI__ConvertColor2Index+0x176>
 80179cc:	464c      	mov	r4, r9
 80179ce:	6820      	ldr	r0, [r4, #0]
 80179d0:	47b0      	blx	r6
 80179d2:	2d01      	cmp	r5, #1
 80179d4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80179d8:	b2c7      	uxtb	r7, r0
 80179da:	d1ed      	bne.n	80179b8 <GUI__ConvertColor2Index+0x12a>
 80179dc:	f104 0904 	add.w	r9, r4, #4
 80179e0:	2500      	movs	r5, #0
 80179e2:	e7f0      	b.n	80179c6 <GUI__ConvertColor2Index+0x138>
 80179e4:	691f      	ldr	r7, [r3, #16]
 80179e6:	b12f      	cbz	r7, 80179f4 <GUI__ConvertColor2Index+0x166>
 80179e8:	4620      	mov	r0, r4
 80179ea:	4641      	mov	r1, r8
 80179ec:	462a      	mov	r2, r5
 80179ee:	2301      	movs	r3, #1
 80179f0:	47b8      	blx	r7
 80179f2:	e007      	b.n	8017a04 <GUI__ConvertColor2Index+0x176>
 80179f4:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 80179f8:	47b0      	blx	r6
 80179fa:	f808 0007 	strb.w	r0, [r8, r7]
 80179fe:	3701      	adds	r7, #1
 8017a00:	42bd      	cmp	r5, r7
 8017a02:	d1f7      	bne.n	80179f4 <GUI__ConvertColor2Index+0x166>
 8017a04:	2001      	movs	r0, #1
 8017a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a0a:	f104 0904 	add.w	r9, r4, #4
 8017a0e:	2500      	movs	r5, #0
 8017a10:	e761      	b.n	80178d6 <GUI__ConvertColor2Index+0x48>
 8017a12:	f104 0904 	add.w	r9, r4, #4
 8017a16:	2500      	movs	r5, #0
 8017a18:	e7ae      	b.n	8017978 <GUI__ConvertColor2Index+0xea>
 8017a1a:	691f      	ldr	r7, [r3, #16]
 8017a1c:	b11f      	cbz	r7, 8017a26 <GUI__ConvertColor2Index+0x198>
 8017a1e:	4641      	mov	r1, r8
 8017a20:	462a      	mov	r2, r5
 8017a22:	2302      	movs	r3, #2
 8017a24:	e7e4      	b.n	80179f0 <GUI__ConvertColor2Index+0x162>
 8017a26:	f854 0b04 	ldr.w	r0, [r4], #4
 8017a2a:	47b0      	blx	r6
 8017a2c:	3d01      	subs	r5, #1
 8017a2e:	f828 0b02 	strh.w	r0, [r8], #2
 8017a32:	d1f8      	bne.n	8017a26 <GUI__ConvertColor2Index+0x198>
 8017a34:	e7e6      	b.n	8017a04 <GUI__ConvertColor2Index+0x176>

08017a36 <GUI__CompactPixelIndicesEx>:
 8017a36:	b513      	push	{r0, r1, r4, lr}
 8017a38:	2400      	movs	r4, #0
 8017a3a:	9400      	str	r4, [sp, #0]
 8017a3c:	f7ff ff27 	bl	801788e <GUI__ConvertColor2Index>
 8017a40:	b002      	add	sp, #8
 8017a42:	bd10      	pop	{r4, pc}

08017a44 <_GetCharCode>:
 8017a44:	7800      	ldrb	r0, [r0, #0]
 8017a46:	4770      	bx	lr

08017a48 <_GetCharSize>:
 8017a48:	2001      	movs	r0, #1
 8017a4a:	4770      	bx	lr

08017a4c <_CalcSizeOfChar>:
 8017a4c:	2001      	movs	r0, #1
 8017a4e:	4770      	bx	lr

08017a50 <_Encode>:
 8017a50:	7001      	strb	r1, [r0, #0]
 8017a52:	2001      	movs	r0, #1
 8017a54:	4770      	bx	lr
	...

08017a58 <GUI_UC__GetCharCodeInc>:
 8017a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a5a:	4e08      	ldr	r6, [pc, #32]	; (8017a7c <GUI_UC__GetCharCodeInc+0x24>)
 8017a5c:	6804      	ldr	r4, [r0, #0]
 8017a5e:	6833      	ldr	r3, [r6, #0]
 8017a60:	4605      	mov	r5, r0
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	4620      	mov	r0, r4
 8017a66:	4798      	blx	r3
 8017a68:	6833      	ldr	r3, [r6, #0]
 8017a6a:	4607      	mov	r7, r0
 8017a6c:	685b      	ldr	r3, [r3, #4]
 8017a6e:	4620      	mov	r0, r4
 8017a70:	4798      	blx	r3
 8017a72:	4420      	add	r0, r4
 8017a74:	6028      	str	r0, [r5, #0]
 8017a76:	4638      	mov	r0, r7
 8017a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a7a:	bf00      	nop
 8017a7c:	2001d5d4 	.word	0x2001d5d4

08017a80 <GUI_UC__NumChars2NumBytes>:
 8017a80:	b570      	push	{r4, r5, r6, lr}
 8017a82:	4604      	mov	r4, r0
 8017a84:	460e      	mov	r6, r1
 8017a86:	2500      	movs	r5, #0
 8017a88:	b146      	cbz	r6, 8017a9c <GUI_UC__NumChars2NumBytes+0x1c>
 8017a8a:	4b05      	ldr	r3, [pc, #20]	; (8017aa0 <GUI_UC__NumChars2NumBytes+0x20>)
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	4620      	mov	r0, r4
 8017a90:	685b      	ldr	r3, [r3, #4]
 8017a92:	4798      	blx	r3
 8017a94:	3e01      	subs	r6, #1
 8017a96:	4404      	add	r4, r0
 8017a98:	4405      	add	r5, r0
 8017a9a:	e7f5      	b.n	8017a88 <GUI_UC__NumChars2NumBytes+0x8>
 8017a9c:	4628      	mov	r0, r5
 8017a9e:	bd70      	pop	{r4, r5, r6, pc}
 8017aa0:	2001d5d4 	.word	0x2001d5d4

08017aa4 <GUI_TOUCH_GetLayer>:
 8017aa4:	4b01      	ldr	r3, [pc, #4]	; (8017aac <GUI_TOUCH_GetLayer+0x8>)
 8017aa6:	7a58      	ldrb	r0, [r3, #9]
 8017aa8:	4770      	bx	lr
 8017aaa:	bf00      	nop
 8017aac:	2001d380 	.word	0x2001d380

08017ab0 <GUI_SetOrg>:
 8017ab0:	460a      	mov	r2, r1
 8017ab2:	4908      	ldr	r1, [pc, #32]	; (8017ad4 <GUI_SetOrg+0x24>)
 8017ab4:	b510      	push	{r4, lr}
 8017ab6:	8008      	strh	r0, [r1, #0]
 8017ab8:	4907      	ldr	r1, [pc, #28]	; (8017ad8 <GUI_SetOrg+0x28>)
 8017aba:	800a      	strh	r2, [r1, #0]
 8017abc:	4907      	ldr	r1, [pc, #28]	; (8017adc <GUI_SetOrg+0x2c>)
 8017abe:	6809      	ldr	r1, [r1, #0]
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	7c48      	ldrb	r0, [r1, #17]
 8017ac4:	4906      	ldr	r1, [pc, #24]	; (8017ae0 <GUI_SetOrg+0x30>)
 8017ac6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8017aca:	68c1      	ldr	r1, [r0, #12]
 8017acc:	6a0c      	ldr	r4, [r1, #32]
 8017ace:	4619      	mov	r1, r3
 8017ad0:	47a0      	blx	r4
 8017ad2:	bd10      	pop	{r4, pc}
 8017ad4:	2001d5c4 	.word	0x2001d5c4
 8017ad8:	2001d5b8 	.word	0x2001d5b8
 8017adc:	20000110 	.word	0x20000110
 8017ae0:	2001d5dc 	.word	0x2001d5dc

08017ae4 <_GetClipRect>:
 8017ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ae8:	8a01      	ldrh	r1, [r0, #16]
 8017aea:	8984      	ldrh	r4, [r0, #12]
 8017aec:	89c7      	ldrh	r7, [r0, #14]
 8017aee:	8a45      	ldrh	r5, [r0, #18]
 8017af0:	6802      	ldr	r2, [r0, #0]
 8017af2:	4603      	mov	r3, r0
 8017af4:	6940      	ldr	r0, [r0, #20]
 8017af6:	fa0f f984 	sxth.w	r9, r4
 8017afa:	fa0f fc87 	sxth.w	ip, r7
 8017afe:	fa0f f881 	sxth.w	r8, r1
 8017b02:	b22e      	sxth	r6, r5
 8017b04:	b9e8      	cbnz	r0, 8017b42 <_GetClipRect+0x5e>
 8017b06:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8017b0a:	4286      	cmp	r6, r0
 8017b0c:	db64      	blt.n	8017bd8 <_GetClipRect+0xf4>
 8017b0e:	f9b2 a000 	ldrsh.w	sl, [r2]
 8017b12:	45d0      	cmp	r8, sl
 8017b14:	db60      	blt.n	8017bd8 <_GetClipRect+0xf4>
 8017b16:	f9b2 a006 	ldrsh.w	sl, [r2, #6]
 8017b1a:	45d4      	cmp	ip, sl
 8017b1c:	dc5c      	bgt.n	8017bd8 <_GetClipRect+0xf4>
 8017b1e:	f9b2 a004 	ldrsh.w	sl, [r2, #4]
 8017b22:	45d1      	cmp	r9, sl
 8017b24:	dc58      	bgt.n	8017bd8 <_GetClipRect+0xf4>
 8017b26:	4584      	cmp	ip, r0
 8017b28:	da09      	bge.n	8017b3e <_GetClipRect+0x5a>
 8017b2a:	80df      	strh	r7, [r3, #6]
 8017b2c:	8852      	ldrh	r2, [r2, #2]
 8017b2e:	809c      	strh	r4, [r3, #4]
 8017b30:	3a01      	subs	r2, #1
 8017b32:	2001      	movs	r0, #1
 8017b34:	815a      	strh	r2, [r3, #10]
 8017b36:	8119      	strh	r1, [r3, #8]
 8017b38:	6158      	str	r0, [r3, #20]
 8017b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b3e:	2001      	movs	r0, #1
 8017b40:	6158      	str	r0, [r3, #20]
 8017b42:	6958      	ldr	r0, [r3, #20]
 8017b44:	2801      	cmp	r0, #1
 8017b46:	d119      	bne.n	8017b7c <_GetClipRect+0x98>
 8017b48:	f9b2 a000 	ldrsh.w	sl, [r2]
 8017b4c:	45d1      	cmp	r9, sl
 8017b4e:	da13      	bge.n	8017b78 <_GetClipRect+0x94>
 8017b50:	809c      	strh	r4, [r3, #4]
 8017b52:	8811      	ldrh	r1, [r2, #0]
 8017b54:	3901      	subs	r1, #1
 8017b56:	8119      	strh	r1, [r3, #8]
 8017b58:	8851      	ldrh	r1, [r2, #2]
 8017b5a:	88d2      	ldrh	r2, [r2, #6]
 8017b5c:	b20c      	sxth	r4, r1
 8017b5e:	45a4      	cmp	ip, r4
 8017b60:	bfb8      	it	lt
 8017b62:	460f      	movlt	r7, r1
 8017b64:	b211      	sxth	r1, r2
 8017b66:	428e      	cmp	r6, r1
 8017b68:	bfc8      	it	gt
 8017b6a:	4615      	movgt	r5, r2
 8017b6c:	2202      	movs	r2, #2
 8017b6e:	80df      	strh	r7, [r3, #6]
 8017b70:	815d      	strh	r5, [r3, #10]
 8017b72:	615a      	str	r2, [r3, #20]
 8017b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b78:	2002      	movs	r0, #2
 8017b7a:	6158      	str	r0, [r3, #20]
 8017b7c:	6958      	ldr	r0, [r3, #20]
 8017b7e:	2802      	cmp	r0, #2
 8017b80:	d117      	bne.n	8017bb2 <_GetClipRect+0xce>
 8017b82:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8017b86:	4580      	cmp	r8, r0
 8017b88:	dd11      	ble.n	8017bae <_GetClipRect+0xca>
 8017b8a:	8119      	strh	r1, [r3, #8]
 8017b8c:	8891      	ldrh	r1, [r2, #4]
 8017b8e:	3101      	adds	r1, #1
 8017b90:	8099      	strh	r1, [r3, #4]
 8017b92:	8851      	ldrh	r1, [r2, #2]
 8017b94:	88d2      	ldrh	r2, [r2, #6]
 8017b96:	b208      	sxth	r0, r1
 8017b98:	4584      	cmp	ip, r0
 8017b9a:	bfb8      	it	lt
 8017b9c:	460f      	movlt	r7, r1
 8017b9e:	b211      	sxth	r1, r2
 8017ba0:	428e      	cmp	r6, r1
 8017ba2:	bfc8      	it	gt
 8017ba4:	4615      	movgt	r5, r2
 8017ba6:	80df      	strh	r7, [r3, #6]
 8017ba8:	815d      	strh	r5, [r3, #10]
 8017baa:	2203      	movs	r2, #3
 8017bac:	e00e      	b.n	8017bcc <_GetClipRect+0xe8>
 8017bae:	2003      	movs	r0, #3
 8017bb0:	6158      	str	r0, [r3, #20]
 8017bb2:	6958      	ldr	r0, [r3, #20]
 8017bb4:	2803      	cmp	r0, #3
 8017bb6:	d10f      	bne.n	8017bd8 <_GetClipRect+0xf4>
 8017bb8:	88d2      	ldrh	r2, [r2, #6]
 8017bba:	b210      	sxth	r0, r2
 8017bbc:	4286      	cmp	r6, r0
 8017bbe:	dd09      	ble.n	8017bd4 <_GetClipRect+0xf0>
 8017bc0:	3201      	adds	r2, #1
 8017bc2:	80da      	strh	r2, [r3, #6]
 8017bc4:	815d      	strh	r5, [r3, #10]
 8017bc6:	809c      	strh	r4, [r3, #4]
 8017bc8:	8119      	strh	r1, [r3, #8]
 8017bca:	2204      	movs	r2, #4
 8017bcc:	615a      	str	r2, [r3, #20]
 8017bce:	2001      	movs	r0, #1
 8017bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bd4:	2204      	movs	r2, #4
 8017bd6:	615a      	str	r2, [r3, #20]
 8017bd8:	2000      	movs	r0, #0
 8017bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017bde <_GetClipParam>:
 8017bde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017be2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8017be4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017be6:	f9b6 8002 	ldrsh.w	r8, [r6, #2]
 8017bea:	60a1      	str	r1, [r4, #8]
 8017bec:	eb01 0903 	add.w	r9, r1, r3
 8017bf0:	ebc1 0108 	rsb	r1, r1, r8
 8017bf4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8017bf8:	9d07      	ldr	r5, [sp, #28]
 8017bfa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017bfc:	6060      	str	r0, [r4, #4]
 8017bfe:	2900      	cmp	r1, #0
 8017c00:	60e2      	str	r2, [r4, #12]
 8017c02:	6123      	str	r3, [r4, #16]
 8017c04:	f8c4 c014 	str.w	ip, [r4, #20]
 8017c08:	f109 39ff 	add.w	r9, r9, #4294967295
 8017c0c:	6021      	str	r1, [r4, #0]
 8017c0e:	dd0c      	ble.n	8017c2a <_GetClipParam+0x4c>
 8017c10:	1a5b      	subs	r3, r3, r1
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	6123      	str	r3, [r4, #16]
 8017c16:	dc02      	bgt.n	8017c1e <_GetClipParam+0x40>
 8017c18:	2001      	movs	r0, #1
 8017c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c1e:	9b08      	ldr	r3, [sp, #32]
 8017c20:	f8c4 8008 	str.w	r8, [r4, #8]
 8017c24:	fb03 c101 	mla	r1, r3, r1, ip
 8017c28:	6161      	str	r1, [r4, #20]
 8017c2a:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017c2e:	ebc3 0309 	rsb	r3, r3, r9
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	6023      	str	r3, [r4, #0]
 8017c36:	dc0a      	bgt.n	8017c4e <_GetClipParam+0x70>
 8017c38:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8017c3c:	1883      	adds	r3, r0, r2
 8017c3e:	3b01      	subs	r3, #1
 8017c40:	1a5b      	subs	r3, r3, r1
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	6023      	str	r3, [r4, #0]
 8017c46:	dd08      	ble.n	8017c5a <_GetClipParam+0x7c>
 8017c48:	1ad2      	subs	r2, r2, r3
 8017c4a:	60e2      	str	r2, [r4, #12]
 8017c4c:	e005      	b.n	8017c5a <_GetClipParam+0x7c>
 8017c4e:	6921      	ldr	r1, [r4, #16]
 8017c50:	1acb      	subs	r3, r1, r3
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	6123      	str	r3, [r4, #16]
 8017c56:	dcef      	bgt.n	8017c38 <_GetClipParam+0x5a>
 8017c58:	e7de      	b.n	8017c18 <_GetClipParam+0x3a>
 8017c5a:	f9b6 2000 	ldrsh.w	r2, [r6]
 8017c5e:	6027      	str	r7, [r4, #0]
 8017c60:	4290      	cmp	r0, r2
 8017c62:	da43      	bge.n	8017cec <_GetClipParam+0x10e>
 8017c64:	68e6      	ldr	r6, [r4, #12]
 8017c66:	1a13      	subs	r3, r2, r0
 8017c68:	443e      	add	r6, r7
 8017c6a:	1af6      	subs	r6, r6, r3
 8017c6c:	2d08      	cmp	r5, #8
 8017c6e:	6023      	str	r3, [r4, #0]
 8017c70:	60e6      	str	r6, [r4, #12]
 8017c72:	d031      	beq.n	8017cd8 <_GetClipParam+0xfa>
 8017c74:	dc10      	bgt.n	8017c98 <_GetClipParam+0xba>
 8017c76:	2d02      	cmp	r5, #2
 8017c78:	d018      	beq.n	8017cac <_GetClipParam+0xce>
 8017c7a:	2d04      	cmp	r5, #4
 8017c7c:	d021      	beq.n	8017cc2 <_GetClipParam+0xe4>
 8017c7e:	2d01      	cmp	r5, #1
 8017c80:	d134      	bne.n	8017cec <_GetClipParam+0x10e>
 8017c82:	6962      	ldr	r2, [r4, #20]
 8017c84:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8017c88:	6162      	str	r2, [r4, #20]
 8017c8a:	f023 0207 	bic.w	r2, r3, #7
 8017c8e:	4410      	add	r0, r2
 8017c90:	6060      	str	r0, [r4, #4]
 8017c92:	f003 0307 	and.w	r3, r3, #7
 8017c96:	e028      	b.n	8017cea <_GetClipParam+0x10c>
 8017c98:	2d18      	cmp	r5, #24
 8017c9a:	d020      	beq.n	8017cde <_GetClipParam+0x100>
 8017c9c:	2d20      	cmp	r5, #32
 8017c9e:	d01e      	beq.n	8017cde <_GetClipParam+0x100>
 8017ca0:	2d10      	cmp	r5, #16
 8017ca2:	d123      	bne.n	8017cec <_GetClipParam+0x10e>
 8017ca4:	6960      	ldr	r0, [r4, #20]
 8017ca6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017caa:	e01b      	b.n	8017ce4 <_GetClipParam+0x106>
 8017cac:	6962      	ldr	r2, [r4, #20]
 8017cae:	eb02 0293 	add.w	r2, r2, r3, lsr #2
 8017cb2:	6162      	str	r2, [r4, #20]
 8017cb4:	f023 0203 	bic.w	r2, r3, #3
 8017cb8:	4410      	add	r0, r2
 8017cba:	6060      	str	r0, [r4, #4]
 8017cbc:	f003 0303 	and.w	r3, r3, #3
 8017cc0:	e013      	b.n	8017cea <_GetClipParam+0x10c>
 8017cc2:	6962      	ldr	r2, [r4, #20]
 8017cc4:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8017cc8:	6162      	str	r2, [r4, #20]
 8017cca:	f023 0201 	bic.w	r2, r3, #1
 8017cce:	4410      	add	r0, r2
 8017cd0:	6060      	str	r0, [r4, #4]
 8017cd2:	f003 0301 	and.w	r3, r3, #1
 8017cd6:	e008      	b.n	8017cea <_GetClipParam+0x10c>
 8017cd8:	6960      	ldr	r0, [r4, #20]
 8017cda:	4403      	add	r3, r0
 8017cdc:	e002      	b.n	8017ce4 <_GetClipParam+0x106>
 8017cde:	6960      	ldr	r0, [r4, #20]
 8017ce0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8017ce4:	6163      	str	r3, [r4, #20]
 8017ce6:	6062      	str	r2, [r4, #4]
 8017ce8:	2300      	movs	r3, #0
 8017cea:	6023      	str	r3, [r4, #0]
 8017cec:	e894 000c 	ldmia.w	r4, {r2, r3}
 8017cf0:	4413      	add	r3, r2
 8017cf2:	68e2      	ldr	r2, [r4, #12]
 8017cf4:	441a      	add	r2, r3
 8017cf6:	428a      	cmp	r2, r1
 8017cf8:	dd02      	ble.n	8017d00 <_GetClipParam+0x122>
 8017cfa:	1acb      	subs	r3, r1, r3
 8017cfc:	3301      	adds	r3, #1
 8017cfe:	60e3      	str	r3, [r4, #12]
 8017d00:	68e0      	ldr	r0, [r4, #12]
 8017d02:	2800      	cmp	r0, #0
 8017d04:	bfcc      	ite	gt
 8017d06:	2000      	movgt	r0, #0
 8017d08:	2001      	movle	r0, #1
 8017d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017d0e <_GetDevData>:
 8017d0e:	2000      	movs	r0, #0
 8017d10:	4770      	bx	lr

08017d12 <_SetOrg>:
 8017d12:	6800      	ldr	r0, [r0, #0]
 8017d14:	b508      	push	{r3, lr}
 8017d16:	b110      	cbz	r0, 8017d1e <_SetOrg+0xc>
 8017d18:	68c3      	ldr	r3, [r0, #12]
 8017d1a:	6a1b      	ldr	r3, [r3, #32]
 8017d1c:	4798      	blx	r3
 8017d1e:	bd08      	pop	{r3, pc}

08017d20 <_GetDevFunc>:
 8017d20:	b507      	push	{r0, r1, r2, lr}
 8017d22:	6803      	ldr	r3, [r0, #0]
 8017d24:	9301      	str	r3, [sp, #4]
 8017d26:	b90b      	cbnz	r3, 8017d2c <_GetDevFunc+0xc>
 8017d28:	2000      	movs	r0, #0
 8017d2a:	e007      	b.n	8017d3c <_GetDevFunc+0x1c>
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	9301      	str	r3, [sp, #4]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d0f9      	beq.n	8017d28 <_GetDevFunc+0x8>
 8017d34:	68db      	ldr	r3, [r3, #12]
 8017d36:	a801      	add	r0, sp, #4
 8017d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d3a:	4798      	blx	r3
 8017d3c:	b003      	add	sp, #12
 8017d3e:	f85d fb04 	ldr.w	pc, [sp], #4

08017d42 <_GetDevProp>:
 8017d42:	6800      	ldr	r0, [r0, #0]
 8017d44:	b508      	push	{r3, lr}
 8017d46:	b110      	cbz	r0, 8017d4e <_GetDevProp+0xc>
 8017d48:	68c3      	ldr	r3, [r0, #12]
 8017d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d4c:	4798      	blx	r3
 8017d4e:	bd08      	pop	{r3, pc}

08017d50 <_GetRect>:
 8017d50:	6800      	ldr	r0, [r0, #0]
 8017d52:	b508      	push	{r3, lr}
 8017d54:	b110      	cbz	r0, 8017d5c <_GetRect+0xc>
 8017d56:	68c3      	ldr	r3, [r0, #12]
 8017d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d5a:	4798      	blx	r3
 8017d5c:	bd08      	pop	{r3, pc}

08017d5e <_PixelExists>:
 8017d5e:	b538      	push	{r3, r4, r5, lr}
 8017d60:	460d      	mov	r5, r1
 8017d62:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8017d66:	6953      	ldr	r3, [r2, #20]
 8017d68:	4288      	cmp	r0, r1
 8017d6a:	4614      	mov	r4, r2
 8017d6c:	db17      	blt.n	8017d9e <_PixelExists+0x40>
 8017d6e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8017d72:	4295      	cmp	r5, r2
 8017d74:	db13      	blt.n	8017d9e <_PixelExists+0x40>
 8017d76:	1a41      	subs	r1, r0, r1
 8017d78:	8818      	ldrh	r0, [r3, #0]
 8017d7a:	4281      	cmp	r1, r0
 8017d7c:	da0f      	bge.n	8017d9e <_PixelExists+0x40>
 8017d7e:	8858      	ldrh	r0, [r3, #2]
 8017d80:	1aaa      	subs	r2, r5, r2
 8017d82:	4282      	cmp	r2, r0
 8017d84:	da0b      	bge.n	8017d9e <_PixelExists+0x40>
 8017d86:	4618      	mov	r0, r3
 8017d88:	f001 fc6f 	bl	801966a <GUI_GetBitmapPixelIndex>
 8017d8c:	68e3      	ldr	r3, [r4, #12]
 8017d8e:	b10b      	cbz	r3, 8017d94 <_PixelExists+0x36>
 8017d90:	3000      	adds	r0, #0
 8017d92:	e001      	b.n	8017d98 <_PixelExists+0x3a>
 8017d94:	0e00      	lsrs	r0, r0, #24
 8017d96:	38ff      	subs	r0, #255	; 0xff
 8017d98:	bf18      	it	ne
 8017d9a:	2001      	movne	r0, #1
 8017d9c:	bd38      	pop	{r3, r4, r5, pc}
 8017d9e:	2000      	movs	r0, #0
 8017da0:	bd38      	pop	{r3, r4, r5, pc}

08017da2 <_GetPixelIndex>:
 8017da2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017da6:	4606      	mov	r6, r0
 8017da8:	6880      	ldr	r0, [r0, #8]
 8017daa:	460d      	mov	r5, r1
 8017dac:	4614      	mov	r4, r2
 8017dae:	f7fb fda5 	bl	80138fc <GUI_ALLOC_LockH>
 8017db2:	4621      	mov	r1, r4
 8017db4:	4602      	mov	r2, r0
 8017db6:	9001      	str	r0, [sp, #4]
 8017db8:	f8b0 8008 	ldrh.w	r8, [r0, #8]
 8017dbc:	8887      	ldrh	r7, [r0, #4]
 8017dbe:	6836      	ldr	r6, [r6, #0]
 8017dc0:	4628      	mov	r0, r5
 8017dc2:	f7ff ffcc 	bl	8017d5e <_PixelExists>
 8017dc6:	b198      	cbz	r0, 8017df0 <_GetPixelIndex+0x4e>
 8017dc8:	9b01      	ldr	r3, [sp, #4]
 8017dca:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8017dce:	f103 0220 	add.w	r2, r3, #32
 8017dd2:	fa0f f888 	sxth.w	r8, r8
 8017dd6:	b23f      	sxth	r7, r7
 8017dd8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017ddc:	ebc7 0708 	rsb	r7, r7, r8
 8017de0:	1a64      	subs	r4, r4, r1
 8017de2:	fb07 4404 	mla	r4, r7, r4, r4
 8017de6:	1aed      	subs	r5, r5, r3
 8017de8:	442c      	add	r4, r5
 8017dea:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8017dee:	e006      	b.n	8017dfe <_GetPixelIndex+0x5c>
 8017df0:	68f3      	ldr	r3, [r6, #12]
 8017df2:	4622      	mov	r2, r4
 8017df4:	695b      	ldr	r3, [r3, #20]
 8017df6:	4630      	mov	r0, r6
 8017df8:	4629      	mov	r1, r5
 8017dfa:	4798      	blx	r3
 8017dfc:	4604      	mov	r4, r0
 8017dfe:	a801      	add	r0, sp, #4
 8017e00:	f7fb fd8a 	bl	8013918 <GUI_ALLOC_UnlockH>
 8017e04:	4620      	mov	r0, r4
 8017e06:	b002      	add	sp, #8
 8017e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017e0c <_XorPixel>:
 8017e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e10:	4606      	mov	r6, r0
 8017e12:	6880      	ldr	r0, [r0, #8]
 8017e14:	460d      	mov	r5, r1
 8017e16:	4614      	mov	r4, r2
 8017e18:	f7fb fd70 	bl	80138fc <GUI_ALLOC_LockH>
 8017e1c:	4621      	mov	r1, r4
 8017e1e:	4602      	mov	r2, r0
 8017e20:	9001      	str	r0, [sp, #4]
 8017e22:	f8b0 8008 	ldrh.w	r8, [r0, #8]
 8017e26:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 8017e2a:	6836      	ldr	r6, [r6, #0]
 8017e2c:	4628      	mov	r0, r5
 8017e2e:	f7ff ff96 	bl	8017d5e <_PixelExists>
 8017e32:	2800      	cmp	r0, #0
 8017e34:	d04f      	beq.n	8017ed6 <_XorPixel+0xca>
 8017e36:	9b01      	ldr	r3, [sp, #4]
 8017e38:	fa0f f888 	sxth.w	r8, r8
 8017e3c:	fa0f f989 	sxth.w	r9, r9
 8017e40:	ebc9 0908 	rsb	r9, r9, r8
 8017e44:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8017e48:	f103 0720 	add.w	r7, r3, #32
 8017e4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017e50:	ebc8 0804 	rsb	r8, r8, r4
 8017e54:	1aeb      	subs	r3, r5, r3
 8017e56:	fb09 8808 	mla	r8, r9, r8, r8
 8017e5a:	4498      	add	r8, r3
 8017e5c:	6933      	ldr	r3, [r6, #16]
 8017e5e:	689b      	ldr	r3, [r3, #8]
 8017e60:	4798      	blx	r3
 8017e62:	f857 3028 	ldr.w	r3, [r7, r8, lsl #2]
 8017e66:	4058      	eors	r0, r3
 8017e68:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 8017e6c:	9b01      	ldr	r3, [sp, #4]
 8017e6e:	68da      	ldr	r2, [r3, #12]
 8017e70:	2a00      	cmp	r2, #0
 8017e72:	d136      	bne.n	8017ee2 <_XorPixel+0xd6>
 8017e74:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8017e78:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8017e7c:	6958      	ldr	r0, [r3, #20]
 8017e7e:	1a69      	subs	r1, r5, r1
 8017e80:	1aa2      	subs	r2, r4, r2
 8017e82:	f001 fbf2 	bl	801966a <GUI_GetBitmapPixelIndex>
 8017e86:	ea5f 6b10 	movs.w	fp, r0, lsr #24
 8017e8a:	4681      	mov	r9, r0
 8017e8c:	d029      	beq.n	8017ee2 <_XorPixel+0xd6>
 8017e8e:	9b01      	ldr	r3, [sp, #4]
 8017e90:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8017ef0 <_XorPixel+0xe4>
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	f857 0028 	ldr.w	r0, [r7, r8, lsl #2]
 8017e9a:	699b      	ldr	r3, [r3, #24]
 8017e9c:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8017ea0:	691b      	ldr	r3, [r3, #16]
 8017ea2:	685b      	ldr	r3, [r3, #4]
 8017ea4:	4798      	blx	r3
 8017ea6:	ea6f 020b 	mvn.w	r2, fp
 8017eaa:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
 8017eae:	b2d2      	uxtb	r2, r2
 8017eb0:	4648      	mov	r0, r9
 8017eb2:	f7f8 ff71 	bl	8010d98 <GUI__MixColors>
 8017eb6:	9b01      	ldr	r3, [sp, #4]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	699b      	ldr	r3, [r3, #24]
 8017ebc:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8017ec0:	691b      	ldr	r3, [r3, #16]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	4798      	blx	r3
 8017ec6:	68f2      	ldr	r2, [r6, #12]
 8017ec8:	4603      	mov	r3, r0
 8017eca:	6997      	ldr	r7, [r2, #24]
 8017ecc:	4630      	mov	r0, r6
 8017ece:	4629      	mov	r1, r5
 8017ed0:	4622      	mov	r2, r4
 8017ed2:	47b8      	blx	r7
 8017ed4:	e005      	b.n	8017ee2 <_XorPixel+0xd6>
 8017ed6:	68f3      	ldr	r3, [r6, #12]
 8017ed8:	4630      	mov	r0, r6
 8017eda:	69db      	ldr	r3, [r3, #28]
 8017edc:	4629      	mov	r1, r5
 8017ede:	4622      	mov	r2, r4
 8017ee0:	4798      	blx	r3
 8017ee2:	a801      	add	r0, sp, #4
 8017ee4:	f7fb fd18 	bl	8013918 <GUI_ALLOC_UnlockH>
 8017ee8:	b003      	add	sp, #12
 8017eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eee:	bf00      	nop
 8017ef0:	2001d5dc 	.word	0x2001d5dc

08017ef4 <_SetPixelIndex>:
 8017ef4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017ef8:	4606      	mov	r6, r0
 8017efa:	6880      	ldr	r0, [r0, #8]
 8017efc:	460d      	mov	r5, r1
 8017efe:	4614      	mov	r4, r2
 8017f00:	461f      	mov	r7, r3
 8017f02:	f7fb fcfb 	bl	80138fc <GUI_ALLOC_LockH>
 8017f06:	4621      	mov	r1, r4
 8017f08:	4602      	mov	r2, r0
 8017f0a:	9001      	str	r0, [sp, #4]
 8017f0c:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 8017f10:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8017f14:	6836      	ldr	r6, [r6, #0]
 8017f16:	4628      	mov	r0, r5
 8017f18:	f7ff ff21 	bl	8017d5e <_PixelExists>
 8017f1c:	2800      	cmp	r0, #0
 8017f1e:	d042      	beq.n	8017fa6 <_SetPixelIndex+0xb2>
 8017f20:	9a01      	ldr	r2, [sp, #4]
 8017f22:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8017f26:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8017f2a:	fa0f f989 	sxth.w	r9, r9
 8017f2e:	fa0f f888 	sxth.w	r8, r8
 8017f32:	ebc8 0809 	rsb	r8, r8, r9
 8017f36:	1ae3      	subs	r3, r4, r3
 8017f38:	fb08 3303 	mla	r3, r8, r3, r3
 8017f3c:	1a28      	subs	r0, r5, r0
 8017f3e:	4403      	add	r3, r0
 8017f40:	f102 0120 	add.w	r1, r2, #32
 8017f44:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 8017f48:	68d3      	ldr	r3, [r2, #12]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d133      	bne.n	8017fb6 <_SetPixelIndex+0xc2>
 8017f4e:	6813      	ldr	r3, [r2, #0]
 8017f50:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8017fc4 <_SetPixelIndex+0xd0>
 8017f54:	699b      	ldr	r3, [r3, #24]
 8017f56:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8017f5a:	691b      	ldr	r3, [r3, #16]
 8017f5c:	4638      	mov	r0, r7
 8017f5e:	685b      	ldr	r3, [r3, #4]
 8017f60:	4798      	blx	r3
 8017f62:	9b01      	ldr	r3, [sp, #4]
 8017f64:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8017f68:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8017f6c:	4607      	mov	r7, r0
 8017f6e:	1aa2      	subs	r2, r4, r2
 8017f70:	6958      	ldr	r0, [r3, #20]
 8017f72:	1a69      	subs	r1, r5, r1
 8017f74:	f001 fb79 	bl	801966a <GUI_GetBitmapPixelIndex>
 8017f78:	0e02      	lsrs	r2, r0, #24
 8017f7a:	d01c      	beq.n	8017fb6 <_SetPixelIndex+0xc2>
 8017f7c:	43d2      	mvns	r2, r2
 8017f7e:	4639      	mov	r1, r7
 8017f80:	b2d2      	uxtb	r2, r2
 8017f82:	f7f8 ff09 	bl	8010d98 <GUI__MixColors>
 8017f86:	9b01      	ldr	r3, [sp, #4]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	699b      	ldr	r3, [r3, #24]
 8017f8c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8017f90:	691b      	ldr	r3, [r3, #16]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	4798      	blx	r3
 8017f96:	68f2      	ldr	r2, [r6, #12]
 8017f98:	4603      	mov	r3, r0
 8017f9a:	6997      	ldr	r7, [r2, #24]
 8017f9c:	4630      	mov	r0, r6
 8017f9e:	4629      	mov	r1, r5
 8017fa0:	4622      	mov	r2, r4
 8017fa2:	47b8      	blx	r7
 8017fa4:	e007      	b.n	8017fb6 <_SetPixelIndex+0xc2>
 8017fa6:	68f3      	ldr	r3, [r6, #12]
 8017fa8:	4630      	mov	r0, r6
 8017faa:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8017fae:	4629      	mov	r1, r5
 8017fb0:	4622      	mov	r2, r4
 8017fb2:	463b      	mov	r3, r7
 8017fb4:	47e0      	blx	ip
 8017fb6:	a801      	add	r0, sp, #4
 8017fb8:	f7fb fcae 	bl	8013918 <GUI_ALLOC_UnlockH>
 8017fbc:	b003      	add	sp, #12
 8017fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fc2:	bf00      	nop
 8017fc4:	2001d5dc 	.word	0x2001d5dc

08017fc8 <_FillRect>:
 8017fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fcc:	4604      	mov	r4, r0
 8017fce:	b08d      	sub	sp, #52	; 0x34
 8017fd0:	4688      	mov	r8, r1
 8017fd2:	4616      	mov	r6, r2
 8017fd4:	2100      	movs	r1, #0
 8017fd6:	2218      	movs	r2, #24
 8017fd8:	a806      	add	r0, sp, #24
 8017fda:	461d      	mov	r5, r3
 8017fdc:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8017fe0:	f002 fc1e 	bl	801a820 <memset>
 8017fe4:	68a0      	ldr	r0, [r4, #8]
 8017fe6:	f7fb fc89 	bl	80138fc <GUI_ALLOC_LockH>
 8017fea:	f8b0 b008 	ldrh.w	fp, [r0, #8]
 8017fee:	f8b0 a004 	ldrh.w	sl, [r0, #4]
 8017ff2:	9003      	str	r0, [sp, #12]
 8017ff4:	1d01      	adds	r1, r0, #4
 8017ff6:	6947      	ldr	r7, [r0, #20]
 8017ff8:	9106      	str	r1, [sp, #24]
 8017ffa:	a809      	add	r0, sp, #36	; 0x24
 8017ffc:	6824      	ldr	r4, [r4, #0]
 8017ffe:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
 8018002:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8018006:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 801800a:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801800e:	f7f9 ffc1 	bl	8011f94 <GUI_RectsIntersect>
 8018012:	2800      	cmp	r0, #0
 8018014:	f000 80bc 	beq.w	8018190 <_FillRect+0x1c8>
 8018018:	a806      	add	r0, sp, #24
 801801a:	f7ff fd63 	bl	8017ae4 <_GetClipRect>
 801801e:	b168      	cbz	r0, 801803c <_FillRect+0x74>
 8018020:	68e0      	ldr	r0, [r4, #12]
 8018022:	f9bd 5022 	ldrsh.w	r5, [sp, #34]	; 0x22
 8018026:	9500      	str	r5, [sp, #0]
 8018028:	6905      	ldr	r5, [r0, #16]
 801802a:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 801802e:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8018032:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018036:	4620      	mov	r0, r4
 8018038:	47a8      	blx	r5
 801803a:	e7ed      	b.n	8018018 <_FillRect+0x50>
 801803c:	9a06      	ldr	r2, [sp, #24]
 801803e:	6810      	ldr	r0, [r2, #0]
 8018040:	6851      	ldr	r1, [r2, #4]
 8018042:	ab04      	add	r3, sp, #16
 8018044:	c303      	stmia	r3!, {r0, r1}
 8018046:	a804      	add	r0, sp, #16
 8018048:	a909      	add	r1, sp, #36	; 0x24
 801804a:	f7f9 ffa3 	bl	8011f94 <GUI_RectsIntersect>
 801804e:	2800      	cmp	r0, #0
 8018050:	f000 80a7 	beq.w	80181a2 <_FillRect+0x1da>
 8018054:	a909      	add	r1, sp, #36	; 0x24
 8018056:	a804      	add	r0, sp, #16
 8018058:	f7f8 fe80 	bl	8010d5c <GUI__IntersectRect>
 801805c:	4a54      	ldr	r2, [pc, #336]	; (80181b0 <_FillRect+0x1e8>)
 801805e:	6813      	ldr	r3, [r2, #0]
 8018060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018062:	f8d3 8000 	ldr.w	r8, [r3]
 8018066:	9b03      	ldr	r3, [sp, #12]
 8018068:	fa0f fb8b 	sxth.w	fp, fp
 801806c:	fa0f fa8a 	sxth.w	sl, sl
 8018070:	68d9      	ldr	r1, [r3, #12]
 8018072:	ebca 0a0b 	rsb	sl, sl, fp
 8018076:	f10a 0a01 	add.w	sl, sl, #1
 801807a:	4691      	mov	r9, r2
 801807c:	b3a1      	cbz	r1, 80180e8 <_FillRect+0x120>
 801807e:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 8018082:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018086:	429d      	cmp	r5, r3
 8018088:	f300 808b 	bgt.w	80181a2 <_FillRect+0x1da>
 801808c:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8018090:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018094:	429e      	cmp	r6, r3
 8018096:	dc25      	bgt.n	80180e4 <_FillRect+0x11c>
 8018098:	9b03      	ldr	r3, [sp, #12]
 801809a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801809e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80180a2:	4638      	mov	r0, r7
 80180a4:	1a71      	subs	r1, r6, r1
 80180a6:	1aaa      	subs	r2, r5, r2
 80180a8:	f001 fadf 	bl	801966a <GUI_GetBitmapPixelIndex>
 80180ac:	b168      	cbz	r0, 80180ca <_FillRect+0x102>
 80180ae:	9b03      	ldr	r3, [sp, #12]
 80180b0:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 80180b4:	f103 0220 	add.w	r2, r3, #32
 80180b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80180bc:	1a69      	subs	r1, r5, r1
 80180be:	1af3      	subs	r3, r6, r3
 80180c0:	fb01 330a 	mla	r3, r1, sl, r3
 80180c4:	f842 8023 	str.w	r8, [r2, r3, lsl #2]
 80180c8:	e00a      	b.n	80180e0 <_FillRect+0x118>
 80180ca:	f8d9 2000 	ldr.w	r2, [r9]
 80180ce:	68e1      	ldr	r1, [r4, #12]
 80180d0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80180d2:	f8d1 c018 	ldr.w	ip, [r1, #24]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	4620      	mov	r0, r4
 80180da:	4631      	mov	r1, r6
 80180dc:	462a      	mov	r2, r5
 80180de:	47e0      	blx	ip
 80180e0:	3601      	adds	r6, #1
 80180e2:	e7d5      	b.n	8018090 <_FillRect+0xc8>
 80180e4:	3501      	adds	r5, #1
 80180e6:	e7cc      	b.n	8018082 <_FillRect+0xba>
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	4e32      	ldr	r6, [pc, #200]	; (80181b4 <_FillRect+0x1ec>)
 80180ec:	699b      	ldr	r3, [r3, #24]
 80180ee:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80180f2:	691b      	ldr	r3, [r3, #16]
 80180f4:	4640      	mov	r0, r8
 80180f6:	685b      	ldr	r3, [r3, #4]
 80180f8:	4798      	blx	r3
 80180fa:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 80180fe:	4681      	mov	r9, r0
 8018100:	46b3      	mov	fp, r6
 8018102:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018106:	429d      	cmp	r5, r3
 8018108:	dc4b      	bgt.n	80181a2 <_FillRect+0x1da>
 801810a:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 801810e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018112:	429e      	cmp	r6, r3
 8018114:	dc3a      	bgt.n	801818c <_FillRect+0x1c4>
 8018116:	9b03      	ldr	r3, [sp, #12]
 8018118:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801811c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8018120:	4638      	mov	r0, r7
 8018122:	1aaa      	subs	r2, r5, r2
 8018124:	1a71      	subs	r1, r6, r1
 8018126:	f001 faa0 	bl	801966a <GUI_GetBitmapPixelIndex>
 801812a:	0e02      	lsrs	r2, r0, #24
 801812c:	2aff      	cmp	r2, #255	; 0xff
 801812e:	d023      	beq.n	8018178 <_FillRect+0x1b0>
 8018130:	9b03      	ldr	r3, [sp, #12]
 8018132:	f9b3 e006 	ldrsh.w	lr, [r3, #6]
 8018136:	f103 0120 	add.w	r1, r3, #32
 801813a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801813e:	ebce 0e05 	rsb	lr, lr, r5
 8018142:	1af3      	subs	r3, r6, r3
 8018144:	fb0e 330a 	mla	r3, lr, sl, r3
 8018148:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
 801814c:	b1e2      	cbz	r2, 8018188 <_FillRect+0x1c0>
 801814e:	43d2      	mvns	r2, r2
 8018150:	4649      	mov	r1, r9
 8018152:	b2d2      	uxtb	r2, r2
 8018154:	f7f8 fe20 	bl	8010d98 <GUI__MixColors>
 8018158:	9b03      	ldr	r3, [sp, #12]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	699b      	ldr	r3, [r3, #24]
 801815e:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8018162:	691b      	ldr	r3, [r3, #16]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	4798      	blx	r3
 8018168:	68e2      	ldr	r2, [r4, #12]
 801816a:	4603      	mov	r3, r0
 801816c:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8018170:	4620      	mov	r0, r4
 8018172:	4631      	mov	r1, r6
 8018174:	462a      	mov	r2, r5
 8018176:	e006      	b.n	8018186 <_FillRect+0x1be>
 8018178:	68e3      	ldr	r3, [r4, #12]
 801817a:	4620      	mov	r0, r4
 801817c:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8018180:	4631      	mov	r1, r6
 8018182:	462a      	mov	r2, r5
 8018184:	4643      	mov	r3, r8
 8018186:	47e0      	blx	ip
 8018188:	3601      	adds	r6, #1
 801818a:	e7c0      	b.n	801810e <_FillRect+0x146>
 801818c:	3501      	adds	r5, #1
 801818e:	e7b8      	b.n	8018102 <_FillRect+0x13a>
 8018190:	68e3      	ldr	r3, [r4, #12]
 8018192:	f8cd 9000 	str.w	r9, [sp]
 8018196:	691f      	ldr	r7, [r3, #16]
 8018198:	4620      	mov	r0, r4
 801819a:	4641      	mov	r1, r8
 801819c:	4632      	mov	r2, r6
 801819e:	462b      	mov	r3, r5
 80181a0:	47b8      	blx	r7
 80181a2:	a803      	add	r0, sp, #12
 80181a4:	f7fb fbb8 	bl	8013918 <GUI_ALLOC_UnlockH>
 80181a8:	b00d      	add	sp, #52	; 0x34
 80181aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181ae:	bf00      	nop
 80181b0:	20000110 	.word	0x20000110
 80181b4:	2001d5dc 	.word	0x2001d5dc

080181b8 <_DrawVLine>:
 80181b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181bc:	4604      	mov	r4, r0
 80181be:	b08b      	sub	sp, #44	; 0x2c
 80181c0:	460d      	mov	r5, r1
 80181c2:	4692      	mov	sl, r2
 80181c4:	2100      	movs	r1, #0
 80181c6:	2218      	movs	r2, #24
 80181c8:	a804      	add	r0, sp, #16
 80181ca:	461e      	mov	r6, r3
 80181cc:	f002 fb28 	bl	801a820 <memset>
 80181d0:	68a0      	ldr	r0, [r4, #8]
 80181d2:	f7fb fb93 	bl	80138fc <GUI_ALLOC_LockH>
 80181d6:	b2ab      	uxth	r3, r5
 80181d8:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 80181dc:	8887      	ldrh	r7, [r0, #4]
 80181de:	9001      	str	r0, [sp, #4]
 80181e0:	1d01      	adds	r1, r0, #4
 80181e2:	f8d0 8014 	ldr.w	r8, [r0, #20]
 80181e6:	9104      	str	r1, [sp, #16]
 80181e8:	a807      	add	r0, sp, #28
 80181ea:	6824      	ldr	r4, [r4, #0]
 80181ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80181f0:	f8ad a01e 	strh.w	sl, [sp, #30]
 80181f4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80181f8:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 80181fc:	f7f9 feca 	bl	8011f94 <GUI_RectsIntersect>
 8018200:	2800      	cmp	r0, #0
 8018202:	f000 80a2 	beq.w	801834a <_DrawVLine+0x192>
 8018206:	a804      	add	r0, sp, #16
 8018208:	f7ff fc6c 	bl	8017ae4 <_GetClipRect>
 801820c:	b150      	cbz	r0, 8018224 <_DrawVLine+0x6c>
 801820e:	68e3      	ldr	r3, [r4, #12]
 8018210:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8018214:	68de      	ldr	r6, [r3, #12]
 8018216:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 801821a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801821e:	4620      	mov	r0, r4
 8018220:	47b0      	blx	r6
 8018222:	e7f0      	b.n	8018206 <_DrawVLine+0x4e>
 8018224:	9a04      	ldr	r2, [sp, #16]
 8018226:	6810      	ldr	r0, [r2, #0]
 8018228:	6851      	ldr	r1, [r2, #4]
 801822a:	ab02      	add	r3, sp, #8
 801822c:	c303      	stmia	r3!, {r0, r1}
 801822e:	a802      	add	r0, sp, #8
 8018230:	a907      	add	r1, sp, #28
 8018232:	f7f9 feaf 	bl	8011f94 <GUI_RectsIntersect>
 8018236:	2800      	cmp	r0, #0
 8018238:	f000 808e 	beq.w	8018358 <_DrawVLine+0x1a0>
 801823c:	a802      	add	r0, sp, #8
 801823e:	a907      	add	r1, sp, #28
 8018240:	f7f8 fd8c 	bl	8010d5c <GUI__IntersectRect>
 8018244:	4b47      	ldr	r3, [pc, #284]	; (8018364 <_DrawVLine+0x1ac>)
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801824a:	b23f      	sxth	r7, r7
 801824c:	fa0f f989 	sxth.w	r9, r9
 8018250:	ebc7 0909 	rsb	r9, r7, r9
 8018254:	681f      	ldr	r7, [r3, #0]
 8018256:	9b01      	ldr	r3, [sp, #4]
 8018258:	68da      	ldr	r2, [r3, #12]
 801825a:	f109 0901 	add.w	r9, r9, #1
 801825e:	b342      	cbz	r2, 80182b2 <_DrawVLine+0xfa>
 8018260:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 8018264:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018268:	429e      	cmp	r6, r3
 801826a:	dc75      	bgt.n	8018358 <_DrawVLine+0x1a0>
 801826c:	9b01      	ldr	r3, [sp, #4]
 801826e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8018272:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8018276:	4640      	mov	r0, r8
 8018278:	1a69      	subs	r1, r5, r1
 801827a:	1ab2      	subs	r2, r6, r2
 801827c:	f001 f9f5 	bl	801966a <GUI_GetBitmapPixelIndex>
 8018280:	b168      	cbz	r0, 801829e <_DrawVLine+0xe6>
 8018282:	9b01      	ldr	r3, [sp, #4]
 8018284:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8018288:	f103 0220 	add.w	r2, r3, #32
 801828c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018290:	1a71      	subs	r1, r6, r1
 8018292:	1aeb      	subs	r3, r5, r3
 8018294:	fb01 3309 	mla	r3, r1, r9, r3
 8018298:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
 801829c:	e007      	b.n	80182ae <_DrawVLine+0xf6>
 801829e:	68e3      	ldr	r3, [r4, #12]
 80182a0:	4620      	mov	r0, r4
 80182a2:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80182a6:	4629      	mov	r1, r5
 80182a8:	4632      	mov	r2, r6
 80182aa:	463b      	mov	r3, r7
 80182ac:	47e0      	blx	ip
 80182ae:	3601      	adds	r6, #1
 80182b0:	e7d8      	b.n	8018264 <_DrawVLine+0xac>
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8018368 <_DrawVLine+0x1b0>
 80182b8:	699b      	ldr	r3, [r3, #24]
 80182ba:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 80182be:	691b      	ldr	r3, [r3, #16]
 80182c0:	4638      	mov	r0, r7
 80182c2:	685b      	ldr	r3, [r3, #4]
 80182c4:	4798      	blx	r3
 80182c6:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 80182ca:	4682      	mov	sl, r0
 80182cc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80182d0:	429e      	cmp	r6, r3
 80182d2:	dc41      	bgt.n	8018358 <_DrawVLine+0x1a0>
 80182d4:	9b01      	ldr	r3, [sp, #4]
 80182d6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80182da:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80182de:	4640      	mov	r0, r8
 80182e0:	1ab2      	subs	r2, r6, r2
 80182e2:	1a69      	subs	r1, r5, r1
 80182e4:	f001 f9c1 	bl	801966a <GUI_GetBitmapPixelIndex>
 80182e8:	0e02      	lsrs	r2, r0, #24
 80182ea:	2aff      	cmp	r2, #255	; 0xff
 80182ec:	d023      	beq.n	8018336 <_DrawVLine+0x17e>
 80182ee:	9b01      	ldr	r3, [sp, #4]
 80182f0:	f9b3 e006 	ldrsh.w	lr, [r3, #6]
 80182f4:	f103 0120 	add.w	r1, r3, #32
 80182f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80182fc:	ebce 0e06 	rsb	lr, lr, r6
 8018300:	1aeb      	subs	r3, r5, r3
 8018302:	fb0e 3309 	mla	r3, lr, r9, r3
 8018306:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 801830a:	b1e2      	cbz	r2, 8018346 <_DrawVLine+0x18e>
 801830c:	43d2      	mvns	r2, r2
 801830e:	4651      	mov	r1, sl
 8018310:	b2d2      	uxtb	r2, r2
 8018312:	f7f8 fd41 	bl	8010d98 <GUI__MixColors>
 8018316:	9b01      	ldr	r3, [sp, #4]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	699b      	ldr	r3, [r3, #24]
 801831c:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8018320:	691b      	ldr	r3, [r3, #16]
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	4798      	blx	r3
 8018326:	68e2      	ldr	r2, [r4, #12]
 8018328:	4603      	mov	r3, r0
 801832a:	f8d2 c018 	ldr.w	ip, [r2, #24]
 801832e:	4620      	mov	r0, r4
 8018330:	4629      	mov	r1, r5
 8018332:	4632      	mov	r2, r6
 8018334:	e006      	b.n	8018344 <_DrawVLine+0x18c>
 8018336:	68e3      	ldr	r3, [r4, #12]
 8018338:	4620      	mov	r0, r4
 801833a:	f8d3 c018 	ldr.w	ip, [r3, #24]
 801833e:	4629      	mov	r1, r5
 8018340:	4632      	mov	r2, r6
 8018342:	463b      	mov	r3, r7
 8018344:	47e0      	blx	ip
 8018346:	3601      	adds	r6, #1
 8018348:	e7c0      	b.n	80182cc <_DrawVLine+0x114>
 801834a:	68e3      	ldr	r3, [r4, #12]
 801834c:	4620      	mov	r0, r4
 801834e:	68df      	ldr	r7, [r3, #12]
 8018350:	4629      	mov	r1, r5
 8018352:	4652      	mov	r2, sl
 8018354:	4633      	mov	r3, r6
 8018356:	47b8      	blx	r7
 8018358:	a801      	add	r0, sp, #4
 801835a:	f7fb fadd 	bl	8013918 <GUI_ALLOC_UnlockH>
 801835e:	b00b      	add	sp, #44	; 0x2c
 8018360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018364:	20000110 	.word	0x20000110
 8018368:	2001d5dc 	.word	0x2001d5dc

0801836c <_DrawHLine>:
 801836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018370:	4604      	mov	r4, r0
 8018372:	b08b      	sub	sp, #44	; 0x2c
 8018374:	468a      	mov	sl, r1
 8018376:	4615      	mov	r5, r2
 8018378:	2100      	movs	r1, #0
 801837a:	2218      	movs	r2, #24
 801837c:	a804      	add	r0, sp, #16
 801837e:	461e      	mov	r6, r3
 8018380:	f002 fa4e 	bl	801a820 <memset>
 8018384:	68a0      	ldr	r0, [r4, #8]
 8018386:	f7fb fab9 	bl	80138fc <GUI_ALLOC_LockH>
 801838a:	b2ab      	uxth	r3, r5
 801838c:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 8018390:	8887      	ldrh	r7, [r0, #4]
 8018392:	9001      	str	r0, [sp, #4]
 8018394:	1d01      	adds	r1, r0, #4
 8018396:	f8d0 8014 	ldr.w	r8, [r0, #20]
 801839a:	9104      	str	r1, [sp, #16]
 801839c:	a807      	add	r0, sp, #28
 801839e:	6824      	ldr	r4, [r4, #0]
 80183a0:	f8ad a01c 	strh.w	sl, [sp, #28]
 80183a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80183a8:	f8ad 6020 	strh.w	r6, [sp, #32]
 80183ac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80183b0:	f7f9 fdf0 	bl	8011f94 <GUI_RectsIntersect>
 80183b4:	2800      	cmp	r0, #0
 80183b6:	f000 80ab 	beq.w	8018510 <_DrawHLine+0x1a4>
 80183ba:	a804      	add	r0, sp, #16
 80183bc:	f7ff fb92 	bl	8017ae4 <_GetClipRect>
 80183c0:	b150      	cbz	r0, 80183d8 <_DrawHLine+0x6c>
 80183c2:	68e3      	ldr	r3, [r4, #12]
 80183c4:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 80183c8:	689e      	ldr	r6, [r3, #8]
 80183ca:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80183ce:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80183d2:	4620      	mov	r0, r4
 80183d4:	47b0      	blx	r6
 80183d6:	e7f0      	b.n	80183ba <_DrawHLine+0x4e>
 80183d8:	9a04      	ldr	r2, [sp, #16]
 80183da:	6810      	ldr	r0, [r2, #0]
 80183dc:	6851      	ldr	r1, [r2, #4]
 80183de:	ab02      	add	r3, sp, #8
 80183e0:	c303      	stmia	r3!, {r0, r1}
 80183e2:	a802      	add	r0, sp, #8
 80183e4:	a907      	add	r1, sp, #28
 80183e6:	f7f9 fdd5 	bl	8011f94 <GUI_RectsIntersect>
 80183ea:	2800      	cmp	r0, #0
 80183ec:	f000 8097 	beq.w	801851e <_DrawHLine+0x1b2>
 80183f0:	a907      	add	r1, sp, #28
 80183f2:	a802      	add	r0, sp, #8
 80183f4:	f7f8 fcb2 	bl	8010d5c <GUI__IntersectRect>
 80183f8:	4a4c      	ldr	r2, [pc, #304]	; (801852c <_DrawHLine+0x1c0>)
 80183fa:	6813      	ldr	r3, [r2, #0]
 80183fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80183fe:	b23f      	sxth	r7, r7
 8018400:	fa0f f989 	sxth.w	r9, r9
 8018404:	ebc7 0909 	rsb	r9, r7, r9
 8018408:	681f      	ldr	r7, [r3, #0]
 801840a:	9b01      	ldr	r3, [sp, #4]
 801840c:	68d9      	ldr	r1, [r3, #12]
 801840e:	f109 0901 	add.w	r9, r9, #1
 8018412:	4692      	mov	sl, r2
 8018414:	b381      	cbz	r1, 8018478 <_DrawHLine+0x10c>
 8018416:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
 801841a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801841e:	429e      	cmp	r6, r3
 8018420:	dc7d      	bgt.n	801851e <_DrawHLine+0x1b2>
 8018422:	9b01      	ldr	r3, [sp, #4]
 8018424:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8018428:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801842c:	4640      	mov	r0, r8
 801842e:	1a71      	subs	r1, r6, r1
 8018430:	1aaa      	subs	r2, r5, r2
 8018432:	f001 f91a 	bl	801966a <GUI_GetBitmapPixelIndex>
 8018436:	b198      	cbz	r0, 8018460 <_DrawHLine+0xf4>
 8018438:	9b01      	ldr	r3, [sp, #4]
 801843a:	f9bd 700a 	ldrsh.w	r7, [sp, #10]
 801843e:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8018442:	f8da 2000 	ldr.w	r2, [sl]
 8018446:	1a3f      	subs	r7, r7, r0
 8018448:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 801844c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801844e:	1a30      	subs	r0, r6, r0
 8018450:	f103 0120 	add.w	r1, r3, #32
 8018454:	fb07 0309 	mla	r3, r7, r9, r0
 8018458:	6812      	ldr	r2, [r2, #0]
 801845a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801845e:	e009      	b.n	8018474 <_DrawHLine+0x108>
 8018460:	f8da 2000 	ldr.w	r2, [sl]
 8018464:	68e1      	ldr	r1, [r4, #12]
 8018466:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8018468:	698f      	ldr	r7, [r1, #24]
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	4620      	mov	r0, r4
 801846e:	4631      	mov	r1, r6
 8018470:	462a      	mov	r2, r5
 8018472:	47b8      	blx	r7
 8018474:	3601      	adds	r6, #1
 8018476:	e7d0      	b.n	801841a <_DrawHLine+0xae>
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8018530 <_DrawHLine+0x1c4>
 801847e:	699b      	ldr	r3, [r3, #24]
 8018480:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8018484:	691b      	ldr	r3, [r3, #16]
 8018486:	4638      	mov	r0, r7
 8018488:	685b      	ldr	r3, [r3, #4]
 801848a:	4798      	blx	r3
 801848c:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
 8018490:	4682      	mov	sl, r0
 8018492:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018496:	429e      	cmp	r6, r3
 8018498:	dc41      	bgt.n	801851e <_DrawHLine+0x1b2>
 801849a:	9b01      	ldr	r3, [sp, #4]
 801849c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80184a0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80184a4:	4640      	mov	r0, r8
 80184a6:	1aaa      	subs	r2, r5, r2
 80184a8:	1a71      	subs	r1, r6, r1
 80184aa:	f001 f8de 	bl	801966a <GUI_GetBitmapPixelIndex>
 80184ae:	0e02      	lsrs	r2, r0, #24
 80184b0:	2aff      	cmp	r2, #255	; 0xff
 80184b2:	d023      	beq.n	80184fc <_DrawHLine+0x190>
 80184b4:	9b01      	ldr	r3, [sp, #4]
 80184b6:	f9b3 e006 	ldrsh.w	lr, [r3, #6]
 80184ba:	f103 0120 	add.w	r1, r3, #32
 80184be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80184c2:	ebce 0e05 	rsb	lr, lr, r5
 80184c6:	1af3      	subs	r3, r6, r3
 80184c8:	fb0e 3309 	mla	r3, lr, r9, r3
 80184cc:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 80184d0:	b1e2      	cbz	r2, 801850c <_DrawHLine+0x1a0>
 80184d2:	43d2      	mvns	r2, r2
 80184d4:	4651      	mov	r1, sl
 80184d6:	b2d2      	uxtb	r2, r2
 80184d8:	f7f8 fc5e 	bl	8010d98 <GUI__MixColors>
 80184dc:	9b01      	ldr	r3, [sp, #4]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	699b      	ldr	r3, [r3, #24]
 80184e2:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 80184e6:	691b      	ldr	r3, [r3, #16]
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	4798      	blx	r3
 80184ec:	68e2      	ldr	r2, [r4, #12]
 80184ee:	4603      	mov	r3, r0
 80184f0:	f8d2 c018 	ldr.w	ip, [r2, #24]
 80184f4:	4620      	mov	r0, r4
 80184f6:	4631      	mov	r1, r6
 80184f8:	462a      	mov	r2, r5
 80184fa:	e006      	b.n	801850a <_DrawHLine+0x19e>
 80184fc:	68e3      	ldr	r3, [r4, #12]
 80184fe:	4620      	mov	r0, r4
 8018500:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8018504:	4631      	mov	r1, r6
 8018506:	462a      	mov	r2, r5
 8018508:	463b      	mov	r3, r7
 801850a:	47e0      	blx	ip
 801850c:	3601      	adds	r6, #1
 801850e:	e7c0      	b.n	8018492 <_DrawHLine+0x126>
 8018510:	68e3      	ldr	r3, [r4, #12]
 8018512:	4620      	mov	r0, r4
 8018514:	689f      	ldr	r7, [r3, #8]
 8018516:	4651      	mov	r1, sl
 8018518:	462a      	mov	r2, r5
 801851a:	4633      	mov	r3, r6
 801851c:	47b8      	blx	r7
 801851e:	a801      	add	r0, sp, #4
 8018520:	f7fb f9fa 	bl	8013918 <GUI_ALLOC_UnlockH>
 8018524:	b00b      	add	sp, #44	; 0x2c
 8018526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801852a:	bf00      	nop
 801852c:	20000110 	.word	0x20000110
 8018530:	2001d5dc 	.word	0x2001d5dc

08018534 <_DrawBitmap>:
 8018534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018538:	4604      	mov	r4, r0
 801853a:	b09b      	sub	sp, #108	; 0x6c
 801853c:	4617      	mov	r7, r2
 801853e:	4689      	mov	r9, r1
 8018540:	2218      	movs	r2, #24
 8018542:	2100      	movs	r1, #0
 8018544:	a80e      	add	r0, sp, #56	; 0x38
 8018546:	4698      	mov	r8, r3
 8018548:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
 801854c:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801854e:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8018550:	f002 f966 	bl	801a820 <memset>
 8018554:	68a0      	ldr	r0, [r4, #8]
 8018556:	f7fb f9d1 	bl	80138fc <GUI_ALLOC_LockH>
 801855a:	8883      	ldrh	r3, [r0, #4]
 801855c:	9309      	str	r3, [sp, #36]	; 0x24
 801855e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018560:	8902      	ldrh	r2, [r0, #8]
 8018562:	9208      	str	r2, [sp, #32]
 8018564:	444b      	add	r3, r9
 8018566:	6942      	ldr	r2, [r0, #20]
 8018568:	9207      	str	r2, [sp, #28]
 801856a:	b29b      	uxth	r3, r3
 801856c:	f108 32ff 	add.w	r2, r8, #4294967295
 8018570:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8018574:	4413      	add	r3, r2
 8018576:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 801857a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801857e:	1d01      	adds	r1, r0, #4
 8018580:	900b      	str	r0, [sp, #44]	; 0x2c
 8018582:	443b      	add	r3, r7
 8018584:	a811      	add	r0, sp, #68	; 0x44
 8018586:	910e      	str	r1, [sp, #56]	; 0x38
 8018588:	6824      	ldr	r4, [r4, #0]
 801858a:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
 801858e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8018592:	f7f9 fcff 	bl	8011f94 <GUI_RectsIntersect>
 8018596:	2800      	cmp	r0, #0
 8018598:	f000 81aa 	beq.w	80188f0 <_DrawBitmap+0x3bc>
 801859c:	a80e      	add	r0, sp, #56	; 0x38
 801859e:	f7ff faa1 	bl	8017ae4 <_GetClipRect>
 80185a2:	2800      	cmp	r0, #0
 80185a4:	d024      	beq.n	80185f0 <_DrawBitmap+0xbc>
 80185a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80185a8:	9301      	str	r3, [sp, #4]
 80185aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80185ac:	9303      	str	r3, [sp, #12]
 80185ae:	ab0f      	add	r3, sp, #60	; 0x3c
 80185b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80185b2:	9304      	str	r3, [sp, #16]
 80185b4:	ab14      	add	r3, sp, #80	; 0x50
 80185b6:	9202      	str	r2, [sp, #8]
 80185b8:	9305      	str	r3, [sp, #20]
 80185ba:	9600      	str	r6, [sp, #0]
 80185bc:	4648      	mov	r0, r9
 80185be:	4639      	mov	r1, r7
 80185c0:	4642      	mov	r2, r8
 80185c2:	465b      	mov	r3, fp
 80185c4:	f7ff fb0b 	bl	8017bde <_GetClipParam>
 80185c8:	2800      	cmp	r0, #0
 80185ca:	d1e7      	bne.n	801859c <_DrawBitmap+0x68>
 80185cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80185ce:	68e2      	ldr	r2, [r4, #12]
 80185d0:	9505      	str	r5, [sp, #20]
 80185d2:	e88d 0048 	stmia.w	sp, {r3, r6}
 80185d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80185d8:	9302      	str	r3, [sp, #8]
 80185da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80185dc:	9303      	str	r3, [sp, #12]
 80185de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80185e0:	9304      	str	r3, [sp, #16]
 80185e2:	a915      	add	r1, sp, #84	; 0x54
 80185e4:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80185e8:	4620      	mov	r0, r4
 80185ea:	c90e      	ldmia	r1, {r1, r2, r3}
 80185ec:	47e0      	blx	ip
 80185ee:	e7d5      	b.n	801859c <_DrawBitmap+0x68>
 80185f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80185f2:	6810      	ldr	r0, [r2, #0]
 80185f4:	6851      	ldr	r1, [r2, #4]
 80185f6:	ab0c      	add	r3, sp, #48	; 0x30
 80185f8:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 80185fc:	c303      	stmia	r3!, {r0, r1}
 80185fe:	4650      	mov	r0, sl
 8018600:	a911      	add	r1, sp, #68	; 0x44
 8018602:	f7f9 fcc7 	bl	8011f94 <GUI_RectsIntersect>
 8018606:	2800      	cmp	r0, #0
 8018608:	f000 8183 	beq.w	8018912 <_DrawBitmap+0x3de>
 801860c:	4650      	mov	r0, sl
 801860e:	a911      	add	r1, sp, #68	; 0x44
 8018610:	f7f8 fba4 	bl	8010d5c <GUI__IntersectRect>
 8018614:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8018616:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018618:	9201      	str	r2, [sp, #4]
 801861a:	9302      	str	r3, [sp, #8]
 801861c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801861e:	9203      	str	r2, [sp, #12]
 8018620:	ab14      	add	r3, sp, #80	; 0x50
 8018622:	9305      	str	r3, [sp, #20]
 8018624:	9600      	str	r6, [sp, #0]
 8018626:	f8cd a010 	str.w	sl, [sp, #16]
 801862a:	4648      	mov	r0, r9
 801862c:	4639      	mov	r1, r7
 801862e:	4642      	mov	r2, r8
 8018630:	465b      	mov	r3, fp
 8018632:	f7ff fad4 	bl	8017bde <_GetClipParam>
 8018636:	2800      	cmp	r0, #0
 8018638:	f040 816b 	bne.w	8018912 <_DrawBitmap+0x3de>
 801863c:	9b08      	ldr	r3, [sp, #32]
 801863e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018640:	fa0f fb83 	sxth.w	fp, r3
 8018644:	b213      	sxth	r3, r2
 8018646:	ebc3 0b0b 	rsb	fp, r3, fp
 801864a:	6923      	ldr	r3, [r4, #16]
 801864c:	689b      	ldr	r3, [r3, #8]
 801864e:	4798      	blx	r3
 8018650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018652:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	; 0x32
 8018656:	68db      	ldr	r3, [r3, #12]
 8018658:	f10b 0b01 	add.w	fp, fp, #1
 801865c:	4682      	mov	sl, r0
 801865e:	2b00      	cmp	r3, #0
 8018660:	f000 8092 	beq.w	8018788 <_DrawBitmap+0x254>
 8018664:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8018668:	429f      	cmp	r7, r3
 801866a:	f300 8152 	bgt.w	8018912 <_DrawBitmap+0x3de>
 801866e:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8018672:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8018676:	4598      	cmp	r8, r3
 8018678:	f300 8084 	bgt.w	8018784 <_DrawBitmap+0x250>
 801867c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801867e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8018680:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018682:	1afb      	subs	r3, r7, r3
 8018684:	9300      	str	r3, [sp, #0]
 8018686:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018688:	4630      	mov	r0, r6
 801868a:	ebc3 0308 	rsb	r3, r3, r8
 801868e:	f000 ffaa 	bl	80195e6 <GUI_GetBitmapPixelIndexEx>
 8018692:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018694:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8018698:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801869c:	4603      	mov	r3, r0
 801869e:	ebc1 0108 	rsb	r1, r1, r8
 80186a2:	9807      	ldr	r0, [sp, #28]
 80186a4:	9306      	str	r3, [sp, #24]
 80186a6:	1aba      	subs	r2, r7, r2
 80186a8:	f000 ffdf 	bl	801966a <GUI_GetBitmapPixelIndex>
 80186ac:	f8df e274 	ldr.w	lr, [pc, #628]	; 8018924 <_DrawBitmap+0x3f0>
 80186b0:	9b06      	ldr	r3, [sp, #24]
 80186b2:	b358      	cbz	r0, 801870c <_DrawBitmap+0x1d8>
 80186b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80186b6:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80186ba:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80186be:	f100 0220 	add.w	r2, r0, #32
 80186c2:	f8de 0000 	ldr.w	r0, [lr]
 80186c6:	7c00      	ldrb	r0, [r0, #16]
 80186c8:	ebcc 0c07 	rsb	ip, ip, r7
 80186cc:	ebc1 0108 	rsb	r1, r1, r8
 80186d0:	fb0c 110b 	mla	r1, ip, fp, r1
 80186d4:	f000 0003 	and.w	r0, r0, #3
 80186d8:	b14d      	cbz	r5, 80186ee <_DrawBitmap+0x1ba>
 80186da:	2802      	cmp	r0, #2
 80186dc:	d002      	beq.n	80186e4 <_DrawBitmap+0x1b0>
 80186de:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80186e2:	e006      	b.n	80186f2 <_DrawBitmap+0x1be>
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d04a      	beq.n	801877e <_DrawBitmap+0x24a>
 80186e8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80186ec:	e00b      	b.n	8018706 <_DrawBitmap+0x1d2>
 80186ee:	2802      	cmp	r0, #2
 80186f0:	d004      	beq.n	80186fc <_DrawBitmap+0x1c8>
 80186f2:	2803      	cmp	r0, #3
 80186f4:	d005      	beq.n	8018702 <_DrawBitmap+0x1ce>
 80186f6:	2801      	cmp	r0, #1
 80186f8:	d105      	bne.n	8018706 <_DrawBitmap+0x1d2>
 80186fa:	e002      	b.n	8018702 <_DrawBitmap+0x1ce>
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d03e      	beq.n	801877e <_DrawBitmap+0x24a>
 8018700:	e001      	b.n	8018706 <_DrawBitmap+0x1d2>
 8018702:	ea83 030a 	eor.w	r3, r3, sl
 8018706:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801870a:	e038      	b.n	801877e <_DrawBitmap+0x24a>
 801870c:	f8de 2000 	ldr.w	r2, [lr]
 8018710:	7c12      	ldrb	r2, [r2, #16]
 8018712:	f002 0203 	and.w	r2, r2, #3
 8018716:	b1d5      	cbz	r5, 801874e <_DrawBitmap+0x21a>
 8018718:	2a02      	cmp	r2, #2
 801871a:	d007      	beq.n	801872c <_DrawBitmap+0x1f8>
 801871c:	2a03      	cmp	r2, #3
 801871e:	68e1      	ldr	r1, [r4, #12]
 8018720:	d00e      	beq.n	8018740 <_DrawBitmap+0x20c>
 8018722:	2a01      	cmp	r2, #1
 8018724:	d00c      	beq.n	8018740 <_DrawBitmap+0x20c>
 8018726:	f8d1 c018 	ldr.w	ip, [r1, #24]
 801872a:	e003      	b.n	8018734 <_DrawBitmap+0x200>
 801872c:	b33b      	cbz	r3, 801877e <_DrawBitmap+0x24a>
 801872e:	68e2      	ldr	r2, [r4, #12]
 8018730:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8018734:	4620      	mov	r0, r4
 8018736:	4641      	mov	r1, r8
 8018738:	463a      	mov	r2, r7
 801873a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801873e:	e01d      	b.n	801877c <_DrawBitmap+0x248>
 8018740:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8018744:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8018748:	4620      	mov	r0, r4
 801874a:	4641      	mov	r1, r8
 801874c:	e013      	b.n	8018776 <_DrawBitmap+0x242>
 801874e:	2a02      	cmp	r2, #2
 8018750:	d009      	beq.n	8018766 <_DrawBitmap+0x232>
 8018752:	68e1      	ldr	r1, [r4, #12]
 8018754:	2a03      	cmp	r2, #3
 8018756:	f8d1 c018 	ldr.w	ip, [r1, #24]
 801875a:	4620      	mov	r0, r4
 801875c:	4641      	mov	r1, r8
 801875e:	d00a      	beq.n	8018776 <_DrawBitmap+0x242>
 8018760:	2a01      	cmp	r2, #1
 8018762:	d106      	bne.n	8018772 <_DrawBitmap+0x23e>
 8018764:	e007      	b.n	8018776 <_DrawBitmap+0x242>
 8018766:	b153      	cbz	r3, 801877e <_DrawBitmap+0x24a>
 8018768:	68e2      	ldr	r2, [r4, #12]
 801876a:	f8d2 c018 	ldr.w	ip, [r2, #24]
 801876e:	4620      	mov	r0, r4
 8018770:	4641      	mov	r1, r8
 8018772:	463a      	mov	r2, r7
 8018774:	e002      	b.n	801877c <_DrawBitmap+0x248>
 8018776:	463a      	mov	r2, r7
 8018778:	ea83 030a 	eor.w	r3, r3, sl
 801877c:	47e0      	blx	ip
 801877e:	f108 0801 	add.w	r8, r8, #1
 8018782:	e776      	b.n	8018672 <_DrawBitmap+0x13e>
 8018784:	3701      	adds	r7, #1
 8018786:	e76d      	b.n	8018664 <_DrawBitmap+0x130>
 8018788:	4699      	mov	r9, r3
 801878a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801878e:	429f      	cmp	r7, r3
 8018790:	f300 80bf 	bgt.w	8018912 <_DrawBitmap+0x3de>
 8018794:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8018798:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801879c:	4598      	cmp	r8, r3
 801879e:	f300 80a5 	bgt.w	80188ec <_DrawBitmap+0x3b8>
 80187a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80187a4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80187a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80187a8:	1afb      	subs	r3, r7, r3
 80187aa:	9300      	str	r3, [sp, #0]
 80187ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80187ae:	4630      	mov	r0, r6
 80187b0:	ebc3 0308 	rsb	r3, r3, r8
 80187b4:	f000 ff17 	bl	80195e6 <GUI_GetBitmapPixelIndexEx>
 80187b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80187ba:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80187be:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80187c2:	4603      	mov	r3, r0
 80187c4:	1aba      	subs	r2, r7, r2
 80187c6:	9807      	ldr	r0, [sp, #28]
 80187c8:	9306      	str	r3, [sp, #24]
 80187ca:	ebc1 0108 	rsb	r1, r1, r8
 80187ce:	f000 ff4c 	bl	801966a <GUI_GetBitmapPixelIndex>
 80187d2:	0e02      	lsrs	r2, r0, #24
 80187d4:	2aff      	cmp	r2, #255	; 0xff
 80187d6:	9b06      	ldr	r3, [sp, #24]
 80187d8:	d04c      	beq.n	8018874 <_DrawBitmap+0x340>
 80187da:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80187de:	f9bc e006 	ldrsh.w	lr, [ip, #6]
 80187e2:	f10c 0120 	add.w	r1, ip, #32
 80187e6:	f9bc c004 	ldrsh.w	ip, [ip, #4]
 80187ea:	ebce 0e07 	rsb	lr, lr, r7
 80187ee:	ebcc 0c08 	rsb	ip, ip, r8
 80187f2:	fb0e ce0b 	mla	lr, lr, fp, ip
 80187f6:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8018924 <_DrawBitmap+0x3f0>
 80187fa:	f8dc c000 	ldr.w	ip, [ip]
 80187fe:	f89c c010 	ldrb.w	ip, [ip, #16]
 8018802:	f00c 0c03 	and.w	ip, ip, #3
 8018806:	b185      	cbz	r5, 801882a <_DrawBitmap+0x2f6>
 8018808:	f1bc 0f02 	cmp.w	ip, #2
 801880c:	d006      	beq.n	801881c <_DrawBitmap+0x2e8>
 801880e:	f1bc 0f03 	cmp.w	ip, #3
 8018812:	d007      	beq.n	8018824 <_DrawBitmap+0x2f0>
 8018814:	f1bc 0f01 	cmp.w	ip, #1
 8018818:	d101      	bne.n	801881e <_DrawBitmap+0x2ea>
 801881a:	e003      	b.n	8018824 <_DrawBitmap+0x2f0>
 801881c:	b1c3      	cbz	r3, 8018850 <_DrawBitmap+0x31c>
 801881e:	f855 9023 	ldr.w	r9, [r5, r3, lsl #2]
 8018822:	e013      	b.n	801884c <_DrawBitmap+0x318>
 8018824:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8018828:	e00e      	b.n	8018848 <_DrawBitmap+0x314>
 801882a:	f1bc 0f02 	cmp.w	ip, #2
 801882e:	d006      	beq.n	801883e <_DrawBitmap+0x30a>
 8018830:	f1bc 0f03 	cmp.w	ip, #3
 8018834:	d008      	beq.n	8018848 <_DrawBitmap+0x314>
 8018836:	f1bc 0f01 	cmp.w	ip, #1
 801883a:	d101      	bne.n	8018840 <_DrawBitmap+0x30c>
 801883c:	e004      	b.n	8018848 <_DrawBitmap+0x314>
 801883e:	b13b      	cbz	r3, 8018850 <_DrawBitmap+0x31c>
 8018840:	f841 302e 	str.w	r3, [r1, lr, lsl #2]
 8018844:	4699      	mov	r9, r3
 8018846:	e003      	b.n	8018850 <_DrawBitmap+0x31c>
 8018848:	ea83 090a 	eor.w	r9, r3, sl
 801884c:	f841 902e 	str.w	r9, [r1, lr, lsl #2]
 8018850:	2a00      	cmp	r2, #0
 8018852:	d048      	beq.n	80188e6 <_DrawBitmap+0x3b2>
 8018854:	43d2      	mvns	r2, r2
 8018856:	4649      	mov	r1, r9
 8018858:	b2d2      	uxtb	r2, r2
 801885a:	f7f8 fa9d 	bl	8010d98 <GUI__MixColors>
 801885e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	699a      	ldr	r2, [r3, #24]
 8018864:	4b2e      	ldr	r3, [pc, #184]	; (8018920 <_DrawBitmap+0x3ec>)
 8018866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801886a:	691b      	ldr	r3, [r3, #16]
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	4798      	blx	r3
 8018870:	4603      	mov	r3, r0
 8018872:	e02d      	b.n	80188d0 <_DrawBitmap+0x39c>
 8018874:	4a2b      	ldr	r2, [pc, #172]	; (8018924 <_DrawBitmap+0x3f0>)
 8018876:	6812      	ldr	r2, [r2, #0]
 8018878:	7c12      	ldrb	r2, [r2, #16]
 801887a:	f002 0203 	and.w	r2, r2, #3
 801887e:	b1d5      	cbz	r5, 80188b6 <_DrawBitmap+0x382>
 8018880:	2a02      	cmp	r2, #2
 8018882:	d007      	beq.n	8018894 <_DrawBitmap+0x360>
 8018884:	2a03      	cmp	r2, #3
 8018886:	68e1      	ldr	r1, [r4, #12]
 8018888:	d00e      	beq.n	80188a8 <_DrawBitmap+0x374>
 801888a:	2a01      	cmp	r2, #1
 801888c:	d00c      	beq.n	80188a8 <_DrawBitmap+0x374>
 801888e:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8018892:	e003      	b.n	801889c <_DrawBitmap+0x368>
 8018894:	b33b      	cbz	r3, 80188e6 <_DrawBitmap+0x3b2>
 8018896:	68e2      	ldr	r2, [r4, #12]
 8018898:	f8d2 c018 	ldr.w	ip, [r2, #24]
 801889c:	4620      	mov	r0, r4
 801889e:	4641      	mov	r1, r8
 80188a0:	463a      	mov	r2, r7
 80188a2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80188a6:	e01d      	b.n	80188e4 <_DrawBitmap+0x3b0>
 80188a8:	f8d1 c018 	ldr.w	ip, [r1, #24]
 80188ac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80188b0:	4620      	mov	r0, r4
 80188b2:	4641      	mov	r1, r8
 80188b4:	e013      	b.n	80188de <_DrawBitmap+0x3aa>
 80188b6:	2a02      	cmp	r2, #2
 80188b8:	d009      	beq.n	80188ce <_DrawBitmap+0x39a>
 80188ba:	68e1      	ldr	r1, [r4, #12]
 80188bc:	2a03      	cmp	r2, #3
 80188be:	f8d1 c018 	ldr.w	ip, [r1, #24]
 80188c2:	4620      	mov	r0, r4
 80188c4:	4641      	mov	r1, r8
 80188c6:	d00a      	beq.n	80188de <_DrawBitmap+0x3aa>
 80188c8:	2a01      	cmp	r2, #1
 80188ca:	d106      	bne.n	80188da <_DrawBitmap+0x3a6>
 80188cc:	e007      	b.n	80188de <_DrawBitmap+0x3aa>
 80188ce:	b153      	cbz	r3, 80188e6 <_DrawBitmap+0x3b2>
 80188d0:	68e2      	ldr	r2, [r4, #12]
 80188d2:	f8d2 c018 	ldr.w	ip, [r2, #24]
 80188d6:	4620      	mov	r0, r4
 80188d8:	4641      	mov	r1, r8
 80188da:	463a      	mov	r2, r7
 80188dc:	e002      	b.n	80188e4 <_DrawBitmap+0x3b0>
 80188de:	463a      	mov	r2, r7
 80188e0:	ea83 030a 	eor.w	r3, r3, sl
 80188e4:	47e0      	blx	ip
 80188e6:	f108 0801 	add.w	r8, r8, #1
 80188ea:	e755      	b.n	8018798 <_DrawBitmap+0x264>
 80188ec:	3701      	adds	r7, #1
 80188ee:	e74c      	b.n	801878a <_DrawBitmap+0x256>
 80188f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80188f2:	68e3      	ldr	r3, [r4, #12]
 80188f4:	9202      	str	r2, [sp, #8]
 80188f6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80188f8:	9203      	str	r2, [sp, #12]
 80188fa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80188fc:	9204      	str	r2, [sp, #16]
 80188fe:	f8cd b000 	str.w	fp, [sp]
 8018902:	9601      	str	r6, [sp, #4]
 8018904:	9505      	str	r5, [sp, #20]
 8018906:	685d      	ldr	r5, [r3, #4]
 8018908:	4620      	mov	r0, r4
 801890a:	4649      	mov	r1, r9
 801890c:	463a      	mov	r2, r7
 801890e:	4643      	mov	r3, r8
 8018910:	47a8      	blx	r5
 8018912:	a80b      	add	r0, sp, #44	; 0x2c
 8018914:	f7fb f800 	bl	8013918 <GUI_ALLOC_UnlockH>
 8018918:	b01b      	add	sp, #108	; 0x6c
 801891a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801891e:	bf00      	nop
 8018920:	2001d5dc 	.word	0x2001d5dc
 8018924:	20000110 	.word	0x20000110

08018928 <_Link>:
 8018928:	b513      	push	{r0, r1, r4, lr}
 801892a:	f7fa ffe7 	bl	80138fc <GUI_ALLOC_LockH>
 801892e:	ac02      	add	r4, sp, #8
 8018930:	f844 0d04 	str.w	r0, [r4, #-4]!
 8018934:	6800      	ldr	r0, [r0, #0]
 8018936:	f7fa fa01 	bl	8012d3c <GUI_DEVICE_Link>
 801893a:	4620      	mov	r0, r4
 801893c:	f7fa ffec 	bl	8013918 <GUI_ALLOC_UnlockH>
 8018940:	b002      	add	sp, #8
 8018942:	bd10      	pop	{r4, pc}

08018944 <_CreateBuffer>:
 8018944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018946:	6943      	ldr	r3, [r0, #20]
 8018948:	4605      	mov	r5, r0
 801894a:	8818      	ldrh	r0, [r3, #0]
 801894c:	300d      	adds	r0, #13
 801894e:	0080      	lsls	r0, r0, #2
 8018950:	460e      	mov	r6, r1
 8018952:	f7fb fa27 	bl	8013da4 <GUI_ALLOC_AllocNoInit>
 8018956:	4607      	mov	r7, r0
 8018958:	b908      	cbnz	r0, 801895e <_CreateBuffer+0x1a>
 801895a:	2000      	movs	r0, #0
 801895c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801895e:	f7fa ffcd 	bl	80138fc <GUI_ALLOC_LockH>
 8018962:	682b      	ldr	r3, [r5, #0]
 8018964:	4604      	mov	r4, r0
 8018966:	6998      	ldr	r0, [r3, #24]
 8018968:	f7fa f99a 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 801896c:	2800      	cmp	r0, #0
 801896e:	d0f4      	beq.n	801895a <_CreateBuffer+0x16>
 8018970:	68c3      	ldr	r3, [r0, #12]
 8018972:	2108      	movs	r1, #8
 8018974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018976:	4798      	blx	r3
 8018978:	2802      	cmp	r0, #2
 801897a:	dd0b      	ble.n	8018994 <_CreateBuffer+0x50>
 801897c:	2804      	cmp	r0, #4
 801897e:	dd06      	ble.n	801898e <_CreateBuffer+0x4a>
 8018980:	2808      	cmp	r0, #8
 8018982:	dd06      	ble.n	8018992 <_CreateBuffer+0x4e>
 8018984:	2811      	cmp	r0, #17
 8018986:	bfb4      	ite	lt
 8018988:	2010      	movlt	r0, #16
 801898a:	2020      	movge	r0, #32
 801898c:	e002      	b.n	8018994 <_CreateBuffer+0x50>
 801898e:	2004      	movs	r0, #4
 8018990:	e000      	b.n	8018994 <_CreateBuffer+0x50>
 8018992:	2008      	movs	r0, #8
 8018994:	2808      	cmp	r0, #8
 8018996:	61a0      	str	r0, [r4, #24]
 8018998:	dd04      	ble.n	80189a4 <_CreateBuffer+0x60>
 801899a:	2810      	cmp	r0, #16
 801899c:	bfcc      	ite	gt
 801899e:	2304      	movgt	r3, #4
 80189a0:	2302      	movle	r3, #2
 80189a2:	e000      	b.n	80189a6 <_CreateBuffer+0x62>
 80189a4:	2301      	movs	r3, #1
 80189a6:	696a      	ldr	r2, [r5, #20]
 80189a8:	6123      	str	r3, [r4, #16]
 80189aa:	8812      	ldrh	r2, [r2, #0]
 80189ac:	61e2      	str	r2, [r4, #28]
 80189ae:	4353      	muls	r3, r2
 80189b0:	6163      	str	r3, [r4, #20]
 80189b2:	f7fb f94d 	bl	8013c50 <GUI_ALLOC_GetMaxSize>
 80189b6:	6963      	ldr	r3, [r4, #20]
 80189b8:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 80189bc:	4283      	cmp	r3, r0
 80189be:	f04f 0200 	mov.w	r2, #0
 80189c2:	bfc8      	it	gt
 80189c4:	6160      	strgt	r0, [r4, #20]
 80189c6:	2e01      	cmp	r6, #1
 80189c8:	60e2      	str	r2, [r4, #12]
 80189ca:	bf18      	it	ne
 80189cc:	69e2      	ldrne	r2, [r4, #28]
 80189ce:	60a7      	str	r7, [r4, #8]
 80189d0:	bf18      	it	ne
 80189d2:	f102 4280 	addne.w	r2, r2, #1073741824	; 0x40000000
 80189d6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80189da:	bf18      	it	ne
 80189dc:	f102 32ff 	addne.w	r2, r2, #4294967295
 80189e0:	6023      	str	r3, [r4, #0]
 80189e2:	bf18      	it	ne
 80189e4:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 80189e8:	6063      	str	r3, [r4, #4]
 80189ea:	4620      	mov	r0, r4
 80189ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080189ee <_Unlink>:
 80189ee:	b513      	push	{r0, r1, r4, lr}
 80189f0:	f7fa ff84 	bl	80138fc <GUI_ALLOC_LockH>
 80189f4:	ac02      	add	r4, sp, #8
 80189f6:	f844 0d04 	str.w	r0, [r4, #-4]!
 80189fa:	6800      	ldr	r0, [r0, #0]
 80189fc:	f7fa f988 	bl	8012d10 <GUI_DEVICE_Unlink>
 8018a00:	4620      	mov	r0, r4
 8018a02:	f7fa ff89 	bl	8013918 <GUI_ALLOC_UnlockH>
 8018a06:	b002      	add	sp, #8
 8018a08:	bd10      	pop	{r4, pc}

08018a0a <_GetBkIndex.isra.0>:
 8018a0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a0e:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8018a12:	4540      	cmp	r0, r8
 8018a14:	4606      	mov	r6, r0
 8018a16:	460d      	mov	r5, r1
 8018a18:	4691      	mov	r9, r2
 8018a1a:	461c      	mov	r4, r3
 8018a1c:	da04      	bge.n	8018a28 <_GetBkIndex.isra.0+0x1e>
 8018a1e:	f8d9 0000 	ldr.w	r0, [r9]
 8018a22:	bb28      	cbnz	r0, 8018a70 <_GetBkIndex.isra.0+0x66>
 8018a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018a2c:	4298      	cmp	r0, r3
 8018a2e:	dcf6      	bgt.n	8018a1e <_GetBkIndex.isra.0+0x14>
 8018a30:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 8018a34:	42b9      	cmp	r1, r7
 8018a36:	dbf2      	blt.n	8018a1e <_GetBkIndex.isra.0+0x14>
 8018a38:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018a3c:	4299      	cmp	r1, r3
 8018a3e:	dcee      	bgt.n	8018a1e <_GetBkIndex.isra.0+0x14>
 8018a40:	ebc8 0800 	rsb	r8, r8, r0
 8018a44:	1bcf      	subs	r7, r1, r7
 8018a46:	6960      	ldr	r0, [r4, #20]
 8018a48:	4641      	mov	r1, r8
 8018a4a:	463a      	mov	r2, r7
 8018a4c:	f000 fe0d 	bl	801966a <GUI_GetBitmapPixelIndex>
 8018a50:	2800      	cmp	r0, #0
 8018a52:	d0e4      	beq.n	8018a1e <_GetBkIndex.isra.0+0x14>
 8018a54:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8018a58:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018a5c:	1a8a      	subs	r2, r1, r2
 8018a5e:	fb02 7707 	mla	r7, r2, r7, r7
 8018a62:	f104 0320 	add.w	r3, r4, #32
 8018a66:	44b8      	add	r8, r7
 8018a68:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a70:	68c3      	ldr	r3, [r0, #12]
 8018a72:	4631      	mov	r1, r6
 8018a74:	695b      	ldr	r3, [r3, #20]
 8018a76:	462a      	mov	r2, r5
 8018a78:	4798      	blx	r3
 8018a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018a7e <_GetBkIndexAlpha.isra.2>:
 8018a7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a82:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8018a86:	42b0      	cmp	r0, r6
 8018a88:	4680      	mov	r8, r0
 8018a8a:	460f      	mov	r7, r1
 8018a8c:	4691      	mov	r9, r2
 8018a8e:	461d      	mov	r5, r3
 8018a90:	db14      	blt.n	8018abc <_GetBkIndexAlpha.isra.2+0x3e>
 8018a92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018a96:	4298      	cmp	r0, r3
 8018a98:	dc10      	bgt.n	8018abc <_GetBkIndexAlpha.isra.2+0x3e>
 8018a9a:	f9b5 4006 	ldrsh.w	r4, [r5, #6]
 8018a9e:	42a1      	cmp	r1, r4
 8018aa0:	db0c      	blt.n	8018abc <_GetBkIndexAlpha.isra.2+0x3e>
 8018aa2:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8018aa6:	4299      	cmp	r1, r3
 8018aa8:	dc08      	bgt.n	8018abc <_GetBkIndexAlpha.isra.2+0x3e>
 8018aaa:	1b86      	subs	r6, r0, r6
 8018aac:	6968      	ldr	r0, [r5, #20]
 8018aae:	1b0c      	subs	r4, r1, r4
 8018ab0:	b130      	cbz	r0, 8018ac0 <_GetBkIndexAlpha.isra.2+0x42>
 8018ab2:	4631      	mov	r1, r6
 8018ab4:	4622      	mov	r2, r4
 8018ab6:	f000 fdd8 	bl	801966a <GUI_GetBitmapPixelIndex>
 8018aba:	e003      	b.n	8018ac4 <_GetBkIndexAlpha.isra.2+0x46>
 8018abc:	2400      	movs	r4, #0
 8018abe:	4626      	mov	r6, r4
 8018ac0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8018ac4:	0e00      	lsrs	r0, r0, #24
 8018ac6:	28ff      	cmp	r0, #255	; 0xff
 8018ac8:	d109      	bne.n	8018ade <_GetBkIndexAlpha.isra.2+0x60>
 8018aca:	f8d9 0000 	ldr.w	r0, [r9]
 8018ace:	b190      	cbz	r0, 8018af6 <_GetBkIndexAlpha.isra.2+0x78>
 8018ad0:	68c3      	ldr	r3, [r0, #12]
 8018ad2:	4641      	mov	r1, r8
 8018ad4:	695b      	ldr	r3, [r3, #20]
 8018ad6:	463a      	mov	r2, r7
 8018ad8:	4798      	blx	r3
 8018ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ade:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8018ae2:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018ae6:	1a8a      	subs	r2, r1, r2
 8018ae8:	fb02 4404 	mla	r4, r2, r4, r4
 8018aec:	f105 0320 	add.w	r3, r5, #32
 8018af0:	4426      	add	r6, r4
 8018af2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08018afc <_DoColorConversion.isra.3>:
 8018afc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8018b00:	4681      	mov	r9, r0
 8018b02:	460e      	mov	r6, r1
 8018b04:	f7fa fefa 	bl	80138fc <GUI_ALLOC_LockH>
 8018b08:	ad02      	add	r5, sp, #8
 8018b0a:	68c4      	ldr	r4, [r0, #12]
 8018b0c:	6803      	ldr	r3, [r0, #0]
 8018b0e:	f845 0d08 	str.w	r0, [r5, #-8]!
 8018b12:	4668      	mov	r0, sp
 8018b14:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8018b18:	f7fa fefe 	bl	8013918 <GUI_ALLOC_UnlockH>
 8018b1c:	b114      	cbz	r4, 8018b24 <_DoColorConversion.isra.3+0x28>
 8018b1e:	4620      	mov	r0, r4
 8018b20:	f7fa ff26 	bl	8013970 <GUI_ALLOC_Free>
 8018b24:	6833      	ldr	r3, [r6, #0]
 8018b26:	6818      	ldr	r0, [r3, #0]
 8018b28:	0080      	lsls	r0, r0, #2
 8018b2a:	f7fb f9c7 	bl	8013ebc <GUI_ALLOC_AllocZero>
 8018b2e:	4680      	mov	r8, r0
 8018b30:	b318      	cbz	r0, 8018b7a <_DoColorConversion.isra.3+0x7e>
 8018b32:	f7fa fee3 	bl	80138fc <GUI_ALLOC_LockH>
 8018b36:	2400      	movs	r4, #0
 8018b38:	4607      	mov	r7, r0
 8018b3a:	9001      	str	r0, [sp, #4]
 8018b3c:	6833      	ldr	r3, [r6, #0]
 8018b3e:	681a      	ldr	r2, [r3, #0]
 8018b40:	4294      	cmp	r4, r2
 8018b42:	da0c      	bge.n	8018b5e <_DoColorConversion.isra.3+0x62>
 8018b44:	4a0f      	ldr	r2, [pc, #60]	; (8018b84 <_DoColorConversion.isra.3+0x88>)
 8018b46:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
 8018b4a:	6911      	ldr	r1, [r2, #16]
 8018b4c:	689a      	ldr	r2, [r3, #8]
 8018b4e:	680b      	ldr	r3, [r1, #0]
 8018b50:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8018b54:	4798      	blx	r3
 8018b56:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8018b5a:	3401      	adds	r4, #1
 8018b5c:	e7ee      	b.n	8018b3c <_DoColorConversion.isra.3+0x40>
 8018b5e:	a801      	add	r0, sp, #4
 8018b60:	f7fa feda 	bl	8013918 <GUI_ALLOC_UnlockH>
 8018b64:	4648      	mov	r0, r9
 8018b66:	f7fa fec9 	bl	80138fc <GUI_ALLOC_LockH>
 8018b6a:	9000      	str	r0, [sp, #0]
 8018b6c:	f8c0 800c 	str.w	r8, [r0, #12]
 8018b70:	4668      	mov	r0, sp
 8018b72:	f7fa fed1 	bl	8013918 <GUI_ALLOC_UnlockH>
 8018b76:	2000      	movs	r0, #0
 8018b78:	e000      	b.n	8018b7c <_DoColorConversion.isra.3+0x80>
 8018b7a:	2001      	movs	r0, #1
 8018b7c:	b002      	add	sp, #8
 8018b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b82:	bf00      	nop
 8018b84:	2001d5dc 	.word	0x2001d5dc

08018b88 <_GetDeviceRect>:
 8018b88:	b538      	push	{r3, r4, r5, lr}
 8018b8a:	4a0c      	ldr	r2, [pc, #48]	; (8018bbc <_GetDeviceRect+0x34>)
 8018b8c:	6983      	ldr	r3, [r0, #24]
 8018b8e:	56d2      	ldrsb	r2, [r2, r3]
 8018b90:	2a01      	cmp	r2, #1
 8018b92:	4605      	mov	r5, r0
 8018b94:	460c      	mov	r4, r1
 8018b96:	dd0d      	ble.n	8018bb4 <_GetDeviceRect+0x2c>
 8018b98:	2200      	movs	r2, #0
 8018b9a:	804a      	strh	r2, [r1, #2]
 8018b9c:	800a      	strh	r2, [r1, #0]
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	f7f7 fb4a 	bl	8010238 <LCD_GetXSizeEx>
 8018ba4:	3801      	subs	r0, #1
 8018ba6:	80a0      	strh	r0, [r4, #4]
 8018ba8:	69a8      	ldr	r0, [r5, #24]
 8018baa:	f7f7 fb48 	bl	801023e <LCD_GetYSizeEx>
 8018bae:	3801      	subs	r0, #1
 8018bb0:	80e0      	strh	r0, [r4, #6]
 8018bb2:	bd38      	pop	{r3, r4, r5, pc}
 8018bb4:	68c3      	ldr	r3, [r0, #12]
 8018bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018bb8:	4798      	blx	r3
 8018bba:	bd38      	pop	{r3, r4, r5, pc}
 8018bbc:	2001d5ac 	.word	0x2001d5ac

08018bc0 <_FlushBuffer.isra.5>:
 8018bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bc2:	460c      	mov	r4, r1
 8018bc4:	68c9      	ldr	r1, [r1, #12]
 8018bc6:	b087      	sub	sp, #28
 8018bc8:	2900      	cmp	r1, #0
 8018bca:	d030      	beq.n	8018c2e <_FlushBuffer.isra.5+0x6e>
 8018bcc:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8018bd0:	6822      	ldr	r2, [r4, #0]
 8018bd2:	2b01      	cmp	r3, #1
 8018bd4:	d103      	bne.n	8018bde <_FlushBuffer.isra.5+0x1e>
 8018bd6:	4615      	mov	r5, r2
 8018bd8:	6062      	str	r2, [r4, #4]
 8018bda:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8018bdc:	e009      	b.n	8018bf2 <_FlushBuffer.isra.5+0x32>
 8018bde:	69e3      	ldr	r3, [r4, #28]
 8018be0:	6865      	ldr	r5, [r4, #4]
 8018be2:	6a27      	ldr	r7, [r4, #32]
 8018be4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018be8:	3b01      	subs	r3, #1
 8018bea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018bee:	3504      	adds	r5, #4
 8018bf0:	6063      	str	r3, [r4, #4]
 8018bf2:	6806      	ldr	r6, [r0, #0]
 8018bf4:	b1b6      	cbz	r6, 8018c24 <_FlushBuffer.isra.5+0x64>
 8018bf6:	69a2      	ldr	r2, [r4, #24]
 8018bf8:	4628      	mov	r0, r5
 8018bfa:	f7fe fd92 	bl	8017722 <GUI__CompactPixelIndices>
 8018bfe:	2301      	movs	r3, #1
 8018c00:	68f2      	ldr	r2, [r6, #12]
 8018c02:	9300      	str	r3, [sp, #0]
 8018c04:	69a3      	ldr	r3, [r4, #24]
 8018c06:	9301      	str	r3, [sp, #4]
 8018c08:	9503      	str	r5, [sp, #12]
 8018c0a:	6963      	ldr	r3, [r4, #20]
 8018c0c:	9302      	str	r3, [sp, #8]
 8018c0e:	2500      	movs	r5, #0
 8018c10:	9504      	str	r5, [sp, #16]
 8018c12:	9505      	str	r5, [sp, #20]
 8018c14:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8018c18:	68e3      	ldr	r3, [r4, #12]
 8018c1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018c1c:	4630      	mov	r0, r6
 8018c1e:	4639      	mov	r1, r7
 8018c20:	47e0      	blx	ip
 8018c22:	e000      	b.n	8018c26 <_FlushBuffer.isra.5+0x66>
 8018c24:	2501      	movs	r5, #1
 8018c26:	2300      	movs	r3, #0
 8018c28:	60e3      	str	r3, [r4, #12]
 8018c2a:	b2e8      	uxtb	r0, r5
 8018c2c:	e000      	b.n	8018c30 <_FlushBuffer.isra.5+0x70>
 8018c2e:	4608      	mov	r0, r1
 8018c30:	b007      	add	sp, #28
 8018c32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018c34 <_SetBkIndexBuffered>:
 8018c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c36:	9c06      	ldr	r4, [sp, #24]
 8018c38:	460d      	mov	r5, r1
 8018c3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018c3c:	428d      	cmp	r5, r1
 8018c3e:	4606      	mov	r6, r0
 8018c40:	4617      	mov	r7, r2
 8018c42:	d105      	bne.n	8018c50 <_SetBkIndexBuffered+0x1c>
 8018c44:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8018c48:	6a21      	ldr	r1, [r4, #32]
 8018c4a:	4411      	add	r1, r2
 8018c4c:	4288      	cmp	r0, r1
 8018c4e:	d003      	beq.n	8018c58 <_SetBkIndexBuffered+0x24>
 8018c50:	4618      	mov	r0, r3
 8018c52:	4621      	mov	r1, r4
 8018c54:	f7ff ffb4 	bl	8018bc0 <_FlushBuffer.isra.5>
 8018c58:	6863      	ldr	r3, [r4, #4]
 8018c5a:	601f      	str	r7, [r3, #0]
 8018c5c:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8018c60:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018c64:	6063      	str	r3, [r4, #4]
 8018c66:	68e3      	ldr	r3, [r4, #12]
 8018c68:	b90b      	cbnz	r3, 8018c6e <_SetBkIndexBuffered+0x3a>
 8018c6a:	62a6      	str	r6, [r4, #40]	; 0x28
 8018c6c:	62e5      	str	r5, [r4, #44]	; 0x2c
 8018c6e:	3301      	adds	r3, #1
 8018c70:	60e3      	str	r3, [r4, #12]
 8018c72:	6226      	str	r6, [r4, #32]
 8018c74:	6265      	str	r5, [r4, #36]	; 0x24
 8018c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018c78 <_ReleaseBuffer.isra.6>:
 8018c78:	b513      	push	{r0, r1, r4, lr}
 8018c7a:	9101      	str	r1, [sp, #4]
 8018c7c:	f7ff ffa0 	bl	8018bc0 <_FlushBuffer.isra.5>
 8018c80:	a802      	add	r0, sp, #8
 8018c82:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8018c86:	6894      	ldr	r4, [r2, #8]
 8018c88:	f7fa fe46 	bl	8013918 <GUI_ALLOC_UnlockH>
 8018c8c:	4620      	mov	r0, r4
 8018c8e:	f7fa fe6f 	bl	8013970 <GUI_ALLOC_Free>
 8018c92:	b002      	add	sp, #8
 8018c94:	bd10      	pop	{r4, pc}
	...

08018c98 <_Undraw>:
 8018c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c9c:	b08b      	sub	sp, #44	; 0x2c
 8018c9e:	f7fa fe2d 	bl	80138fc <GUI_ALLOC_LockH>
 8018ca2:	4a38      	ldr	r2, [pc, #224]	; (8018d84 <_Undraw+0xec>)
 8018ca4:	f8d0 8000 	ldr.w	r8, [r0]
 8018ca8:	6813      	ldr	r3, [r2, #0]
 8018caa:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8018cae:	7c5d      	ldrb	r5, [r3, #17]
 8018cb0:	9005      	str	r0, [sp, #20]
 8018cb2:	42ae      	cmp	r6, r5
 8018cb4:	bf18      	it	ne
 8018cb6:	745e      	strbne	r6, [r3, #17]
 8018cb8:	f100 0220 	add.w	r2, r0, #32
 8018cbc:	f8d0 9014 	ldr.w	r9, [r0, #20]
 8018cc0:	9203      	str	r2, [sp, #12]
 8018cc2:	3004      	adds	r0, #4
 8018cc4:	c803      	ldmia	r0, {r0, r1}
 8018cc6:	ac06      	add	r4, sp, #24
 8018cc8:	e884 0003 	stmia.w	r4, {r0, r1}
 8018ccc:	4640      	mov	r0, r8
 8018cce:	a908      	add	r1, sp, #32
 8018cd0:	f7ff ff5a 	bl	8018b88 <_GetDeviceRect>
 8018cd4:	4620      	mov	r0, r4
 8018cd6:	a908      	add	r1, sp, #32
 8018cd8:	f7f8 f840 	bl	8010d5c <GUI__IntersectRect>
 8018cdc:	9805      	ldr	r0, [sp, #20]
 8018cde:	2101      	movs	r1, #1
 8018ce0:	f7ff fe30 	bl	8018944 <_CreateBuffer>
 8018ce4:	4607      	mov	r7, r0
 8018ce6:	2800      	cmp	r0, #0
 8018ce8:	d03a      	beq.n	8018d60 <_Undraw+0xc8>
 8018cea:	f9bd 401a 	ldrsh.w	r4, [sp, #26]
 8018cee:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018cf2:	429c      	cmp	r4, r3
 8018cf4:	9b05      	ldr	r3, [sp, #20]
 8018cf6:	dc2f      	bgt.n	8018d58 <_Undraw+0xc0>
 8018cf8:	f9b3 a006 	ldrsh.w	sl, [r3, #6]
 8018cfc:	f9bd b018 	ldrsh.w	fp, [sp, #24]
 8018d00:	ebca 0a04 	rsb	sl, sl, r4
 8018d04:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018d08:	459b      	cmp	fp, r3
 8018d0a:	dc23      	bgt.n	8018d54 <_Undraw+0xbc>
 8018d0c:	9b05      	ldr	r3, [sp, #20]
 8018d0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018d12:	ebc3 030b 	rsb	r3, r3, fp
 8018d16:	4619      	mov	r1, r3
 8018d18:	4652      	mov	r2, sl
 8018d1a:	4648      	mov	r0, r9
 8018d1c:	9302      	str	r3, [sp, #8]
 8018d1e:	f000 fca4 	bl	801966a <GUI_GetBitmapPixelIndex>
 8018d22:	9a05      	ldr	r2, [sp, #20]
 8018d24:	9b02      	ldr	r3, [sp, #8]
 8018d26:	68d2      	ldr	r2, [r2, #12]
 8018d28:	b10a      	cbz	r2, 8018d2e <_Undraw+0x96>
 8018d2a:	b918      	cbnz	r0, 8018d34 <_Undraw+0x9c>
 8018d2c:	e00f      	b.n	8018d4e <_Undraw+0xb6>
 8018d2e:	0e00      	lsrs	r0, r0, #24
 8018d30:	28ff      	cmp	r0, #255	; 0xff
 8018d32:	d00c      	beq.n	8018d4e <_Undraw+0xb6>
 8018d34:	f8b9 2000 	ldrh.w	r2, [r9]
 8018d38:	9700      	str	r7, [sp, #0]
 8018d3a:	fb02 320a 	mla	r2, r2, sl, r3
 8018d3e:	9b03      	ldr	r3, [sp, #12]
 8018d40:	4658      	mov	r0, fp
 8018d42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018d46:	4621      	mov	r1, r4
 8018d48:	4643      	mov	r3, r8
 8018d4a:	f7ff ff73 	bl	8018c34 <_SetBkIndexBuffered>
 8018d4e:	f10b 0b01 	add.w	fp, fp, #1
 8018d52:	e7d7      	b.n	8018d04 <_Undraw+0x6c>
 8018d54:	3401      	adds	r4, #1
 8018d56:	e7ca      	b.n	8018cee <_Undraw+0x56>
 8018d58:	6818      	ldr	r0, [r3, #0]
 8018d5a:	4639      	mov	r1, r7
 8018d5c:	f7ff ff8c 	bl	8018c78 <_ReleaseBuffer.isra.6>
 8018d60:	9a05      	ldr	r2, [sp, #20]
 8018d62:	6993      	ldr	r3, [r2, #24]
 8018d64:	b113      	cbz	r3, 8018d6c <_Undraw+0xd4>
 8018d66:	69d0      	ldr	r0, [r2, #28]
 8018d68:	2101      	movs	r1, #1
 8018d6a:	4798      	blx	r3
 8018d6c:	a805      	add	r0, sp, #20
 8018d6e:	f7fa fdd3 	bl	8013918 <GUI_ALLOC_UnlockH>
 8018d72:	42ae      	cmp	r6, r5
 8018d74:	d002      	beq.n	8018d7c <_Undraw+0xe4>
 8018d76:	4a03      	ldr	r2, [pc, #12]	; (8018d84 <_Undraw+0xec>)
 8018d78:	6813      	ldr	r3, [r2, #0]
 8018d7a:	745d      	strb	r5, [r3, #17]
 8018d7c:	b00b      	add	sp, #44	; 0x2c
 8018d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d82:	bf00      	nop
 8018d84:	20000110 	.word	0x20000110

08018d88 <_SpriteDraw>:
 8018d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d8c:	b091      	sub	sp, #68	; 0x44
 8018d8e:	f7fa fdb5 	bl	80138fc <GUI_ALLOC_LockH>
 8018d92:	69c3      	ldr	r3, [r0, #28]
 8018d94:	9309      	str	r3, [sp, #36]	; 0x24
 8018d96:	4b75      	ldr	r3, [pc, #468]	; (8018f6c <_SpriteDraw+0x1e4>)
 8018d98:	6805      	ldr	r5, [r0, #0]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	6982      	ldr	r2, [r0, #24]
 8018d9e:	69af      	ldr	r7, [r5, #24]
 8018da0:	9206      	str	r2, [sp, #24]
 8018da2:	7c5a      	ldrb	r2, [r3, #17]
 8018da4:	900b      	str	r0, [sp, #44]	; 0x2c
 8018da6:	4297      	cmp	r7, r2
 8018da8:	bf18      	it	ne
 8018daa:	745f      	strbne	r7, [r3, #17]
 8018dac:	2101      	movs	r1, #1
 8018dae:	4604      	mov	r4, r0
 8018db0:	9204      	str	r2, [sp, #16]
 8018db2:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8018db6:	f7ff fdc5 	bl	8018944 <_CreateBuffer>
 8018dba:	4681      	mov	r9, r0
 8018dbc:	2800      	cmp	r0, #0
 8018dbe:	f000 80c1 	beq.w	8018f44 <_SpriteDraw+0x1bc>
 8018dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018dc4:	2200      	movs	r2, #0
 8018dc6:	615a      	str	r2, [r3, #20]
 8018dc8:	3304      	adds	r3, #4
 8018dca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018dce:	3420      	adds	r4, #32
 8018dd0:	9407      	str	r4, [sp, #28]
 8018dd2:	ac0c      	add	r4, sp, #48	; 0x30
 8018dd4:	e884 0003 	stmia.w	r4, {r0, r1}
 8018dd8:	4628      	mov	r0, r5
 8018dda:	a90e      	add	r1, sp, #56	; 0x38
 8018ddc:	f7ff fed4 	bl	8018b88 <_GetDeviceRect>
 8018de0:	4620      	mov	r0, r4
 8018de2:	a90e      	add	r1, sp, #56	; 0x38
 8018de4:	f7f7 ffba 	bl	8010d5c <GUI__IntersectRect>
 8018de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018dea:	68d8      	ldr	r0, [r3, #12]
 8018dec:	2800      	cmp	r0, #0
 8018dee:	d046      	beq.n	8018e7e <_SpriteDraw+0xf6>
 8018df0:	f7fa fd84 	bl	80138fc <GUI_ALLOC_LockH>
 8018df4:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8018df8:	900e      	str	r0, [sp, #56]	; 0x38
 8018dfa:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8018dfe:	429c      	cmp	r4, r3
 8018e00:	dc39      	bgt.n	8018e76 <_SpriteDraw+0xee>
 8018e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e04:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
 8018e08:	f9b3 a006 	ldrsh.w	sl, [r3, #6]
 8018e0c:	ebca 0a04 	rsb	sl, sl, r4
 8018e10:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8018e14:	429e      	cmp	r6, r3
 8018e16:	dc2c      	bgt.n	8018e72 <_SpriteDraw+0xea>
 8018e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e1a:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 8018e1e:	ebcc 0c06 	rsb	ip, ip, r6
 8018e22:	4661      	mov	r1, ip
 8018e24:	4640      	mov	r0, r8
 8018e26:	4652      	mov	r2, sl
 8018e28:	f8cd c00c 	str.w	ip, [sp, #12]
 8018e2c:	f000 fc1d 	bl	801966a <GUI_GetBitmapPixelIndex>
 8018e30:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8018e34:	4683      	mov	fp, r0
 8018e36:	b1d0      	cbz	r0, 8018e6e <_SpriteDraw+0xe6>
 8018e38:	f8b8 3000 	ldrh.w	r3, [r8]
 8018e3c:	4621      	mov	r1, r4
 8018e3e:	fb03 cc0a 	mla	ip, r3, sl, ip
 8018e42:	462a      	mov	r2, r5
 8018e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e46:	f8cd c00c 	str.w	ip, [sp, #12]
 8018e4a:	4630      	mov	r0, r6
 8018e4c:	f7ff fddd 	bl	8018a0a <_GetBkIndex.isra.0>
 8018e50:	9b07      	ldr	r3, [sp, #28]
 8018e52:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8018e56:	f843 002c 	str.w	r0, [r3, ip, lsl #2]
 8018e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e5c:	f8cd 9000 	str.w	r9, [sp]
 8018e60:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
 8018e64:	4630      	mov	r0, r6
 8018e66:	4621      	mov	r1, r4
 8018e68:	462b      	mov	r3, r5
 8018e6a:	f7ff fee3 	bl	8018c34 <_SetBkIndexBuffered>
 8018e6e:	3601      	adds	r6, #1
 8018e70:	e7ce      	b.n	8018e10 <_SpriteDraw+0x88>
 8018e72:	3401      	adds	r4, #1
 8018e74:	e7c1      	b.n	8018dfa <_SpriteDraw+0x72>
 8018e76:	a80e      	add	r0, sp, #56	; 0x38
 8018e78:	f7fa fd4e 	bl	8013918 <GUI_ALLOC_UnlockH>
 8018e7c:	e05d      	b.n	8018f3a <_SpriteDraw+0x1b2>
 8018e7e:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8018e82:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8018e86:	429c      	cmp	r4, r3
 8018e88:	dc57      	bgt.n	8018f3a <_SpriteDraw+0x1b2>
 8018e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e8c:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
 8018e90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018e94:	1ae3      	subs	r3, r4, r3
 8018e96:	9308      	str	r3, [sp, #32]
 8018e98:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8018e9c:	429e      	cmp	r6, r3
 8018e9e:	dc4a      	bgt.n	8018f36 <_SpriteDraw+0x1ae>
 8018ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ea2:	9a08      	ldr	r2, [sp, #32]
 8018ea4:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 8018ea8:	ebcc 0a06 	rsb	sl, ip, r6
 8018eac:	4640      	mov	r0, r8
 8018eae:	4651      	mov	r1, sl
 8018eb0:	f000 fbdb 	bl	801966a <GUI_GetBitmapPixelIndex>
 8018eb4:	0e02      	lsrs	r2, r0, #24
 8018eb6:	2aff      	cmp	r2, #255	; 0xff
 8018eb8:	4683      	mov	fp, r0
 8018eba:	9205      	str	r2, [sp, #20]
 8018ebc:	d039      	beq.n	8018f32 <_SpriteDraw+0x1aa>
 8018ebe:	f8b8 3000 	ldrh.w	r3, [r8]
 8018ec2:	9a08      	ldr	r2, [sp, #32]
 8018ec4:	4630      	mov	r0, r6
 8018ec6:	fb03 aa02 	mla	sl, r3, r2, sl
 8018eca:	4621      	mov	r1, r4
 8018ecc:	462a      	mov	r2, r5
 8018ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ed0:	f7ff fdd5 	bl	8018a7e <_GetBkIndexAlpha.isra.2>
 8018ed4:	9b07      	ldr	r3, [sp, #28]
 8018ed6:	9a05      	ldr	r2, [sp, #20]
 8018ed8:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8018edc:	f8df a090 	ldr.w	sl, [pc, #144]	; 8018f70 <_SpriteDraw+0x1e8>
 8018ee0:	b1c2      	cbz	r2, 8018f14 <_SpriteDraw+0x18c>
 8018ee2:	4621      	mov	r1, r4
 8018ee4:	462a      	mov	r2, r5
 8018ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ee8:	4630      	mov	r0, r6
 8018eea:	f7ff fdc8 	bl	8018a7e <_GetBkIndexAlpha.isra.2>
 8018eee:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 8018ef2:	691b      	ldr	r3, [r3, #16]
 8018ef4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8018ef8:	685b      	ldr	r3, [r3, #4]
 8018efa:	4798      	blx	r3
 8018efc:	9b05      	ldr	r3, [sp, #20]
 8018efe:	43da      	mvns	r2, r3
 8018f00:	4601      	mov	r1, r0
 8018f02:	b2d2      	uxtb	r2, r2
 8018f04:	4658      	mov	r0, fp
 8018f06:	f7f7 ff47 	bl	8010d98 <GUI__MixColors>
 8018f0a:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 8018f0e:	691b      	ldr	r3, [r3, #16]
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	e005      	b.n	8018f20 <_SpriteDraw+0x198>
 8018f14:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 8018f18:	691b      	ldr	r3, [r3, #16]
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
 8018f20:	4798      	blx	r3
 8018f22:	f8cd 9000 	str.w	r9, [sp]
 8018f26:	4602      	mov	r2, r0
 8018f28:	4621      	mov	r1, r4
 8018f2a:	4630      	mov	r0, r6
 8018f2c:	462b      	mov	r3, r5
 8018f2e:	f7ff fe81 	bl	8018c34 <_SetBkIndexBuffered>
 8018f32:	3601      	adds	r6, #1
 8018f34:	e7b0      	b.n	8018e98 <_SpriteDraw+0x110>
 8018f36:	3401      	adds	r4, #1
 8018f38:	e7a3      	b.n	8018e82 <_SpriteDraw+0xfa>
 8018f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f3c:	4649      	mov	r1, r9
 8018f3e:	6818      	ldr	r0, [r3, #0]
 8018f40:	f7ff fe9a 	bl	8018c78 <_ReleaseBuffer.isra.6>
 8018f44:	9a04      	ldr	r2, [sp, #16]
 8018f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f48:	4297      	cmp	r7, r2
 8018f4a:	f8c3 8014 	str.w	r8, [r3, #20]
 8018f4e:	d002      	beq.n	8018f56 <_SpriteDraw+0x1ce>
 8018f50:	4b06      	ldr	r3, [pc, #24]	; (8018f6c <_SpriteDraw+0x1e4>)
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	745a      	strb	r2, [r3, #17]
 8018f56:	a80b      	add	r0, sp, #44	; 0x2c
 8018f58:	f7fa fcde 	bl	8013918 <GUI_ALLOC_UnlockH>
 8018f5c:	9b06      	ldr	r3, [sp, #24]
 8018f5e:	b113      	cbz	r3, 8018f66 <_SpriteDraw+0x1de>
 8018f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018f62:	2100      	movs	r1, #0
 8018f64:	4798      	blx	r3
 8018f66:	b011      	add	sp, #68	; 0x44
 8018f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f6c:	20000110 	.word	0x20000110
 8018f70:	2001d5dc 	.word	0x2001d5dc

08018f74 <GUI_SPRITE__CreateEx>:
 8018f74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018f78:	4604      	mov	r4, r0
 8018f7a:	8800      	ldrh	r0, [r0, #0]
 8018f7c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8018f80:	4689      	mov	r9, r1
 8018f82:	4690      	mov	r8, r2
 8018f84:	2800      	cmp	r0, #0
 8018f86:	d04f      	beq.n	8019028 <GUI_SPRITE__CreateEx+0xb4>
 8018f88:	8860      	ldrh	r0, [r4, #2]
 8018f8a:	2800      	cmp	r0, #0
 8018f8c:	d04c      	beq.n	8019028 <GUI_SPRITE__CreateEx+0xb4>
 8018f8e:	68e0      	ldr	r0, [r4, #12]
 8018f90:	b110      	cbz	r0, 8018f98 <GUI_SPRITE__CreateEx+0x24>
 8018f92:	6880      	ldr	r0, [r0, #8]
 8018f94:	b918      	cbnz	r0, 8018f9e <GUI_SPRITE__CreateEx+0x2a>
 8018f96:	e047      	b.n	8019028 <GUI_SPRITE__CreateEx+0xb4>
 8018f98:	88e2      	ldrh	r2, [r4, #6]
 8018f9a:	2a20      	cmp	r2, #32
 8018f9c:	d144      	bne.n	8019028 <GUI_SPRITE__CreateEx+0xb4>
 8018f9e:	4824      	ldr	r0, [pc, #144]	; (8019030 <GUI_SPRITE__CreateEx+0xbc>)
 8018fa0:	2100      	movs	r1, #0
 8018fa2:	f007 0201 	and.w	r2, r7, #1
 8018fa6:	f7f9 fe8d 	bl	8012cc4 <GUI_DEVICE_Create>
 8018faa:	4606      	mov	r6, r0
 8018fac:	b908      	cbnz	r0, 8018fb2 <GUI_SPRITE__CreateEx+0x3e>
 8018fae:	2000      	movs	r0, #0
 8018fb0:	e03a      	b.n	8019028 <GUI_SPRITE__CreateEx+0xb4>
 8018fb2:	8823      	ldrh	r3, [r4, #0]
 8018fb4:	8860      	ldrh	r0, [r4, #2]
 8018fb6:	4358      	muls	r0, r3
 8018fb8:	0080      	lsls	r0, r0, #2
 8018fba:	3020      	adds	r0, #32
 8018fbc:	f7fa ff7e 	bl	8013ebc <GUI_ALLOC_AllocZero>
 8018fc0:	4605      	mov	r5, r0
 8018fc2:	b918      	cbnz	r0, 8018fcc <GUI_SPRITE__CreateEx+0x58>
 8018fc4:	4630      	mov	r0, r6
 8018fc6:	f7f9 fe7b 	bl	8012cc0 <GUI_DEVICE_Delete>
 8018fca:	e02c      	b.n	8019026 <GUI_SPRITE__CreateEx+0xb2>
 8018fcc:	60b0      	str	r0, [r6, #8]
 8018fce:	f7fa fc95 	bl	80138fc <GUI_ALLOC_LockH>
 8018fd2:	8822      	ldrh	r2, [r4, #0]
 8018fd4:	4603      	mov	r3, r0
 8018fd6:	3a01      	subs	r2, #1
 8018fd8:	f8a3 9004 	strh.w	r9, [r3, #4]
 8018fdc:	4491      	add	r9, r2
 8018fde:	8862      	ldrh	r2, [r4, #2]
 8018fe0:	f8a3 8006 	strh.w	r8, [r3, #6]
 8018fe4:	a802      	add	r0, sp, #8
 8018fe6:	3a01      	subs	r2, #1
 8018fe8:	4490      	add	r8, r2
 8018fea:	f840 3d04 	str.w	r3, [r0, #-4]!
 8018fee:	821f      	strh	r7, [r3, #16]
 8018ff0:	615c      	str	r4, [r3, #20]
 8018ff2:	f8a3 9008 	strh.w	r9, [r3, #8]
 8018ff6:	f8a3 800a 	strh.w	r8, [r3, #10]
 8018ffa:	601e      	str	r6, [r3, #0]
 8018ffc:	f7fa fc8c 	bl	8013918 <GUI_ALLOC_UnlockH>
 8019000:	68e3      	ldr	r3, [r4, #12]
 8019002:	b943      	cbnz	r3, 8019016 <GUI_SPRITE__CreateEx+0xa2>
 8019004:	07bb      	lsls	r3, r7, #30
 8019006:	4628      	mov	r0, r5
 8019008:	d50e      	bpl.n	8019028 <GUI_SPRITE__CreateEx+0xb4>
 801900a:	f7ff fc8d 	bl	8018928 <_Link>
 801900e:	4628      	mov	r0, r5
 8019010:	f7ff feba 	bl	8018d88 <_SpriteDraw>
 8019014:	e007      	b.n	8019026 <GUI_SPRITE__CreateEx+0xb2>
 8019016:	4628      	mov	r0, r5
 8019018:	f104 010c 	add.w	r1, r4, #12
 801901c:	f7ff fd6e 	bl	8018afc <_DoColorConversion.isra.3>
 8019020:	2800      	cmp	r0, #0
 8019022:	d0ef      	beq.n	8019004 <GUI_SPRITE__CreateEx+0x90>
 8019024:	e7c3      	b.n	8018fae <GUI_SPRITE__CreateEx+0x3a>
 8019026:	4628      	mov	r0, r5
 8019028:	b003      	add	sp, #12
 801902a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801902e:	bf00      	nop
 8019030:	080257f0 	.word	0x080257f0

08019034 <GUI_SPRITE_Delete>:
 8019034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019036:	4604      	mov	r4, r0
 8019038:	b1d8      	cbz	r0, 8019072 <GUI_SPRITE_Delete+0x3e>
 801903a:	f7ff fe2d 	bl	8018c98 <_Undraw>
 801903e:	4620      	mov	r0, r4
 8019040:	f7ff fcd5 	bl	80189ee <_Unlink>
 8019044:	4620      	mov	r0, r4
 8019046:	f7fa fc59 	bl	80138fc <GUI_ALLOC_LockH>
 801904a:	9001      	str	r0, [sp, #4]
 801904c:	6800      	ldr	r0, [r0, #0]
 801904e:	f7fa fc41 	bl	80138d4 <GUI_ALLOC_FreeFixedBlock>
 8019052:	9b01      	ldr	r3, [sp, #4]
 8019054:	ad02      	add	r5, sp, #8
 8019056:	68d8      	ldr	r0, [r3, #12]
 8019058:	f7fa fc8a 	bl	8013970 <GUI_ALLOC_Free>
 801905c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8019060:	69d8      	ldr	r0, [r3, #28]
 8019062:	f7fa fc85 	bl	8013970 <GUI_ALLOC_Free>
 8019066:	4628      	mov	r0, r5
 8019068:	f7fa fc56 	bl	8013918 <GUI_ALLOC_UnlockH>
 801906c:	4620      	mov	r0, r4
 801906e:	f7fa fc7f 	bl	8013970 <GUI_ALLOC_Free>
 8019072:	b003      	add	sp, #12
 8019074:	bd30      	pop	{r4, r5, pc}
	...

08019078 <GUI_SPRITE_SetPosition>:
 8019078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801907c:	b0a7      	sub	sp, #156	; 0x9c
 801907e:	9116      	str	r1, [sp, #88]	; 0x58
 8019080:	9217      	str	r2, [sp, #92]	; 0x5c
 8019082:	2800      	cmp	r0, #0
 8019084:	f000 8275 	beq.w	8019572 <GUI_SPRITE_SetPosition+0x4fa>
 8019088:	f7fa fc38 	bl	80138fc <GUI_ALLOC_LockH>
 801908c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801908e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019092:	6801      	ldr	r1, [r0, #0]
 8019094:	9023      	str	r0, [sp, #140]	; 0x8c
 8019096:	429a      	cmp	r2, r3
 8019098:	9106      	str	r1, [sp, #24]
 801909a:	d106      	bne.n	80190aa <GUI_SPRITE_SetPosition+0x32>
 801909c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80190a0:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80190a4:	459e      	cmp	lr, r3
 80190a6:	f000 8239 	beq.w	801951c <GUI_SPRITE_SetPosition+0x4a4>
 80190aa:	2000      	movs	r0, #0
 80190ac:	f7f5 fedc 	bl	800ee68 <GUI_MEMDEV_Select>
 80190b0:	4ba0      	ldr	r3, [pc, #640]	; (8019334 <GUI_SPRITE_SetPosition+0x2bc>)
 80190b2:	9906      	ldr	r1, [sp, #24]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	6989      	ldr	r1, [r1, #24]
 80190b8:	7c5a      	ldrb	r2, [r3, #17]
 80190ba:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80190bc:	9108      	str	r1, [sp, #32]
 80190be:	4291      	cmp	r1, r2
 80190c0:	bf18      	it	ne
 80190c2:	7459      	strbne	r1, [r3, #17]
 80190c4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80190c8:	9310      	str	r3, [sp, #64]	; 0x40
 80190ca:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80190ce:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80190d2:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 80190d6:	921a      	str	r2, [sp, #104]	; 0x68
 80190d8:	ebce 0303 	rsb	r3, lr, r3
 80190dc:	1c59      	adds	r1, r3, #1
 80190de:	9307      	str	r3, [sp, #28]
 80190e0:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80190e4:	901f      	str	r0, [sp, #124]	; 0x7c
 80190e6:	1b9b      	subs	r3, r3, r6
 80190e8:	1c5a      	adds	r2, r3, #1
 80190ea:	930e      	str	r3, [sp, #56]	; 0x38
 80190ec:	8a2b      	ldrh	r3, [r5, #16]
 80190ee:	910d      	str	r1, [sp, #52]	; 0x34
 80190f0:	079b      	lsls	r3, r3, #30
 80190f2:	921e      	str	r2, [sp, #120]	; 0x78
 80190f4:	f140 81f7 	bpl.w	80194e6 <GUI_SPRITE_SetPosition+0x46e>
 80190f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80190fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80190fc:	696b      	ldr	r3, [r5, #20]
 80190fe:	9311      	str	r3, [sp, #68]	; 0x44
 8019100:	ebce 0a01 	rsb	sl, lr, r1
 8019104:	f1ba 0f00 	cmp.w	sl, #0
 8019108:	ebc6 0902 	rsb	r9, r6, r2
 801910c:	dc0c      	bgt.n	8019128 <GUI_SPRITE_SetPosition+0xb0>
 801910e:	9b07      	ldr	r3, [sp, #28]
 8019110:	930a      	str	r3, [sp, #40]	; 0x28
 8019112:	469e      	mov	lr, r3
 8019114:	f04f 32ff 	mov.w	r2, #4294967295
 8019118:	44d6      	add	lr, sl
 801911a:	2100      	movs	r1, #0
 801911c:	f8cd e01c 	str.w	lr, [sp, #28]
 8019120:	911c      	str	r1, [sp, #112]	; 0x70
 8019122:	9214      	str	r2, [sp, #80]	; 0x50
 8019124:	9204      	str	r2, [sp, #16]
 8019126:	e009      	b.n	801913c <GUI_SPRITE_SetPosition+0xc4>
 8019128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801912a:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 801912e:	f04f 0e01 	mov.w	lr, #1
 8019132:	2100      	movs	r1, #0
 8019134:	9314      	str	r3, [sp, #80]	; 0x50
 8019136:	f8cd e010 	str.w	lr, [sp, #16]
 801913a:	910a      	str	r1, [sp, #40]	; 0x28
 801913c:	f1b9 0f00 	cmp.w	r9, #0
 8019140:	dc0c      	bgt.n	801915c <GUI_SPRITE_SetPosition+0xe4>
 8019142:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019144:	4622      	mov	r2, r4
 8019146:	f04f 3eff 	mov.w	lr, #4294967295
 801914a:	444a      	add	r2, r9
 801914c:	2300      	movs	r3, #0
 801914e:	920e      	str	r2, [sp, #56]	; 0x38
 8019150:	931b      	str	r3, [sp, #108]	; 0x6c
 8019152:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 8019156:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801915a:	e006      	b.n	801916a <GUI_SPRITE_SetPosition+0xf2>
 801915c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801915e:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 8019162:	2301      	movs	r3, #1
 8019164:	9215      	str	r2, [sp, #84]	; 0x54
 8019166:	9309      	str	r3, [sp, #36]	; 0x24
 8019168:	2400      	movs	r4, #0
 801916a:	9806      	ldr	r0, [sp, #24]
 801916c:	a924      	add	r1, sp, #144	; 0x90
 801916e:	f7ff fd0b 	bl	8018b88 <_GetDeviceRect>
 8019172:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8019174:	9904      	ldr	r1, [sp, #16]
 8019176:	f7ff fbe5 	bl	8018944 <_CreateBuffer>
 801917a:	9012      	str	r0, [sp, #72]	; 0x48
 801917c:	2800      	cmp	r0, #0
 801917e:	f000 81b2 	beq.w	80194e6 <GUI_SPRITE_SetPosition+0x46e>
 8019182:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8019184:	9904      	ldr	r1, [sp, #16]
 8019186:	f7ff fbdd 	bl	8018944 <_CreateBuffer>
 801918a:	9013      	str	r0, [sp, #76]	; 0x4c
 801918c:	2800      	cmp	r0, #0
 801918e:	f000 81a5 	beq.w	80194dc <GUI_SPRITE_SetPosition+0x464>
 8019192:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019194:	68d8      	ldr	r0, [r3, #12]
 8019196:	4426      	add	r6, r4
 8019198:	b990      	cbnz	r0, 80191c0 <GUI_SPRITE_SetPosition+0x148>
 801919a:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 801919e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80191a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80191a2:	9019      	str	r0, [sp, #100]	; 0x64
 80191a4:	ea4f 038e 	mov.w	r3, lr, lsl #2
 80191a8:	434b      	muls	r3, r1
 80191aa:	9321      	str	r3, [sp, #132]	; 0x84
 80191ac:	fb0e 2304 	mla	r3, lr, r4, r2
 80191b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80191b4:	930c      	str	r3, [sp, #48]	; 0x30
 80191b6:	9b04      	ldr	r3, [sp, #16]
 80191b8:	009b      	lsls	r3, r3, #2
 80191ba:	444e      	add	r6, r9
 80191bc:	9320      	str	r3, [sp, #128]	; 0x80
 80191be:	e0db      	b.n	8019378 <GUI_SPRITE_SetPosition+0x300>
 80191c0:	f7fa fb9c 	bl	80138fc <GUI_ALLOC_LockH>
 80191c4:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 80191c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80191ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80191cc:	9022      	str	r0, [sp, #136]	; 0x88
 80191ce:	ea4f 038e 	mov.w	r3, lr, lsl #2
 80191d2:	434b      	muls	r3, r1
 80191d4:	9319      	str	r3, [sp, #100]	; 0x64
 80191d6:	fb0e 2304 	mla	r3, lr, r4, r2
 80191da:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80191de:	930b      	str	r3, [sp, #44]	; 0x2c
 80191e0:	9b04      	ldr	r3, [sp, #16]
 80191e2:	009b      	lsls	r3, r3, #2
 80191e4:	444e      	add	r6, r9
 80191e6:	931d      	str	r3, [sp, #116]	; 0x74
 80191e8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80191ea:	428c      	cmp	r4, r1
 80191ec:	f000 809e 	beq.w	801932c <GUI_SPRITE_SetPosition+0x2b4>
 80191f0:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 80191f4:	4574      	cmp	r4, lr
 80191f6:	db05      	blt.n	8019204 <GUI_SPRITE_SetPosition+0x18c>
 80191f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80191fa:	428c      	cmp	r4, r1
 80191fc:	bfcc      	ite	gt
 80191fe:	2300      	movgt	r3, #0
 8019200:	2301      	movle	r3, #1
 8019202:	e000      	b.n	8019206 <GUI_SPRITE_SetPosition+0x18e>
 8019204:	2300      	movs	r3, #0
 8019206:	b2db      	uxtb	r3, r3
 8019208:	9318      	str	r3, [sp, #96]	; 0x60
 801920a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801920c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801920e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019210:	9105      	str	r1, [sp, #20]
 8019212:	ebc9 0206 	rsb	r2, r9, r6
 8019216:	441f      	add	r7, r3
 8019218:	920c      	str	r2, [sp, #48]	; 0x30
 801921a:	4457      	add	r7, sl
 801921c:	461d      	mov	r5, r3
 801921e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019220:	428d      	cmp	r5, r1
 8019222:	d07a      	beq.n	801931a <GUI_SPRITE_SetPosition+0x2a2>
 8019224:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019226:	4629      	mov	r1, r5
 8019228:	4622      	mov	r2, r4
 801922a:	f000 fa1e 	bl	801966a <GUI_GetBitmapPixelIndex>
 801922e:	900f      	str	r0, [sp, #60]	; 0x3c
 8019230:	2800      	cmp	r0, #0
 8019232:	d069      	beq.n	8019308 <GUI_SPRITE_SetPosition+0x290>
 8019234:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019236:	4295      	cmp	r5, r2
 8019238:	ebca 0c07 	rsb	ip, sl, r7
 801923c:	db07      	blt.n	801924e <GUI_SPRITE_SetPosition+0x1d6>
 801923e:	9b07      	ldr	r3, [sp, #28]
 8019240:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8019244:	429d      	cmp	r5, r3
 8019246:	bfc8      	it	gt
 8019248:	f04f 0b00 	movgt.w	fp, #0
 801924c:	e001      	b.n	8019252 <GUI_SPRITE_SetPosition+0x1da>
 801924e:	f04f 0b00 	mov.w	fp, #0
 8019252:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8019256:	429f      	cmp	r7, r3
 8019258:	fa5f fb8b 	uxtb.w	fp, fp
 801925c:	db17      	blt.n	801928e <GUI_SPRITE_SetPosition+0x216>
 801925e:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8019262:	429e      	cmp	r6, r3
 8019264:	db13      	blt.n	801928e <GUI_SPRITE_SetPosition+0x216>
 8019266:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801926a:	429f      	cmp	r7, r3
 801926c:	dc0f      	bgt.n	801928e <GUI_SPRITE_SetPosition+0x216>
 801926e:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8019272:	429e      	cmp	r6, r3
 8019274:	dc0b      	bgt.n	801928e <GUI_SPRITE_SetPosition+0x216>
 8019276:	4638      	mov	r0, r7
 8019278:	4631      	mov	r1, r6
 801927a:	9a06      	ldr	r2, [sp, #24]
 801927c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801927e:	f8cd c00c 	str.w	ip, [sp, #12]
 8019282:	f7ff fbc2 	bl	8018a0a <_GetBkIndex.isra.0>
 8019286:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801928a:	4680      	mov	r8, r0
 801928c:	e001      	b.n	8019292 <GUI_SPRITE_SetPosition+0x21a>
 801928e:	f04f 0800 	mov.w	r8, #0
 8019292:	f1bb 0f00 	cmp.w	fp, #0
 8019296:	d00d      	beq.n	80192b4 <GUI_SPRITE_SetPosition+0x23c>
 8019298:	ebb5 010a 	subs.w	r1, r5, sl
 801929c:	d415      	bmi.n	80192ca <GUI_SPRITE_SetPosition+0x252>
 801929e:	ebb4 0209 	subs.w	r2, r4, r9
 80192a2:	d412      	bmi.n	80192ca <GUI_SPRITE_SetPosition+0x252>
 80192a4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80192a6:	f8cd c00c 	str.w	ip, [sp, #12]
 80192aa:	f000 f9de 	bl	801966a <GUI_GetBitmapPixelIndex>
 80192ae:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80192b2:	b950      	cbnz	r0, 80192ca <GUI_SPRITE_SetPosition+0x252>
 80192b4:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80192b8:	459c      	cmp	ip, r3
 80192ba:	db06      	blt.n	80192ca <GUI_SPRITE_SetPosition+0x252>
 80192bc:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80192c0:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80192c4:	459e      	cmp	lr, r3
 80192c6:	f280 812d 	bge.w	8019524 <GUI_SPRITE_SetPosition+0x4ac>
 80192ca:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80192ce:	429f      	cmp	r7, r3
 80192d0:	db17      	blt.n	8019302 <GUI_SPRITE_SetPosition+0x28a>
 80192d2:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80192d6:	429e      	cmp	r6, r3
 80192d8:	db13      	blt.n	8019302 <GUI_SPRITE_SetPosition+0x28a>
 80192da:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80192de:	429f      	cmp	r7, r3
 80192e0:	dc0f      	bgt.n	8019302 <GUI_SPRITE_SetPosition+0x28a>
 80192e2:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80192e6:	429e      	cmp	r6, r3
 80192e8:	dc0b      	bgt.n	8019302 <GUI_SPRITE_SetPosition+0x28a>
 80192ea:	9912      	ldr	r1, [sp, #72]	; 0x48
 80192ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80192ee:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 80192f2:	9100      	str	r1, [sp, #0]
 80192f4:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 80192f8:	9b06      	ldr	r3, [sp, #24]
 80192fa:	4638      	mov	r0, r7
 80192fc:	4631      	mov	r1, r6
 80192fe:	f7ff fc99 	bl	8018c34 <_SetBkIndexBuffered>
 8019302:	9905      	ldr	r1, [sp, #20]
 8019304:	f8c1 8020 	str.w	r8, [r1, #32]
 8019308:	9b05      	ldr	r3, [sp, #20]
 801930a:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 801930e:	9a04      	ldr	r2, [sp, #16]
 8019310:	4473      	add	r3, lr
 8019312:	4415      	add	r5, r2
 8019314:	9305      	str	r3, [sp, #20]
 8019316:	4417      	add	r7, r2
 8019318:	e781      	b.n	801921e <GUI_SPRITE_SetPosition+0x1a6>
 801931a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801931c:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 8019320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019322:	4473      	add	r3, lr
 8019324:	4414      	add	r4, r2
 8019326:	930b      	str	r3, [sp, #44]	; 0x2c
 8019328:	4416      	add	r6, r2
 801932a:	e75d      	b.n	80191e8 <GUI_SPRITE_SetPosition+0x170>
 801932c:	a822      	add	r0, sp, #136	; 0x88
 801932e:	f7fa faf3 	bl	8013918 <GUI_ALLOC_UnlockH>
 8019332:	e0ce      	b.n	80194d2 <GUI_SPRITE_SetPosition+0x45a>
 8019334:	20000110 	.word	0x20000110
 8019338:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801933a:	4294      	cmp	r4, r2
 801933c:	db20      	blt.n	8019380 <GUI_SPRITE_SetPosition+0x308>
 801933e:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8019342:	4574      	cmp	r4, lr
 8019344:	bfcc      	ite	gt
 8019346:	2300      	movgt	r3, #0
 8019348:	2301      	movle	r3, #1
 801934a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801934c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801934e:	b2db      	uxtb	r3, r3
 8019350:	931d      	str	r3, [sp, #116]	; 0x74
 8019352:	ebc9 0106 	rsb	r1, r9, r6
 8019356:	4417      	add	r7, r2
 8019358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801935a:	910f      	str	r1, [sp, #60]	; 0x3c
 801935c:	4457      	add	r7, sl
 801935e:	9305      	str	r3, [sp, #20]
 8019360:	4615      	mov	r5, r2
 8019362:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019364:	428d      	cmp	r5, r1
 8019366:	d10d      	bne.n	8019384 <GUI_SPRITE_SetPosition+0x30c>
 8019368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801936a:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 801936e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019370:	4473      	add	r3, lr
 8019372:	4414      	add	r4, r2
 8019374:	930c      	str	r3, [sp, #48]	; 0x30
 8019376:	4416      	add	r6, r2
 8019378:	9915      	ldr	r1, [sp, #84]	; 0x54
 801937a:	428c      	cmp	r4, r1
 801937c:	d1dc      	bne.n	8019338 <GUI_SPRITE_SetPosition+0x2c0>
 801937e:	e0a8      	b.n	80194d2 <GUI_SPRITE_SetPosition+0x45a>
 8019380:	2300      	movs	r3, #0
 8019382:	e7e2      	b.n	801934a <GUI_SPRITE_SetPosition+0x2d2>
 8019384:	4629      	mov	r1, r5
 8019386:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019388:	4622      	mov	r2, r4
 801938a:	f000 f96e 	bl	801966a <GUI_GetBitmapPixelIndex>
 801938e:	0e01      	lsrs	r1, r0, #24
 8019390:	29ff      	cmp	r1, #255	; 0xff
 8019392:	9018      	str	r0, [sp, #96]	; 0x60
 8019394:	910b      	str	r1, [sp, #44]	; 0x2c
 8019396:	f000 8093 	beq.w	80194c0 <GUI_SPRITE_SetPosition+0x448>
 801939a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801939c:	4295      	cmp	r5, r2
 801939e:	ebca 0c07 	rsb	ip, sl, r7
 80193a2:	db07      	blt.n	80193b4 <GUI_SPRITE_SetPosition+0x33c>
 80193a4:	9b07      	ldr	r3, [sp, #28]
 80193a6:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 80193aa:	429d      	cmp	r5, r3
 80193ac:	bfc8      	it	gt
 80193ae:	f04f 0b00 	movgt.w	fp, #0
 80193b2:	e001      	b.n	80193b8 <GUI_SPRITE_SetPosition+0x340>
 80193b4:	f04f 0b00 	mov.w	fp, #0
 80193b8:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80193bc:	429f      	cmp	r7, r3
 80193be:	fa5f fb8b 	uxtb.w	fp, fp
 80193c2:	db22      	blt.n	801940a <GUI_SPRITE_SetPosition+0x392>
 80193c4:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80193c8:	429e      	cmp	r6, r3
 80193ca:	db1e      	blt.n	801940a <GUI_SPRITE_SetPosition+0x392>
 80193cc:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80193d0:	429f      	cmp	r7, r3
 80193d2:	dc1a      	bgt.n	801940a <GUI_SPRITE_SetPosition+0x392>
 80193d4:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80193d8:	429e      	cmp	r6, r3
 80193da:	dc16      	bgt.n	801940a <GUI_SPRITE_SetPosition+0x392>
 80193dc:	4631      	mov	r1, r6
 80193de:	9a06      	ldr	r2, [sp, #24]
 80193e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80193e2:	f8cd c00c 	str.w	ip, [sp, #12]
 80193e6:	4638      	mov	r0, r7
 80193e8:	f7ff fb49 	bl	8018a7e <_GetBkIndexAlpha.isra.2>
 80193ec:	f8dd e020 	ldr.w	lr, [sp, #32]
 80193f0:	4b61      	ldr	r3, [pc, #388]	; (8019578 <GUI_SPRITE_SetPosition+0x500>)
 80193f2:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 80193f6:	691b      	ldr	r3, [r3, #16]
 80193f8:	4680      	mov	r8, r0
 80193fa:	685b      	ldr	r3, [r3, #4]
 80193fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8019400:	4798      	blx	r3
 8019402:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8019406:	9019      	str	r0, [sp, #100]	; 0x64
 8019408:	e001      	b.n	801940e <GUI_SPRITE_SetPosition+0x396>
 801940a:	f04f 0800 	mov.w	r8, #0
 801940e:	f1bb 0f00 	cmp.w	fp, #0
 8019412:	d00f      	beq.n	8019434 <GUI_SPRITE_SetPosition+0x3bc>
 8019414:	ebb5 010a 	subs.w	r1, r5, sl
 8019418:	d416      	bmi.n	8019448 <GUI_SPRITE_SetPosition+0x3d0>
 801941a:	ebb4 0209 	subs.w	r2, r4, r9
 801941e:	d413      	bmi.n	8019448 <GUI_SPRITE_SetPosition+0x3d0>
 8019420:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019422:	f8cd c00c 	str.w	ip, [sp, #12]
 8019426:	f000 f920 	bl	801966a <GUI_GetBitmapPixelIndex>
 801942a:	0e00      	lsrs	r0, r0, #24
 801942c:	28ff      	cmp	r0, #255	; 0xff
 801942e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8019432:	d109      	bne.n	8019448 <GUI_SPRITE_SetPosition+0x3d0>
 8019434:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8019438:	459c      	cmp	ip, r3
 801943a:	db05      	blt.n	8019448 <GUI_SPRITE_SetPosition+0x3d0>
 801943c:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8019440:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019442:	4299      	cmp	r1, r3
 8019444:	f280 8082 	bge.w	801954c <GUI_SPRITE_SetPosition+0x4d4>
 8019448:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801944c:	429f      	cmp	r7, r3
 801944e:	db34      	blt.n	80194ba <GUI_SPRITE_SetPosition+0x442>
 8019450:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8019454:	429e      	cmp	r6, r3
 8019456:	db30      	blt.n	80194ba <GUI_SPRITE_SetPosition+0x442>
 8019458:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801945c:	429f      	cmp	r7, r3
 801945e:	dc2c      	bgt.n	80194ba <GUI_SPRITE_SetPosition+0x442>
 8019460:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8019464:	429e      	cmp	r6, r3
 8019466:	dc28      	bgt.n	80194ba <GUI_SPRITE_SetPosition+0x442>
 8019468:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801946c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801946e:	f8df b108 	ldr.w	fp, [pc, #264]	; 8019578 <GUI_SPRITE_SetPosition+0x500>
 8019472:	f02e 407f 	bic.w	r0, lr, #4278190080	; 0xff000000
 8019476:	b191      	cbz	r1, 801949e <GUI_SPRITE_SetPosition+0x426>
 8019478:	9a08      	ldr	r2, [sp, #32]
 801947a:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
 801947e:	691b      	ldr	r3, [r3, #16]
 8019480:	685b      	ldr	r3, [r3, #4]
 8019482:	4798      	blx	r3
 8019484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019486:	9919      	ldr	r1, [sp, #100]	; 0x64
 8019488:	43da      	mvns	r2, r3
 801948a:	b2d2      	uxtb	r2, r2
 801948c:	f7f7 fc84 	bl	8010d98 <GUI__MixColors>
 8019490:	f8dd e020 	ldr.w	lr, [sp, #32]
 8019494:	f85b 302e 	ldr.w	r3, [fp, lr, lsl #2]
 8019498:	691b      	ldr	r3, [r3, #16]
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	e004      	b.n	80194a8 <GUI_SPRITE_SetPosition+0x430>
 801949e:	9908      	ldr	r1, [sp, #32]
 80194a0:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 80194a4:	691b      	ldr	r3, [r3, #16]
 80194a6:	685b      	ldr	r3, [r3, #4]
 80194a8:	4798      	blx	r3
 80194aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80194ac:	9300      	str	r3, [sp, #0]
 80194ae:	4602      	mov	r2, r0
 80194b0:	4631      	mov	r1, r6
 80194b2:	4638      	mov	r0, r7
 80194b4:	9b06      	ldr	r3, [sp, #24]
 80194b6:	f7ff fbbd 	bl	8018c34 <_SetBkIndexBuffered>
 80194ba:	9905      	ldr	r1, [sp, #20]
 80194bc:	f8c1 8020 	str.w	r8, [r1, #32]
 80194c0:	9b05      	ldr	r3, [sp, #20]
 80194c2:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 80194c6:	9a04      	ldr	r2, [sp, #16]
 80194c8:	4473      	add	r3, lr
 80194ca:	4415      	add	r5, r2
 80194cc:	9305      	str	r3, [sp, #20]
 80194ce:	4417      	add	r7, r2
 80194d0:	e747      	b.n	8019362 <GUI_SPRITE_SetPosition+0x2ea>
 80194d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80194d4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80194d6:	6818      	ldr	r0, [r3, #0]
 80194d8:	f7ff fbce 	bl	8018c78 <_ReleaseBuffer.isra.6>
 80194dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80194de:	9912      	ldr	r1, [sp, #72]	; 0x48
 80194e0:	6818      	ldr	r0, [r3, #0]
 80194e2:	f7ff fbc9 	bl	8018c78 <_ReleaseBuffer.isra.6>
 80194e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80194e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80194ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80194ec:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80194f0:	809a      	strh	r2, [r3, #4]
 80194f2:	440a      	add	r2, r1
 80194f4:	3a01      	subs	r2, #1
 80194f6:	f8a3 e006 	strh.w	lr, [r3, #6]
 80194fa:	811a      	strh	r2, [r3, #8]
 80194fc:	f10e 32ff 	add.w	r2, lr, #4294967295
 8019500:	f8dd e078 	ldr.w	lr, [sp, #120]	; 0x78
 8019504:	9908      	ldr	r1, [sp, #32]
 8019506:	4472      	add	r2, lr
 8019508:	815a      	strh	r2, [r3, #10]
 801950a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801950c:	4291      	cmp	r1, r2
 801950e:	d002      	beq.n	8019516 <GUI_SPRITE_SetPosition+0x49e>
 8019510:	4b1a      	ldr	r3, [pc, #104]	; (801957c <GUI_SPRITE_SetPosition+0x504>)
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	745a      	strb	r2, [r3, #17]
 8019516:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8019518:	f7f5 fca6 	bl	800ee68 <GUI_MEMDEV_Select>
 801951c:	a823      	add	r0, sp, #140	; 0x8c
 801951e:	f7fa f9fb 	bl	8013918 <GUI_ALLOC_UnlockH>
 8019522:	e026      	b.n	8019572 <GUI_SPRITE_SetPosition+0x4fa>
 8019524:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8019528:	459c      	cmp	ip, r3
 801952a:	f73f aece 	bgt.w	80192ca <GUI_SPRITE_SetPosition+0x252>
 801952e:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8019532:	459e      	cmp	lr, r3
 8019534:	f73f aec9 	bgt.w	80192ca <GUI_SPRITE_SetPosition+0x252>
 8019538:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801953a:	9b05      	ldr	r3, [sp, #20]
 801953c:	9100      	str	r1, [sp, #0]
 801953e:	6a1a      	ldr	r2, [r3, #32]
 8019540:	9b06      	ldr	r3, [sp, #24]
 8019542:	4660      	mov	r0, ip
 8019544:	4671      	mov	r1, lr
 8019546:	f7ff fb75 	bl	8018c34 <_SetBkIndexBuffered>
 801954a:	e6be      	b.n	80192ca <GUI_SPRITE_SetPosition+0x252>
 801954c:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8019550:	459c      	cmp	ip, r3
 8019552:	f73f af79 	bgt.w	8019448 <GUI_SPRITE_SetPosition+0x3d0>
 8019556:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801955a:	4299      	cmp	r1, r3
 801955c:	f73f af74 	bgt.w	8019448 <GUI_SPRITE_SetPosition+0x3d0>
 8019560:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019562:	9b05      	ldr	r3, [sp, #20]
 8019564:	9200      	str	r2, [sp, #0]
 8019566:	6a1a      	ldr	r2, [r3, #32]
 8019568:	9b06      	ldr	r3, [sp, #24]
 801956a:	4660      	mov	r0, ip
 801956c:	f7ff fb62 	bl	8018c34 <_SetBkIndexBuffered>
 8019570:	e76a      	b.n	8019448 <GUI_SPRITE_SetPosition+0x3d0>
 8019572:	b027      	add	sp, #156	; 0x9c
 8019574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019578:	2001d5dc 	.word	0x2001d5dc
 801957c:	20000110 	.word	0x20000110

08019580 <GUI_SPRITE_Show>:
 8019580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019582:	4605      	mov	r5, r0
 8019584:	b1d8      	cbz	r0, 80195be <GUI_SPRITE_Show+0x3e>
 8019586:	f7fa f9b9 	bl	80138fc <GUI_ALLOC_LockH>
 801958a:	8a03      	ldrh	r3, [r0, #16]
 801958c:	ac02      	add	r4, sp, #8
 801958e:	079b      	lsls	r3, r3, #30
 8019590:	f844 0d04 	str.w	r0, [r4, #-4]!
 8019594:	d410      	bmi.n	80195b8 <GUI_SPRITE_Show+0x38>
 8019596:	4628      	mov	r0, r5
 8019598:	f7ff f9c6 	bl	8018928 <_Link>
 801959c:	4620      	mov	r0, r4
 801959e:	f7fa f9bb 	bl	8013918 <GUI_ALLOC_UnlockH>
 80195a2:	4628      	mov	r0, r5
 80195a4:	f7ff fbf0 	bl	8018d88 <_SpriteDraw>
 80195a8:	4628      	mov	r0, r5
 80195aa:	f7fa f9a7 	bl	80138fc <GUI_ALLOC_LockH>
 80195ae:	8a03      	ldrh	r3, [r0, #16]
 80195b0:	9001      	str	r0, [sp, #4]
 80195b2:	f043 0302 	orr.w	r3, r3, #2
 80195b6:	8203      	strh	r3, [r0, #16]
 80195b8:	4620      	mov	r0, r4
 80195ba:	f7fa f9ad 	bl	8013918 <GUI_ALLOC_UnlockH>
 80195be:	b003      	add	sp, #12
 80195c0:	bd30      	pop	{r4, r5, pc}

080195c2 <GUI_GetBkColor>:
 80195c2:	b508      	push	{r3, lr}
 80195c4:	f001 f852 	bl	801a66c <LCD_GetBkColorIndex>
 80195c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80195cc:	f7f7 ba16 	b.w	80109fc <LCD_Index2Color>

080195d0 <GUI_GetColor>:
 80195d0:	b508      	push	{r3, lr}
 80195d2:	f001 f853 	bl	801a67c <LCD_GetColorIndex>
 80195d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80195da:	f7f7 ba0f 	b.w	80109fc <LCD_Index2Color>

080195de <GUI_GetClientRect>:
 80195de:	b108      	cbz	r0, 80195e4 <GUI_GetClientRect+0x6>
 80195e0:	f7f3 ba48 	b.w	800ca74 <WM_GetClientRect>
 80195e4:	4770      	bx	lr

080195e6 <GUI_GetBitmapPixelIndexEx>:
 80195e6:	b510      	push	{r4, lr}
 80195e8:	2804      	cmp	r0, #4
 80195ea:	9c02      	ldr	r4, [sp, #8]
 80195ec:	d025      	beq.n	801963a <GUI_GetBitmapPixelIndexEx+0x54>
 80195ee:	dc0f      	bgt.n	8019610 <GUI_GetBitmapPixelIndexEx+0x2a>
 80195f0:	2801      	cmp	r0, #1
 80195f2:	d017      	beq.n	8019624 <GUI_GetBitmapPixelIndexEx+0x3e>
 80195f4:	2802      	cmp	r0, #2
 80195f6:	d136      	bne.n	8019666 <GUI_GetBitmapPixelIndexEx+0x80>
 80195f8:	0898      	lsrs	r0, r3, #2
 80195fa:	fb04 2101 	mla	r1, r4, r1, r2
 80195fe:	ea6f 0343 	mvn.w	r3, r3, lsl #1
 8019602:	5c08      	ldrb	r0, [r1, r0]
 8019604:	f003 0306 	and.w	r3, r3, #6
 8019608:	40d8      	lsrs	r0, r3
 801960a:	f000 0003 	and.w	r0, r0, #3
 801960e:	bd10      	pop	{r4, pc}
 8019610:	2810      	cmp	r0, #16
 8019612:	d01c      	beq.n	801964e <GUI_GetBitmapPixelIndexEx+0x68>
 8019614:	2820      	cmp	r0, #32
 8019616:	d020      	beq.n	801965a <GUI_GetBitmapPixelIndexEx+0x74>
 8019618:	2808      	cmp	r0, #8
 801961a:	d124      	bne.n	8019666 <GUI_GetBitmapPixelIndexEx+0x80>
 801961c:	fb04 2101 	mla	r1, r4, r1, r2
 8019620:	5cc8      	ldrb	r0, [r1, r3]
 8019622:	bd10      	pop	{r4, pc}
 8019624:	08d8      	lsrs	r0, r3, #3
 8019626:	fb04 2101 	mla	r1, r4, r1, r2
 801962a:	43db      	mvns	r3, r3
 801962c:	5c08      	ldrb	r0, [r1, r0]
 801962e:	f003 0307 	and.w	r3, r3, #7
 8019632:	40d8      	lsrs	r0, r3
 8019634:	f000 0001 	and.w	r0, r0, #1
 8019638:	bd10      	pop	{r4, pc}
 801963a:	0858      	lsrs	r0, r3, #1
 801963c:	fb04 2101 	mla	r1, r4, r1, r2
 8019640:	07db      	lsls	r3, r3, #31
 8019642:	5c08      	ldrb	r0, [r1, r0]
 8019644:	bf4c      	ite	mi
 8019646:	f000 000f 	andmi.w	r0, r0, #15
 801964a:	0900      	lsrpl	r0, r0, #4
 801964c:	bd10      	pop	{r4, pc}
 801964e:	1049      	asrs	r1, r1, #1
 8019650:	fb04 3301 	mla	r3, r4, r1, r3
 8019654:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8019658:	bd10      	pop	{r4, pc}
 801965a:	1089      	asrs	r1, r1, #2
 801965c:	fb04 3301 	mla	r3, r4, r1, r3
 8019660:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019664:	bd10      	pop	{r4, pc}
 8019666:	2000      	movs	r0, #0
 8019668:	bd10      	pop	{r4, pc}

0801966a <GUI_GetBitmapPixelIndex>:
 801966a:	b513      	push	{r0, r1, r4, lr}
 801966c:	460b      	mov	r3, r1
 801966e:	4604      	mov	r4, r0
 8019670:	b130      	cbz	r0, 8019680 <GUI_GetBitmapPixelIndex+0x16>
 8019672:	88c0      	ldrh	r0, [r0, #6]
 8019674:	88a1      	ldrh	r1, [r4, #4]
 8019676:	9200      	str	r2, [sp, #0]
 8019678:	68a2      	ldr	r2, [r4, #8]
 801967a:	f7ff ffb4 	bl	80195e6 <GUI_GetBitmapPixelIndexEx>
 801967e:	e7ff      	b.n	8019680 <GUI_GetBitmapPixelIndex+0x16>
 8019680:	b002      	add	sp, #8
 8019682:	bd10      	pop	{r4, pc}

08019684 <_Add>:
 8019684:	4a0d      	ldr	r2, [pc, #52]	; (80196bc <_Add+0x38>)
 8019686:	6813      	ldr	r3, [r2, #0]
 8019688:	2b0b      	cmp	r3, #11
 801968a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801968c:	4615      	mov	r5, r2
 801968e:	dc14      	bgt.n	80196ba <_Add+0x36>
 8019690:	4c0b      	ldr	r4, [pc, #44]	; (80196c0 <_Add+0x3c>)
 8019692:	461a      	mov	r2, r3
 8019694:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8019698:	4626      	mov	r6, r4
 801969a:	b152      	cbz	r2, 80196b2 <_Add+0x2e>
 801969c:	f831 4d02 	ldrh.w	r4, [r1, #-2]!
 80196a0:	fa0f fc84 	sxth.w	ip, r4
 80196a4:	4584      	cmp	ip, r0
 80196a6:	f102 37ff 	add.w	r7, r2, #4294967295
 80196aa:	db02      	blt.n	80196b2 <_Add+0x2e>
 80196ac:	804c      	strh	r4, [r1, #2]
 80196ae:	463a      	mov	r2, r7
 80196b0:	e7f3      	b.n	801969a <_Add+0x16>
 80196b2:	3301      	adds	r3, #1
 80196b4:	f826 0012 	strh.w	r0, [r6, r2, lsl #1]
 80196b8:	602b      	str	r3, [r5, #0]
 80196ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196bc:	2001d38c 	.word	0x2001d38c
 80196c0:	2001d390 	.word	0x2001d390

080196c4 <GL_FillPolygon>:
 80196c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196c8:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8019884 <GL_FillPolygon+0x1c0>
 80196cc:	9101      	str	r1, [sp, #4]
 80196ce:	4692      	mov	sl, r2
 80196d0:	4606      	mov	r6, r0
 80196d2:	f643 74ff 	movw	r4, #16383	; 0x3fff
 80196d6:	2200      	movs	r2, #0
 80196d8:	9901      	ldr	r1, [sp, #4]
 80196da:	428a      	cmp	r2, r1
 80196dc:	da0b      	bge.n	80196f6 <GL_FillPolygon+0x32>
 80196de:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80196e2:	3201      	adds	r2, #1
 80196e4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80196e8:	428c      	cmp	r4, r1
 80196ea:	bfa8      	it	ge
 80196ec:	460c      	movge	r4, r1
 80196ee:	4589      	cmp	r9, r1
 80196f0:	bfb8      	it	lt
 80196f2:	4689      	movlt	r9, r1
 80196f4:	e7f0      	b.n	80196d8 <GL_FillPolygon+0x14>
 80196f6:	4960      	ldr	r1, [pc, #384]	; (8019878 <GL_FillPolygon+0x1b4>)
 80196f8:	680a      	ldr	r2, [r1, #0]
 80196fa:	6952      	ldr	r2, [r2, #20]
 80196fc:	468b      	mov	fp, r1
 80196fe:	b15a      	cbz	r2, 8019718 <GL_FillPolygon+0x54>
 8019700:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8019704:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019708:	1ac9      	subs	r1, r1, r3
 801970a:	1ad2      	subs	r2, r2, r3
 801970c:	4589      	cmp	r9, r1
 801970e:	bfa8      	it	ge
 8019710:	4689      	movge	r9, r1
 8019712:	4294      	cmp	r4, r2
 8019714:	bfb8      	it	lt
 8019716:	4614      	movlt	r4, r2
 8019718:	eb04 0803 	add.w	r8, r4, r3
 801971c:	454c      	cmp	r4, r9
 801971e:	f300 80a7 	bgt.w	8019870 <GL_FillPolygon+0x1ac>
 8019722:	4b56      	ldr	r3, [pc, #344]	; (801987c <GL_FillPolygon+0x1b8>)
 8019724:	2700      	movs	r7, #0
 8019726:	601f      	str	r7, [r3, #0]
 8019728:	4635      	mov	r5, r6
 801972a:	9901      	ldr	r1, [sp, #4]
 801972c:	428f      	cmp	r7, r1
 801972e:	da55      	bge.n	80197dc <GL_FillPolygon+0x118>
 8019730:	9b01      	ldr	r3, [sp, #4]
 8019732:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019736:	1e59      	subs	r1, r3, #1
 8019738:	428f      	cmp	r7, r1
 801973a:	bfb4      	ite	lt
 801973c:	f107 0c01 	addlt.w	ip, r7, #1
 8019740:	f04f 0c00 	movge.w	ip, #0
 8019744:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8019748:	eb06 030c 	add.w	r3, r6, ip
 801974c:	42a2      	cmp	r2, r4
 801974e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019752:	d136      	bne.n	80197c2 <GL_FillPolygon+0xfe>
 8019754:	42a3      	cmp	r3, r4
 8019756:	d002      	beq.n	801975e <GL_FillPolygon+0x9a>
 8019758:	463a      	mov	r2, r7
 801975a:	2000      	movs	r0, #0
 801975c:	e01b      	b.n	8019796 <GL_FillPolygon+0xd2>
 801975e:	f9b5 e000 	ldrsh.w	lr, [r5]
 8019762:	f936 200c 	ldrsh.w	r2, [r6, ip]
 8019766:	f8db 3000 	ldr.w	r3, [fp]
 801976a:	44d6      	add	lr, sl
 801976c:	4452      	add	r2, sl
 801976e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019770:	4596      	cmp	lr, r2
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	da02      	bge.n	801977c <GL_FillPolygon+0xb8>
 8019776:	4670      	mov	r0, lr
 8019778:	4641      	mov	r1, r8
 801977a:	e020      	b.n	80197be <GL_FillPolygon+0xfa>
 801977c:	4610      	mov	r0, r2
 801977e:	4641      	mov	r1, r8
 8019780:	4672      	mov	r2, lr
 8019782:	e01c      	b.n	80197be <GL_FillPolygon+0xfa>
 8019784:	b152      	cbz	r2, 801979c <GL_FillPolygon+0xd8>
 8019786:	3a01      	subs	r2, #1
 8019788:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
 801978c:	f9bc c002 	ldrsh.w	ip, [ip, #2]
 8019790:	45a4      	cmp	ip, r4
 8019792:	d105      	bne.n	80197a0 <GL_FillPolygon+0xdc>
 8019794:	3001      	adds	r0, #1
 8019796:	4288      	cmp	r0, r1
 8019798:	dbf4      	blt.n	8019784 <GL_FillPolygon+0xc0>
 801979a:	e01c      	b.n	80197d6 <GL_FillPolygon+0x112>
 801979c:	460a      	mov	r2, r1
 801979e:	e7f3      	b.n	8019788 <GL_FillPolygon+0xc4>
 80197a0:	ebc4 0c0c 	rsb	ip, r4, ip
 80197a4:	1b1b      	subs	r3, r3, r4
 80197a6:	ea9c 0f03 	teq	ip, r3
 80197aa:	f9b5 0000 	ldrsh.w	r0, [r5]
 80197ae:	d44d      	bmi.n	801984c <GL_FillPolygon+0x188>
 80197b0:	f8db 3000 	ldr.w	r3, [fp]
 80197b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80197b6:	4450      	add	r0, sl
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	4641      	mov	r1, r8
 80197bc:	4602      	mov	r2, r0
 80197be:	4798      	blx	r3
 80197c0:	e009      	b.n	80197d6 <GL_FillPolygon+0x112>
 80197c2:	42a3      	cmp	r3, r4
 80197c4:	d007      	beq.n	80197d6 <GL_FillPolygon+0x112>
 80197c6:	db44      	blt.n	8019852 <GL_FillPolygon+0x18e>
 80197c8:	42a2      	cmp	r2, r4
 80197ca:	dd27      	ble.n	801981c <GL_FillPolygon+0x158>
 80197cc:	42a3      	cmp	r3, r4
 80197ce:	dd42      	ble.n	8019856 <GL_FillPolygon+0x192>
 80197d0:	e001      	b.n	80197d6 <GL_FillPolygon+0x112>
 80197d2:	42a3      	cmp	r3, r4
 80197d4:	dd49      	ble.n	801986a <GL_FillPolygon+0x1a6>
 80197d6:	3701      	adds	r7, #1
 80197d8:	3504      	adds	r5, #4
 80197da:	e7a6      	b.n	801972a <GL_FillPolygon+0x66>
 80197dc:	2500      	movs	r5, #0
 80197de:	4628      	mov	r0, r5
 80197e0:	462f      	mov	r7, r5
 80197e2:	4b26      	ldr	r3, [pc, #152]	; (801987c <GL_FillPolygon+0x1b8>)
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	429f      	cmp	r7, r3
 80197e8:	da14      	bge.n	8019814 <GL_FillPolygon+0x150>
 80197ea:	4b25      	ldr	r3, [pc, #148]	; (8019880 <GL_FillPolygon+0x1bc>)
 80197ec:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 80197f0:	b15d      	cbz	r5, 801980a <GL_FillPolygon+0x146>
 80197f2:	f8db 2000 	ldr.w	r2, [fp]
 80197f6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80197f8:	4450      	add	r0, sl
 80197fa:	f8d2 c000 	ldr.w	ip, [r2]
 80197fe:	9300      	str	r3, [sp, #0]
 8019800:	eb0a 0203 	add.w	r2, sl, r3
 8019804:	4641      	mov	r1, r8
 8019806:	47e0      	blx	ip
 8019808:	9b00      	ldr	r3, [sp, #0]
 801980a:	f085 0501 	eor.w	r5, r5, #1
 801980e:	3701      	adds	r7, #1
 8019810:	4618      	mov	r0, r3
 8019812:	e7e6      	b.n	80197e2 <GL_FillPolygon+0x11e>
 8019814:	3401      	adds	r4, #1
 8019816:	f108 0801 	add.w	r8, r8, #1
 801981a:	e77f      	b.n	801971c <GL_FillPolygon+0x58>
 801981c:	429a      	cmp	r2, r3
 801981e:	dcd8      	bgt.n	80197d2 <GL_FillPolygon+0x10e>
 8019820:	f9b5 1000 	ldrsh.w	r1, [r5]
 8019824:	f936 000c 	ldrsh.w	r0, [r6, ip]
 8019828:	ebc2 0e04 	rsb	lr, r2, r4
 801982c:	1a40      	subs	r0, r0, r1
 801982e:	fb0e f000 	mul.w	r0, lr, r0
 8019832:	2800      	cmp	r0, #0
 8019834:	ebc2 0303 	rsb	r3, r2, r3
 8019838:	bfdb      	ittet	le
 801983a:	105a      	asrle	r2, r3, #1
 801983c:	f1c2 0201 	rsble	r2, r2, #1
 8019840:	eb00 0063 	addgt.w	r0, r0, r3, asr #1
 8019844:	1880      	addle	r0, r0, r2
 8019846:	fb90 f0f3 	sdiv	r0, r0, r3
 801984a:	4408      	add	r0, r1
 801984c:	f7ff ff1a 	bl	8019684 <_Add>
 8019850:	e7c1      	b.n	80197d6 <GL_FillPolygon+0x112>
 8019852:	42a2      	cmp	r2, r4
 8019854:	dbbf      	blt.n	80197d6 <GL_FillPolygon+0x112>
 8019856:	429a      	cmp	r2, r3
 8019858:	ddbd      	ble.n	80197d6 <GL_FillPolygon+0x112>
 801985a:	4696      	mov	lr, r2
 801985c:	f936 100c 	ldrsh.w	r1, [r6, ip]
 8019860:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019864:	461a      	mov	r2, r3
 8019866:	4673      	mov	r3, lr
 8019868:	e7de      	b.n	8019828 <GL_FillPolygon+0x164>
 801986a:	42a2      	cmp	r2, r4
 801986c:	daf5      	bge.n	801985a <GL_FillPolygon+0x196>
 801986e:	e7b2      	b.n	80197d6 <GL_FillPolygon+0x112>
 8019870:	b003      	add	sp, #12
 8019872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019876:	bf00      	nop
 8019878:	20000110 	.word	0x20000110
 801987c:	2001d38c 	.word	0x2001d38c
 8019880:	2001d390 	.word	0x2001d390
 8019884:	ffffc001 	.word	0xffffc001

08019888 <GL_DrawPoint>:
 8019888:	b508      	push	{r3, lr}
 801988a:	4b08      	ldr	r3, [pc, #32]	; (80198ac <GL_DrawPoint+0x24>)
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	7e1a      	ldrb	r2, [r3, #24]
 8019890:	2a01      	cmp	r2, #1
 8019892:	d103      	bne.n	801989c <GL_DrawPoint+0x14>
 8019894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019896:	685b      	ldr	r3, [r3, #4]
 8019898:	4798      	blx	r3
 801989a:	bd08      	pop	{r3, pc}
 801989c:	2302      	movs	r3, #2
 801989e:	3a01      	subs	r2, #1
 80198a0:	fb92 f2f3 	sdiv	r2, r2, r3
 80198a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80198a8:	f000 ba98 	b.w	8019ddc <GL_FillCircle>
 80198ac:	20000110 	.word	0x20000110

080198b0 <_DrawGradient>:
 80198b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198b4:	b091      	sub	sp, #68	; 0x44
 80198b6:	4605      	mov	r5, r0
 80198b8:	4689      	mov	r9, r1
 80198ba:	981c      	ldr	r0, [sp, #112]	; 0x70
 80198bc:	991d      	ldr	r1, [sp, #116]	; 0x74
 80198be:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 80198c2:	9002      	str	r0, [sp, #8]
 80198c4:	4614      	mov	r4, r2
 80198c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80198c8:	9200      	str	r2, [sp, #0]
 80198ca:	461e      	mov	r6, r3
 80198cc:	9101      	str	r1, [sp, #4]
 80198ce:	f7ff fe7f 	bl	80195d0 <GUI_GetColor>
 80198d2:	9a00      	ldr	r2, [sp, #0]
 80198d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80198d6:	4542      	cmp	r2, r8
 80198d8:	d109      	bne.n	80198ee <_DrawGradient+0x3e>
 80198da:	4610      	mov	r0, r2
 80198dc:	f7f7 f8de 	bl	8010a9c <LCD_SetColor>
 80198e0:	9a01      	ldr	r2, [sp, #4]
 80198e2:	b112      	cbz	r2, 80198ea <_DrawGradient+0x3a>
 80198e4:	4628      	mov	r0, r5
 80198e6:	4649      	mov	r1, r9
 80198e8:	e0b5      	b.n	8019a56 <_DrawGradient+0x1a6>
 80198ea:	4648      	mov	r0, r9
 80198ec:	e0b9      	b.n	8019a62 <_DrawGradient+0x1b2>
 80198ee:	fa5f fc82 	uxtb.w	ip, r2
 80198f2:	f8cd c018 	str.w	ip, [sp, #24]
 80198f6:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 80198fa:	f8cd c01c 	str.w	ip, [sp, #28]
 80198fe:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8019902:	f8cd c020 	str.w	ip, [sp, #32]
 8019906:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801990a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 801990e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8019912:	fa5f f388 	uxtb.w	r3, r8
 8019916:	ebcc 0303 	rsb	r3, ip, r3
 801991a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801991e:	930d      	str	r3, [sp, #52]	; 0x34
 8019920:	f3c8 2307 	ubfx	r3, r8, #8, #8
 8019924:	ebcc 0303 	rsb	r3, ip, r3
 8019928:	f8dd c020 	ldr.w	ip, [sp, #32]
 801992c:	930c      	str	r3, [sp, #48]	; 0x30
 801992e:	f3c8 4307 	ubfx	r3, r8, #16, #8
 8019932:	ebcc 0303 	rsb	r3, ip, r3
 8019936:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 801993a:	930e      	str	r3, [sp, #56]	; 0x38
 801993c:	ebcc 6818 	rsb	r8, ip, r8, lsr #24
 8019940:	ebb6 0709 	subs.w	r7, r6, r9
 8019944:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8019948:	f04f 0800 	mov.w	r8, #0
 801994c:	bf08      	it	eq
 801994e:	2701      	moveq	r7, #1
 8019950:	f109 33ff 	add.w	r3, r9, #4294967295
 8019954:	f8cd 8010 	str.w	r8, [sp, #16]
 8019958:	f8cd 800c 	str.w	r8, [sp, #12]
 801995c:	f8cd 8014 	str.w	r8, [sp, #20]
 8019960:	f04f 0a01 	mov.w	sl, #1
 8019964:	f103 0b01 	add.w	fp, r3, #1
 8019968:	45b3      	cmp	fp, r6
 801996a:	dc68      	bgt.n	8019a3e <_DrawGradient+0x18e>
 801996c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8019970:	fb98 f1f7 	sdiv	r1, r8, r7
 8019974:	4461      	add	r1, ip
 8019976:	f8dd c010 	ldr.w	ip, [sp, #16]
 801997a:	fb9c f0f7 	sdiv	r0, ip, r7
 801997e:	f8dd c020 	ldr.w	ip, [sp, #32]
 8019982:	4460      	add	r0, ip
 8019984:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8019988:	fb9c fef7 	sdiv	lr, ip, r7
 801998c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8019990:	b2c0      	uxtb	r0, r0
 8019992:	44e6      	add	lr, ip
 8019994:	f8dd c014 	ldr.w	ip, [sp, #20]
 8019998:	0400      	lsls	r0, r0, #16
 801999a:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 801999e:	fb9c f1f7 	sdiv	r1, ip, r7
 80199a2:	f8dd c018 	ldr.w	ip, [sp, #24]
 80199a6:	4461      	add	r1, ip
 80199a8:	fa5f fe8e 	uxtb.w	lr, lr
 80199ac:	b2c9      	uxtb	r1, r1
 80199ae:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 80199b2:	4301      	orrs	r1, r0
 80199b4:	45cb      	cmp	fp, r9
 80199b6:	910a      	str	r1, [sp, #40]	; 0x28
 80199b8:	dd26      	ble.n	8019a08 <_DrawGradient+0x158>
 80199ba:	4291      	cmp	r1, r2
 80199bc:	d102      	bne.n	80199c4 <_DrawGradient+0x114>
 80199be:	f10a 0a01 	add.w	sl, sl, #1
 80199c2:	e021      	b.n	8019a08 <_DrawGradient+0x158>
 80199c4:	4610      	mov	r0, r2
 80199c6:	9300      	str	r3, [sp, #0]
 80199c8:	f7f7 f868 	bl	8010a9c <LCD_SetColor>
 80199cc:	f1ba 0f01 	cmp.w	sl, #1
 80199d0:	9b00      	ldr	r3, [sp, #0]
 80199d2:	d00f      	beq.n	80199f4 <_DrawGradient+0x144>
 80199d4:	9801      	ldr	r0, [sp, #4]
 80199d6:	ebca 010b 	rsb	r1, sl, fp
 80199da:	b110      	cbz	r0, 80199e2 <_DrawGradient+0x132>
 80199dc:	4628      	mov	r0, r5
 80199de:	4622      	mov	r2, r4
 80199e0:	e003      	b.n	80199ea <_DrawGradient+0x13a>
 80199e2:	4608      	mov	r0, r1
 80199e4:	461a      	mov	r2, r3
 80199e6:	4629      	mov	r1, r5
 80199e8:	4623      	mov	r3, r4
 80199ea:	f7f6 fd89 	bl	8010500 <LCD_FillRect>
 80199ee:	f04f 0a01 	mov.w	sl, #1
 80199f2:	e009      	b.n	8019a08 <_DrawGradient+0x158>
 80199f4:	9901      	ldr	r1, [sp, #4]
 80199f6:	b111      	cbz	r1, 80199fe <_DrawGradient+0x14e>
 80199f8:	4628      	mov	r0, r5
 80199fa:	4619      	mov	r1, r3
 80199fc:	e001      	b.n	8019a02 <_DrawGradient+0x152>
 80199fe:	4618      	mov	r0, r3
 8019a00:	4629      	mov	r1, r5
 8019a02:	4622      	mov	r2, r4
 8019a04:	9b02      	ldr	r3, [sp, #8]
 8019a06:	4798      	blx	r3
 8019a08:	f8dd c014 	ldr.w	ip, [sp, #20]
 8019a0c:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8019a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019a12:	44f4      	add	ip, lr
 8019a14:	f8cd c014 	str.w	ip, [sp, #20]
 8019a18:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8019a1c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8019a20:	44f4      	add	ip, lr
 8019a22:	f8cd c00c 	str.w	ip, [sp, #12]
 8019a26:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8019a2a:	f8dd c010 	ldr.w	ip, [sp, #16]
 8019a2e:	44f4      	add	ip, lr
 8019a30:	f8cd c010 	str.w	ip, [sp, #16]
 8019a34:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8019a38:	465b      	mov	r3, fp
 8019a3a:	44e0      	add	r8, ip
 8019a3c:	e792      	b.n	8019964 <_DrawGradient+0xb4>
 8019a3e:	4610      	mov	r0, r2
 8019a40:	f7f7 f82c 	bl	8010a9c <LCD_SetColor>
 8019a44:	f1ba 0f01 	cmp.w	sl, #1
 8019a48:	d00f      	beq.n	8019a6a <_DrawGradient+0x1ba>
 8019a4a:	9801      	ldr	r0, [sp, #4]
 8019a4c:	ebca 0106 	rsb	r1, sl, r6
 8019a50:	b130      	cbz	r0, 8019a60 <_DrawGradient+0x1b0>
 8019a52:	4628      	mov	r0, r5
 8019a54:	3101      	adds	r1, #1
 8019a56:	4622      	mov	r2, r4
 8019a58:	4633      	mov	r3, r6
 8019a5a:	f7f6 fd51 	bl	8010500 <LCD_FillRect>
 8019a5e:	e00e      	b.n	8019a7e <_DrawGradient+0x1ce>
 8019a60:	1c48      	adds	r0, r1, #1
 8019a62:	4629      	mov	r1, r5
 8019a64:	4632      	mov	r2, r6
 8019a66:	4623      	mov	r3, r4
 8019a68:	e7f7      	b.n	8019a5a <_DrawGradient+0x1aa>
 8019a6a:	9901      	ldr	r1, [sp, #4]
 8019a6c:	b111      	cbz	r1, 8019a74 <_DrawGradient+0x1c4>
 8019a6e:	4628      	mov	r0, r5
 8019a70:	4631      	mov	r1, r6
 8019a72:	e001      	b.n	8019a78 <_DrawGradient+0x1c8>
 8019a74:	4630      	mov	r0, r6
 8019a76:	4629      	mov	r1, r5
 8019a78:	4622      	mov	r2, r4
 8019a7a:	9b02      	ldr	r3, [sp, #8]
 8019a7c:	4798      	blx	r3
 8019a7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019a80:	b011      	add	sp, #68	; 0x44
 8019a82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a86:	f7f7 b809 	b.w	8010a9c <LCD_SetColor>
	...

08019a8c <GUI_DrawGradientV>:
 8019a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a90:	4c15      	ldr	r4, [pc, #84]	; (8019ae8 <GUI_DrawGradientV+0x5c>)
 8019a92:	6824      	ldr	r4, [r4, #0]
 8019a94:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8019a96:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8019a98:	b087      	sub	sp, #28
 8019a9a:	eb00 0905 	add.w	r9, r0, r5
 8019a9e:	eb01 0804 	add.w	r8, r1, r4
 8019aa2:	4415      	add	r5, r2
 8019aa4:	441c      	add	r4, r3
 8019aa6:	a804      	add	r0, sp, #16
 8019aa8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8019aaa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019aac:	f8ad 9010 	strh.w	r9, [sp, #16]
 8019ab0:	f8ad 5014 	strh.w	r5, [sp, #20]
 8019ab4:	f8ad 8012 	strh.w	r8, [sp, #18]
 8019ab8:	f8ad 4016 	strh.w	r4, [sp, #22]
 8019abc:	f7f3 ff30 	bl	800d920 <WM__InitIVRSearch>
 8019ac0:	b170      	cbz	r0, 8019ae0 <GUI_DrawGradientV+0x54>
 8019ac2:	4b0a      	ldr	r3, [pc, #40]	; (8019aec <GUI_DrawGradientV+0x60>)
 8019ac4:	9302      	str	r3, [sp, #8]
 8019ac6:	2301      	movs	r3, #1
 8019ac8:	9303      	str	r3, [sp, #12]
 8019aca:	4648      	mov	r0, r9
 8019acc:	4641      	mov	r1, r8
 8019ace:	462a      	mov	r2, r5
 8019ad0:	4623      	mov	r3, r4
 8019ad2:	9700      	str	r7, [sp, #0]
 8019ad4:	9601      	str	r6, [sp, #4]
 8019ad6:	f7ff feeb 	bl	80198b0 <_DrawGradient>
 8019ada:	f7f3 fe5f 	bl	800d79c <WM__GetNextIVR>
 8019ade:	e7ef      	b.n	8019ac0 <GUI_DrawGradientV+0x34>
 8019ae0:	b007      	add	sp, #28
 8019ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ae6:	bf00      	nop
 8019ae8:	20000110 	.word	0x20000110
 8019aec:	08010469 	.word	0x08010469

08019af0 <GUI_DrawGradientH>:
 8019af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019af4:	4c15      	ldr	r4, [pc, #84]	; (8019b4c <GUI_DrawGradientH+0x5c>)
 8019af6:	6825      	ldr	r5, [r4, #0]
 8019af8:	6cec      	ldr	r4, [r5, #76]	; 0x4c
 8019afa:	6d2d      	ldr	r5, [r5, #80]	; 0x50
 8019afc:	b087      	sub	sp, #28
 8019afe:	eb00 0804 	add.w	r8, r0, r4
 8019b02:	eb01 0905 	add.w	r9, r1, r5
 8019b06:	4414      	add	r4, r2
 8019b08:	441d      	add	r5, r3
 8019b0a:	a804      	add	r0, sp, #16
 8019b0c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8019b0e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019b10:	f8ad 8010 	strh.w	r8, [sp, #16]
 8019b14:	f8ad 4014 	strh.w	r4, [sp, #20]
 8019b18:	f8ad 9012 	strh.w	r9, [sp, #18]
 8019b1c:	f8ad 5016 	strh.w	r5, [sp, #22]
 8019b20:	f7f3 fefe 	bl	800d920 <WM__InitIVRSearch>
 8019b24:	b170      	cbz	r0, 8019b44 <GUI_DrawGradientH+0x54>
 8019b26:	4b0a      	ldr	r3, [pc, #40]	; (8019b50 <GUI_DrawGradientH+0x60>)
 8019b28:	9302      	str	r3, [sp, #8]
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	9303      	str	r3, [sp, #12]
 8019b2e:	4648      	mov	r0, r9
 8019b30:	4641      	mov	r1, r8
 8019b32:	462a      	mov	r2, r5
 8019b34:	4623      	mov	r3, r4
 8019b36:	9700      	str	r7, [sp, #0]
 8019b38:	9601      	str	r6, [sp, #4]
 8019b3a:	f7ff feb9 	bl	80198b0 <_DrawGradient>
 8019b3e:	f7f3 fe2d 	bl	800d79c <WM__GetNextIVR>
 8019b42:	e7ef      	b.n	8019b24 <GUI_DrawGradientH+0x34>
 8019b44:	b007      	add	sp, #28
 8019b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b4a:	bf00      	nop
 8019b4c:	20000110 	.word	0x20000110
 8019b50:	080104b5 	.word	0x080104b5

08019b54 <GL_DrawBitmap>:
 8019b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b58:	68c6      	ldr	r6, [r0, #12]
 8019b5a:	b087      	sub	sp, #28
 8019b5c:	4604      	mov	r4, r0
 8019b5e:	2000      	movs	r0, #0
 8019b60:	4688      	mov	r8, r1
 8019b62:	4617      	mov	r7, r2
 8019b64:	f7f8 f990 	bl	8011e88 <GUI_SetDrawMode>
 8019b68:	4605      	mov	r5, r0
 8019b6a:	b126      	cbz	r6, 8019b76 <GL_DrawBitmap+0x22>
 8019b6c:	7933      	ldrb	r3, [r6, #4]
 8019b6e:	b113      	cbz	r3, 8019b76 <GL_DrawBitmap+0x22>
 8019b70:	f040 0002 	orr.w	r0, r0, #2
 8019b74:	e001      	b.n	8019b7a <GL_DrawBitmap+0x26>
 8019b76:	f025 0002 	bic.w	r0, r5, #2
 8019b7a:	f7f8 f985 	bl	8011e88 <GUI_SetDrawMode>
 8019b7e:	6921      	ldr	r1, [r4, #16]
 8019b80:	b169      	cbz	r1, 8019b9e <GL_DrawBitmap+0x4a>
 8019b82:	68a0      	ldr	r0, [r4, #8]
 8019b84:	8822      	ldrh	r2, [r4, #0]
 8019b86:	8863      	ldrh	r3, [r4, #2]
 8019b88:	9000      	str	r0, [sp, #0]
 8019b8a:	68e0      	ldr	r0, [r4, #12]
 8019b8c:	9001      	str	r0, [sp, #4]
 8019b8e:	2001      	movs	r0, #1
 8019b90:	9002      	str	r0, [sp, #8]
 8019b92:	9003      	str	r0, [sp, #12]
 8019b94:	680c      	ldr	r4, [r1, #0]
 8019b96:	4640      	mov	r0, r8
 8019b98:	4639      	mov	r1, r7
 8019b9a:	47a0      	blx	r4
 8019b9c:	e020      	b.n	8019be0 <GL_DrawBitmap+0x8c>
 8019b9e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8019bf0 <GL_DrawBitmap+0x9c>
 8019ba2:	4a12      	ldr	r2, [pc, #72]	; (8019bec <GL_DrawBitmap+0x98>)
 8019ba4:	f8d9 3000 	ldr.w	r3, [r9]
 8019ba8:	6816      	ldr	r6, [r2, #0]
 8019baa:	68e0      	ldr	r0, [r4, #12]
 8019bac:	7c5a      	ldrb	r2, [r3, #17]
 8019bae:	4621      	mov	r1, r4
 8019bb0:	47b0      	blx	r6
 8019bb2:	88e1      	ldrh	r1, [r4, #6]
 8019bb4:	4606      	mov	r6, r0
 8019bb6:	b920      	cbnz	r0, 8019bc2 <GL_DrawBitmap+0x6e>
 8019bb8:	2901      	cmp	r1, #1
 8019bba:	bf04      	itt	eq
 8019bbc:	f8d9 3000 	ldreq.w	r3, [r9]
 8019bc0:	6b9e      	ldreq	r6, [r3, #56]	; 0x38
 8019bc2:	2001      	movs	r0, #1
 8019bc4:	8822      	ldrh	r2, [r4, #0]
 8019bc6:	8863      	ldrh	r3, [r4, #2]
 8019bc8:	9000      	str	r0, [sp, #0]
 8019bca:	9001      	str	r0, [sp, #4]
 8019bcc:	9102      	str	r1, [sp, #8]
 8019bce:	88a1      	ldrh	r1, [r4, #4]
 8019bd0:	9103      	str	r1, [sp, #12]
 8019bd2:	68a1      	ldr	r1, [r4, #8]
 8019bd4:	9104      	str	r1, [sp, #16]
 8019bd6:	9605      	str	r6, [sp, #20]
 8019bd8:	4640      	mov	r0, r8
 8019bda:	4639      	mov	r1, r7
 8019bdc:	f7f6 fd98 	bl	8010710 <LCD_DrawBitmap>
 8019be0:	4628      	mov	r0, r5
 8019be2:	b007      	add	sp, #28
 8019be4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019be8:	f7f8 b94e 	b.w	8011e88 <GUI_SetDrawMode>
 8019bec:	20000118 	.word	0x20000118
 8019bf0:	20000110 	.word	0x20000110

08019bf4 <GUI_DrawBitmap>:
 8019bf4:	4b11      	ldr	r3, [pc, #68]	; (8019c3c <GUI_DrawBitmap+0x48>)
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019bfa:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8019bfc:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8019bfe:	8803      	ldrh	r3, [r0, #0]
 8019c00:	440e      	add	r6, r1
 8019c02:	3b01      	subs	r3, #1
 8019c04:	4433      	add	r3, r6
 8019c06:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019c0a:	8843      	ldrh	r3, [r0, #2]
 8019c0c:	f8ad 6000 	strh.w	r6, [sp]
 8019c10:	4415      	add	r5, r2
 8019c12:	3b01      	subs	r3, #1
 8019c14:	4604      	mov	r4, r0
 8019c16:	442b      	add	r3, r5
 8019c18:	4668      	mov	r0, sp
 8019c1a:	f8ad 5002 	strh.w	r5, [sp, #2]
 8019c1e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019c22:	f7f3 fe7d 	bl	800d920 <WM__InitIVRSearch>
 8019c26:	b138      	cbz	r0, 8019c38 <GUI_DrawBitmap+0x44>
 8019c28:	4620      	mov	r0, r4
 8019c2a:	4631      	mov	r1, r6
 8019c2c:	462a      	mov	r2, r5
 8019c2e:	f7ff ff91 	bl	8019b54 <GL_DrawBitmap>
 8019c32:	f7f3 fdb3 	bl	800d79c <WM__GetNextIVR>
 8019c36:	e7f6      	b.n	8019c26 <GUI_DrawBitmap+0x32>
 8019c38:	b002      	add	sp, #8
 8019c3a:	bd70      	pop	{r4, r5, r6, pc}
 8019c3c:	20000110 	.word	0x20000110

08019c40 <GUI__DispStringInRect>:
 8019c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c44:	b087      	sub	sp, #28
 8019c46:	460c      	mov	r4, r1
 8019c48:	9001      	str	r0, [sp, #4]
 8019c4a:	4691      	mov	r9, r2
 8019c4c:	461d      	mov	r5, r3
 8019c4e:	f7f9 fd39 	bl	80136c4 <GUI_GetFontDistY>
 8019c52:	9f01      	ldr	r7, [sp, #4]
 8019c54:	4680      	mov	r8, r0
 8019c56:	b124      	cbz	r4, 8019c62 <GUI__DispStringInRect+0x22>
 8019c58:	6820      	ldr	r0, [r4, #0]
 8019c5a:	6861      	ldr	r1, [r4, #4]
 8019c5c:	ab04      	add	r3, sp, #16
 8019c5e:	c303      	stmia	r3!, {r0, r1}
 8019c60:	e002      	b.n	8019c68 <GUI__DispStringInRect+0x28>
 8019c62:	a804      	add	r0, sp, #16
 8019c64:	f7ff fcbb 	bl	80195de <GUI_GetClientRect>
 8019c68:	f019 0a0c 	ands.w	sl, r9, #12
 8019c6c:	d002      	beq.n	8019c74 <GUI__DispStringInRect+0x34>
 8019c6e:	462c      	mov	r4, r5
 8019c70:	2600      	movs	r6, #0
 8019c72:	e016      	b.n	8019ca2 <GUI__DispStringInRect+0x62>
 8019c74:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 8019c78:	e032      	b.n	8019ce0 <GUI__DispStringInRect+0xa0>
 8019c7a:	4621      	mov	r1, r4
 8019c7c:	9801      	ldr	r0, [sp, #4]
 8019c7e:	f7f9 fc57 	bl	8013530 <GUI__GetLineNumChars>
 8019c82:	f8dd b004 	ldr.w	fp, [sp, #4]
 8019c86:	4601      	mov	r1, r0
 8019c88:	1a24      	subs	r4, r4, r0
 8019c8a:	4658      	mov	r0, fp
 8019c8c:	f7fd fef8 	bl	8017a80 <GUI_UC__NumChars2NumBytes>
 8019c90:	eb0b 0300 	add.w	r3, fp, r0
 8019c94:	a806      	add	r0, sp, #24
 8019c96:	3601      	adds	r6, #1
 8019c98:	f840 3d14 	str.w	r3, [r0, #-20]!
 8019c9c:	f000 fd09 	bl	801a6b2 <GUI__HandleEOLine>
 8019ca0:	b908      	cbnz	r0, 8019ca6 <GUI__DispStringInRect+0x66>
 8019ca2:	2c00      	cmp	r4, #0
 8019ca4:	d1e9      	bne.n	8019c7a <GUI__DispStringInRect+0x3a>
 8019ca6:	f1ba 0f08 	cmp.w	sl, #8
 8019caa:	d005      	beq.n	8019cb8 <GUI__DispStringInRect+0x78>
 8019cac:	f1ba 0f0c 	cmp.w	sl, #12
 8019cb0:	d008      	beq.n	8019cc4 <GUI__DispStringInRect+0x84>
 8019cb2:	f1ba 0f04 	cmp.w	sl, #4
 8019cb6:	d112      	bne.n	8019cde <GUI__DispStringInRect+0x9e>
 8019cb8:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8019cbc:	fb08 4416 	mls	r4, r8, r6, r4
 8019cc0:	3401      	adds	r4, #1
 8019cc2:	e00d      	b.n	8019ce0 <GUI__DispStringInRect+0xa0>
 8019cc4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019cc8:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8019ccc:	1ae4      	subs	r4, r4, r3
 8019cce:	3401      	adds	r4, #1
 8019cd0:	fb08 4416 	mls	r4, r8, r6, r4
 8019cd4:	2202      	movs	r2, #2
 8019cd6:	fb94 f4f2 	sdiv	r4, r4, r2
 8019cda:	441c      	add	r4, r3
 8019cdc:	e000      	b.n	8019ce0 <GUI__DispStringInRect+0xa0>
 8019cde:	2400      	movs	r4, #0
 8019ce0:	9701      	str	r7, [sp, #4]
 8019ce2:	2600      	movs	r6, #0
 8019ce4:	2d00      	cmp	r5, #0
 8019ce6:	d04b      	beq.n	8019d80 <GUI__DispStringInRect+0x140>
 8019ce8:	4629      	mov	r1, r5
 8019cea:	9801      	ldr	r0, [sp, #4]
 8019cec:	f7f9 fc20 	bl	8013530 <GUI__GetLineNumChars>
 8019cf0:	4607      	mov	r7, r0
 8019cf2:	1a2d      	subs	r5, r5, r0
 8019cf4:	4639      	mov	r1, r7
 8019cf6:	9801      	ldr	r0, [sp, #4]
 8019cf8:	f7f9 fc48 	bl	801358c <GUI__GetLineDistX>
 8019cfc:	f009 0303 	and.w	r3, r9, #3
 8019d00:	2b01      	cmp	r3, #1
 8019d02:	d00f      	beq.n	8019d24 <GUI__DispStringInRect+0xe4>
 8019d04:	2b02      	cmp	r3, #2
 8019d06:	d003      	beq.n	8019d10 <GUI__DispStringInRect+0xd0>
 8019d08:	b983      	cbnz	r3, 8019d2c <GUI__DispStringInRect+0xec>
 8019d0a:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8019d0e:	e00d      	b.n	8019d2c <GUI__DispStringInRect+0xec>
 8019d10:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019d14:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8019d18:	1ab6      	subs	r6, r6, r2
 8019d1a:	1a36      	subs	r6, r6, r0
 8019d1c:	fb96 f6f3 	sdiv	r6, r6, r3
 8019d20:	4416      	add	r6, r2
 8019d22:	e003      	b.n	8019d2c <GUI__DispStringInRect+0xec>
 8019d24:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8019d28:	1a36      	subs	r6, r6, r0
 8019d2a:	3601      	adds	r6, #1
 8019d2c:	4b16      	ldr	r3, [pc, #88]	; (8019d88 <GUI__DispStringInRect+0x148>)
 8019d2e:	6819      	ldr	r1, [r3, #0]
 8019d30:	3801      	subs	r0, #1
 8019d32:	b2a3      	uxth	r3, r4
 8019d34:	b2b2      	uxth	r2, r6
 8019d36:	848b      	strh	r3, [r1, #36]	; 0x24
 8019d38:	4430      	add	r0, r6
 8019d3a:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019d3e:	f108 33ff 	add.w	r3, r8, #4294967295
 8019d42:	4423      	add	r3, r4
 8019d44:	844a      	strh	r2, [r1, #34]	; 0x22
 8019d46:	f8ad 2008 	strh.w	r2, [sp, #8]
 8019d4a:	4639      	mov	r1, r7
 8019d4c:	aa02      	add	r2, sp, #8
 8019d4e:	f8ad 000c 	strh.w	r0, [sp, #12]
 8019d52:	9801      	ldr	r0, [sp, #4]
 8019d54:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019d58:	f7f9 fc48 	bl	80135ec <GUI__DispLine>
 8019d5c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8019d60:	4639      	mov	r1, r7
 8019d62:	4650      	mov	r0, sl
 8019d64:	f7fd fe8c 	bl	8017a80 <GUI_UC__NumChars2NumBytes>
 8019d68:	af06      	add	r7, sp, #24
 8019d6a:	4450      	add	r0, sl
 8019d6c:	f847 0d14 	str.w	r0, [r7, #-20]!
 8019d70:	f7f9 fca8 	bl	80136c4 <GUI_GetFontDistY>
 8019d74:	4404      	add	r4, r0
 8019d76:	4638      	mov	r0, r7
 8019d78:	f000 fc9b 	bl	801a6b2 <GUI__HandleEOLine>
 8019d7c:	2800      	cmp	r0, #0
 8019d7e:	d0b1      	beq.n	8019ce4 <GUI__DispStringInRect+0xa4>
 8019d80:	b007      	add	sp, #28
 8019d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d86:	bf00      	nop
 8019d88:	20000110 	.word	0x20000110

08019d8c <GUI_DispStringInRectMax>:
 8019d8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019d90:	460c      	mov	r4, r1
 8019d92:	4690      	mov	r8, r2
 8019d94:	461f      	mov	r7, r3
 8019d96:	4606      	mov	r6, r0
 8019d98:	b1c0      	cbz	r0, 8019dcc <GUI_DispStringInRectMax+0x40>
 8019d9a:	b169      	cbz	r1, 8019db8 <GUI_DispStringInRectMax+0x2c>
 8019d9c:	4608      	mov	r0, r1
 8019d9e:	f7f2 fa21 	bl	800c1e4 <WM_SetUserClipRect>
 8019da2:	4605      	mov	r5, r0
 8019da4:	b148      	cbz	r0, 8019dba <GUI_DispStringInRectMax+0x2e>
 8019da6:	4668      	mov	r0, sp
 8019da8:	4621      	mov	r1, r4
 8019daa:	462a      	mov	r2, r5
 8019dac:	f7f6 ffa4 	bl	8010cf8 <GUI__IntersectRects>
 8019db0:	4668      	mov	r0, sp
 8019db2:	f7f2 fa17 	bl	800c1e4 <WM_SetUserClipRect>
 8019db6:	e000      	b.n	8019dba <GUI_DispStringInRectMax+0x2e>
 8019db8:	460d      	mov	r5, r1
 8019dba:	4630      	mov	r0, r6
 8019dbc:	4621      	mov	r1, r4
 8019dbe:	4642      	mov	r2, r8
 8019dc0:	463b      	mov	r3, r7
 8019dc2:	f7ff ff3d 	bl	8019c40 <GUI__DispStringInRect>
 8019dc6:	4628      	mov	r0, r5
 8019dc8:	f7f2 fa0c 	bl	800c1e4 <WM_SetUserClipRect>
 8019dcc:	b002      	add	sp, #8
 8019dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019dd2 <GUI_DispStringInRect>:
 8019dd2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019dd6:	f7ff bfd9 	b.w	8019d8c <GUI_DispStringInRectMax>
	...

08019ddc <GL_FillCircle>:
 8019ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019de0:	f240 29c3 	movw	r9, #707	; 0x2c3
 8019de4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8019e9c <GL_FillCircle+0xc0>
 8019de8:	fb09 f902 	mul.w	r9, r9, r2
 8019dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019df0:	fb99 f9f3 	sdiv	r9, r9, r3
 8019df4:	f8d8 3000 	ldr.w	r3, [r8]
 8019df8:	f04f 0b02 	mov.w	fp, #2
 8019dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019dfe:	4606      	mov	r6, r0
 8019e00:	fb92 fbfb 	sdiv	fp, r2, fp
 8019e04:	1a80      	subs	r0, r0, r2
 8019e06:	4614      	mov	r4, r2
 8019e08:	fb02 bb02 	mla	fp, r2, r2, fp
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	18b2      	adds	r2, r6, r2
 8019e10:	460f      	mov	r7, r1
 8019e12:	4798      	blx	r3
 8019e14:	f109 0901 	add.w	r9, r9, #1
 8019e18:	2501      	movs	r5, #1
 8019e1a:	454d      	cmp	r5, r9
 8019e1c:	dc3a      	bgt.n	8019e94 <GL_FillCircle+0xb8>
 8019e1e:	fb04 f304 	mul.w	r3, r4, r4
 8019e22:	fb05 3305 	mla	r3, r5, r5, r3
 8019e26:	455b      	cmp	r3, fp
 8019e28:	dd1b      	ble.n	8019e62 <GL_FillCircle+0x86>
 8019e2a:	454c      	cmp	r4, r9
 8019e2c:	dd18      	ble.n	8019e60 <GL_FillCircle+0x84>
 8019e2e:	f8d8 2000 	ldr.w	r2, [r8]
 8019e32:	1c73      	adds	r3, r6, #1
 8019e34:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8019e36:	f106 3aff 	add.w	sl, r6, #4294967295
 8019e3a:	1b5b      	subs	r3, r3, r5
 8019e3c:	44aa      	add	sl, r5
 8019e3e:	f8d2 c000 	ldr.w	ip, [r2]
 8019e42:	9301      	str	r3, [sp, #4]
 8019e44:	4618      	mov	r0, r3
 8019e46:	1939      	adds	r1, r7, r4
 8019e48:	4652      	mov	r2, sl
 8019e4a:	47e0      	blx	ip
 8019e4c:	f8d8 2000 	ldr.w	r2, [r8]
 8019e50:	9b01      	ldr	r3, [sp, #4]
 8019e52:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8019e54:	4618      	mov	r0, r3
 8019e56:	f8d2 c000 	ldr.w	ip, [r2]
 8019e5a:	1b39      	subs	r1, r7, r4
 8019e5c:	4652      	mov	r2, sl
 8019e5e:	47e0      	blx	ip
 8019e60:	3c01      	subs	r4, #1
 8019e62:	f8d8 2000 	ldr.w	r2, [r8]
 8019e66:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8019e68:	1b33      	subs	r3, r6, r4
 8019e6a:	eb06 0a04 	add.w	sl, r6, r4
 8019e6e:	f8d2 c000 	ldr.w	ip, [r2]
 8019e72:	9301      	str	r3, [sp, #4]
 8019e74:	4618      	mov	r0, r3
 8019e76:	19e9      	adds	r1, r5, r7
 8019e78:	4652      	mov	r2, sl
 8019e7a:	47e0      	blx	ip
 8019e7c:	f8d8 2000 	ldr.w	r2, [r8]
 8019e80:	9b01      	ldr	r3, [sp, #4]
 8019e82:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8019e84:	1b79      	subs	r1, r7, r5
 8019e86:	f8d2 c000 	ldr.w	ip, [r2]
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	4652      	mov	r2, sl
 8019e8e:	47e0      	blx	ip
 8019e90:	3501      	adds	r5, #1
 8019e92:	e7c2      	b.n	8019e1a <GL_FillCircle+0x3e>
 8019e94:	b003      	add	sp, #12
 8019e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e9a:	bf00      	nop
 8019e9c:	20000110 	.word	0x20000110

08019ea0 <_GetIndexMask_0>:
 8019ea0:	b508      	push	{r3, lr}
 8019ea2:	f7f6 f9eb 	bl	801027c <LCD_GetNumColors>
 8019ea6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8019eaa:	d010      	beq.n	8019ece <_GetIndexMask_0+0x2e>
 8019eac:	287f      	cmp	r0, #127	; 0x7f
 8019eae:	d810      	bhi.n	8019ed2 <_GetIndexMask_0+0x32>
 8019eb0:	283f      	cmp	r0, #63	; 0x3f
 8019eb2:	d810      	bhi.n	8019ed6 <_GetIndexMask_0+0x36>
 8019eb4:	281f      	cmp	r0, #31
 8019eb6:	d810      	bhi.n	8019eda <_GetIndexMask_0+0x3a>
 8019eb8:	280f      	cmp	r0, #15
 8019eba:	d810      	bhi.n	8019ede <_GetIndexMask_0+0x3e>
 8019ebc:	2807      	cmp	r0, #7
 8019ebe:	d810      	bhi.n	8019ee2 <_GetIndexMask_0+0x42>
 8019ec0:	2803      	cmp	r0, #3
 8019ec2:	d810      	bhi.n	8019ee6 <_GetIndexMask_0+0x46>
 8019ec4:	2801      	cmp	r0, #1
 8019ec6:	bf94      	ite	ls
 8019ec8:	2000      	movls	r0, #0
 8019eca:	2001      	movhi	r0, #1
 8019ecc:	e00c      	b.n	8019ee8 <_GetIndexMask_0+0x48>
 8019ece:	2008      	movs	r0, #8
 8019ed0:	e00a      	b.n	8019ee8 <_GetIndexMask_0+0x48>
 8019ed2:	2007      	movs	r0, #7
 8019ed4:	e008      	b.n	8019ee8 <_GetIndexMask_0+0x48>
 8019ed6:	2006      	movs	r0, #6
 8019ed8:	e006      	b.n	8019ee8 <_GetIndexMask_0+0x48>
 8019eda:	2005      	movs	r0, #5
 8019edc:	e004      	b.n	8019ee8 <_GetIndexMask_0+0x48>
 8019ede:	2004      	movs	r0, #4
 8019ee0:	e002      	b.n	8019ee8 <_GetIndexMask_0+0x48>
 8019ee2:	2003      	movs	r0, #3
 8019ee4:	e000      	b.n	8019ee8 <_GetIndexMask_0+0x48>
 8019ee6:	2002      	movs	r0, #2
 8019ee8:	2301      	movs	r3, #1
 8019eea:	fa03 f000 	lsl.w	r0, r3, r0
 8019eee:	3801      	subs	r0, #1
 8019ef0:	bd08      	pop	{r3, pc}

08019ef2 <_Index2Color_0>:
 8019ef2:	b538      	push	{r3, r4, r5, lr}
 8019ef4:	4604      	mov	r4, r0
 8019ef6:	f7f6 f9c1 	bl	801027c <LCD_GetNumColors>
 8019efa:	4605      	mov	r5, r0
 8019efc:	f7f6 f9dc 	bl	80102b8 <LCD_GetPalette>
 8019f00:	42ac      	cmp	r4, r5
 8019f02:	d203      	bcs.n	8019f0c <_Index2Color_0+0x1a>
 8019f04:	b118      	cbz	r0, 8019f0e <_Index2Color_0+0x1c>
 8019f06:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8019f0a:	bd38      	pop	{r3, r4, r5, pc}
 8019f0c:	2000      	movs	r0, #0
 8019f0e:	bd38      	pop	{r3, r4, r5, pc}

08019f10 <_Color2Index_0>:
 8019f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f14:	4681      	mov	r9, r0
 8019f16:	f7f6 f9b1 	bl	801027c <LCD_GetNumColors>
 8019f1a:	4680      	mov	r8, r0
 8019f1c:	f7f6 f9cc 	bl	80102b8 <LCD_GetPalette>
 8019f20:	4606      	mov	r6, r0
 8019f22:	b1d8      	cbz	r0, 8019f5c <_Color2Index_0+0x4c>
 8019f24:	2300      	movs	r3, #0
 8019f26:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8019f2a:	4591      	cmp	r9, r2
 8019f2c:	d01a      	beq.n	8019f64 <_Color2Index_0+0x54>
 8019f2e:	3301      	adds	r3, #1
 8019f30:	4543      	cmp	r3, r8
 8019f32:	dbf8      	blt.n	8019f26 <_Color2Index_0+0x16>
 8019f34:	2500      	movs	r5, #0
 8019f36:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8019f3a:	462c      	mov	r4, r5
 8019f3c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8019f40:	4648      	mov	r0, r9
 8019f42:	f000 fbe5 	bl	801a710 <GUI_CalcColorDist>
 8019f46:	42b8      	cmp	r0, r7
 8019f48:	bf38      	it	cc
 8019f4a:	4625      	movcc	r5, r4
 8019f4c:	f104 0401 	add.w	r4, r4, #1
 8019f50:	bf28      	it	cs
 8019f52:	4638      	movcs	r0, r7
 8019f54:	4544      	cmp	r4, r8
 8019f56:	da02      	bge.n	8019f5e <_Color2Index_0+0x4e>
 8019f58:	4607      	mov	r7, r0
 8019f5a:	e7ef      	b.n	8019f3c <_Color2Index_0+0x2c>
 8019f5c:	4605      	mov	r5, r0
 8019f5e:	4628      	mov	r0, r5
 8019f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f64:	4618      	mov	r0, r3
 8019f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019f6a <_GetArrowPara>:
 8019f6a:	b510      	push	{r4, lr}
 8019f6c:	b121      	cbz	r1, 8019f78 <_GetArrowPara+0xe>
 8019f6e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019f72:	f9b0 1000 	ldrsh.w	r1, [r0]
 8019f76:	e003      	b.n	8019f80 <_GetArrowPara+0x16>
 8019f78:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8019f7c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019f80:	1a61      	subs	r1, r4, r1
 8019f82:	3101      	adds	r1, #1
 8019f84:	1f0c      	subs	r4, r1, #4
 8019f86:	2003      	movs	r0, #3
 8019f88:	fb94 f0f0 	sdiv	r0, r4, r0
 8019f8c:	6010      	str	r0, [r2, #0]
 8019f8e:	1a08      	subs	r0, r1, r0
 8019f90:	eba1 0160 	sub.w	r1, r1, r0, asr #1
 8019f94:	3901      	subs	r1, #1
 8019f96:	6019      	str	r1, [r3, #0]
 8019f98:	bd10      	pop	{r4, pc}

08019f9a <_DrawGraspH>:
 8019f9a:	b570      	push	{r4, r5, r6, lr}
 8019f9c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019fa0:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8019fa4:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8019fa8:	441e      	add	r6, r3
 8019faa:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8019fae:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8019fb0:	1b5c      	subs	r4, r3, r5
 8019fb2:	3403      	adds	r4, #3
 8019fb4:	10a4      	asrs	r4, r4, #2
 8019fb6:	4425      	add	r5, r4
 8019fb8:	1076      	asrs	r6, r6, #1
 8019fba:	1b1c      	subs	r4, r3, r4
 8019fbc:	f7f7 ff88 	bl	8011ed0 <GUI_SetColor>
 8019fc0:	4630      	mov	r0, r6
 8019fc2:	4629      	mov	r1, r5
 8019fc4:	4622      	mov	r2, r4
 8019fc6:	f7f8 f995 	bl	80122f4 <GUI_DrawVLine>
 8019fca:	1cb0      	adds	r0, r6, #2
 8019fcc:	4629      	mov	r1, r5
 8019fce:	4622      	mov	r2, r4
 8019fd0:	f7f8 f990 	bl	80122f4 <GUI_DrawVLine>
 8019fd4:	1d30      	adds	r0, r6, #4
 8019fd6:	4629      	mov	r1, r5
 8019fd8:	4622      	mov	r2, r4
 8019fda:	f7f8 f98b 	bl	80122f4 <GUI_DrawVLine>
 8019fde:	1eb0      	subs	r0, r6, #2
 8019fe0:	4629      	mov	r1, r5
 8019fe2:	4622      	mov	r2, r4
 8019fe4:	f7f8 f986 	bl	80122f4 <GUI_DrawVLine>
 8019fe8:	1f30      	subs	r0, r6, #4
 8019fea:	4629      	mov	r1, r5
 8019fec:	4622      	mov	r2, r4
 8019fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ff2:	f7f8 b97f 	b.w	80122f4 <GUI_DrawVLine>

08019ff6 <_DrawGraspV>:
 8019ff6:	b570      	push	{r4, r5, r6, lr}
 8019ff8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019ffc:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 801a000:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a004:	441e      	add	r6, r3
 801a006:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a00a:	6a88      	ldr	r0, [r1, #40]	; 0x28
 801a00c:	1b5c      	subs	r4, r3, r5
 801a00e:	3403      	adds	r4, #3
 801a010:	10a4      	asrs	r4, r4, #2
 801a012:	4425      	add	r5, r4
 801a014:	1076      	asrs	r6, r6, #1
 801a016:	1b1c      	subs	r4, r3, r4
 801a018:	f7f7 ff5a 	bl	8011ed0 <GUI_SetColor>
 801a01c:	4630      	mov	r0, r6
 801a01e:	4629      	mov	r1, r5
 801a020:	4622      	mov	r2, r4
 801a022:	f7f8 fbdf 	bl	80127e4 <GUI_DrawHLine>
 801a026:	1cb0      	adds	r0, r6, #2
 801a028:	4629      	mov	r1, r5
 801a02a:	4622      	mov	r2, r4
 801a02c:	f7f8 fbda 	bl	80127e4 <GUI_DrawHLine>
 801a030:	1d30      	adds	r0, r6, #4
 801a032:	4629      	mov	r1, r5
 801a034:	4622      	mov	r2, r4
 801a036:	f7f8 fbd5 	bl	80127e4 <GUI_DrawHLine>
 801a03a:	1eb0      	subs	r0, r6, #2
 801a03c:	4629      	mov	r1, r5
 801a03e:	4622      	mov	r2, r4
 801a040:	f7f8 fbd0 	bl	80127e4 <GUI_DrawHLine>
 801a044:	1f30      	subs	r0, r6, #4
 801a046:	4629      	mov	r1, r5
 801a048:	4622      	mov	r2, r4
 801a04a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a04e:	f7f8 bbc9 	b.w	80127e4 <GUI_DrawHLine>

0801a052 <_DrawFrame>:
 801a052:	b538      	push	{r3, r4, r5, lr}
 801a054:	4604      	mov	r4, r0
 801a056:	6808      	ldr	r0, [r1, #0]
 801a058:	460d      	mov	r5, r1
 801a05a:	f7f7 ff39 	bl	8011ed0 <GUI_SetColor>
 801a05e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a062:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a066:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801a06a:	3101      	adds	r1, #1
 801a06c:	3a01      	subs	r2, #1
 801a06e:	f7f8 fbb9 	bl	80127e4 <GUI_DrawHLine>
 801a072:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a076:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a07a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801a07e:	3101      	adds	r1, #1
 801a080:	3a01      	subs	r2, #1
 801a082:	f7f8 fbaf 	bl	80127e4 <GUI_DrawHLine>
 801a086:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a08a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a08e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a092:	3101      	adds	r1, #1
 801a094:	3a01      	subs	r2, #1
 801a096:	f7f8 f92d 	bl	80122f4 <GUI_DrawVLine>
 801a09a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a09e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a0a2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a0a6:	3101      	adds	r1, #1
 801a0a8:	3a01      	subs	r2, #1
 801a0aa:	f7f8 f923 	bl	80122f4 <GUI_DrawVLine>
 801a0ae:	6868      	ldr	r0, [r5, #4]
 801a0b0:	f7f7 ff0e 	bl	8011ed0 <GUI_SetColor>
 801a0b4:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801a0b8:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a0bc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a0c0:	3001      	adds	r0, #1
 801a0c2:	3101      	adds	r1, #1
 801a0c4:	3a01      	subs	r2, #1
 801a0c6:	f7f8 fb8d 	bl	80127e4 <GUI_DrawHLine>
 801a0ca:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801a0ce:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a0d2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a0d6:	3801      	subs	r0, #1
 801a0d8:	3101      	adds	r1, #1
 801a0da:	3a01      	subs	r2, #1
 801a0dc:	f7f8 fb82 	bl	80127e4 <GUI_DrawHLine>
 801a0e0:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a0e4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a0e8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a0ec:	3001      	adds	r0, #1
 801a0ee:	3102      	adds	r1, #2
 801a0f0:	3a02      	subs	r2, #2
 801a0f2:	f7f8 f8ff 	bl	80122f4 <GUI_DrawVLine>
 801a0f6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a0fa:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a0fe:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a102:	3102      	adds	r1, #2
 801a104:	3a02      	subs	r2, #2
 801a106:	3801      	subs	r0, #1
 801a108:	f7f8 f8f4 	bl	80122f4 <GUI_DrawVLine>
 801a10c:	68a8      	ldr	r0, [r5, #8]
 801a10e:	f7f7 fedf 	bl	8011ed0 <GUI_SetColor>
 801a112:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a116:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a11a:	f000 fad7 	bl	801a6cc <GUI_DrawPixel>
 801a11e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a122:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a126:	f000 fad1 	bl	801a6cc <GUI_DrawPixel>
 801a12a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a12e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a132:	f000 facb 	bl	801a6cc <GUI_DrawPixel>
 801a136:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a13a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a13e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a142:	f000 bac3 	b.w	801a6cc <GUI_DrawPixel>

0801a146 <_DrawBackgroundH>:
 801a146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a148:	4604      	mov	r4, r0
 801a14a:	460d      	mov	r5, r1
 801a14c:	f7ff ff81 	bl	801a052 <_DrawFrame>
 801a150:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a154:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a158:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a15c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a160:	68ee      	ldr	r6, [r5, #12]
 801a162:	9600      	str	r6, [sp, #0]
 801a164:	440b      	add	r3, r1
 801a166:	692e      	ldr	r6, [r5, #16]
 801a168:	9601      	str	r6, [sp, #4]
 801a16a:	3002      	adds	r0, #2
 801a16c:	3102      	adds	r1, #2
 801a16e:	3a02      	subs	r2, #2
 801a170:	105b      	asrs	r3, r3, #1
 801a172:	f7ff fc8b 	bl	8019a8c <GUI_DrawGradientV>
 801a176:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a17a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a17e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a182:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a186:	696c      	ldr	r4, [r5, #20]
 801a188:	9400      	str	r4, [sp, #0]
 801a18a:	4419      	add	r1, r3
 801a18c:	69ac      	ldr	r4, [r5, #24]
 801a18e:	9401      	str	r4, [sp, #4]
 801a190:	1049      	asrs	r1, r1, #1
 801a192:	3002      	adds	r0, #2
 801a194:	3101      	adds	r1, #1
 801a196:	3a02      	subs	r2, #2
 801a198:	3b02      	subs	r3, #2
 801a19a:	f7ff fc77 	bl	8019a8c <GUI_DrawGradientV>
 801a19e:	b002      	add	sp, #8
 801a1a0:	bd70      	pop	{r4, r5, r6, pc}

0801a1a2 <_DrawBackgroundV>:
 801a1a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a1a4:	4604      	mov	r4, r0
 801a1a6:	460d      	mov	r5, r1
 801a1a8:	f7ff ff53 	bl	801a052 <_DrawFrame>
 801a1ac:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a1b0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a1b4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a1b8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a1bc:	68ee      	ldr	r6, [r5, #12]
 801a1be:	9600      	str	r6, [sp, #0]
 801a1c0:	4402      	add	r2, r0
 801a1c2:	692e      	ldr	r6, [r5, #16]
 801a1c4:	9601      	str	r6, [sp, #4]
 801a1c6:	3002      	adds	r0, #2
 801a1c8:	3102      	adds	r1, #2
 801a1ca:	1052      	asrs	r2, r2, #1
 801a1cc:	3b02      	subs	r3, #2
 801a1ce:	f7ff fc8f 	bl	8019af0 <GUI_DrawGradientH>
 801a1d2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a1d6:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a1da:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a1de:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a1e2:	696c      	ldr	r4, [r5, #20]
 801a1e4:	9400      	str	r4, [sp, #0]
 801a1e6:	4410      	add	r0, r2
 801a1e8:	69ac      	ldr	r4, [r5, #24]
 801a1ea:	9401      	str	r4, [sp, #4]
 801a1ec:	1040      	asrs	r0, r0, #1
 801a1ee:	3001      	adds	r0, #1
 801a1f0:	3102      	adds	r1, #2
 801a1f2:	3a02      	subs	r2, #2
 801a1f4:	3b02      	subs	r3, #2
 801a1f6:	f7ff fc7b 	bl	8019af0 <GUI_DrawGradientH>
 801a1fa:	b002      	add	sp, #8
 801a1fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a200 <SCROLLBAR_DrawSkinFlex>:
 801a200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a204:	4604      	mov	r4, r0
 801a206:	b08b      	sub	sp, #44	; 0x2c
 801a208:	6800      	ldr	r0, [r0, #0]
 801a20a:	f7f9 fb77 	bl	80138fc <GUI_ALLOC_LockH>
 801a20e:	4607      	mov	r7, r0
 801a210:	a80a      	add	r0, sp, #40	; 0x28
 801a212:	ae06      	add	r6, sp, #24
 801a214:	f840 7d1c 	str.w	r7, [r0, #-28]!
 801a218:	f7f9 fb7e 	bl	8013918 <GUI_ALLOC_UnlockH>
 801a21c:	6923      	ldr	r3, [r4, #16]
 801a21e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a222:	6963      	ldr	r3, [r4, #20]
 801a224:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a228:	69a3      	ldr	r3, [r4, #24]
 801a22a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a22e:	69e3      	ldr	r3, [r4, #28]
 801a230:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a234:	6a25      	ldr	r5, [r4, #32]
 801a236:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a23a:	682b      	ldr	r3, [r5, #0]
 801a23c:	f10d 0820 	add.w	r8, sp, #32
 801a240:	e888 0003 	stmia.w	r8, {r0, r1}
 801a244:	b153      	cbz	r3, 801a25c <SCROLLBAR_DrawSkinFlex+0x5c>
 801a246:	4638      	mov	r0, r7
 801a248:	4631      	mov	r1, r6
 801a24a:	4632      	mov	r2, r6
 801a24c:	f7ee fcf3 	bl	8008c36 <WIDGET__RotateRect90>
 801a250:	f8df 913c 	ldr.w	r9, [pc, #316]	; 801a390 <SCROLLBAR_DrawSkinFlex+0x190>
 801a254:	f8df c13c 	ldr.w	ip, [pc, #316]	; 801a394 <SCROLLBAR_DrawSkinFlex+0x194>
 801a258:	4b49      	ldr	r3, [pc, #292]	; (801a380 <SCROLLBAR_DrawSkinFlex+0x180>)
 801a25a:	e004      	b.n	801a266 <SCROLLBAR_DrawSkinFlex+0x66>
 801a25c:	f8df 9138 	ldr.w	r9, [pc, #312]	; 801a398 <SCROLLBAR_DrawSkinFlex+0x198>
 801a260:	f8df c138 	ldr.w	ip, [pc, #312]	; 801a39c <SCROLLBAR_DrawSkinFlex+0x19c>
 801a264:	4b47      	ldr	r3, [pc, #284]	; (801a384 <SCROLLBAR_DrawSkinFlex+0x184>)
 801a266:	6862      	ldr	r2, [r4, #4]
 801a268:	3a08      	subs	r2, #8
 801a26a:	2a11      	cmp	r2, #17
 801a26c:	f200 8083 	bhi.w	801a376 <SCROLLBAR_DrawSkinFlex+0x176>
 801a270:	e8df f002 	tbb	[pc, r2]
 801a274:	81815f13 	.word	0x81815f13
 801a278:	81818134 	.word	0x81818134
 801a27c:	43813434 	.word	0x43813434
 801a280:	81818181 	.word	0x81818181
 801a284:	0981      	.short	0x0981
 801a286:	682b      	ldr	r3, [r5, #0]
 801a288:	b113      	cbz	r3, 801a290 <SCROLLBAR_DrawSkinFlex+0x90>
 801a28a:	69a0      	ldr	r0, [r4, #24]
 801a28c:	6923      	ldr	r3, [r4, #16]
 801a28e:	e001      	b.n	801a294 <SCROLLBAR_DrawSkinFlex+0x94>
 801a290:	69e0      	ldr	r0, [r4, #28]
 801a292:	6963      	ldr	r3, [r4, #20]
 801a294:	1ac0      	subs	r0, r0, r3
 801a296:	3001      	adds	r0, #1
 801a298:	e06e      	b.n	801a378 <SCROLLBAR_DrawSkinFlex+0x178>
 801a29a:	686a      	ldr	r2, [r5, #4]
 801a29c:	493a      	ldr	r1, [pc, #232]	; (801a388 <SCROLLBAR_DrawSkinFlex+0x188>)
 801a29e:	4c3b      	ldr	r4, [pc, #236]	; (801a38c <SCROLLBAR_DrawSkinFlex+0x18c>)
 801a2a0:	2a02      	cmp	r2, #2
 801a2a2:	bf08      	it	eq
 801a2a4:	460c      	moveq	r4, r1
 801a2a6:	4630      	mov	r0, r6
 801a2a8:	4621      	mov	r1, r4
 801a2aa:	4798      	blx	r3
 801a2ac:	6829      	ldr	r1, [r5, #0]
 801a2ae:	aa04      	add	r2, sp, #16
 801a2b0:	ab05      	add	r3, sp, #20
 801a2b2:	4640      	mov	r0, r8
 801a2b4:	f7ff fe59 	bl	8019f6a <_GetArrowPara>
 801a2b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801a2ba:	f7f7 fe09 	bl	8011ed0 <GUI_SetColor>
 801a2be:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801a2c2:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 801a2c6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801a2ca:	1ad2      	subs	r2, r2, r3
 801a2cc:	f04f 33ff 	mov.w	r3, #4294967295
 801a2d0:	9300      	str	r3, [sp, #0]
 801a2d2:	9b05      	ldr	r3, [sp, #20]
 801a2d4:	3201      	adds	r2, #1
 801a2d6:	4638      	mov	r0, r7
 801a2d8:	4419      	add	r1, r3
 801a2da:	e048      	b.n	801a36e <SCROLLBAR_DrawSkinFlex+0x16e>
 801a2dc:	4c2b      	ldr	r4, [pc, #172]	; (801a38c <SCROLLBAR_DrawSkinFlex+0x18c>)
 801a2de:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 801a2e2:	69e5      	ldr	r5, [r4, #28]
 801a2e4:	9500      	str	r5, [sp, #0]
 801a2e6:	6a24      	ldr	r4, [r4, #32]
 801a2e8:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 801a2ec:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801a2f0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801a2f4:	9401      	str	r4, [sp, #4]
 801a2f6:	47e0      	blx	ip
 801a2f8:	e03d      	b.n	801a376 <SCROLLBAR_DrawSkinFlex+0x176>
 801a2fa:	686a      	ldr	r2, [r5, #4]
 801a2fc:	4922      	ldr	r1, [pc, #136]	; (801a388 <SCROLLBAR_DrawSkinFlex+0x188>)
 801a2fe:	4c23      	ldr	r4, [pc, #140]	; (801a38c <SCROLLBAR_DrawSkinFlex+0x18c>)
 801a300:	2a03      	cmp	r2, #3
 801a302:	bf08      	it	eq
 801a304:	460c      	moveq	r4, r1
 801a306:	4630      	mov	r0, r6
 801a308:	4621      	mov	r1, r4
 801a30a:	4798      	blx	r3
 801a30c:	682b      	ldr	r3, [r5, #0]
 801a30e:	b123      	cbz	r3, 801a31a <SCROLLBAR_DrawSkinFlex+0x11a>
 801a310:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801a314:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801a318:	e003      	b.n	801a322 <SCROLLBAR_DrawSkinFlex+0x122>
 801a31a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801a31e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a322:	1ad3      	subs	r3, r2, r3
 801a324:	3301      	adds	r3, #1
 801a326:	2b0e      	cmp	r3, #14
 801a328:	dd25      	ble.n	801a376 <SCROLLBAR_DrawSkinFlex+0x176>
 801a32a:	4630      	mov	r0, r6
 801a32c:	4621      	mov	r1, r4
 801a32e:	47c8      	blx	r9
 801a330:	e021      	b.n	801a376 <SCROLLBAR_DrawSkinFlex+0x176>
 801a332:	686a      	ldr	r2, [r5, #4]
 801a334:	4914      	ldr	r1, [pc, #80]	; (801a388 <SCROLLBAR_DrawSkinFlex+0x188>)
 801a336:	4c15      	ldr	r4, [pc, #84]	; (801a38c <SCROLLBAR_DrawSkinFlex+0x18c>)
 801a338:	2a01      	cmp	r2, #1
 801a33a:	bf08      	it	eq
 801a33c:	460c      	moveq	r4, r1
 801a33e:	4630      	mov	r0, r6
 801a340:	4621      	mov	r1, r4
 801a342:	4798      	blx	r3
 801a344:	6829      	ldr	r1, [r5, #0]
 801a346:	aa04      	add	r2, sp, #16
 801a348:	ab05      	add	r3, sp, #20
 801a34a:	4640      	mov	r0, r8
 801a34c:	f7ff fe0d 	bl	8019f6a <_GetArrowPara>
 801a350:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801a352:	f7f7 fdbd 	bl	8011ed0 <GUI_SetColor>
 801a356:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801a35a:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 801a35e:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 801a362:	1ad2      	subs	r2, r2, r3
 801a364:	2301      	movs	r3, #1
 801a366:	9300      	str	r3, [sp, #0]
 801a368:	9b05      	ldr	r3, [sp, #20]
 801a36a:	4638      	mov	r0, r7
 801a36c:	1ac9      	subs	r1, r1, r3
 801a36e:	1052      	asrs	r2, r2, #1
 801a370:	9b04      	ldr	r3, [sp, #16]
 801a372:	f7ee fd90 	bl	8008e96 <WIDGET__DrawTriangle>
 801a376:	2000      	movs	r0, #0
 801a378:	b00b      	add	sp, #44	; 0x2c
 801a37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a37e:	bf00      	nop
 801a380:	0801a1a3 	.word	0x0801a1a3
 801a384:	0801a147 	.word	0x0801a147
 801a388:	20000200 	.word	0x20000200
 801a38c:	2000022c 	.word	0x2000022c
 801a390:	08019ff7 	.word	0x08019ff7
 801a394:	08019af1 	.word	0x08019af1
 801a398:	08019f9b 	.word	0x08019f9b
 801a39c:	08019a8d 	.word	0x08019a8d

0801a3a0 <_Create>:
 801a3a0:	b530      	push	{r4, r5, lr}
 801a3a2:	b08d      	sub	sp, #52	; 0x34
 801a3a4:	4605      	mov	r5, r0
 801a3a6:	f7f9 faa9 	bl	80138fc <GUI_ALLOC_LockH>
 801a3aa:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801a3ac:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801a3ae:	9000      	str	r0, [sp, #0]
 801a3b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801a3b4:	9301      	str	r3, [sp, #4]
 801a3b6:	4b07      	ldr	r3, [pc, #28]	; (801a3d4 <_Create+0x34>)
 801a3b8:	6483      	str	r3, [r0, #72]	; 0x48
 801a3ba:	4668      	mov	r0, sp
 801a3bc:	f7f9 faac 	bl	8013918 <GUI_ALLOC_UnlockH>
 801a3c0:	2300      	movs	r3, #0
 801a3c2:	9304      	str	r3, [sp, #16]
 801a3c4:	ab01      	add	r3, sp, #4
 801a3c6:	9503      	str	r5, [sp, #12]
 801a3c8:	930b      	str	r3, [sp, #44]	; 0x2c
 801a3ca:	a803      	add	r0, sp, #12
 801a3cc:	47a0      	blx	r4
 801a3ce:	b00d      	add	sp, #52	; 0x34
 801a3d0:	bd30      	pop	{r4, r5, pc}
 801a3d2:	bf00      	nop
 801a3d4:	0801a3d9 	.word	0x0801a3d9

0801a3d8 <_CalcPositions>:
 801a3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3dc:	b090      	sub	sp, #64	; 0x40
 801a3de:	4605      	mov	r5, r0
 801a3e0:	460c      	mov	r4, r1
 801a3e2:	f7f9 fa8b 	bl	80138fc <GUI_ALLOC_LockH>
 801a3e6:	4603      	mov	r3, r0
 801a3e8:	9000      	str	r0, [sp, #0]
 801a3ea:	c803      	ldmia	r0, {r0, r1}
 801a3ec:	ae03      	add	r6, sp, #12
 801a3ee:	e886 0003 	stmia.w	r6, {r0, r1}
 801a3f2:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801a3f4:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801a3f8:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 801a3fc:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801a400:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801a404:	920e      	str	r2, [sp, #56]	; 0x38
 801a406:	f000 0008 	and.w	r0, r0, #8
 801a40a:	2800      	cmp	r0, #0
 801a40c:	bf0c      	ite	eq
 801a40e:	4608      	moveq	r0, r1
 801a410:	4610      	movne	r0, r2
 801a412:	61a0      	str	r0, [r4, #24]
 801a414:	bf0c      	ite	eq
 801a416:	2000      	moveq	r0, #0
 801a418:	2001      	movne	r0, #1
 801a41a:	aa01      	add	r2, sp, #4
 801a41c:	9001      	str	r0, [sp, #4]
 801a41e:	2019      	movs	r0, #25
 801a420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a422:	9008      	str	r0, [sp, #32]
 801a424:	9507      	str	r5, [sp, #28]
 801a426:	920f      	str	r2, [sp, #60]	; 0x3c
 801a428:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801a42c:	970c      	str	r7, [sp, #48]	; 0x30
 801a42e:	910d      	str	r1, [sp, #52]	; 0x34
 801a430:	a807      	add	r0, sp, #28
 801a432:	4798      	blx	r3
 801a434:	9b00      	ldr	r3, [sp, #0]
 801a436:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801a43a:	2aff      	cmp	r2, #255	; 0xff
 801a43c:	4605      	mov	r5, r0
 801a43e:	d111      	bne.n	801a464 <_CalcPositions+0x8c>
 801a440:	6998      	ldr	r0, [r3, #24]
 801a442:	f7f2 fa08 	bl	800c856 <WM_GetScrollbarV>
 801a446:	b168      	cbz	r0, 801a464 <_CalcPositions+0x8c>
 801a448:	a905      	add	r1, sp, #20
 801a44a:	f7fb f92f 	bl	80156ac <WM_GetWindowRectEx>
 801a44e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a452:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a456:	429a      	cmp	r2, r3
 801a458:	d104      	bne.n	801a464 <_CalcPositions+0x8c>
 801a45a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a45e:	3b01      	subs	r3, #1
 801a460:	f8ad 3010 	strh.w	r3, [sp, #16]
 801a464:	9b00      	ldr	r3, [sp, #0]
 801a466:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801a46a:	2afe      	cmp	r2, #254	; 0xfe
 801a46c:	d111      	bne.n	801a492 <_CalcPositions+0xba>
 801a46e:	6998      	ldr	r0, [r3, #24]
 801a470:	f7f2 f9ec 	bl	800c84c <WM_GetScrollbarH>
 801a474:	b168      	cbz	r0, 801a492 <_CalcPositions+0xba>
 801a476:	a905      	add	r1, sp, #20
 801a478:	f7fb f918 	bl	80156ac <WM_GetWindowRectEx>
 801a47c:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801a480:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801a484:	429a      	cmp	r2, r3
 801a486:	d104      	bne.n	801a492 <_CalcPositions+0xba>
 801a488:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a48c:	3b01      	subs	r3, #1
 801a48e:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a492:	427a      	negs	r2, r7
 801a494:	4630      	mov	r0, r6
 801a496:	f1c8 0100 	rsb	r1, r8, #0
 801a49a:	f7f7 fe7f 	bl	801219c <GUI_MoveRect>
 801a49e:	9800      	ldr	r0, [sp, #0]
 801a4a0:	4631      	mov	r1, r6
 801a4a2:	f7f9 fea0 	bl	80141e6 <SCROLLBAR__Rect2VRect>
 801a4a6:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a4aa:	f9bd a010 	ldrsh.w	sl, [sp, #16]
 801a4ae:	9b00      	ldr	r3, [sp, #0]
 801a4b0:	ebc2 0a0a 	rsb	sl, r2, sl
 801a4b4:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 801a4b8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801a4ba:	f10a 0601 	add.w	r6, sl, #1
 801a4be:	eba6 0645 	sub.w	r6, r6, r5, lsl #1
 801a4c2:	4649      	mov	r1, r9
 801a4c4:	4370      	muls	r0, r6
 801a4c6:	f7fd f91f 	bl	8017708 <GUI__DivideRound32>
 801a4ca:	4b17      	ldr	r3, [pc, #92]	; (801a528 <_CalcPositions+0x150>)
 801a4cc:	f8c4 a014 	str.w	sl, [r4, #20]
 801a4d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a4d4:	1c5a      	adds	r2, r3, #1
 801a4d6:	4282      	cmp	r2, r0
 801a4d8:	bfa8      	it	ge
 801a4da:	1c98      	addge	r0, r3, #2
 801a4dc:	42b0      	cmp	r0, r6
 801a4de:	bfb4      	ite	lt
 801a4e0:	4607      	movlt	r7, r0
 801a4e2:	4637      	movge	r7, r6
 801a4e4:	ebc7 0806 	rsb	r8, r7, r6
 801a4e8:	442e      	add	r6, r5
 801a4ea:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a4ee:	6126      	str	r6, [r4, #16]
 801a4f0:	ae10      	add	r6, sp, #64	; 0x40
 801a4f2:	6023      	str	r3, [r4, #0]
 801a4f4:	1e6b      	subs	r3, r5, #1
 801a4f6:	6063      	str	r3, [r4, #4]
 801a4f8:	f856 3d40 	ldr.w	r3, [r6, #-64]!
 801a4fc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801a4fe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801a500:	fb00 f008 	mul.w	r0, r0, r8
 801a504:	ebc1 0109 	rsb	r1, r1, r9
 801a508:	f7fd f8fe 	bl	8017708 <GUI__DivideRound32>
 801a50c:	4428      	add	r0, r5
 801a50e:	19c5      	adds	r5, r0, r7
 801a510:	3d01      	subs	r5, #1
 801a512:	60a0      	str	r0, [r4, #8]
 801a514:	60e5      	str	r5, [r4, #12]
 801a516:	f8c4 801c 	str.w	r8, [r4, #28]
 801a51a:	6227      	str	r7, [r4, #32]
 801a51c:	4668      	mov	r0, sp
 801a51e:	f7f9 f9fb 	bl	8013918 <GUI_ALLOC_UnlockH>
 801a522:	b010      	add	sp, #64	; 0x40
 801a524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a528:	20000136 	.word	0x20000136

0801a52c <_Paint>:
 801a52c:	b570      	push	{r4, r5, r6, lr}
 801a52e:	b098      	sub	sp, #96	; 0x60
 801a530:	4606      	mov	r6, r0
 801a532:	f7f9 f9e3 	bl	80138fc <GUI_ALLOC_LockH>
 801a536:	6d83      	ldr	r3, [r0, #88]	; 0x58
 801a538:	9305      	str	r3, [sp, #20]
 801a53a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801a53c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801a53e:	9001      	str	r0, [sp, #4]
 801a540:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801a544:	a906      	add	r1, sp, #24
 801a546:	4605      	mov	r5, r0
 801a548:	4630      	mov	r0, r6
 801a54a:	9304      	str	r3, [sp, #16]
 801a54c:	f7ff ff44 	bl	801a3d8 <_CalcPositions>
 801a550:	a801      	add	r0, sp, #4
 801a552:	f7f9 f9e1 	bl	8013918 <GUI_ALLOC_UnlockH>
 801a556:	a902      	add	r1, sp, #8
 801a558:	4628      	mov	r0, r5
 801a55a:	f7ee fb7e 	bl	8008c5a <WIDGET__GetClientRect>
 801a55e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801a562:	9314      	str	r3, [sp, #80]	; 0x50
 801a564:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a568:	9316      	str	r3, [sp, #88]	; 0x58
 801a56a:	ab04      	add	r3, sp, #16
 801a56c:	9317      	str	r3, [sp, #92]	; 0x5c
 801a56e:	2308      	movs	r3, #8
 801a570:	9310      	str	r3, [sp, #64]	; 0x40
 801a572:	9b06      	ldr	r3, [sp, #24]
 801a574:	9313      	str	r3, [sp, #76]	; 0x4c
 801a576:	9b07      	ldr	r3, [sp, #28]
 801a578:	9315      	str	r3, [sp, #84]	; 0x54
 801a57a:	960f      	str	r6, [sp, #60]	; 0x3c
 801a57c:	a80f      	add	r0, sp, #60	; 0x3c
 801a57e:	47a0      	blx	r4
 801a580:	2310      	movs	r3, #16
 801a582:	9310      	str	r3, [sp, #64]	; 0x40
 801a584:	9b07      	ldr	r3, [sp, #28]
 801a586:	3301      	adds	r3, #1
 801a588:	9313      	str	r3, [sp, #76]	; 0x4c
 801a58a:	9b08      	ldr	r3, [sp, #32]
 801a58c:	3b01      	subs	r3, #1
 801a58e:	9315      	str	r3, [sp, #84]	; 0x54
 801a590:	a80f      	add	r0, sp, #60	; 0x3c
 801a592:	47a0      	blx	r4
 801a594:	2311      	movs	r3, #17
 801a596:	9310      	str	r3, [sp, #64]	; 0x40
 801a598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a59a:	3301      	adds	r3, #1
 801a59c:	9313      	str	r3, [sp, #76]	; 0x4c
 801a59e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a5a0:	3b01      	subs	r3, #1
 801a5a2:	9315      	str	r3, [sp, #84]	; 0x54
 801a5a4:	a80f      	add	r0, sp, #60	; 0x3c
 801a5a6:	47a0      	blx	r4
 801a5a8:	2313      	movs	r3, #19
 801a5aa:	9310      	str	r3, [sp, #64]	; 0x40
 801a5ac:	9b08      	ldr	r3, [sp, #32]
 801a5ae:	9313      	str	r3, [sp, #76]	; 0x4c
 801a5b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5b2:	9315      	str	r3, [sp, #84]	; 0x54
 801a5b4:	a80f      	add	r0, sp, #60	; 0x3c
 801a5b6:	47a0      	blx	r4
 801a5b8:	2309      	movs	r3, #9
 801a5ba:	9310      	str	r3, [sp, #64]	; 0x40
 801a5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a5be:	9313      	str	r3, [sp, #76]	; 0x4c
 801a5c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a5c2:	9315      	str	r3, [sp, #84]	; 0x54
 801a5c4:	a80f      	add	r0, sp, #60	; 0x3c
 801a5c6:	47a0      	blx	r4
 801a5c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a5ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a5cc:	429a      	cmp	r2, r3
 801a5ce:	d006      	beq.n	801a5de <_Paint+0xb2>
 801a5d0:	210c      	movs	r1, #12
 801a5d2:	3201      	adds	r2, #1
 801a5d4:	9110      	str	r1, [sp, #64]	; 0x40
 801a5d6:	9213      	str	r2, [sp, #76]	; 0x4c
 801a5d8:	9315      	str	r3, [sp, #84]	; 0x54
 801a5da:	a80f      	add	r0, sp, #60	; 0x3c
 801a5dc:	47a0      	blx	r4
 801a5de:	b018      	add	sp, #96	; 0x60
 801a5e0:	bd70      	pop	{r4, r5, r6, pc}

0801a5e2 <WM__SendMessageIfEnabled>:
 801a5e2:	b538      	push	{r3, r4, r5, lr}
 801a5e4:	4604      	mov	r4, r0
 801a5e6:	460d      	mov	r5, r1
 801a5e8:	f7fa fcb6 	bl	8014f58 <WM__IsEnabled>
 801a5ec:	b128      	cbz	r0, 801a5fa <WM__SendMessageIfEnabled+0x18>
 801a5ee:	4620      	mov	r0, r4
 801a5f0:	4629      	mov	r1, r5
 801a5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a5f6:	f7f1 bd8f 	b.w	800c118 <WM__SendMessage>
 801a5fa:	bd38      	pop	{r3, r4, r5, pc}

0801a5fc <WM__IsChild>:
 801a5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a5fe:	460d      	mov	r5, r1
 801a600:	4604      	mov	r4, r0
 801a602:	b160      	cbz	r0, 801a61e <WM__IsChild+0x22>
 801a604:	f7f9 f97a 	bl	80138fc <GUI_ALLOC_LockH>
 801a608:	9001      	str	r0, [sp, #4]
 801a60a:	b120      	cbz	r0, 801a616 <WM__IsChild+0x1a>
 801a60c:	6984      	ldr	r4, [r0, #24]
 801a60e:	1b63      	subs	r3, r4, r5
 801a610:	425c      	negs	r4, r3
 801a612:	415c      	adcs	r4, r3
 801a614:	e000      	b.n	801a618 <WM__IsChild+0x1c>
 801a616:	4604      	mov	r4, r0
 801a618:	a801      	add	r0, sp, #4
 801a61a:	f7f9 f97d 	bl	8013918 <GUI_ALLOC_UnlockH>
 801a61e:	4620      	mov	r0, r4
 801a620:	b003      	add	sp, #12
 801a622:	bd30      	pop	{r4, r5, pc}

0801a624 <WM__ForEachDesc>:
 801a624:	b570      	push	{r4, r5, r6, lr}
 801a626:	460d      	mov	r5, r1
 801a628:	4616      	mov	r6, r2
 801a62a:	f7f9 f95d 	bl	80138e8 <GUI_ALLOC_h2p>
 801a62e:	69c4      	ldr	r4, [r0, #28]
 801a630:	b164      	cbz	r4, 801a64c <WM__ForEachDesc+0x28>
 801a632:	4620      	mov	r0, r4
 801a634:	4631      	mov	r1, r6
 801a636:	47a8      	blx	r5
 801a638:	4620      	mov	r0, r4
 801a63a:	4629      	mov	r1, r5
 801a63c:	4632      	mov	r2, r6
 801a63e:	f7ff fff1 	bl	801a624 <WM__ForEachDesc>
 801a642:	4620      	mov	r0, r4
 801a644:	f7f9 f950 	bl	80138e8 <GUI_ALLOC_h2p>
 801a648:	6a04      	ldr	r4, [r0, #32]
 801a64a:	e7f1      	b.n	801a630 <WM__ForEachDesc+0xc>
 801a64c:	bd70      	pop	{r4, r5, r6, pc}

0801a64e <LCD_GetNumLayers>:
 801a64e:	b510      	push	{r4, lr}
 801a650:	2000      	movs	r0, #0
 801a652:	f7f8 fb25 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 801a656:	1c04      	adds	r4, r0, #0
 801a658:	f04f 0001 	mov.w	r0, #1
 801a65c:	bf18      	it	ne
 801a65e:	2401      	movne	r4, #1
 801a660:	f7f8 fb1e 	bl	8012ca0 <GUI_DEVICE__GetpDriver>
 801a664:	b100      	cbz	r0, 801a668 <LCD_GetNumLayers+0x1a>
 801a666:	3401      	adds	r4, #1
 801a668:	4620      	mov	r0, r4
 801a66a:	bd10      	pop	{r4, pc}

0801a66c <LCD_GetBkColorIndex>:
 801a66c:	4b02      	ldr	r3, [pc, #8]	; (801a678 <LCD_GetBkColorIndex+0xc>)
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a672:	6818      	ldr	r0, [r3, #0]
 801a674:	4770      	bx	lr
 801a676:	bf00      	nop
 801a678:	20000110 	.word	0x20000110

0801a67c <LCD_GetColorIndex>:
 801a67c:	4b02      	ldr	r3, [pc, #8]	; (801a688 <LCD_GetColorIndex+0xc>)
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a682:	6818      	ldr	r0, [r3, #0]
 801a684:	4770      	bx	lr
 801a686:	bf00      	nop
 801a688:	20000110 	.word	0x20000110

0801a68c <GUI__sqrt32>:
 801a68c:	b510      	push	{r4, lr}
 801a68e:	2110      	movs	r1, #16
 801a690:	2300      	movs	r3, #0
 801a692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a696:	189c      	adds	r4, r3, r2
 801a698:	4284      	cmp	r4, r0
 801a69a:	bf9c      	itt	ls
 801a69c:	18a3      	addls	r3, r4, r2
 801a69e:	ebc4 0000 	rsbls	r0, r4, r0
 801a6a2:	3901      	subs	r1, #1
 801a6a4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a6a8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a6ac:	d1f3      	bne.n	801a696 <GUI__sqrt32+0xa>
 801a6ae:	4618      	mov	r0, r3
 801a6b0:	bd10      	pop	{r4, pc}

0801a6b2 <GUI__HandleEOLine>:
 801a6b2:	6803      	ldr	r3, [r0, #0]
 801a6b4:	781a      	ldrb	r2, [r3, #0]
 801a6b6:	b122      	cbz	r2, 801a6c2 <GUI__HandleEOLine+0x10>
 801a6b8:	2a0a      	cmp	r2, #10
 801a6ba:	d104      	bne.n	801a6c6 <GUI__HandleEOLine+0x14>
 801a6bc:	3301      	adds	r3, #1
 801a6be:	6003      	str	r3, [r0, #0]
 801a6c0:	e001      	b.n	801a6c6 <GUI__HandleEOLine+0x14>
 801a6c2:	2001      	movs	r0, #1
 801a6c4:	4770      	bx	lr
 801a6c6:	2000      	movs	r0, #0
 801a6c8:	4770      	bx	lr
	...

0801a6cc <GUI_DrawPixel>:
 801a6cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a6ce:	4e0f      	ldr	r6, [pc, #60]	; (801a70c <GUI_DrawPixel+0x40>)
 801a6d0:	6833      	ldr	r3, [r6, #0]
 801a6d2:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801a6d4:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 801a6d6:	4405      	add	r5, r0
 801a6d8:	b2ab      	uxth	r3, r5
 801a6da:	440c      	add	r4, r1
 801a6dc:	f8ad 3004 	strh.w	r3, [sp, #4]
 801a6e0:	f8ad 3000 	strh.w	r3, [sp]
 801a6e4:	4668      	mov	r0, sp
 801a6e6:	b2a3      	uxth	r3, r4
 801a6e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a6ec:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a6f0:	f7f3 f916 	bl	800d920 <WM__InitIVRSearch>
 801a6f4:	b140      	cbz	r0, 801a708 <GUI_DrawPixel+0x3c>
 801a6f6:	6833      	ldr	r3, [r6, #0]
 801a6f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a6fa:	4628      	mov	r0, r5
 801a6fc:	685b      	ldr	r3, [r3, #4]
 801a6fe:	4621      	mov	r1, r4
 801a700:	4798      	blx	r3
 801a702:	f7f3 f84b 	bl	800d79c <WM__GetNextIVR>
 801a706:	e7f5      	b.n	801a6f4 <GUI_DrawPixel+0x28>
 801a708:	b002      	add	sp, #8
 801a70a:	bd70      	pop	{r4, r5, r6, pc}
 801a70c:	20000110 	.word	0x20000110

0801a710 <GUI_CalcColorDist>:
 801a710:	b2cb      	uxtb	r3, r1
 801a712:	b2c2      	uxtb	r2, r0
 801a714:	1ad2      	subs	r2, r2, r3
 801a716:	b292      	uxth	r2, r2
 801a718:	b293      	uxth	r3, r2
 801a71a:	b530      	push	{r4, r5, lr}
 801a71c:	041c      	lsls	r4, r3, #16
 801a71e:	bf48      	it	mi
 801a720:	4253      	negmi	r3, r2
 801a722:	f3c1 2507 	ubfx	r5, r1, #8, #8
 801a726:	f3c0 2207 	ubfx	r2, r0, #8, #8
 801a72a:	ebc5 0202 	rsb	r2, r5, r2
 801a72e:	bf48      	it	mi
 801a730:	b29b      	uxthmi	r3, r3
 801a732:	b292      	uxth	r2, r2
 801a734:	0c09      	lsrs	r1, r1, #16
 801a736:	fb13 f403 	smulbb	r4, r3, r3
 801a73a:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 801a73e:	b293      	uxth	r3, r2
 801a740:	041d      	lsls	r5, r3, #16
 801a742:	b289      	uxth	r1, r1
 801a744:	b288      	uxth	r0, r1
 801a746:	bf44      	itt	mi
 801a748:	4253      	negmi	r3, r2
 801a74a:	b29b      	uxthmi	r3, r3
 801a74c:	0402      	lsls	r2, r0, #16
 801a74e:	bf48      	it	mi
 801a750:	4248      	negmi	r0, r1
 801a752:	fb13 4303 	smlabb	r3, r3, r3, r4
 801a756:	bf48      	it	mi
 801a758:	b280      	uxthmi	r0, r0
 801a75a:	fb00 3000 	mla	r0, r0, r0, r3
 801a75e:	bd30      	pop	{r4, r5, pc}

0801a760 <__errno>:
 801a760:	4b01      	ldr	r3, [pc, #4]	; (801a768 <__errno+0x8>)
 801a762:	6818      	ldr	r0, [r3, #0]
 801a764:	4770      	bx	lr
 801a766:	bf00      	nop
 801a768:	20000264 	.word	0x20000264

0801a76c <__libc_init_array>:
 801a76c:	b570      	push	{r4, r5, r6, lr}
 801a76e:	4d0d      	ldr	r5, [pc, #52]	; (801a7a4 <__libc_init_array+0x38>)
 801a770:	4c0d      	ldr	r4, [pc, #52]	; (801a7a8 <__libc_init_array+0x3c>)
 801a772:	1b64      	subs	r4, r4, r5
 801a774:	10a4      	asrs	r4, r4, #2
 801a776:	2600      	movs	r6, #0
 801a778:	42a6      	cmp	r6, r4
 801a77a:	d109      	bne.n	801a790 <__libc_init_array+0x24>
 801a77c:	4d0b      	ldr	r5, [pc, #44]	; (801a7ac <__libc_init_array+0x40>)
 801a77e:	4c0c      	ldr	r4, [pc, #48]	; (801a7b0 <__libc_init_array+0x44>)
 801a780:	f000 fd6a 	bl	801b258 <_init>
 801a784:	1b64      	subs	r4, r4, r5
 801a786:	10a4      	asrs	r4, r4, #2
 801a788:	2600      	movs	r6, #0
 801a78a:	42a6      	cmp	r6, r4
 801a78c:	d105      	bne.n	801a79a <__libc_init_array+0x2e>
 801a78e:	bd70      	pop	{r4, r5, r6, pc}
 801a790:	f855 3b04 	ldr.w	r3, [r5], #4
 801a794:	4798      	blx	r3
 801a796:	3601      	adds	r6, #1
 801a798:	e7ee      	b.n	801a778 <__libc_init_array+0xc>
 801a79a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a79e:	4798      	blx	r3
 801a7a0:	3601      	adds	r6, #1
 801a7a2:	e7f2      	b.n	801a78a <__libc_init_array+0x1e>
 801a7a4:	080258e8 	.word	0x080258e8
 801a7a8:	080258e8 	.word	0x080258e8
 801a7ac:	080258e8 	.word	0x080258e8
 801a7b0:	080258ec 	.word	0x080258ec

0801a7b4 <memcmp>:
 801a7b4:	b530      	push	{r4, r5, lr}
 801a7b6:	3901      	subs	r1, #1
 801a7b8:	2400      	movs	r4, #0
 801a7ba:	42a2      	cmp	r2, r4
 801a7bc:	d101      	bne.n	801a7c2 <memcmp+0xe>
 801a7be:	2000      	movs	r0, #0
 801a7c0:	e005      	b.n	801a7ce <memcmp+0x1a>
 801a7c2:	5d03      	ldrb	r3, [r0, r4]
 801a7c4:	3401      	adds	r4, #1
 801a7c6:	5d0d      	ldrb	r5, [r1, r4]
 801a7c8:	42ab      	cmp	r3, r5
 801a7ca:	d0f6      	beq.n	801a7ba <memcmp+0x6>
 801a7cc:	1b58      	subs	r0, r3, r5
 801a7ce:	bd30      	pop	{r4, r5, pc}

0801a7d0 <memcpy>:
 801a7d0:	440a      	add	r2, r1
 801a7d2:	4291      	cmp	r1, r2
 801a7d4:	f100 33ff 	add.w	r3, r0, #4294967295
 801a7d8:	d100      	bne.n	801a7dc <memcpy+0xc>
 801a7da:	4770      	bx	lr
 801a7dc:	b510      	push	{r4, lr}
 801a7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a7e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a7e6:	4291      	cmp	r1, r2
 801a7e8:	d1f9      	bne.n	801a7de <memcpy+0xe>
 801a7ea:	bd10      	pop	{r4, pc}

0801a7ec <memmove>:
 801a7ec:	4288      	cmp	r0, r1
 801a7ee:	b510      	push	{r4, lr}
 801a7f0:	eb01 0402 	add.w	r4, r1, r2
 801a7f4:	d902      	bls.n	801a7fc <memmove+0x10>
 801a7f6:	4284      	cmp	r4, r0
 801a7f8:	4623      	mov	r3, r4
 801a7fa:	d807      	bhi.n	801a80c <memmove+0x20>
 801a7fc:	1e43      	subs	r3, r0, #1
 801a7fe:	42a1      	cmp	r1, r4
 801a800:	d008      	beq.n	801a814 <memmove+0x28>
 801a802:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a806:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a80a:	e7f8      	b.n	801a7fe <memmove+0x12>
 801a80c:	4402      	add	r2, r0
 801a80e:	4601      	mov	r1, r0
 801a810:	428a      	cmp	r2, r1
 801a812:	d100      	bne.n	801a816 <memmove+0x2a>
 801a814:	bd10      	pop	{r4, pc}
 801a816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a81a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a81e:	e7f7      	b.n	801a810 <memmove+0x24>

0801a820 <memset>:
 801a820:	4402      	add	r2, r0
 801a822:	4603      	mov	r3, r0
 801a824:	4293      	cmp	r3, r2
 801a826:	d100      	bne.n	801a82a <memset+0xa>
 801a828:	4770      	bx	lr
 801a82a:	f803 1b01 	strb.w	r1, [r3], #1
 801a82e:	e7f9      	b.n	801a824 <memset+0x4>

0801a830 <siprintf>:
 801a830:	b40e      	push	{r1, r2, r3}
 801a832:	b500      	push	{lr}
 801a834:	b09c      	sub	sp, #112	; 0x70
 801a836:	ab1d      	add	r3, sp, #116	; 0x74
 801a838:	9002      	str	r0, [sp, #8]
 801a83a:	9006      	str	r0, [sp, #24]
 801a83c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a840:	4809      	ldr	r0, [pc, #36]	; (801a868 <siprintf+0x38>)
 801a842:	9107      	str	r1, [sp, #28]
 801a844:	9104      	str	r1, [sp, #16]
 801a846:	4909      	ldr	r1, [pc, #36]	; (801a86c <siprintf+0x3c>)
 801a848:	f853 2b04 	ldr.w	r2, [r3], #4
 801a84c:	9105      	str	r1, [sp, #20]
 801a84e:	6800      	ldr	r0, [r0, #0]
 801a850:	9301      	str	r3, [sp, #4]
 801a852:	a902      	add	r1, sp, #8
 801a854:	f000 f870 	bl	801a938 <_svfiprintf_r>
 801a858:	9b02      	ldr	r3, [sp, #8]
 801a85a:	2200      	movs	r2, #0
 801a85c:	701a      	strb	r2, [r3, #0]
 801a85e:	b01c      	add	sp, #112	; 0x70
 801a860:	f85d eb04 	ldr.w	lr, [sp], #4
 801a864:	b003      	add	sp, #12
 801a866:	4770      	bx	lr
 801a868:	20000264 	.word	0x20000264
 801a86c:	ffff0208 	.word	0xffff0208

0801a870 <strcpy>:
 801a870:	4603      	mov	r3, r0
 801a872:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a876:	f803 2b01 	strb.w	r2, [r3], #1
 801a87a:	2a00      	cmp	r2, #0
 801a87c:	d1f9      	bne.n	801a872 <strcpy+0x2>
 801a87e:	4770      	bx	lr

0801a880 <__ssputs_r>:
 801a880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a884:	688e      	ldr	r6, [r1, #8]
 801a886:	429e      	cmp	r6, r3
 801a888:	4682      	mov	sl, r0
 801a88a:	460c      	mov	r4, r1
 801a88c:	4690      	mov	r8, r2
 801a88e:	461f      	mov	r7, r3
 801a890:	d838      	bhi.n	801a904 <__ssputs_r+0x84>
 801a892:	898a      	ldrh	r2, [r1, #12]
 801a894:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a898:	d032      	beq.n	801a900 <__ssputs_r+0x80>
 801a89a:	6825      	ldr	r5, [r4, #0]
 801a89c:	6909      	ldr	r1, [r1, #16]
 801a89e:	eba5 0901 	sub.w	r9, r5, r1
 801a8a2:	6965      	ldr	r5, [r4, #20]
 801a8a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a8a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a8ac:	3301      	adds	r3, #1
 801a8ae:	444b      	add	r3, r9
 801a8b0:	106d      	asrs	r5, r5, #1
 801a8b2:	429d      	cmp	r5, r3
 801a8b4:	bf38      	it	cc
 801a8b6:	461d      	movcc	r5, r3
 801a8b8:	0553      	lsls	r3, r2, #21
 801a8ba:	d531      	bpl.n	801a920 <__ssputs_r+0xa0>
 801a8bc:	4629      	mov	r1, r5
 801a8be:	f000 fb1f 	bl	801af00 <_malloc_r>
 801a8c2:	4606      	mov	r6, r0
 801a8c4:	b950      	cbnz	r0, 801a8dc <__ssputs_r+0x5c>
 801a8c6:	230c      	movs	r3, #12
 801a8c8:	f8ca 3000 	str.w	r3, [sl]
 801a8cc:	89a3      	ldrh	r3, [r4, #12]
 801a8ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8d2:	81a3      	strh	r3, [r4, #12]
 801a8d4:	f04f 30ff 	mov.w	r0, #4294967295
 801a8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8dc:	6921      	ldr	r1, [r4, #16]
 801a8de:	464a      	mov	r2, r9
 801a8e0:	f7ff ff76 	bl	801a7d0 <memcpy>
 801a8e4:	89a3      	ldrh	r3, [r4, #12]
 801a8e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a8ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a8ee:	81a3      	strh	r3, [r4, #12]
 801a8f0:	6126      	str	r6, [r4, #16]
 801a8f2:	6165      	str	r5, [r4, #20]
 801a8f4:	444e      	add	r6, r9
 801a8f6:	eba5 0509 	sub.w	r5, r5, r9
 801a8fa:	6026      	str	r6, [r4, #0]
 801a8fc:	60a5      	str	r5, [r4, #8]
 801a8fe:	463e      	mov	r6, r7
 801a900:	42be      	cmp	r6, r7
 801a902:	d900      	bls.n	801a906 <__ssputs_r+0x86>
 801a904:	463e      	mov	r6, r7
 801a906:	4632      	mov	r2, r6
 801a908:	6820      	ldr	r0, [r4, #0]
 801a90a:	4641      	mov	r1, r8
 801a90c:	f7ff ff6e 	bl	801a7ec <memmove>
 801a910:	68a3      	ldr	r3, [r4, #8]
 801a912:	6822      	ldr	r2, [r4, #0]
 801a914:	1b9b      	subs	r3, r3, r6
 801a916:	4432      	add	r2, r6
 801a918:	60a3      	str	r3, [r4, #8]
 801a91a:	6022      	str	r2, [r4, #0]
 801a91c:	2000      	movs	r0, #0
 801a91e:	e7db      	b.n	801a8d8 <__ssputs_r+0x58>
 801a920:	462a      	mov	r2, r5
 801a922:	f000 fb47 	bl	801afb4 <_realloc_r>
 801a926:	4606      	mov	r6, r0
 801a928:	2800      	cmp	r0, #0
 801a92a:	d1e1      	bne.n	801a8f0 <__ssputs_r+0x70>
 801a92c:	6921      	ldr	r1, [r4, #16]
 801a92e:	4650      	mov	r0, sl
 801a930:	f000 fa96 	bl	801ae60 <_free_r>
 801a934:	e7c7      	b.n	801a8c6 <__ssputs_r+0x46>
	...

0801a938 <_svfiprintf_r>:
 801a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a93c:	4698      	mov	r8, r3
 801a93e:	898b      	ldrh	r3, [r1, #12]
 801a940:	061b      	lsls	r3, r3, #24
 801a942:	b09d      	sub	sp, #116	; 0x74
 801a944:	4607      	mov	r7, r0
 801a946:	460d      	mov	r5, r1
 801a948:	4614      	mov	r4, r2
 801a94a:	d50e      	bpl.n	801a96a <_svfiprintf_r+0x32>
 801a94c:	690b      	ldr	r3, [r1, #16]
 801a94e:	b963      	cbnz	r3, 801a96a <_svfiprintf_r+0x32>
 801a950:	2140      	movs	r1, #64	; 0x40
 801a952:	f000 fad5 	bl	801af00 <_malloc_r>
 801a956:	6028      	str	r0, [r5, #0]
 801a958:	6128      	str	r0, [r5, #16]
 801a95a:	b920      	cbnz	r0, 801a966 <_svfiprintf_r+0x2e>
 801a95c:	230c      	movs	r3, #12
 801a95e:	603b      	str	r3, [r7, #0]
 801a960:	f04f 30ff 	mov.w	r0, #4294967295
 801a964:	e0d1      	b.n	801ab0a <_svfiprintf_r+0x1d2>
 801a966:	2340      	movs	r3, #64	; 0x40
 801a968:	616b      	str	r3, [r5, #20]
 801a96a:	2300      	movs	r3, #0
 801a96c:	9309      	str	r3, [sp, #36]	; 0x24
 801a96e:	2320      	movs	r3, #32
 801a970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a974:	f8cd 800c 	str.w	r8, [sp, #12]
 801a978:	2330      	movs	r3, #48	; 0x30
 801a97a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ab24 <_svfiprintf_r+0x1ec>
 801a97e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a982:	f04f 0901 	mov.w	r9, #1
 801a986:	4623      	mov	r3, r4
 801a988:	469a      	mov	sl, r3
 801a98a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a98e:	b10a      	cbz	r2, 801a994 <_svfiprintf_r+0x5c>
 801a990:	2a25      	cmp	r2, #37	; 0x25
 801a992:	d1f9      	bne.n	801a988 <_svfiprintf_r+0x50>
 801a994:	ebba 0b04 	subs.w	fp, sl, r4
 801a998:	d00b      	beq.n	801a9b2 <_svfiprintf_r+0x7a>
 801a99a:	465b      	mov	r3, fp
 801a99c:	4622      	mov	r2, r4
 801a99e:	4629      	mov	r1, r5
 801a9a0:	4638      	mov	r0, r7
 801a9a2:	f7ff ff6d 	bl	801a880 <__ssputs_r>
 801a9a6:	3001      	adds	r0, #1
 801a9a8:	f000 80aa 	beq.w	801ab00 <_svfiprintf_r+0x1c8>
 801a9ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a9ae:	445a      	add	r2, fp
 801a9b0:	9209      	str	r2, [sp, #36]	; 0x24
 801a9b2:	f89a 3000 	ldrb.w	r3, [sl]
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	f000 80a2 	beq.w	801ab00 <_svfiprintf_r+0x1c8>
 801a9bc:	2300      	movs	r3, #0
 801a9be:	f04f 32ff 	mov.w	r2, #4294967295
 801a9c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a9c6:	f10a 0a01 	add.w	sl, sl, #1
 801a9ca:	9304      	str	r3, [sp, #16]
 801a9cc:	9307      	str	r3, [sp, #28]
 801a9ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a9d2:	931a      	str	r3, [sp, #104]	; 0x68
 801a9d4:	4654      	mov	r4, sl
 801a9d6:	2205      	movs	r2, #5
 801a9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9dc:	4851      	ldr	r0, [pc, #324]	; (801ab24 <_svfiprintf_r+0x1ec>)
 801a9de:	f7e5 fc1f 	bl	8000220 <memchr>
 801a9e2:	9a04      	ldr	r2, [sp, #16]
 801a9e4:	b9d8      	cbnz	r0, 801aa1e <_svfiprintf_r+0xe6>
 801a9e6:	06d0      	lsls	r0, r2, #27
 801a9e8:	bf44      	itt	mi
 801a9ea:	2320      	movmi	r3, #32
 801a9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9f0:	0711      	lsls	r1, r2, #28
 801a9f2:	bf44      	itt	mi
 801a9f4:	232b      	movmi	r3, #43	; 0x2b
 801a9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9fa:	f89a 3000 	ldrb.w	r3, [sl]
 801a9fe:	2b2a      	cmp	r3, #42	; 0x2a
 801aa00:	d015      	beq.n	801aa2e <_svfiprintf_r+0xf6>
 801aa02:	9a07      	ldr	r2, [sp, #28]
 801aa04:	4654      	mov	r4, sl
 801aa06:	2000      	movs	r0, #0
 801aa08:	f04f 0c0a 	mov.w	ip, #10
 801aa0c:	4621      	mov	r1, r4
 801aa0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aa12:	3b30      	subs	r3, #48	; 0x30
 801aa14:	2b09      	cmp	r3, #9
 801aa16:	d94e      	bls.n	801aab6 <_svfiprintf_r+0x17e>
 801aa18:	b1b0      	cbz	r0, 801aa48 <_svfiprintf_r+0x110>
 801aa1a:	9207      	str	r2, [sp, #28]
 801aa1c:	e014      	b.n	801aa48 <_svfiprintf_r+0x110>
 801aa1e:	eba0 0308 	sub.w	r3, r0, r8
 801aa22:	fa09 f303 	lsl.w	r3, r9, r3
 801aa26:	4313      	orrs	r3, r2
 801aa28:	9304      	str	r3, [sp, #16]
 801aa2a:	46a2      	mov	sl, r4
 801aa2c:	e7d2      	b.n	801a9d4 <_svfiprintf_r+0x9c>
 801aa2e:	9b03      	ldr	r3, [sp, #12]
 801aa30:	1d19      	adds	r1, r3, #4
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	9103      	str	r1, [sp, #12]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	bfbb      	ittet	lt
 801aa3a:	425b      	neglt	r3, r3
 801aa3c:	f042 0202 	orrlt.w	r2, r2, #2
 801aa40:	9307      	strge	r3, [sp, #28]
 801aa42:	9307      	strlt	r3, [sp, #28]
 801aa44:	bfb8      	it	lt
 801aa46:	9204      	strlt	r2, [sp, #16]
 801aa48:	7823      	ldrb	r3, [r4, #0]
 801aa4a:	2b2e      	cmp	r3, #46	; 0x2e
 801aa4c:	d10c      	bne.n	801aa68 <_svfiprintf_r+0x130>
 801aa4e:	7863      	ldrb	r3, [r4, #1]
 801aa50:	2b2a      	cmp	r3, #42	; 0x2a
 801aa52:	d135      	bne.n	801aac0 <_svfiprintf_r+0x188>
 801aa54:	9b03      	ldr	r3, [sp, #12]
 801aa56:	1d1a      	adds	r2, r3, #4
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	9203      	str	r2, [sp, #12]
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	bfb8      	it	lt
 801aa60:	f04f 33ff 	movlt.w	r3, #4294967295
 801aa64:	3402      	adds	r4, #2
 801aa66:	9305      	str	r3, [sp, #20]
 801aa68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ab34 <_svfiprintf_r+0x1fc>
 801aa6c:	7821      	ldrb	r1, [r4, #0]
 801aa6e:	2203      	movs	r2, #3
 801aa70:	4650      	mov	r0, sl
 801aa72:	f7e5 fbd5 	bl	8000220 <memchr>
 801aa76:	b140      	cbz	r0, 801aa8a <_svfiprintf_r+0x152>
 801aa78:	2340      	movs	r3, #64	; 0x40
 801aa7a:	eba0 000a 	sub.w	r0, r0, sl
 801aa7e:	fa03 f000 	lsl.w	r0, r3, r0
 801aa82:	9b04      	ldr	r3, [sp, #16]
 801aa84:	4303      	orrs	r3, r0
 801aa86:	3401      	adds	r4, #1
 801aa88:	9304      	str	r3, [sp, #16]
 801aa8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa8e:	4826      	ldr	r0, [pc, #152]	; (801ab28 <_svfiprintf_r+0x1f0>)
 801aa90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa94:	2206      	movs	r2, #6
 801aa96:	f7e5 fbc3 	bl	8000220 <memchr>
 801aa9a:	2800      	cmp	r0, #0
 801aa9c:	d038      	beq.n	801ab10 <_svfiprintf_r+0x1d8>
 801aa9e:	4b23      	ldr	r3, [pc, #140]	; (801ab2c <_svfiprintf_r+0x1f4>)
 801aaa0:	bb1b      	cbnz	r3, 801aaea <_svfiprintf_r+0x1b2>
 801aaa2:	9b03      	ldr	r3, [sp, #12]
 801aaa4:	3307      	adds	r3, #7
 801aaa6:	f023 0307 	bic.w	r3, r3, #7
 801aaaa:	3308      	adds	r3, #8
 801aaac:	9303      	str	r3, [sp, #12]
 801aaae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aab0:	4433      	add	r3, r6
 801aab2:	9309      	str	r3, [sp, #36]	; 0x24
 801aab4:	e767      	b.n	801a986 <_svfiprintf_r+0x4e>
 801aab6:	fb0c 3202 	mla	r2, ip, r2, r3
 801aaba:	460c      	mov	r4, r1
 801aabc:	2001      	movs	r0, #1
 801aabe:	e7a5      	b.n	801aa0c <_svfiprintf_r+0xd4>
 801aac0:	2300      	movs	r3, #0
 801aac2:	3401      	adds	r4, #1
 801aac4:	9305      	str	r3, [sp, #20]
 801aac6:	4619      	mov	r1, r3
 801aac8:	f04f 0c0a 	mov.w	ip, #10
 801aacc:	4620      	mov	r0, r4
 801aace:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aad2:	3a30      	subs	r2, #48	; 0x30
 801aad4:	2a09      	cmp	r2, #9
 801aad6:	d903      	bls.n	801aae0 <_svfiprintf_r+0x1a8>
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d0c5      	beq.n	801aa68 <_svfiprintf_r+0x130>
 801aadc:	9105      	str	r1, [sp, #20]
 801aade:	e7c3      	b.n	801aa68 <_svfiprintf_r+0x130>
 801aae0:	fb0c 2101 	mla	r1, ip, r1, r2
 801aae4:	4604      	mov	r4, r0
 801aae6:	2301      	movs	r3, #1
 801aae8:	e7f0      	b.n	801aacc <_svfiprintf_r+0x194>
 801aaea:	ab03      	add	r3, sp, #12
 801aaec:	9300      	str	r3, [sp, #0]
 801aaee:	462a      	mov	r2, r5
 801aaf0:	4b0f      	ldr	r3, [pc, #60]	; (801ab30 <_svfiprintf_r+0x1f8>)
 801aaf2:	a904      	add	r1, sp, #16
 801aaf4:	4638      	mov	r0, r7
 801aaf6:	f3af 8000 	nop.w
 801aafa:	1c42      	adds	r2, r0, #1
 801aafc:	4606      	mov	r6, r0
 801aafe:	d1d6      	bne.n	801aaae <_svfiprintf_r+0x176>
 801ab00:	89ab      	ldrh	r3, [r5, #12]
 801ab02:	065b      	lsls	r3, r3, #25
 801ab04:	f53f af2c 	bmi.w	801a960 <_svfiprintf_r+0x28>
 801ab08:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab0a:	b01d      	add	sp, #116	; 0x74
 801ab0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab10:	ab03      	add	r3, sp, #12
 801ab12:	9300      	str	r3, [sp, #0]
 801ab14:	462a      	mov	r2, r5
 801ab16:	4b06      	ldr	r3, [pc, #24]	; (801ab30 <_svfiprintf_r+0x1f8>)
 801ab18:	a904      	add	r1, sp, #16
 801ab1a:	4638      	mov	r0, r7
 801ab1c:	f000 f87a 	bl	801ac14 <_printf_i>
 801ab20:	e7eb      	b.n	801aafa <_svfiprintf_r+0x1c2>
 801ab22:	bf00      	nop
 801ab24:	080258ac 	.word	0x080258ac
 801ab28:	080258b6 	.word	0x080258b6
 801ab2c:	00000000 	.word	0x00000000
 801ab30:	0801a881 	.word	0x0801a881
 801ab34:	080258b2 	.word	0x080258b2

0801ab38 <_printf_common>:
 801ab38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab3c:	4616      	mov	r6, r2
 801ab3e:	4699      	mov	r9, r3
 801ab40:	688a      	ldr	r2, [r1, #8]
 801ab42:	690b      	ldr	r3, [r1, #16]
 801ab44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ab48:	4293      	cmp	r3, r2
 801ab4a:	bfb8      	it	lt
 801ab4c:	4613      	movlt	r3, r2
 801ab4e:	6033      	str	r3, [r6, #0]
 801ab50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ab54:	4607      	mov	r7, r0
 801ab56:	460c      	mov	r4, r1
 801ab58:	b10a      	cbz	r2, 801ab5e <_printf_common+0x26>
 801ab5a:	3301      	adds	r3, #1
 801ab5c:	6033      	str	r3, [r6, #0]
 801ab5e:	6823      	ldr	r3, [r4, #0]
 801ab60:	0699      	lsls	r1, r3, #26
 801ab62:	bf42      	ittt	mi
 801ab64:	6833      	ldrmi	r3, [r6, #0]
 801ab66:	3302      	addmi	r3, #2
 801ab68:	6033      	strmi	r3, [r6, #0]
 801ab6a:	6825      	ldr	r5, [r4, #0]
 801ab6c:	f015 0506 	ands.w	r5, r5, #6
 801ab70:	d106      	bne.n	801ab80 <_printf_common+0x48>
 801ab72:	f104 0a19 	add.w	sl, r4, #25
 801ab76:	68e3      	ldr	r3, [r4, #12]
 801ab78:	6832      	ldr	r2, [r6, #0]
 801ab7a:	1a9b      	subs	r3, r3, r2
 801ab7c:	42ab      	cmp	r3, r5
 801ab7e:	dc26      	bgt.n	801abce <_printf_common+0x96>
 801ab80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ab84:	1e13      	subs	r3, r2, #0
 801ab86:	6822      	ldr	r2, [r4, #0]
 801ab88:	bf18      	it	ne
 801ab8a:	2301      	movne	r3, #1
 801ab8c:	0692      	lsls	r2, r2, #26
 801ab8e:	d42b      	bmi.n	801abe8 <_printf_common+0xb0>
 801ab90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ab94:	4649      	mov	r1, r9
 801ab96:	4638      	mov	r0, r7
 801ab98:	47c0      	blx	r8
 801ab9a:	3001      	adds	r0, #1
 801ab9c:	d01e      	beq.n	801abdc <_printf_common+0xa4>
 801ab9e:	6823      	ldr	r3, [r4, #0]
 801aba0:	68e5      	ldr	r5, [r4, #12]
 801aba2:	6832      	ldr	r2, [r6, #0]
 801aba4:	f003 0306 	and.w	r3, r3, #6
 801aba8:	2b04      	cmp	r3, #4
 801abaa:	bf08      	it	eq
 801abac:	1aad      	subeq	r5, r5, r2
 801abae:	68a3      	ldr	r3, [r4, #8]
 801abb0:	6922      	ldr	r2, [r4, #16]
 801abb2:	bf0c      	ite	eq
 801abb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801abb8:	2500      	movne	r5, #0
 801abba:	4293      	cmp	r3, r2
 801abbc:	bfc4      	itt	gt
 801abbe:	1a9b      	subgt	r3, r3, r2
 801abc0:	18ed      	addgt	r5, r5, r3
 801abc2:	2600      	movs	r6, #0
 801abc4:	341a      	adds	r4, #26
 801abc6:	42b5      	cmp	r5, r6
 801abc8:	d11a      	bne.n	801ac00 <_printf_common+0xc8>
 801abca:	2000      	movs	r0, #0
 801abcc:	e008      	b.n	801abe0 <_printf_common+0xa8>
 801abce:	2301      	movs	r3, #1
 801abd0:	4652      	mov	r2, sl
 801abd2:	4649      	mov	r1, r9
 801abd4:	4638      	mov	r0, r7
 801abd6:	47c0      	blx	r8
 801abd8:	3001      	adds	r0, #1
 801abda:	d103      	bne.n	801abe4 <_printf_common+0xac>
 801abdc:	f04f 30ff 	mov.w	r0, #4294967295
 801abe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abe4:	3501      	adds	r5, #1
 801abe6:	e7c6      	b.n	801ab76 <_printf_common+0x3e>
 801abe8:	18e1      	adds	r1, r4, r3
 801abea:	1c5a      	adds	r2, r3, #1
 801abec:	2030      	movs	r0, #48	; 0x30
 801abee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801abf2:	4422      	add	r2, r4
 801abf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801abf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801abfc:	3302      	adds	r3, #2
 801abfe:	e7c7      	b.n	801ab90 <_printf_common+0x58>
 801ac00:	2301      	movs	r3, #1
 801ac02:	4622      	mov	r2, r4
 801ac04:	4649      	mov	r1, r9
 801ac06:	4638      	mov	r0, r7
 801ac08:	47c0      	blx	r8
 801ac0a:	3001      	adds	r0, #1
 801ac0c:	d0e6      	beq.n	801abdc <_printf_common+0xa4>
 801ac0e:	3601      	adds	r6, #1
 801ac10:	e7d9      	b.n	801abc6 <_printf_common+0x8e>
	...

0801ac14 <_printf_i>:
 801ac14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ac18:	460c      	mov	r4, r1
 801ac1a:	4691      	mov	r9, r2
 801ac1c:	7e27      	ldrb	r7, [r4, #24]
 801ac1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ac20:	2f78      	cmp	r7, #120	; 0x78
 801ac22:	4680      	mov	r8, r0
 801ac24:	469a      	mov	sl, r3
 801ac26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ac2a:	d807      	bhi.n	801ac3c <_printf_i+0x28>
 801ac2c:	2f62      	cmp	r7, #98	; 0x62
 801ac2e:	d80a      	bhi.n	801ac46 <_printf_i+0x32>
 801ac30:	2f00      	cmp	r7, #0
 801ac32:	f000 80d8 	beq.w	801ade6 <_printf_i+0x1d2>
 801ac36:	2f58      	cmp	r7, #88	; 0x58
 801ac38:	f000 80a3 	beq.w	801ad82 <_printf_i+0x16e>
 801ac3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ac40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ac44:	e03a      	b.n	801acbc <_printf_i+0xa8>
 801ac46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ac4a:	2b15      	cmp	r3, #21
 801ac4c:	d8f6      	bhi.n	801ac3c <_printf_i+0x28>
 801ac4e:	a001      	add	r0, pc, #4	; (adr r0, 801ac54 <_printf_i+0x40>)
 801ac50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801ac54:	0801acad 	.word	0x0801acad
 801ac58:	0801acc1 	.word	0x0801acc1
 801ac5c:	0801ac3d 	.word	0x0801ac3d
 801ac60:	0801ac3d 	.word	0x0801ac3d
 801ac64:	0801ac3d 	.word	0x0801ac3d
 801ac68:	0801ac3d 	.word	0x0801ac3d
 801ac6c:	0801acc1 	.word	0x0801acc1
 801ac70:	0801ac3d 	.word	0x0801ac3d
 801ac74:	0801ac3d 	.word	0x0801ac3d
 801ac78:	0801ac3d 	.word	0x0801ac3d
 801ac7c:	0801ac3d 	.word	0x0801ac3d
 801ac80:	0801adcd 	.word	0x0801adcd
 801ac84:	0801acf1 	.word	0x0801acf1
 801ac88:	0801adaf 	.word	0x0801adaf
 801ac8c:	0801ac3d 	.word	0x0801ac3d
 801ac90:	0801ac3d 	.word	0x0801ac3d
 801ac94:	0801adef 	.word	0x0801adef
 801ac98:	0801ac3d 	.word	0x0801ac3d
 801ac9c:	0801acf1 	.word	0x0801acf1
 801aca0:	0801ac3d 	.word	0x0801ac3d
 801aca4:	0801ac3d 	.word	0x0801ac3d
 801aca8:	0801adb7 	.word	0x0801adb7
 801acac:	680b      	ldr	r3, [r1, #0]
 801acae:	1d1a      	adds	r2, r3, #4
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	600a      	str	r2, [r1, #0]
 801acb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801acb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801acbc:	2301      	movs	r3, #1
 801acbe:	e0a3      	b.n	801ae08 <_printf_i+0x1f4>
 801acc0:	6825      	ldr	r5, [r4, #0]
 801acc2:	6808      	ldr	r0, [r1, #0]
 801acc4:	062e      	lsls	r6, r5, #24
 801acc6:	f100 0304 	add.w	r3, r0, #4
 801acca:	d50a      	bpl.n	801ace2 <_printf_i+0xce>
 801accc:	6805      	ldr	r5, [r0, #0]
 801acce:	600b      	str	r3, [r1, #0]
 801acd0:	2d00      	cmp	r5, #0
 801acd2:	da03      	bge.n	801acdc <_printf_i+0xc8>
 801acd4:	232d      	movs	r3, #45	; 0x2d
 801acd6:	426d      	negs	r5, r5
 801acd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801acdc:	485e      	ldr	r0, [pc, #376]	; (801ae58 <_printf_i+0x244>)
 801acde:	230a      	movs	r3, #10
 801ace0:	e019      	b.n	801ad16 <_printf_i+0x102>
 801ace2:	f015 0f40 	tst.w	r5, #64	; 0x40
 801ace6:	6805      	ldr	r5, [r0, #0]
 801ace8:	600b      	str	r3, [r1, #0]
 801acea:	bf18      	it	ne
 801acec:	b22d      	sxthne	r5, r5
 801acee:	e7ef      	b.n	801acd0 <_printf_i+0xbc>
 801acf0:	680b      	ldr	r3, [r1, #0]
 801acf2:	6825      	ldr	r5, [r4, #0]
 801acf4:	1d18      	adds	r0, r3, #4
 801acf6:	6008      	str	r0, [r1, #0]
 801acf8:	0628      	lsls	r0, r5, #24
 801acfa:	d501      	bpl.n	801ad00 <_printf_i+0xec>
 801acfc:	681d      	ldr	r5, [r3, #0]
 801acfe:	e002      	b.n	801ad06 <_printf_i+0xf2>
 801ad00:	0669      	lsls	r1, r5, #25
 801ad02:	d5fb      	bpl.n	801acfc <_printf_i+0xe8>
 801ad04:	881d      	ldrh	r5, [r3, #0]
 801ad06:	4854      	ldr	r0, [pc, #336]	; (801ae58 <_printf_i+0x244>)
 801ad08:	2f6f      	cmp	r7, #111	; 0x6f
 801ad0a:	bf0c      	ite	eq
 801ad0c:	2308      	moveq	r3, #8
 801ad0e:	230a      	movne	r3, #10
 801ad10:	2100      	movs	r1, #0
 801ad12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ad16:	6866      	ldr	r6, [r4, #4]
 801ad18:	60a6      	str	r6, [r4, #8]
 801ad1a:	2e00      	cmp	r6, #0
 801ad1c:	bfa2      	ittt	ge
 801ad1e:	6821      	ldrge	r1, [r4, #0]
 801ad20:	f021 0104 	bicge.w	r1, r1, #4
 801ad24:	6021      	strge	r1, [r4, #0]
 801ad26:	b90d      	cbnz	r5, 801ad2c <_printf_i+0x118>
 801ad28:	2e00      	cmp	r6, #0
 801ad2a:	d04d      	beq.n	801adc8 <_printf_i+0x1b4>
 801ad2c:	4616      	mov	r6, r2
 801ad2e:	fbb5 f1f3 	udiv	r1, r5, r3
 801ad32:	fb03 5711 	mls	r7, r3, r1, r5
 801ad36:	5dc7      	ldrb	r7, [r0, r7]
 801ad38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ad3c:	462f      	mov	r7, r5
 801ad3e:	42bb      	cmp	r3, r7
 801ad40:	460d      	mov	r5, r1
 801ad42:	d9f4      	bls.n	801ad2e <_printf_i+0x11a>
 801ad44:	2b08      	cmp	r3, #8
 801ad46:	d10b      	bne.n	801ad60 <_printf_i+0x14c>
 801ad48:	6823      	ldr	r3, [r4, #0]
 801ad4a:	07df      	lsls	r7, r3, #31
 801ad4c:	d508      	bpl.n	801ad60 <_printf_i+0x14c>
 801ad4e:	6923      	ldr	r3, [r4, #16]
 801ad50:	6861      	ldr	r1, [r4, #4]
 801ad52:	4299      	cmp	r1, r3
 801ad54:	bfde      	ittt	le
 801ad56:	2330      	movle	r3, #48	; 0x30
 801ad58:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ad5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ad60:	1b92      	subs	r2, r2, r6
 801ad62:	6122      	str	r2, [r4, #16]
 801ad64:	f8cd a000 	str.w	sl, [sp]
 801ad68:	464b      	mov	r3, r9
 801ad6a:	aa03      	add	r2, sp, #12
 801ad6c:	4621      	mov	r1, r4
 801ad6e:	4640      	mov	r0, r8
 801ad70:	f7ff fee2 	bl	801ab38 <_printf_common>
 801ad74:	3001      	adds	r0, #1
 801ad76:	d14c      	bne.n	801ae12 <_printf_i+0x1fe>
 801ad78:	f04f 30ff 	mov.w	r0, #4294967295
 801ad7c:	b004      	add	sp, #16
 801ad7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad82:	4835      	ldr	r0, [pc, #212]	; (801ae58 <_printf_i+0x244>)
 801ad84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ad88:	6823      	ldr	r3, [r4, #0]
 801ad8a:	680e      	ldr	r6, [r1, #0]
 801ad8c:	061f      	lsls	r7, r3, #24
 801ad8e:	f856 5b04 	ldr.w	r5, [r6], #4
 801ad92:	600e      	str	r6, [r1, #0]
 801ad94:	d514      	bpl.n	801adc0 <_printf_i+0x1ac>
 801ad96:	07d9      	lsls	r1, r3, #31
 801ad98:	bf44      	itt	mi
 801ad9a:	f043 0320 	orrmi.w	r3, r3, #32
 801ad9e:	6023      	strmi	r3, [r4, #0]
 801ada0:	b91d      	cbnz	r5, 801adaa <_printf_i+0x196>
 801ada2:	6823      	ldr	r3, [r4, #0]
 801ada4:	f023 0320 	bic.w	r3, r3, #32
 801ada8:	6023      	str	r3, [r4, #0]
 801adaa:	2310      	movs	r3, #16
 801adac:	e7b0      	b.n	801ad10 <_printf_i+0xfc>
 801adae:	6823      	ldr	r3, [r4, #0]
 801adb0:	f043 0320 	orr.w	r3, r3, #32
 801adb4:	6023      	str	r3, [r4, #0]
 801adb6:	2378      	movs	r3, #120	; 0x78
 801adb8:	4828      	ldr	r0, [pc, #160]	; (801ae5c <_printf_i+0x248>)
 801adba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801adbe:	e7e3      	b.n	801ad88 <_printf_i+0x174>
 801adc0:	065e      	lsls	r6, r3, #25
 801adc2:	bf48      	it	mi
 801adc4:	b2ad      	uxthmi	r5, r5
 801adc6:	e7e6      	b.n	801ad96 <_printf_i+0x182>
 801adc8:	4616      	mov	r6, r2
 801adca:	e7bb      	b.n	801ad44 <_printf_i+0x130>
 801adcc:	680b      	ldr	r3, [r1, #0]
 801adce:	6826      	ldr	r6, [r4, #0]
 801add0:	6960      	ldr	r0, [r4, #20]
 801add2:	1d1d      	adds	r5, r3, #4
 801add4:	600d      	str	r5, [r1, #0]
 801add6:	0635      	lsls	r5, r6, #24
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	d501      	bpl.n	801ade0 <_printf_i+0x1cc>
 801addc:	6018      	str	r0, [r3, #0]
 801adde:	e002      	b.n	801ade6 <_printf_i+0x1d2>
 801ade0:	0671      	lsls	r1, r6, #25
 801ade2:	d5fb      	bpl.n	801addc <_printf_i+0x1c8>
 801ade4:	8018      	strh	r0, [r3, #0]
 801ade6:	2300      	movs	r3, #0
 801ade8:	6123      	str	r3, [r4, #16]
 801adea:	4616      	mov	r6, r2
 801adec:	e7ba      	b.n	801ad64 <_printf_i+0x150>
 801adee:	680b      	ldr	r3, [r1, #0]
 801adf0:	1d1a      	adds	r2, r3, #4
 801adf2:	600a      	str	r2, [r1, #0]
 801adf4:	681e      	ldr	r6, [r3, #0]
 801adf6:	6862      	ldr	r2, [r4, #4]
 801adf8:	2100      	movs	r1, #0
 801adfa:	4630      	mov	r0, r6
 801adfc:	f7e5 fa10 	bl	8000220 <memchr>
 801ae00:	b108      	cbz	r0, 801ae06 <_printf_i+0x1f2>
 801ae02:	1b80      	subs	r0, r0, r6
 801ae04:	6060      	str	r0, [r4, #4]
 801ae06:	6863      	ldr	r3, [r4, #4]
 801ae08:	6123      	str	r3, [r4, #16]
 801ae0a:	2300      	movs	r3, #0
 801ae0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ae10:	e7a8      	b.n	801ad64 <_printf_i+0x150>
 801ae12:	6923      	ldr	r3, [r4, #16]
 801ae14:	4632      	mov	r2, r6
 801ae16:	4649      	mov	r1, r9
 801ae18:	4640      	mov	r0, r8
 801ae1a:	47d0      	blx	sl
 801ae1c:	3001      	adds	r0, #1
 801ae1e:	d0ab      	beq.n	801ad78 <_printf_i+0x164>
 801ae20:	6823      	ldr	r3, [r4, #0]
 801ae22:	079b      	lsls	r3, r3, #30
 801ae24:	d413      	bmi.n	801ae4e <_printf_i+0x23a>
 801ae26:	68e0      	ldr	r0, [r4, #12]
 801ae28:	9b03      	ldr	r3, [sp, #12]
 801ae2a:	4298      	cmp	r0, r3
 801ae2c:	bfb8      	it	lt
 801ae2e:	4618      	movlt	r0, r3
 801ae30:	e7a4      	b.n	801ad7c <_printf_i+0x168>
 801ae32:	2301      	movs	r3, #1
 801ae34:	4632      	mov	r2, r6
 801ae36:	4649      	mov	r1, r9
 801ae38:	4640      	mov	r0, r8
 801ae3a:	47d0      	blx	sl
 801ae3c:	3001      	adds	r0, #1
 801ae3e:	d09b      	beq.n	801ad78 <_printf_i+0x164>
 801ae40:	3501      	adds	r5, #1
 801ae42:	68e3      	ldr	r3, [r4, #12]
 801ae44:	9903      	ldr	r1, [sp, #12]
 801ae46:	1a5b      	subs	r3, r3, r1
 801ae48:	42ab      	cmp	r3, r5
 801ae4a:	dcf2      	bgt.n	801ae32 <_printf_i+0x21e>
 801ae4c:	e7eb      	b.n	801ae26 <_printf_i+0x212>
 801ae4e:	2500      	movs	r5, #0
 801ae50:	f104 0619 	add.w	r6, r4, #25
 801ae54:	e7f5      	b.n	801ae42 <_printf_i+0x22e>
 801ae56:	bf00      	nop
 801ae58:	080258bd 	.word	0x080258bd
 801ae5c:	080258ce 	.word	0x080258ce

0801ae60 <_free_r>:
 801ae60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ae62:	2900      	cmp	r1, #0
 801ae64:	d048      	beq.n	801aef8 <_free_r+0x98>
 801ae66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ae6a:	9001      	str	r0, [sp, #4]
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	f1a1 0404 	sub.w	r4, r1, #4
 801ae72:	bfb8      	it	lt
 801ae74:	18e4      	addlt	r4, r4, r3
 801ae76:	f000 f8d3 	bl	801b020 <__malloc_lock>
 801ae7a:	4a20      	ldr	r2, [pc, #128]	; (801aefc <_free_r+0x9c>)
 801ae7c:	9801      	ldr	r0, [sp, #4]
 801ae7e:	6813      	ldr	r3, [r2, #0]
 801ae80:	4615      	mov	r5, r2
 801ae82:	b933      	cbnz	r3, 801ae92 <_free_r+0x32>
 801ae84:	6063      	str	r3, [r4, #4]
 801ae86:	6014      	str	r4, [r2, #0]
 801ae88:	b003      	add	sp, #12
 801ae8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ae8e:	f000 b8cd 	b.w	801b02c <__malloc_unlock>
 801ae92:	42a3      	cmp	r3, r4
 801ae94:	d90b      	bls.n	801aeae <_free_r+0x4e>
 801ae96:	6821      	ldr	r1, [r4, #0]
 801ae98:	1862      	adds	r2, r4, r1
 801ae9a:	4293      	cmp	r3, r2
 801ae9c:	bf04      	itt	eq
 801ae9e:	681a      	ldreq	r2, [r3, #0]
 801aea0:	685b      	ldreq	r3, [r3, #4]
 801aea2:	6063      	str	r3, [r4, #4]
 801aea4:	bf04      	itt	eq
 801aea6:	1852      	addeq	r2, r2, r1
 801aea8:	6022      	streq	r2, [r4, #0]
 801aeaa:	602c      	str	r4, [r5, #0]
 801aeac:	e7ec      	b.n	801ae88 <_free_r+0x28>
 801aeae:	461a      	mov	r2, r3
 801aeb0:	685b      	ldr	r3, [r3, #4]
 801aeb2:	b10b      	cbz	r3, 801aeb8 <_free_r+0x58>
 801aeb4:	42a3      	cmp	r3, r4
 801aeb6:	d9fa      	bls.n	801aeae <_free_r+0x4e>
 801aeb8:	6811      	ldr	r1, [r2, #0]
 801aeba:	1855      	adds	r5, r2, r1
 801aebc:	42a5      	cmp	r5, r4
 801aebe:	d10b      	bne.n	801aed8 <_free_r+0x78>
 801aec0:	6824      	ldr	r4, [r4, #0]
 801aec2:	4421      	add	r1, r4
 801aec4:	1854      	adds	r4, r2, r1
 801aec6:	42a3      	cmp	r3, r4
 801aec8:	6011      	str	r1, [r2, #0]
 801aeca:	d1dd      	bne.n	801ae88 <_free_r+0x28>
 801aecc:	681c      	ldr	r4, [r3, #0]
 801aece:	685b      	ldr	r3, [r3, #4]
 801aed0:	6053      	str	r3, [r2, #4]
 801aed2:	4421      	add	r1, r4
 801aed4:	6011      	str	r1, [r2, #0]
 801aed6:	e7d7      	b.n	801ae88 <_free_r+0x28>
 801aed8:	d902      	bls.n	801aee0 <_free_r+0x80>
 801aeda:	230c      	movs	r3, #12
 801aedc:	6003      	str	r3, [r0, #0]
 801aede:	e7d3      	b.n	801ae88 <_free_r+0x28>
 801aee0:	6825      	ldr	r5, [r4, #0]
 801aee2:	1961      	adds	r1, r4, r5
 801aee4:	428b      	cmp	r3, r1
 801aee6:	bf04      	itt	eq
 801aee8:	6819      	ldreq	r1, [r3, #0]
 801aeea:	685b      	ldreq	r3, [r3, #4]
 801aeec:	6063      	str	r3, [r4, #4]
 801aeee:	bf04      	itt	eq
 801aef0:	1949      	addeq	r1, r1, r5
 801aef2:	6021      	streq	r1, [r4, #0]
 801aef4:	6054      	str	r4, [r2, #4]
 801aef6:	e7c7      	b.n	801ae88 <_free_r+0x28>
 801aef8:	b003      	add	sp, #12
 801aefa:	bd30      	pop	{r4, r5, pc}
 801aefc:	2001d3a8 	.word	0x2001d3a8

0801af00 <_malloc_r>:
 801af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af02:	1ccd      	adds	r5, r1, #3
 801af04:	f025 0503 	bic.w	r5, r5, #3
 801af08:	3508      	adds	r5, #8
 801af0a:	2d0c      	cmp	r5, #12
 801af0c:	bf38      	it	cc
 801af0e:	250c      	movcc	r5, #12
 801af10:	2d00      	cmp	r5, #0
 801af12:	4606      	mov	r6, r0
 801af14:	db01      	blt.n	801af1a <_malloc_r+0x1a>
 801af16:	42a9      	cmp	r1, r5
 801af18:	d903      	bls.n	801af22 <_malloc_r+0x22>
 801af1a:	230c      	movs	r3, #12
 801af1c:	6033      	str	r3, [r6, #0]
 801af1e:	2000      	movs	r0, #0
 801af20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af22:	f000 f87d 	bl	801b020 <__malloc_lock>
 801af26:	4921      	ldr	r1, [pc, #132]	; (801afac <_malloc_r+0xac>)
 801af28:	680a      	ldr	r2, [r1, #0]
 801af2a:	4614      	mov	r4, r2
 801af2c:	b99c      	cbnz	r4, 801af56 <_malloc_r+0x56>
 801af2e:	4f20      	ldr	r7, [pc, #128]	; (801afb0 <_malloc_r+0xb0>)
 801af30:	683b      	ldr	r3, [r7, #0]
 801af32:	b923      	cbnz	r3, 801af3e <_malloc_r+0x3e>
 801af34:	4621      	mov	r1, r4
 801af36:	4630      	mov	r0, r6
 801af38:	f000 f862 	bl	801b000 <_sbrk_r>
 801af3c:	6038      	str	r0, [r7, #0]
 801af3e:	4629      	mov	r1, r5
 801af40:	4630      	mov	r0, r6
 801af42:	f000 f85d 	bl	801b000 <_sbrk_r>
 801af46:	1c43      	adds	r3, r0, #1
 801af48:	d123      	bne.n	801af92 <_malloc_r+0x92>
 801af4a:	230c      	movs	r3, #12
 801af4c:	6033      	str	r3, [r6, #0]
 801af4e:	4630      	mov	r0, r6
 801af50:	f000 f86c 	bl	801b02c <__malloc_unlock>
 801af54:	e7e3      	b.n	801af1e <_malloc_r+0x1e>
 801af56:	6823      	ldr	r3, [r4, #0]
 801af58:	1b5b      	subs	r3, r3, r5
 801af5a:	d417      	bmi.n	801af8c <_malloc_r+0x8c>
 801af5c:	2b0b      	cmp	r3, #11
 801af5e:	d903      	bls.n	801af68 <_malloc_r+0x68>
 801af60:	6023      	str	r3, [r4, #0]
 801af62:	441c      	add	r4, r3
 801af64:	6025      	str	r5, [r4, #0]
 801af66:	e004      	b.n	801af72 <_malloc_r+0x72>
 801af68:	6863      	ldr	r3, [r4, #4]
 801af6a:	42a2      	cmp	r2, r4
 801af6c:	bf0c      	ite	eq
 801af6e:	600b      	streq	r3, [r1, #0]
 801af70:	6053      	strne	r3, [r2, #4]
 801af72:	4630      	mov	r0, r6
 801af74:	f000 f85a 	bl	801b02c <__malloc_unlock>
 801af78:	f104 000b 	add.w	r0, r4, #11
 801af7c:	1d23      	adds	r3, r4, #4
 801af7e:	f020 0007 	bic.w	r0, r0, #7
 801af82:	1ac2      	subs	r2, r0, r3
 801af84:	d0cc      	beq.n	801af20 <_malloc_r+0x20>
 801af86:	1a1b      	subs	r3, r3, r0
 801af88:	50a3      	str	r3, [r4, r2]
 801af8a:	e7c9      	b.n	801af20 <_malloc_r+0x20>
 801af8c:	4622      	mov	r2, r4
 801af8e:	6864      	ldr	r4, [r4, #4]
 801af90:	e7cc      	b.n	801af2c <_malloc_r+0x2c>
 801af92:	1cc4      	adds	r4, r0, #3
 801af94:	f024 0403 	bic.w	r4, r4, #3
 801af98:	42a0      	cmp	r0, r4
 801af9a:	d0e3      	beq.n	801af64 <_malloc_r+0x64>
 801af9c:	1a21      	subs	r1, r4, r0
 801af9e:	4630      	mov	r0, r6
 801afa0:	f000 f82e 	bl	801b000 <_sbrk_r>
 801afa4:	3001      	adds	r0, #1
 801afa6:	d1dd      	bne.n	801af64 <_malloc_r+0x64>
 801afa8:	e7cf      	b.n	801af4a <_malloc_r+0x4a>
 801afaa:	bf00      	nop
 801afac:	2001d3a8 	.word	0x2001d3a8
 801afb0:	2001d3ac 	.word	0x2001d3ac

0801afb4 <_realloc_r>:
 801afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afb6:	4607      	mov	r7, r0
 801afb8:	4614      	mov	r4, r2
 801afba:	460e      	mov	r6, r1
 801afbc:	b921      	cbnz	r1, 801afc8 <_realloc_r+0x14>
 801afbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801afc2:	4611      	mov	r1, r2
 801afc4:	f7ff bf9c 	b.w	801af00 <_malloc_r>
 801afc8:	b922      	cbnz	r2, 801afd4 <_realloc_r+0x20>
 801afca:	f7ff ff49 	bl	801ae60 <_free_r>
 801afce:	4625      	mov	r5, r4
 801afd0:	4628      	mov	r0, r5
 801afd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801afd4:	f000 f830 	bl	801b038 <_malloc_usable_size_r>
 801afd8:	42a0      	cmp	r0, r4
 801afda:	d20f      	bcs.n	801affc <_realloc_r+0x48>
 801afdc:	4621      	mov	r1, r4
 801afde:	4638      	mov	r0, r7
 801afe0:	f7ff ff8e 	bl	801af00 <_malloc_r>
 801afe4:	4605      	mov	r5, r0
 801afe6:	2800      	cmp	r0, #0
 801afe8:	d0f2      	beq.n	801afd0 <_realloc_r+0x1c>
 801afea:	4631      	mov	r1, r6
 801afec:	4622      	mov	r2, r4
 801afee:	f7ff fbef 	bl	801a7d0 <memcpy>
 801aff2:	4631      	mov	r1, r6
 801aff4:	4638      	mov	r0, r7
 801aff6:	f7ff ff33 	bl	801ae60 <_free_r>
 801affa:	e7e9      	b.n	801afd0 <_realloc_r+0x1c>
 801affc:	4635      	mov	r5, r6
 801affe:	e7e7      	b.n	801afd0 <_realloc_r+0x1c>

0801b000 <_sbrk_r>:
 801b000:	b538      	push	{r3, r4, r5, lr}
 801b002:	4d06      	ldr	r5, [pc, #24]	; (801b01c <_sbrk_r+0x1c>)
 801b004:	2300      	movs	r3, #0
 801b006:	4604      	mov	r4, r0
 801b008:	4608      	mov	r0, r1
 801b00a:	602b      	str	r3, [r5, #0]
 801b00c:	f7e6 ff8e 	bl	8001f2c <_sbrk>
 801b010:	1c43      	adds	r3, r0, #1
 801b012:	d102      	bne.n	801b01a <_sbrk_r+0x1a>
 801b014:	682b      	ldr	r3, [r5, #0]
 801b016:	b103      	cbz	r3, 801b01a <_sbrk_r+0x1a>
 801b018:	6023      	str	r3, [r4, #0]
 801b01a:	bd38      	pop	{r3, r4, r5, pc}
 801b01c:	2001d6e0 	.word	0x2001d6e0

0801b020 <__malloc_lock>:
 801b020:	4801      	ldr	r0, [pc, #4]	; (801b028 <__malloc_lock+0x8>)
 801b022:	f000 b811 	b.w	801b048 <__retarget_lock_acquire_recursive>
 801b026:	bf00      	nop
 801b028:	2001d6e8 	.word	0x2001d6e8

0801b02c <__malloc_unlock>:
 801b02c:	4801      	ldr	r0, [pc, #4]	; (801b034 <__malloc_unlock+0x8>)
 801b02e:	f000 b80c 	b.w	801b04a <__retarget_lock_release_recursive>
 801b032:	bf00      	nop
 801b034:	2001d6e8 	.word	0x2001d6e8

0801b038 <_malloc_usable_size_r>:
 801b038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b03c:	1f18      	subs	r0, r3, #4
 801b03e:	2b00      	cmp	r3, #0
 801b040:	bfbc      	itt	lt
 801b042:	580b      	ldrlt	r3, [r1, r0]
 801b044:	18c0      	addlt	r0, r0, r3
 801b046:	4770      	bx	lr

0801b048 <__retarget_lock_acquire_recursive>:
 801b048:	4770      	bx	lr

0801b04a <__retarget_lock_release_recursive>:
 801b04a:	4770      	bx	lr
 801b04c:	0000      	movs	r0, r0
	...

0801b050 <ceil>:
 801b050:	ec51 0b10 	vmov	r0, r1, d0
 801b054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b058:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b05c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b060:	2e13      	cmp	r6, #19
 801b062:	ee10 5a10 	vmov	r5, s0
 801b066:	ee10 8a10 	vmov	r8, s0
 801b06a:	460c      	mov	r4, r1
 801b06c:	dc30      	bgt.n	801b0d0 <ceil+0x80>
 801b06e:	2e00      	cmp	r6, #0
 801b070:	da12      	bge.n	801b098 <ceil+0x48>
 801b072:	a335      	add	r3, pc, #212	; (adr r3, 801b148 <ceil+0xf8>)
 801b074:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b078:	f7e5 f928 	bl	80002cc <__adddf3>
 801b07c:	2200      	movs	r2, #0
 801b07e:	2300      	movs	r3, #0
 801b080:	f7e5 fd6a 	bl	8000b58 <__aeabi_dcmpgt>
 801b084:	b128      	cbz	r0, 801b092 <ceil+0x42>
 801b086:	2c00      	cmp	r4, #0
 801b088:	db55      	blt.n	801b136 <ceil+0xe6>
 801b08a:	432c      	orrs	r4, r5
 801b08c:	d057      	beq.n	801b13e <ceil+0xee>
 801b08e:	4c30      	ldr	r4, [pc, #192]	; (801b150 <ceil+0x100>)
 801b090:	2500      	movs	r5, #0
 801b092:	4621      	mov	r1, r4
 801b094:	4628      	mov	r0, r5
 801b096:	e025      	b.n	801b0e4 <ceil+0x94>
 801b098:	4f2e      	ldr	r7, [pc, #184]	; (801b154 <ceil+0x104>)
 801b09a:	4137      	asrs	r7, r6
 801b09c:	ea01 0307 	and.w	r3, r1, r7
 801b0a0:	4303      	orrs	r3, r0
 801b0a2:	d01f      	beq.n	801b0e4 <ceil+0x94>
 801b0a4:	a328      	add	r3, pc, #160	; (adr r3, 801b148 <ceil+0xf8>)
 801b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0aa:	f7e5 f90f 	bl	80002cc <__adddf3>
 801b0ae:	2200      	movs	r2, #0
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	f7e5 fd51 	bl	8000b58 <__aeabi_dcmpgt>
 801b0b6:	2800      	cmp	r0, #0
 801b0b8:	d0eb      	beq.n	801b092 <ceil+0x42>
 801b0ba:	2c00      	cmp	r4, #0
 801b0bc:	bfc2      	ittt	gt
 801b0be:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801b0c2:	fa43 f606 	asrgt.w	r6, r3, r6
 801b0c6:	19a4      	addgt	r4, r4, r6
 801b0c8:	ea24 0407 	bic.w	r4, r4, r7
 801b0cc:	2500      	movs	r5, #0
 801b0ce:	e7e0      	b.n	801b092 <ceil+0x42>
 801b0d0:	2e33      	cmp	r6, #51	; 0x33
 801b0d2:	dd0b      	ble.n	801b0ec <ceil+0x9c>
 801b0d4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b0d8:	d104      	bne.n	801b0e4 <ceil+0x94>
 801b0da:	ee10 2a10 	vmov	r2, s0
 801b0de:	460b      	mov	r3, r1
 801b0e0:	f7e5 f8f4 	bl	80002cc <__adddf3>
 801b0e4:	ec41 0b10 	vmov	d0, r0, r1
 801b0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0ec:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b0f0:	f04f 33ff 	mov.w	r3, #4294967295
 801b0f4:	fa23 f707 	lsr.w	r7, r3, r7
 801b0f8:	4207      	tst	r7, r0
 801b0fa:	d0f3      	beq.n	801b0e4 <ceil+0x94>
 801b0fc:	a312      	add	r3, pc, #72	; (adr r3, 801b148 <ceil+0xf8>)
 801b0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b102:	f7e5 f8e3 	bl	80002cc <__adddf3>
 801b106:	2200      	movs	r2, #0
 801b108:	2300      	movs	r3, #0
 801b10a:	f7e5 fd25 	bl	8000b58 <__aeabi_dcmpgt>
 801b10e:	2800      	cmp	r0, #0
 801b110:	d0bf      	beq.n	801b092 <ceil+0x42>
 801b112:	2c00      	cmp	r4, #0
 801b114:	dd02      	ble.n	801b11c <ceil+0xcc>
 801b116:	2e14      	cmp	r6, #20
 801b118:	d103      	bne.n	801b122 <ceil+0xd2>
 801b11a:	3401      	adds	r4, #1
 801b11c:	ea25 0507 	bic.w	r5, r5, r7
 801b120:	e7b7      	b.n	801b092 <ceil+0x42>
 801b122:	2301      	movs	r3, #1
 801b124:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b128:	fa03 f606 	lsl.w	r6, r3, r6
 801b12c:	4435      	add	r5, r6
 801b12e:	4545      	cmp	r5, r8
 801b130:	bf38      	it	cc
 801b132:	18e4      	addcc	r4, r4, r3
 801b134:	e7f2      	b.n	801b11c <ceil+0xcc>
 801b136:	2500      	movs	r5, #0
 801b138:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b13c:	e7a9      	b.n	801b092 <ceil+0x42>
 801b13e:	4625      	mov	r5, r4
 801b140:	e7a7      	b.n	801b092 <ceil+0x42>
 801b142:	bf00      	nop
 801b144:	f3af 8000 	nop.w
 801b148:	8800759c 	.word	0x8800759c
 801b14c:	7e37e43c 	.word	0x7e37e43c
 801b150:	3ff00000 	.word	0x3ff00000
 801b154:	000fffff 	.word	0x000fffff

0801b158 <floor>:
 801b158:	ec51 0b10 	vmov	r0, r1, d0
 801b15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b160:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b164:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b168:	2e13      	cmp	r6, #19
 801b16a:	ee10 5a10 	vmov	r5, s0
 801b16e:	ee10 8a10 	vmov	r8, s0
 801b172:	460c      	mov	r4, r1
 801b174:	dc32      	bgt.n	801b1dc <floor+0x84>
 801b176:	2e00      	cmp	r6, #0
 801b178:	da14      	bge.n	801b1a4 <floor+0x4c>
 801b17a:	a333      	add	r3, pc, #204	; (adr r3, 801b248 <floor+0xf0>)
 801b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b180:	f7e5 f8a4 	bl	80002cc <__adddf3>
 801b184:	2200      	movs	r2, #0
 801b186:	2300      	movs	r3, #0
 801b188:	f7e5 fce6 	bl	8000b58 <__aeabi_dcmpgt>
 801b18c:	b138      	cbz	r0, 801b19e <floor+0x46>
 801b18e:	2c00      	cmp	r4, #0
 801b190:	da57      	bge.n	801b242 <floor+0xea>
 801b192:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b196:	431d      	orrs	r5, r3
 801b198:	d001      	beq.n	801b19e <floor+0x46>
 801b19a:	4c2d      	ldr	r4, [pc, #180]	; (801b250 <floor+0xf8>)
 801b19c:	2500      	movs	r5, #0
 801b19e:	4621      	mov	r1, r4
 801b1a0:	4628      	mov	r0, r5
 801b1a2:	e025      	b.n	801b1f0 <floor+0x98>
 801b1a4:	4f2b      	ldr	r7, [pc, #172]	; (801b254 <floor+0xfc>)
 801b1a6:	4137      	asrs	r7, r6
 801b1a8:	ea01 0307 	and.w	r3, r1, r7
 801b1ac:	4303      	orrs	r3, r0
 801b1ae:	d01f      	beq.n	801b1f0 <floor+0x98>
 801b1b0:	a325      	add	r3, pc, #148	; (adr r3, 801b248 <floor+0xf0>)
 801b1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1b6:	f7e5 f889 	bl	80002cc <__adddf3>
 801b1ba:	2200      	movs	r2, #0
 801b1bc:	2300      	movs	r3, #0
 801b1be:	f7e5 fccb 	bl	8000b58 <__aeabi_dcmpgt>
 801b1c2:	2800      	cmp	r0, #0
 801b1c4:	d0eb      	beq.n	801b19e <floor+0x46>
 801b1c6:	2c00      	cmp	r4, #0
 801b1c8:	bfbe      	ittt	lt
 801b1ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b1ce:	fa43 f606 	asrlt.w	r6, r3, r6
 801b1d2:	19a4      	addlt	r4, r4, r6
 801b1d4:	ea24 0407 	bic.w	r4, r4, r7
 801b1d8:	2500      	movs	r5, #0
 801b1da:	e7e0      	b.n	801b19e <floor+0x46>
 801b1dc:	2e33      	cmp	r6, #51	; 0x33
 801b1de:	dd0b      	ble.n	801b1f8 <floor+0xa0>
 801b1e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b1e4:	d104      	bne.n	801b1f0 <floor+0x98>
 801b1e6:	ee10 2a10 	vmov	r2, s0
 801b1ea:	460b      	mov	r3, r1
 801b1ec:	f7e5 f86e 	bl	80002cc <__adddf3>
 801b1f0:	ec41 0b10 	vmov	d0, r0, r1
 801b1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1f8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b1fc:	f04f 33ff 	mov.w	r3, #4294967295
 801b200:	fa23 f707 	lsr.w	r7, r3, r7
 801b204:	4207      	tst	r7, r0
 801b206:	d0f3      	beq.n	801b1f0 <floor+0x98>
 801b208:	a30f      	add	r3, pc, #60	; (adr r3, 801b248 <floor+0xf0>)
 801b20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b20e:	f7e5 f85d 	bl	80002cc <__adddf3>
 801b212:	2200      	movs	r2, #0
 801b214:	2300      	movs	r3, #0
 801b216:	f7e5 fc9f 	bl	8000b58 <__aeabi_dcmpgt>
 801b21a:	2800      	cmp	r0, #0
 801b21c:	d0bf      	beq.n	801b19e <floor+0x46>
 801b21e:	2c00      	cmp	r4, #0
 801b220:	da02      	bge.n	801b228 <floor+0xd0>
 801b222:	2e14      	cmp	r6, #20
 801b224:	d103      	bne.n	801b22e <floor+0xd6>
 801b226:	3401      	adds	r4, #1
 801b228:	ea25 0507 	bic.w	r5, r5, r7
 801b22c:	e7b7      	b.n	801b19e <floor+0x46>
 801b22e:	2301      	movs	r3, #1
 801b230:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b234:	fa03 f606 	lsl.w	r6, r3, r6
 801b238:	4435      	add	r5, r6
 801b23a:	4545      	cmp	r5, r8
 801b23c:	bf38      	it	cc
 801b23e:	18e4      	addcc	r4, r4, r3
 801b240:	e7f2      	b.n	801b228 <floor+0xd0>
 801b242:	2500      	movs	r5, #0
 801b244:	462c      	mov	r4, r5
 801b246:	e7aa      	b.n	801b19e <floor+0x46>
 801b248:	8800759c 	.word	0x8800759c
 801b24c:	7e37e43c 	.word	0x7e37e43c
 801b250:	bff00000 	.word	0xbff00000
 801b254:	000fffff 	.word	0x000fffff

0801b258 <_init>:
 801b258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b25a:	bf00      	nop
 801b25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b25e:	bc08      	pop	{r3}
 801b260:	469e      	mov	lr, r3
 801b262:	4770      	bx	lr

0801b264 <_fini>:
 801b264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b266:	bf00      	nop
 801b268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b26a:	bc08      	pop	{r3}
 801b26c:	469e      	mov	lr, r3
 801b26e:	4770      	bx	lr
