
Mikromedia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006698  0801710c  0801710c  0002710c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d7a4  0801d7a4  00030290  2**0
                  CONTENTS
  4 .ARM          00000008  0801d7a4  0801d7a4  0002d7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d7ac  0801d7ac  00030290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d7ac  0801d7ac  0002d7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d7b0  0801d7b0  0002d7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0801d7b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d394  20000290  0801da44  00030290  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001d624  0801da44  0003d624  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028573  00000000  00000000  000302be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004547  00000000  00000000  00058831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  0005cd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a8  00000000  00000000  0005e318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bbc0  00000000  00000000  0005f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001909d  00000000  00000000  0008b280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001074df  00000000  00000000  000a431d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d5  00000000  00000000  001ab7fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d0c  00000000  00000000  001ab8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000290 	.word	0x20000290
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080170f4 	.word	0x080170f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000294 	.word	0x20000294
 800020c:	080170f4 	.word	0x080170f4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2f>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab4:	bf24      	itt	cs
 8000ab6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000abe:	d90d      	bls.n	8000adc <__aeabi_d2f+0x30>
 8000ac0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000acc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad4:	bf08      	it	eq
 8000ad6:	f020 0001 	biceq.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae0:	d121      	bne.n	8000b26 <__aeabi_d2f+0x7a>
 8000ae2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae6:	bfbc      	itt	lt
 8000ae8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	4770      	bxlt	lr
 8000aee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af6:	f1c2 0218 	rsb	r2, r2, #24
 8000afa:	f1c2 0c20 	rsb	ip, r2, #32
 8000afe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b02:	fa20 f002 	lsr.w	r0, r0, r2
 8000b06:	bf18      	it	ne
 8000b08:	f040 0001 	orrne.w	r0, r0, #1
 8000b0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b18:	ea40 000c 	orr.w	r0, r0, ip
 8000b1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b24:	e7cc      	b.n	8000ac0 <__aeabi_d2f+0x14>
 8000b26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2a:	d107      	bne.n	8000b3c <__aeabi_d2f+0x90>
 8000b2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b30:	bf1e      	ittt	ne
 8000b32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3a:	4770      	bxne	lr
 8000b3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b96e 	b.w	8000e40 <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	4604      	mov	r4, r0
 8000b84:	468c      	mov	ip, r1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8083 	bne.w	8000c92 <__udivmoddi4+0x116>
 8000b8c:	428a      	cmp	r2, r1
 8000b8e:	4617      	mov	r7, r2
 8000b90:	d947      	bls.n	8000c22 <__udivmoddi4+0xa6>
 8000b92:	fab2 f282 	clz	r2, r2
 8000b96:	b142      	cbz	r2, 8000baa <__udivmoddi4+0x2e>
 8000b98:	f1c2 0020 	rsb	r0, r2, #32
 8000b9c:	fa24 f000 	lsr.w	r0, r4, r0
 8000ba0:	4091      	lsls	r1, r2
 8000ba2:	4097      	lsls	r7, r2
 8000ba4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ba8:	4094      	lsls	r4, r2
 8000baa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bae:	0c23      	lsrs	r3, r4, #16
 8000bb0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bb4:	fa1f fe87 	uxth.w	lr, r7
 8000bb8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	d909      	bls.n	8000bdc <__udivmoddi4+0x60>
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bce:	f080 8119 	bcs.w	8000e04 <__udivmoddi4+0x288>
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	f240 8116 	bls.w	8000e04 <__udivmoddi4+0x288>
 8000bd8:	3e02      	subs	r6, #2
 8000bda:	443b      	add	r3, r7
 8000bdc:	1a5b      	subs	r3, r3, r1
 8000bde:	b2a4      	uxth	r4, r4
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf0:	45a6      	cmp	lr, r4
 8000bf2:	d909      	bls.n	8000c08 <__udivmoddi4+0x8c>
 8000bf4:	193c      	adds	r4, r7, r4
 8000bf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfa:	f080 8105 	bcs.w	8000e08 <__udivmoddi4+0x28c>
 8000bfe:	45a6      	cmp	lr, r4
 8000c00:	f240 8102 	bls.w	8000e08 <__udivmoddi4+0x28c>
 8000c04:	3802      	subs	r0, #2
 8000c06:	443c      	add	r4, r7
 8000c08:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0c:	eba4 040e 	sub.w	r4, r4, lr
 8000c10:	2600      	movs	r6, #0
 8000c12:	b11d      	cbz	r5, 8000c1c <__udivmoddi4+0xa0>
 8000c14:	40d4      	lsrs	r4, r2
 8000c16:	2300      	movs	r3, #0
 8000c18:	e9c5 4300 	strd	r4, r3, [r5]
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	b902      	cbnz	r2, 8000c26 <__udivmoddi4+0xaa>
 8000c24:	deff      	udf	#255	; 0xff
 8000c26:	fab2 f282 	clz	r2, r2
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	d150      	bne.n	8000cd0 <__udivmoddi4+0x154>
 8000c2e:	1bcb      	subs	r3, r1, r7
 8000c30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c34:	fa1f f887 	uxth.w	r8, r7
 8000c38:	2601      	movs	r6, #1
 8000c3a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c3e:	0c21      	lsrs	r1, r4, #16
 8000c40:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c48:	fb08 f30c 	mul.w	r3, r8, ip
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0xe4>
 8000c50:	1879      	adds	r1, r7, r1
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0xe2>
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	f200 80e9 	bhi.w	8000e30 <__udivmoddi4+0x2b4>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1ac9      	subs	r1, r1, r3
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c6c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x10c>
 8000c78:	193c      	adds	r4, r7, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x10a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80d9 	bhi.w	8000e38 <__udivmoddi4+0x2bc>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e7bf      	b.n	8000c12 <__udivmoddi4+0x96>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0x12e>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80b1 	beq.w	8000dfe <__udivmoddi4+0x282>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x1cc>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0x140>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80b8 	bhi.w	8000e2c <__udivmoddi4+0x2b0>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0103 	sbc.w	r1, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	468c      	mov	ip, r1
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0a8      	beq.n	8000c1c <__udivmoddi4+0xa0>
 8000cca:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cce:	e7a5      	b.n	8000c1c <__udivmoddi4+0xa0>
 8000cd0:	f1c2 0320 	rsb	r3, r2, #32
 8000cd4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cd8:	4097      	lsls	r7, r2
 8000cda:	fa01 f002 	lsl.w	r0, r1, r2
 8000cde:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce2:	40d9      	lsrs	r1, r3
 8000ce4:	4330      	orrs	r0, r6
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cec:	fa1f f887 	uxth.w	r8, r7
 8000cf0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf8:	fb06 f108 	mul.w	r1, r6, r8
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	fa04 f402 	lsl.w	r4, r4, r2
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x19c>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d0a:	f080 808d 	bcs.w	8000e28 <__udivmoddi4+0x2ac>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 808a 	bls.w	8000e28 <__udivmoddi4+0x2ac>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b281      	uxth	r1, r0
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d28:	fb00 f308 	mul.w	r3, r0, r8
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d907      	bls.n	8000d40 <__udivmoddi4+0x1c4>
 8000d30:	1879      	adds	r1, r7, r1
 8000d32:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d36:	d273      	bcs.n	8000e20 <__udivmoddi4+0x2a4>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d971      	bls.n	8000e20 <__udivmoddi4+0x2a4>
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	4439      	add	r1, r7
 8000d40:	1acb      	subs	r3, r1, r3
 8000d42:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d46:	e778      	b.n	8000c3a <__udivmoddi4+0xbe>
 8000d48:	f1c6 0c20 	rsb	ip, r6, #32
 8000d4c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d50:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d54:	431c      	orrs	r4, r3
 8000d56:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d62:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d66:	431f      	orrs	r7, r3
 8000d68:	0c3b      	lsrs	r3, r7, #16
 8000d6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d6e:	fa1f f884 	uxth.w	r8, r4
 8000d72:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d76:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d7a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d7e:	458a      	cmp	sl, r1
 8000d80:	fa02 f206 	lsl.w	r2, r2, r6
 8000d84:	fa00 f306 	lsl.w	r3, r0, r6
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x220>
 8000d8a:	1861      	adds	r1, r4, r1
 8000d8c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d90:	d248      	bcs.n	8000e24 <__udivmoddi4+0x2a8>
 8000d92:	458a      	cmp	sl, r1
 8000d94:	d946      	bls.n	8000e24 <__udivmoddi4+0x2a8>
 8000d96:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9a:	4421      	add	r1, r4
 8000d9c:	eba1 010a 	sub.w	r1, r1, sl
 8000da0:	b2bf      	uxth	r7, r7
 8000da2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000daa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dae:	fb00 f808 	mul.w	r8, r0, r8
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x24a>
 8000db6:	19e7      	adds	r7, r4, r7
 8000db8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dbc:	d22e      	bcs.n	8000e1c <__udivmoddi4+0x2a0>
 8000dbe:	45b8      	cmp	r8, r7
 8000dc0:	d92c      	bls.n	8000e1c <__udivmoddi4+0x2a0>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4427      	add	r7, r4
 8000dc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dca:	eba7 0708 	sub.w	r7, r7, r8
 8000dce:	fba0 8902 	umull	r8, r9, r0, r2
 8000dd2:	454f      	cmp	r7, r9
 8000dd4:	46c6      	mov	lr, r8
 8000dd6:	4649      	mov	r1, r9
 8000dd8:	d31a      	bcc.n	8000e10 <__udivmoddi4+0x294>
 8000dda:	d017      	beq.n	8000e0c <__udivmoddi4+0x290>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x27a>
 8000dde:	ebb3 020e 	subs.w	r2, r3, lr
 8000de2:	eb67 0701 	sbc.w	r7, r7, r1
 8000de6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dea:	40f2      	lsrs	r2, r6
 8000dec:	ea4c 0202 	orr.w	r2, ip, r2
 8000df0:	40f7      	lsrs	r7, r6
 8000df2:	e9c5 2700 	strd	r2, r7, [r5]
 8000df6:	2600      	movs	r6, #0
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	462e      	mov	r6, r5
 8000e00:	4628      	mov	r0, r5
 8000e02:	e70b      	b.n	8000c1c <__udivmoddi4+0xa0>
 8000e04:	4606      	mov	r6, r0
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0x60>
 8000e08:	4618      	mov	r0, r3
 8000e0a:	e6fd      	b.n	8000c08 <__udivmoddi4+0x8c>
 8000e0c:	4543      	cmp	r3, r8
 8000e0e:	d2e5      	bcs.n	8000ddc <__udivmoddi4+0x260>
 8000e10:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e14:	eb69 0104 	sbc.w	r1, r9, r4
 8000e18:	3801      	subs	r0, #1
 8000e1a:	e7df      	b.n	8000ddc <__udivmoddi4+0x260>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	e7d2      	b.n	8000dc6 <__udivmoddi4+0x24a>
 8000e20:	4660      	mov	r0, ip
 8000e22:	e78d      	b.n	8000d40 <__udivmoddi4+0x1c4>
 8000e24:	4681      	mov	r9, r0
 8000e26:	e7b9      	b.n	8000d9c <__udivmoddi4+0x220>
 8000e28:	4666      	mov	r6, ip
 8000e2a:	e775      	b.n	8000d18 <__udivmoddi4+0x19c>
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	e74a      	b.n	8000cc6 <__udivmoddi4+0x14a>
 8000e30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e34:	4439      	add	r1, r7
 8000e36:	e713      	b.n	8000c60 <__udivmoddi4+0xe4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	443c      	add	r4, r7
 8000e3c:	e724      	b.n	8000c88 <__udivmoddi4+0x10c>
 8000e3e:	bf00      	nop

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8000e48:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <GUI_X_Config+0x18>)
 8000e4e:	f00e ffad 	bl	800fdac <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8000e52:	4803      	ldr	r0, [pc, #12]	; (8000e60 <GUI_X_Config+0x1c>)
 8000e54:	f00e fb28 	bl	800f4a8 <GUI_SetDefaultFont>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200002ac 	.word	0x200002ac
 8000e60:	08017418 	.word	0x08017418

08000e64 <GUI_X_GetTime>:
  Some timing dependent routines require a GetTime
  and delay function. Default time unit (tick), normally is
  1 ms.
*/

GUI_TIMER_TIME GUI_X_GetTime(void) { 
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return OS_TimeMS; 
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <GUI_X_GetTime+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	2001d324 	.word	0x2001d324

08000e7c <GUI_X_Delay>:

void GUI_X_Delay(int ms) { 
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  int tEnd = OS_TimeMS + ms;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <GUI_X_Delay+0x30>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  while ((tEnd - OS_TimeMS) > 0);
 8000e8e:	bf00      	nop
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <GUI_X_Delay+0x30>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	dcf9      	bgt.n	8000e90 <GUI_X_Delay+0x14>
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2001d324 	.word	0x2001d324

08000eb0 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <GUI_TOUCH_X_ActivateX>:
*
**********************************************************************
*/

void GUI_TOUCH_X_ActivateX(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <GUI_TOUCH_X_ActivateY>:
void GUI_TOUCH_X_ActivateY(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <GUI_TOUCH_X_MeasureX>:
int  GUI_TOUCH_X_MeasureX(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  return STMPE610_GetX_TOUCH_RAW();
 8000ede:	f001 fb2f 	bl	8002540 <STMPE610_GetX_TOUCH_RAW>
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <GUI_TOUCH_X_MeasureY>:
int  GUI_TOUCH_X_MeasureY(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  return STMPE610_GetY_TOUCH_RAW();
 8000eec:	f001 fb34 	bl	8002558 <STMPE610_GetY_TOUCH_RAW>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0a2      	sub	sp, #136	; 0x88
 8000efc:	af02      	add	r7, sp, #8
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 8000efe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
  GUI_PORT_API PortAPI = {0};
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2268      	movs	r2, #104	; 0x68
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f015 fcd7 	bl	80168c8 <memset>
  //
  // Set display driver and color conversion
  //

//  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_565, 0, 0);
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565, 0, 0);
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4920      	ldr	r1, [pc, #128]	; (8000fa0 <LCD_X_Config+0xa8>)
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <LCD_X_Config+0xac>)
 8000f22:	f00e f98f 	bl	800f244 <GUI_DEVICE_CreateAndLink>
 8000f26:	67f8      	str	r0, [r7, #124]	; 0x7c
  //

//  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
//  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);

  LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8000f28:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000f2c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000f30:	2000      	movs	r0, #0
 8000f32:	f00c f859 	bl	800cfe8 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS);
 8000f36:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000f3a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f00c f83a 	bl	800cfb8 <LCD_SetVSizeEx>
  // Orientation
  //
//  Config.Orientation = GUI_SWAP_XY | GUI_MIRROR_Y;
//  GUIDRV_FlexColor_Config(pDevice, &Config);

  Config.Orientation = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	673b      	str	r3, [r7, #112]	; 0x70
  GUIDRV_FlexColor_Config(pDevice, &Config);
 8000f48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000f50:	f00b ffd1 	bl	800cef6 <GUIDRV_FlexColor_Config>
//  PortAPI.pfWriteM16_A1 = LcdWriteDataMultiple;
//  PortAPI.pfReadM16_A1  = LcdReadDataMultiple;
//  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66708, GUIDRV_FLEXCOLOR_M16C0B16);

  // Set controller and operation mode
  PortAPI.pfWrite16_A0 = SSD1963_WriteCommand;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <LCD_X_Config+0xb0>)
 8000f56:	623b      	str	r3, [r7, #32]
  PortAPI.pfWrite16_A1 = SSD1963_WriteData;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <LCD_X_Config+0xb4>)
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  PortAPI.pfWriteM16_A1 = SSD1963_WriteDataMultiple;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <LCD_X_Config+0xb8>)
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  // PortAPI.pfReadM16_A1 = SSD1963_ReadData;
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66720, GUIDRV_FLEXCOLOR_M16C0B16);
 8000f60:	4639      	mov	r1, r7
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <LCD_X_Config+0xbc>)
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <LCD_X_Config+0xc0>)
 8000f66:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000f68:	f00b ffe3 	bl	800cf32 <GUIDRV_FlexColor_SetFunc>
  GUI_TOUCH_Calibrate(GUI_COORD_X, 0, 800, GUI_TOUCH_AD_LEFT , GUI_TOUCH_AD_RIGHT);
 8000f6c:	f640 7374 	movw	r3, #3956	; 0xf74
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2392      	movs	r3, #146	; 0x92
 8000f74:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f00d f9ec 	bl	800e358 <GUI_TOUCH_Calibrate>
  GUI_TOUCH_Calibrate(GUI_COORD_Y, 0, 480, GUI_TOUCH_AD_TOP, GUI_TOUCH_AD_BOTTOM);
 8000f80:	f640 7303 	movw	r3, #3843	; 0xf03
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000f8a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2001      	movs	r0, #1
 8000f92:	f00d f9e1 	bl	800e358 <GUI_TOUCH_Calibrate>
}
 8000f96:	bf00      	nop
 8000f98:	3780      	adds	r7, #128	; 0x80
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	0801a918 	.word	0x0801a918
 8000fa4:	0801a7b0 	.word	0x0801a7b0
 8000fa8:	08002055 	.word	0x08002055
 8000fac:	080020d1 	.word	0x080020d1
 8000fb0:	0800214d 	.word	0x0800214d
 8000fb4:	0800c8fd 	.word	0x0800c8fd
 8000fb8:	0800c261 	.word	0x0800c261

08000fbc <LCD_X_DisplayDriver>:
* Return Value:
*   < -1 - Error
*     -1 - Command not handled
*      0 - Ok
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d105      	bne.n	8000fda <LCD_X_DisplayDriver+0x1e>
    // controller is not initialized by any external routine this needs
    // to be adapted by the customer...
    //
    // ...

	 SSD1963_Init();
 8000fce:	f001 f8d7 	bl	8002180 <SSD1963_Init>
	 STMPE610_Init();
 8000fd2:	f001 fa19 	bl	8002408 <STMPE610_Init>
    return 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e003      	b.n	8000fe2 <LCD_X_DisplayDriver+0x26>
  }
  default:
    r = -1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000fe0:	697b      	ldr	r3, [r7, #20]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	b09b      	sub	sp, #108	; 0x6c
 8000ff0:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff2:	f001 fabd 	bl	8002570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff6:	f000 f865 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffa:	f000 f985 	bl	8001308 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ffe:	f000 f943 	bl	8001288 <MX_I2C1_Init>
  MX_ADC3_Init();
 8001002:	f000 f8ef 	bl	80011e4 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  Init_LCD_GPIO();
 8001006:	f000 ff95 	bl	8001f34 <Init_LCD_GPIO>
  Init_TOUCH_GPIO(hi2c1);
 800100a:	4e28      	ldr	r6, [pc, #160]	; (80010ac <main+0xc0>)
 800100c:	466d      	mov	r5, sp
 800100e:	f106 0410 	add.w	r4, r6, #16
 8001012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800101a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800101c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800101e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001022:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001026:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800102a:	f001 f957 	bl	80022dc <Init_TOUCH_GPIO>
  Init_ACCEL_GPIO(hi2c1);
 800102e:	4e1f      	ldr	r6, [pc, #124]	; (80010ac <main+0xc0>)
 8001030:	466d      	mov	r5, sp
 8001032:	f106 0410 	add.w	r4, r6, #16
 8001036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001042:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001046:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800104a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800104e:	f000 fea1 	bl	8001d94 <Init_ACCEL_GPIO>
  ADXL345_Init();
 8001052:	f000 ff4d 	bl	8001ef0 <ADXL345_Init>


  WM_SetCreateFlags(WM_CF_MEMDEV); // eliminise flickering
 8001056:	2004      	movs	r0, #4
 8001058:	f008 f9aa 	bl	80093b0 <WM_SetCreateFlags>

  GUI_Init();
 800105c:	f00e fa96 	bl	800f58c <GUI_Init>


   i=0;
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <main+0xc4>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <main+0xc8>)
 8001068:	f107 0414 	add.w	r4, r7, #20
 800106c:	461d      	mov	r5, r3
 800106e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001072:	682b      	ldr	r3, [r5, #0]
 8001074:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f004 fa42 	bl	8005506 <osThreadCreate>
 8001082:	4603      	mov	r3, r0
 8001084:	4a0c      	ldr	r2, [pc, #48]	; (80010b8 <main+0xcc>)
 8001086:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, Task2_init, osPriorityBelowNormal, 0, 512);
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <main+0xd0>)
 800108a:	463c      	mov	r4, r7
 800108c:	461d      	mov	r5, r3
 800108e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001092:	682b      	ldr	r3, [r5, #0]
 8001094:	6023      	str	r3, [r4, #0]
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8001096:	463b      	mov	r3, r7
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f004 fa33 	bl	8005506 <osThreadCreate>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <main+0xd4>)
 80010a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010a6:	f004 fa27 	bl	80054f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <main+0xbe>
 80010ac:	2001d338 	.word	0x2001d338
 80010b0:	200192b4 	.word	0x200192b4
 80010b4:	08017120 	.word	0x08017120
 80010b8:	2001d330 	.word	0x2001d330
 80010bc:	08017134 	.word	0x08017134
 80010c0:	2001d3ec 	.word	0x2001d3ec

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0b4      	sub	sp, #208	; 0xd0
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010ce:	2230      	movs	r2, #48	; 0x30
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f015 fbf8 	bl	80168c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	2284      	movs	r2, #132	; 0x84
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f015 fbe9 	bl	80168c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	4b39      	ldr	r3, [pc, #228]	; (80011dc <SystemClock_Config+0x118>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a38      	ldr	r2, [pc, #224]	; (80011dc <SystemClock_Config+0x118>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b36      	ldr	r3, [pc, #216]	; (80011dc <SystemClock_Config+0x118>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <SystemClock_Config+0x11c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a33      	ldr	r2, [pc, #204]	; (80011e0 <SystemClock_Config+0x11c>)
 8001114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <SystemClock_Config+0x11c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112c:	2301      	movs	r3, #1
 800112e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001132:	2310      	movs	r3, #16
 8001134:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001138:	2302      	movs	r3, #2
 800113a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001144:	2308      	movs	r3, #8
 8001146:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800114a:	23d8      	movs	r3, #216	; 0xd8
 800114c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fe49 	bl	8003df8 <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800116c:	f000 fb06 	bl	800177c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001170:	f002 fdf2 	bl	8003d58 <HAL_PWREx_EnableOverDrive>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800117a:	f000 faff 	bl	800177c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001190:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011a4:	2107      	movs	r1, #7
 80011a6:	4618      	mov	r0, r3
 80011a8:	f003 f8ca 	bl	8004340 <HAL_RCC_ClockConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80011b2:	f000 fae3 	bl	800177c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011bc:	2300      	movs	r3, #0
 80011be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 faaf 	bl	8004728 <HAL_RCCEx_PeriphCLKConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80011d0:	f000 fad4 	bl	800177c <Error_Handler>
  }
}
 80011d4:	bf00      	nop
 80011d6:	37d0      	adds	r7, #208	; 0xd0
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40007000 	.word	0x40007000

080011e4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_ADC3_Init+0x98>)
 80011f8:	4a21      	ldr	r2, [pc, #132]	; (8001280 <MX_ADC3_Init+0x9c>)
 80011fa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_ADC3_Init+0x98>)
 80011fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001202:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_ADC3_Init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_ADC3_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_ADC3_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_ADC3_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_ADC3_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_ADC3_Init+0x98>)
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <MX_ADC3_Init+0xa0>)
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_ADC3_Init+0x98>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_ADC3_Init+0x98>)
 8001232:	2201      	movs	r2, #1
 8001234:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_ADC3_Init+0x98>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_ADC3_Init+0x98>)
 8001240:	2201      	movs	r2, #1
 8001242:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001244:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_ADC3_Init+0x98>)
 8001246:	f001 f9e5 	bl	8002614 <HAL_ADC_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001250:	f000 fa94 	bl	800177c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001254:	2306      	movs	r3, #6
 8001256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001258:	2301      	movs	r3, #1
 800125a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_ADC3_Init+0x98>)
 8001266:	f001 fb7f 	bl	8002968 <HAL_ADC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001270:	f000 fa84 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2001d384 	.word	0x2001d384
 8001280:	40012200 	.word	0x40012200
 8001284:	0f000001 	.word	0x0f000001

08001288 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_I2C1_Init+0x74>)
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <MX_I2C1_Init+0x78>)
 8001290:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_I2C1_Init+0x74>)
 8001294:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <MX_I2C1_Init+0x7c>)
 8001296:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_I2C1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_I2C1_Init+0x74>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_I2C1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_I2C1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_I2C1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_I2C1_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_I2C1_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012c2:	480e      	ldr	r0, [pc, #56]	; (80012fc <MX_I2C1_Init+0x74>)
 80012c4:	f002 f856 	bl	8003374 <HAL_I2C_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ce:	f000 fa55 	bl	800177c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012d2:	2100      	movs	r1, #0
 80012d4:	4809      	ldr	r0, [pc, #36]	; (80012fc <MX_I2C1_Init+0x74>)
 80012d6:	f002 fca7 	bl	8003c28 <HAL_I2CEx_ConfigAnalogFilter>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012e0:	f000 fa4c 	bl	800177c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012e4:	2100      	movs	r1, #0
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_I2C1_Init+0x74>)
 80012e8:	f002 fce9 	bl	8003cbe <HAL_I2CEx_ConfigDigitalFilter>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012f2:	f000 fa43 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2001d338 	.word	0x2001d338
 8001300:	40005400 	.word	0x40005400
 8001304:	20404768 	.word	0x20404768

08001308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <MX_GPIO_Init+0xd0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a2d      	ldr	r2, [pc, #180]	; (80013d8 <MX_GPIO_Init+0xd0>)
 8001324:	f043 0320 	orr.w	r3, r3, #32
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <MX_GPIO_Init+0xd0>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0320 	and.w	r3, r3, #32
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001336:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <MX_GPIO_Init+0xd0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a27      	ldr	r2, [pc, #156]	; (80013d8 <MX_GPIO_Init+0xd0>)
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <MX_GPIO_Init+0xd0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800134e:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <MX_GPIO_Init+0xd0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <MX_GPIO_Init+0xd0>)
 8001354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <MX_GPIO_Init+0xd0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <MX_GPIO_Init+0xd0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <MX_GPIO_Init+0xd0>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <MX_GPIO_Init+0xd0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001384:	4815      	ldr	r0, [pc, #84]	; (80013dc <MX_GPIO_Init+0xd4>)
 8001386:	f001 ffc1 	bl	800330c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2118      	movs	r1, #24
 800138e:	4814      	ldr	r0, [pc, #80]	; (80013e0 <MX_GPIO_Init+0xd8>)
 8001390:	f001 ffbc 	bl	800330c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <MX_GPIO_Init+0xd4>)
 80013ae:	f001 fe01 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80013b2:	2318      	movs	r3, #24
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_GPIO_Init+0xd8>)
 80013ca:	f001 fdf3 	bl	8002fb4 <HAL_GPIO_Init>

}
 80013ce:	bf00      	nop
 80013d0:	3728      	adds	r7, #40	; 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40021800 	.word	0x40021800
 80013e0:	40020400 	.word	0x40020400

080013e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	GUI_Clear();
 80013ec:	f00e f894 	bl	800f518 <GUI_Clear>

	GUI_SetFont(&GUI_Font20_1);
 80013f0:	4870      	ldr	r0, [pc, #448]	; (80015b4 <StartDefaultTask+0x1d0>)
 80013f2:	f00d fb73 	bl	800eadc <GUI_SetFont>
	GUI_SetColor(GUI_RED);
 80013f6:	20ff      	movs	r0, #255	; 0xff
 80013f8:	f00d fb9e 	bl	800eb38 <GUI_SetColor>
	hWin = CreateMenu();
 80013fc:	f000 fb6a 	bl	8001ad4 <CreateMenu>
 8001400:	4603      	mov	r3, r0
 8001402:	4a6d      	ldr	r2, [pc, #436]	; (80015b8 <StartDefaultTask+0x1d4>)
 8001404:	6013      	str	r3, [r2, #0]
		sprintf((char*)ptr,"x: %04d\r y: %04d\r z: %04d", (uint16_t)xcoord,(uint16_t)ycoord,(uint16_t)zcoord);
		GUI_DispStringAt(ptr,500,50);
		vPortFree(ptr);
		*/

		STMPE610_read_xyz();
 8001406:	f001 f849 	bl	800249c <STMPE610_read_xyz>
		GUI_TOUCH_Exec();
 800140a:	f00d f803 	bl	800e414 <GUI_TOUCH_Exec>
		keyPressed = GUI_GetKey();
 800140e:	f00d fccd 	bl	800edac <GUI_GetKey>
 8001412:	4603      	mov	r3, r0
 8001414:	4a69      	ldr	r2, [pc, #420]	; (80015bc <StartDefaultTask+0x1d8>)
 8001416:	6013      	str	r3, [r2, #0]
		switch(keyPressed)
 8001418:	4b68      	ldr	r3, [pc, #416]	; (80015bc <StartDefaultTask+0x1d8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 8001420:	2b05      	cmp	r3, #5
 8001422:	d870      	bhi.n	8001506 <StartDefaultTask+0x122>
 8001424:	a201      	add	r2, pc, #4	; (adr r2, 800142c <StartDefaultTask+0x48>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	08001445 	.word	0x08001445
 8001430:	08001481 	.word	0x08001481
 8001434:	080014e7 	.word	0x080014e7
 8001438:	08001507 	.word	0x08001507
 800143c:	08001507 	.word	0x08001507
 8001440:	080014c7 	.word	0x080014c7
		{
			case ID_BTN_TEMP:
				WM_DeleteWindow(hWin);
 8001444:	4b5c      	ldr	r3, [pc, #368]	; (80015b8 <StartDefaultTask+0x1d4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f009 f885 	bl	800a558 <WM_DeleteWindow>
				hWin = CreateTempWin();
 800144e:	f000 fc5d 	bl	8001d0c <CreateTempWin>
 8001452:	4603      	mov	r3, r0
 8001454:	4a58      	ldr	r2, [pc, #352]	; (80015b8 <StartDefaultTask+0x1d4>)
 8001456:	6013      	str	r3, [r2, #0]

				hWinList = WM_GetDialogItem(hWin, ID_LISTTEMP);
 8001458:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <StartDefaultTask+0x1d4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f640 0104 	movw	r1, #2052	; 0x804
 8001460:	4618      	mov	r0, r3
 8001462:	f008 fa43 	bl	80098ec <WM_GetDialogItem>
 8001466:	4603      	mov	r3, r0
 8001468:	4a55      	ldr	r2, [pc, #340]	; (80015c0 <StartDefaultTask+0x1dc>)
 800146a:	6013      	str	r3, [r2, #0]

				state = ID_BTN_TEMP;
 800146c:	4b55      	ldr	r3, [pc, #340]	; (80015c4 <StartDefaultTask+0x1e0>)
 800146e:	f640 0201 	movw	r2, #2049	; 0x801
 8001472:	601a      	str	r2, [r3, #0]
				i += 2;
 8001474:	4b54      	ldr	r3, [pc, #336]	; (80015c8 <StartDefaultTask+0x1e4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3302      	adds	r3, #2
 800147a:	4a53      	ldr	r2, [pc, #332]	; (80015c8 <StartDefaultTask+0x1e4>)
 800147c:	6013      	str	r3, [r2, #0]
			break;
 800147e:	e042      	b.n	8001506 <StartDefaultTask+0x122>
			case ID_BTN_ACC:
				WM_DeleteWindow(hWin);
 8001480:	4b4d      	ldr	r3, [pc, #308]	; (80015b8 <StartDefaultTask+0x1d4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f009 f867 	bl	800a558 <WM_DeleteWindow>
				hWin = CreateAccWin();
 800148a:	f000 fbb1 	bl	8001bf0 <CreateAccWin>
 800148e:	4603      	mov	r3, r0
 8001490:	4a49      	ldr	r2, [pc, #292]	; (80015b8 <StartDefaultTask+0x1d4>)
 8001492:	6013      	str	r3, [r2, #0]

				hWinText = WM_GetDialogItem(hWin, ID_TEXT_TEST);
 8001494:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <StartDefaultTask+0x1d4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f640 0107 	movw	r1, #2055	; 0x807
 800149c:	4618      	mov	r0, r3
 800149e:	f008 fa25 	bl	80098ec <WM_GetDialogItem>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a49      	ldr	r2, [pc, #292]	; (80015cc <StartDefaultTask+0x1e8>)
 80014a6:	6013      	str	r3, [r2, #0]
				hWinList = WM_GetDialogItem(hWin, ID_LISTACC);
 80014a8:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <StartDefaultTask+0x1d4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f640 0105 	movw	r1, #2053	; 0x805
 80014b0:	4618      	mov	r0, r3
 80014b2:	f008 fa1b 	bl	80098ec <WM_GetDialogItem>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a41      	ldr	r2, [pc, #260]	; (80015c0 <StartDefaultTask+0x1dc>)
 80014ba:	6013      	str	r3, [r2, #0]

				state = ID_BTN_ACC;
 80014bc:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <StartDefaultTask+0x1e0>)
 80014be:	f640 0202 	movw	r2, #2050	; 0x802
 80014c2:	601a      	str	r2, [r3, #0]

			break;
 80014c4:	e01f      	b.n	8001506 <StartDefaultTask+0x122>
			case ID_BTN_NAZAD:
				GUI_Clear();
 80014c6:	f00e f827 	bl	800f518 <GUI_Clear>
				WM_DeleteWindow(hWin);
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <StartDefaultTask+0x1d4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f009 f842 	bl	800a558 <WM_DeleteWindow>
				hWin = CreateMenu();
 80014d4:	f000 fafe 	bl	8001ad4 <CreateMenu>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a37      	ldr	r2, [pc, #220]	; (80015b8 <StartDefaultTask+0x1d4>)
 80014dc:	6013      	str	r3, [r2, #0]

				state = 0;
 80014de:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <StartDefaultTask+0x1e0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
			break;
 80014e4:	e00f      	b.n	8001506 <StartDefaultTask+0x122>
			case ID_BTN_NAZAD_TEMP:
				GUI_Clear();
 80014e6:	f00e f817 	bl	800f518 <GUI_Clear>
				WM_DeleteWindow(hWin);
 80014ea:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <StartDefaultTask+0x1d4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f009 f832 	bl	800a558 <WM_DeleteWindow>
				hWin = CreateMenu();
 80014f4:	f000 faee 	bl	8001ad4 <CreateMenu>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4a2f      	ldr	r2, [pc, #188]	; (80015b8 <StartDefaultTask+0x1d4>)
 80014fc:	6013      	str	r3, [r2, #0]

				state = 0;
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <StartDefaultTask+0x1e0>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]


			break;
 8001504:	bf00      	nop

	  	}
		if (state == ID_BTN_ACC) {
 8001506:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <StartDefaultTask+0x1e0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f640 0202 	movw	r2, #2050	; 0x802
 800150e:	4293      	cmp	r3, r2
 8001510:	d148      	bne.n	80015a4 <StartDefaultTask+0x1c0>
//			acc_y = (uint16_t) ADXL345_GetY_ACCEL();
//			acc_z = (uint16_t) ADXL345_GetZ_ACCEL();
//			sprintf(test_string, "%d", acc_x);
//
//					j = TEXT_SetText(hWinText, test_string);
			acc_x_val = pvPortMalloc(6*sizeof(char));
 8001512:	2006      	movs	r0, #6
 8001514:	f004 ff72 	bl	80063fc <pvPortMalloc>
 8001518:	6178      	str	r0, [r7, #20]
			acc_y_val = pvPortMalloc(6*sizeof(char));
 800151a:	2006      	movs	r0, #6
 800151c:	f004 ff6e 	bl	80063fc <pvPortMalloc>
 8001520:	6138      	str	r0, [r7, #16]
			acc_z_val = pvPortMalloc(6*sizeof(char));
 8001522:	2006      	movs	r0, #6
 8001524:	f004 ff6a 	bl	80063fc <pvPortMalloc>
 8001528:	60f8      	str	r0, [r7, #12]

			hWinList = WM_GetDialogItem(hWin, ID_LISTACC);
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <StartDefaultTask+0x1d4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f640 0105 	movw	r1, #2053	; 0x805
 8001532:	4618      	mov	r0, r3
 8001534:	f008 f9da 	bl	80098ec <WM_GetDialogItem>
 8001538:	4603      	mov	r3, r0
 800153a:	4a21      	ldr	r2, [pc, #132]	; (80015c0 <StartDefaultTask+0x1dc>)
 800153c:	6013      	str	r3, [r2, #0]
			sprintf((char*)acc_x_val, "%d", accel_x);
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <StartDefaultTask+0x1ec>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	4923      	ldr	r1, [pc, #140]	; (80015d4 <StartDefaultTask+0x1f0>)
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f015 f9c6 	bl	80168d8 <siprintf>
			sprintf((char*)acc_y_val, "%d", accel_y);
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <StartDefaultTask+0x1f4>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4920      	ldr	r1, [pc, #128]	; (80015d4 <StartDefaultTask+0x1f0>)
 8001554:	6938      	ldr	r0, [r7, #16]
 8001556:	f015 f9bf 	bl	80168d8 <siprintf>
			sprintf((char*)acc_z_val, "%d", accel_z);
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <StartDefaultTask+0x1f8>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	491c      	ldr	r1, [pc, #112]	; (80015d4 <StartDefaultTask+0x1f0>)
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f015 f9b8 	bl	80168d8 <siprintf>
			LISTVIEW_SetItemText(hWinList, 0, 0, acc_x_val);
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <StartDefaultTask+0x1dc>)
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	f005 fc69 	bl	8006e48 <LISTVIEW_SetItemText>
			LISTVIEW_SetItemText(hWinList, 1, 0, acc_y_val);
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <StartDefaultTask+0x1dc>)
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	2200      	movs	r2, #0
 800157e:	2101      	movs	r1, #1
 8001580:	f005 fc62 	bl	8006e48 <LISTVIEW_SetItemText>
			LISTVIEW_SetItemText(hWinList, 2, 0, acc_z_val);
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <StartDefaultTask+0x1dc>)
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	2102      	movs	r1, #2
 800158e:	f005 fc5b 	bl	8006e48 <LISTVIEW_SetItemText>


			vPortFree(acc_x_val);
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f004 fffc 	bl	8006590 <vPortFree>
			vPortFree(acc_y_val);
 8001598:	6938      	ldr	r0, [r7, #16]
 800159a:	f004 fff9 	bl	8006590 <vPortFree>
			vPortFree(acc_z_val);
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f004 fff6 	bl	8006590 <vPortFree>
		}

		GUI_Delay(10);
 80015a4:	200a      	movs	r0, #10
 80015a6:	f00c fec3 	bl	800e330 <GUI_Delay>
		osDelay(10);
 80015aa:	200a      	movs	r0, #10
 80015ac:	f003 ffd2 	bl	8005554 <osDelay>
		STMPE610_read_xyz();
 80015b0:	e729      	b.n	8001406 <StartDefaultTask+0x22>
 80015b2:	bf00      	nop
 80015b4:	08019334 	.word	0x08019334
 80015b8:	2001d32c 	.word	0x2001d32c
 80015bc:	200192ac 	.word	0x200192ac
 80015c0:	2001d334 	.word	0x2001d334
 80015c4:	200192b0 	.word	0x200192b0
 80015c8:	200192b4 	.word	0x200192b4
 80015cc:	2001d328 	.word	0x2001d328
 80015d0:	200192c8 	.word	0x200192c8
 80015d4:	08017148 	.word	0x08017148
 80015d8:	200192ca 	.word	0x200192ca
 80015dc:	200192cc 	.word	0x200192cc

080015e0 <Task2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_init */
void Task2_init(void const * argument)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  /* Infinite loop */
  for(;;)
  {
	  j+=3;
 80015e8:	4b48      	ldr	r3, [pc, #288]	; (800170c <Task2_init+0x12c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3303      	adds	r3, #3
 80015ee:	4a47      	ldr	r2, [pc, #284]	; (800170c <Task2_init+0x12c>)
 80015f0:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_15);
 80015f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f6:	4846      	ldr	r0, [pc, #280]	; (8001710 <Task2_init+0x130>)
 80015f8:	f001 fea1 	bl	800333e <HAL_GPIO_TogglePin>
	  ADXL345_read_xyz();
 80015fc:	f000 fc2e 	bl	8001e5c <ADXL345_read_xyz>

	  HAL_ADC_Start(&hadc3);
 8001600:	4844      	ldr	r0, [pc, #272]	; (8001714 <Task2_init+0x134>)
 8001602:	f001 f84b 	bl	800269c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001606:	f04f 31ff 	mov.w	r1, #4294967295
 800160a:	4842      	ldr	r0, [pc, #264]	; (8001714 <Task2_init+0x134>)
 800160c:	f001 f914 	bl	8002838 <HAL_ADC_PollForConversion>
	  rawADC=HAL_ADC_GetValue(&hadc3);
 8001610:	4840      	ldr	r0, [pc, #256]	; (8001714 <Task2_init+0x134>)
 8001612:	f001 f99c 	bl	800294e <HAL_ADC_GetValue>
 8001616:	4603      	mov	r3, r0
 8001618:	b29a      	uxth	r2, r3
 800161a:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <Task2_init+0x138>)
 800161c:	801a      	strh	r2, [r3, #0]
	  temp=(float)rawADC;
 800161e:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <Task2_init+0x138>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162a:	4b3c      	ldr	r3, [pc, #240]	; (800171c <Task2_init+0x13c>)
 800162c:	edc3 7a00 	vstr	s15, [r3]
	  temp=100.0*((temp)/(2048)-0.5);
 8001630:	4b3a      	ldr	r3, [pc, #232]	; (800171c <Task2_init+0x13c>)
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001720 <Task2_init+0x140>
 800163a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800163e:	ee16 0a90 	vmov	r0, s13
 8001642:	f7fe ffa1 	bl	8000588 <__aeabi_f2d>
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b36      	ldr	r3, [pc, #216]	; (8001724 <Task2_init+0x144>)
 800164c:	f7fe fe3c 	bl	80002c8 <__aeabi_dsub>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4b32      	ldr	r3, [pc, #200]	; (8001728 <Task2_init+0x148>)
 800165e:	f7fe ffeb 	bl	8000638 <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa1f 	bl	8000aac <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	4a2a      	ldr	r2, [pc, #168]	; (800171c <Task2_init+0x13c>)
 8001672:	6013      	str	r3, [r2, #0]



	  if (state == ID_BTN_TEMP) {
 8001674:	4b2d      	ldr	r3, [pc, #180]	; (800172c <Task2_init+0x14c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f640 0201 	movw	r2, #2049	; 0x801
 800167c:	4293      	cmp	r3, r2
 800167e:	d140      	bne.n	8001702 <Task2_init+0x122>
		  char* temp_val;

		  temp_val = pvPortMalloc(4*sizeof(char));
 8001680:	2004      	movs	r0, #4
 8001682:	f004 febb 	bl	80063fc <pvPortMalloc>
 8001686:	6178      	str	r0, [r7, #20]
		  uint8_t ostatak ;
		  float temp2;
		  temp2=temp*10;
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <Task2_init+0x13c>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001696:	edc7 7a04 	vstr	s15, [r7, #16]
		  ostatak = (uint8_t)temp2%10;
 800169a:	edd7 7a04 	vldr	s15, [r7, #16]
 800169e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016a2:	edc7 7a00 	vstr	s15, [r7]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <Task2_init+0x150>)
 80016ac:	fba3 1302 	umull	r1, r3, r3, r2
 80016b0:	08d9      	lsrs	r1, r3, #3
 80016b2:	460b      	mov	r3, r1
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	73fb      	strb	r3, [r7, #15]
		  hWinList = WM_GetDialogItem(hWin, ID_LISTTEMP);
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <Task2_init+0x154>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f640 0104 	movw	r1, #2052	; 0x804
 80016c6:	4618      	mov	r0, r3
 80016c8:	f008 f910 	bl	80098ec <WM_GetDialogItem>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4a1a      	ldr	r2, [pc, #104]	; (8001738 <Task2_init+0x158>)
 80016d0:	6013      	str	r3, [r2, #0]
		  sprintf((char*)temp_val, "%d.%d", (uint16_t)temp,ostatak);
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <Task2_init+0x13c>)
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016dc:	ee17 3a90 	vmov	r3, s15
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	4915      	ldr	r1, [pc, #84]	; (800173c <Task2_init+0x15c>)
 80016e8:	6978      	ldr	r0, [r7, #20]
 80016ea:	f015 f8f5 	bl	80168d8 <siprintf>

		  LISTVIEW_SetItemText(hWinList, 0, 0,temp_val );
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <Task2_init+0x158>)
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	f005 fba6 	bl	8006e48 <LISTVIEW_SetItemText>


		  vPortFree(temp_val);
 80016fc:	6978      	ldr	r0, [r7, #20]
 80016fe:	f004 ff47 	bl	8006590 <vPortFree>
//		  sprintf((char*)acc_x_val, "%d", accel_x);
//		  EDIT_SetText(hWinText,acc_x_val);
//		  vPortFree(acc_x_val);
//	  }

	  osDelay(200);
 8001702:	20c8      	movs	r0, #200	; 0xc8
 8001704:	f003 ff26 	bl	8005554 <osDelay>
	  j+=3;
 8001708:	e76e      	b.n	80015e8 <Task2_init+0x8>
 800170a:	bf00      	nop
 800170c:	200192b8 	.word	0x200192b8
 8001710:	40021800 	.word	0x40021800
 8001714:	2001d384 	.word	0x2001d384
 8001718:	200192bc 	.word	0x200192bc
 800171c:	200192c0 	.word	0x200192c0
 8001720:	45000000 	.word	0x45000000
 8001724:	3fe00000 	.word	0x3fe00000
 8001728:	40590000 	.word	0x40590000
 800172c:	200192b0 	.word	0x200192b0
 8001730:	cccccccd 	.word	0xcccccccd
 8001734:	2001d32c 	.word	0x2001d32c
 8001738:	2001d334 	.word	0x2001d334
 800173c:	0801714c 	.word	0x0801714c

08001740 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a09      	ldr	r2, [pc, #36]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001752:	f000 ff1b 	bl	800258c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a06      	ldr	r2, [pc, #24]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d104      	bne.n	800176a <HAL_TIM_PeriodElapsedCallback+0x2a>
     OS_TimeMS++;
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3301      	adds	r3, #1
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001768:	6013      	str	r3, [r2, #0]
   }
  /* USER CODE END Callback 1 */
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40001000 	.word	0x40001000
 8001778:	2001d324 	.word	0x2001d324

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001784:	e7fe      	b.n	8001784 <Error_Handler+0x8>
	...

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_MspInit+0x4c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <HAL_MspInit+0x4c>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_MspInit+0x4c>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_MspInit+0x4c>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_MspInit+0x4c>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_MspInit+0x4c>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	210f      	movs	r1, #15
 80017c2:	f06f 0001 	mvn.w	r0, #1
 80017c6:	f001 fbcb 	bl	8002f60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a15      	ldr	r2, [pc, #84]	; (800184c <HAL_ADC_MspInit+0x74>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d124      	bne.n	8001844 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_ADC_MspInit+0x78>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <HAL_ADC_MspInit+0x78>)
 8001800:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_ADC_MspInit+0x78>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_ADC_MspInit+0x78>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <HAL_ADC_MspInit+0x78>)
 8001818:	f043 0320 	orr.w	r3, r3, #32
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <HAL_ADC_MspInit+0x78>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0320 	and.w	r3, r3, #32
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800182a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001830:	2303      	movs	r3, #3
 8001832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	4805      	ldr	r0, [pc, #20]	; (8001854 <HAL_ADC_MspInit+0x7c>)
 8001840:	f001 fbb8 	bl	8002fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001844:	bf00      	nop
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40012200 	.word	0x40012200
 8001850:	40023800 	.word	0x40023800
 8001854:	40021400 	.word	0x40021400

08001858 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <HAL_I2C_MspInit+0x7c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d127      	bne.n	80018ca <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_I2C_MspInit+0x80>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a16      	ldr	r2, [pc, #88]	; (80018d8 <HAL_I2C_MspInit+0x80>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_I2C_MspInit+0x80>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001892:	23c0      	movs	r3, #192	; 0xc0
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001896:	2312      	movs	r3, #18
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189a:	2301      	movs	r3, #1
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018a2:	2304      	movs	r3, #4
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	480b      	ldr	r0, [pc, #44]	; (80018dc <HAL_I2C_MspInit+0x84>)
 80018ae:	f001 fb81 	bl	8002fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_I2C_MspInit+0x80>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_I2C_MspInit+0x80>)
 80018b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_I2C_MspInit+0x80>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	; 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40005400 	.word	0x40005400
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020400 	.word	0x40020400

080018e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08c      	sub	sp, #48	; 0x30
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	2036      	movs	r0, #54	; 0x36
 80018f6:	f001 fb33 	bl	8002f60 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018fa:	2036      	movs	r0, #54	; 0x36
 80018fc:	f001 fb4c 	bl	8002f98 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <HAL_InitTick+0xa0>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_InitTick+0xa0>)
 8001906:	f043 0310 	orr.w	r3, r3, #16
 800190a:	6413      	str	r3, [r2, #64]	; 0x40
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <HAL_InitTick+0xa0>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001918:	f107 0210 	add.w	r2, r7, #16
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f002 fece 	bl	80046c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001928:	f002 feb8 	bl	800469c <HAL_RCC_GetPCLK1Freq>
 800192c:	4603      	mov	r3, r0
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	4a13      	ldr	r2, [pc, #76]	; (8001984 <HAL_InitTick+0xa4>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0c9b      	lsrs	r3, r3, #18
 800193c:	3b01      	subs	r3, #1
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_InitTick+0xa8>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <HAL_InitTick+0xac>)
 8001944:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_InitTick+0xa8>)
 8001948:	f240 32e7 	movw	r2, #999	; 0x3e7
 800194c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <HAL_InitTick+0xa8>)
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_InitTick+0xa8>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_InitTick+0xa8>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001960:	4809      	ldr	r0, [pc, #36]	; (8001988 <HAL_InitTick+0xa8>)
 8001962:	f003 fad1 	bl	8004f08 <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d104      	bne.n	8001976 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800196c:	4806      	ldr	r0, [pc, #24]	; (8001988 <HAL_InitTick+0xa8>)
 800196e:	f003 fb2d 	bl	8004fcc <HAL_TIM_Base_Start_IT>
 8001972:	4603      	mov	r3, r0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3730      	adds	r7, #48	; 0x30
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	431bde83 	.word	0x431bde83
 8001988:	2001d3f0 	.word	0x2001d3f0
 800198c:	40001000 	.word	0x40001000

08001990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <NMI_Handler+0x4>

08001996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <HardFault_Handler+0x4>

0800199c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <MemManage_Handler+0x4>

080019a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <BusFault_Handler+0x4>

080019a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <UsageFault_Handler+0x4>

080019ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <TIM6_DAC_IRQHandler+0x10>)
 80019c2:	f003 fb7b 	bl	80050bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2001d3f0 	.word	0x2001d3f0

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f014 ff02 	bl	8016808 <__errno>
 8001a04:	4603      	mov	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20050000 	.word	0x20050000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	200192c4 	.word	0x200192c4
 8001a38:	2001d628 	.word	0x2001d628

08001a3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <SystemInit+0x20>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <SystemInit+0x20>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  int NCode;
  int Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b26      	cmp	r3, #38	; 0x26
 8001a6e:	d129      	bne.n	8001ac4 <_cbDialog+0x64>
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f007 fef3 	bl	8009860 <WM_GetId>
 8001a7a:	60f8      	str	r0, [r7, #12]
    NCode = pMsg->Data.v;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f640 0201 	movw	r2, #2049	; 0x801
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d005      	beq.n	8001a98 <_cbDialog+0x38>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f640 0202 	movw	r2, #2050	; 0x802
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d009      	beq.n	8001aaa <_cbDialog+0x4a>
      }
      break;
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
 8001a96:	e019      	b.n	8001acc <_cbDialog+0x6c>
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d003      	beq.n	8001aa6 <_cbDialog+0x46>
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d10b      	bne.n	8001abc <_cbDialog+0x5c>
        break;
 8001aa4:	e000      	b.n	8001aa8 <_cbDialog+0x48>
        break;
 8001aa6:	bf00      	nop
      break;
 8001aa8:	e008      	b.n	8001abc <_cbDialog+0x5c>
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d003      	beq.n	8001ab8 <_cbDialog+0x58>
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d104      	bne.n	8001ac0 <_cbDialog+0x60>
        break;
 8001ab6:	e000      	b.n	8001aba <_cbDialog+0x5a>
        break;
 8001ab8:	bf00      	nop
      break;
 8001aba:	e001      	b.n	8001ac0 <_cbDialog+0x60>
      break;
 8001abc:	bf00      	nop
 8001abe:	e005      	b.n	8001acc <_cbDialog+0x6c>
      break;
 8001ac0:	bf00      	nop
    break;
 8001ac2:	e003      	b.n	8001acc <_cbDialog+0x6c>
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f009 f88d 	bl	800abe4 <WM_DefaultProc>
    break;
 8001aca:	bf00      	nop
  }
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <CreateMenu>:
/*********************************************************************
*
*       CreateMenu
*/
WM_HWIN CreateMenu(void);
WM_HWIN CreateMenu(void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af02      	add	r7, sp, #8
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 8001ada:	f007 ff0b 	bl	80098f4 <WM_GetDesktopWindow>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	9201      	str	r2, [sp, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	9200      	str	r2, [sp, #0]
 8001ae8:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <CreateMenu+0x2c>)
 8001aea:	2103      	movs	r1, #3
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <CreateMenu+0x30>)
 8001aee:	f007 f896 	bl	8008c1e <GUI_CreateDialogBox>
 8001af2:	6078      	str	r0, [r7, #4]
  return hWin;
 8001af4:	687b      	ldr	r3, [r7, #4]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	08001a61 	.word	0x08001a61
 8001b04:	0801725c 	.word	0x0801725c

08001b08 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  int     NCode;
  int     Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b1d      	cmp	r3, #29
 8001b16:	d002      	beq.n	8001b1e <_cbDialog+0x16>
 8001b18:	2b26      	cmp	r3, #38	; 0x26
 8001b1a:	d027      	beq.n	8001b6c <_cbDialog+0x64>
 8001b1c:	e058      	b.n	8001bd0 <_cbDialog+0xc8>
  case WM_INIT_DIALOG:
    //
    // Initialization of 'Listview'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_LISTACC);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f640 0105 	movw	r1, #2053	; 0x805
 8001b26:	4618      	mov	r0, r3
 8001b28:	f007 fee0 	bl	80098ec <WM_GetDialogItem>
 8001b2c:	60f8      	str	r0, [r7, #12]
    LISTVIEW_AddColumn(hItem, 150, "X", GUI_TA_HCENTER | GUI_TA_VCENTER);
 8001b2e:	230e      	movs	r3, #14
 8001b30:	4a2b      	ldr	r2, [pc, #172]	; (8001be0 <_cbDialog+0xd8>)
 8001b32:	2196      	movs	r1, #150	; 0x96
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f006 fad1 	bl	80080dc <LISTVIEW_AddColumn>
    LISTVIEW_AddColumn(hItem, 150, "Y", GUI_TA_HCENTER | GUI_TA_VCENTER);
 8001b3a:	230e      	movs	r3, #14
 8001b3c:	4a29      	ldr	r2, [pc, #164]	; (8001be4 <_cbDialog+0xdc>)
 8001b3e:	2196      	movs	r1, #150	; 0x96
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f006 facb 	bl	80080dc <LISTVIEW_AddColumn>
    LISTVIEW_AddColumn(hItem, 150, "Z", GUI_TA_HCENTER | GUI_TA_VCENTER);
 8001b46:	230e      	movs	r3, #14
 8001b48:	4a27      	ldr	r2, [pc, #156]	; (8001be8 <_cbDialog+0xe0>)
 8001b4a:	2196      	movs	r1, #150	; 0x96
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f006 fac5 	bl	80080dc <LISTVIEW_AddColumn>
    LISTVIEW_AddRow(hItem, NULL);
 8001b52:	2100      	movs	r1, #0
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f006 fb13 	bl	8008180 <LISTVIEW_AddRow>
    LISTVIEW_SetGridVis(hItem, 1);
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f005 f9c8 	bl	8006ef2 <LISTVIEW_SetGridVis>
    LISTVIEW_SetFont(hItem, GUI_FONT_20_1);
 8001b62:	4922      	ldr	r1, [pc, #136]	; (8001bec <_cbDialog+0xe4>)
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f005 f9df 	bl	8006f28 <LISTVIEW_SetFont>
    // USER START (Optionally insert additional code for further widget initialization)
    // USER END
    break;
 8001b6a:	e035      	b.n	8001bd8 <_cbDialog+0xd0>
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f007 fe75 	bl	8009860 <WM_GetId>
 8001b76:	6178      	str	r0, [r7, #20]
    NCode = pMsg->Data.v;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f640 0205 	movw	r2, #2053	; 0x805
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d005      	beq.n	8001b94 <_cbDialog+0x8c>
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f640 0206 	movw	r2, #2054	; 0x806
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d011      	beq.n	8001bb6 <_cbDialog+0xae>
      }
      break;
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
 8001b92:	e021      	b.n	8001bd8 <_cbDialog+0xd0>
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d009      	beq.n	8001bae <_cbDialog+0xa6>
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	dc13      	bgt.n	8001bc8 <_cbDialog+0xc0>
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d005      	beq.n	8001bb2 <_cbDialog+0xaa>
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d10d      	bne.n	8001bc8 <_cbDialog+0xc0>
        break;
 8001bac:	e002      	b.n	8001bb4 <_cbDialog+0xac>
        break;
 8001bae:	bf00      	nop
 8001bb0:	e00a      	b.n	8001bc8 <_cbDialog+0xc0>
        break;
 8001bb2:	bf00      	nop
      break;
 8001bb4:	e008      	b.n	8001bc8 <_cbDialog+0xc0>
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d003      	beq.n	8001bc4 <_cbDialog+0xbc>
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d104      	bne.n	8001bcc <_cbDialog+0xc4>
        break;
 8001bc2:	e000      	b.n	8001bc6 <_cbDialog+0xbe>
        break;
 8001bc4:	bf00      	nop
      break;
 8001bc6:	e001      	b.n	8001bcc <_cbDialog+0xc4>
      break;
 8001bc8:	bf00      	nop
 8001bca:	e005      	b.n	8001bd8 <_cbDialog+0xd0>
      break;
 8001bcc:	bf00      	nop
    break;
 8001bce:	e003      	b.n	8001bd8 <_cbDialog+0xd0>
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f009 f807 	bl	800abe4 <WM_DefaultProc>
    break;
 8001bd6:	bf00      	nop
  }
}
 8001bd8:	bf00      	nop
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	080171ac 	.word	0x080171ac
 8001be4:	080171b0 	.word	0x080171b0
 8001be8:	080171b4 	.word	0x080171b4
 8001bec:	08019334 	.word	0x08019334

08001bf0 <CreateAccWin>:
/*********************************************************************
*
*       CreateaccWin
*/
WM_HWIN CreateAccWin(void);
WM_HWIN CreateAccWin(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af02      	add	r7, sp, #8
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 8001bf6:	f007 fe7d 	bl	80098f4 <WM_GetDesktopWindow>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	9201      	str	r2, [sp, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	9200      	str	r2, [sp, #0]
 8001c04:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <CreateAccWin+0x2c>)
 8001c06:	2105      	movs	r1, #5
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <CreateAccWin+0x30>)
 8001c0a:	f007 f808 	bl	8008c1e <GUI_CreateDialogBox>
 8001c0e:	6078      	str	r0, [r7, #4]
  return hWin;
 8001c10:	687b      	ldr	r3, [r7, #4]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	08001b09 	.word	0x08001b09
 8001c20:	080172b0 	.word	0x080172b0

08001c24 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  int     NCode;
  int     Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b1d      	cmp	r3, #29
 8001c32:	d002      	beq.n	8001c3a <_cbDialog+0x16>
 8001c34:	2b26      	cmp	r3, #38	; 0x26
 8001c36:	d027      	beq.n	8001c88 <_cbDialog+0x64>
 8001c38:	e058      	b.n	8001cec <_cbDialog+0xc8>
  case WM_INIT_DIALOG:
    //
    // Initialization of 'LIST_TEMPERATURA'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_LISTTEMP);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f640 0104 	movw	r1, #2052	; 0x804
 8001c42:	4618      	mov	r0, r3
 8001c44:	f007 fe52 	bl	80098ec <WM_GetDialogItem>
 8001c48:	60f8      	str	r0, [r7, #12]
    LISTVIEW_AddColumn(hItem, 150, "Temperatura", GUI_TA_HCENTER | GUI_TA_VCENTER);
 8001c4a:	230e      	movs	r3, #14
 8001c4c:	4a2b      	ldr	r2, [pc, #172]	; (8001cfc <_cbDialog+0xd8>)
 8001c4e:	2196      	movs	r1, #150	; 0x96
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f006 fa43 	bl	80080dc <LISTVIEW_AddColumn>
    LISTVIEW_AddColumn(hItem, 30, "Col 1", GUI_TA_HCENTER | GUI_TA_VCENTER);
 8001c56:	230e      	movs	r3, #14
 8001c58:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <_cbDialog+0xdc>)
 8001c5a:	211e      	movs	r1, #30
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f006 fa3d 	bl	80080dc <LISTVIEW_AddColumn>
    LISTVIEW_AddColumn(hItem, 30, "Col 2", GUI_TA_HCENTER | GUI_TA_VCENTER);
 8001c62:	230e      	movs	r3, #14
 8001c64:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <_cbDialog+0xe0>)
 8001c66:	211e      	movs	r1, #30
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f006 fa37 	bl	80080dc <LISTVIEW_AddColumn>
    LISTVIEW_AddRow(hItem, NULL);
 8001c6e:	2100      	movs	r1, #0
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f006 fa85 	bl	8008180 <LISTVIEW_AddRow>
    LISTVIEW_SetGridVis(hItem, 0);
 8001c76:	2100      	movs	r1, #0
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f005 f93a 	bl	8006ef2 <LISTVIEW_SetGridVis>
    LISTVIEW_SetFont(hItem, GUI_FONT_24_1);
 8001c7e:	4922      	ldr	r1, [pc, #136]	; (8001d08 <_cbDialog+0xe4>)
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f005 f951 	bl	8006f28 <LISTVIEW_SetFont>
    // USER START (Optionally insert additional code for further widget initialization)
    // USER END
    break;
 8001c86:	e035      	b.n	8001cf4 <_cbDialog+0xd0>
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f007 fde7 	bl	8009860 <WM_GetId>
 8001c92:	6178      	str	r0, [r7, #20]
    NCode = pMsg->Data.v;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f640 0203 	movw	r2, #2051	; 0x803
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d005      	beq.n	8001cb0 <_cbDialog+0x8c>
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f640 0204 	movw	r2, #2052	; 0x804
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d009      	beq.n	8001cc2 <_cbDialog+0x9e>
      }
      break;
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
 8001cae:	e021      	b.n	8001cf4 <_cbDialog+0xd0>
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d003      	beq.n	8001cbe <_cbDialog+0x9a>
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d113      	bne.n	8001ce4 <_cbDialog+0xc0>
        break;
 8001cbc:	e000      	b.n	8001cc0 <_cbDialog+0x9c>
        break;
 8001cbe:	bf00      	nop
      break;
 8001cc0:	e010      	b.n	8001ce4 <_cbDialog+0xc0>
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d009      	beq.n	8001cdc <_cbDialog+0xb8>
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	dc0c      	bgt.n	8001ce8 <_cbDialog+0xc4>
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d005      	beq.n	8001ce0 <_cbDialog+0xbc>
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d106      	bne.n	8001ce8 <_cbDialog+0xc4>
        break;
 8001cda:	e002      	b.n	8001ce2 <_cbDialog+0xbe>
        break;
 8001cdc:	bf00      	nop
 8001cde:	e003      	b.n	8001ce8 <_cbDialog+0xc4>
        break;
 8001ce0:	bf00      	nop
      break;
 8001ce2:	e001      	b.n	8001ce8 <_cbDialog+0xc4>
      break;
 8001ce4:	bf00      	nop
 8001ce6:	e005      	b.n	8001cf4 <_cbDialog+0xd0>
      break;
 8001ce8:	bf00      	nop
    break;
 8001cea:	e003      	b.n	8001cf4 <_cbDialog+0xd0>
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f008 ff79 	bl	800abe4 <WM_DefaultProc>
    break;
 8001cf2:	bf00      	nop
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	080171d8 	.word	0x080171d8
 8001d00:	080171e4 	.word	0x080171e4
 8001d04:	080171ec 	.word	0x080171ec
 8001d08:	08018d40 	.word	0x08018d40

08001d0c <CreateTempWin>:
/*********************************************************************
*
*       CreateWindow
*/
WM_HWIN CreateTempWin(void);
WM_HWIN CreateTempWin(void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af02      	add	r7, sp, #8
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 8001d12:	f007 fdef 	bl	80098f4 <WM_GetDesktopWindow>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2200      	movs	r2, #0
 8001d1a:	9201      	str	r2, [sp, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	9200      	str	r2, [sp, #0]
 8001d20:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <CreateTempWin+0x2c>)
 8001d22:	2103      	movs	r1, #3
 8001d24:	4805      	ldr	r0, [pc, #20]	; (8001d3c <CreateTempWin+0x30>)
 8001d26:	f006 ff7a 	bl	8008c1e <GUI_CreateDialogBox>
 8001d2a:	6078      	str	r0, [r7, #4]
  return hWin;
 8001d2c:	687b      	ldr	r3, [r7, #4]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	08001c25 	.word	0x08001c25
 8001d3c:	0801733c 	.word	0x0801733c

08001d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d44:	480d      	ldr	r0, [pc, #52]	; (8001d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d46:	490e      	ldr	r1, [pc, #56]	; (8001d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d5c:	4c0b      	ldr	r4, [pc, #44]	; (8001d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d6a:	f7ff fe67 	bl	8001a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f014 fd51 	bl	8016814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d72:	f7ff f93b 	bl	8000fec <main>
  bx  lr    
 8001d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d78:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d80:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8001d84:	0801d7b4 	.word	0x0801d7b4
  ldr r2, =_sbss
 8001d88:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8001d8c:	2001d624 	.word	0x2001d624

08001d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d90:	e7fe      	b.n	8001d90 <ADC_IRQHandler>
	...

08001d94 <Init_ACCEL_GPIO>:
unsigned char id=0;

I2C_HandleTypeDef hi2c;

void Init_ACCEL_GPIO(I2C_HandleTypeDef i2c_handle)
{
 8001d94:	b084      	sub	sp, #16
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	f107 0c08 	add.w	ip, r7, #8
 8001d9e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=i2c_handle;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <Init_ACCEL_GPIO+0x2c>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	224c      	movs	r2, #76	; 0x4c
 8001dac:	4619      	mov	r1, r3
 8001dae:	f014 fd63 	bl	8016878 <memcpy>
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dba:	b004      	add	sp, #16
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	2001d43c 	.word	0x2001d43c

08001dc4 <ADXL345_Write>:



void ADXL345_Write(uint8_t reg, uint8_t val)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	4603      	mov	r3, r0
 8001dcc:	460a      	mov	r2, r1
 8001dce:	71fb      	strb	r3, [r7, #7]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	71bb      	strb	r3, [r7, #6]
	uint8_t	txbuf[2];

	txbuf[0]=reg;
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	733b      	strb	r3, [r7, #12]
	txbuf[1]=val;
 8001dd8:	79bb      	ldrb	r3, [r7, #6]
 8001dda:	737b      	strb	r3, [r7, #13]

	while(HAL_I2C_Master_Transmit(&hi2c, ADXL345_ADDR, (uint8_t *)txbuf, 2, ADXL345_TIMEOUT)!= HAL_OK);
 8001ddc:	bf00      	nop
 8001dde:	f107 020c 	add.w	r2, r7, #12
 8001de2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2302      	movs	r3, #2
 8001dea:	21a6      	movs	r1, #166	; 0xa6
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <ADXL345_Write+0x40>)
 8001dee:	f001 fb51 	bl	8003494 <HAL_I2C_Master_Transmit>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f2      	bne.n	8001dde <ADXL345_Write+0x1a>
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2001d43c 	.word	0x2001d43c

08001e08 <ADXL345_ReadByte>:


uint8_t ADXL345_ReadByte(uint8_t reg)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
	uint8_t rxbuf[1];
	rxbuf[0] = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	733b      	strb	r3, [r7, #12]

	while(HAL_I2C_Master_Transmit(&hi2c, ADXL345_ADDR, &reg, 1, ADXL345_TIMEOUT)!= HAL_OK);
 8001e16:	bf00      	nop
 8001e18:	1dfa      	adds	r2, r7, #7
 8001e1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	21a6      	movs	r1, #166	; 0xa6
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <ADXL345_ReadByte+0x50>)
 8001e26:	f001 fb35 	bl	8003494 <HAL_I2C_Master_Transmit>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f3      	bne.n	8001e18 <ADXL345_ReadByte+0x10>
	while(HAL_I2C_Master_Receive(&hi2c, ADXL345_ADDR, (uint8_t *)rxbuf, 1, ADXL345_TIMEOUT) != HAL_OK);
 8001e30:	bf00      	nop
 8001e32:	f107 020c 	add.w	r2, r7, #12
 8001e36:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	21a6      	movs	r1, #166	; 0xa6
 8001e40:	4805      	ldr	r0, [pc, #20]	; (8001e58 <ADXL345_ReadByte+0x50>)
 8001e42:	f001 fc1b 	bl	800367c <HAL_I2C_Master_Receive>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f2      	bne.n	8001e32 <ADXL345_ReadByte+0x2a>

	return rxbuf[0];
 8001e4c:	7b3b      	ldrb	r3, [r7, #12]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2001d43c 	.word	0x2001d43c

08001e5c <ADXL345_read_xyz>:



void ADXL345_read_xyz(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af02      	add	r7, sp, #8
	uint8_t rx[6];
	uint8_t address;

	address=ADXL345_DATAX0;
 8001e62:	2332      	movs	r3, #50	; 0x32
 8001e64:	71fb      	strb	r3, [r7, #7]
	
	while(HAL_I2C_Master_Transmit(&hi2c, ADXL345_ADDR, &address, 1, ADXL345_TIMEOUT)!= HAL_OK);
 8001e66:	bf00      	nop
 8001e68:	1dfa      	adds	r2, r7, #7
 8001e6a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2301      	movs	r3, #1
 8001e72:	21a6      	movs	r1, #166	; 0xa6
 8001e74:	481a      	ldr	r0, [pc, #104]	; (8001ee0 <ADXL345_read_xyz+0x84>)
 8001e76:	f001 fb0d 	bl	8003494 <HAL_I2C_Master_Transmit>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f3      	bne.n	8001e68 <ADXL345_read_xyz+0xc>
	while(HAL_I2C_Master_Receive(&hi2c, ADXL345_ADDR, (uint8_t *)rx, 6, ADXL345_TIMEOUT) != HAL_OK);
 8001e80:	bf00      	nop
 8001e82:	f107 0208 	add.w	r2, r7, #8
 8001e86:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2306      	movs	r3, #6
 8001e8e:	21a6      	movs	r1, #166	; 0xa6
 8001e90:	4813      	ldr	r0, [pc, #76]	; (8001ee0 <ADXL345_read_xyz+0x84>)
 8001e92:	f001 fbf3 	bl	800367c <HAL_I2C_Master_Receive>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f2      	bne.n	8001e82 <ADXL345_read_xyz+0x26>

	accel_x=(((uint16_t)rx[1]) << 8) | rx[0];
 8001e9c:	7a7b      	ldrb	r3, [r7, #9]
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	b21a      	sxth	r2, r3
 8001ea2:	7a3b      	ldrb	r3, [r7, #8]
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <ADXL345_read_xyz+0x88>)
 8001eae:	801a      	strh	r2, [r3, #0]
	accel_y=(((uint16_t)rx[3]) << 8) | rx[2];
 8001eb0:	7afb      	ldrb	r3, [r7, #11]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	7abb      	ldrb	r3, [r7, #10]
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <ADXL345_read_xyz+0x8c>)
 8001ec2:	801a      	strh	r2, [r3, #0]
	accel_z=(((uint16_t)rx[5]) << 8) | rx[4];
 8001ec4:	7b7b      	ldrb	r3, [r7, #13]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	7b3b      	ldrb	r3, [r7, #12]
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <ADXL345_read_xyz+0x90>)
 8001ed6:	801a      	strh	r2, [r3, #0]

}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2001d43c 	.word	0x2001d43c
 8001ee4:	200192c8 	.word	0x200192c8
 8001ee8:	200192ca 	.word	0x200192ca
 8001eec:	200192cc 	.word	0x200192cc

08001ef0 <ADXL345_Init>:
{
	return accel_z;
}

void ADXL345_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0

  ADXL345_Write(ADXL345_POWER_CTL, 0x00);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	202d      	movs	r0, #45	; 0x2d
 8001ef8:	f7ff ff64 	bl	8001dc4 <ADXL345_Write>
  id = ADXL345_ReadByte(0x00);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7ff ff83 	bl	8001e08 <ADXL345_ReadByte>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <ADXL345_Init+0x40>)
 8001f08:	701a      	strb	r2, [r3, #0]

  ADXL345_Write(ADXL345_DATA_FORMAT, 0x08);       // Full resolution, +/-2g, 4mg/LSB, right justified
 8001f0a:	2108      	movs	r1, #8
 8001f0c:	2031      	movs	r0, #49	; 0x31
 8001f0e:	f7ff ff59 	bl	8001dc4 <ADXL345_Write>
  ADXL345_Write(ADXL345_BW_RATE, 0x0A);           // Set 100 Hz data rate
 8001f12:	210a      	movs	r1, #10
 8001f14:	202c      	movs	r0, #44	; 0x2c
 8001f16:	f7ff ff55 	bl	8001dc4 <ADXL345_Write>
  ADXL345_Write(ADXL345_FIFO_CTL, 0x80);          // stream mode
 8001f1a:	2180      	movs	r1, #128	; 0x80
 8001f1c:	2038      	movs	r0, #56	; 0x38
 8001f1e:	f7ff ff51 	bl	8001dc4 <ADXL345_Write>
  ADXL345_Write(ADXL345_POWER_CTL, 0x08);         // POWER_CTL reg: measurement mode
 8001f22:	2108      	movs	r1, #8
 8001f24:	202d      	movs	r0, #45	; 0x2d
 8001f26:	f7ff ff4d 	bl	8001dc4 <ADXL345_Write>
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200192ce 	.word	0x200192ce

08001f34 <Init_LCD_GPIO>:

//=============================================================================
// GPIO setup 
//=============================================================================
void Init_LCD_GPIO(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;

	  __HAL_RCC_CRC_CLK_ENABLE();
 8001f3a:	4b42      	ldr	r3, [pc, #264]	; (8002044 <Init_LCD_GPIO+0x110>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a41      	ldr	r2, [pc, #260]	; (8002044 <Init_LCD_GPIO+0x110>)
 8001f40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b3f      	ldr	r3, [pc, #252]	; (8002044 <Init_LCD_GPIO+0x110>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f52:	4b3c      	ldr	r3, [pc, #240]	; (8002044 <Init_LCD_GPIO+0x110>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a3b      	ldr	r2, [pc, #236]	; (8002044 <Init_LCD_GPIO+0x110>)
 8001f58:	f043 0310 	orr.w	r3, r3, #16
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b39      	ldr	r3, [pc, #228]	; (8002044 <Init_LCD_GPIO+0x110>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f6a:	4b36      	ldr	r3, [pc, #216]	; (8002044 <Init_LCD_GPIO+0x110>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a35      	ldr	r2, [pc, #212]	; (8002044 <Init_LCD_GPIO+0x110>)
 8001f70:	f043 0320 	orr.w	r3, r3, #32
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b33      	ldr	r3, [pc, #204]	; (8002044 <Init_LCD_GPIO+0x110>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f82:	4b30      	ldr	r3, [pc, #192]	; (8002044 <Init_LCD_GPIO+0x110>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a2f      	ldr	r2, [pc, #188]	; (8002044 <Init_LCD_GPIO+0x110>)
 8001f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <Init_LCD_GPIO+0x110>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]


	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001fa0:	4829      	ldr	r0, [pc, #164]	; (8002048 <Init_LCD_GPIO+0x114>)
 8001fa2:	f001 f9b3 	bl	800330c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	21ff      	movs	r1, #255	; 0xff
 8001faa:	4828      	ldr	r0, [pc, #160]	; (800204c <Init_LCD_GPIO+0x118>)
 8001fac:	f001 f9ae 	bl	800330c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001fb6:	4826      	ldr	r0, [pc, #152]	; (8002050 <Init_LCD_GPIO+0x11c>)
 8001fb8:	f001 f9a8 	bl	800330c <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GCMD;
 8001fbc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fc0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GDISP_CMD_PORT, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	481c      	ldr	r0, [pc, #112]	; (8002048 <Init_LCD_GPIO+0x114>)
 8001fd6:	f000 ffed 	bl	8002fb4 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_LO;
 8001fda:	23ff      	movs	r3, #255	; 0xff
 8001fdc:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GDISP_DATA_LO_PORT, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4816      	ldr	r0, [pc, #88]	; (800204c <Init_LCD_GPIO+0x118>)
 8001ff2:	f000 ffdf 	bl	8002fb4 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_HI;
 8001ff6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001ffa:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GDISP_DATA_HI_PORT, &GPIO_InitStruct);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	4810      	ldr	r0, [pc, #64]	; (8002050 <Init_LCD_GPIO+0x11c>)
 8002010:	f000 ffd0 	bl	8002fb4 <HAL_GPIO_Init>

	  SET_CS; SET_WR; SET_RD; SET_DC; SET_RST;
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <Init_LCD_GPIO+0x114>)
 8002016:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800201a:	619a      	str	r2, [r3, #24]
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <Init_LCD_GPIO+0x114>)
 800201e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002022:	619a      	str	r2, [r3, #24]
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <Init_LCD_GPIO+0x114>)
 8002026:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800202a:	619a      	str	r2, [r3, #24]
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <Init_LCD_GPIO+0x114>)
 800202e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002032:	619a      	str	r2, [r3, #24]
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <Init_LCD_GPIO+0x114>)
 8002036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800203a:	619a      	str	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	3728      	adds	r7, #40	; 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40023800 	.word	0x40023800
 8002048:	40021400 	.word	0x40021400
 800204c:	40021800 	.word	0x40021800
 8002050:	40021000 	.word	0x40021000

08002054 <SSD1963_WriteCommand>:
//=============================================================================
// Write command to display
//=============================================================================
void SSD1963_WriteCommand(uint16_t Data)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	80fb      	strh	r3, [r7, #6]
	uint16_t _Data=~Data;
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	43db      	mvns	r3, r3
 8002062:	81fb      	strh	r3, [r7, #14]

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <SSD1963_WriteCommand+0x70>)
 8002066:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800206a:	619a      	str	r2, [r3, #24]

	CLR_CS;
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <SSD1963_WriteCommand+0x74>)
 800206e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002072:	619a      	str	r2, [r3, #24]
	CLR_DC;
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <SSD1963_WriteCommand+0x74>)
 8002076:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800207a:	619a      	str	r2, [r3, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800207c:	89fb      	ldrh	r3, [r7, #14]
 800207e:	041b      	lsls	r3, r3, #16
 8002080:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	4910      	ldr	r1, [pc, #64]	; (80020cc <SSD1963_WriteCommand+0x78>)
 800208a:	4313      	orrs	r3, r2
 800208c:	618b      	str	r3, [r1, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <SSD1963_WriteCommand+0x70>)
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002098:	490a      	ldr	r1, [pc, #40]	; (80020c4 <SSD1963_WriteCommand+0x70>)
 800209a:	4313      	orrs	r3, r2
 800209c:	614b      	str	r3, [r1, #20]
	writeStrobe;
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <SSD1963_WriteCommand+0x74>)
 80020a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020a4:	619a      	str	r2, [r3, #24]
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <SSD1963_WriteCommand+0x74>)
 80020a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ac:	619a      	str	r2, [r3, #24]
	SET_CS;
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <SSD1963_WriteCommand+0x74>)
 80020b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b4:	619a      	str	r2, [r3, #24]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40021400 	.word	0x40021400
 80020cc:	40021800 	.word	0x40021800

080020d0 <SSD1963_WriteData>:
//=============================================================================
// Write data to display
//=============================================================================

void SSD1963_WriteData(uint16_t Data)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	80fb      	strh	r3, [r7, #6]
	uint16_t _Data=~Data;
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	43db      	mvns	r3, r3
 80020de:	81fb      	strh	r3, [r7, #14]

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <SSD1963_WriteData+0x70>)
 80020e2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80020e6:	619a      	str	r2, [r3, #24]

	CLR_CS;
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <SSD1963_WriteData+0x74>)
 80020ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80020ee:	619a      	str	r2, [r3, #24]
	SET_DC;
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <SSD1963_WriteData+0x74>)
 80020f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020f6:	619a      	str	r2, [r3, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80020f8:	89fb      	ldrh	r3, [r7, #14]
 80020fa:	041b      	lsls	r3, r3, #16
 80020fc:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4910      	ldr	r1, [pc, #64]	; (8002148 <SSD1963_WriteData+0x78>)
 8002106:	4313      	orrs	r3, r2
 8002108:	618b      	str	r3, [r1, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <SSD1963_WriteData+0x70>)
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002114:	490a      	ldr	r1, [pc, #40]	; (8002140 <SSD1963_WriteData+0x70>)
 8002116:	4313      	orrs	r3, r2
 8002118:	614b      	str	r3, [r1, #20]
	writeStrobe;
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <SSD1963_WriteData+0x74>)
 800211c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002120:	619a      	str	r2, [r3, #24]
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <SSD1963_WriteData+0x74>)
 8002124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002128:	619a      	str	r2, [r3, #24]
	SET_CS;
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <SSD1963_WriteData+0x74>)
 800212c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002130:	619a      	str	r2, [r3, #24]

}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	40021400 	.word	0x40021400
 8002148:	40021800 	.word	0x40021800

0800214c <SSD1963_WriteDataMultiple>:
//=============================================================================
// Write multiple data to display
//=============================================================================
void SSD1963_WriteDataMultiple(uint16_t * Data, int NumItems)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  while (NumItems)
 8002156:	e00a      	b.n	800216e <SSD1963_WriteDataMultiple+0x22>
  {
	  SSD1963_WriteData(*Data);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ffb7 	bl	80020d0 <SSD1963_WriteData>
	  Data++;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3302      	adds	r3, #2
 8002166:	607b      	str	r3, [r7, #4]
	  NumItems--;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	3b01      	subs	r3, #1
 800216c:	603b      	str	r3, [r7, #0]
  while (NumItems)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f1      	bne.n	8002158 <SSD1963_WriteDataMultiple+0xc>
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <SSD1963_Init>:
//=============================================================================
// Display initialization
//=============================================================================

void SSD1963_Init (void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	CLR_RST;  // reset
 8002184:	4b54      	ldr	r3, [pc, #336]	; (80022d8 <SSD1963_Init+0x158>)
 8002186:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800218a:	619a      	str	r2, [r3, #24]
	HAL_Delay(500);
 800218c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002190:	f000 fa1c 	bl	80025cc <HAL_Delay>
	SET_RST;
 8002194:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <SSD1963_Init+0x158>)
 8002196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800219a:	619a      	str	r2, [r3, #24]
	HAL_Delay(100);
 800219c:	2064      	movs	r0, #100	; 0x64
 800219e:	f000 fa15 	bl	80025cc <HAL_Delay>

	SSD1963_WriteCommand(SSD1963_SOFT_RESET);
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7ff ff56 	bl	8002054 <SSD1963_WriteCommand>
	HAL_Delay(10);
 80021a8:	200a      	movs	r0, #10
 80021aa:	f000 fa0f 	bl	80025cc <HAL_Delay>
	SSD1963_WriteCommand(SSD1963_SET_PLL_MN);
 80021ae:	20e2      	movs	r0, #226	; 0xe2
 80021b0:	f7ff ff50 	bl	8002054 <SSD1963_WriteCommand>
	SSD1963_WriteData(29);	// PLLclk = REFclk * 30 (300MHz)
 80021b4:	201d      	movs	r0, #29
 80021b6:	f7ff ff8b 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(2);	// SYSclk = PLLclk / 3  (100MHz)
 80021ba:	2002      	movs	r0, #2
 80021bc:	f7ff ff88 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(4);  	// dummy
 80021c0:	2004      	movs	r0, #4
 80021c2:	f7ff ff85 	bl	80020d0 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_PLL);
 80021c6:	20e0      	movs	r0, #224	; 0xe0
 80021c8:	f7ff ff44 	bl	8002054 <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0001);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f7ff ff7f 	bl	80020d0 <SSD1963_WriteData>

	HAL_Delay(100);
 80021d2:	2064      	movs	r0, #100	; 0x64
 80021d4:	f000 f9fa 	bl	80025cc <HAL_Delay>

	SSD1963_WriteCommand(SSD1963_SET_PLL);
 80021d8:	20e0      	movs	r0, #224	; 0xe0
 80021da:	f7ff ff3b 	bl	8002054 <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0003);
 80021de:	2003      	movs	r0, #3
 80021e0:	f7ff ff76 	bl	80020d0 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_LCD_MODE);
 80021e4:	20b0      	movs	r0, #176	; 0xb0
 80021e6:	f7ff ff35 	bl	8002054 <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0020);
 80021ea:	2020      	movs	r0, #32
 80021ec:	f7ff ff70 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7ff ff6d 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_WIDTH-1)));
 80021f6:	2003      	movs	r0, #3
 80021f8:	f7ff ff6a 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_WIDTH-1)));
 80021fc:	201f      	movs	r0, #31
 80021fe:	f7ff ff67 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_HEIGHT-1)));
 8002202:	2001      	movs	r0, #1
 8002204:	f7ff ff64 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_HEIGHT-1)));
 8002208:	20df      	movs	r0, #223	; 0xdf
 800220a:	f7ff ff61 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 800220e:	2000      	movs	r0, #0
 8002210:	f7ff ff5e 	bl	80020d0 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_PIXEL_DATA_INTERFACE);
 8002214:	20f0      	movs	r0, #240	; 0xf0
 8002216:	f7ff ff1d 	bl	8002054 <SSD1963_WriteCommand>
	SSD1963_WriteData(SSD1963_PDI_16BIT565);
 800221a:	2003      	movs	r0, #3
 800221c:	f7ff ff58 	bl	80020d0 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_LSHIFT_FREQ);
 8002220:	20e6      	movs	r0, #230	; 0xe6
 8002222:	f7ff ff17 	bl	8002054 <SSD1963_WriteCommand>
	SSD1963_WriteData((LCD_FPR >> 16) & 0x00FF);
 8002226:	2004      	movs	r0, #4
 8002228:	f7ff ff52 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData((LCD_FPR >> 8) & 0x00FF);
 800222c:	200a      	movs	r0, #10
 800222e:	f7ff ff4f 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(LCD_FPR & 0x00FF);
 8002232:	205f      	movs	r0, #95	; 0x5f
 8002234:	f7ff ff4c 	bl	80020d0 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_HORI_PERIOD);
 8002238:	20b4      	movs	r0, #180	; 0xb4
 800223a:	f7ff ff0b 	bl	8002054 <SSD1963_WriteCommand>
	SSD1963_WriteData(mHIGH(TFT_HSYNC_PERIOD));
 800223e:	2003      	movs	r0, #3
 8002240:	f7ff ff46 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW(TFT_HSYNC_PERIOD));
 8002244:	2054      	movs	r0, #84	; 0x54
 8002246:	f7ff ff43 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_HSYNC_PULSE + TFT_HSYNC_BACK_PORCH)));
 800224a:	2000      	movs	r0, #0
 800224c:	f7ff ff40 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_HSYNC_PULSE + TFT_HSYNC_BACK_PORCH)));
 8002250:	202c      	movs	r0, #44	; 0x2c
 8002252:	f7ff ff3d 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(TFT_HSYNC_PULSE);
 8002256:	2002      	movs	r0, #2
 8002258:	f7ff ff3a 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 800225c:	2000      	movs	r0, #0
 800225e:	f7ff ff37 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8002262:	2000      	movs	r0, #0
 8002264:	f7ff ff34 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8002268:	2000      	movs	r0, #0
 800226a:	f7ff ff31 	bl	80020d0 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_VERT_PERIOD);
 800226e:	20b6      	movs	r0, #182	; 0xb6
 8002270:	f7ff fef0 	bl	8002054 <SSD1963_WriteCommand>
	SSD1963_WriteData(mHIGH(TFT_VSYNC_PERIOD));
 8002274:	2001      	movs	r0, #1
 8002276:	f7ff ff2b 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW(TFT_VSYNC_PERIOD));
 800227a:	20ee      	movs	r0, #238	; 0xee
 800227c:	f7ff ff28 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_VSYNC_PULSE + TFT_VSYNC_BACK_PORCH)));
 8002280:	2000      	movs	r0, #0
 8002282:	f7ff ff25 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_VSYNC_PULSE + TFT_VSYNC_BACK_PORCH)));
 8002286:	200c      	movs	r0, #12
 8002288:	f7ff ff22 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(TFT_VSYNC_PULSE);
 800228c:	2006      	movs	r0, #6
 800228e:	f7ff ff1f 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8002292:	2000      	movs	r0, #0
 8002294:	f7ff ff1c 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8002298:	2000      	movs	r0, #0
 800229a:	f7ff ff19 	bl	80020d0 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_DISPLAY_ON);//SET display on
 800229e:	2029      	movs	r0, #41	; 0x29
 80022a0:	f7ff fed8 	bl	8002054 <SSD1963_WriteCommand>

	HAL_Delay(10);
 80022a4:	200a      	movs	r0, #10
 80022a6:	f000 f991 	bl	80025cc <HAL_Delay>
	SSD1963_WriteCommand(SSD1963_SET_PWM_CONF); //set PWM for Backlight. Manual p.53
 80022aa:	20be      	movs	r0, #190	; 0xbe
 80022ac:	f7ff fed2 	bl	8002054 <SSD1963_WriteCommand>
	// 6 parameters to be set
	SSD1963_WriteData(0x0004); 					// PWM Freq =100MHz/(256*(PWMF[7:0]+1))/256  PWMF[7:0]=4 PWM Freq=305Hz
 80022b0:	2004      	movs	r0, #4
 80022b2:	f7ff ff0d 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(0x00C0); 					// PWM duty cycle(50%)
 80022b6:	20c0      	movs	r0, #192	; 0xc0
 80022b8:	f7ff ff0a 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(0x0001); 					// PWM controlled by host, PWM enabled
 80022bc:	2001      	movs	r0, #1
 80022be:	f7ff ff07 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(0x0040); 					// brightness level 0x00 - 0xFF
 80022c2:	2040      	movs	r0, #64	; 0x40
 80022c4:	f7ff ff04 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000); 					// minimum brightness level =  0x00 - 0xFF
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7ff ff01 	bl	80020d0 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);					// brightness prescalar 0x0 - 0xF
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff fefe 	bl	80020d0 <SSD1963_WriteData>


}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021400 	.word	0x40021400

080022dc <Init_TOUCH_GPIO>:

I2C_HandleTypeDef hi2c;


void Init_TOUCH_GPIO(I2C_HandleTypeDef i2c_handle)
{
 80022dc:	b084      	sub	sp, #16
 80022de:	b580      	push	{r7, lr}
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	f107 0c08 	add.w	ip, r7, #8
 80022e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=i2c_handle;
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <Init_TOUCH_GPIO+0x2c>)
 80022ec:	4618      	mov	r0, r3
 80022ee:	f107 0308 	add.w	r3, r7, #8
 80022f2:	224c      	movs	r2, #76	; 0x4c
 80022f4:	4619      	mov	r1, r3
 80022f6:	f014 fabf 	bl	8016878 <memcpy>
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002302:	b004      	add	sp, #16
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	2001d43c 	.word	0x2001d43c

0800230c <STMPE610_Write>:
		return FALSE;
}


void STMPE610_Write(uint8_t reg, uint8_t val)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af02      	add	r7, sp, #8
 8002312:	4603      	mov	r3, r0
 8002314:	460a      	mov	r2, r1
 8002316:	71fb      	strb	r3, [r7, #7]
 8002318:	4613      	mov	r3, r2
 800231a:	71bb      	strb	r3, [r7, #6]
	uint8_t	txbuf[2];

	txbuf[0]=reg;
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	733b      	strb	r3, [r7, #12]
	txbuf[1]=val;
 8002320:	79bb      	ldrb	r3, [r7, #6]
 8002322:	737b      	strb	r3, [r7, #13]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8002324:	bf00      	nop
 8002326:	f107 020c 	add.w	r2, r7, #12
 800232a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2302      	movs	r3, #2
 8002332:	2188      	movs	r1, #136	; 0x88
 8002334:	4805      	ldr	r0, [pc, #20]	; (800234c <STMPE610_Write+0x40>)
 8002336:	f001 f8ad 	bl	8003494 <HAL_I2C_Master_Transmit>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f2      	bne.n	8002326 <STMPE610_Write+0x1a>
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	2001d43c 	.word	0x2001d43c

08002350 <STMPE610_ReadByte>:

uint8_t STMPE610_ReadByte(uint8_t reg)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af02      	add	r7, sp, #8
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
	uint8_t rxbuf[1];
	rxbuf[0] = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	733b      	strb	r3, [r7, #12]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, &reg, 1, STMPE610_TIMEOUT)!= HAL_OK);
 800235e:	bf00      	nop
 8002360:	1dfa      	adds	r2, r7, #7
 8002362:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2301      	movs	r3, #1
 800236a:	2188      	movs	r1, #136	; 0x88
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <STMPE610_ReadByte+0x50>)
 800236e:	f001 f891 	bl	8003494 <HAL_I2C_Master_Transmit>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f3      	bne.n	8002360 <STMPE610_ReadByte+0x10>
	while(HAL_I2C_Master_Receive(&hi2c, STMPE610_ADDR, (uint8_t *)rxbuf, 1, STMPE610_TIMEOUT) != HAL_OK);
 8002378:	bf00      	nop
 800237a:	f107 020c 	add.w	r2, r7, #12
 800237e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2301      	movs	r3, #1
 8002386:	2188      	movs	r1, #136	; 0x88
 8002388:	4805      	ldr	r0, [pc, #20]	; (80023a0 <STMPE610_ReadByte+0x50>)
 800238a:	f001 f977 	bl	800367c <HAL_I2C_Master_Receive>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f2      	bne.n	800237a <STMPE610_ReadByte+0x2a>

	return rxbuf[0];
 8002394:	7b3b      	ldrb	r3, [r7, #12]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2001d43c 	.word	0x2001d43c

080023a4 <STMPE610_ReadWord>:

uint16_t STMPE610_ReadWord(uint8_t reg)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
	uint8_t	rxbuf[2];
	
	rxbuf[0] = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	733b      	strb	r3, [r7, #12]
	rxbuf[1] = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	737b      	strb	r3, [r7, #13]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, &reg, 1, 10000)!= HAL_OK);
 80023b6:	bf00      	nop
 80023b8:	1dfa      	adds	r2, r7, #7
 80023ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2301      	movs	r3, #1
 80023c2:	2188      	movs	r1, #136	; 0x88
 80023c4:	480f      	ldr	r0, [pc, #60]	; (8002404 <STMPE610_ReadWord+0x60>)
 80023c6:	f001 f865 	bl	8003494 <HAL_I2C_Master_Transmit>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f3      	bne.n	80023b8 <STMPE610_ReadWord+0x14>
	while(HAL_I2C_Master_Receive(&hi2c, STMPE610_ADDR, (uint8_t *)rxbuf, 2, 10000) != HAL_OK);
 80023d0:	bf00      	nop
 80023d2:	f107 020c 	add.w	r2, r7, #12
 80023d6:	f242 7310 	movw	r3, #10000	; 0x2710
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2302      	movs	r3, #2
 80023de:	2188      	movs	r1, #136	; 0x88
 80023e0:	4808      	ldr	r0, [pc, #32]	; (8002404 <STMPE610_ReadWord+0x60>)
 80023e2:	f001 f94b 	bl	800367c <HAL_I2C_Master_Receive>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f2      	bne.n	80023d2 <STMPE610_ReadWord+0x2e>

	return (((uint16_t)rxbuf[0]) << 8) | rxbuf[1];
 80023ec:	7b3b      	ldrb	r3, [r7, #12]
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	b21a      	sxth	r2, r3
 80023f2:	7b7b      	ldrb	r3, [r7, #13]
 80023f4:	b21b      	sxth	r3, r3
 80023f6:	4313      	orrs	r3, r2
 80023f8:	b21b      	sxth	r3, r3
 80023fa:	b29b      	uxth	r3, r3
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	2001d43c 	.word	0x2001d43c

08002408 <STMPE610_Init>:

void STMPE610_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
	STMPE610_Write(STMPE610_REG_SYS_CTRL1, 0x02);		// Software chip reset
 800240c:	2102      	movs	r1, #2
 800240e:	2003      	movs	r0, #3
 8002410:	f7ff ff7c 	bl	800230c <STMPE610_Write>
	HAL_Delay(10);
 8002414:	200a      	movs	r0, #10
 8002416:	f000 f8d9 	bl	80025cc <HAL_Delay>
	
	STMPE610_Write(STMPE610_REG_SYS_CTRL2, 0x04);		// Temperature sensor clock off, GPIO clock off, touch clock on, ADC clock on
 800241a:	2104      	movs	r1, #4
 800241c:	2004      	movs	r0, #4
 800241e:	f7ff ff75 	bl	800230c <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_EN, 0x03);			// Interrupt on INT pin when there is a sample or a touch transition.
 8002422:	2103      	movs	r1, #3
 8002424:	200a      	movs	r0, #10
 8002426:	f7ff ff71 	bl	800230c <STMPE610_Write>
	//STMPE610_write_reg(STMPE610_REG_INT_EN, 0x00);						// Don't Interrupt on INT pin
	STMPE610_Write(STMPE610_REG_ADC_CTRL1, 0x48);		// ADC conversion time = 80 clock ticks, 12-bit ADC, internal voltage refernce
 800242a:	2148      	movs	r1, #72	; 0x48
 800242c:	2020      	movs	r0, #32
 800242e:	f7ff ff6d 	bl	800230c <STMPE610_Write>
	HAL_Delay(2);
 8002432:	2002      	movs	r0, #2
 8002434:	f000 f8ca 	bl	80025cc <HAL_Delay>
	
	STMPE610_Write(STMPE610_REG_ADC_CTRL2, 0x01);		// ADC speed 3.25MHz
 8002438:	2101      	movs	r1, #1
 800243a:	2021      	movs	r0, #33	; 0x21
 800243c:	f7ff ff66 	bl	800230c <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_GPIO_AF, 0x00);			// GPIO alternate function - OFF
 8002440:	2100      	movs	r1, #0
 8002442:	2017      	movs	r0, #23
 8002444:	f7ff ff62 	bl	800230c <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_CFG, 0xA3);			// Averaging 4, touch detect delay 1ms, panel driver settling time 1ms
 8002448:	21a3      	movs	r1, #163	; 0xa3
 800244a:	2041      	movs	r0, #65	; 0x41
 800244c:	f7ff ff5e 	bl	800230c <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_TH, 0x01);			// FIFO threshold = 1
 8002450:	2101      	movs	r1, #1
 8002452:	204a      	movs	r0, #74	; 0x4a
 8002454:	f7ff ff5a 	bl	800230c <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x01);			// FIFO reset enable
 8002458:	2101      	movs	r1, #1
 800245a:	204b      	movs	r0, #75	; 0x4b
 800245c:	f7ff ff56 	bl	800230c <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x00);			// FIFO reset disable
 8002460:	2100      	movs	r1, #0
 8002462:	204b      	movs	r0, #75	; 0x4b
 8002464:	f7ff ff52 	bl	800230c <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_FRACT_XYZ, 0x07);	// Z axis data format
 8002468:	2107      	movs	r1, #7
 800246a:	2056      	movs	r0, #86	; 0x56
 800246c:	f7ff ff4e 	bl	800230c <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_I_DRIVE, 0x01);		// max 50mA touchscreen line current
 8002470:	2101      	movs	r1, #1
 8002472:	2058      	movs	r0, #88	; 0x58
 8002474:	f7ff ff4a 	bl	800230c <STMPE610_Write>

	STMPE610_Write(STMPE610_REG_TSC_CTRL, 0x30);			// X&Y&Z, 16 reading window
 8002478:	2130      	movs	r1, #48	; 0x30
 800247a:	2040      	movs	r0, #64	; 0x40
 800247c:	f7ff ff46 	bl	800230c <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_CTRL, 0x31);			// X&Y&Z, 16 reading window, TSC enable
 8002480:	2131      	movs	r1, #49	; 0x31
 8002482:	2040      	movs	r0, #64	; 0x40
 8002484:	f7ff ff42 	bl	800230c <STMPE610_Write>
	//STMPE610_write_reg(STMPE610_REG_TSC_CTRL, 0x32);						// X&Y, 16 reading window
	//STMPE610_write_reg(TMPE610_REG_TSC_CTRL, 0x33);						// X&Y, 16 reading window, TSC enable

	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);		// Clear all interrupts
 8002488:	21ff      	movs	r1, #255	; 0xff
 800248a:	200b      	movs	r0, #11
 800248c:	f7ff ff3e 	bl	800230c <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_CTRL, 0x01);		// Level interrupt, enable interrupts
 8002490:	2101      	movs	r1, #1
 8002492:	2009      	movs	r0, #9
 8002494:	f7ff ff3a 	bl	800230c <STMPE610_Write>
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}

0800249c <STMPE610_read_xyz>:

uint8_t STMPE610_read_xyz(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
	uint8_t	status;

	// Is there something in the fifo
	status = STMPE610_ReadByte(STMPE610_REG_FIFO_STA);
 80024a2:	204b      	movs	r0, #75	; 0x4b
 80024a4:	f7ff ff54 	bl	8002350 <STMPE610_ReadByte>
 80024a8:	4603      	mov	r3, r0
 80024aa:	71fb      	strb	r3, [r7, #7]
	if ((status & 0x20))
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d017      	beq.n	80024e6 <STMPE610_read_xyz+0x4a>
	{
		STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);
 80024b6:	21ff      	movs	r1, #255	; 0xff
 80024b8:	200b      	movs	r0, #11
 80024ba:	f7ff ff27 	bl	800230c <STMPE610_Write>
		if (!(STMPE610_ReadByte(STMPE610_REG_TSC_CTRL) & 0x80))
 80024be:	2040      	movs	r0, #64	; 0x40
 80024c0:	f7ff ff46 	bl	8002350 <STMPE610_ReadByte>
 80024c4:	4603      	mov	r3, r0
 80024c6:	b25b      	sxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	db0a      	blt.n	80024e2 <STMPE610_read_xyz+0x46>
		{
			x=0;
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <STMPE610_read_xyz+0x98>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	801a      	strh	r2, [r3, #0]
			y=0;
 80024d2:	4b19      	ldr	r3, [pc, #100]	; (8002538 <STMPE610_read_xyz+0x9c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	801a      	strh	r2, [r3, #0]
			z=0;
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <STMPE610_read_xyz+0xa0>)
 80024da:	2200      	movs	r2, #0
 80024dc:	801a      	strh	r2, [r3, #0]
			return TRUE;
 80024de:	2301      	movs	r3, #1
 80024e0:	e023      	b.n	800252a <STMPE610_read_xyz+0x8e>
		}
		return FALSE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e021      	b.n	800252a <STMPE610_read_xyz+0x8e>
	}

	// Time to get some readings
	x = STMPE610_ReadWord(STMPE610_REG_TSC_DATA_X);
 80024e6:	204d      	movs	r0, #77	; 0x4d
 80024e8:	f7ff ff5c 	bl	80023a4 <STMPE610_ReadWord>
 80024ec:	4603      	mov	r3, r0
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <STMPE610_read_xyz+0x98>)
 80024f2:	801a      	strh	r2, [r3, #0]
	y = STMPE610_ReadWord(STMPE610_REG_TSC_DATA_Y);
 80024f4:	204f      	movs	r0, #79	; 0x4f
 80024f6:	f7ff ff55 	bl	80023a4 <STMPE610_ReadWord>
 80024fa:	4603      	mov	r3, r0
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <STMPE610_read_xyz+0x9c>)
 8002500:	801a      	strh	r2, [r3, #0]
	z = STMPE610_ReadByte(STMPE610_REG_TSC_DATA_Z);
 8002502:	2051      	movs	r0, #81	; 0x51
 8002504:	f7ff ff24 	bl	8002350 <STMPE610_ReadByte>
 8002508:	4603      	mov	r3, r0
 800250a:	b29a      	uxth	r2, r3
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <STMPE610_read_xyz+0xa0>)
 800250e:	801a      	strh	r2, [r3, #0]

	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x01);		// FIFO reset enable
 8002510:	2101      	movs	r1, #1
 8002512:	204b      	movs	r0, #75	; 0x4b
 8002514:	f7ff fefa 	bl	800230c <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x00);		// FIFO reset disable
 8002518:	2100      	movs	r1, #0
 800251a:	204b      	movs	r0, #75	; 0x4b
 800251c:	f7ff fef6 	bl	800230c <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);
 8002520:	21ff      	movs	r1, #255	; 0xff
 8002522:	200b      	movs	r0, #11
 8002524:	f7ff fef2 	bl	800230c <STMPE610_Write>

	return TRUE;
 8002528:	2301      	movs	r3, #1
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200192d0 	.word	0x200192d0
 8002538:	200192d2 	.word	0x200192d2
 800253c:	200192d4 	.word	0x200192d4

08002540 <STMPE610_GetX_TOUCH_RAW>:
	pom=100*(pom-GUI_TOUCH_AD_PMIN)/(GUI_TOUCH_AD_PMAX-GUI_TOUCH_AD_PMIN);
	return (uint16_t)pom;
}

uint16_t STMPE610_GetX_TOUCH_RAW(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
	return x;
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <STMPE610_GetX_TOUCH_RAW+0x14>)
 8002546:	881b      	ldrh	r3, [r3, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	200192d0 	.word	0x200192d0

08002558 <STMPE610_GetY_TOUCH_RAW>:
uint16_t STMPE610_GetY_TOUCH_RAW(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
	return y;
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <STMPE610_GetY_TOUCH_RAW+0x14>)
 800255e:	881b      	ldrh	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	200192d2 	.word	0x200192d2

08002570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002574:	2003      	movs	r0, #3
 8002576:	f000 fce8 	bl	8002f4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800257a:	2000      	movs	r0, #0
 800257c:	f7ff f9b0 	bl	80018e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002580:	f7ff f902 	bl	8001788 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_IncTick+0x20>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x24>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4413      	add	r3, r2
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_IncTick+0x24>)
 800259e:	6013      	str	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000008 	.word	0x20000008
 80025b0:	2001d488 	.word	0x2001d488

080025b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return uwTick;
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_GetTick+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	2001d488 	.word	0x2001d488

080025cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff ffee 	bl	80025b4 <HAL_GetTick>
 80025d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d005      	beq.n	80025f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_Delay+0x44>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4413      	add	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025f2:	bf00      	nop
 80025f4:	f7ff ffde 	bl	80025b4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d8f7      	bhi.n	80025f4 <HAL_Delay+0x28>
  {
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000008 	.word	0x20000008

08002614 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e031      	b.n	800268e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff f8d0 	bl	80017d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	d116      	bne.n	8002680 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_ADC_Init+0x84>)
 8002658:	4013      	ands	r3, r2
 800265a:	f043 0202 	orr.w	r2, r3, #2
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 faca 	bl	8002bfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f023 0303 	bic.w	r3, r3, #3
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
 800267e:	e001      	b.n	8002684 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	ffffeefd 	.word	0xffffeefd

0800269c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_ADC_Start+0x1a>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e0ad      	b.n	8002812 <HAL_ADC_Start+0x176>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d018      	beq.n	80026fe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_ADC_Start+0x184>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a50      	ldr	r2, [pc, #320]	; (8002824 <HAL_ADC_Start+0x188>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	0c9a      	lsrs	r2, r3, #18
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80026f0:	e002      	b.n	80026f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f9      	bne.n	80026f2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b01      	cmp	r3, #1
 800270a:	d175      	bne.n	80027f8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002710:	4b45      	ldr	r3, [pc, #276]	; (8002828 <HAL_ADC_Start+0x18c>)
 8002712:	4013      	ands	r3, r2
 8002714:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002732:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002746:	d106      	bne.n	8002756 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274c:	f023 0206 	bic.w	r2, r3, #6
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	645a      	str	r2, [r3, #68]	; 0x44
 8002754:	e002      	b.n	800275c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800276c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800276e:	4b2f      	ldr	r3, [pc, #188]	; (800282c <HAL_ADC_Start+0x190>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10f      	bne.n	800279a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d143      	bne.n	8002810 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	e03a      	b.n	8002810 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a24      	ldr	r2, [pc, #144]	; (8002830 <HAL_ADC_Start+0x194>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d10e      	bne.n	80027c2 <HAL_ADC_Start+0x126>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d107      	bne.n	80027c2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027c0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <HAL_ADC_Start+0x190>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d120      	bne.n	8002810 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a18      	ldr	r2, [pc, #96]	; (8002834 <HAL_ADC_Start+0x198>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d11b      	bne.n	8002810 <HAL_ADC_Start+0x174>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d114      	bne.n	8002810 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	e00b      	b.n	8002810 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f043 0210 	orr.w	r2, r3, #16
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000000 	.word	0x20000000
 8002824:	431bde83 	.word	0x431bde83
 8002828:	fffff8fe 	.word	0xfffff8fe
 800282c:	40012300 	.word	0x40012300
 8002830:	40012000 	.word	0x40012000
 8002834:	40012200 	.word	0x40012200

08002838 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002854:	d113      	bne.n	800287e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002864:	d10b      	bne.n	800287e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f043 0220 	orr.w	r2, r3, #32
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e063      	b.n	8002946 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800287e:	f7ff fe99 	bl	80025b4 <HAL_GetTick>
 8002882:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002884:	e021      	b.n	80028ca <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d01d      	beq.n	80028ca <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <HAL_ADC_PollForConversion+0x6c>
 8002894:	f7ff fe8e 	bl	80025b4 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d212      	bcs.n	80028ca <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d00b      	beq.n	80028ca <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f043 0204 	orr.w	r2, r3, #4
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e03d      	b.n	8002946 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d1d6      	bne.n	8002886 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0212 	mvn.w	r2, #18
 80028e0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d123      	bne.n	8002944 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002900:	2b00      	cmp	r3, #0
 8002902:	d11f      	bne.n	8002944 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800290e:	2b00      	cmp	r3, #0
 8002910:	d006      	beq.n	8002920 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800291c:	2b00      	cmp	r3, #0
 800291e:	d111      	bne.n	8002944 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d105      	bne.n	8002944 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	f043 0201 	orr.w	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x1c>
 8002980:	2302      	movs	r3, #2
 8002982:	e12a      	b.n	8002bda <HAL_ADC_ConfigChannel+0x272>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b09      	cmp	r3, #9
 8002992:	d93a      	bls.n	8002a0a <HAL_ADC_ConfigChannel+0xa2>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800299c:	d035      	beq.n	8002a0a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68d9      	ldr	r1, [r3, #12]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	3b1e      	subs	r3, #30
 80029b4:	2207      	movs	r2, #7
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43da      	mvns	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	400a      	ands	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a87      	ldr	r2, [pc, #540]	; (8002be8 <HAL_ADC_ConfigChannel+0x280>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10a      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68d9      	ldr	r1, [r3, #12]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	061a      	lsls	r2, r3, #24
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029e2:	e035      	b.n	8002a50 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68d9      	ldr	r1, [r3, #12]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	4618      	mov	r0, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4403      	add	r3, r0
 80029fc:	3b1e      	subs	r3, #30
 80029fe:	409a      	lsls	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a08:	e022      	b.n	8002a50 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6919      	ldr	r1, [r3, #16]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	4613      	mov	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4413      	add	r3, r2
 8002a1e:	2207      	movs	r2, #7
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43da      	mvns	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6919      	ldr	r1, [r3, #16]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	4618      	mov	r0, r3
 8002a40:	4603      	mov	r3, r0
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4403      	add	r3, r0
 8002a46:	409a      	lsls	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b06      	cmp	r3, #6
 8002a56:	d824      	bhi.n	8002aa2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	3b05      	subs	r3, #5
 8002a6a:	221f      	movs	r2, #31
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43da      	mvns	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	400a      	ands	r2, r1
 8002a78:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	3b05      	subs	r3, #5
 8002a94:	fa00 f203 	lsl.w	r2, r0, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	635a      	str	r2, [r3, #52]	; 0x34
 8002aa0:	e04c      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d824      	bhi.n	8002af4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	3b23      	subs	r3, #35	; 0x23
 8002abc:	221f      	movs	r2, #31
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	400a      	ands	r2, r1
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	4618      	mov	r0, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3b23      	subs	r3, #35	; 0x23
 8002ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
 8002af2:	e023      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	3b41      	subs	r3, #65	; 0x41
 8002b06:	221f      	movs	r2, #31
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43da      	mvns	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	400a      	ands	r2, r1
 8002b14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b41      	subs	r3, #65	; 0x41
 8002b30:	fa00 f203 	lsl.w	r2, r0, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <HAL_ADC_ConfigChannel+0x284>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10a      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1f4>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b4e:	d105      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002b50:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <HAL_ADC_ConfigChannel+0x288>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a26      	ldr	r2, [pc, #152]	; (8002bf0 <HAL_ADC_ConfigChannel+0x288>)
 8002b56:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b5a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a22      	ldr	r2, [pc, #136]	; (8002bec <HAL_ADC_ConfigChannel+0x284>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d109      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x212>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b12      	cmp	r3, #18
 8002b6c:	d105      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_ADC_ConfigChannel+0x288>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <HAL_ADC_ConfigChannel+0x288>)
 8002b74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b78:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <HAL_ADC_ConfigChannel+0x284>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d125      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x268>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <HAL_ADC_ConfigChannel+0x280>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <HAL_ADC_ConfigChannel+0x22e>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b11      	cmp	r3, #17
 8002b94:	d11c      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b96:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <HAL_ADC_ConfigChannel+0x288>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <HAL_ADC_ConfigChannel+0x288>)
 8002b9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ba0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <HAL_ADC_ConfigChannel+0x280>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d111      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <HAL_ADC_ConfigChannel+0x28c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a11      	ldr	r2, [pc, #68]	; (8002bf8 <HAL_ADC_ConfigChannel+0x290>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0c9a      	lsrs	r2, r3, #18
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bc2:	e002      	b.n	8002bca <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f9      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	10000012 	.word	0x10000012
 8002bec:	40012000 	.word	0x40012000
 8002bf0:	40012300 	.word	0x40012300
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	431bde83 	.word	0x431bde83

08002bfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002c04:	4b78      	ldr	r3, [pc, #480]	; (8002de8 <ADC_Init+0x1ec>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a77      	ldr	r2, [pc, #476]	; (8002de8 <ADC_Init+0x1ec>)
 8002c0a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c0e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002c10:	4b75      	ldr	r3, [pc, #468]	; (8002de8 <ADC_Init+0x1ec>)
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4973      	ldr	r1, [pc, #460]	; (8002de8 <ADC_Init+0x1ec>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	021a      	lsls	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6899      	ldr	r1, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	4a58      	ldr	r2, [pc, #352]	; (8002dec <ADC_Init+0x1f0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d022      	beq.n	8002cd6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6899      	ldr	r1, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	e00f      	b.n	8002cf6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ce4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cf4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0202 	bic.w	r2, r2, #2
 8002d04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6899      	ldr	r1, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	005a      	lsls	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01b      	beq.n	8002d5c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	035a      	lsls	r2, r3, #13
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	e007      	b.n	8002d6c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	051a      	lsls	r2, r3, #20
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6899      	ldr	r1, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dae:	025a      	lsls	r2, r3, #9
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6899      	ldr	r1, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	029a      	lsls	r2, r3, #10
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	609a      	str	r2, [r3, #8]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	40012300 	.word	0x40012300
 8002dec:	0f000001 	.word	0x0f000001

08002df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <__NVIC_SetPriorityGrouping+0x40>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1e:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <__NVIC_SetPriorityGrouping+0x40>)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	60d3      	str	r3, [r2, #12]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000ed00 	.word	0xe000ed00
 8002e34:	05fa0000 	.word	0x05fa0000

08002e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <__NVIC_GetPriorityGrouping+0x18>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	f003 0307 	and.w	r3, r3, #7
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db0b      	blt.n	8002e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	4907      	ldr	r1, [pc, #28]	; (8002e8c <__NVIC_EnableIRQ+0x38>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	2001      	movs	r0, #1
 8002e76:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000e100 	.word	0xe000e100

08002e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	db0a      	blt.n	8002eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	490c      	ldr	r1, [pc, #48]	; (8002edc <__NVIC_SetPriority+0x4c>)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	0112      	lsls	r2, r2, #4
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb8:	e00a      	b.n	8002ed0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	4908      	ldr	r1, [pc, #32]	; (8002ee0 <__NVIC_SetPriority+0x50>)
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	3b04      	subs	r3, #4
 8002ec8:	0112      	lsls	r2, r2, #4
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	440b      	add	r3, r1
 8002ece:	761a      	strb	r2, [r3, #24]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000e100 	.word	0xe000e100
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f1c3 0307 	rsb	r3, r3, #7
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	bf28      	it	cs
 8002f02:	2304      	movcs	r3, #4
 8002f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	2b06      	cmp	r3, #6
 8002f0c:	d902      	bls.n	8002f14 <NVIC_EncodePriority+0x30>
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3b03      	subs	r3, #3
 8002f12:	e000      	b.n	8002f16 <NVIC_EncodePriority+0x32>
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	401a      	ands	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	43d9      	mvns	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	4313      	orrs	r3, r2
         );
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3724      	adds	r7, #36	; 0x24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ff4c 	bl	8002df0 <__NVIC_SetPriorityGrouping>
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f72:	f7ff ff61 	bl	8002e38 <__NVIC_GetPriorityGrouping>
 8002f76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	6978      	ldr	r0, [r7, #20]
 8002f7e:	f7ff ffb1 	bl	8002ee4 <NVIC_EncodePriority>
 8002f82:	4602      	mov	r2, r0
 8002f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ff80 	bl	8002e90 <__NVIC_SetPriority>
}
 8002f90:	bf00      	nop
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff ff54 	bl	8002e54 <__NVIC_EnableIRQ>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	e175      	b.n	80032c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f040 8164 	bne.w	80032ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d00b      	beq.n	8003012 <HAL_GPIO_Init+0x5e>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d007      	beq.n	8003012 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003006:	2b11      	cmp	r3, #17
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b12      	cmp	r3, #18
 8003010:	d130      	bne.n	8003074 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	2203      	movs	r2, #3
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003048:	2201      	movs	r2, #1
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 0201 	and.w	r2, r3, #1
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x100>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b12      	cmp	r3, #18
 80030b2:	d123      	bne.n	80030fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	08da      	lsrs	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3208      	adds	r2, #8
 80030bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	220f      	movs	r2, #15
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	08da      	lsrs	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3208      	adds	r2, #8
 80030f6:	69b9      	ldr	r1, [r7, #24]
 80030f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0203 	and.w	r2, r3, #3
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80be 	beq.w	80032ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313e:	4b66      	ldr	r3, [pc, #408]	; (80032d8 <HAL_GPIO_Init+0x324>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	4a65      	ldr	r2, [pc, #404]	; (80032d8 <HAL_GPIO_Init+0x324>)
 8003144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003148:	6453      	str	r3, [r2, #68]	; 0x44
 800314a:	4b63      	ldr	r3, [pc, #396]	; (80032d8 <HAL_GPIO_Init+0x324>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003156:	4a61      	ldr	r2, [pc, #388]	; (80032dc <HAL_GPIO_Init+0x328>)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	3302      	adds	r3, #2
 800315e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <HAL_GPIO_Init+0x32c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d037      	beq.n	80031f2 <HAL_GPIO_Init+0x23e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a57      	ldr	r2, [pc, #348]	; (80032e4 <HAL_GPIO_Init+0x330>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <HAL_GPIO_Init+0x23a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a56      	ldr	r2, [pc, #344]	; (80032e8 <HAL_GPIO_Init+0x334>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d02b      	beq.n	80031ea <HAL_GPIO_Init+0x236>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a55      	ldr	r2, [pc, #340]	; (80032ec <HAL_GPIO_Init+0x338>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d025      	beq.n	80031e6 <HAL_GPIO_Init+0x232>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a54      	ldr	r2, [pc, #336]	; (80032f0 <HAL_GPIO_Init+0x33c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01f      	beq.n	80031e2 <HAL_GPIO_Init+0x22e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a53      	ldr	r2, [pc, #332]	; (80032f4 <HAL_GPIO_Init+0x340>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d019      	beq.n	80031de <HAL_GPIO_Init+0x22a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a52      	ldr	r2, [pc, #328]	; (80032f8 <HAL_GPIO_Init+0x344>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_GPIO_Init+0x226>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a51      	ldr	r2, [pc, #324]	; (80032fc <HAL_GPIO_Init+0x348>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00d      	beq.n	80031d6 <HAL_GPIO_Init+0x222>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a50      	ldr	r2, [pc, #320]	; (8003300 <HAL_GPIO_Init+0x34c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <HAL_GPIO_Init+0x21e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4f      	ldr	r2, [pc, #316]	; (8003304 <HAL_GPIO_Init+0x350>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_GPIO_Init+0x21a>
 80031ca:	2309      	movs	r3, #9
 80031cc:	e012      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031ce:	230a      	movs	r3, #10
 80031d0:	e010      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031d2:	2308      	movs	r3, #8
 80031d4:	e00e      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031d6:	2307      	movs	r3, #7
 80031d8:	e00c      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031da:	2306      	movs	r3, #6
 80031dc:	e00a      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031de:	2305      	movs	r3, #5
 80031e0:	e008      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031e2:	2304      	movs	r3, #4
 80031e4:	e006      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031e6:	2303      	movs	r3, #3
 80031e8:	e004      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e002      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_GPIO_Init+0x240>
 80031f2:	2300      	movs	r3, #0
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f002 0203 	and.w	r2, r2, #3
 80031fa:	0092      	lsls	r2, r2, #2
 80031fc:	4093      	lsls	r3, r2
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003204:	4935      	ldr	r1, [pc, #212]	; (80032dc <HAL_GPIO_Init+0x328>)
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	3302      	adds	r3, #2
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003212:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <HAL_GPIO_Init+0x354>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003236:	4a34      	ldr	r2, [pc, #208]	; (8003308 <HAL_GPIO_Init+0x354>)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <HAL_GPIO_Init+0x354>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003260:	4a29      	ldr	r2, [pc, #164]	; (8003308 <HAL_GPIO_Init+0x354>)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003266:	4b28      	ldr	r3, [pc, #160]	; (8003308 <HAL_GPIO_Init+0x354>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800328a:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <HAL_GPIO_Init+0x354>)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_GPIO_Init+0x354>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032b4:	4a14      	ldr	r2, [pc, #80]	; (8003308 <HAL_GPIO_Init+0x354>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3301      	adds	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b0f      	cmp	r3, #15
 80032c4:	f67f ae86 	bls.w	8002fd4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	3724      	adds	r7, #36	; 0x24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40013800 	.word	0x40013800
 80032e0:	40020000 	.word	0x40020000
 80032e4:	40020400 	.word	0x40020400
 80032e8:	40020800 	.word	0x40020800
 80032ec:	40020c00 	.word	0x40020c00
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40021400 	.word	0x40021400
 80032f8:	40021800 	.word	0x40021800
 80032fc:	40021c00 	.word	0x40021c00
 8003300:	40022000 	.word	0x40022000
 8003304:	40022400 	.word	0x40022400
 8003308:	40013c00 	.word	0x40013c00

0800330c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	807b      	strh	r3, [r7, #2]
 8003318:	4613      	mov	r3, r2
 800331a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800331c:	787b      	ldrb	r3, [r7, #1]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003328:	e003      	b.n	8003332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800332a:	887b      	ldrh	r3, [r7, #2]
 800332c:	041a      	lsls	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	619a      	str	r2, [r3, #24]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800333e:	b480      	push	{r7}
 8003340:	b085      	sub	sp, #20
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003350:	887a      	ldrh	r2, [r7, #2]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4013      	ands	r3, r2
 8003356:	041a      	lsls	r2, r3, #16
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	43d9      	mvns	r1, r3
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	400b      	ands	r3, r1
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	619a      	str	r2, [r3, #24]
}
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e07f      	b.n	8003486 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fe fa5c 	bl	8001858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d107      	bne.n	80033ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	e006      	b.n	80033fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d104      	bne.n	800340e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800340c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6859      	ldr	r1, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_I2C_Init+0x11c>)
 800341a:	430b      	orrs	r3, r1
 800341c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800342c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	ea42 0103 	orr.w	r1, r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	021a      	lsls	r2, r3, #8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69d9      	ldr	r1, [r3, #28]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1a      	ldr	r2, [r3, #32]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	02008000 	.word	0x02008000

08003494 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	461a      	mov	r2, r3
 80034a0:	460b      	mov	r3, r1
 80034a2:	817b      	strh	r3, [r7, #10]
 80034a4:	4613      	mov	r3, r2
 80034a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	f040 80da 	bne.w	800366a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_I2C_Master_Transmit+0x30>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e0d3      	b.n	800366c <HAL_I2C_Master_Transmit+0x1d8>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034cc:	f7ff f872 	bl	80025b4 <HAL_GetTick>
 80034d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2319      	movs	r3, #25
 80034d8:	2201      	movs	r2, #1
 80034da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f9e6 	bl	80038b0 <I2C_WaitOnFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e0be      	b.n	800366c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2221      	movs	r2, #33	; 0x21
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2210      	movs	r2, #16
 80034fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	893a      	ldrh	r2, [r7, #8]
 800350e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	2bff      	cmp	r3, #255	; 0xff
 800351e:	d90e      	bls.n	800353e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	22ff      	movs	r2, #255	; 0xff
 8003524:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352a:	b2da      	uxtb	r2, r3
 800352c:	8979      	ldrh	r1, [r7, #10]
 800352e:	4b51      	ldr	r3, [pc, #324]	; (8003674 <HAL_I2C_Master_Transmit+0x1e0>)
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 fb48 	bl	8003bcc <I2C_TransferConfig>
 800353c:	e06c      	b.n	8003618 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354c:	b2da      	uxtb	r2, r3
 800354e:	8979      	ldrh	r1, [r7, #10]
 8003550:	4b48      	ldr	r3, [pc, #288]	; (8003674 <HAL_I2C_Master_Transmit+0x1e0>)
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 fb37 	bl	8003bcc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800355e:	e05b      	b.n	8003618 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	6a39      	ldr	r1, [r7, #32]
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f9e3 	bl	8003930 <I2C_WaitOnTXISFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e07b      	b.n	800366c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d034      	beq.n	8003618 <HAL_I2C_Master_Transmit+0x184>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d130      	bne.n	8003618 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	2200      	movs	r2, #0
 80035be:	2180      	movs	r1, #128	; 0x80
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f975 	bl	80038b0 <I2C_WaitOnFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e04d      	b.n	800366c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2bff      	cmp	r3, #255	; 0xff
 80035d8:	d90e      	bls.n	80035f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	22ff      	movs	r2, #255	; 0xff
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	8979      	ldrh	r1, [r7, #10]
 80035e8:	2300      	movs	r3, #0
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 faeb 	bl	8003bcc <I2C_TransferConfig>
 80035f6:	e00f      	b.n	8003618 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003606:	b2da      	uxtb	r2, r3
 8003608:	8979      	ldrh	r1, [r7, #10]
 800360a:	2300      	movs	r3, #0
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fada 	bl	8003bcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d19e      	bne.n	8003560 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	6a39      	ldr	r1, [r7, #32]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f9c2 	bl	80039b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e01a      	b.n	800366c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2220      	movs	r2, #32
 800363c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_I2C_Master_Transmit+0x1e4>)
 800364a:	400b      	ands	r3, r1
 800364c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e000      	b.n	800366c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800366a:	2302      	movs	r3, #2
  }
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	80002000 	.word	0x80002000
 8003678:	fe00e800 	.word	0xfe00e800

0800367c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	461a      	mov	r2, r3
 8003688:	460b      	mov	r3, r1
 800368a:	817b      	strh	r3, [r7, #10]
 800368c:	4613      	mov	r3, r2
 800368e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b20      	cmp	r3, #32
 800369a:	f040 80db 	bne.w	8003854 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_I2C_Master_Receive+0x30>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e0d4      	b.n	8003856 <HAL_I2C_Master_Receive+0x1da>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036b4:	f7fe ff7e 	bl	80025b4 <HAL_GetTick>
 80036b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	2319      	movs	r3, #25
 80036c0:	2201      	movs	r2, #1
 80036c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f8f2 	bl	80038b0 <I2C_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0bf      	b.n	8003856 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2222      	movs	r2, #34	; 0x22
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2210      	movs	r2, #16
 80036e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	893a      	ldrh	r2, [r7, #8]
 80036f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	2bff      	cmp	r3, #255	; 0xff
 8003706:	d90e      	bls.n	8003726 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	22ff      	movs	r2, #255	; 0xff
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003712:	b2da      	uxtb	r2, r3
 8003714:	8979      	ldrh	r1, [r7, #10]
 8003716:	4b52      	ldr	r3, [pc, #328]	; (8003860 <HAL_I2C_Master_Receive+0x1e4>)
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fa54 	bl	8003bcc <I2C_TransferConfig>
 8003724:	e06d      	b.n	8003802 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003734:	b2da      	uxtb	r2, r3
 8003736:	8979      	ldrh	r1, [r7, #10]
 8003738:	4b49      	ldr	r3, [pc, #292]	; (8003860 <HAL_I2C_Master_Receive+0x1e4>)
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 fa43 	bl	8003bcc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003746:	e05c      	b.n	8003802 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	6a39      	ldr	r1, [r7, #32]
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f96b 	bl	8003a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e07c      	b.n	8003856 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d034      	beq.n	8003802 <HAL_I2C_Master_Receive+0x186>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	2b00      	cmp	r3, #0
 800379e:	d130      	bne.n	8003802 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	2200      	movs	r2, #0
 80037a8:	2180      	movs	r1, #128	; 0x80
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f880 	bl	80038b0 <I2C_WaitOnFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e04d      	b.n	8003856 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2bff      	cmp	r3, #255	; 0xff
 80037c2:	d90e      	bls.n	80037e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	22ff      	movs	r2, #255	; 0xff
 80037c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	8979      	ldrh	r1, [r7, #10]
 80037d2:	2300      	movs	r3, #0
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f9f6 	bl	8003bcc <I2C_TransferConfig>
 80037e0:	e00f      	b.n	8003802 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	8979      	ldrh	r1, [r7, #10]
 80037f4:	2300      	movs	r3, #0
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f9e5 	bl	8003bcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d19d      	bne.n	8003748 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	6a39      	ldr	r1, [r7, #32]
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 f8cd 	bl	80039b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e01a      	b.n	8003856 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2220      	movs	r2, #32
 8003826:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6859      	ldr	r1, [r3, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <HAL_I2C_Master_Receive+0x1e8>)
 8003834:	400b      	ands	r3, r1
 8003836:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	e000      	b.n	8003856 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	80002400 	.word	0x80002400
 8003864:	fe00e800 	.word	0xfe00e800

08003868 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b02      	cmp	r3, #2
 800387c:	d103      	bne.n	8003886 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2200      	movs	r2, #0
 8003884:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d007      	beq.n	80038a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	619a      	str	r2, [r3, #24]
  }
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	4613      	mov	r3, r2
 80038be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c0:	e022      	b.n	8003908 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d01e      	beq.n	8003908 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ca:	f7fe fe73 	bl	80025b4 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d113      	bne.n	8003908 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e00f      	b.n	8003928 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	4013      	ands	r3, r2
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	429a      	cmp	r2, r3
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	429a      	cmp	r2, r3
 8003924:	d0cd      	beq.n	80038c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800393c:	e02c      	b.n	8003998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f8dc 	bl	8003b00 <I2C_IsAcknowledgeFailed>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e02a      	b.n	80039a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d01e      	beq.n	8003998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395a:	f7fe fe2b 	bl	80025b4 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	429a      	cmp	r2, r3
 8003968:	d302      	bcc.n	8003970 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d113      	bne.n	8003998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003974:	f043 0220 	orr.w	r2, r3, #32
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e007      	b.n	80039a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d1cb      	bne.n	800393e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039bc:	e028      	b.n	8003a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f89c 	bl	8003b00 <I2C_IsAcknowledgeFailed>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e026      	b.n	8003a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d2:	f7fe fdef 	bl	80025b4 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d113      	bne.n	8003a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	f043 0220 	orr.w	r2, r3, #32
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e007      	b.n	8003a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d1cf      	bne.n	80039be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a34:	e055      	b.n	8003ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f860 	bl	8003b00 <I2C_IsAcknowledgeFailed>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e053      	b.n	8003af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d129      	bne.n	8003aac <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d105      	bne.n	8003a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e03f      	b.n	8003af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2220      	movs	r2, #32
 8003a78:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003a86:	400b      	ands	r3, r1
 8003a88:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e022      	b.n	8003af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aac:	f7fe fd82 	bl	80025b4 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d302      	bcc.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10f      	bne.n	8003ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	f043 0220 	orr.w	r2, r3, #32
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e007      	b.n	8003af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d1a2      	bne.n	8003a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	fe00e800 	.word	0xfe00e800

08003b00 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d151      	bne.n	8003bbe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b1a:	e022      	b.n	8003b62 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b22:	d01e      	beq.n	8003b62 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b24:	f7fe fd46 	bl	80025b4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d302      	bcc.n	8003b3a <I2C_IsAcknowledgeFailed+0x3a>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d113      	bne.n	8003b62 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e02e      	b.n	8003bc0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d1d5      	bne.n	8003b1c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2210      	movs	r2, #16
 8003b76:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f7ff fe71 	bl	8003868 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003b92:	400b      	ands	r3, r1
 8003b94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f043 0204 	orr.w	r2, r3, #4
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	fe00e800 	.word	0xfe00e800

08003bcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	607b      	str	r3, [r7, #4]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	817b      	strh	r3, [r7, #10]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	0d5b      	lsrs	r3, r3, #21
 8003be8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bec:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <I2C_TransferConfig+0x58>)
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	ea02 0103 	and.w	r1, r2, r3
 8003bf6:	897b      	ldrh	r3, [r7, #10]
 8003bf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bfc:	7a7b      	ldrb	r3, [r7, #9]
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	03ff63ff 	.word	0x03ff63ff

08003c28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d138      	bne.n	8003cb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e032      	b.n	8003cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	; 0x24
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0201 	bic.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e000      	b.n	8003cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d139      	bne.n	8003d48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e033      	b.n	8003d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2224      	movs	r2, #36	; 0x24
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0201 	bic.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e000      	b.n	8003d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
  }
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d62:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	4a22      	ldr	r2, [pc, #136]	; (8003df0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6e:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d86:	f7fe fc15 	bl	80025b4 <HAL_GetTick>
 8003d8a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d8c:	e009      	b.n	8003da2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d8e:	f7fe fc11 	bl	80025b4 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d9c:	d901      	bls.n	8003da2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e022      	b.n	8003de8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003da2:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dae:	d1ee      	bne.n	8003d8e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003db0:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0f      	ldr	r2, [pc, #60]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dbc:	f7fe fbfa 	bl	80025b4 <HAL_GetTick>
 8003dc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dc2:	e009      	b.n	8003dd8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dc4:	f7fe fbf6 	bl	80025b4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd2:	d901      	bls.n	8003dd8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e007      	b.n	8003de8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dd8:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003de4:	d1ee      	bne.n	8003dc4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40007000 	.word	0x40007000

08003df8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e00:	2300      	movs	r3, #0
 8003e02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e291      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8087 	beq.w	8003f2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e1c:	4b96      	ldr	r3, [pc, #600]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d00c      	beq.n	8003e42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e28:	4b93      	ldr	r3, [pc, #588]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d112      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62>
 8003e34:	4b90      	ldr	r3, [pc, #576]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e40:	d10b      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e42:	4b8d      	ldr	r3, [pc, #564]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d06c      	beq.n	8003f28 <HAL_RCC_OscConfig+0x130>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d168      	bne.n	8003f28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e26b      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x7a>
 8003e64:	4b84      	ldr	r3, [pc, #528]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a83      	ldr	r2, [pc, #524]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	e02e      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd8>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x9c>
 8003e7a:	4b7f      	ldr	r3, [pc, #508]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a7e      	ldr	r2, [pc, #504]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b7c      	ldr	r3, [pc, #496]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a7b      	ldr	r2, [pc, #492]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e01d      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xc0>
 8003e9e:	4b76      	ldr	r3, [pc, #472]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a75      	ldr	r2, [pc, #468]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	4b73      	ldr	r3, [pc, #460]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a72      	ldr	r2, [pc, #456]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd8>
 8003eb8:	4b6f      	ldr	r3, [pc, #444]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a6e      	ldr	r2, [pc, #440]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	4b6c      	ldr	r3, [pc, #432]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a6b      	ldr	r2, [pc, #428]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d013      	beq.n	8003f00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fe fb6c 	bl	80025b4 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee0:	f7fe fb68 	bl	80025b4 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e21f      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef2:	4b61      	ldr	r3, [pc, #388]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xe8>
 8003efe:	e014      	b.n	8003f2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe fb58 	bl	80025b4 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f08:	f7fe fb54 	bl	80025b4 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	; 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e20b      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1a:	4b57      	ldr	r3, [pc, #348]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x110>
 8003f26:	e000      	b.n	8003f2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d069      	beq.n	800400a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f36:	4b50      	ldr	r3, [pc, #320]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f42:	4b4d      	ldr	r3, [pc, #308]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d11c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x190>
 8003f4e:	4b4a      	ldr	r3, [pc, #296]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d116      	bne.n	8003f88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <HAL_RCC_OscConfig+0x17a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e1df      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f72:	4b41      	ldr	r3, [pc, #260]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	493d      	ldr	r1, [pc, #244]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f86:	e040      	b.n	800400a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d023      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f90:	4b39      	ldr	r3, [pc, #228]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a38      	ldr	r2, [pc, #224]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fe fb0a 	bl	80025b4 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fe fb06 	bl	80025b4 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e1bd      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb6:	4b30      	ldr	r3, [pc, #192]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4929      	ldr	r1, [pc, #164]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]
 8003fd6:	e018      	b.n	800400a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd8:	4b27      	ldr	r3, [pc, #156]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a26      	ldr	r2, [pc, #152]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fe fae6 	bl	80025b4 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fec:	f7fe fae2 	bl	80025b4 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e199      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d038      	beq.n	8004088 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d019      	beq.n	8004052 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800401e:	4b16      	ldr	r3, [pc, #88]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8004020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004022:	4a15      	ldr	r2, [pc, #84]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402a:	f7fe fac3 	bl	80025b4 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004032:	f7fe fabf 	bl	80025b4 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e176      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8004046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x23a>
 8004050:	e01a      	b.n	8004088 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8004054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004056:	4a08      	ldr	r2, [pc, #32]	; (8004078 <HAL_RCC_OscConfig+0x280>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405e:	f7fe faa9 	bl	80025b4 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004064:	e00a      	b.n	800407c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004066:	f7fe faa5 	bl	80025b4 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d903      	bls.n	800407c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e15c      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
 8004078:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	4b91      	ldr	r3, [pc, #580]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 800407e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ee      	bne.n	8004066 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80a4 	beq.w	80041de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004096:	4b8b      	ldr	r3, [pc, #556]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10d      	bne.n	80040be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a2:	4b88      	ldr	r3, [pc, #544]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	4a87      	ldr	r2, [pc, #540]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 80040a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ac:	6413      	str	r3, [r2, #64]	; 0x40
 80040ae:	4b85      	ldr	r3, [pc, #532]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040be:	4b82      	ldr	r3, [pc, #520]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d118      	bne.n	80040fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80040ca:	4b7f      	ldr	r3, [pc, #508]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a7e      	ldr	r2, [pc, #504]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 80040d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d6:	f7fe fa6d 	bl	80025b4 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040de:	f7fe fa69 	bl	80025b4 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b64      	cmp	r3, #100	; 0x64
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e120      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f0:	4b75      	ldr	r3, [pc, #468]	; (80042c8 <HAL_RCC_OscConfig+0x4d0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d106      	bne.n	8004112 <HAL_RCC_OscConfig+0x31a>
 8004104:	4b6f      	ldr	r3, [pc, #444]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	4a6e      	ldr	r2, [pc, #440]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6713      	str	r3, [r2, #112]	; 0x70
 8004110:	e02d      	b.n	800416e <HAL_RCC_OscConfig+0x376>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10c      	bne.n	8004134 <HAL_RCC_OscConfig+0x33c>
 800411a:	4b6a      	ldr	r3, [pc, #424]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411e:	4a69      	ldr	r2, [pc, #420]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	6713      	str	r3, [r2, #112]	; 0x70
 8004126:	4b67      	ldr	r3, [pc, #412]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	4a66      	ldr	r2, [pc, #408]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 800412c:	f023 0304 	bic.w	r3, r3, #4
 8004130:	6713      	str	r3, [r2, #112]	; 0x70
 8004132:	e01c      	b.n	800416e <HAL_RCC_OscConfig+0x376>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b05      	cmp	r3, #5
 800413a:	d10c      	bne.n	8004156 <HAL_RCC_OscConfig+0x35e>
 800413c:	4b61      	ldr	r3, [pc, #388]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004140:	4a60      	ldr	r2, [pc, #384]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004142:	f043 0304 	orr.w	r3, r3, #4
 8004146:	6713      	str	r3, [r2, #112]	; 0x70
 8004148:	4b5e      	ldr	r3, [pc, #376]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	4a5d      	ldr	r2, [pc, #372]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	6713      	str	r3, [r2, #112]	; 0x70
 8004154:	e00b      	b.n	800416e <HAL_RCC_OscConfig+0x376>
 8004156:	4b5b      	ldr	r3, [pc, #364]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	4a5a      	ldr	r2, [pc, #360]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	6713      	str	r3, [r2, #112]	; 0x70
 8004162:	4b58      	ldr	r3, [pc, #352]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	4a57      	ldr	r2, [pc, #348]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004168:	f023 0304 	bic.w	r3, r3, #4
 800416c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d015      	beq.n	80041a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004176:	f7fe fa1d 	bl	80025b4 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417c:	e00a      	b.n	8004194 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417e:	f7fe fa19 	bl	80025b4 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	f241 3288 	movw	r2, #5000	; 0x1388
 800418c:	4293      	cmp	r3, r2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e0ce      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004194:	4b4b      	ldr	r3, [pc, #300]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ee      	beq.n	800417e <HAL_RCC_OscConfig+0x386>
 80041a0:	e014      	b.n	80041cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a2:	f7fe fa07 	bl	80025b4 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a8:	e00a      	b.n	80041c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041aa:	f7fe fa03 	bl	80025b4 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e0b8      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c0:	4b40      	ldr	r3, [pc, #256]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1ee      	bne.n	80041aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d105      	bne.n	80041de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d2:	4b3c      	ldr	r3, [pc, #240]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	4a3b      	ldr	r2, [pc, #236]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 80041d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80a4 	beq.w	8004330 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041e8:	4b36      	ldr	r3, [pc, #216]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 030c 	and.w	r3, r3, #12
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d06b      	beq.n	80042cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d149      	bne.n	8004290 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fc:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a30      	ldr	r2, [pc, #192]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fe f9d4 	bl	80025b4 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fe f9d0 	bl	80025b4 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e087      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	3b01      	subs	r3, #1
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	4313      	orrs	r3, r2
 8004254:	4a1b      	ldr	r2, [pc, #108]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004256:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800425a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe f9a4 	bl	80025b4 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7fe f9a0 	bl	80025b4 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e057      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004282:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x478>
 800428e:	e04f      	b.n	8004330 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a0b      	ldr	r2, [pc, #44]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 8004296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800429a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fe f98a 	bl	80025b4 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a4:	f7fe f986 	bl	80025b4 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e03d      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b6:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <HAL_RCC_OscConfig+0x4cc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4ac>
 80042c2:	e035      	b.n	8004330 <HAL_RCC_OscConfig+0x538>
 80042c4:	40023800 	.word	0x40023800
 80042c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <HAL_RCC_OscConfig+0x544>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d028      	beq.n	800432c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d121      	bne.n	800432c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d11a      	bne.n	800432c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042fc:	4013      	ands	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004302:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004304:	4293      	cmp	r3, r2
 8004306:	d111      	bne.n	800432c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	3b01      	subs	r3, #1
 8004316:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d107      	bne.n	800432c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40023800 	.word	0x40023800

08004340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0d0      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004358:	4b6a      	ldr	r3, [pc, #424]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d910      	bls.n	8004388 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b67      	ldr	r3, [pc, #412]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f023 020f 	bic.w	r2, r3, #15
 800436e:	4965      	ldr	r1, [pc, #404]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	4313      	orrs	r3, r2
 8004374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004376:	4b63      	ldr	r3, [pc, #396]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d001      	beq.n	8004388 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0b8      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d020      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043a0:	4b59      	ldr	r3, [pc, #356]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4a58      	ldr	r2, [pc, #352]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80043a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b8:	4b53      	ldr	r3, [pc, #332]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4a52      	ldr	r2, [pc, #328]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80043be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c4:	4b50      	ldr	r3, [pc, #320]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	494d      	ldr	r1, [pc, #308]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d040      	beq.n	8004464 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d107      	bne.n	80043fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	4b47      	ldr	r3, [pc, #284]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d115      	bne.n	8004422 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e07f      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d107      	bne.n	8004412 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004402:	4b41      	ldr	r3, [pc, #260]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e073      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004412:	4b3d      	ldr	r3, [pc, #244]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e06b      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004422:	4b39      	ldr	r3, [pc, #228]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f023 0203 	bic.w	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4936      	ldr	r1, [pc, #216]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 8004430:	4313      	orrs	r3, r2
 8004432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004434:	f7fe f8be 	bl	80025b4 <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443a:	e00a      	b.n	8004452 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800443c:	f7fe f8ba 	bl	80025b4 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e053      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004452:	4b2d      	ldr	r3, [pc, #180]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 020c 	and.w	r2, r3, #12
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	429a      	cmp	r2, r3
 8004462:	d1eb      	bne.n	800443c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004464:	4b27      	ldr	r3, [pc, #156]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d210      	bcs.n	8004494 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	4b24      	ldr	r3, [pc, #144]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 020f 	bic.w	r2, r3, #15
 800447a:	4922      	ldr	r1, [pc, #136]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	4313      	orrs	r3, r2
 8004480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004482:	4b20      	ldr	r3, [pc, #128]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d001      	beq.n	8004494 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e032      	b.n	80044fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044a0:	4b19      	ldr	r3, [pc, #100]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4916      	ldr	r1, [pc, #88]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d009      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044be:	4b12      	ldr	r3, [pc, #72]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	490e      	ldr	r1, [pc, #56]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044d2:	f000 f821 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80044d6:	4602      	mov	r2, r0
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	490a      	ldr	r1, [pc, #40]	; (800450c <HAL_RCC_ClockConfig+0x1cc>)
 80044e4:	5ccb      	ldrb	r3, [r1, r3]
 80044e6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <HAL_RCC_ClockConfig+0x1d0>)
 80044ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <HAL_RCC_ClockConfig+0x1d4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fd f9f4 	bl	80018e0 <HAL_InitTick>

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40023c00 	.word	0x40023c00
 8004508:	40023800 	.word	0x40023800
 800450c:	08017244 	.word	0x08017244
 8004510:	20000000 	.word	0x20000000
 8004514:	20000004 	.word	0x20000004

08004518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004518:	b5b0      	push	{r4, r5, r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800451e:	2100      	movs	r1, #0
 8004520:	6079      	str	r1, [r7, #4]
 8004522:	2100      	movs	r1, #0
 8004524:	60f9      	str	r1, [r7, #12]
 8004526:	2100      	movs	r1, #0
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800452a:	2100      	movs	r1, #0
 800452c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800452e:	4952      	ldr	r1, [pc, #328]	; (8004678 <HAL_RCC_GetSysClockFreq+0x160>)
 8004530:	6889      	ldr	r1, [r1, #8]
 8004532:	f001 010c 	and.w	r1, r1, #12
 8004536:	2908      	cmp	r1, #8
 8004538:	d00d      	beq.n	8004556 <HAL_RCC_GetSysClockFreq+0x3e>
 800453a:	2908      	cmp	r1, #8
 800453c:	f200 8094 	bhi.w	8004668 <HAL_RCC_GetSysClockFreq+0x150>
 8004540:	2900      	cmp	r1, #0
 8004542:	d002      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0x32>
 8004544:	2904      	cmp	r1, #4
 8004546:	d003      	beq.n	8004550 <HAL_RCC_GetSysClockFreq+0x38>
 8004548:	e08e      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800454a:	4b4c      	ldr	r3, [pc, #304]	; (800467c <HAL_RCC_GetSysClockFreq+0x164>)
 800454c:	60bb      	str	r3, [r7, #8]
      break;
 800454e:	e08e      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004550:	4b4b      	ldr	r3, [pc, #300]	; (8004680 <HAL_RCC_GetSysClockFreq+0x168>)
 8004552:	60bb      	str	r3, [r7, #8]
      break;
 8004554:	e08b      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004556:	4948      	ldr	r1, [pc, #288]	; (8004678 <HAL_RCC_GetSysClockFreq+0x160>)
 8004558:	6849      	ldr	r1, [r1, #4]
 800455a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800455e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004560:	4945      	ldr	r1, [pc, #276]	; (8004678 <HAL_RCC_GetSysClockFreq+0x160>)
 8004562:	6849      	ldr	r1, [r1, #4]
 8004564:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004568:	2900      	cmp	r1, #0
 800456a:	d024      	beq.n	80045b6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800456c:	4942      	ldr	r1, [pc, #264]	; (8004678 <HAL_RCC_GetSysClockFreq+0x160>)
 800456e:	6849      	ldr	r1, [r1, #4]
 8004570:	0989      	lsrs	r1, r1, #6
 8004572:	4608      	mov	r0, r1
 8004574:	f04f 0100 	mov.w	r1, #0
 8004578:	f240 14ff 	movw	r4, #511	; 0x1ff
 800457c:	f04f 0500 	mov.w	r5, #0
 8004580:	ea00 0204 	and.w	r2, r0, r4
 8004584:	ea01 0305 	and.w	r3, r1, r5
 8004588:	493d      	ldr	r1, [pc, #244]	; (8004680 <HAL_RCC_GetSysClockFreq+0x168>)
 800458a:	fb01 f003 	mul.w	r0, r1, r3
 800458e:	2100      	movs	r1, #0
 8004590:	fb01 f102 	mul.w	r1, r1, r2
 8004594:	1844      	adds	r4, r0, r1
 8004596:	493a      	ldr	r1, [pc, #232]	; (8004680 <HAL_RCC_GetSysClockFreq+0x168>)
 8004598:	fba2 0101 	umull	r0, r1, r2, r1
 800459c:	1863      	adds	r3, r4, r1
 800459e:	4619      	mov	r1, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	461a      	mov	r2, r3
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	f7fc fad0 	bl	8000b4c <__aeabi_uldivmod>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4613      	mov	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	e04a      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b6:	4b30      	ldr	r3, [pc, #192]	; (8004678 <HAL_RCC_GetSysClockFreq+0x160>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	099b      	lsrs	r3, r3, #6
 80045bc:	461a      	mov	r2, r3
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045c6:	f04f 0100 	mov.w	r1, #0
 80045ca:	ea02 0400 	and.w	r4, r2, r0
 80045ce:	ea03 0501 	and.w	r5, r3, r1
 80045d2:	4620      	mov	r0, r4
 80045d4:	4629      	mov	r1, r5
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	014b      	lsls	r3, r1, #5
 80045e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045e4:	0142      	lsls	r2, r0, #5
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	1b00      	subs	r0, r0, r4
 80045ec:	eb61 0105 	sbc.w	r1, r1, r5
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	018b      	lsls	r3, r1, #6
 80045fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045fe:	0182      	lsls	r2, r0, #6
 8004600:	1a12      	subs	r2, r2, r0
 8004602:	eb63 0301 	sbc.w	r3, r3, r1
 8004606:	f04f 0000 	mov.w	r0, #0
 800460a:	f04f 0100 	mov.w	r1, #0
 800460e:	00d9      	lsls	r1, r3, #3
 8004610:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004614:	00d0      	lsls	r0, r2, #3
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	1912      	adds	r2, r2, r4
 800461c:	eb45 0303 	adc.w	r3, r5, r3
 8004620:	f04f 0000 	mov.w	r0, #0
 8004624:	f04f 0100 	mov.w	r1, #0
 8004628:	0299      	lsls	r1, r3, #10
 800462a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800462e:	0290      	lsls	r0, r2, #10
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4610      	mov	r0, r2
 8004636:	4619      	mov	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	461a      	mov	r2, r3
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	f7fc fa84 	bl	8000b4c <__aeabi_uldivmod>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4613      	mov	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <HAL_RCC_GetSysClockFreq+0x160>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	3301      	adds	r3, #1
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	60bb      	str	r3, [r7, #8]
      break;
 8004666:	e002      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <HAL_RCC_GetSysClockFreq+0x164>)
 800466a:	60bb      	str	r3, [r7, #8]
      break;
 800466c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800466e:	68bb      	ldr	r3, [r7, #8]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bdb0      	pop	{r4, r5, r7, pc}
 8004678:	40023800 	.word	0x40023800
 800467c:	00f42400 	.word	0x00f42400
 8004680:	017d7840 	.word	0x017d7840

08004684 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004688:	4b03      	ldr	r3, [pc, #12]	; (8004698 <HAL_RCC_GetHCLKFreq+0x14>)
 800468a:	681b      	ldr	r3, [r3, #0]
}
 800468c:	4618      	mov	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000000 	.word	0x20000000

0800469c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046a0:	f7ff fff0 	bl	8004684 <HAL_RCC_GetHCLKFreq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	0a9b      	lsrs	r3, r3, #10
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	4903      	ldr	r1, [pc, #12]	; (80046c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b2:	5ccb      	ldrb	r3, [r1, r3]
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40023800 	.word	0x40023800
 80046c0:	08017254 	.word	0x08017254

080046c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	220f      	movs	r2, #15
 80046d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046d4:	4b12      	ldr	r3, [pc, #72]	; (8004720 <HAL_RCC_GetClockConfig+0x5c>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0203 	and.w	r2, r3, #3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046e0:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <HAL_RCC_GetClockConfig+0x5c>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <HAL_RCC_GetClockConfig+0x5c>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <HAL_RCC_GetClockConfig+0x5c>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	08db      	lsrs	r3, r3, #3
 80046fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004706:	4b07      	ldr	r3, [pc, #28]	; (8004724 <HAL_RCC_GetClockConfig+0x60>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 020f 	and.w	r2, r3, #15
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	601a      	str	r2, [r3, #0]
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40023800 	.word	0x40023800
 8004724:	40023c00 	.word	0x40023c00

08004728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d012      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004750:	4b69      	ldr	r3, [pc, #420]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4a68      	ldr	r2, [pc, #416]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004756:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800475a:	6093      	str	r3, [r2, #8]
 800475c:	4b66      	ldr	r3, [pc, #408]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004764:	4964      	ldr	r1, [pc, #400]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004772:	2301      	movs	r3, #1
 8004774:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d017      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004782:	4b5d      	ldr	r3, [pc, #372]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004788:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004790:	4959      	ldr	r1, [pc, #356]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a0:	d101      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80047a2:	2301      	movs	r3, #1
 80047a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80047ae:	2301      	movs	r3, #1
 80047b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d017      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047be:	4b4e      	ldr	r3, [pc, #312]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	494a      	ldr	r1, [pc, #296]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047dc:	d101      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80047de:	2301      	movs	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80047ea:	2301      	movs	r3, #1
 80047ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80047fa:	2301      	movs	r3, #1
 80047fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 808b 	beq.w	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800480c:	4b3a      	ldr	r3, [pc, #232]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	4a39      	ldr	r2, [pc, #228]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004816:	6413      	str	r3, [r2, #64]	; 0x40
 8004818:	4b37      	ldr	r3, [pc, #220]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004824:	4b35      	ldr	r3, [pc, #212]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a34      	ldr	r2, [pc, #208]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800482a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004830:	f7fd fec0 	bl	80025b4 <HAL_GetTick>
 8004834:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004836:	e008      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004838:	f7fd febc 	bl	80025b4 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	; 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e357      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800484a:	4b2c      	ldr	r3, [pc, #176]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004856:	4b28      	ldr	r3, [pc, #160]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d035      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	429a      	cmp	r2, r3
 8004872:	d02e      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004874:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800487e:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	4a1d      	ldr	r2, [pc, #116]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004888:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800488a:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	4a1a      	ldr	r2, [pc, #104]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004894:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004896:	4a18      	ldr	r2, [pc, #96]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800489c:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d114      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fd fe84 	bl	80025b4 <HAL_GetTick>
 80048ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ae:	e00a      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fd fe80 	bl	80025b4 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e319      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0ee      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048de:	d111      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048ec:	4b04      	ldr	r3, [pc, #16]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048ee:	400b      	ands	r3, r1
 80048f0:	4901      	ldr	r1, [pc, #4]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
 80048f6:	e00b      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40007000 	.word	0x40007000
 8004900:	0ffffcff 	.word	0x0ffffcff
 8004904:	4bb1      	ldr	r3, [pc, #708]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4ab0      	ldr	r2, [pc, #704]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800490a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800490e:	6093      	str	r3, [r2, #8]
 8004910:	4bae      	ldr	r3, [pc, #696]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004912:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800491c:	49ab      	ldr	r1, [pc, #684]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	2b00      	cmp	r3, #0
 800492c:	d010      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800492e:	4ba7      	ldr	r3, [pc, #668]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004934:	4aa5      	ldr	r2, [pc, #660]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800493a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800493e:	4ba3      	ldr	r3, [pc, #652]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004940:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	49a0      	ldr	r1, [pc, #640]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800495c:	4b9b      	ldr	r3, [pc, #620]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800496a:	4998      	ldr	r1, [pc, #608]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800497e:	4b93      	ldr	r3, [pc, #588]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004984:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800498c:	498f      	ldr	r1, [pc, #572]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049a0:	4b8a      	ldr	r3, [pc, #552]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ae:	4987      	ldr	r1, [pc, #540]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049c2:	4b82      	ldr	r3, [pc, #520]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	497e      	ldr	r1, [pc, #504]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049e4:	4b79      	ldr	r3, [pc, #484]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ea:	f023 0203 	bic.w	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	4976      	ldr	r1, [pc, #472]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a06:	4b71      	ldr	r3, [pc, #452]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	f023 020c 	bic.w	r2, r3, #12
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a14:	496d      	ldr	r1, [pc, #436]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a28:	4b68      	ldr	r3, [pc, #416]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a36:	4965      	ldr	r1, [pc, #404]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a4a:	4b60      	ldr	r3, [pc, #384]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a50:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a58:	495c      	ldr	r1, [pc, #368]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a6c:	4b57      	ldr	r3, [pc, #348]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7a:	4954      	ldr	r1, [pc, #336]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a8e:	4b4f      	ldr	r3, [pc, #316]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	494b      	ldr	r1, [pc, #300]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ab0:	4b46      	ldr	r3, [pc, #280]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abe:	4943      	ldr	r1, [pc, #268]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004ad2:	4b3e      	ldr	r3, [pc, #248]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae0:	493a      	ldr	r1, [pc, #232]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004af4:	4b35      	ldr	r3, [pc, #212]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b02:	4932      	ldr	r1, [pc, #200]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d011      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b16:	4b2d      	ldr	r3, [pc, #180]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b24:	4929      	ldr	r1, [pc, #164]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b34:	d101      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b36:	2301      	movs	r3, #1
 8004b38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b46:	2301      	movs	r3, #1
 8004b48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b56:	4b1d      	ldr	r3, [pc, #116]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b64:	4919      	ldr	r1, [pc, #100]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b78:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b88:	4910      	ldr	r1, [pc, #64]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d006      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80d9 	beq.w	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ba4:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a08      	ldr	r2, [pc, #32]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004baa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb0:	f7fd fd00 	bl	80025b4 <HAL_GetTick>
 8004bb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bb6:	e00b      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bb8:	f7fd fcfc 	bl	80025b4 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	; 0x64
 8004bc4:	d904      	bls.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e197      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004bca:	bf00      	nop
 8004bcc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bd0:	4b6c      	ldr	r3, [pc, #432]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1ed      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d021      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d11d      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bf0:	4b64      	ldr	r3, [pc, #400]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf6:	0c1b      	lsrs	r3, r3, #16
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bfe:	4b61      	ldr	r3, [pc, #388]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c04:	0e1b      	lsrs	r3, r3, #24
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	019a      	lsls	r2, r3, #6
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	431a      	orrs	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	061b      	lsls	r3, r3, #24
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	071b      	lsls	r3, r3, #28
 8004c24:	4957      	ldr	r1, [pc, #348]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d004      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c40:	d00a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d02e      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c56:	d129      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c58:	4b4a      	ldr	r3, [pc, #296]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c5e:	0c1b      	lsrs	r3, r3, #16
 8004c60:	f003 0303 	and.w	r3, r3, #3
 8004c64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c66:	4b47      	ldr	r3, [pc, #284]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c6c:	0f1b      	lsrs	r3, r3, #28
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	019a      	lsls	r2, r3, #6
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	431a      	orrs	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	071b      	lsls	r3, r3, #28
 8004c8c:	493d      	ldr	r1, [pc, #244]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c94:	4b3b      	ldr	r3, [pc, #236]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c9a:	f023 021f 	bic.w	r2, r3, #31
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	4937      	ldr	r1, [pc, #220]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01d      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cb8:	4b32      	ldr	r3, [pc, #200]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cbe:	0e1b      	lsrs	r3, r3, #24
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ccc:	0f1b      	lsrs	r3, r3, #28
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	019a      	lsls	r2, r3, #6
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	061b      	lsls	r3, r3, #24
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	071b      	lsls	r3, r3, #28
 8004cec:	4925      	ldr	r1, [pc, #148]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d011      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	019a      	lsls	r2, r3, #6
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	041b      	lsls	r3, r3, #16
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	061b      	lsls	r3, r3, #24
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	071b      	lsls	r3, r3, #28
 8004d1c:	4919      	ldr	r1, [pc, #100]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d24:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d30:	f7fd fc40 	bl	80025b4 <HAL_GetTick>
 8004d34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d36:	e008      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d38:	f7fd fc3c 	bl	80025b4 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	; 0x64
 8004d44:	d901      	bls.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e0d7      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d4a:	4b0e      	ldr	r3, [pc, #56]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	f040 80cd 	bne.w	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d5e:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a08      	ldr	r2, [pc, #32]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d6a:	f7fd fc23 	bl	80025b4 <HAL_GetTick>
 8004d6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d70:	e00a      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d72:	f7fd fc1f 	bl	80025b4 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b64      	cmp	r3, #100	; 0x64
 8004d7e:	d903      	bls.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e0ba      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004d84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d88:	4b5e      	ldr	r3, [pc, #376]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d94:	d0ed      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d02e      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d12a      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004dbe:	4b51      	ldr	r3, [pc, #324]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	0c1b      	lsrs	r3, r3, #16
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dcc:	4b4d      	ldr	r3, [pc, #308]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	0f1b      	lsrs	r3, r3, #28
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	019a      	lsls	r2, r3, #6
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	041b      	lsls	r3, r3, #16
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	061b      	lsls	r3, r3, #24
 8004dec:	431a      	orrs	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	071b      	lsls	r3, r3, #28
 8004df2:	4944      	ldr	r1, [pc, #272]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dfa:	4b42      	ldr	r3, [pc, #264]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	493d      	ldr	r1, [pc, #244]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d022      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e28:	d11d      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e2a:	4b36      	ldr	r3, [pc, #216]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e30:	0e1b      	lsrs	r3, r3, #24
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e38:	4b32      	ldr	r3, [pc, #200]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3e:	0f1b      	lsrs	r3, r3, #28
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	019a      	lsls	r2, r3, #6
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	041b      	lsls	r3, r3, #16
 8004e52:	431a      	orrs	r2, r3
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	061b      	lsls	r3, r3, #24
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	071b      	lsls	r3, r3, #28
 8004e5e:	4929      	ldr	r1, [pc, #164]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d028      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e72:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	0e1b      	lsrs	r3, r3, #24
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e80:	4b20      	ldr	r3, [pc, #128]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e86:	0c1b      	lsrs	r3, r3, #16
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	019a      	lsls	r2, r3, #6
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	041b      	lsls	r3, r3, #16
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	061b      	lsls	r3, r3, #24
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	071b      	lsls	r3, r3, #28
 8004ea6:	4917      	ldr	r1, [pc, #92]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004eae:	4b15      	ldr	r3, [pc, #84]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	4911      	ldr	r1, [pc, #68]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a0e      	ldr	r2, [pc, #56]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ece:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed0:	f7fd fb70 	bl	80025b4 <HAL_GetTick>
 8004ed4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ed8:	f7fd fb6c 	bl	80025b4 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b64      	cmp	r3, #100	; 0x64
 8004ee4:	d901      	bls.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e007      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004eea:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef6:	d1ef      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40023800 	.word	0x40023800

08004f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e049      	b.n	8004fae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f841 	bl	8004fb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3304      	adds	r3, #4
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f000 fa00 	bl	800534c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d001      	beq.n	8004fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e054      	b.n	800508e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a26      	ldr	r2, [pc, #152]	; (800509c <HAL_TIM_Base_Start_IT+0xd0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d022      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x80>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500e:	d01d      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x80>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a22      	ldr	r2, [pc, #136]	; (80050a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d018      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x80>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a21      	ldr	r2, [pc, #132]	; (80050a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d013      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x80>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1f      	ldr	r2, [pc, #124]	; (80050a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00e      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x80>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <HAL_TIM_Base_Start_IT+0xe0>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d009      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x80>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x80>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1b      	ldr	r2, [pc, #108]	; (80050b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d115      	bne.n	8005078 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <HAL_TIM_Base_Start_IT+0xec>)
 8005054:	4013      	ands	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b06      	cmp	r3, #6
 800505c:	d015      	beq.n	800508a <HAL_TIM_Base_Start_IT+0xbe>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005064:	d011      	beq.n	800508a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0201 	orr.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005076:	e008      	b.n	800508a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e000      	b.n	800508c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40010400 	.word	0x40010400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40001800 	.word	0x40001800
 80050b8:	00010007 	.word	0x00010007

080050bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d122      	bne.n	8005118 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d11b      	bne.n	8005118 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0202 	mvn.w	r2, #2
 80050e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f905 	bl	800530e <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f8f7 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f908 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b04      	cmp	r3, #4
 8005124:	d122      	bne.n	800516c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b04      	cmp	r3, #4
 8005132:	d11b      	bne.n	800516c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0204 	mvn.w	r2, #4
 800513c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f8db 	bl	800530e <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f8cd 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8de 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b08      	cmp	r3, #8
 8005178:	d122      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b08      	cmp	r3, #8
 8005186:	d11b      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0208 	mvn.w	r2, #8
 8005190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2204      	movs	r2, #4
 8005196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f8b1 	bl	800530e <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f8a3 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f8b4 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b10      	cmp	r3, #16
 80051cc:	d122      	bne.n	8005214 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d11b      	bne.n	8005214 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0210 	mvn.w	r2, #16
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2208      	movs	r2, #8
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f887 	bl	800530e <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f879 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f88a 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b01      	cmp	r3, #1
 8005220:	d10e      	bne.n	8005240 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b01      	cmp	r3, #1
 800522e:	d107      	bne.n	8005240 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0201 	mvn.w	r2, #1
 8005238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fc fa80 	bl	8001740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524a:	2b80      	cmp	r3, #128	; 0x80
 800524c:	d10e      	bne.n	800526c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005258:	2b80      	cmp	r3, #128	; 0x80
 800525a:	d107      	bne.n	800526c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f91a 	bl	80054a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527a:	d10e      	bne.n	800529a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	2b80      	cmp	r3, #128	; 0x80
 8005288:	d107      	bne.n	800529a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f90d 	bl	80054b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d10e      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d107      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f838 	bl	8005336 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d10e      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d107      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f06f 0220 	mvn.w	r2, #32
 80052ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f8cd 	bl	800548c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
	...

0800534c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a40      	ldr	r2, [pc, #256]	; (8005460 <TIM_Base_SetConfig+0x114>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d013      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536a:	d00f      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a3d      	ldr	r2, [pc, #244]	; (8005464 <TIM_Base_SetConfig+0x118>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00b      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a3c      	ldr	r2, [pc, #240]	; (8005468 <TIM_Base_SetConfig+0x11c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d007      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a3b      	ldr	r2, [pc, #236]	; (800546c <TIM_Base_SetConfig+0x120>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a3a      	ldr	r2, [pc, #232]	; (8005470 <TIM_Base_SetConfig+0x124>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d108      	bne.n	800539e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2f      	ldr	r2, [pc, #188]	; (8005460 <TIM_Base_SetConfig+0x114>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d02b      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ac:	d027      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2c      	ldr	r2, [pc, #176]	; (8005464 <TIM_Base_SetConfig+0x118>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d023      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a2b      	ldr	r2, [pc, #172]	; (8005468 <TIM_Base_SetConfig+0x11c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01f      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2a      	ldr	r2, [pc, #168]	; (800546c <TIM_Base_SetConfig+0x120>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01b      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a29      	ldr	r2, [pc, #164]	; (8005470 <TIM_Base_SetConfig+0x124>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d017      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a28      	ldr	r2, [pc, #160]	; (8005474 <TIM_Base_SetConfig+0x128>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a27      	ldr	r2, [pc, #156]	; (8005478 <TIM_Base_SetConfig+0x12c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00f      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a26      	ldr	r2, [pc, #152]	; (800547c <TIM_Base_SetConfig+0x130>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00b      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a25      	ldr	r2, [pc, #148]	; (8005480 <TIM_Base_SetConfig+0x134>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d007      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a24      	ldr	r2, [pc, #144]	; (8005484 <TIM_Base_SetConfig+0x138>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a23      	ldr	r2, [pc, #140]	; (8005488 <TIM_Base_SetConfig+0x13c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d108      	bne.n	8005410 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a0a      	ldr	r2, [pc, #40]	; (8005460 <TIM_Base_SetConfig+0x114>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <TIM_Base_SetConfig+0xf8>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a0c      	ldr	r2, [pc, #48]	; (8005470 <TIM_Base_SetConfig+0x124>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d103      	bne.n	800544c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	615a      	str	r2, [r3, #20]
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40010000 	.word	0x40010000
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40000c00 	.word	0x40000c00
 8005470:	40010400 	.word	0x40010400
 8005474:	40014000 	.word	0x40014000
 8005478:	40014400 	.word	0x40014400
 800547c:	40014800 	.word	0x40014800
 8005480:	40001800 	.word	0x40001800
 8005484:	40001c00 	.word	0x40001c00
 8005488:	40002000 	.word	0x40002000

0800548c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80054d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054da:	2b84      	cmp	r3, #132	; 0x84
 80054dc:	d005      	beq.n	80054ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80054de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	3303      	adds	r3, #3
 80054e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80054ea:	68fb      	ldr	r3, [r7, #12]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80054fc:	f000 fa5c 	bl	80059b8 <vTaskStartScheduler>
  
  return osOK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	bd80      	pop	{r7, pc}

08005506 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005508:	b087      	sub	sp, #28
 800550a:	af02      	add	r7, sp, #8
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685c      	ldr	r4, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800551c:	b29e      	uxth	r6, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff ffcf 	bl	80054c8 <makeFreeRtosPriority>
 800552a:	4602      	mov	r2, r0
 800552c:	f107 030c 	add.w	r3, r7, #12
 8005530:	9301      	str	r3, [sp, #4]
 8005532:	9200      	str	r2, [sp, #0]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	4632      	mov	r2, r6
 8005538:	4629      	mov	r1, r5
 800553a:	4620      	mov	r0, r4
 800553c:	f000 f8d2 	bl	80056e4 <xTaskCreate>
 8005540:	4603      	mov	r3, r0
 8005542:	2b01      	cmp	r3, #1
 8005544:	d001      	beq.n	800554a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	e000      	b.n	800554c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800554a:	68fb      	ldr	r3, [r7, #12]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005554 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <osDelay+0x16>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	e000      	b.n	800556c <osDelay+0x18>
 800556a:	2301      	movs	r3, #1
 800556c:	4618      	mov	r0, r3
 800556e:	f000 f9ed 	bl	800594c <vTaskDelay>
  
  return osOK;
 8005572:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f103 0208 	add.w	r2, r3, #8
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f04f 32ff 	mov.w	r2, #4294967295
 8005594:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f103 0208 	add.w	r2, r3, #8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f103 0208 	add.w	r2, r3, #8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	601a      	str	r2, [r3, #0]
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005634:	d103      	bne.n	800563e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	e00c      	b.n	8005658 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3308      	adds	r3, #8
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e002      	b.n	800564c <vListInsert+0x2e>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	429a      	cmp	r2, r3
 8005656:	d2f6      	bcs.n	8005646 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6892      	ldr	r2, [r2, #8]
 80056a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6852      	ldr	r2, [r2, #4]
 80056b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d103      	bne.n	80056c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	1e5a      	subs	r2, r3, #1
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08c      	sub	sp, #48	; 0x30
 80056e8:	af04      	add	r7, sp, #16
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	4613      	mov	r3, r2
 80056f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056f4:	88fb      	ldrh	r3, [r7, #6]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fe7f 	bl	80063fc <pvPortMalloc>
 80056fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00e      	beq.n	8005724 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005706:	2054      	movs	r0, #84	; 0x54
 8005708:	f000 fe78 	bl	80063fc <pvPortMalloc>
 800570c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
 800571a:	e005      	b.n	8005728 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800571c:	6978      	ldr	r0, [r7, #20]
 800571e:	f000 ff37 	bl	8006590 <vPortFree>
 8005722:	e001      	b.n	8005728 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005724:	2300      	movs	r3, #0
 8005726:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d013      	beq.n	8005756 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800572e:	88fa      	ldrh	r2, [r7, #6]
 8005730:	2300      	movs	r3, #0
 8005732:	9303      	str	r3, [sp, #12]
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	9302      	str	r3, [sp, #8]
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	9301      	str	r3, [sp, #4]
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f80e 	bl	8005766 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800574a:	69f8      	ldr	r0, [r7, #28]
 800574c:	f000 f894 	bl	8005878 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005750:	2301      	movs	r3, #1
 8005752:	61bb      	str	r3, [r7, #24]
 8005754:	e002      	b.n	800575c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005756:	f04f 33ff 	mov.w	r3, #4294967295
 800575a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800575c:	69bb      	ldr	r3, [r7, #24]
	}
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b088      	sub	sp, #32
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800577e:	440b      	add	r3, r1
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	f023 0307 	bic.w	r3, r3, #7
 800578c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00c      	beq.n	80057b2 <prvInitialiseNewTask+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	b672      	cpsid	i
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	b662      	cpsie	i
 80057ac:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057ae:	bf00      	nop
 80057b0:	e7fe      	b.n	80057b0 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01f      	beq.n	80057f8 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057b8:	2300      	movs	r3, #0
 80057ba:	61fb      	str	r3, [r7, #28]
 80057bc:	e012      	b.n	80057e4 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	4413      	add	r3, r2
 80057c4:	7819      	ldrb	r1, [r3, #0]
 80057c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	4413      	add	r3, r2
 80057cc:	3334      	adds	r3, #52	; 0x34
 80057ce:	460a      	mov	r2, r1
 80057d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d006      	beq.n	80057ec <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3301      	adds	r3, #1
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	2b0f      	cmp	r3, #15
 80057e8:	d9e9      	bls.n	80057be <prvInitialiseNewTask+0x58>
 80057ea:	e000      	b.n	80057ee <prvInitialiseNewTask+0x88>
			{
				break;
 80057ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057f6:	e003      	b.n	8005800 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	2b07      	cmp	r3, #7
 8005804:	d901      	bls.n	800580a <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005806:	2307      	movs	r3, #7
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800580e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005814:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	2200      	movs	r2, #0
 800581a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	3304      	adds	r3, #4
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff fecb 	bl	80055bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	3318      	adds	r3, #24
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff fec6 	bl	80055bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005834:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005838:	f1c3 0208 	rsb	r2, r3, #8
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005844:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	2200      	movs	r2, #0
 800584a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	69b8      	ldr	r0, [r7, #24]
 800585a:	f000 fbd9 	bl	8006010 <pxPortInitialiseStack>
 800585e:	4602      	mov	r2, r0
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800586e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005870:	bf00      	nop
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005880:	f000 fcd4 	bl	800622c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005884:	4b2a      	ldr	r3, [pc, #168]	; (8005930 <prvAddNewTaskToReadyList+0xb8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3301      	adds	r3, #1
 800588a:	4a29      	ldr	r2, [pc, #164]	; (8005930 <prvAddNewTaskToReadyList+0xb8>)
 800588c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800588e:	4b29      	ldr	r3, [pc, #164]	; (8005934 <prvAddNewTaskToReadyList+0xbc>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005896:	4a27      	ldr	r2, [pc, #156]	; (8005934 <prvAddNewTaskToReadyList+0xbc>)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800589c:	4b24      	ldr	r3, [pc, #144]	; (8005930 <prvAddNewTaskToReadyList+0xb8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d110      	bne.n	80058c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058a4:	f000 fab0 	bl	8005e08 <prvInitialiseTaskLists>
 80058a8:	e00d      	b.n	80058c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058aa:	4b23      	ldr	r3, [pc, #140]	; (8005938 <prvAddNewTaskToReadyList+0xc0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058b2:	4b20      	ldr	r3, [pc, #128]	; (8005934 <prvAddNewTaskToReadyList+0xbc>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	429a      	cmp	r2, r3
 80058be:	d802      	bhi.n	80058c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058c0:	4a1c      	ldr	r2, [pc, #112]	; (8005934 <prvAddNewTaskToReadyList+0xbc>)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058c6:	4b1d      	ldr	r3, [pc, #116]	; (800593c <prvAddNewTaskToReadyList+0xc4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3301      	adds	r3, #1
 80058cc:	4a1b      	ldr	r2, [pc, #108]	; (800593c <prvAddNewTaskToReadyList+0xc4>)
 80058ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	2201      	movs	r2, #1
 80058d6:	409a      	lsls	r2, r3
 80058d8:	4b19      	ldr	r3, [pc, #100]	; (8005940 <prvAddNewTaskToReadyList+0xc8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4313      	orrs	r3, r2
 80058de:	4a18      	ldr	r2, [pc, #96]	; (8005940 <prvAddNewTaskToReadyList+0xc8>)
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4a15      	ldr	r2, [pc, #84]	; (8005944 <prvAddNewTaskToReadyList+0xcc>)
 80058f0:	441a      	add	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	3304      	adds	r3, #4
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f7ff fe6c 	bl	80055d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058fe:	f000 fcc9 	bl	8006294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005902:	4b0d      	ldr	r3, [pc, #52]	; (8005938 <prvAddNewTaskToReadyList+0xc0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00e      	beq.n	8005928 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800590a:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <prvAddNewTaskToReadyList+0xbc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	429a      	cmp	r2, r3
 8005916:	d207      	bcs.n	8005928 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005918:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <prvAddNewTaskToReadyList+0xd0>)
 800591a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005928:	bf00      	nop
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	200193ec 	.word	0x200193ec
 8005934:	200192d8 	.word	0x200192d8
 8005938:	200193f8 	.word	0x200193f8
 800593c:	20019408 	.word	0x20019408
 8005940:	200193f4 	.word	0x200193f4
 8005944:	200192dc 	.word	0x200192dc
 8005948:	e000ed04 	.word	0xe000ed04

0800594c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d019      	beq.n	8005992 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800595e:	4b14      	ldr	r3, [pc, #80]	; (80059b0 <vTaskDelay+0x64>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00c      	beq.n	8005980 <vTaskDelay+0x34>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596a:	b672      	cpsid	i
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	b662      	cpsie	i
 800597a:	60bb      	str	r3, [r7, #8]
}
 800597c:	bf00      	nop
 800597e:	e7fe      	b.n	800597e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005980:	f000 f866 	bl	8005a50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005984:	2100      	movs	r1, #0
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fadc 	bl	8005f44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800598c:	f000 f86e 	bl	8005a6c <xTaskResumeAll>
 8005990:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d107      	bne.n	80059a8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005998:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <vTaskDelay+0x68>)
 800599a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20019414 	.word	0x20019414
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80059be:	4b1e      	ldr	r3, [pc, #120]	; (8005a38 <vTaskStartScheduler+0x80>)
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	2300      	movs	r3, #0
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	2300      	movs	r3, #0
 80059c8:	2280      	movs	r2, #128	; 0x80
 80059ca:	491c      	ldr	r1, [pc, #112]	; (8005a3c <vTaskStartScheduler+0x84>)
 80059cc:	481c      	ldr	r0, [pc, #112]	; (8005a40 <vTaskStartScheduler+0x88>)
 80059ce:	f7ff fe89 	bl	80056e4 <xTaskCreate>
 80059d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d118      	bne.n	8005a0c <vTaskStartScheduler+0x54>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	b672      	cpsid	i
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	b662      	cpsie	i
 80059ee:	60bb      	str	r3, [r7, #8]
}
 80059f0:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059f2:	4b14      	ldr	r3, [pc, #80]	; (8005a44 <vTaskStartScheduler+0x8c>)
 80059f4:	f04f 32ff 	mov.w	r2, #4294967295
 80059f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059fa:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <vTaskStartScheduler+0x90>)
 80059fc:	2201      	movs	r2, #1
 80059fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a00:	4b12      	ldr	r3, [pc, #72]	; (8005a4c <vTaskStartScheduler+0x94>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a06:	f000 fb93 	bl	8006130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a0a:	e010      	b.n	8005a2e <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a12:	d10c      	bne.n	8005a2e <vTaskStartScheduler+0x76>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	b672      	cpsid	i
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	b662      	cpsie	i
 8005a28:	607b      	str	r3, [r7, #4]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <vTaskStartScheduler+0x74>
}
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20019410 	.word	0x20019410
 8005a3c:	080171f4 	.word	0x080171f4
 8005a40:	08005dd9 	.word	0x08005dd9
 8005a44:	2001940c 	.word	0x2001940c
 8005a48:	200193f8 	.word	0x200193f8
 8005a4c:	200193f0 	.word	0x200193f0

08005a50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a54:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <vTaskSuspendAll+0x18>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	4a03      	ldr	r2, [pc, #12]	; (8005a68 <vTaskSuspendAll+0x18>)
 8005a5c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005a5e:	bf00      	nop
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	20019414 	.word	0x20019414

08005a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a7a:	4b42      	ldr	r3, [pc, #264]	; (8005b84 <xTaskResumeAll+0x118>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10c      	bne.n	8005a9c <xTaskResumeAll+0x30>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	b672      	cpsid	i
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	b662      	cpsie	i
 8005a96:	603b      	str	r3, [r7, #0]
}
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a9c:	f000 fbc6 	bl	800622c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005aa0:	4b38      	ldr	r3, [pc, #224]	; (8005b84 <xTaskResumeAll+0x118>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	4a37      	ldr	r2, [pc, #220]	; (8005b84 <xTaskResumeAll+0x118>)
 8005aa8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aaa:	4b36      	ldr	r3, [pc, #216]	; (8005b84 <xTaskResumeAll+0x118>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d161      	bne.n	8005b76 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ab2:	4b35      	ldr	r3, [pc, #212]	; (8005b88 <xTaskResumeAll+0x11c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d05d      	beq.n	8005b76 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005aba:	e02e      	b.n	8005b1a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005abc:	4b33      	ldr	r3, [pc, #204]	; (8005b8c <xTaskResumeAll+0x120>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3318      	adds	r3, #24
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff fde1 	bl	8005690 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff fddc 	bl	8005690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	2201      	movs	r2, #1
 8005ade:	409a      	lsls	r2, r3
 8005ae0:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <xTaskResumeAll+0x124>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	4a2a      	ldr	r2, [pc, #168]	; (8005b90 <xTaskResumeAll+0x124>)
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4a27      	ldr	r2, [pc, #156]	; (8005b94 <xTaskResumeAll+0x128>)
 8005af8:	441a      	add	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3304      	adds	r3, #4
 8005afe:	4619      	mov	r1, r3
 8005b00:	4610      	mov	r0, r2
 8005b02:	f7ff fd68 	bl	80055d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0a:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <xTaskResumeAll+0x12c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d302      	bcc.n	8005b1a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005b14:	4b21      	ldr	r3, [pc, #132]	; (8005b9c <xTaskResumeAll+0x130>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b1a:	4b1c      	ldr	r3, [pc, #112]	; (8005b8c <xTaskResumeAll+0x120>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1cc      	bne.n	8005abc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b28:	f000 f9ec 	bl	8005f04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b2c:	4b1c      	ldr	r3, [pc, #112]	; (8005ba0 <xTaskResumeAll+0x134>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d010      	beq.n	8005b5a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b38:	f000 f836 	bl	8005ba8 <xTaskIncrementTick>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005b42:	4b16      	ldr	r3, [pc, #88]	; (8005b9c <xTaskResumeAll+0x130>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1f1      	bne.n	8005b38 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005b54:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <xTaskResumeAll+0x134>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b5a:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <xTaskResumeAll+0x130>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d009      	beq.n	8005b76 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b62:	2301      	movs	r3, #1
 8005b64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b66:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <xTaskResumeAll+0x138>)
 8005b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b76:	f000 fb8d 	bl	8006294 <vPortExitCritical>

	return xAlreadyYielded;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20019414 	.word	0x20019414
 8005b88:	200193ec 	.word	0x200193ec
 8005b8c:	200193ac 	.word	0x200193ac
 8005b90:	200193f4 	.word	0x200193f4
 8005b94:	200192dc 	.word	0x200192dc
 8005b98:	200192d8 	.word	0x200192d8
 8005b9c:	20019400 	.word	0x20019400
 8005ba0:	200193fc 	.word	0x200193fc
 8005ba4:	e000ed04 	.word	0xe000ed04

08005ba8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bb2:	4b4f      	ldr	r3, [pc, #316]	; (8005cf0 <xTaskIncrementTick+0x148>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f040 808a 	bne.w	8005cd0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bbc:	4b4d      	ldr	r3, [pc, #308]	; (8005cf4 <xTaskIncrementTick+0x14c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005bc4:	4a4b      	ldr	r2, [pc, #300]	; (8005cf4 <xTaskIncrementTick+0x14c>)
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d122      	bne.n	8005c16 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005bd0:	4b49      	ldr	r3, [pc, #292]	; (8005cf8 <xTaskIncrementTick+0x150>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00c      	beq.n	8005bf4 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	b672      	cpsid	i
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	b662      	cpsie	i
 8005bee:	603b      	str	r3, [r7, #0]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <xTaskIncrementTick+0x4a>
 8005bf4:	4b40      	ldr	r3, [pc, #256]	; (8005cf8 <xTaskIncrementTick+0x150>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	4b40      	ldr	r3, [pc, #256]	; (8005cfc <xTaskIncrementTick+0x154>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a3e      	ldr	r2, [pc, #248]	; (8005cf8 <xTaskIncrementTick+0x150>)
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	4a3e      	ldr	r2, [pc, #248]	; (8005cfc <xTaskIncrementTick+0x154>)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	4b3d      	ldr	r3, [pc, #244]	; (8005d00 <xTaskIncrementTick+0x158>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	4a3c      	ldr	r2, [pc, #240]	; (8005d00 <xTaskIncrementTick+0x158>)
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	f000 f977 	bl	8005f04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c16:	4b3b      	ldr	r3, [pc, #236]	; (8005d04 <xTaskIncrementTick+0x15c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d348      	bcc.n	8005cb2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c20:	4b35      	ldr	r3, [pc, #212]	; (8005cf8 <xTaskIncrementTick+0x150>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d104      	bne.n	8005c34 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c2a:	4b36      	ldr	r3, [pc, #216]	; (8005d04 <xTaskIncrementTick+0x15c>)
 8005c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c30:	601a      	str	r2, [r3, #0]
					break;
 8005c32:	e03e      	b.n	8005cb2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c34:	4b30      	ldr	r3, [pc, #192]	; (8005cf8 <xTaskIncrementTick+0x150>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d203      	bcs.n	8005c54 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c4c:	4a2d      	ldr	r2, [pc, #180]	; (8005d04 <xTaskIncrementTick+0x15c>)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c52:	e02e      	b.n	8005cb2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff fd19 	bl	8005690 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d004      	beq.n	8005c70 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	3318      	adds	r3, #24
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff fd10 	bl	8005690 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	2201      	movs	r2, #1
 8005c76:	409a      	lsls	r2, r3
 8005c78:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <xTaskIncrementTick+0x160>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	4a22      	ldr	r2, [pc, #136]	; (8005d08 <xTaskIncrementTick+0x160>)
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4a1f      	ldr	r2, [pc, #124]	; (8005d0c <xTaskIncrementTick+0x164>)
 8005c90:	441a      	add	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f7ff fc9c 	bl	80055d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca2:	4b1b      	ldr	r3, [pc, #108]	; (8005d10 <xTaskIncrementTick+0x168>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d3b9      	bcc.n	8005c20 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005cac:	2301      	movs	r3, #1
 8005cae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cb0:	e7b6      	b.n	8005c20 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cb2:	4b17      	ldr	r3, [pc, #92]	; (8005d10 <xTaskIncrementTick+0x168>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb8:	4914      	ldr	r1, [pc, #80]	; (8005d0c <xTaskIncrementTick+0x164>)
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d907      	bls.n	8005cda <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	e004      	b.n	8005cda <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005cd0:	4b10      	ldr	r3, [pc, #64]	; (8005d14 <xTaskIncrementTick+0x16c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	4a0f      	ldr	r2, [pc, #60]	; (8005d14 <xTaskIncrementTick+0x16c>)
 8005cd8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005cda:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <xTaskIncrementTick+0x170>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ce6:	697b      	ldr	r3, [r7, #20]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20019414 	.word	0x20019414
 8005cf4:	200193f0 	.word	0x200193f0
 8005cf8:	200193a4 	.word	0x200193a4
 8005cfc:	200193a8 	.word	0x200193a8
 8005d00:	20019404 	.word	0x20019404
 8005d04:	2001940c 	.word	0x2001940c
 8005d08:	200193f4 	.word	0x200193f4
 8005d0c:	200192dc 	.word	0x200192dc
 8005d10:	200192d8 	.word	0x200192d8
 8005d14:	200193fc 	.word	0x200193fc
 8005d18:	20019400 	.word	0x20019400

08005d1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d22:	4b28      	ldr	r3, [pc, #160]	; (8005dc4 <vTaskSwitchContext+0xa8>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d2a:	4b27      	ldr	r3, [pc, #156]	; (8005dc8 <vTaskSwitchContext+0xac>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d30:	e041      	b.n	8005db6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005d32:	4b25      	ldr	r3, [pc, #148]	; (8005dc8 <vTaskSwitchContext+0xac>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d38:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <vTaskSwitchContext+0xb0>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	fab3 f383 	clz	r3, r3
 8005d44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005d46:	7afb      	ldrb	r3, [r7, #11]
 8005d48:	f1c3 031f 	rsb	r3, r3, #31
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	4920      	ldr	r1, [pc, #128]	; (8005dd0 <vTaskSwitchContext+0xb4>)
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	440b      	add	r3, r1
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10c      	bne.n	8005d7c <vTaskSwitchContext+0x60>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	b672      	cpsid	i
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	b662      	cpsie	i
 8005d76:	607b      	str	r3, [r7, #4]
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <vTaskSwitchContext+0x5e>
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4a12      	ldr	r2, [pc, #72]	; (8005dd0 <vTaskSwitchContext+0xb4>)
 8005d88:	4413      	add	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	605a      	str	r2, [r3, #4]
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d104      	bne.n	8005dac <vTaskSwitchContext+0x90>
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	605a      	str	r2, [r3, #4]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	4a08      	ldr	r2, [pc, #32]	; (8005dd4 <vTaskSwitchContext+0xb8>)
 8005db4:	6013      	str	r3, [r2, #0]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20019414 	.word	0x20019414
 8005dc8:	20019400 	.word	0x20019400
 8005dcc:	200193f4 	.word	0x200193f4
 8005dd0:	200192dc 	.word	0x200192dc
 8005dd4:	200192d8 	.word	0x200192d8

08005dd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005de0:	f000 f852 	bl	8005e88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <prvIdleTask+0x28>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d9f9      	bls.n	8005de0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005dec:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <prvIdleTask+0x2c>)
 8005dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005dfc:	e7f0      	b.n	8005de0 <prvIdleTask+0x8>
 8005dfe:	bf00      	nop
 8005e00:	200192dc 	.word	0x200192dc
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e0e:	2300      	movs	r3, #0
 8005e10:	607b      	str	r3, [r7, #4]
 8005e12:	e00c      	b.n	8005e2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4a12      	ldr	r2, [pc, #72]	; (8005e68 <prvInitialiseTaskLists+0x60>)
 8005e20:	4413      	add	r3, r2
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff fbaa 	bl	800557c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	607b      	str	r3, [r7, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b07      	cmp	r3, #7
 8005e32:	d9ef      	bls.n	8005e14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e34:	480d      	ldr	r0, [pc, #52]	; (8005e6c <prvInitialiseTaskLists+0x64>)
 8005e36:	f7ff fba1 	bl	800557c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e3a:	480d      	ldr	r0, [pc, #52]	; (8005e70 <prvInitialiseTaskLists+0x68>)
 8005e3c:	f7ff fb9e 	bl	800557c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e40:	480c      	ldr	r0, [pc, #48]	; (8005e74 <prvInitialiseTaskLists+0x6c>)
 8005e42:	f7ff fb9b 	bl	800557c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e46:	480c      	ldr	r0, [pc, #48]	; (8005e78 <prvInitialiseTaskLists+0x70>)
 8005e48:	f7ff fb98 	bl	800557c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e4c:	480b      	ldr	r0, [pc, #44]	; (8005e7c <prvInitialiseTaskLists+0x74>)
 8005e4e:	f7ff fb95 	bl	800557c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e52:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <prvInitialiseTaskLists+0x78>)
 8005e54:	4a05      	ldr	r2, [pc, #20]	; (8005e6c <prvInitialiseTaskLists+0x64>)
 8005e56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e58:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <prvInitialiseTaskLists+0x7c>)
 8005e5a:	4a05      	ldr	r2, [pc, #20]	; (8005e70 <prvInitialiseTaskLists+0x68>)
 8005e5c:	601a      	str	r2, [r3, #0]
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	200192dc 	.word	0x200192dc
 8005e6c:	2001937c 	.word	0x2001937c
 8005e70:	20019390 	.word	0x20019390
 8005e74:	200193ac 	.word	0x200193ac
 8005e78:	200193c0 	.word	0x200193c0
 8005e7c:	200193d8 	.word	0x200193d8
 8005e80:	200193a4 	.word	0x200193a4
 8005e84:	200193a8 	.word	0x200193a8

08005e88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e8e:	e019      	b.n	8005ec4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e90:	f000 f9cc 	bl	800622c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e94:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <prvCheckTasksWaitingTermination+0x50>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fbf5 	bl	8005690 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ea6:	4b0d      	ldr	r3, [pc, #52]	; (8005edc <prvCheckTasksWaitingTermination+0x54>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	4a0b      	ldr	r2, [pc, #44]	; (8005edc <prvCheckTasksWaitingTermination+0x54>)
 8005eae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <prvCheckTasksWaitingTermination+0x58>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ee0 <prvCheckTasksWaitingTermination+0x58>)
 8005eb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005eba:	f000 f9eb 	bl	8006294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f810 	bl	8005ee4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ec4:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <prvCheckTasksWaitingTermination+0x58>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e1      	bne.n	8005e90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ecc:	bf00      	nop
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	200193c0 	.word	0x200193c0
 8005edc:	200193ec 	.word	0x200193ec
 8005ee0:	200193d4 	.word	0x200193d4

08005ee4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fb4d 	bl	8006590 <vPortFree>
			vPortFree( pxTCB );
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fb4a 	bl	8006590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <prvResetNextTaskUnblockTime+0x38>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d104      	bne.n	8005f1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f14:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <prvResetNextTaskUnblockTime+0x3c>)
 8005f16:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f1c:	e008      	b.n	8005f30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f1e:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <prvResetNextTaskUnblockTime+0x38>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	4a04      	ldr	r2, [pc, #16]	; (8005f40 <prvResetNextTaskUnblockTime+0x3c>)
 8005f2e:	6013      	str	r3, [r2, #0]
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	200193a4 	.word	0x200193a4
 8005f40:	2001940c 	.word	0x2001940c

08005f44 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f4e:	4b29      	ldr	r3, [pc, #164]	; (8005ff4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f54:	4b28      	ldr	r3, [pc, #160]	; (8005ff8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff fb98 	bl	8005690 <uxListRemove>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10b      	bne.n	8005f7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005f66:	4b24      	ldr	r3, [pc, #144]	; (8005ff8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	43da      	mvns	r2, r3
 8005f74:	4b21      	ldr	r3, [pc, #132]	; (8005ffc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	4a20      	ldr	r2, [pc, #128]	; (8005ffc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	d10a      	bne.n	8005f9c <prvAddCurrentTaskToDelayedList+0x58>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f8c:	4b1a      	ldr	r3, [pc, #104]	; (8005ff8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3304      	adds	r3, #4
 8005f92:	4619      	mov	r1, r3
 8005f94:	481a      	ldr	r0, [pc, #104]	; (8006000 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f96:	f7ff fb1e 	bl	80055d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f9a:	e026      	b.n	8005fea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fa4:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d209      	bcs.n	8005fc8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fb4:	4b13      	ldr	r3, [pc, #76]	; (8006004 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	f7ff fb2c 	bl	800561e <vListInsert>
}
 8005fc6:	e010      	b.n	8005fea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fc8:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	f7ff fb22 	bl	800561e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fda:	4b0c      	ldr	r3, [pc, #48]	; (800600c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d202      	bcs.n	8005fea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005fe4:	4a09      	ldr	r2, [pc, #36]	; (800600c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	6013      	str	r3, [r2, #0]
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	200193f0 	.word	0x200193f0
 8005ff8:	200192d8 	.word	0x200192d8
 8005ffc:	200193f4 	.word	0x200193f4
 8006000:	200193d8 	.word	0x200193d8
 8006004:	200193a8 	.word	0x200193a8
 8006008:	200193a4 	.word	0x200193a4
 800600c:	2001940c 	.word	0x2001940c

08006010 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3b04      	subs	r3, #4
 8006020:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006028:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3b04      	subs	r3, #4
 800602e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f023 0201 	bic.w	r2, r3, #1
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3b04      	subs	r3, #4
 800603e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006040:	4a0c      	ldr	r2, [pc, #48]	; (8006074 <pxPortInitialiseStack+0x64>)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3b14      	subs	r3, #20
 800604a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3b04      	subs	r3, #4
 8006056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f06f 0202 	mvn.w	r2, #2
 800605e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3b20      	subs	r3, #32
 8006064:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006066:	68fb      	ldr	r3, [r7, #12]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	08006079 	.word	0x08006079

08006078 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006082:	4b14      	ldr	r3, [pc, #80]	; (80060d4 <prvTaskExitError+0x5c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608a:	d00c      	beq.n	80060a6 <prvTaskExitError+0x2e>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	b672      	cpsid	i
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	b662      	cpsie	i
 80060a0:	60fb      	str	r3, [r7, #12]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <prvTaskExitError+0x2c>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	b672      	cpsid	i
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	b662      	cpsie	i
 80060ba:	60bb      	str	r3, [r7, #8]
}
 80060bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060be:	bf00      	nop
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0fc      	beq.n	80060c0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060c6:	bf00      	nop
 80060c8:	bf00      	nop
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	2000000c 	.word	0x2000000c
	...

080060e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060e0:	4b07      	ldr	r3, [pc, #28]	; (8006100 <pxCurrentTCBConst2>)
 80060e2:	6819      	ldr	r1, [r3, #0]
 80060e4:	6808      	ldr	r0, [r1, #0]
 80060e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	f380 8809 	msr	PSP, r0
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f04f 0000 	mov.w	r0, #0
 80060f6:	f380 8811 	msr	BASEPRI, r0
 80060fa:	4770      	bx	lr
 80060fc:	f3af 8000 	nop.w

08006100 <pxCurrentTCBConst2>:
 8006100:	200192d8 	.word	0x200192d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop

08006108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006108:	4808      	ldr	r0, [pc, #32]	; (800612c <prvPortStartFirstTask+0x24>)
 800610a:	6800      	ldr	r0, [r0, #0]
 800610c:	6800      	ldr	r0, [r0, #0]
 800610e:	f380 8808 	msr	MSP, r0
 8006112:	f04f 0000 	mov.w	r0, #0
 8006116:	f380 8814 	msr	CONTROL, r0
 800611a:	b662      	cpsie	i
 800611c:	b661      	cpsie	f
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	df00      	svc	0
 8006128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800612a:	bf00      	nop
 800612c:	e000ed08 	.word	0xe000ed08

08006130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006136:	4b37      	ldr	r3, [pc, #220]	; (8006214 <xPortStartScheduler+0xe4>)
 8006138:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	22ff      	movs	r2, #255	; 0xff
 8006146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006158:	b2da      	uxtb	r2, r3
 800615a:	4b2f      	ldr	r3, [pc, #188]	; (8006218 <xPortStartScheduler+0xe8>)
 800615c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800615e:	4b2f      	ldr	r3, [pc, #188]	; (800621c <xPortStartScheduler+0xec>)
 8006160:	2207      	movs	r2, #7
 8006162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006164:	e009      	b.n	800617a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006166:	4b2d      	ldr	r3, [pc, #180]	; (800621c <xPortStartScheduler+0xec>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3b01      	subs	r3, #1
 800616c:	4a2b      	ldr	r2, [pc, #172]	; (800621c <xPortStartScheduler+0xec>)
 800616e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	b2db      	uxtb	r3, r3
 8006178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d0ef      	beq.n	8006166 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006186:	4b25      	ldr	r3, [pc, #148]	; (800621c <xPortStartScheduler+0xec>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f1c3 0307 	rsb	r3, r3, #7
 800618e:	2b04      	cmp	r3, #4
 8006190:	d00c      	beq.n	80061ac <xPortStartScheduler+0x7c>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	b672      	cpsid	i
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	b662      	cpsie	i
 80061a6:	60bb      	str	r3, [r7, #8]
}
 80061a8:	bf00      	nop
 80061aa:	e7fe      	b.n	80061aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061ac:	4b1b      	ldr	r3, [pc, #108]	; (800621c <xPortStartScheduler+0xec>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	4a1a      	ldr	r2, [pc, #104]	; (800621c <xPortStartScheduler+0xec>)
 80061b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061b6:	4b19      	ldr	r3, [pc, #100]	; (800621c <xPortStartScheduler+0xec>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061be:	4a17      	ldr	r2, [pc, #92]	; (800621c <xPortStartScheduler+0xec>)
 80061c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061ca:	4b15      	ldr	r3, [pc, #84]	; (8006220 <xPortStartScheduler+0xf0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a14      	ldr	r2, [pc, #80]	; (8006220 <xPortStartScheduler+0xf0>)
 80061d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061d6:	4b12      	ldr	r3, [pc, #72]	; (8006220 <xPortStartScheduler+0xf0>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a11      	ldr	r2, [pc, #68]	; (8006220 <xPortStartScheduler+0xf0>)
 80061dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061e2:	f000 f8dd 	bl	80063a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061e6:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <xPortStartScheduler+0xf4>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061ec:	f000 f8fc 	bl	80063e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061f0:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <xPortStartScheduler+0xf8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a0c      	ldr	r2, [pc, #48]	; (8006228 <xPortStartScheduler+0xf8>)
 80061f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061fc:	f7ff ff84 	bl	8006108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006200:	f7ff fd8c 	bl	8005d1c <vTaskSwitchContext>
	prvTaskExitError();
 8006204:	f7ff ff38 	bl	8006078 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	e000e400 	.word	0xe000e400
 8006218:	20019418 	.word	0x20019418
 800621c:	2001941c 	.word	0x2001941c
 8006220:	e000ed20 	.word	0xe000ed20
 8006224:	2000000c 	.word	0x2000000c
 8006228:	e000ef34 	.word	0xe000ef34

0800622c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	b672      	cpsid	i
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	b662      	cpsie	i
 8006246:	607b      	str	r3, [r7, #4]
}
 8006248:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800624a:	4b10      	ldr	r3, [pc, #64]	; (800628c <vPortEnterCritical+0x60>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3301      	adds	r3, #1
 8006250:	4a0e      	ldr	r2, [pc, #56]	; (800628c <vPortEnterCritical+0x60>)
 8006252:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006254:	4b0d      	ldr	r3, [pc, #52]	; (800628c <vPortEnterCritical+0x60>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d111      	bne.n	8006280 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800625c:	4b0c      	ldr	r3, [pc, #48]	; (8006290 <vPortEnterCritical+0x64>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00c      	beq.n	8006280 <vPortEnterCritical+0x54>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626a:	b672      	cpsid	i
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	b662      	cpsie	i
 800627a:	603b      	str	r3, [r7, #0]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <vPortEnterCritical+0x52>
	}
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	2000000c 	.word	0x2000000c
 8006290:	e000ed04 	.word	0xe000ed04

08006294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800629a:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <vPortExitCritical+0x54>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10c      	bne.n	80062bc <vPortExitCritical+0x28>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	b672      	cpsid	i
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	b662      	cpsie	i
 80062b6:	607b      	str	r3, [r7, #4]
}
 80062b8:	bf00      	nop
 80062ba:	e7fe      	b.n	80062ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80062bc:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <vPortExitCritical+0x54>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	4a09      	ldr	r2, [pc, #36]	; (80062e8 <vPortExitCritical+0x54>)
 80062c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062c6:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <vPortExitCritical+0x54>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d105      	bne.n	80062da <vPortExitCritical+0x46>
 80062ce:	2300      	movs	r3, #0
 80062d0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	2000000c 	.word	0x2000000c
 80062ec:	00000000 	.word	0x00000000

080062f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062f0:	f3ef 8009 	mrs	r0, PSP
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	4b15      	ldr	r3, [pc, #84]	; (8006350 <pxCurrentTCBConst>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	f01e 0f10 	tst.w	lr, #16
 8006300:	bf08      	it	eq
 8006302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630a:	6010      	str	r0, [r2, #0]
 800630c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006314:	b672      	cpsid	i
 8006316:	f380 8811 	msr	BASEPRI, r0
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	b662      	cpsie	i
 8006324:	f7ff fcfa 	bl	8005d1c <vTaskSwitchContext>
 8006328:	f04f 0000 	mov.w	r0, #0
 800632c:	f380 8811 	msr	BASEPRI, r0
 8006330:	bc09      	pop	{r0, r3}
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	6808      	ldr	r0, [r1, #0]
 8006336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633a:	f01e 0f10 	tst.w	lr, #16
 800633e:	bf08      	it	eq
 8006340:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006344:	f380 8809 	msr	PSP, r0
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop

08006350 <pxCurrentTCBConst>:
 8006350:	200192d8 	.word	0x200192d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop

08006358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	b672      	cpsid	i
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	b662      	cpsie	i
 8006372:	607b      	str	r3, [r7, #4]
}
 8006374:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006376:	f7ff fc17 	bl	8005ba8 <xTaskIncrementTick>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <SysTick_Handler+0x44>)
 8006382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	2300      	movs	r3, #0
 800638a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	f383 8811 	msr	BASEPRI, r3
}
 8006392:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	e000ed04 	.word	0xe000ed04

080063a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063a4:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <vPortSetupTimerInterrupt+0x34>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063aa:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <vPortSetupTimerInterrupt+0x38>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <vPortSetupTimerInterrupt+0x3c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a0a      	ldr	r2, [pc, #40]	; (80063e0 <vPortSetupTimerInterrupt+0x40>)
 80063b6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ba:	099b      	lsrs	r3, r3, #6
 80063bc:	4a09      	ldr	r2, [pc, #36]	; (80063e4 <vPortSetupTimerInterrupt+0x44>)
 80063be:	3b01      	subs	r3, #1
 80063c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063c2:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <vPortSetupTimerInterrupt+0x34>)
 80063c4:	2207      	movs	r2, #7
 80063c6:	601a      	str	r2, [r3, #0]
}
 80063c8:	bf00      	nop
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	e000e010 	.word	0xe000e010
 80063d8:	e000e018 	.word	0xe000e018
 80063dc:	20000000 	.word	0x20000000
 80063e0:	10624dd3 	.word	0x10624dd3
 80063e4:	e000e014 	.word	0xe000e014

080063e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063f8 <vPortEnableVFP+0x10>
 80063ec:	6801      	ldr	r1, [r0, #0]
 80063ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063f2:	6001      	str	r1, [r0, #0]
 80063f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063f6:	bf00      	nop
 80063f8:	e000ed88 	.word	0xe000ed88

080063fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08a      	sub	sp, #40	; 0x28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006404:	2300      	movs	r3, #0
 8006406:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006408:	f7ff fb22 	bl	8005a50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800640c:	4b5b      	ldr	r3, [pc, #364]	; (800657c <pvPortMalloc+0x180>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006414:	f000 f91a 	bl	800664c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006418:	4b59      	ldr	r3, [pc, #356]	; (8006580 <pvPortMalloc+0x184>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4013      	ands	r3, r2
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 8092 	bne.w	800654a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d01f      	beq.n	800646c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800642c:	2208      	movs	r2, #8
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4413      	add	r3, r2
 8006432:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	2b00      	cmp	r3, #0
 800643c:	d016      	beq.n	800646c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f023 0307 	bic.w	r3, r3, #7
 8006444:	3308      	adds	r3, #8
 8006446:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00c      	beq.n	800646c <pvPortMalloc+0x70>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	b672      	cpsid	i
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	b662      	cpsie	i
 8006466:	617b      	str	r3, [r7, #20]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d06b      	beq.n	800654a <pvPortMalloc+0x14e>
 8006472:	4b44      	ldr	r3, [pc, #272]	; (8006584 <pvPortMalloc+0x188>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	429a      	cmp	r2, r3
 800647a:	d866      	bhi.n	800654a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800647c:	4b42      	ldr	r3, [pc, #264]	; (8006588 <pvPortMalloc+0x18c>)
 800647e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006480:	4b41      	ldr	r3, [pc, #260]	; (8006588 <pvPortMalloc+0x18c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006486:	e004      	b.n	8006492 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	429a      	cmp	r2, r3
 800649a:	d903      	bls.n	80064a4 <pvPortMalloc+0xa8>
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f1      	bne.n	8006488 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064a4:	4b35      	ldr	r3, [pc, #212]	; (800657c <pvPortMalloc+0x180>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d04d      	beq.n	800654a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2208      	movs	r2, #8
 80064b4:	4413      	add	r3, r2
 80064b6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	1ad2      	subs	r2, r2, r3
 80064c8:	2308      	movs	r3, #8
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d921      	bls.n	8006514 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4413      	add	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	f003 0307 	and.w	r3, r3, #7
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00c      	beq.n	80064fc <pvPortMalloc+0x100>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	b672      	cpsid	i
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	b662      	cpsie	i
 80064f6:	613b      	str	r3, [r7, #16]
}
 80064f8:	bf00      	nop
 80064fa:	e7fe      	b.n	80064fa <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	1ad2      	subs	r2, r2, r3
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800650e:	69b8      	ldr	r0, [r7, #24]
 8006510:	f000 f8fe 	bl	8006710 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006514:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <pvPortMalloc+0x188>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	4a19      	ldr	r2, [pc, #100]	; (8006584 <pvPortMalloc+0x188>)
 8006520:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006522:	4b18      	ldr	r3, [pc, #96]	; (8006584 <pvPortMalloc+0x188>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4b19      	ldr	r3, [pc, #100]	; (800658c <pvPortMalloc+0x190>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d203      	bcs.n	8006536 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800652e:	4b15      	ldr	r3, [pc, #84]	; (8006584 <pvPortMalloc+0x188>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a16      	ldr	r2, [pc, #88]	; (800658c <pvPortMalloc+0x190>)
 8006534:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	4b11      	ldr	r3, [pc, #68]	; (8006580 <pvPortMalloc+0x184>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	431a      	orrs	r2, r3
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800654a:	f7ff fa8f 	bl	8005a6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00c      	beq.n	8006572 <pvPortMalloc+0x176>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	b672      	cpsid	i
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	b662      	cpsie	i
 800656c:	60fb      	str	r3, [r7, #12]
}
 800656e:	bf00      	nop
 8006570:	e7fe      	b.n	8006570 <pvPortMalloc+0x174>
	return pvReturn;
 8006572:	69fb      	ldr	r3, [r7, #28]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3728      	adds	r7, #40	; 0x28
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	2001d028 	.word	0x2001d028
 8006580:	2001d034 	.word	0x2001d034
 8006584:	2001d02c 	.word	0x2001d02c
 8006588:	2001d020 	.word	0x2001d020
 800658c:	2001d030 	.word	0x2001d030

08006590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d04c      	beq.n	800663c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065a2:	2308      	movs	r3, #8
 80065a4:	425b      	negs	r3, r3
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4413      	add	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	4b23      	ldr	r3, [pc, #140]	; (8006644 <vPortFree+0xb4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4013      	ands	r3, r2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10c      	bne.n	80065d8 <vPortFree+0x48>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	b672      	cpsid	i
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	b662      	cpsie	i
 80065d2:	60fb      	str	r3, [r7, #12]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00c      	beq.n	80065fa <vPortFree+0x6a>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	b672      	cpsid	i
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	b662      	cpsie	i
 80065f4:	60bb      	str	r3, [r7, #8]
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	4b11      	ldr	r3, [pc, #68]	; (8006644 <vPortFree+0xb4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4013      	ands	r3, r2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d019      	beq.n	800663c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d115      	bne.n	800663c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	4b0b      	ldr	r3, [pc, #44]	; (8006644 <vPortFree+0xb4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	43db      	mvns	r3, r3
 800661a:	401a      	ands	r2, r3
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006620:	f7ff fa16 	bl	8005a50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	4b07      	ldr	r3, [pc, #28]	; (8006648 <vPortFree+0xb8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4413      	add	r3, r2
 800662e:	4a06      	ldr	r2, [pc, #24]	; (8006648 <vPortFree+0xb8>)
 8006630:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006632:	6938      	ldr	r0, [r7, #16]
 8006634:	f000 f86c 	bl	8006710 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006638:	f7ff fa18 	bl	8005a6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800663c:	bf00      	nop
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	2001d034 	.word	0x2001d034
 8006648:	2001d02c 	.word	0x2001d02c

0800664c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006652:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006656:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006658:	4b27      	ldr	r3, [pc, #156]	; (80066f8 <prvHeapInit+0xac>)
 800665a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00c      	beq.n	8006680 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3307      	adds	r3, #7
 800666a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0307 	bic.w	r3, r3, #7
 8006672:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	4a1f      	ldr	r2, [pc, #124]	; (80066f8 <prvHeapInit+0xac>)
 800667c:	4413      	add	r3, r2
 800667e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006684:	4a1d      	ldr	r2, [pc, #116]	; (80066fc <prvHeapInit+0xb0>)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800668a:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <prvHeapInit+0xb0>)
 800668c:	2200      	movs	r2, #0
 800668e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	4413      	add	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006698:	2208      	movs	r2, #8
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0307 	bic.w	r3, r3, #7
 80066a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4a15      	ldr	r2, [pc, #84]	; (8006700 <prvHeapInit+0xb4>)
 80066ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066ae:	4b14      	ldr	r3, [pc, #80]	; (8006700 <prvHeapInit+0xb4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2200      	movs	r2, #0
 80066b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066b6:	4b12      	ldr	r3, [pc, #72]	; (8006700 <prvHeapInit+0xb4>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	1ad2      	subs	r2, r2, r3
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066cc:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <prvHeapInit+0xb4>)
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	4a0a      	ldr	r2, [pc, #40]	; (8006704 <prvHeapInit+0xb8>)
 80066da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	4a09      	ldr	r2, [pc, #36]	; (8006708 <prvHeapInit+0xbc>)
 80066e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066e4:	4b09      	ldr	r3, [pc, #36]	; (800670c <prvHeapInit+0xc0>)
 80066e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066ea:	601a      	str	r2, [r3, #0]
}
 80066ec:	bf00      	nop
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	20019420 	.word	0x20019420
 80066fc:	2001d020 	.word	0x2001d020
 8006700:	2001d028 	.word	0x2001d028
 8006704:	2001d030 	.word	0x2001d030
 8006708:	2001d02c 	.word	0x2001d02c
 800670c:	2001d034 	.word	0x2001d034

08006710 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006718:	4b28      	ldr	r3, [pc, #160]	; (80067bc <prvInsertBlockIntoFreeList+0xac>)
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	e002      	b.n	8006724 <prvInsertBlockIntoFreeList+0x14>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	429a      	cmp	r2, r3
 800672c:	d8f7      	bhi.n	800671e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	4413      	add	r3, r2
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	429a      	cmp	r2, r3
 800673e:	d108      	bne.n	8006752 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	441a      	add	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	441a      	add	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d118      	bne.n	8006798 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	4b15      	ldr	r3, [pc, #84]	; (80067c0 <prvInsertBlockIntoFreeList+0xb0>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d00d      	beq.n	800678e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	441a      	add	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e008      	b.n	80067a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800678e:	4b0c      	ldr	r3, [pc, #48]	; (80067c0 <prvInsertBlockIntoFreeList+0xb0>)
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	e003      	b.n	80067a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d002      	beq.n	80067ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	2001d020 	.word	0x2001d020
 80067c0:	2001d028 	.word	0x2001d028

080067c4 <WINDOW_Callback>:
 80067c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067c8:	6845      	ldr	r5, [r0, #4]
 80067ca:	4604      	mov	r4, r0
 80067cc:	4628      	mov	r0, r5
 80067ce:	f009 fac7 	bl	800fd60 <GUI_ALLOC_LockH>
 80067d2:	af02      	add	r7, sp, #8
 80067d4:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80067d6:	f847 0d08 	str.w	r0, [r7, #-8]!
 80067da:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
 80067de:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 80067e2:	4668      	mov	r0, sp
 80067e4:	f009 faca 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	2b1f      	cmp	r3, #31
 80067ec:	d02f      	beq.n	800684e <WINDOW_Callback+0x8a>
 80067ee:	dc06      	bgt.n	80067fe <WINDOW_Callback+0x3a>
 80067f0:	2b0f      	cmp	r3, #15
 80067f2:	d060      	beq.n	80068b6 <WINDOW_Callback+0xf2>
 80067f4:	2b1e      	cmp	r3, #30
 80067f6:	d015      	beq.n	8006824 <WINDOW_Callback+0x60>
 80067f8:	2b0e      	cmp	r3, #14
 80067fa:	d169      	bne.n	80068d0 <WINDOW_Callback+0x10c>
 80067fc:	e04a      	b.n	8006894 <WINDOW_Callback+0xd0>
 80067fe:	2b22      	cmp	r3, #34	; 0x22
 8006800:	d063      	beq.n	80068ca <WINDOW_Callback+0x106>
 8006802:	2b2a      	cmp	r3, #42	; 0x2a
 8006804:	d002      	beq.n	800680c <WINDOW_Callback+0x48>
 8006806:	2b20      	cmp	r3, #32
 8006808:	d162      	bne.n	80068d0 <WINDOW_Callback+0x10c>
 800680a:	e025      	b.n	8006858 <WINDOW_Callback+0x94>
 800680c:	4628      	mov	r0, r5
 800680e:	f009 faa7 	bl	800fd60 <GUI_ALLOC_LockH>
 8006812:	68e3      	ldr	r3, [r4, #12]
 8006814:	9000      	str	r0, [sp, #0]
 8006816:	b10b      	cbz	r3, 800681c <WINDOW_Callback+0x58>
 8006818:	63c3      	str	r3, [r0, #60]	; 0x3c
 800681a:	e001      	b.n	8006820 <WINDOW_Callback+0x5c>
 800681c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800681e:	60e3      	str	r3, [r4, #12]
 8006820:	4668      	mov	r0, sp
 8006822:	e034      	b.n	800688e <WINDOW_Callback+0xca>
 8006824:	68e4      	ldr	r4, [r4, #12]
 8006826:	2c01      	cmp	r4, #1
 8006828:	d15b      	bne.n	80068e2 <WINDOW_Callback+0x11e>
 800682a:	4630      	mov	r0, r6
 800682c:	f002 ff11 	bl	8009652 <WM_IsWindow>
 8006830:	2800      	cmp	r0, #0
 8006832:	d03c      	beq.n	80068ae <WINDOW_Callback+0xea>
 8006834:	4630      	mov	r0, r6
 8006836:	f002 fd6d 	bl	8009314 <WM_SetFocus>
 800683a:	4630      	mov	r0, r6
 800683c:	f002 ff3a 	bl	80096b4 <WM_HasFocus>
 8006840:	2800      	cmp	r0, #0
 8006842:	d04e      	beq.n	80068e2 <WINDOW_Callback+0x11e>
 8006844:	4630      	mov	r0, r6
 8006846:	4621      	mov	r1, r4
 8006848:	f000 f912 	bl	8006a70 <WIDGET_OrState>
 800684c:	e049      	b.n	80068e2 <WINDOW_Callback+0x11e>
 800684e:	4628      	mov	r0, r5
 8006850:	4621      	mov	r1, r4
 8006852:	f000 f941 	bl	8006ad8 <WIDGET_HandleActive>
 8006856:	e044      	b.n	80068e2 <WINDOW_Callback+0x11e>
 8006858:	4628      	mov	r0, r5
 800685a:	f009 fa81 	bl	800fd60 <GUI_ALLOC_LockH>
 800685e:	68e4      	ldr	r4, [r4, #12]
 8006860:	9001      	str	r0, [sp, #4]
 8006862:	b19c      	cbz	r4, 800688c <WINDOW_Callback+0xc8>
 8006864:	6860      	ldr	r0, [r4, #4]
 8006866:	4629      	mov	r1, r5
 8006868:	f002 fc28 	bl	80090bc <WM__IsAncestorOrSelf>
 800686c:	b930      	cbnz	r0, 800687c <WINDOW_Callback+0xb8>
 800686e:	6820      	ldr	r0, [r4, #0]
 8006870:	4629      	mov	r1, r5
 8006872:	f002 fc12 	bl	800909a <WM__IsAncestor>
 8006876:	b148      	cbz	r0, 800688c <WINDOW_Callback+0xc8>
 8006878:	6822      	ldr	r2, [r4, #0]
 800687a:	e005      	b.n	8006888 <WINDOW_Callback+0xc4>
 800687c:	6860      	ldr	r0, [r4, #4]
 800687e:	4629      	mov	r1, r5
 8006880:	f002 fc0b 	bl	800909a <WM__IsAncestor>
 8006884:	b110      	cbz	r0, 800688c <WINDOW_Callback+0xc8>
 8006886:	6862      	ldr	r2, [r4, #4]
 8006888:	9b01      	ldr	r3, [sp, #4]
 800688a:	639a      	str	r2, [r3, #56]	; 0x38
 800688c:	a801      	add	r0, sp, #4
 800688e:	f009 fa75 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006892:	e026      	b.n	80068e2 <WINDOW_Callback+0x11e>
 8006894:	68e3      	ldr	r3, [r4, #12]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	2a00      	cmp	r2, #0
 800689a:	dd19      	ble.n	80068d0 <WINDOW_Callback+0x10c>
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b09      	cmp	r3, #9
 80068a0:	d005      	beq.n	80068ae <WINDOW_Callback+0xea>
 80068a2:	2b0a      	cmp	r3, #10
 80068a4:	d114      	bne.n	80068d0 <WINDOW_Callback+0x10c>
 80068a6:	4628      	mov	r0, r5
 80068a8:	f002 fcd3 	bl	8009252 <WM_SetFocusOnPrevChild>
 80068ac:	e019      	b.n	80068e2 <WINDOW_Callback+0x11e>
 80068ae:	4628      	mov	r0, r5
 80068b0:	f002 fcfe 	bl	80092b0 <WM_SetFocusOnNextChild>
 80068b4:	e015      	b.n	80068e2 <WINDOW_Callback+0x11e>
 80068b6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80068ba:	4598      	cmp	r8, r3
 80068bc:	d008      	beq.n	80068d0 <WINDOW_Callback+0x10c>
 80068be:	4640      	mov	r0, r8
 80068c0:	f007 f852 	bl	800d968 <LCD_SetBkColor>
 80068c4:	f008 fe28 	bl	800f518 <GUI_Clear>
 80068c8:	e002      	b.n	80068d0 <WINDOW_Callback+0x10c>
 80068ca:	f8c4 800c 	str.w	r8, [r4, #12]
 80068ce:	e008      	b.n	80068e2 <WINDOW_Callback+0x11e>
 80068d0:	f1b9 0f00 	cmp.w	r9, #0
 80068d4:	d002      	beq.n	80068dc <WINDOW_Callback+0x118>
 80068d6:	4620      	mov	r0, r4
 80068d8:	47c8      	blx	r9
 80068da:	e002      	b.n	80068e2 <WINDOW_Callback+0x11e>
 80068dc:	4620      	mov	r0, r4
 80068de:	f004 f981 	bl	800abe4 <WM_DefaultProc>
 80068e2:	b003      	add	sp, #12
 80068e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080068e8 <WINDOW_CreateUser>:
 80068e8:	b510      	push	{r4, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	9c08      	ldr	r4, [sp, #32]
 80068ee:	9400      	str	r4, [sp, #0]
 80068f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80068f2:	9401      	str	r4, [sp, #4]
 80068f4:	4c0f      	ldr	r4, [pc, #60]	; (8006934 <WINDOW_CreateUser+0x4c>)
 80068f6:	9402      	str	r4, [sp, #8]
 80068f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80068fa:	3418      	adds	r4, #24
 80068fc:	9403      	str	r4, [sp, #12]
 80068fe:	f003 fd81 	bl	800a404 <WM_CreateWindowAsChild>
 8006902:	4604      	mov	r4, r0
 8006904:	b190      	cbz	r0, 800692c <WINDOW_CreateUser+0x44>
 8006906:	f009 fa2b 	bl	800fd60 <GUI_ALLOC_LockH>
 800690a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800690c:	9005      	str	r0, [sp, #20]
 800690e:	2210      	movs	r2, #16
 8006910:	f000 f8da 	bl	8006ac8 <WIDGET__Init>
 8006914:	a806      	add	r0, sp, #24
 8006916:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006918:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 800691c:	6351      	str	r1, [r2, #52]	; 0x34
 800691e:	2100      	movs	r1, #0
 8006920:	6391      	str	r1, [r2, #56]	; 0x38
 8006922:	4905      	ldr	r1, [pc, #20]	; (8006938 <WINDOW_CreateUser+0x50>)
 8006924:	6809      	ldr	r1, [r1, #0]
 8006926:	6411      	str	r1, [r2, #64]	; 0x40
 8006928:	f009 fa28 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800692c:	4620      	mov	r0, r4
 800692e:	b006      	add	sp, #24
 8006930:	bd10      	pop	{r4, pc}
 8006932:	bf00      	nop
 8006934:	080067c5 	.word	0x080067c5
 8006938:	20000010 	.word	0x20000010

0800693c <WINDOW_CreateIndirect>:
 800693c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693e:	b087      	sub	sp, #28
 8006940:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8006944:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8006948:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 800694c:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8006950:	9100      	str	r1, [sp, #0]
 8006952:	8a41      	ldrh	r1, [r0, #18]
 8006954:	9101      	str	r1, [sp, #4]
 8006956:	2100      	movs	r1, #0
 8006958:	9102      	str	r1, [sp, #8]
 800695a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800695e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006960:	9103      	str	r1, [sp, #12]
 8006962:	9404      	str	r4, [sp, #16]
 8006964:	6984      	ldr	r4, [r0, #24]
 8006966:	9405      	str	r4, [sp, #20]
 8006968:	eb0e 0002 	add.w	r0, lr, r2
 800696c:	18f9      	adds	r1, r7, r3
 800696e:	4632      	mov	r2, r6
 8006970:	462b      	mov	r3, r5
 8006972:	f7ff ffb9 	bl	80068e8 <WINDOW_CreateUser>
 8006976:	b007      	add	sp, #28
 8006978:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800697a <_EffectRequiresRedraw>:
 800697a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800697c:	460d      	mov	r5, r1
 800697e:	f100 0108 	add.w	r1, r0, #8
 8006982:	4602      	mov	r2, r0
 8006984:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006986:	c903      	ldmia	r1, {r0, r1}
 8006988:	681c      	ldr	r4, [r3, #0]
 800698a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800698e:	4610      	mov	r0, r2
 8006990:	4669      	mov	r1, sp
 8006992:	f002 fb79 	bl	8009088 <WM__Screen2Client>
 8006996:	f9b5 2000 	ldrsh.w	r2, [r5]
 800699a:	f9bd 3000 	ldrsh.w	r3, [sp]
 800699e:	4422      	add	r2, r4
 80069a0:	429a      	cmp	r2, r3
 80069a2:	dc17      	bgt.n	80069d4 <_EffectRequiresRedraw+0x5a>
 80069a4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80069a8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80069ac:	1b12      	subs	r2, r2, r4
 80069ae:	429a      	cmp	r2, r3
 80069b0:	db10      	blt.n	80069d4 <_EffectRequiresRedraw+0x5a>
 80069b2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80069b6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80069ba:	4422      	add	r2, r4
 80069bc:	429a      	cmp	r2, r3
 80069be:	dc09      	bgt.n	80069d4 <_EffectRequiresRedraw+0x5a>
 80069c0:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 80069c4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80069c8:	1b04      	subs	r4, r0, r4
 80069ca:	429c      	cmp	r4, r3
 80069cc:	bfac      	ite	ge
 80069ce:	2000      	movge	r0, #0
 80069d0:	2001      	movlt	r0, #1
 80069d2:	e000      	b.n	80069d6 <_EffectRequiresRedraw+0x5c>
 80069d4:	2001      	movs	r0, #1
 80069d6:	b003      	add	sp, #12
 80069d8:	bd30      	pop	{r4, r5, pc}

080069da <WIDGET__RotateRect90>:
 80069da:	f9b0 3000 	ldrsh.w	r3, [r0]
 80069de:	b570      	push	{r4, r5, r6, lr}
 80069e0:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 80069e4:	8815      	ldrh	r5, [r2, #0]
 80069e6:	88d0      	ldrh	r0, [r2, #6]
 80069e8:	8894      	ldrh	r4, [r2, #4]
 80069ea:	8852      	ldrh	r2, [r2, #2]
 80069ec:	804d      	strh	r5, [r1, #2]
 80069ee:	1af3      	subs	r3, r6, r3
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	1a18      	subs	r0, r3, r0
 80069f4:	1a9b      	subs	r3, r3, r2
 80069f6:	8008      	strh	r0, [r1, #0]
 80069f8:	808b      	strh	r3, [r1, #4]
 80069fa:	80cc      	strh	r4, [r1, #6]
 80069fc:	bd70      	pop	{r4, r5, r6, pc}

080069fe <WIDGET__GetClientRect>:
 80069fe:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006a00:	071b      	lsls	r3, r3, #28
 8006a02:	b513      	push	{r0, r1, r4, lr}
 8006a04:	460c      	mov	r4, r1
 8006a06:	d50f      	bpl.n	8006a28 <WIDGET__GetClientRect+0x2a>
 8006a08:	4668      	mov	r0, sp
 8006a0a:	f002 ffa1 	bl	8009950 <WM_GetClientRect>
 8006a0e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8006a12:	8023      	strh	r3, [r4, #0]
 8006a14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006a18:	80a3      	strh	r3, [r4, #4]
 8006a1a:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a1e:	8063      	strh	r3, [r4, #2]
 8006a20:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006a24:	80e3      	strh	r3, [r4, #6]
 8006a26:	e002      	b.n	8006a2e <WIDGET__GetClientRect+0x30>
 8006a28:	4608      	mov	r0, r1
 8006a2a:	f002 ff91 	bl	8009950 <WM_GetClientRect>
 8006a2e:	b002      	add	sp, #8
 8006a30:	bd10      	pop	{r4, pc}

08006a32 <WIDGET__GetInsideRect>:
 8006a32:	b538      	push	{r3, r4, r5, lr}
 8006a34:	4604      	mov	r4, r0
 8006a36:	460d      	mov	r5, r1
 8006a38:	f003 fc5b 	bl	800a2f2 <WM__GetClientRectWin>
 8006a3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a3e:	4628      	mov	r0, r5
 8006a40:	4629      	mov	r1, r5
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a48:	f007 b83a 	b.w	800dac0 <GUI__ReduceRect>

08006a4c <WIDGET_SetState>:
 8006a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a4e:	460c      	mov	r4, r1
 8006a50:	4605      	mov	r5, r0
 8006a52:	f009 f985 	bl	800fd60 <GUI_ALLOC_LockH>
 8006a56:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8006a58:	9001      	str	r0, [sp, #4]
 8006a5a:	4294      	cmp	r4, r2
 8006a5c:	d003      	beq.n	8006a66 <WIDGET_SetState+0x1a>
 8006a5e:	8644      	strh	r4, [r0, #50]	; 0x32
 8006a60:	4628      	mov	r0, r5
 8006a62:	f003 fc8e 	bl	800a382 <WM_InvalidateWindow>
 8006a66:	a801      	add	r0, sp, #4
 8006a68:	f009 f988 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006a6c:	b003      	add	sp, #12
 8006a6e:	bd30      	pop	{r4, r5, pc}

08006a70 <WIDGET_OrState>:
 8006a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a72:	460c      	mov	r4, r1
 8006a74:	4605      	mov	r5, r0
 8006a76:	b178      	cbz	r0, 8006a98 <WIDGET_OrState+0x28>
 8006a78:	f009 f972 	bl	800fd60 <GUI_ALLOC_LockH>
 8006a7c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8006a7e:	9001      	str	r0, [sp, #4]
 8006a80:	ea04 0102 	and.w	r1, r4, r2
 8006a84:	428c      	cmp	r4, r1
 8006a86:	d004      	beq.n	8006a92 <WIDGET_OrState+0x22>
 8006a88:	4314      	orrs	r4, r2
 8006a8a:	8644      	strh	r4, [r0, #50]	; 0x32
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f003 fc78 	bl	800a382 <WM_InvalidateWindow>
 8006a92:	a801      	add	r0, sp, #4
 8006a94:	f009 f972 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006a98:	b003      	add	sp, #12
 8006a9a:	bd30      	pop	{r4, r5, pc}

08006a9c <WIDGET_AndState>:
 8006a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a9e:	460d      	mov	r5, r1
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	b170      	cbz	r0, 8006ac2 <WIDGET_AndState+0x26>
 8006aa4:	f009 f95c 	bl	800fd60 <GUI_ALLOC_LockH>
 8006aa8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8006aaa:	9001      	str	r0, [sp, #4]
 8006aac:	ea22 0105 	bic.w	r1, r2, r5
 8006ab0:	428a      	cmp	r2, r1
 8006ab2:	d003      	beq.n	8006abc <WIDGET_AndState+0x20>
 8006ab4:	8641      	strh	r1, [r0, #50]	; 0x32
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f003 fc63 	bl	800a382 <WM_InvalidateWindow>
 8006abc:	a801      	add	r0, sp, #4
 8006abe:	f009 f95d 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006ac2:	b003      	add	sp, #12
 8006ac4:	bd30      	pop	{r4, r5, pc}
	...

08006ac8 <WIDGET__Init>:
 8006ac8:	4b02      	ldr	r3, [pc, #8]	; (8006ad4 <WIDGET__Init+0xc>)
 8006aca:	8642      	strh	r2, [r0, #50]	; 0x32
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	62c3      	str	r3, [r0, #44]	; 0x2c
 8006ad0:	8601      	strh	r1, [r0, #48]	; 0x30
 8006ad2:	4770      	bx	lr
 8006ad4:	20000014 	.word	0x20000014

08006ad8 <WIDGET_HandleActive>:
 8006ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ada:	460d      	mov	r5, r1
 8006adc:	b085      	sub	sp, #20
 8006ade:	4606      	mov	r6, r0
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	f000 8093 	beq.w	8006c0c <WIDGET_HandleActive+0x134>
 8006ae6:	f009 f93b 	bl	800fd60 <GUI_ALLOC_LockH>
 8006aea:	682b      	ldr	r3, [r5, #0]
 8006aec:	9002      	str	r0, [sp, #8]
 8006aee:	2b16      	cmp	r3, #22
 8006af0:	d052      	beq.n	8006b98 <WIDGET_HandleActive+0xc0>
 8006af2:	dc0c      	bgt.n	8006b0e <WIDGET_HandleActive+0x36>
 8006af4:	2b11      	cmp	r3, #17
 8006af6:	d033      	beq.n	8006b60 <WIDGET_HandleActive+0x88>
 8006af8:	dc02      	bgt.n	8006b00 <WIDGET_HandleActive+0x28>
 8006afa:	2b0d      	cmp	r3, #13
 8006afc:	d03e      	beq.n	8006b7c <WIDGET_HandleActive+0xa4>
 8006afe:	e07e      	b.n	8006bfe <WIDGET_HandleActive+0x126>
 8006b00:	2b14      	cmp	r3, #20
 8006b02:	d077      	beq.n	8006bf4 <WIDGET_HandleActive+0x11c>
 8006b04:	2b15      	cmp	r3, #21
 8006b06:	d17a      	bne.n	8006bfe <WIDGET_HandleActive+0x126>
 8006b08:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 8006b0c:	e070      	b.n	8006bf0 <WIDGET_HandleActive+0x118>
 8006b0e:	2b1f      	cmp	r3, #31
 8006b10:	d06b      	beq.n	8006bea <WIDGET_HandleActive+0x112>
 8006b12:	dc02      	bgt.n	8006b1a <WIDGET_HandleActive+0x42>
 8006b14:	2b1e      	cmp	r3, #30
 8006b16:	d042      	beq.n	8006b9e <WIDGET_HandleActive+0xc6>
 8006b18:	e071      	b.n	8006bfe <WIDGET_HandleActive+0x126>
 8006b1a:	2b31      	cmp	r3, #49	; 0x31
 8006b1c:	d01e      	beq.n	8006b5c <WIDGET_HandleActive+0x84>
 8006b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b22:	d16c      	bne.n	8006bfe <WIDGET_HandleActive+0x126>
 8006b24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006b26:	6819      	ldr	r1, [r3, #0]
 8006b28:	68eb      	ldr	r3, [r5, #12]
 8006b2a:	62c3      	str	r3, [r0, #44]	; 0x2c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	a802      	add	r0, sp, #8
 8006b30:	1acd      	subs	r5, r1, r3
 8006b32:	f009 f923 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006b36:	4630      	mov	r0, r6
 8006b38:	f009 f912 	bl	800fd60 <GUI_ALLOC_LockH>
 8006b3c:	ac04      	add	r4, sp, #16
 8006b3e:	4269      	negs	r1, r5
 8006b40:	f844 0d04 	str.w	r0, [r4, #-4]!
 8006b44:	460a      	mov	r2, r1
 8006b46:	462b      	mov	r3, r5
 8006b48:	9500      	str	r5, [sp, #0]
 8006b4a:	f002 fa04 	bl	8008f56 <WM__UpdateChildPositions>
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f009 f914 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006b54:	4630      	mov	r0, r6
 8006b56:	f003 fc14 	bl	800a382 <WM_InvalidateWindow>
 8006b5a:	e04e      	b.n	8006bfa <WIDGET_HandleActive+0x122>
 8006b5c:	2400      	movs	r4, #0
 8006b5e:	e03f      	b.n	8006be0 <WIDGET_HandleActive+0x108>
 8006b60:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006b62:	06d9      	lsls	r1, r3, #27
 8006b64:	d54b      	bpl.n	8006bfe <WIDGET_HandleActive+0x126>
 8006b66:	68eb      	ldr	r3, [r5, #12]
 8006b68:	7a1b      	ldrb	r3, [r3, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d047      	beq.n	8006bfe <WIDGET_HandleActive+0x126>
 8006b6e:	a802      	add	r0, sp, #8
 8006b70:	f009 f904 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006b74:	4630      	mov	r0, r6
 8006b76:	f002 fbcd 	bl	8009314 <WM_SetFocus>
 8006b7a:	e040      	b.n	8006bfe <WIDGET_HandleActive+0x126>
 8006b7c:	68eb      	ldr	r3, [r5, #12]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d03c      	beq.n	8006bfe <WIDGET_HandleActive+0x126>
 8006b84:	7a1b      	ldrb	r3, [r3, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d039      	beq.n	8006bfe <WIDGET_HandleActive+0x126>
 8006b8a:	a802      	add	r0, sp, #8
 8006b8c:	f009 f8f6 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006b90:	4630      	mov	r0, r6
 8006b92:	f002 ff1f 	bl	80099d4 <WM_BringToTop>
 8006b96:	e030      	b.n	8006bfa <WIDGET_HandleActive+0x122>
 8006b98:	68eb      	ldr	r3, [r5, #12]
 8006b9a:	8603      	strh	r3, [r0, #48]	; 0x30
 8006b9c:	e02d      	b.n	8006bfa <WIDGET_HandleActive+0x122>
 8006b9e:	68eb      	ldr	r3, [r5, #12]
 8006ba0:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d108      	bne.n	8006bb8 <WIDGET_HandleActive+0xe0>
 8006ba6:	06ca      	lsls	r2, r1, #27
 8006ba8:	d50d      	bpl.n	8006bc6 <WIDGET_HandleActive+0xee>
 8006baa:	4630      	mov	r0, r6
 8006bac:	f041 0101 	orr.w	r1, r1, #1
 8006bb0:	f7ff ff4c 	bl	8006a4c <WIDGET_SetState>
 8006bb4:	2708      	movs	r7, #8
 8006bb6:	e008      	b.n	8006bca <WIDGET_HandleActive+0xf2>
 8006bb8:	f021 0101 	bic.w	r1, r1, #1
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f7ff ff45 	bl	8006a4c <WIDGET_SetState>
 8006bc2:	2709      	movs	r7, #9
 8006bc4:	e001      	b.n	8006bca <WIDGET_HandleActive+0xf2>
 8006bc6:	f04f 37ff 	mov.w	r7, #4294967295
 8006bca:	a802      	add	r0, sp, #8
 8006bcc:	f009 f8d6 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006bd0:	1c7b      	adds	r3, r7, #1
 8006bd2:	f04f 0400 	mov.w	r4, #0
 8006bd6:	d005      	beq.n	8006be4 <WIDGET_HandleActive+0x10c>
 8006bd8:	4630      	mov	r0, r6
 8006bda:	4639      	mov	r1, r7
 8006bdc:	f002 fca3 	bl	8009526 <WM_NotifyParent>
 8006be0:	60ec      	str	r4, [r5, #12]
 8006be2:	e00d      	b.n	8006c00 <WIDGET_HandleActive+0x128>
 8006be4:	2301      	movs	r3, #1
 8006be6:	60eb      	str	r3, [r5, #12]
 8006be8:	e00a      	b.n	8006c00 <WIDGET_HandleActive+0x128>
 8006bea:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006bec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006bf0:	60eb      	str	r3, [r5, #12]
 8006bf2:	e002      	b.n	8006bfa <WIDGET_HandleActive+0x122>
 8006bf4:	68e9      	ldr	r1, [r5, #12]
 8006bf6:	f7ff ff1c 	bl	8006a32 <WIDGET__GetInsideRect>
 8006bfa:	2400      	movs	r4, #0
 8006bfc:	e000      	b.n	8006c00 <WIDGET_HandleActive+0x128>
 8006bfe:	2401      	movs	r4, #1
 8006c00:	9b02      	ldr	r3, [sp, #8]
 8006c02:	b123      	cbz	r3, 8006c0e <WIDGET_HandleActive+0x136>
 8006c04:	a802      	add	r0, sp, #8
 8006c06:	f009 f8b9 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006c0a:	e000      	b.n	8006c0e <WIDGET_HandleActive+0x136>
 8006c0c:	2401      	movs	r4, #1
 8006c0e:	4620      	mov	r0, r4
 8006c10:	b005      	add	sp, #20
 8006c12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c14 <WIDGET__SetScrollState>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	460d      	mov	r5, r1
 8006c18:	21fe      	movs	r1, #254	; 0xfe
 8006c1a:	4616      	mov	r6, r2
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	f002 fe65 	bl	80098ec <WM_GetDialogItem>
 8006c22:	4629      	mov	r1, r5
 8006c24:	f002 fafa 	bl	800921c <WM_SetScrollState>
 8006c28:	4620      	mov	r0, r4
 8006c2a:	21ff      	movs	r1, #255	; 0xff
 8006c2c:	f002 fe5e 	bl	80098ec <WM_GetDialogItem>
 8006c30:	4631      	mov	r1, r6
 8006c32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c36:	f002 baf1 	b.w	800921c <WM_SetScrollState>

08006c3a <WIDGET__DrawTriangle>:
 8006c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3c:	461c      	mov	r4, r3
 8006c3e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006c40:	9f06      	ldr	r7, [sp, #24]
 8006c42:	071b      	lsls	r3, r3, #28
 8006c44:	460d      	mov	r5, r1
 8006c46:	4616      	mov	r6, r2
 8006c48:	d50a      	bpl.n	8006c60 <WIDGET__DrawTriangle+0x26>
 8006c4a:	2c00      	cmp	r4, #0
 8006c4c:	db07      	blt.n	8006c5e <WIDGET__DrawTriangle+0x24>
 8006c4e:	4628      	mov	r0, r5
 8006c50:	1b31      	subs	r1, r6, r4
 8006c52:	19a2      	adds	r2, r4, r6
 8006c54:	f008 f99c 	bl	800ef90 <GUI_DrawHLine>
 8006c58:	3c01      	subs	r4, #1
 8006c5a:	443d      	add	r5, r7
 8006c5c:	e7f5      	b.n	8006c4a <WIDGET__DrawTriangle+0x10>
 8006c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c60:	2c00      	cmp	r4, #0
 8006c62:	db07      	blt.n	8006c74 <WIDGET__DrawTriangle+0x3a>
 8006c64:	4628      	mov	r0, r5
 8006c66:	1b31      	subs	r1, r6, r4
 8006c68:	19a2      	adds	r2, r4, r6
 8006c6a:	f008 f96f 	bl	800ef4c <GUI_DrawVLine>
 8006c6e:	3c01      	subs	r4, #1
 8006c70:	443d      	add	r5, r7
 8006c72:	e7f5      	b.n	8006c60 <WIDGET__DrawTriangle+0x26>
 8006c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c76 <WIDGET__EFFECT_DrawDownRect>:
 8006c76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c78:	4605      	mov	r5, r0
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	b919      	cbnz	r1, 8006c86 <WIDGET__EFFECT_DrawDownRect+0x10>
 8006c7e:	4668      	mov	r0, sp
 8006c80:	f002 fe66 	bl	8009950 <WM_GetClientRect>
 8006c84:	466c      	mov	r4, sp
 8006c86:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8006c88:	071b      	lsls	r3, r3, #28
 8006c8a:	d505      	bpl.n	8006c98 <WIDGET__EFFECT_DrawDownRect+0x22>
 8006c8c:	4622      	mov	r2, r4
 8006c8e:	4628      	mov	r0, r5
 8006c90:	4669      	mov	r1, sp
 8006c92:	f7ff fea2 	bl	80069da <WIDGET__RotateRect90>
 8006c96:	466c      	mov	r4, sp
 8006c98:	4628      	mov	r0, r5
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	f7ff fe6d 	bl	800697a <_EffectRequiresRedraw>
 8006ca0:	b118      	cbz	r0, 8006caa <WIDGET__EFFECT_DrawDownRect+0x34>
 8006ca2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	4798      	blx	r3
 8006caa:	b003      	add	sp, #12
 8006cac:	bd30      	pop	{r4, r5, pc}

08006cae <WIDGET__EFFECT_DrawDown>:
 8006cae:	2100      	movs	r1, #0
 8006cb0:	f7ff bfe1 	b.w	8006c76 <WIDGET__EFFECT_DrawDownRect>

08006cb4 <WIDGET_GetDefaultEffect>:
 8006cb4:	4b01      	ldr	r3, [pc, #4]	; (8006cbc <WIDGET_GetDefaultEffect+0x8>)
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	20000014 	.word	0x20000014

08006cc0 <TEXT_CreateIndirect>:
 8006cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8006cc8:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8006ccc:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8006cd0:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8006cd4:	9100      	str	r1, [sp, #0]
 8006cd6:	2102      	movs	r1, #2
 8006cd8:	9101      	str	r1, [sp, #4]
 8006cda:	8a41      	ldrh	r1, [r0, #18]
 8006cdc:	9102      	str	r1, [sp, #8]
 8006cde:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8006ce2:	9103      	str	r1, [sp, #12]
 8006ce4:	6844      	ldr	r4, [r0, #4]
 8006ce6:	9404      	str	r4, [sp, #16]
 8006ce8:	6984      	ldr	r4, [r0, #24]
 8006cea:	9405      	str	r4, [sp, #20]
 8006cec:	eb0e 0002 	add.w	r0, lr, r2
 8006cf0:	18f9      	adds	r1, r7, r3
 8006cf2:	4632      	mov	r2, r6
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	f000 f865 	bl	8006dc4 <TEXT_CreateUser>
 8006cfa:	b007      	add	sp, #28
 8006cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cfe <TEXT_Callback>:
 8006cfe:	b530      	push	{r4, r5, lr}
 8006d00:	6845      	ldr	r5, [r0, #4]
 8006d02:	4604      	mov	r4, r0
 8006d04:	b085      	sub	sp, #20
 8006d06:	4628      	mov	r0, r5
 8006d08:	4621      	mov	r1, r4
 8006d0a:	f7ff fee5 	bl	8006ad8 <WIDGET_HandleActive>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d056      	beq.n	8006dc0 <TEXT_Callback+0xc2>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	2b0f      	cmp	r3, #15
 8006d16:	d01e      	beq.n	8006d56 <TEXT_Callback+0x58>
 8006d18:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8006d1c:	d00e      	beq.n	8006d3c <TEXT_Callback+0x3e>
 8006d1e:	2b0b      	cmp	r3, #11
 8006d20:	d14b      	bne.n	8006dba <TEXT_Callback+0xbc>
 8006d22:	4628      	mov	r0, r5
 8006d24:	f009 f81c 	bl	800fd60 <GUI_ALLOC_LockH>
 8006d28:	ad04      	add	r5, sp, #16
 8006d2a:	f845 0d08 	str.w	r0, [r5, #-8]!
 8006d2e:	3044      	adds	r0, #68	; 0x44
 8006d30:	f009 fa6e 	bl	8010210 <GUI_ALLOC_FreePtr>
 8006d34:	4628      	mov	r0, r5
 8006d36:	f009 f821 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006d3a:	e03e      	b.n	8006dba <TEXT_Callback+0xbc>
 8006d3c:	68e3      	ldr	r3, [r4, #12]
 8006d3e:	b12b      	cbz	r3, 8006d4c <TEXT_Callback+0x4e>
 8006d40:	7a1b      	ldrb	r3, [r3, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	bf0c      	ite	eq
 8006d46:	2102      	moveq	r1, #2
 8006d48:	2101      	movne	r1, #1
 8006d4a:	e000      	b.n	8006d4e <TEXT_Callback+0x50>
 8006d4c:	2103      	movs	r1, #3
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f002 fbe9 	bl	8009526 <WM_NotifyParent>
 8006d54:	e031      	b.n	8006dba <TEXT_Callback+0xbc>
 8006d56:	4628      	mov	r0, r5
 8006d58:	f009 f802 	bl	800fd60 <GUI_ALLOC_LockH>
 8006d5c:	9000      	str	r0, [sp, #0]
 8006d5e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006d60:	f006 fe0a 	bl	800d978 <LCD_SetColor>
 8006d64:	9b00      	ldr	r3, [sp, #0]
 8006d66:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006d68:	f007 feb8 	bl	800eadc <GUI_SetFont>
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f002 f9f3 	bl	8009158 <WM_GetHasTrans>
 8006d72:	b928      	cbnz	r0, 8006d80 <TEXT_Callback+0x82>
 8006d74:	9b00      	ldr	r3, [sp, #0]
 8006d76:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006d78:	f006 fdf6 	bl	800d968 <LCD_SetBkColor>
 8006d7c:	f008 fbcc 	bl	800f518 <GUI_Clear>
 8006d80:	9b00      	ldr	r3, [sp, #0]
 8006d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d84:	b1ab      	cbz	r3, 8006db2 <TEXT_Callback+0xb4>
 8006d86:	2002      	movs	r0, #2
 8006d88:	f007 fe9e 	bl	800eac8 <GUI_SetTextMode>
 8006d8c:	a802      	add	r0, sp, #8
 8006d8e:	f002 fddf 	bl	8009950 <WM_GetClientRect>
 8006d92:	9b00      	ldr	r3, [sp, #0]
 8006d94:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8006d96:	f008 ffe3 	bl	800fd60 <GUI_ALLOC_LockH>
 8006d9a:	9b00      	ldr	r3, [sp, #0]
 8006d9c:	9001      	str	r0, [sp, #4]
 8006d9e:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8006da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006da6:	a902      	add	r1, sp, #8
 8006da8:	f008 f926 	bl	800eff8 <GUI_DispStringInRectWrap>
 8006dac:	a801      	add	r0, sp, #4
 8006dae:	f008 ffe5 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006db2:	4668      	mov	r0, sp
 8006db4:	f008 ffe2 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006db8:	e002      	b.n	8006dc0 <TEXT_Callback+0xc2>
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f003 ff12 	bl	800abe4 <WM_DefaultProc>
 8006dc0:	b005      	add	sp, #20
 8006dc2:	bd30      	pop	{r4, r5, pc}

08006dc4 <TEXT_CreateUser>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006dca:	9500      	str	r5, [sp, #0]
 8006dcc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006dce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006dd0:	f045 0501 	orr.w	r5, r5, #1
 8006dd4:	9501      	str	r5, [sp, #4]
 8006dd6:	4d1a      	ldr	r5, [pc, #104]	; (8006e40 <TEXT_CreateUser+0x7c>)
 8006dd8:	9502      	str	r5, [sp, #8]
 8006dda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006ddc:	3520      	adds	r5, #32
 8006dde:	9503      	str	r5, [sp, #12]
 8006de0:	f003 fb10 	bl	800a404 <WM_CreateWindowAsChild>
 8006de4:	4605      	mov	r5, r0
 8006de6:	b340      	cbz	r0, 8006e3a <TEXT_CreateUser+0x76>
 8006de8:	b18c      	cbz	r4, 8006e0e <TEXT_CreateUser+0x4a>
 8006dea:	4620      	mov	r0, r4
 8006dec:	f7f9 fa10 	bl	8000210 <strlen>
 8006df0:	3001      	adds	r0, #1
 8006df2:	f009 fa22 	bl	801023a <GUI_ALLOC_AllocZero>
 8006df6:	4606      	mov	r6, r0
 8006df8:	b150      	cbz	r0, 8006e10 <TEXT_CreateUser+0x4c>
 8006dfa:	f008 ffb1 	bl	800fd60 <GUI_ALLOC_LockH>
 8006dfe:	4621      	mov	r1, r4
 8006e00:	9005      	str	r0, [sp, #20]
 8006e02:	f00f fd89 	bl	8016918 <strcpy>
 8006e06:	a805      	add	r0, sp, #20
 8006e08:	f008 ffb8 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006e0c:	e000      	b.n	8006e10 <TEXT_CreateUser+0x4c>
 8006e0e:	4626      	mov	r6, r4
 8006e10:	4628      	mov	r0, r5
 8006e12:	f008 ffa5 	bl	800fd60 <GUI_ALLOC_LockH>
 8006e16:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e18:	9005      	str	r0, [sp, #20]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f7ff fe54 	bl	8006ac8 <WIDGET__Init>
 8006e20:	9c05      	ldr	r4, [sp, #20]
 8006e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e24:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <TEXT_CreateUser+0x80>)
 8006e2a:	6466      	str	r6, [r4, #68]	; 0x44
 8006e2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e2e:	3434      	adds	r4, #52	; 0x34
 8006e30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006e34:	a805      	add	r0, sp, #20
 8006e36:	f008 ffa1 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	b006      	add	sp, #24
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	08006cff 	.word	0x08006cff
 8006e44:	20000018 	.word	0x20000018

08006e48 <LISTVIEW_SetItemText>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	460f      	mov	r7, r1
 8006e4e:	b085      	sub	sp, #20
 8006e50:	4615      	mov	r5, r2
 8006e52:	461e      	mov	r6, r3
 8006e54:	4680      	mov	r8, r0
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d048      	beq.n	8006eec <LISTVIEW_SetItemText+0xa4>
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d046      	beq.n	8006eec <LISTVIEW_SetItemText+0xa4>
 8006e5e:	f008 ff7f 	bl	800fd60 <GUI_ALLOC_LockH>
 8006e62:	9002      	str	r0, [sp, #8]
 8006e64:	f000 f879 	bl	8006f5a <LISTVIEW__GetNumColumns>
 8006e68:	ac04      	add	r4, sp, #16
 8006e6a:	4683      	mov	fp, r0
 8006e6c:	9802      	ldr	r0, [sp, #8]
 8006e6e:	f000 f871 	bl	8006f54 <LISTVIEW__GetNumRows>
 8006e72:	f854 3d08 	ldr.w	r3, [r4, #-8]!
 8006e76:	4682      	mov	sl, r0
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8006e7e:	f008 ff7d 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006e82:	455f      	cmp	r7, fp
 8006e84:	d232      	bcs.n	8006eec <LISTVIEW_SetItemText+0xa4>
 8006e86:	4555      	cmp	r5, sl
 8006e88:	d230      	bcs.n	8006eec <LISTVIEW_SetItemText+0xa4>
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f006 fd7c 	bl	800d988 <GUI__strlen>
 8006e90:	4629      	mov	r1, r5
 8006e92:	4682      	mov	sl, r0
 8006e94:	4648      	mov	r0, r9
 8006e96:	f001 feac 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 8006e9a:	4601      	mov	r1, r0
 8006e9c:	a804      	add	r0, sp, #16
 8006e9e:	f8d1 9000 	ldr.w	r9, [r1]
 8006ea2:	f840 1d04 	str.w	r1, [r0, #-4]!
 8006ea6:	f008 ff69 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006eaa:	4648      	mov	r0, r9
 8006eac:	4639      	mov	r1, r7
 8006eae:	f10a 0209 	add.w	r2, sl, #9
 8006eb2:	f001 fd7f 	bl	80089b4 <GUI_ARRAY_ResizeItemLocked>
 8006eb6:	9001      	str	r0, [sp, #4]
 8006eb8:	b1c0      	cbz	r0, 8006eec <LISTVIEW_SetItemText+0xa4>
 8006eba:	4640      	mov	r0, r8
 8006ebc:	f008 ff50 	bl	800fd60 <GUI_ALLOC_LockH>
 8006ec0:	af04      	add	r7, sp, #16
 8006ec2:	9002      	str	r0, [sp, #8]
 8006ec4:	f857 0d0c 	ldr.w	r0, [r7, #-12]!
 8006ec8:	4631      	mov	r1, r6
 8006eca:	3004      	adds	r0, #4
 8006ecc:	f00f fd24 	bl	8016918 <strcpy>
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	f008 ff53 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006ed6:	9b02      	ldr	r3, [sp, #8]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4640      	mov	r0, r8
 8006edc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	f000 fa8e 	bl	8007402 <LISTVIEW__InvalidateRow>
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f008 ff48 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006eec:	b005      	add	sp, #20
 8006eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ef2 <LISTVIEW_SetGridVis>:
 8006ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ef4:	460e      	mov	r6, r1
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	b190      	cbz	r0, 8006f20 <LISTVIEW_SetGridVis+0x2e>
 8006efa:	f008 ff31 	bl	800fd60 <GUI_ALLOC_LockH>
 8006efe:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 8006f00:	9001      	str	r0, [sp, #4]
 8006f02:	42a6      	cmp	r6, r4
 8006f04:	d003      	beq.n	8006f0e <LISTVIEW_SetGridVis+0x1c>
 8006f06:	67c6      	str	r6, [r0, #124]	; 0x7c
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f000 f99b 	bl	8007244 <LISTVIEW__InvalidateInsideArea>
 8006f0e:	a801      	add	r0, sp, #4
 8006f10:	f008 ff34 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006f14:	42a6      	cmp	r6, r4
 8006f16:	d004      	beq.n	8006f22 <LISTVIEW_SetGridVis+0x30>
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f000 fb3d 	bl	8007598 <LISTVIEW__UpdateScrollParas>
 8006f1e:	e000      	b.n	8006f22 <LISTVIEW_SetGridVis+0x30>
 8006f20:	4604      	mov	r4, r0
 8006f22:	4620      	mov	r0, r4
 8006f24:	b002      	add	sp, #8
 8006f26:	bd70      	pop	{r4, r5, r6, pc}

08006f28 <LISTVIEW_SetFont>:
 8006f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f2a:	460d      	mov	r5, r1
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	b178      	cbz	r0, 8006f50 <LISTVIEW_SetFont+0x28>
 8006f30:	f008 ff16 	bl	800fd60 <GUI_ALLOC_LockH>
 8006f34:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006f36:	9001      	str	r0, [sp, #4]
 8006f38:	4295      	cmp	r5, r2
 8006f3a:	d006      	beq.n	8006f4a <LISTVIEW_SetFont+0x22>
 8006f3c:	6685      	str	r5, [r0, #104]	; 0x68
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f000 fb2a 	bl	8007598 <LISTVIEW__UpdateScrollParas>
 8006f44:	4620      	mov	r0, r4
 8006f46:	f000 f97d 	bl	8007244 <LISTVIEW__InvalidateInsideArea>
 8006f4a:	a801      	add	r0, sp, #4
 8006f4c:	f008 ff16 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006f50:	b003      	add	sp, #12
 8006f52:	bd30      	pop	{r4, r5, pc}

08006f54 <LISTVIEW__GetNumRows>:
 8006f54:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8006f56:	f001 bdca 	b.w	8008aee <GUI_ARRAY_GetNumItems>

08006f5a <LISTVIEW__GetNumColumns>:
 8006f5a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8006f5c:	f001 bdc7 	b.w	8008aee <GUI_ARRAY_GetNumItems>

08006f60 <LISTVIEW_CreateIndirect>:
 8006f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f62:	b087      	sub	sp, #28
 8006f64:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8006f68:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8006f6c:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8006f70:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8006f74:	9100      	str	r1, [sp, #0]
 8006f76:	2100      	movs	r1, #0
 8006f78:	9101      	str	r1, [sp, #4]
 8006f7a:	8a41      	ldrh	r1, [r0, #18]
 8006f7c:	9102      	str	r1, [sp, #8]
 8006f7e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8006f82:	9103      	str	r1, [sp, #12]
 8006f84:	6984      	ldr	r4, [r0, #24]
 8006f86:	9404      	str	r4, [sp, #16]
 8006f88:	eb0e 0002 	add.w	r0, lr, r2
 8006f8c:	18f9      	adds	r1, r7, r3
 8006f8e:	4632      	mov	r2, r6
 8006f90:	462b      	mov	r3, r5
 8006f92:	f001 f831 	bl	8007ff8 <LISTVIEW_CreateUser>
 8006f96:	b007      	add	sp, #28
 8006f98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f9a <_UpdateScrollPos>:
 8006f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	f008 fedd 	bl	800fd60 <GUI_ALLOC_LockH>
 8006fa6:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8006fa8:	9001      	str	r0, [sp, #4]
 8006faa:	2900      	cmp	r1, #0
 8006fac:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
 8006fb0:	f100 0094 	add.w	r0, r0, #148	; 0x94
 8006fb4:	db04      	blt.n	8006fc0 <_UpdateScrollPos+0x26>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4613      	mov	r3, r2
 8006fba:	f002 fce6 	bl	800998a <WM_CheckScrollPos>
 8006fbe:	e001      	b.n	8006fc4 <_UpdateScrollPos+0x2a>
 8006fc0:	f002 fcd4 	bl	800996c <WM_CheckScrollBounds>
 8006fc4:	9801      	ldr	r0, [sp, #4]
 8006fc6:	30a0      	adds	r0, #160	; 0xa0
 8006fc8:	f002 fcd0 	bl	800996c <WM_CheckScrollBounds>
 8006fcc:	9b01      	ldr	r3, [sp, #4]
 8006fce:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8006fd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8006fd4:	ad05      	add	r5, sp, #20
 8006fd6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006fda:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8006fde:	ca07      	ldmia	r2, {r0, r1, r2}
 8006fe0:	ac02      	add	r4, sp, #8
 8006fe2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006fe6:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8006fea:	a801      	add	r0, sp, #4
 8006fec:	f008 fec6 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	4622      	mov	r2, r4
 8006ff6:	f7ff fe0d 	bl	8006c14 <WIDGET__SetScrollState>
 8006ffa:	f1b8 0f00 	cmp.w	r8, #0
 8006ffe:	d003      	beq.n	8007008 <_UpdateScrollPos+0x6e>
 8007000:	4640      	mov	r0, r8
 8007002:	9903      	ldr	r1, [sp, #12]
 8007004:	f001 f9ec 	bl	80083e0 <HEADER_SetScrollPos>
 8007008:	9806      	ldr	r0, [sp, #24]
 800700a:	1b80      	subs	r0, r0, r6
 800700c:	b008      	add	sp, #32
 800700e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007012 <LISTVIEW_OwnerDraw>:
 8007012:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007014:	6843      	ldr	r3, [r0, #4]
 8007016:	8a07      	ldrh	r7, [r0, #16]
 8007018:	8a82      	ldrh	r2, [r0, #20]
 800701a:	f8b0 c018 	ldrh.w	ip, [r0, #24]
 800701e:	8b86      	ldrh	r6, [r0, #28]
 8007020:	6a04      	ldr	r4, [r0, #32]
 8007022:	f8ad 7000 	strh.w	r7, [sp]
 8007026:	2b05      	cmp	r3, #5
 8007028:	f8ad 2002 	strh.w	r2, [sp, #2]
 800702c:	f8ad c004 	strh.w	ip, [sp, #4]
 8007030:	f8ad 6006 	strh.w	r6, [sp, #6]
 8007034:	68c1      	ldr	r1, [r0, #12]
 8007036:	6885      	ldr	r5, [r0, #8]
 8007038:	d044      	beq.n	80070c4 <LISTVIEW_OwnerDraw+0xb2>
 800703a:	dc02      	bgt.n	8007042 <LISTVIEW_OwnerDraw+0x30>
 800703c:	2b01      	cmp	r3, #1
 800703e:	d00d      	beq.n	800705c <LISTVIEW_OwnerDraw+0x4a>
 8007040:	e05c      	b.n	80070fc <LISTVIEW_OwnerDraw+0xea>
 8007042:	2b1a      	cmp	r3, #26
 8007044:	d005      	beq.n	8007052 <LISTVIEW_OwnerDraw+0x40>
 8007046:	2b1b      	cmp	r3, #27
 8007048:	d158      	bne.n	80070fc <LISTVIEW_OwnerDraw+0xea>
 800704a:	b230      	sxth	r0, r6
 800704c:	b212      	sxth	r2, r2
 800704e:	1a80      	subs	r0, r0, r2
 8007050:	e055      	b.n	80070fe <LISTVIEW_OwnerDraw+0xec>
 8007052:	fa0f f08c 	sxth.w	r0, ip
 8007056:	b23f      	sxth	r7, r7
 8007058:	1bc0      	subs	r0, r0, r7
 800705a:	e050      	b.n	80070fe <LISTVIEW_OwnerDraw+0xec>
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	b143      	cbz	r3, 8007072 <LISTVIEW_OwnerDraw+0x60>
 8007060:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007064:	0796      	lsls	r6, r2, #30
 8007066:	d504      	bpl.n	8007072 <LISTVIEW_OwnerDraw+0x60>
 8007068:	681e      	ldr	r6, [r3, #0]
 800706a:	6800      	ldr	r0, [r0, #0]
 800706c:	462a      	mov	r2, r5
 800706e:	466b      	mov	r3, sp
 8007070:	47b0      	blx	r6
 8007072:	f8bd 2000 	ldrh.w	r2, [sp]
 8007076:	6963      	ldr	r3, [r4, #20]
 8007078:	4413      	add	r3, r2
 800707a:	f8ad 3000 	strh.w	r3, [sp]
 800707e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8007082:	69a3      	ldr	r3, [r4, #24]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	f8ad 3004 	strh.w	r3, [sp, #4]
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	b14b      	cbz	r3, 80070a2 <LISTVIEW_OwnerDraw+0x90>
 800708e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007092:	07d0      	lsls	r0, r2, #31
 8007094:	d505      	bpl.n	80070a2 <LISTVIEW_OwnerDraw+0x90>
 8007096:	6922      	ldr	r2, [r4, #16]
 8007098:	3206      	adds	r2, #6
 800709a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800709e:	f006 fc6b 	bl	800d978 <LCD_SetColor>
 80070a2:	7923      	ldrb	r3, [r4, #4]
 80070a4:	69e0      	ldr	r0, [r4, #28]
 80070a6:	f894 2020 	ldrb.w	r2, [r4, #32]
 80070aa:	4669      	mov	r1, sp
 80070ac:	f007 ffa4 	bl	800eff8 <GUI_DispStringInRectWrap>
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	b31b      	cbz	r3, 80070fc <LISTVIEW_OwnerDraw+0xea>
 80070b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070b8:	07d9      	lsls	r1, r3, #31
 80070ba:	d51f      	bpl.n	80070fc <LISTVIEW_OwnerDraw+0xea>
 80070bc:	68a0      	ldr	r0, [r4, #8]
 80070be:	f006 fc5b 	bl	800d978 <LCD_SetColor>
 80070c2:	e01b      	b.n	80070fc <LISTVIEW_OwnerDraw+0xea>
 80070c4:	2d00      	cmp	r5, #0
 80070c6:	db0b      	blt.n	80070e0 <LISTVIEW_OwnerDraw+0xce>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	b14b      	cbz	r3, 80070e0 <LISTVIEW_OwnerDraw+0xce>
 80070cc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80070d0:	07d2      	lsls	r2, r2, #31
 80070d2:	d505      	bpl.n	80070e0 <LISTVIEW_OwnerDraw+0xce>
 80070d4:	6922      	ldr	r2, [r4, #16]
 80070d6:	3202      	adds	r2, #2
 80070d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80070dc:	f006 fc44 	bl	800d968 <LCD_SetBkColor>
 80070e0:	4668      	mov	r0, sp
 80070e2:	f008 faa7 	bl	800f634 <GUI_ClearRectEx>
 80070e6:	2d00      	cmp	r5, #0
 80070e8:	db08      	blt.n	80070fc <LISTVIEW_OwnerDraw+0xea>
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	b133      	cbz	r3, 80070fc <LISTVIEW_OwnerDraw+0xea>
 80070ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070f2:	07db      	lsls	r3, r3, #31
 80070f4:	d502      	bpl.n	80070fc <LISTVIEW_OwnerDraw+0xea>
 80070f6:	68e0      	ldr	r0, [r4, #12]
 80070f8:	f006 fc36 	bl	800d968 <LCD_SetBkColor>
 80070fc:	2000      	movs	r0, #0
 80070fe:	b003      	add	sp, #12
 8007100:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007102 <_NotifyOwner>:
 8007102:	b530      	push	{r4, r5, lr}
 8007104:	b085      	sub	sp, #20
 8007106:	4604      	mov	r4, r0
 8007108:	2210      	movs	r2, #16
 800710a:	460d      	mov	r5, r1
 800710c:	4668      	mov	r0, sp
 800710e:	2100      	movs	r1, #0
 8007110:	f00f fbda 	bl	80168c8 <memset>
 8007114:	4620      	mov	r0, r4
 8007116:	f002 fb3b 	bl	8009790 <WM_GetParent>
 800711a:	2326      	movs	r3, #38	; 0x26
 800711c:	4669      	mov	r1, sp
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	9503      	str	r5, [sp, #12]
 8007122:	9402      	str	r4, [sp, #8]
 8007124:	f001 ff92 	bl	800904c <WM__SendMessage>
 8007128:	b005      	add	sp, #20
 800712a:	bd30      	pop	{r4, r5, pc}

0800712c <_MoveSelCol>:
 800712c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007130:	4688      	mov	r8, r1
 8007132:	4606      	mov	r6, r0
 8007134:	f008 fe14 	bl	800fd60 <GUI_ALLOC_LockH>
 8007138:	ac02      	add	r4, sp, #8
 800713a:	6f85      	ldr	r5, [r0, #120]	; 0x78
 800713c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007140:	f7ff ff0b 	bl	8006f5a <LISTVIEW__GetNumColumns>
 8007144:	4607      	mov	r7, r0
 8007146:	4620      	mov	r0, r4
 8007148:	f008 fe18 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800714c:	1c6b      	adds	r3, r5, #1
 800714e:	d011      	beq.n	8007174 <_MoveSelCol+0x48>
 8007150:	4445      	add	r5, r8
 8007152:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8007156:	42bd      	cmp	r5, r7
 8007158:	4630      	mov	r0, r6
 800715a:	bfa8      	it	ge
 800715c:	f107 35ff 	addge.w	r5, r7, #4294967295
 8007160:	f008 fdfe 	bl	800fd60 <GUI_ALLOC_LockH>
 8007164:	9001      	str	r0, [sp, #4]
 8007166:	6785      	str	r5, [r0, #120]	; 0x78
 8007168:	4620      	mov	r0, r4
 800716a:	f008 fe07 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800716e:	4630      	mov	r0, r6
 8007170:	f003 f907 	bl	800a382 <WM_InvalidateWindow>
 8007174:	b002      	add	sp, #8
 8007176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800717a <LISTVIEW__GetpRow>:
 800717a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800717c:	460c      	mov	r4, r1
 800717e:	f008 fdef 	bl	800fd60 <GUI_ALLOC_LockH>
 8007182:	4603      	mov	r3, r0
 8007184:	9002      	str	r0, [sp, #8]
 8007186:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 800718a:	b338      	cbz	r0, 80071dc <LISTVIEW__GetpRow+0x62>
 800718c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007190:	2a00      	cmp	r2, #0
 8007192:	db23      	blt.n	80071dc <LISTVIEW__GetpRow+0x62>
 8007194:	f008 fde4 	bl	800fd60 <GUI_ALLOC_LockH>
 8007198:	9001      	str	r0, [sp, #4]
 800719a:	6800      	ldr	r0, [r0, #0]
 800719c:	b1a0      	cbz	r0, 80071c8 <LISTVIEW__GetpRow+0x4e>
 800719e:	f008 fddf 	bl	800fd60 <GUI_ALLOC_LockH>
 80071a2:	9a01      	ldr	r2, [sp, #4]
 80071a4:	9003      	str	r0, [sp, #12]
 80071a6:	8892      	ldrh	r2, [r2, #4]
 80071a8:	4294      	cmp	r4, r2
 80071aa:	4603      	mov	r3, r0
 80071ac:	da07      	bge.n	80071be <LISTVIEW__GetpRow+0x44>
 80071ae:	9a02      	ldr	r2, [sp, #8]
 80071b0:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 80071b4:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 80071b6:	f001 fd1c 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 80071ba:	4604      	mov	r4, r0
 80071bc:	e000      	b.n	80071c0 <LISTVIEW__GetpRow+0x46>
 80071be:	2400      	movs	r4, #0
 80071c0:	a803      	add	r0, sp, #12
 80071c2:	f008 fddb 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80071c6:	e005      	b.n	80071d4 <LISTVIEW__GetpRow+0x5a>
 80071c8:	9b02      	ldr	r3, [sp, #8]
 80071ca:	4621      	mov	r1, r4
 80071cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80071ce:	f001 fd10 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 80071d2:	4604      	mov	r4, r0
 80071d4:	a801      	add	r0, sp, #4
 80071d6:	f008 fdd1 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80071da:	e004      	b.n	80071e6 <LISTVIEW__GetpRow+0x6c>
 80071dc:	4621      	mov	r1, r4
 80071de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80071e0:	f001 fd07 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 80071e4:	4604      	mov	r4, r0
 80071e6:	a802      	add	r0, sp, #8
 80071e8:	f008 fdc8 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80071ec:	4620      	mov	r0, r4
 80071ee:	b004      	add	sp, #16
 80071f0:	bd10      	pop	{r4, pc}

080071f2 <LISTVIEW__GetRowDistY>:
 80071f2:	b510      	push	{r4, lr}
 80071f4:	4604      	mov	r4, r0
 80071f6:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 80071fa:	b928      	cbnz	r0, 8007208 <LISTVIEW__GetRowDistY+0x16>
 80071fc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80071fe:	f007 fe45 	bl	800ee8c <GUI_GetYDistOfFont>
 8007202:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007204:	b103      	cbz	r3, 8007208 <LISTVIEW__GetRowDistY+0x16>
 8007206:	3001      	adds	r0, #1
 8007208:	bd10      	pop	{r4, pc}

0800720a <_GetNumVisibleRows>:
 800720a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800720c:	460c      	mov	r4, r1
 800720e:	4669      	mov	r1, sp
 8007210:	f002 fac6 	bl	80097a0 <WM_GetInsideRectExScrollbar>
 8007214:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007216:	f001 f994 	bl	8008542 <HEADER_GetHeight>
 800721a:	4605      	mov	r5, r0
 800721c:	4620      	mov	r0, r4
 800721e:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 8007222:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8007226:	f7ff ffe4 	bl	80071f2 <LISTVIEW__GetRowDistY>
 800722a:	b148      	cbz	r0, 8007240 <_GetNumVisibleRows+0x36>
 800722c:	b23f      	sxth	r7, r7
 800722e:	b236      	sxth	r6, r6
 8007230:	1bbe      	subs	r6, r7, r6
 8007232:	3601      	adds	r6, #1
 8007234:	1b75      	subs	r5, r6, r5
 8007236:	fbb5 f0f0 	udiv	r0, r5, r0
 800723a:	2800      	cmp	r0, #0
 800723c:	bf08      	it	eq
 800723e:	2001      	moveq	r0, #1
 8007240:	b003      	add	sp, #12
 8007242:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007244 <LISTVIEW__InvalidateInsideArea>:
 8007244:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007246:	4605      	mov	r5, r0
 8007248:	f008 fd8a 	bl	800fd60 <GUI_ALLOC_LockH>
 800724c:	ac04      	add	r4, sp, #16
 800724e:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8007252:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007254:	f001 f975 	bl	8008542 <HEADER_GetHeight>
 8007258:	4606      	mov	r6, r0
 800725a:	4620      	mov	r0, r4
 800725c:	f008 fd8e 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007260:	4628      	mov	r0, r5
 8007262:	a902      	add	r1, sp, #8
 8007264:	f002 fa9c 	bl	80097a0 <WM_GetInsideRectExScrollbar>
 8007268:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800726c:	4628      	mov	r0, r5
 800726e:	441e      	add	r6, r3
 8007270:	a902      	add	r1, sp, #8
 8007272:	f8ad 600a 	strh.w	r6, [sp, #10]
 8007276:	f003 f848 	bl	800a30a <WM_InvalidateRect>
 800727a:	b004      	add	sp, #16
 800727c:	bd70      	pop	{r4, r5, r6, pc}

0800727e <_ColumnScroll>:
 800727e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007282:	b087      	sub	sp, #28
 8007284:	4606      	mov	r6, r0
 8007286:	468b      	mov	fp, r1
 8007288:	f008 fd6a 	bl	800fd60 <GUI_ALLOC_LockH>
 800728c:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
 8007290:	4603      	mov	r3, r0
 8007292:	9000      	str	r0, [sp, #0]
 8007294:	ca07      	ldmia	r2, {r0, r1, r2}
 8007296:	ac03      	add	r4, sp, #12
 8007298:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800729c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 80072a0:	f8d3 9078 	ldr.w	r9, [r3, #120]	; 0x78
 80072a4:	4668      	mov	r0, sp
 80072a6:	f008 fd69 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80072aa:	4630      	mov	r0, r6
 80072ac:	a901      	add	r1, sp, #4
 80072ae:	f002 fa77 	bl	80097a0 <WM_GetInsideRectExScrollbar>
 80072b2:	4650      	mov	r0, sl
 80072b4:	4649      	mov	r1, r9
 80072b6:	f001 f95c 	bl	8008572 <HEADER_GetItemWidth>
 80072ba:	f04f 0800 	mov.w	r8, #0
 80072be:	4607      	mov	r7, r0
 80072c0:	4645      	mov	r5, r8
 80072c2:	45c8      	cmp	r8, r9
 80072c4:	dc07      	bgt.n	80072d6 <_ColumnScroll+0x58>
 80072c6:	4641      	mov	r1, r8
 80072c8:	4650      	mov	r0, sl
 80072ca:	f001 f952 	bl	8008572 <HEADER_GetItemWidth>
 80072ce:	f108 0801 	add.w	r8, r8, #1
 80072d2:	4405      	add	r5, r0
 80072d4:	e7f5      	b.n	80072c2 <_ColumnScroll+0x44>
 80072d6:	f1ab 0b10 	sub.w	fp, fp, #16
 80072da:	f1bb 0f03 	cmp.w	fp, #3
 80072de:	f200 808d 	bhi.w	80073fc <_ColumnScroll+0x17e>
 80072e2:	e8df f00b 	tbb	[pc, fp]
 80072e6:	0264      	.short	0x0264
 80072e8:	0233      	.short	0x0233
 80072ea:	9904      	ldr	r1, [sp, #16]
 80072ec:	1beb      	subs	r3, r5, r7
 80072ee:	428b      	cmp	r3, r1
 80072f0:	db26      	blt.n	8007340 <_ColumnScroll+0xc2>
 80072f2:	2700      	movs	r7, #0
 80072f4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80072f8:	1aea      	subs	r2, r5, r3
 80072fa:	428a      	cmp	r2, r1
 80072fc:	dd04      	ble.n	8007308 <_ColumnScroll+0x8a>
 80072fe:	1a6f      	subs	r7, r5, r1
 8007300:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8007304:	1aff      	subs	r7, r7, r3
 8007306:	4417      	add	r7, r2
 8007308:	b127      	cbz	r7, 8007314 <_ColumnScroll+0x96>
 800730a:	4439      	add	r1, r7
 800730c:	4620      	mov	r0, r4
 800730e:	f002 fb55 	bl	80099bc <WM_SetScrollValue>
 8007312:	4607      	mov	r7, r0
 8007314:	4630      	mov	r0, r6
 8007316:	f008 fd23 	bl	800fd60 <GUI_ALLOC_LockH>
 800731a:	9000      	str	r0, [sp, #0]
 800731c:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 8007320:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007324:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007328:	4668      	mov	r0, sp
 800732a:	f008 fd27 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800732e:	2f00      	cmp	r7, #0
 8007330:	d064      	beq.n	80073fc <_ColumnScroll+0x17e>
 8007332:	4630      	mov	r0, r6
 8007334:	f7ff fe31 	bl	8006f9a <_UpdateScrollPos>
 8007338:	4630      	mov	r0, r6
 800733a:	f7ff ff83 	bl	8007244 <LISTVIEW__InvalidateInsideArea>
 800733e:	e05d      	b.n	80073fc <_ColumnScroll+0x17e>
 8007340:	1a6b      	subs	r3, r5, r1
 8007342:	1bdf      	subs	r7, r3, r7
 8007344:	2f00      	cmp	r7, #0
 8007346:	bfc8      	it	gt
 8007348:	427f      	neggt	r7, r7
 800734a:	e7d3      	b.n	80072f4 <_ColumnScroll+0x76>
 800734c:	f109 0101 	add.w	r1, r9, #1
 8007350:	4650      	mov	r0, sl
 8007352:	f001 f90e 	bl	8008572 <HEADER_GetItemWidth>
 8007356:	9b04      	ldr	r3, [sp, #16]
 8007358:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800735c:	4428      	add	r0, r5
 800735e:	4419      	add	r1, r3
 8007360:	4288      	cmp	r0, r1
 8007362:	bfc3      	ittte	gt
 8007364:	f9bd 2004 	ldrshgt.w	r2, [sp, #4]
 8007368:	ebc1 0100 	rsbgt	r1, r1, r0
 800736c:	1889      	addgt	r1, r1, r2
 800736e:	2100      	movle	r1, #0
 8007370:	429d      	cmp	r5, r3
 8007372:	bfb8      	it	lt
 8007374:	ebc3 0105 	rsblt	r1, r3, r5
 8007378:	b129      	cbz	r1, 8007386 <_ColumnScroll+0x108>
 800737a:	4620      	mov	r0, r4
 800737c:	4419      	add	r1, r3
 800737e:	f002 fb1d 	bl	80099bc <WM_SetScrollValue>
 8007382:	4605      	mov	r5, r0
 8007384:	e000      	b.n	8007388 <_ColumnScroll+0x10a>
 8007386:	460d      	mov	r5, r1
 8007388:	2101      	movs	r1, #1
 800738a:	4630      	mov	r0, r6
 800738c:	f7ff fece 	bl	800712c <_MoveSelCol>
 8007390:	4630      	mov	r0, r6
 8007392:	f008 fce5 	bl	800fd60 <GUI_ALLOC_LockH>
 8007396:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 800739a:	9000      	str	r0, [sp, #0]
 800739c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80073a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80073a4:	4668      	mov	r0, sp
 80073a6:	f008 fce9 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80073aa:	b33d      	cbz	r5, 80073fc <_ColumnScroll+0x17e>
 80073ac:	e7c1      	b.n	8007332 <_ColumnScroll+0xb4>
 80073ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80073b2:	4650      	mov	r0, sl
 80073b4:	f001 f8dd 	bl	8008572 <HEADER_GetItemWidth>
 80073b8:	9b04      	ldr	r3, [sp, #16]
 80073ba:	1bea      	subs	r2, r5, r7
 80073bc:	4418      	add	r0, r3
 80073be:	4290      	cmp	r0, r2
 80073c0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80073c4:	bfc8      	it	gt
 80073c6:	ebc5 0107 	rsbgt	r1, r5, r7
 80073ca:	441a      	add	r2, r3
 80073cc:	bfcc      	ite	gt
 80073ce:	1809      	addgt	r1, r1, r0
 80073d0:	2100      	movle	r1, #0
 80073d2:	42aa      	cmp	r2, r5
 80073d4:	da04      	bge.n	80073e0 <_ColumnScroll+0x162>
 80073d6:	1b55      	subs	r5, r2, r5
 80073d8:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80073dc:	442f      	add	r7, r5
 80073de:	1a39      	subs	r1, r7, r0
 80073e0:	b129      	cbz	r1, 80073ee <_ColumnScroll+0x170>
 80073e2:	4620      	mov	r0, r4
 80073e4:	1a59      	subs	r1, r3, r1
 80073e6:	f002 fae9 	bl	80099bc <WM_SetScrollValue>
 80073ea:	4607      	mov	r7, r0
 80073ec:	e000      	b.n	80073f0 <_ColumnScroll+0x172>
 80073ee:	460f      	mov	r7, r1
 80073f0:	4630      	mov	r0, r6
 80073f2:	f04f 31ff 	mov.w	r1, #4294967295
 80073f6:	f7ff fe99 	bl	800712c <_MoveSelCol>
 80073fa:	e78b      	b.n	8007314 <_ColumnScroll+0x96>
 80073fc:	b007      	add	sp, #28
 80073fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007402 <LISTVIEW__InvalidateRow>:
 8007402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007406:	f1b1 0800 	subs.w	r8, r1, #0
 800740a:	b085      	sub	sp, #20
 800740c:	4605      	mov	r5, r0
 800740e:	db27      	blt.n	8007460 <LISTVIEW__InvalidateRow+0x5e>
 8007410:	f008 fca6 	bl	800fd60 <GUI_ALLOC_LockH>
 8007414:	9001      	str	r0, [sp, #4]
 8007416:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007418:	f001 f893 	bl	8008542 <HEADER_GetHeight>
 800741c:	ac04      	add	r4, sp, #16
 800741e:	4681      	mov	r9, r0
 8007420:	f854 0d0c 	ldr.w	r0, [r4, #-12]!
 8007424:	f8d0 7098 	ldr.w	r7, [r0, #152]	; 0x98
 8007428:	f7ff fee3 	bl	80071f2 <LISTVIEW__GetRowDistY>
 800742c:	4606      	mov	r6, r0
 800742e:	4620      	mov	r0, r4
 8007430:	f008 fca4 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007434:	4628      	mov	r0, r5
 8007436:	a902      	add	r1, sp, #8
 8007438:	f002 f9b2 	bl	80097a0 <WM_GetInsideRectExScrollbar>
 800743c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8007440:	4499      	add	r9, r3
 8007442:	ebc7 0308 	rsb	r3, r7, r8
 8007446:	fb06 9303 	mla	r3, r6, r3, r9
 800744a:	b29b      	uxth	r3, r3
 800744c:	3e01      	subs	r6, #1
 800744e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8007452:	4628      	mov	r0, r5
 8007454:	4433      	add	r3, r6
 8007456:	a902      	add	r1, sp, #8
 8007458:	f8ad 300e 	strh.w	r3, [sp, #14]
 800745c:	f002 ff55 	bl	800a30a <WM_InvalidateRect>
 8007460:	b005      	add	sp, #20
 8007462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007466 <LISTVIEW__SetSel>:
 8007466:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800746a:	460c      	mov	r4, r1
 800746c:	4605      	mov	r5, r0
 800746e:	f008 fc77 	bl	800fd60 <GUI_ALLOC_LockH>
 8007472:	ae02      	add	r6, sp, #8
 8007474:	9001      	str	r0, [sp, #4]
 8007476:	f7ff fd6d 	bl	8006f54 <LISTVIEW__GetNumRows>
 800747a:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 800747e:	4680      	mov	r8, r0
 8007480:	4630      	mov	r0, r6
 8007482:	6f5f      	ldr	r7, [r3, #116]	; 0x74
 8007484:	f008 fc7a 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007488:	4544      	cmp	r4, r8
 800748a:	bfa8      	it	ge
 800748c:	f108 34ff 	addge.w	r4, r8, #4294967295
 8007490:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8007494:	42bc      	cmp	r4, r7
 8007496:	d020      	beq.n	80074da <LISTVIEW__SetSel+0x74>
 8007498:	4628      	mov	r0, r5
 800749a:	4621      	mov	r1, r4
 800749c:	f009 fb08 	bl	8010ab0 <LISTVIEW_RowIsDisabled>
 80074a0:	b9d8      	cbnz	r0, 80074da <LISTVIEW__SetSel+0x74>
 80074a2:	4628      	mov	r0, r5
 80074a4:	f008 fc5c 	bl	800fd60 <GUI_ALLOC_LockH>
 80074a8:	9001      	str	r0, [sp, #4]
 80074aa:	6744      	str	r4, [r0, #116]	; 0x74
 80074ac:	4630      	mov	r0, r6
 80074ae:	f008 fc65 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80074b2:	4628      	mov	r0, r5
 80074b4:	f7ff fd71 	bl	8006f9a <_UpdateScrollPos>
 80074b8:	b118      	cbz	r0, 80074c2 <LISTVIEW__SetSel+0x5c>
 80074ba:	4628      	mov	r0, r5
 80074bc:	f7ff fec2 	bl	8007244 <LISTVIEW__InvalidateInsideArea>
 80074c0:	e007      	b.n	80074d2 <LISTVIEW__SetSel+0x6c>
 80074c2:	4628      	mov	r0, r5
 80074c4:	4639      	mov	r1, r7
 80074c6:	f7ff ff9c 	bl	8007402 <LISTVIEW__InvalidateRow>
 80074ca:	4628      	mov	r0, r5
 80074cc:	4621      	mov	r1, r4
 80074ce:	f7ff ff98 	bl	8007402 <LISTVIEW__InvalidateRow>
 80074d2:	4628      	mov	r0, r5
 80074d4:	2104      	movs	r1, #4
 80074d6:	f002 f826 	bl	8009526 <WM_NotifyParent>
 80074da:	b002      	add	sp, #8
 80074dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080074e0 <_MoveSel>:
 80074e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80074e4:	460f      	mov	r7, r1
 80074e6:	4606      	mov	r6, r0
 80074e8:	f008 fc3a 	bl	800fd60 <GUI_ALLOC_LockH>
 80074ec:	ad02      	add	r5, sp, #8
 80074ee:	6f44      	ldr	r4, [r0, #116]	; 0x74
 80074f0:	f845 0d04 	str.w	r0, [r5, #-4]!
 80074f4:	f7ff fd2e 	bl	8006f54 <LISTVIEW__GetNumRows>
 80074f8:	4680      	mov	r8, r0
 80074fa:	4628      	mov	r0, r5
 80074fc:	f008 fc3e 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007500:	19e4      	adds	r4, r4, r7
 8007502:	d40b      	bmi.n	800751c <_MoveSel+0x3c>
 8007504:	4544      	cmp	r4, r8
 8007506:	da09      	bge.n	800751c <_MoveSel+0x3c>
 8007508:	4630      	mov	r0, r6
 800750a:	4621      	mov	r1, r4
 800750c:	f009 fad0 	bl	8010ab0 <LISTVIEW_RowIsDisabled>
 8007510:	2800      	cmp	r0, #0
 8007512:	d1f5      	bne.n	8007500 <_MoveSel+0x20>
 8007514:	4630      	mov	r0, r6
 8007516:	4621      	mov	r1, r4
 8007518:	f7ff ffa5 	bl	8007466 <LISTVIEW__SetSel>
 800751c:	b002      	add	sp, #8
 800751e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007522 <_OnPage>:
 8007522:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007526:	468a      	mov	sl, r1
 8007528:	4604      	mov	r4, r0
 800752a:	f008 fc19 	bl	800fd60 <GUI_ALLOC_LockH>
 800752e:	f10d 0808 	add.w	r8, sp, #8
 8007532:	6f46      	ldr	r6, [r0, #116]	; 0x74
 8007534:	f848 0d04 	str.w	r0, [r8, #-4]!
 8007538:	f8d0 7098 	ldr.w	r7, [r0, #152]	; 0x98
 800753c:	f8d0 509c 	ldr.w	r5, [r0, #156]	; 0x9c
 8007540:	f7ff fd08 	bl	8006f54 <LISTVIEW__GetNumRows>
 8007544:	4681      	mov	r9, r0
 8007546:	4640      	mov	r0, r8
 8007548:	f008 fc18 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800754c:	f1ba 0f00 	cmp.w	sl, #0
 8007550:	da0a      	bge.n	8007568 <_OnPage+0x46>
 8007552:	42be      	cmp	r6, r7
 8007554:	4620      	mov	r0, r4
 8007556:	d001      	beq.n	800755c <_OnPage+0x3a>
 8007558:	4639      	mov	r1, r7
 800755a:	e017      	b.n	800758c <_OnPage+0x6a>
 800755c:	42ae      	cmp	r6, r5
 800755e:	db01      	blt.n	8007564 <_OnPage+0x42>
 8007560:	4269      	negs	r1, r5
 8007562:	e00e      	b.n	8007582 <_OnPage+0x60>
 8007564:	2100      	movs	r1, #0
 8007566:	e011      	b.n	800758c <_OnPage+0x6a>
 8007568:	442f      	add	r7, r5
 800756a:	1e79      	subs	r1, r7, #1
 800756c:	428e      	cmp	r6, r1
 800756e:	d001      	beq.n	8007574 <_OnPage+0x52>
 8007570:	4620      	mov	r0, r4
 8007572:	e00b      	b.n	800758c <_OnPage+0x6a>
 8007574:	ebc5 0309 	rsb	r3, r5, r9
 8007578:	3b01      	subs	r3, #1
 800757a:	429e      	cmp	r6, r3
 800757c:	4620      	mov	r0, r4
 800757e:	da03      	bge.n	8007588 <_OnPage+0x66>
 8007580:	4629      	mov	r1, r5
 8007582:	f7ff ffad 	bl	80074e0 <_MoveSel>
 8007586:	e003      	b.n	8007590 <_OnPage+0x6e>
 8007588:	f109 31ff 	add.w	r1, r9, #4294967295
 800758c:	f7ff ff6b 	bl	8007466 <LISTVIEW__SetSel>
 8007590:	b002      	add	sp, #8
 8007592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007598 <LISTVIEW__UpdateScrollParas>:
 8007598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759c:	4b37      	ldr	r3, [pc, #220]	; (800767c <LISTVIEW__UpdateScrollParas+0xe4>)
 800759e:	781e      	ldrb	r6, [r3, #0]
 80075a0:	b087      	sub	sp, #28
 80075a2:	4604      	mov	r4, r0
 80075a4:	4699      	mov	r9, r3
 80075a6:	2e00      	cmp	r6, #0
 80075a8:	d163      	bne.n	8007672 <LISTVIEW__UpdateScrollParas+0xda>
 80075aa:	2501      	movs	r5, #1
 80075ac:	701d      	strb	r5, [r3, #0]
 80075ae:	f008 fbd7 	bl	800fd60 <GUI_ALLOC_LockH>
 80075b2:	4601      	mov	r1, r0
 80075b4:	9003      	str	r0, [sp, #12]
 80075b6:	4620      	mov	r0, r4
 80075b8:	f7ff fe27 	bl	800720a <_GetNumVisibleRows>
 80075bc:	a904      	add	r1, sp, #16
 80075be:	4607      	mov	r7, r0
 80075c0:	4620      	mov	r0, r4
 80075c2:	f002 f8ed 	bl	80097a0 <WM_GetInsideRectExScrollbar>
 80075c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80075ca:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80075ce:	f9bd a014 	ldrsh.w	sl, [sp, #20]
 80075d2:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 80075d6:	f8d8 b03c 	ldr.w	fp, [r8, #60]	; 0x3c
 80075da:	ebc3 0a0a 	rsb	sl, r3, sl
 80075de:	f001 f9d7 	bl	8008990 <HEADER_GetNumItems>
 80075e2:	44aa      	add	sl, r5
 80075e4:	4603      	mov	r3, r0
 80075e6:	b160      	cbz	r0, 8007602 <LISTVIEW__UpdateScrollParas+0x6a>
 80075e8:	4635      	mov	r5, r6
 80075ea:	429e      	cmp	r6, r3
 80075ec:	da09      	bge.n	8007602 <LISTVIEW__UpdateScrollParas+0x6a>
 80075ee:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	4631      	mov	r1, r6
 80075f6:	f000 ffbc 	bl	8008572 <HEADER_GetItemWidth>
 80075fa:	3601      	adds	r6, #1
 80075fc:	4405      	add	r5, r0
 80075fe:	9b01      	ldr	r3, [sp, #4]
 8007600:	e7f3      	b.n	80075ea <LISTVIEW__UpdateScrollParas+0x52>
 8007602:	9b03      	ldr	r3, [sp, #12]
 8007604:	f893 60b3 	ldrb.w	r6, [r3, #179]	; 0xb3
 8007608:	07b2      	lsls	r2, r6, #30
 800760a:	d509      	bpl.n	8007620 <LISTVIEW__UpdateScrollParas+0x88>
 800760c:	4658      	mov	r0, fp
 800760e:	f001 fa6e 	bl	8008aee <GUI_ARRAY_GetNumItems>
 8007612:	4287      	cmp	r7, r0
 8007614:	bf2c      	ite	cs
 8007616:	2100      	movcs	r1, #0
 8007618:	2101      	movcc	r1, #1
 800761a:	4620      	mov	r0, r4
 800761c:	f001 fdfc 	bl	8009218 <WM_SetScrollbarV>
 8007620:	07f3      	lsls	r3, r6, #31
 8007622:	d50b      	bpl.n	800763c <LISTVIEW__UpdateScrollParas+0xa4>
 8007624:	4555      	cmp	r5, sl
 8007626:	bfd4      	ite	le
 8007628:	2100      	movle	r1, #0
 800762a:	2101      	movgt	r1, #1
 800762c:	4620      	mov	r0, r4
 800762e:	f001 fdf1 	bl	8009214 <WM_SetScrollbarH>
 8007632:	4620      	mov	r0, r4
 8007634:	9903      	ldr	r1, [sp, #12]
 8007636:	f7ff fde8 	bl	800720a <_GetNumVisibleRows>
 800763a:	4607      	mov	r7, r0
 800763c:	9803      	ldr	r0, [sp, #12]
 800763e:	f7ff fc89 	bl	8006f54 <LISTVIEW__GetNumRows>
 8007642:	aa06      	add	r2, sp, #24
 8007644:	2800      	cmp	r0, #0
 8007646:	bf08      	it	eq
 8007648:	2001      	moveq	r0, #1
 800764a:	f852 3d0c 	ldr.w	r3, [r2, #-12]!
 800764e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 8007652:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
 8007656:	f8c3 a0a8 	str.w	sl, [r3, #168]	; 0xa8
 800765a:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
 800765e:	4610      	mov	r0, r2
 8007660:	f008 fb8c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007664:	4620      	mov	r0, r4
 8007666:	f7ff fc98 	bl	8006f9a <_UpdateScrollPos>
 800766a:	2300      	movs	r3, #0
 800766c:	f889 3000 	strb.w	r3, [r9]
 8007670:	e000      	b.n	8007674 <LISTVIEW__UpdateScrollParas+0xdc>
 8007672:	2000      	movs	r0, #0
 8007674:	b007      	add	sp, #28
 8007676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767a:	bf00      	nop
 800767c:	2001d038 	.word	0x2001d038

08007680 <LISTVIEW_Callback>:
 8007680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8007688:	4606      	mov	r6, r0
 800768a:	b0af      	sub	sp, #188	; 0xbc
 800768c:	4658      	mov	r0, fp
 800768e:	4631      	mov	r1, r6
 8007690:	f7ff fa22 	bl	8006ad8 <WIDGET_HandleActive>
 8007694:	2800      	cmp	r0, #0
 8007696:	f000 84ac 	beq.w	8007ff2 <LISTVIEW_Callback+0x972>
 800769a:	6833      	ldr	r3, [r6, #0]
 800769c:	2b0f      	cmp	r3, #15
 800769e:	f000 80ce 	beq.w	800783e <LISTVIEW_Callback+0x1be>
 80076a2:	dc07      	bgt.n	80076b4 <LISTVIEW_Callback+0x34>
 80076a4:	2b0b      	cmp	r3, #11
 80076a6:	f000 8459 	beq.w	8007f5c <LISTVIEW_Callback+0x8dc>
 80076aa:	2b0e      	cmp	r3, #14
 80076ac:	f000 83c9 	beq.w	8007e42 <LISTVIEW_Callback+0x7c2>
 80076b0:	2b05      	cmp	r3, #5
 80076b2:	e006      	b.n	80076c2 <LISTVIEW_Callback+0x42>
 80076b4:	2b26      	cmp	r3, #38	; 0x26
 80076b6:	d019      	beq.n	80076ec <LISTVIEW_Callback+0x6c>
 80076b8:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80076bc:	f000 8308 	beq.w	8007cd0 <LISTVIEW_Callback+0x650>
 80076c0:	2b25      	cmp	r3, #37	; 0x25
 80076c2:	f040 8493 	bne.w	8007fec <LISTVIEW_Callback+0x96c>
 80076c6:	4658      	mov	r0, fp
 80076c8:	f008 fb4a 	bl	800fd60 <GUI_ALLOC_LockH>
 80076cc:	9014      	str	r0, [sp, #80]	; 0x50
 80076ce:	2800      	cmp	r0, #0
 80076d0:	f000 848f 	beq.w	8007ff2 <LISTVIEW_Callback+0x972>
 80076d4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80076d6:	a814      	add	r0, sp, #80	; 0x50
 80076d8:	f008 fb50 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80076dc:	68b3      	ldr	r3, [r6, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 8487 	beq.w	8007ff2 <LISTVIEW_Callback+0x972>
 80076e4:	42a3      	cmp	r3, r4
 80076e6:	f040 8484 	bne.w	8007ff2 <LISTVIEW_Callback+0x972>
 80076ea:	e05c      	b.n	80077a6 <LISTVIEW_Callback+0x126>
 80076ec:	68f3      	ldr	r3, [r6, #12]
 80076ee:	3b02      	subs	r3, #2
 80076f0:	2b05      	cmp	r3, #5
 80076f2:	f200 847e 	bhi.w	8007ff2 <LISTVIEW_Callback+0x972>
 80076f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80076fa:	005b      	.short	0x005b
 80076fc:	047c047c 	.word	0x047c047c
 8007700:	00560018 	.word	0x00560018
 8007704:	0006      	.short	0x0006
 8007706:	4658      	mov	r0, fp
 8007708:	f008 fb2a 	bl	800fd60 <GUI_ALLOC_LockH>
 800770c:	9014      	str	r0, [sp, #80]	; 0x50
 800770e:	2800      	cmp	r0, #0
 8007710:	f000 846f 	beq.w	8007ff2 <LISTVIEW_Callback+0x972>
 8007714:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007716:	68b2      	ldr	r2, [r6, #8]
 8007718:	429a      	cmp	r2, r3
 800771a:	bf04      	itt	eq
 800771c:	2300      	moveq	r3, #0
 800771e:	6343      	streq	r3, [r0, #52]	; 0x34
 8007720:	a814      	add	r0, sp, #80	; 0x50
 8007722:	f008 fb2b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007726:	f000 bc64 	b.w	8007ff2 <LISTVIEW_Callback+0x972>
 800772a:	4658      	mov	r0, fp
 800772c:	68b4      	ldr	r4, [r6, #8]
 800772e:	f002 f820 	bl	8009772 <WM_GetScrollbarV>
 8007732:	4284      	cmp	r4, r0
 8007734:	d112      	bne.n	800775c <LISTVIEW_Callback+0xdc>
 8007736:	68b0      	ldr	r0, [r6, #8]
 8007738:	a925      	add	r1, sp, #148	; 0x94
 800773a:	f002 f81f 	bl	800977c <WM_GetScrollState>
 800773e:	4658      	mov	r0, fp
 8007740:	f008 fb0e 	bl	800fd60 <GUI_ALLOC_LockH>
 8007744:	9014      	str	r0, [sp, #80]	; 0x50
 8007746:	b128      	cbz	r0, 8007754 <LISTVIEW_Callback+0xd4>
 8007748:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800774a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 800774e:	a814      	add	r0, sp, #80	; 0x50
 8007750:	f008 fb14 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007754:	4658      	mov	r0, fp
 8007756:	f7ff fd75 	bl	8007244 <LISTVIEW__InvalidateInsideArea>
 800775a:	e021      	b.n	80077a0 <LISTVIEW_Callback+0x120>
 800775c:	4658      	mov	r0, fp
 800775e:	68b4      	ldr	r4, [r6, #8]
 8007760:	f002 f802 	bl	8009768 <WM_GetScrollbarH>
 8007764:	4284      	cmp	r4, r0
 8007766:	f040 8444 	bne.w	8007ff2 <LISTVIEW_Callback+0x972>
 800776a:	4658      	mov	r0, fp
 800776c:	f008 faf8 	bl	800fd60 <GUI_ALLOC_LockH>
 8007770:	9014      	str	r0, [sp, #80]	; 0x50
 8007772:	b1a8      	cbz	r0, 80077a0 <LISTVIEW_Callback+0x120>
 8007774:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007776:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800777a:	68b0      	ldr	r0, [r6, #8]
 800777c:	9326      	str	r3, [sp, #152]	; 0x98
 800777e:	a925      	add	r1, sp, #148	; 0x94
 8007780:	f001 fffc 	bl	800977c <WM_GetScrollState>
 8007784:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007786:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007788:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800778c:	a814      	add	r0, sp, #80	; 0x50
 800778e:	f008 faf5 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007792:	4658      	mov	r0, fp
 8007794:	f7ff ff00 	bl	8007598 <LISTVIEW__UpdateScrollParas>
 8007798:	4620      	mov	r0, r4
 800779a:	9926      	ldr	r1, [sp, #152]	; 0x98
 800779c:	f000 fe20 	bl	80083e0 <HEADER_SetScrollPos>
 80077a0:	4658      	mov	r0, fp
 80077a2:	210a      	movs	r1, #10
 80077a4:	e34a      	b.n	8007e3c <LISTVIEW_Callback+0x7bc>
 80077a6:	4658      	mov	r0, fp
 80077a8:	f7ff fef6 	bl	8007598 <LISTVIEW__UpdateScrollParas>
 80077ac:	f000 bc21 	b.w	8007ff2 <LISTVIEW_Callback+0x972>
 80077b0:	4658      	mov	r0, fp
 80077b2:	f008 fad5 	bl	800fd60 <GUI_ALLOC_LockH>
 80077b6:	9014      	str	r0, [sp, #80]	; 0x50
 80077b8:	2800      	cmp	r0, #0
 80077ba:	f000 841a 	beq.w	8007ff2 <LISTVIEW_Callback+0x972>
 80077be:	68b2      	ldr	r2, [r6, #8]
 80077c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d1ac      	bne.n	8007720 <LISTVIEW_Callback+0xa0>
 80077c6:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0a8      	beq.n	8007720 <LISTVIEW_Callback+0xa0>
 80077ce:	4658      	mov	r0, fp
 80077d0:	f001 fda0 	bl	8009314 <WM_SetFocus>
 80077d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077d6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80077d8:	f000 fd60 	bl	800829c <HEADER_GetSel>
 80077dc:	1e04      	subs	r4, r0, #0
 80077de:	db9f      	blt.n	8007720 <LISTVIEW_Callback+0xa0>
 80077e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077e2:	4621      	mov	r1, r4
 80077e4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80077e6:	f001 fa04 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 80077ea:	901c      	str	r0, [sp, #112]	; 0x70
 80077ec:	b318      	cbz	r0, 8007836 <LISTVIEW_Callback+0x1b6>
 80077ee:	6843      	ldr	r3, [r0, #4]
 80077f0:	b30b      	cbz	r3, 8007836 <LISTVIEW_Callback+0x1b6>
 80077f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077f4:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80077f8:	f008 fab2 	bl	800fd60 <GUI_ALLOC_LockH>
 80077fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077fe:	9025      	str	r0, [sp, #148]	; 0x94
 8007800:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007804:	42a2      	cmp	r2, r4
 8007806:	d10a      	bne.n	800781e <LISTVIEW_Callback+0x19e>
 8007808:	7c02      	ldrb	r2, [r0, #16]
 800780a:	f082 0201 	eor.w	r2, r2, #1
 800780e:	7402      	strb	r2, [r0, #16]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8007816:	2200      	movs	r2, #0
 8007818:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800781c:	e005      	b.n	800782a <LISTVIEW_Callback+0x1aa>
 800781e:	2200      	movs	r2, #0
 8007820:	7402      	strb	r2, [r0, #16]
 8007822:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
 8007826:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 800782a:	4658      	mov	r0, fp
 800782c:	f7ff fd0a 	bl	8007244 <LISTVIEW__InvalidateInsideArea>
 8007830:	a825      	add	r0, sp, #148	; 0x94
 8007832:	f008 faa3 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007836:	a81c      	add	r0, sp, #112	; 0x70
 8007838:	f008 faa0 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800783c:	e770      	b.n	8007720 <LISTVIEW_Callback+0xa0>
 800783e:	4658      	mov	r0, fp
 8007840:	f008 fa8e 	bl	800fd60 <GUI_ALLOC_LockH>
 8007844:	4604      	mov	r4, r0
 8007846:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007848:	9014      	str	r0, [sp, #80]	; 0x50
 800784a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800784c:	f8d3 9000 	ldr.w	r9, [r3]
 8007850:	f000 fe77 	bl	8008542 <HEADER_GetHeight>
 8007854:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007856:	9303      	str	r3, [sp, #12]
 8007858:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800785a:	9302      	str	r3, [sp, #8]
 800785c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800785e:	9307      	str	r3, [sp, #28]
 8007860:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007864:	9305      	str	r3, [sp, #20]
 8007866:	4621      	mov	r1, r4
 8007868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800786a:	9310      	str	r3, [sp, #64]	; 0x40
 800786c:	eb00 0709 	add.w	r7, r0, r9
 8007870:	4658      	mov	r0, fp
 8007872:	f7ff fcca 	bl	800720a <_GetNumVisibleRows>
 8007876:	9009      	str	r0, [sp, #36]	; 0x24
 8007878:	4620      	mov	r0, r4
 800787a:	f7ff fcba 	bl	80071f2 <LISTVIEW__GetRowDistY>
 800787e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007880:	930a      	str	r3, [sp, #40]	; 0x28
 8007882:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
 8007886:	9311      	str	r3, [sp, #68]	; 0x44
 8007888:	4682      	mov	sl, r0
 800788a:	ab25      	add	r3, sp, #148	; 0x94
 800788c:	4658      	mov	r0, fp
 800788e:	9324      	str	r3, [sp, #144]	; 0x90
 8007890:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 8007894:	f009 f8ea 	bl	8010a6c <LISTVIEW_GetWrapMode>
 8007898:	f88d 0098 	strb.w	r0, [sp, #152]	; 0x98
 800789c:	4658      	mov	r0, fp
 800789e:	f009 f8d5 	bl	8010a4c <LISTVIEW_GetLBorder>
 80078a2:	902a      	str	r0, [sp, #168]	; 0xa8
 80078a4:	4658      	mov	r0, fp
 80078a6:	f009 f8c1 	bl	8010a2c <LISTVIEW_GetRBorder>
 80078aa:	902b      	str	r0, [sp, #172]	; 0xac
 80078ac:	4620      	mov	r0, r4
 80078ae:	f7ff fb54 	bl	8006f5a <LISTVIEW__GetNumColumns>
 80078b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80078b4:	4620      	mov	r0, r4
 80078b6:	f7ff fb4d 	bl	8006f54 <LISTVIEW__GetNumRows>
 80078ba:	68f2      	ldr	r2, [r6, #12]
 80078bc:	4605      	mov	r5, r0
 80078be:	6851      	ldr	r1, [r2, #4]
 80078c0:	6810      	ldr	r0, [r2, #0]
 80078c2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80078c6:	ab18      	add	r3, sp, #96	; 0x60
 80078c8:	c303      	stmia	r3!, {r0, r1}
 80078ca:	f9b4 1000 	ldrsh.w	r1, [r4]
 80078ce:	4252      	negs	r2, r2
 80078d0:	a818      	add	r0, sp, #96	; 0x60
 80078d2:	4249      	negs	r1, r1
 80078d4:	f007 fa96 	bl	800ee04 <GUI_MoveRect>
 80078d8:	4658      	mov	r0, fp
 80078da:	a91a      	add	r1, sp, #104	; 0x68
 80078dc:	f001 ff60 	bl	80097a0 <WM_GetInsideRectExScrollbar>
 80078e0:	a818      	add	r0, sp, #96	; 0x60
 80078e2:	a91a      	add	r1, sp, #104	; 0x68
 80078e4:	f006 f9a8 	bl	800dc38 <GUI__IntersectRect>
 80078e8:	2002      	movs	r0, #2
 80078ea:	f007 f8ed 	bl	800eac8 <GUI_SetTextMode>
 80078ee:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80078f0:	f007 f8f4 	bl	800eadc <GUI_SetFont>
 80078f4:	b97d      	cbnz	r5, 8007916 <LISTVIEW_Callback+0x296>
 80078f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078f8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80078fc:	f8d4 8098 	ldr.w	r8, [r4, #152]	; 0x98
 8007900:	9306      	str	r3, [sp, #24]
 8007902:	1c53      	adds	r3, r2, #1
 8007904:	42ab      	cmp	r3, r5
 8007906:	bf94      	ite	ls
 8007908:	4443      	addls	r3, r8
 800790a:	eb08 0305 	addhi.w	r3, r8, r5
 800790e:	9312      	str	r3, [sp, #72]	; 0x48
 8007910:	2300      	movs	r3, #0
 8007912:	930f      	str	r3, [sp, #60]	; 0x3c
 8007914:	e028      	b.n	8007968 <LISTVIEW_Callback+0x2e8>
 8007916:	4658      	mov	r0, fp
 8007918:	f008 fa22 	bl	800fd60 <GUI_ALLOC_LockH>
 800791c:	f8d0 60ac 	ldr.w	r6, [r0, #172]	; 0xac
 8007920:	9017      	str	r0, [sp, #92]	; 0x5c
 8007922:	b196      	cbz	r6, 800794a <LISTVIEW_Callback+0x2ca>
 8007924:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8007928:	2b00      	cmp	r3, #0
 800792a:	db0d      	blt.n	8007948 <LISTVIEW_Callback+0x2c8>
 800792c:	4630      	mov	r0, r6
 800792e:	f008 fa17 	bl	800fd60 <GUI_ALLOC_LockH>
 8007932:	ab2e      	add	r3, sp, #184	; 0xb8
 8007934:	f843 0d60 	str.w	r0, [r3, #-96]!
 8007938:	6886      	ldr	r6, [r0, #8]
 800793a:	4618      	mov	r0, r3
 800793c:	f008 fa1e 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007940:	4658      	mov	r0, fp
 8007942:	47b0      	blx	r6
 8007944:	4606      	mov	r6, r0
 8007946:	e000      	b.n	800794a <LISTVIEW_Callback+0x2ca>
 8007948:	2600      	movs	r6, #0
 800794a:	a817      	add	r0, sp, #92	; 0x5c
 800794c:	f008 fa16 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007950:	2e00      	cmp	r6, #0
 8007952:	f47f aee5 	bne.w	8007720 <LISTVIEW_Callback+0xa0>
 8007956:	e7ce      	b.n	80078f6 <LISTVIEW_Callback+0x276>
 8007958:	4658      	mov	r0, fp
 800795a:	4641      	mov	r1, r8
 800795c:	f7ff fc0d 	bl	800717a <LISTVIEW__GetpRow>
 8007960:	9017      	str	r0, [sp, #92]	; 0x5c
 8007962:	b928      	cbnz	r0, 8007970 <LISTVIEW_Callback+0x2f0>
 8007964:	f108 0801 	add.w	r8, r8, #1
 8007968:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800796a:	4590      	cmp	r8, r2
 800796c:	d3f4      	bcc.n	8007958 <LISTVIEW_Callback+0x2d8>
 800796e:	e00e      	b.n	800798e <LISTVIEW_Callback+0x30e>
 8007970:	7902      	ldrb	r2, [r0, #4]
 8007972:	6800      	ldr	r0, [r0, #0]
 8007974:	9013      	str	r0, [sp, #76]	; 0x4c
 8007976:	a817      	add	r0, sp, #92	; 0x5c
 8007978:	9204      	str	r2, [sp, #16]
 800797a:	f008 f9ff 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800797e:	b2bb      	uxth	r3, r7
 8007980:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
 8007984:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 8007988:	b21b      	sxth	r3, r3
 800798a:	429a      	cmp	r2, r3
 800798c:	da04      	bge.n	8007998 <LISTVIEW_Callback+0x318>
 800798e:	9b03      	ldr	r3, [sp, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f040 8112 	bne.w	8007bba <LISTVIEW_Callback+0x53a>
 8007996:	e10c      	b.n	8007bb2 <LISTVIEW_Callback+0x532>
 8007998:	f10a 33ff 	add.w	r3, sl, #4294967295
 800799c:	443b      	add	r3, r7
 800799e:	b29b      	uxth	r3, r3
 80079a0:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 80079a4:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 80079a8:	b21b      	sxth	r3, r3
 80079aa:	429a      	cmp	r2, r3
 80079ac:	f300 80ff 	bgt.w	8007bae <LISTVIEW_Callback+0x52e>
 80079b0:	9a04      	ldr	r2, [sp, #16]
 80079b2:	b10a      	cbz	r2, 80079b8 <LISTVIEW_Callback+0x338>
 80079b4:	2303      	movs	r3, #3
 80079b6:	e00d      	b.n	80079d4 <LISTVIEW_Callback+0x354>
 80079b8:	4658      	mov	r0, fp
 80079ba:	f009 f868 	bl	8010a8e <LISTVIEW_GetSel>
 80079be:	4580      	cmp	r8, r0
 80079c0:	d107      	bne.n	80079d2 <LISTVIEW_Callback+0x352>
 80079c2:	4658      	mov	r0, fp
 80079c4:	f001 fe76 	bl	80096b4 <WM_HasFocus>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	bf0c      	ite	eq
 80079cc:	2301      	moveq	r3, #1
 80079ce:	2302      	movne	r3, #2
 80079d0:	e000      	b.n	80079d4 <LISTVIEW_Callback+0x354>
 80079d2:	9b04      	ldr	r3, [sp, #16]
 80079d4:	9329      	str	r3, [sp, #164]	; 0xa4
 80079d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80079d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80079da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079de:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80079e0:	9027      	str	r0, [sp, #156]	; 0x9c
 80079e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e4:	9328      	str	r3, [sp, #160]	; 0xa0
 80079e6:	f002 0304 	and.w	r3, r2, #4
 80079ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80079ee:	920c      	str	r2, [sp, #48]	; 0x30
 80079f0:	b153      	cbz	r3, 8007a08 <LISTVIEW_Callback+0x388>
 80079f2:	9b04      	ldr	r3, [sp, #16]
 80079f4:	b943      	cbnz	r3, 8007a08 <LISTVIEW_Callback+0x388>
 80079f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079f8:	9329      	str	r3, [sp, #164]	; 0xa4
 80079fa:	f005 ffbd 	bl	800d978 <LCD_SetColor>
 80079fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007a00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a04:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8007a06:	e002      	b.n	8007a0e <LISTVIEW_Callback+0x38e>
 8007a08:	f005 ffb6 	bl	800d978 <LCD_SetColor>
 8007a0c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8007a0e:	f005 ffab 	bl	800d968 <LCD_SetBkColor>
 8007a12:	9b02      	ldr	r3, [sp, #8]
 8007a14:	b123      	cbz	r3, 8007a20 <LISTVIEW_Callback+0x3a0>
 8007a16:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 8007a20:	9b06      	ldr	r3, [sp, #24]
 8007a22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a24:	ebc3 0609 	rsb	r6, r3, r9
 8007a28:	3a01      	subs	r2, #1
 8007a2a:	9b05      	ldr	r3, [sp, #20]
 8007a2c:	920e      	str	r2, [sp, #56]	; 0x38
 8007a2e:	9308      	str	r3, [sp, #32]
 8007a30:	2500      	movs	r5, #0
 8007a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a34:	429d      	cmp	r5, r3
 8007a36:	f300 808c 	bgt.w	8007b52 <LISTVIEW_Callback+0x4d2>
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	9807      	ldr	r0, [sp, #28]
 8007a3e:	f000 fd98 	bl	8008572 <HEADER_GetItemWidth>
 8007a42:	4629      	mov	r1, r5
 8007a44:	900d      	str	r0, [sp, #52]	; 0x34
 8007a46:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007a48:	f001 f8d3 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 8007a4c:	9015      	str	r0, [sp, #84]	; 0x54
 8007a4e:	7803      	ldrb	r3, [r0, #0]
 8007a50:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 8007a54:	a815      	add	r0, sp, #84	; 0x54
 8007a56:	f008 f991 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007a5e:	932c      	str	r3, [sp, #176]	; 0xb0
 8007a60:	4629      	mov	r1, r5
 8007a62:	9325      	str	r3, [sp, #148]	; 0x94
 8007a64:	f001 f8c5 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 8007a68:	9016      	str	r0, [sp, #88]	; 0x58
 8007a6a:	b160      	cbz	r0, 8007a86 <LISTVIEW_Callback+0x406>
 8007a6c:	1d03      	adds	r3, r0, #4
 8007a6e:	932c      	str	r3, [sp, #176]	; 0xb0
 8007a70:	6803      	ldr	r3, [r0, #0]
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	a816      	add	r0, sp, #88	; 0x58
 8007a76:	f008 f981 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007a7a:	9b01      	ldr	r3, [sp, #4]
 8007a7c:	b11b      	cbz	r3, 8007a86 <LISTVIEW_Callback+0x406>
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f008 f96e 	bl	800fd60 <GUI_ALLOC_LockH>
 8007a84:	9025      	str	r0, [sp, #148]	; 0x94
 8007a86:	9a08      	ldr	r2, [sp, #32]
 8007a88:	4295      	cmp	r5, r2
 8007a8a:	db59      	blt.n	8007b40 <LISTVIEW_Callback+0x4c0>
 8007a8c:	b2b3      	uxth	r3, r6
 8007a8e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8007a92:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 8007a96:	b21b      	sxth	r3, r3
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	da06      	bge.n	8007aaa <LISTVIEW_Callback+0x42a>
 8007a9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d057      	beq.n	8007b52 <LISTVIEW_Callback+0x4d2>
 8007aa2:	a825      	add	r0, sp, #148	; 0x94
 8007aa4:	f008 f96a 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007aa8:	e053      	b.n	8007b52 <LISTVIEW_Callback+0x4d2>
 8007aaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007aac:	1e73      	subs	r3, r6, #1
 8007aae:	4413      	add	r3, r2
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
 8007ab6:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8007aba:	b21b      	sxth	r3, r3
 8007abc:	429a      	cmp	r2, r3
 8007abe:	dc3f      	bgt.n	8007b40 <LISTVIEW_Callback+0x4c0>
 8007ac0:	9b03      	ldr	r3, [sp, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d03c      	beq.n	8007b40 <LISTVIEW_Callback+0x4c0>
 8007ac6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ac8:	b152      	cbz	r2, 8007ae0 <LISTVIEW_Callback+0x460>
 8007aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007acc:	42ab      	cmp	r3, r5
 8007ace:	d107      	bne.n	8007ae0 <LISTVIEW_Callback+0x460>
 8007ad0:	9a04      	ldr	r2, [sp, #16]
 8007ad2:	b92a      	cbnz	r2, 8007ae0 <LISTVIEW_Callback+0x460>
 8007ad4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8007ad6:	f005 ff4f 	bl	800d978 <LCD_SetColor>
 8007ada:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8007adc:	f005 ff44 	bl	800d968 <LCD_SetBkColor>
 8007ae0:	951f      	str	r5, [sp, #124]	; 0x7c
 8007ae2:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
 8007ae6:	b125      	cbz	r5, 8007af2 <LISTVIEW_Callback+0x472>
 8007ae8:	9a02      	ldr	r2, [sp, #8]
 8007aea:	1c13      	adds	r3, r2, #0
 8007aec:	bf18      	it	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	e000      	b.n	8007af4 <LISTVIEW_Callback+0x474>
 8007af2:	462b      	mov	r3, r5
 8007af4:	4433      	add	r3, r6
 8007af6:	9320      	str	r3, [sp, #128]	; 0x80
 8007af8:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8007afc:	9322      	str	r3, [sp, #136]	; 0x88
 8007afe:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8007b02:	9323      	str	r3, [sp, #140]	; 0x8c
 8007b04:	2305      	movs	r3, #5
 8007b06:	931d      	str	r3, [sp, #116]	; 0x74
 8007b08:	9721      	str	r7, [sp, #132]	; 0x84
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	a81c      	add	r0, sp, #112	; 0x70
 8007b0e:	4798      	blx	r3
 8007b10:	2301      	movs	r3, #1
 8007b12:	931d      	str	r3, [sp, #116]	; 0x74
 8007b14:	a81c      	add	r0, sp, #112	; 0x70
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	4798      	blx	r3
 8007b1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b1c:	b182      	cbz	r2, 8007b40 <LISTVIEW_Callback+0x4c0>
 8007b1e:	9b04      	ldr	r3, [sp, #16]
 8007b20:	b973      	cbnz	r3, 8007b40 <LISTVIEW_Callback+0x4c0>
 8007b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b24:	42ab      	cmp	r3, r5
 8007b26:	d10b      	bne.n	8007b40 <LISTVIEW_Callback+0x4c0>
 8007b28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007b2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b2e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007b30:	f005 ff22 	bl	800d978 <LCD_SetColor>
 8007b34:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007b36:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b3a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8007b3c:	f005 ff14 	bl	800d968 <LCD_SetBkColor>
 8007b40:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007b42:	b113      	cbz	r3, 8007b4a <LISTVIEW_Callback+0x4ca>
 8007b44:	a825      	add	r0, sp, #148	; 0x94
 8007b46:	f008 f919 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007b4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b4c:	3501      	adds	r5, #1
 8007b4e:	4416      	add	r6, r2
 8007b50:	e76f      	b.n	8007a32 <LISTVIEW_Callback+0x3b2>
 8007b52:	9a08      	ldr	r2, [sp, #32]
 8007b54:	b94a      	cbnz	r2, 8007b6a <LISTVIEW_Callback+0x4ea>
 8007b56:	9b05      	ldr	r3, [sp, #20]
 8007b58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bf18      	it	ne
 8007b5e:	4616      	movne	r6, r2
 8007b60:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8007b64:	429e      	cmp	r6, r3
 8007b66:	dc22      	bgt.n	8007bae <LISTVIEW_Callback+0x52e>
 8007b68:	e007      	b.n	8007b7a <LISTVIEW_Callback+0x4fa>
 8007b6a:	9b05      	ldr	r3, [sp, #20]
 8007b6c:	960f      	str	r6, [sp, #60]	; 0x3c
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	2200      	movs	r2, #0
 8007b72:	930e      	str	r3, [sp, #56]	; 0x38
 8007b74:	9208      	str	r2, [sp, #32]
 8007b76:	464e      	mov	r6, r9
 8007b78:	e75a      	b.n	8007a30 <LISTVIEW_Callback+0x3b0>
 8007b7a:	9a03      	ldr	r2, [sp, #12]
 8007b7c:	b1ba      	cbz	r2, 8007bae <LISTVIEW_Callback+0x52e>
 8007b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b82:	921f      	str	r2, [sp, #124]	; 0x7c
 8007b84:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
 8007b88:	b11d      	cbz	r5, 8007b92 <LISTVIEW_Callback+0x512>
 8007b8a:	9a02      	ldr	r2, [sp, #8]
 8007b8c:	1c15      	adds	r5, r2, #0
 8007b8e:	bf18      	it	ne
 8007b90:	2501      	movne	r5, #1
 8007b92:	9322      	str	r3, [sp, #136]	; 0x88
 8007b94:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8007b98:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 8007b9c:	9323      	str	r3, [sp, #140]	; 0x8c
 8007b9e:	4435      	add	r5, r6
 8007ba0:	2305      	movs	r3, #5
 8007ba2:	931d      	str	r3, [sp, #116]	; 0x74
 8007ba4:	9520      	str	r5, [sp, #128]	; 0x80
 8007ba6:	9221      	str	r2, [sp, #132]	; 0x84
 8007ba8:	a81c      	add	r0, sp, #112	; 0x70
 8007baa:	9b03      	ldr	r3, [sp, #12]
 8007bac:	4798      	blx	r3
 8007bae:	4457      	add	r7, sl
 8007bb0:	e6d8      	b.n	8007964 <LISTVIEW_Callback+0x2e4>
 8007bb2:	9b02      	ldr	r3, [sp, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d065      	beq.n	8007c84 <LISTVIEW_Callback+0x604>
 8007bb8:	e039      	b.n	8007c2e <LISTVIEW_Callback+0x5ae>
 8007bba:	f04f 33ff 	mov.w	r3, #4294967295
 8007bbe:	931e      	str	r3, [sp, #120]	; 0x78
 8007bc0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007bc2:	2305      	movs	r3, #5
 8007bc4:	931d      	str	r3, [sp, #116]	; 0x74
 8007bc6:	f005 fecf 	bl	800d968 <LCD_SetBkColor>
 8007bca:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 8007bce:	429f      	cmp	r7, r3
 8007bd0:	dcef      	bgt.n	8007bb2 <LISTVIEW_Callback+0x532>
 8007bd2:	9a02      	ldr	r2, [sp, #8]
 8007bd4:	9721      	str	r7, [sp, #132]	; 0x84
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	931f      	str	r3, [sp, #124]	; 0x7c
 8007bda:	ebc2 030a 	rsb	r3, r2, sl
 8007bde:	3b01      	subs	r3, #1
 8007be0:	4457      	add	r7, sl
 8007be2:	ebca 0303 	rsb	r3, sl, r3
 8007be6:	443b      	add	r3, r7
 8007be8:	9323      	str	r3, [sp, #140]	; 0x8c
 8007bea:	9b06      	ldr	r3, [sp, #24]
 8007bec:	ebc3 0509 	rsb	r5, r3, r9
 8007bf0:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8007bf4:	429d      	cmp	r5, r3
 8007bf6:	dae8      	bge.n	8007bca <LISTVIEW_Callback+0x54a>
 8007bf8:	9807      	ldr	r0, [sp, #28]
 8007bfa:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8007bfc:	f000 fcb9 	bl	8008572 <HEADER_GetItemWidth>
 8007c00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c02:	b11b      	cbz	r3, 8007c0c <LISTVIEW_Callback+0x58c>
 8007c04:	9a02      	ldr	r2, [sp, #8]
 8007c06:	1c13      	adds	r3, r2, #0
 8007c08:	bf18      	it	ne
 8007c0a:	2301      	movne	r3, #1
 8007c0c:	442b      	add	r3, r5
 8007c0e:	9320      	str	r3, [sp, #128]	; 0x80
 8007c10:	b108      	cbz	r0, 8007c16 <LISTVIEW_Callback+0x596>
 8007c12:	4405      	add	r5, r0
 8007c14:	e002      	b.n	8007c1c <LISTVIEW_Callback+0x59c>
 8007c16:	f9bd 5064 	ldrsh.w	r5, [sp, #100]	; 0x64
 8007c1a:	3501      	adds	r5, #1
 8007c1c:	1e6b      	subs	r3, r5, #1
 8007c1e:	9322      	str	r3, [sp, #136]	; 0x88
 8007c20:	a81c      	add	r0, sp, #112	; 0x70
 8007c22:	9b03      	ldr	r3, [sp, #12]
 8007c24:	4798      	blx	r3
 8007c26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c28:	3301      	adds	r3, #1
 8007c2a:	931f      	str	r3, [sp, #124]	; 0x7c
 8007c2c:	e7e0      	b.n	8007bf0 <LISTVIEW_Callback+0x570>
 8007c2e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007c30:	f005 fea2 	bl	800d978 <LCD_SetColor>
 8007c34:	9807      	ldr	r0, [sp, #28]
 8007c36:	f000 fc84 	bl	8008542 <HEADER_GetHeight>
 8007c3a:	4448      	add	r0, r9
 8007c3c:	1e45      	subs	r5, r0, #1
 8007c3e:	2600      	movs	r6, #0
 8007c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c42:	429e      	cmp	r6, r3
 8007c44:	d004      	beq.n	8007c50 <LISTVIEW_Callback+0x5d0>
 8007c46:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 8007c4a:	4455      	add	r5, sl
 8007c4c:	429d      	cmp	r5, r3
 8007c4e:	dd1d      	ble.n	8007c8c <LISTVIEW_Callback+0x60c>
 8007c50:	9b06      	ldr	r3, [sp, #24]
 8007c52:	2500      	movs	r5, #0
 8007c54:	ebc3 0609 	rsb	r6, r3, r9
 8007c58:	462f      	mov	r7, r5
 8007c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c5c:	429d      	cmp	r5, r3
 8007c5e:	da11      	bge.n	8007c84 <LISTVIEW_Callback+0x604>
 8007c60:	9807      	ldr	r0, [sp, #28]
 8007c62:	4629      	mov	r1, r5
 8007c64:	f000 fc85 	bl	8008572 <HEADER_GetItemWidth>
 8007c68:	9b05      	ldr	r3, [sp, #20]
 8007c6a:	429d      	cmp	r5, r3
 8007c6c:	9b06      	ldr	r3, [sp, #24]
 8007c6e:	4430      	add	r0, r6
 8007c70:	bfa8      	it	ge
 8007c72:	2300      	movge	r3, #0
 8007c74:	eb00 0603 	add.w	r6, r0, r3
 8007c78:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8007c7c:	bfb8      	it	lt
 8007c7e:	4637      	movlt	r7, r6
 8007c80:	429e      	cmp	r6, r3
 8007c82:	dd10      	ble.n	8007ca6 <LISTVIEW_Callback+0x626>
 8007c84:	4620      	mov	r0, r4
 8007c86:	f7ff f812 	bl	8006cae <WIDGET__EFFECT_DrawDown>
 8007c8a:	e549      	b.n	8007720 <LISTVIEW_Callback+0xa0>
 8007c8c:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 8007c90:	429d      	cmp	r5, r3
 8007c92:	db06      	blt.n	8007ca2 <LISTVIEW_Callback+0x622>
 8007c94:	4628      	mov	r0, r5
 8007c96:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8007c9a:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8007c9e:	f007 f977 	bl	800ef90 <GUI_DrawHLine>
 8007ca2:	3601      	adds	r6, #1
 8007ca4:	e7cc      	b.n	8007c40 <LISTVIEW_Callback+0x5c0>
 8007ca6:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 8007caa:	429e      	cmp	r6, r3
 8007cac:	db08      	blt.n	8007cc0 <LISTVIEW_Callback+0x640>
 8007cae:	42be      	cmp	r6, r7
 8007cb0:	db06      	blt.n	8007cc0 <LISTVIEW_Callback+0x640>
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
 8007cb8:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
 8007cbc:	f007 f946 	bl	800ef4c <GUI_DrawVLine>
 8007cc0:	9b06      	ldr	r3, [sp, #24]
 8007cc2:	9a05      	ldr	r2, [sp, #20]
 8007cc4:	4295      	cmp	r5, r2
 8007cc6:	bfa8      	it	ge
 8007cc8:	2300      	movge	r3, #0
 8007cca:	1af6      	subs	r6, r6, r3
 8007ccc:	3501      	adds	r5, #1
 8007cce:	e7c4      	b.n	8007c5a <LISTVIEW_Callback+0x5da>
 8007cd0:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8007cd4:	f1b9 0f00 	cmp.w	r9, #0
 8007cd8:	f000 80ac 	beq.w	8007e34 <LISTVIEW_Callback+0x7b4>
 8007cdc:	f899 3008 	ldrb.w	r3, [r9, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80a9 	beq.w	8007e38 <LISTVIEW_Callback+0x7b8>
 8007ce6:	4658      	mov	r0, fp
 8007ce8:	f008 f83a 	bl	800fd60 <GUI_ALLOC_LockH>
 8007cec:	901c      	str	r0, [sp, #112]	; 0x70
 8007cee:	f7ff f931 	bl	8006f54 <LISTVIEW__GetNumRows>
 8007cf2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007cf4:	4682      	mov	sl, r0
 8007cf6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007cf8:	f000 fc23 	bl	8008542 <HEADER_GetHeight>
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007d00:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 8007d04:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8007d08:	9202      	str	r2, [sp, #8]
 8007d0a:	9304      	str	r3, [sp, #16]
 8007d0c:	f7ff fa71 	bl	80071f2 <LISTVIEW__GetRowDistY>
 8007d10:	ac2e      	add	r4, sp, #184	; 0xb8
 8007d12:	9003      	str	r0, [sp, #12]
 8007d14:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007d16:	f7ff f920 	bl	8006f5a <LISTVIEW__GetNumColumns>
 8007d1a:	f854 3d48 	ldr.w	r3, [r4, #-72]!
 8007d1e:	4605      	mov	r5, r0
 8007d20:	4620      	mov	r0, r4
 8007d22:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8007d26:	f008 f829 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007d2a:	4658      	mov	r0, fp
 8007d2c:	a925      	add	r1, sp, #148	; 0x94
 8007d2e:	f001 fd37 	bl	80097a0 <WM_GetInsideRectExScrollbar>
 8007d32:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8007d36:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 8007d3a:	f8bd 2096 	ldrh.w	r2, [sp, #150]	; 0x96
 8007d3e:	e899 4080 	ldmia.w	r9, {r7, lr}
 8007d42:	b218      	sxth	r0, r3
 8007d44:	1ac9      	subs	r1, r1, r3
 8007d46:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 8007d4a:	1a9b      	subs	r3, r3, r2
 8007d4c:	b289      	uxth	r1, r1
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	1a38      	subs	r0, r7, r0
 8007d52:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
 8007d56:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
 8007d5a:	d415      	bmi.n	8007d88 <LISTVIEW_Callback+0x708>
 8007d5c:	b209      	sxth	r1, r1
 8007d5e:	4288      	cmp	r0, r1
 8007d60:	dc12      	bgt.n	8007d88 <LISTVIEW_Callback+0x708>
 8007d62:	b211      	sxth	r1, r2
 8007d64:	ebc1 010e 	rsb	r1, r1, lr
 8007d68:	1b89      	subs	r1, r1, r6
 8007d6a:	d40d      	bmi.n	8007d88 <LISTVIEW_Callback+0x708>
 8007d6c:	b21b      	sxth	r3, r3
 8007d6e:	1b9b      	subs	r3, r3, r6
 8007d70:	4299      	cmp	r1, r3
 8007d72:	dc09      	bgt.n	8007d88 <LISTVIEW_Callback+0x708>
 8007d74:	9a03      	ldr	r2, [sp, #12]
 8007d76:	9b02      	ldr	r3, [sp, #8]
 8007d78:	fb91 f1f2 	sdiv	r1, r1, r2
 8007d7c:	4419      	add	r1, r3
 8007d7e:	4551      	cmp	r1, sl
 8007d80:	da02      	bge.n	8007d88 <LISTVIEW_Callback+0x708>
 8007d82:	4658      	mov	r0, fp
 8007d84:	f7ff fb6f 	bl	8007466 <LISTVIEW__SetSel>
 8007d88:	4658      	mov	r0, fp
 8007d8a:	a925      	add	r1, sp, #148	; 0x94
 8007d8c:	f001 fd08 	bl	80097a0 <WM_GetInsideRectExScrollbar>
 8007d90:	9b03      	ldr	r3, [sp, #12]
 8007d92:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007d96:	f8d9 7000 	ldr.w	r7, [r9]
 8007d9a:	9202      	str	r2, [sp, #8]
 8007d9c:	fb03 660a 	mla	r6, r3, sl, r6
 8007da0:	f04f 0a00 	mov.w	sl, #0
 8007da4:	46d1      	mov	r9, sl
 8007da6:	45aa      	cmp	sl, r5
 8007da8:	da07      	bge.n	8007dba <LISTVIEW_Callback+0x73a>
 8007daa:	4651      	mov	r1, sl
 8007dac:	4640      	mov	r0, r8
 8007dae:	f000 fbe0 	bl	8008572 <HEADER_GetItemWidth>
 8007db2:	f10a 0a01 	add.w	sl, sl, #1
 8007db6:	4481      	add	r9, r0
 8007db8:	e7f5      	b.n	8007da6 <LISTVIEW_Callback+0x726>
 8007dba:	4640      	mov	r0, r8
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	f9bd a094 	ldrsh.w	sl, [sp, #148]	; 0x94
 8007dc2:	f000 fbd6 	bl	8008572 <HEADER_GetItemWidth>
 8007dc6:	9a04      	ldr	r2, [sp, #16]
 8007dc8:	4450      	add	r0, sl
 8007dca:	1a83      	subs	r3, r0, r2
 8007dcc:	f04f 0a00 	mov.w	sl, #0
 8007dd0:	429f      	cmp	r7, r3
 8007dd2:	dc07      	bgt.n	8007de4 <LISTVIEW_Callback+0x764>
 8007dd4:	4658      	mov	r0, fp
 8007dd6:	f007 ffc3 	bl	800fd60 <GUI_ALLOC_LockH>
 8007dda:	4555      	cmp	r5, sl
 8007ddc:	901c      	str	r0, [sp, #112]	; 0x70
 8007dde:	dc12      	bgt.n	8007e06 <LISTVIEW_Callback+0x786>
 8007de0:	1e6e      	subs	r6, r5, #1
 8007de2:	e01b      	b.n	8007e1c <LISTVIEW_Callback+0x79c>
 8007de4:	45aa      	cmp	sl, r5
 8007de6:	daf5      	bge.n	8007dd4 <LISTVIEW_Callback+0x754>
 8007de8:	9a02      	ldr	r2, [sp, #8]
 8007dea:	42b2      	cmp	r2, r6
 8007dec:	daf2      	bge.n	8007dd4 <LISTVIEW_Callback+0x754>
 8007dee:	454f      	cmp	r7, r9
 8007df0:	daf0      	bge.n	8007dd4 <LISTVIEW_Callback+0x754>
 8007df2:	f10a 0a01 	add.w	sl, sl, #1
 8007df6:	4640      	mov	r0, r8
 8007df8:	4651      	mov	r1, sl
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	f000 fbb9 	bl	8008572 <HEADER_GetItemWidth>
 8007e00:	9b01      	ldr	r3, [sp, #4]
 8007e02:	4403      	add	r3, r0
 8007e04:	e7e4      	b.n	8007dd0 <LISTVIEW_Callback+0x750>
 8007e06:	454f      	cmp	r7, r9
 8007e08:	dc06      	bgt.n	8007e18 <LISTVIEW_Callback+0x798>
 8007e0a:	9b02      	ldr	r3, [sp, #8]
 8007e0c:	42b3      	cmp	r3, r6
 8007e0e:	bfd4      	ite	le
 8007e10:	4656      	movle	r6, sl
 8007e12:	f04f 36ff 	movgt.w	r6, #4294967295
 8007e16:	e001      	b.n	8007e1c <LISTVIEW_Callback+0x79c>
 8007e18:	f04f 36ff 	mov.w	r6, #4294967295
 8007e1c:	6786      	str	r6, [r0, #120]	; 0x78
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f007 ffac 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007e24:	4658      	mov	r0, fp
 8007e26:	f002 faac 	bl	800a382 <WM_InvalidateWindow>
 8007e2a:	4658      	mov	r0, fp
 8007e2c:	f001 fa72 	bl	8009314 <WM_SetFocus>
 8007e30:	2101      	movs	r1, #1
 8007e32:	e002      	b.n	8007e3a <LISTVIEW_Callback+0x7ba>
 8007e34:	2103      	movs	r1, #3
 8007e36:	e000      	b.n	8007e3a <LISTVIEW_Callback+0x7ba>
 8007e38:	2102      	movs	r1, #2
 8007e3a:	4658      	mov	r0, fp
 8007e3c:	f7ff f961 	bl	8007102 <_NotifyOwner>
 8007e40:	e0d7      	b.n	8007ff2 <LISTVIEW_Callback+0x972>
 8007e42:	68f3      	ldr	r3, [r6, #12]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	2a00      	cmp	r2, #0
 8007e48:	f340 80d0 	ble.w	8007fec <LISTVIEW_Callback+0x96c>
 8007e4c:	4658      	mov	r0, fp
 8007e4e:	f8d3 9000 	ldr.w	r9, [r3]
 8007e52:	f007 ff85 	bl	800fd60 <GUI_ALLOC_LockH>
 8007e56:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	901c      	str	r0, [sp, #112]	; 0x70
 8007e5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e60:	ac25      	add	r4, sp, #148	; 0x94
 8007e62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e66:	4618      	mov	r0, r3
 8007e68:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 8007e6c:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8007e6e:	f893 70b3 	ldrb.w	r7, [r3, #179]	; 0xb3
 8007e72:	f7ff f86f 	bl	8006f54 <LISTVIEW__GetNumRows>
 8007e76:	4682      	mov	sl, r0
 8007e78:	a81c      	add	r0, sp, #112	; 0x70
 8007e7a:	f007 ff7f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007e7e:	f1a9 0310 	sub.w	r3, r9, #16
 8007e82:	2b12      	cmp	r3, #18
 8007e84:	f200 80b2 	bhi.w	8007fec <LISTVIEW_Callback+0x96c>
 8007e88:	e8df f003 	tbb	[pc, r3]
 8007e8c:	0a371a42 	.word	0x0a371a42
 8007e90:	2eb0b0b0 	.word	0x2eb0b0b0
 8007e94:	b0b0b031 	.word	0xb0b0b031
 8007e98:	b0b0b0b0 	.word	0xb0b0b0b0
 8007e9c:	28b0      	.short	0x28b0
 8007e9e:	17          	.byte	0x17
 8007e9f:	00          	.byte	0x00
 8007ea0:	4658      	mov	r0, fp
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	f7ff fb1c 	bl	80074e0 <_MoveSel>
 8007ea8:	0778      	lsls	r0, r7, #29
 8007eaa:	f140 80a2 	bpl.w	8007ff2 <LISTVIEW_Callback+0x972>
 8007eae:	2d00      	cmp	r5, #0
 8007eb0:	f2c0 809f 	blt.w	8007ff2 <LISTVIEW_Callback+0x972>
 8007eb4:	4658      	mov	r0, fp
 8007eb6:	2113      	movs	r1, #19
 8007eb8:	e030      	b.n	8007f1c <LISTVIEW_Callback+0x89c>
 8007eba:	4658      	mov	r0, fp
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	e010      	b.n	8007ee2 <LISTVIEW_Callback+0x862>
 8007ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ec4:	4658      	mov	r0, fp
 8007ec6:	f7ff fb0b 	bl	80074e0 <_MoveSel>
 8007eca:	0779      	lsls	r1, r7, #29
 8007ecc:	f140 8091 	bpl.w	8007ff2 <LISTVIEW_Callback+0x972>
 8007ed0:	2d00      	cmp	r5, #0
 8007ed2:	f2c0 808e 	blt.w	8007ff2 <LISTVIEW_Callback+0x972>
 8007ed6:	4658      	mov	r0, fp
 8007ed8:	2111      	movs	r1, #17
 8007eda:	e01f      	b.n	8007f1c <LISTVIEW_Callback+0x89c>
 8007edc:	4658      	mov	r0, fp
 8007ede:	f04f 31ff 	mov.w	r1, #4294967295
 8007ee2:	f7ff fb1e 	bl	8007522 <_OnPage>
 8007ee6:	e084      	b.n	8007ff2 <LISTVIEW_Callback+0x972>
 8007ee8:	4658      	mov	r0, fp
 8007eea:	2100      	movs	r1, #0
 8007eec:	e002      	b.n	8007ef4 <LISTVIEW_Callback+0x874>
 8007eee:	4658      	mov	r0, fp
 8007ef0:	f10a 31ff 	add.w	r1, sl, #4294967295
 8007ef4:	f7ff fab7 	bl	8007466 <LISTVIEW__SetSel>
 8007ef8:	e07b      	b.n	8007ff2 <LISTVIEW_Callback+0x972>
 8007efa:	077a      	lsls	r2, r7, #29
 8007efc:	d504      	bpl.n	8007f08 <LISTVIEW_Callback+0x888>
 8007efe:	2d00      	cmp	r5, #0
 8007f00:	db02      	blt.n	8007f08 <LISTVIEW_Callback+0x888>
 8007f02:	4658      	mov	r0, fp
 8007f04:	2112      	movs	r1, #18
 8007f06:	e009      	b.n	8007f1c <LISTVIEW_Callback+0x89c>
 8007f08:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	4441      	add	r1, r8
 8007f0e:	e00c      	b.n	8007f2a <LISTVIEW_Callback+0x8aa>
 8007f10:	077b      	lsls	r3, r7, #29
 8007f12:	d506      	bpl.n	8007f22 <LISTVIEW_Callback+0x8a2>
 8007f14:	2d00      	cmp	r5, #0
 8007f16:	db04      	blt.n	8007f22 <LISTVIEW_Callback+0x8a2>
 8007f18:	4658      	mov	r0, fp
 8007f1a:	2110      	movs	r1, #16
 8007f1c:	f7ff f9af 	bl	800727e <_ColumnScroll>
 8007f20:	e067      	b.n	8007ff2 <LISTVIEW_Callback+0x972>
 8007f22:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007f24:	4620      	mov	r0, r4
 8007f26:	ebc8 0101 	rsb	r1, r8, r1
 8007f2a:	f001 fd47 	bl	80099bc <WM_SetScrollValue>
 8007f2e:	4605      	mov	r5, r0
 8007f30:	4658      	mov	r0, fp
 8007f32:	f007 ff15 	bl	800fd60 <GUI_ALLOC_LockH>
 8007f36:	901c      	str	r0, [sp, #112]	; 0x70
 8007f38:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 8007f3c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007f40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007f44:	a81c      	add	r0, sp, #112	; 0x70
 8007f46:	f007 ff19 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007f4a:	2d00      	cmp	r5, #0
 8007f4c:	d051      	beq.n	8007ff2 <LISTVIEW_Callback+0x972>
 8007f4e:	4658      	mov	r0, fp
 8007f50:	f7ff f823 	bl	8006f9a <_UpdateScrollPos>
 8007f54:	4658      	mov	r0, fp
 8007f56:	f7ff f975 	bl	8007244 <LISTVIEW__InvalidateInsideArea>
 8007f5a:	e04a      	b.n	8007ff2 <LISTVIEW_Callback+0x972>
 8007f5c:	4658      	mov	r0, fp
 8007f5e:	f007 feff 	bl	800fd60 <GUI_ALLOC_LockH>
 8007f62:	4604      	mov	r4, r0
 8007f64:	9014      	str	r0, [sp, #80]	; 0x50
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d040      	beq.n	8007fec <LISTVIEW_Callback+0x96c>
 8007f6a:	f7fe fff3 	bl	8006f54 <LISTVIEW__GetNumRows>
 8007f6e:	4680      	mov	r8, r0
 8007f70:	4620      	mov	r0, r4
 8007f72:	f7fe fff2 	bl	8006f5a <LISTVIEW__GetNumColumns>
 8007f76:	2500      	movs	r5, #0
 8007f78:	4681      	mov	r9, r0
 8007f7a:	4545      	cmp	r5, r8
 8007f7c:	da1e      	bge.n	8007fbc <LISTVIEW_Callback+0x93c>
 8007f7e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007f80:	4629      	mov	r1, r5
 8007f82:	f000 fe36 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 8007f86:	2700      	movs	r7, #0
 8007f88:	9025      	str	r0, [sp, #148]	; 0x94
 8007f8a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007f8c:	454f      	cmp	r7, r9
 8007f8e:	6818      	ldr	r0, [r3, #0]
 8007f90:	da0d      	bge.n	8007fae <LISTVIEW_Callback+0x92e>
 8007f92:	4639      	mov	r1, r7
 8007f94:	f000 fe2d 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 8007f98:	901a      	str	r0, [sp, #104]	; 0x68
 8007f9a:	b130      	cbz	r0, 8007faa <LISTVIEW_Callback+0x92a>
 8007f9c:	6800      	ldr	r0, [r0, #0]
 8007f9e:	b108      	cbz	r0, 8007fa4 <LISTVIEW_Callback+0x924>
 8007fa0:	f007 ff18 	bl	800fdd4 <GUI_ALLOC_Free>
 8007fa4:	a81a      	add	r0, sp, #104	; 0x68
 8007fa6:	f007 fee9 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007faa:	3701      	adds	r7, #1
 8007fac:	e7ed      	b.n	8007f8a <LISTVIEW_Callback+0x90a>
 8007fae:	f000 fdf7 	bl	8008ba0 <GUI_ARRAY_Delete>
 8007fb2:	a825      	add	r0, sp, #148	; 0x94
 8007fb4:	f007 fee2 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007fb8:	3501      	adds	r5, #1
 8007fba:	e7de      	b.n	8007f7a <LISTVIEW_Callback+0x8fa>
 8007fbc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8007fc0:	b158      	cbz	r0, 8007fda <LISTVIEW_Callback+0x95a>
 8007fc2:	f007 fecd 	bl	800fd60 <GUI_ALLOC_LockH>
 8007fc6:	ab2e      	add	r3, sp, #184	; 0xb8
 8007fc8:	f843 0d48 	str.w	r0, [r3, #-72]!
 8007fcc:	68c5      	ldr	r5, [r0, #12]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f007 fed4 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007fd4:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8007fd8:	47a8      	blx	r5
 8007fda:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007fdc:	f000 fde0 	bl	8008ba0 <GUI_ARRAY_Delete>
 8007fe0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007fe2:	f000 fddd 	bl	8008ba0 <GUI_ARRAY_Delete>
 8007fe6:	a814      	add	r0, sp, #80	; 0x50
 8007fe8:	f007 fec8 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8007fec:	4630      	mov	r0, r6
 8007fee:	f002 fdf9 	bl	800abe4 <WM_DefaultProc>
 8007ff2:	b02f      	add	sp, #188	; 0xbc
 8007ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ff8 <LISTVIEW_CreateUser>:
 8007ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ffa:	b089      	sub	sp, #36	; 0x24
 8007ffc:	4606      	mov	r6, r0
 8007ffe:	460d      	mov	r5, r1
 8008000:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008002:	b992      	cbnz	r2, 800802a <LISTVIEW_CreateUser+0x32>
 8008004:	b98b      	cbnz	r3, 800802a <LISTVIEW_CreateUser+0x32>
 8008006:	b980      	cbnz	r0, 800802a <LISTVIEW_CreateUser+0x32>
 8008008:	b979      	cbnz	r1, 800802a <LISTVIEW_CreateUser+0x32>
 800800a:	a906      	add	r1, sp, #24
 800800c:	4620      	mov	r0, r4
 800800e:	f001 fc9c 	bl	800994a <WM_GetClientRectEx>
 8008012:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8008016:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 800801a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800801e:	1ad2      	subs	r2, r2, r3
 8008020:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8008024:	1acb      	subs	r3, r1, r3
 8008026:	3201      	adds	r2, #1
 8008028:	3301      	adds	r3, #1
 800802a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800802c:	9101      	str	r1, [sp, #4]
 800802e:	4928      	ldr	r1, [pc, #160]	; (80080d0 <LISTVIEW_CreateUser+0xd8>)
 8008030:	9102      	str	r1, [sp, #8]
 8008032:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008034:	9400      	str	r4, [sp, #0]
 8008036:	3188      	adds	r1, #136	; 0x88
 8008038:	9103      	str	r1, [sp, #12]
 800803a:	4630      	mov	r0, r6
 800803c:	4629      	mov	r1, r5
 800803e:	f002 f9e1 	bl	800a404 <WM_CreateWindowAsChild>
 8008042:	4607      	mov	r7, r0
 8008044:	2800      	cmp	r0, #0
 8008046:	d040      	beq.n	80080ca <LISTVIEW_CreateUser+0xd2>
 8008048:	f000 fde6 	bl	8008c18 <GUI_ARRAY_Create>
 800804c:	4605      	mov	r5, r0
 800804e:	f000 fde3 	bl	8008c18 <GUI_ARRAY_Create>
 8008052:	4604      	mov	r4, r0
 8008054:	4638      	mov	r0, r7
 8008056:	f007 fe83 	bl	800fd60 <GUI_ALLOC_LockH>
 800805a:	9005      	str	r0, [sp, #20]
 800805c:	2800      	cmp	r0, #0
 800805e:	d031      	beq.n	80080c4 <LISTVIEW_CreateUser+0xcc>
 8008060:	63c5      	str	r5, [r0, #60]	; 0x3c
 8008062:	4d1c      	ldr	r5, [pc, #112]	; (80080d4 <LISTVIEW_CreateUser+0xdc>)
 8008064:	6404      	str	r4, [r0, #64]	; 0x40
 8008066:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008068:	2210      	movs	r2, #16
 800806a:	f7fe fd2d 	bl	8006ac8 <WIDGET__Init>
 800806e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008070:	9e05      	ldr	r6, [sp, #20]
 8008072:	f106 0444 	add.w	r4, r6, #68	; 0x44
 8008076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800807a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800807c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008080:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008084:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <LISTVIEW_CreateUser+0xe0>)
 8008086:	63b3      	str	r3, [r6, #56]	; 0x38
 8008088:	2301      	movs	r3, #1
 800808a:	2000      	movs	r0, #0
 800808c:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
 8008090:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8008094:	f04f 34ff 	mov.w	r4, #4294967295
 8008098:	2302      	movs	r3, #2
 800809a:	67f0      	str	r0, [r6, #124]	; 0x7c
 800809c:	f8c6 0084 	str.w	r0, [r6, #132]	; 0x84
 80080a0:	6774      	str	r4, [r6, #116]	; 0x74
 80080a2:	4602      	mov	r2, r0
 80080a4:	9301      	str	r3, [sp, #4]
 80080a6:	9700      	str	r7, [sp, #0]
 80080a8:	4603      	mov	r3, r0
 80080aa:	9002      	str	r0, [sp, #8]
 80080ac:	4601      	mov	r1, r0
 80080ae:	9003      	str	r0, [sp, #12]
 80080b0:	f000 f986 	bl	80083c0 <HEADER_CreateEx>
 80080b4:	ab08      	add	r3, sp, #32
 80080b6:	f853 2d0c 	ldr.w	r2, [r3, #-12]!
 80080ba:	6350      	str	r0, [r2, #52]	; 0x34
 80080bc:	6794      	str	r4, [r2, #120]	; 0x78
 80080be:	4618      	mov	r0, r3
 80080c0:	f007 fe5c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80080c4:	4638      	mov	r0, r7
 80080c6:	f7ff fa67 	bl	8007598 <LISTVIEW__UpdateScrollParas>
 80080ca:	4638      	mov	r0, r7
 80080cc:	b009      	add	sp, #36	; 0x24
 80080ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d0:	08007681 	.word	0x08007681
 80080d4:	20000028 	.word	0x20000028
 80080d8:	08007013 	.word	0x08007013

080080dc <LISTVIEW_AddColumn>:
 80080dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	b085      	sub	sp, #20
 80080e2:	2500      	movs	r5, #0
 80080e4:	468a      	mov	sl, r1
 80080e6:	4691      	mov	r9, r2
 80080e8:	461c      	mov	r4, r3
 80080ea:	9502      	str	r5, [sp, #8]
 80080ec:	9503      	str	r5, [sp, #12]
 80080ee:	4606      	mov	r6, r0
 80080f0:	b908      	cbnz	r0, 80080f6 <LISTVIEW_AddColumn+0x1a>
 80080f2:	2400      	movs	r4, #0
 80080f4:	e040      	b.n	8008178 <LISTVIEW_AddColumn+0x9c>
 80080f6:	f007 fe33 	bl	800fd60 <GUI_ALLOC_LockH>
 80080fa:	9001      	str	r0, [sp, #4]
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d0f8      	beq.n	80080f2 <LISTVIEW_AddColumn+0x16>
 8008100:	f8d0 b034 	ldr.w	fp, [r0, #52]	; 0x34
 8008104:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 8008108:	f7fe ff24 	bl	8006f54 <LISTVIEW__GetNumRows>
 800810c:	4607      	mov	r7, r0
 800810e:	a801      	add	r0, sp, #4
 8008110:	f007 fe34 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008114:	1c63      	adds	r3, r4, #1
 8008116:	bf08      	it	eq
 8008118:	240e      	moveq	r4, #14
 800811a:	4658      	mov	r0, fp
 800811c:	4651      	mov	r1, sl
 800811e:	464a      	mov	r2, r9
 8008120:	4623      	mov	r3, r4
 8008122:	f000 f977 	bl	8008414 <HEADER_AddItem>
 8008126:	a904      	add	r1, sp, #16
 8008128:	4640      	mov	r0, r8
 800812a:	f801 4d08 	strb.w	r4, [r1, #-8]!
 800812e:	2208      	movs	r2, #8
 8008130:	f000 fcec 	bl	8008b0c <GUI_ARRAY_AddItem>
 8008134:	b9f7      	cbnz	r7, 8008174 <LISTVIEW_AddColumn+0x98>
 8008136:	2400      	movs	r4, #0
 8008138:	e015      	b.n	8008166 <LISTVIEW_AddColumn+0x8a>
 800813a:	3401      	adds	r4, #1
 800813c:	42bc      	cmp	r4, r7
 800813e:	d0fa      	beq.n	8008136 <LISTVIEW_AddColumn+0x5a>
 8008140:	4621      	mov	r1, r4
 8008142:	4630      	mov	r0, r6
 8008144:	f7ff f819 	bl	800717a <LISTVIEW__GetpRow>
 8008148:	ab04      	add	r3, sp, #16
 800814a:	6805      	ldr	r5, [r0, #0]
 800814c:	f843 0d10 	str.w	r0, [r3, #-16]!
 8008150:	4668      	mov	r0, sp
 8008152:	f007 fe13 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008156:	4628      	mov	r0, r5
 8008158:	2100      	movs	r1, #0
 800815a:	2208      	movs	r2, #8
 800815c:	f000 fcd6 	bl	8008b0c <GUI_ARRAY_AddItem>
 8008160:	2800      	cmp	r0, #0
 8008162:	d0ea      	beq.n	800813a <LISTVIEW_AddColumn+0x5e>
 8008164:	2401      	movs	r4, #1
 8008166:	4630      	mov	r0, r6
 8008168:	f7ff f86c 	bl	8007244 <LISTVIEW__InvalidateInsideArea>
 800816c:	4630      	mov	r0, r6
 800816e:	f7ff fa13 	bl	8007598 <LISTVIEW__UpdateScrollParas>
 8008172:	e001      	b.n	8008178 <LISTVIEW_AddColumn+0x9c>
 8008174:	462c      	mov	r4, r5
 8008176:	e7e3      	b.n	8008140 <LISTVIEW_AddColumn+0x64>
 8008178:	4620      	mov	r0, r4
 800817a:	b005      	add	sp, #20
 800817c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008180 <LISTVIEW_AddRow>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	460d      	mov	r5, r1
 8008186:	b087      	sub	sp, #28
 8008188:	4606      	mov	r6, r0
 800818a:	b908      	cbnz	r0, 8008190 <LISTVIEW_AddRow+0x10>
 800818c:	2400      	movs	r4, #0
 800818e:	e081      	b.n	8008294 <LISTVIEW_AddRow+0x114>
 8008190:	f007 fde6 	bl	800fd60 <GUI_ALLOC_LockH>
 8008194:	9004      	str	r0, [sp, #16]
 8008196:	2800      	cmp	r0, #0
 8008198:	d0f8      	beq.n	800818c <LISTVIEW_AddRow+0xc>
 800819a:	f8d0 a03c 	ldr.w	sl, [r0, #60]	; 0x3c
 800819e:	f7fe fed9 	bl	8006f54 <LISTVIEW__GetNumRows>
 80081a2:	af06      	add	r7, sp, #24
 80081a4:	4681      	mov	r9, r0
 80081a6:	f857 0d08 	ldr.w	r0, [r7, #-8]!
 80081aa:	f7fe fed6 	bl	8006f5a <LISTVIEW__GetNumColumns>
 80081ae:	9000      	str	r0, [sp, #0]
 80081b0:	4638      	mov	r0, r7
 80081b2:	f007 fde3 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80081b6:	4650      	mov	r0, sl
 80081b8:	2100      	movs	r1, #0
 80081ba:	220c      	movs	r2, #12
 80081bc:	f000 fca6 	bl	8008b0c <GUI_ARRAY_AddItem>
 80081c0:	4604      	mov	r4, r0
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d165      	bne.n	8008292 <LISTVIEW_AddRow+0x112>
 80081c6:	f000 fd27 	bl	8008c18 <GUI_ARRAY_Create>
 80081ca:	4680      	mov	r8, r0
 80081cc:	9b00      	ldr	r3, [sp, #0]
 80081ce:	429c      	cmp	r4, r3
 80081d0:	da34      	bge.n	800823c <LISTVIEW_AddRow+0xbc>
 80081d2:	b145      	cbz	r5, 80081e6 <LISTVIEW_AddRow+0x66>
 80081d4:	f8d5 b000 	ldr.w	fp, [r5]
 80081d8:	1d2a      	adds	r2, r5, #4
 80081da:	f1bb 0f00 	cmp.w	fp, #0
 80081de:	bf14      	ite	ne
 80081e0:	4615      	movne	r5, r2
 80081e2:	2500      	moveq	r5, #0
 80081e4:	e000      	b.n	80081e8 <LISTVIEW_AddRow+0x68>
 80081e6:	46ab      	mov	fp, r5
 80081e8:	4658      	mov	r0, fp
 80081ea:	f005 fbcd 	bl	800d988 <GUI__strlen>
 80081ee:	4602      	mov	r2, r0
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	2100      	movs	r1, #0
 80081f4:	4640      	mov	r0, r8
 80081f6:	3209      	adds	r2, #9
 80081f8:	9301      	str	r3, [sp, #4]
 80081fa:	f000 fc87 	bl	8008b0c <GUI_ARRAY_AddItem>
 80081fe:	b148      	cbz	r0, 8008214 <LISTVIEW_AddRow+0x94>
 8008200:	f114 34ff 	adds.w	r4, r4, #4294967295
 8008204:	d304      	bcc.n	8008210 <LISTVIEW_AddRow+0x90>
 8008206:	4640      	mov	r0, r8
 8008208:	4621      	mov	r1, r4
 800820a:	f000 fc0c 	bl	8008a26 <GUI_ARRAY_DeleteItem>
 800820e:	e7f7      	b.n	8008200 <LISTVIEW_AddRow+0x80>
 8008210:	2401      	movs	r4, #1
 8008212:	e014      	b.n	800823e <LISTVIEW_AddRow+0xbe>
 8008214:	4640      	mov	r0, r8
 8008216:	4621      	mov	r1, r4
 8008218:	f000 fceb 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 800821c:	9b01      	ldr	r3, [sp, #4]
 800821e:	9003      	str	r0, [sp, #12]
 8008220:	2b01      	cmp	r3, #1
 8008222:	dd06      	ble.n	8008232 <LISTVIEW_AddRow+0xb2>
 8008224:	f1bb 0f00 	cmp.w	fp, #0
 8008228:	d003      	beq.n	8008232 <LISTVIEW_AddRow+0xb2>
 800822a:	3004      	adds	r0, #4
 800822c:	4659      	mov	r1, fp
 800822e:	f00e fb73 	bl	8016918 <strcpy>
 8008232:	a803      	add	r0, sp, #12
 8008234:	f007 fda2 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008238:	3401      	adds	r4, #1
 800823a:	e7c7      	b.n	80081cc <LISTVIEW_AddRow+0x4c>
 800823c:	2400      	movs	r4, #0
 800823e:	4649      	mov	r1, r9
 8008240:	4650      	mov	r0, sl
 8008242:	f000 fcd6 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 8008246:	ab06      	add	r3, sp, #24
 8008248:	f843 0d04 	str.w	r0, [r3, #-4]!
 800824c:	f8c0 8000 	str.w	r8, [r0]
 8008250:	4618      	mov	r0, r3
 8008252:	f007 fd93 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008256:	4630      	mov	r0, r6
 8008258:	f007 fd82 	bl	800fd60 <GUI_ALLOC_LockH>
 800825c:	9004      	str	r0, [sp, #16]
 800825e:	b188      	cbz	r0, 8008284 <LISTVIEW_AddRow+0x104>
 8008260:	2200      	movs	r2, #0
 8008262:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
 8008266:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 800826a:	b13a      	cbz	r2, 800827c <LISTVIEW_AddRow+0xfc>
 800826c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8008270:	2b00      	cmp	r3, #0
 8008272:	db03      	blt.n	800827c <LISTVIEW_AddRow+0xfc>
 8008274:	4630      	mov	r0, r6
 8008276:	f7fe ffe5 	bl	8007244 <LISTVIEW__InvalidateInsideArea>
 800827a:	e003      	b.n	8008284 <LISTVIEW_AddRow+0x104>
 800827c:	4630      	mov	r0, r6
 800827e:	4649      	mov	r1, r9
 8008280:	f7ff f8bf 	bl	8007402 <LISTVIEW__InvalidateRow>
 8008284:	4638      	mov	r0, r7
 8008286:	f007 fd79 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800828a:	4630      	mov	r0, r6
 800828c:	f7ff f984 	bl	8007598 <LISTVIEW__UpdateScrollParas>
 8008290:	e000      	b.n	8008294 <LISTVIEW_AddRow+0x114>
 8008292:	2401      	movs	r4, #1
 8008294:	4620      	mov	r0, r4
 8008296:	b007      	add	sp, #28
 8008298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800829c <HEADER_GetSel>:
 800829c:	b513      	push	{r0, r1, r4, lr}
 800829e:	4604      	mov	r4, r0
 80082a0:	b140      	cbz	r0, 80082b4 <HEADER_GetSel+0x18>
 80082a2:	f007 fd5d 	bl	800fd60 <GUI_ALLOC_LockH>
 80082a6:	ab02      	add	r3, sp, #8
 80082a8:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80082aa:	f843 0d04 	str.w	r0, [r3, #-4]!
 80082ae:	4618      	mov	r0, r3
 80082b0:	f007 fd64 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80082b4:	4620      	mov	r0, r4
 80082b6:	b002      	add	sp, #8
 80082b8:	bd10      	pop	{r4, pc}
	...

080082bc <_RestoreOldCursor>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4c07      	ldr	r4, [pc, #28]	; (80082dc <_RestoreOldCursor+0x20>)
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	b153      	cbz	r3, 80082da <_RestoreOldCursor+0x1e>
 80082c4:	4d06      	ldr	r5, [pc, #24]	; (80082e0 <_RestoreOldCursor+0x24>)
 80082c6:	6828      	ldr	r0, [r5, #0]
 80082c8:	f007 f85c 	bl	800f384 <GUI_CURSOR_GetStateEx>
 80082cc:	b118      	cbz	r0, 80082d6 <_RestoreOldCursor+0x1a>
 80082ce:	6820      	ldr	r0, [r4, #0]
 80082d0:	6829      	ldr	r1, [r5, #0]
 80082d2:	f006 fff1 	bl	800f2b8 <GUI_CURSOR_SelectEx>
 80082d6:	2300      	movs	r3, #0
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	2001d03c 	.word	0x2001d03c
 80082e0:	2001d4b4 	.word	0x2001d4b4

080082e4 <HEADER_CreateUser>:
 80082e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e8:	b086      	sub	sp, #24
 80082ea:	4604      	mov	r4, r0
 80082ec:	460e      	mov	r6, r1
 80082ee:	461d      	mov	r5, r3
 80082f0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80082f4:	4617      	mov	r7, r2
 80082f6:	b96a      	cbnz	r2, 8008314 <HEADER_CreateUser+0x30>
 80082f8:	b960      	cbnz	r0, 8008314 <HEADER_CreateUser+0x30>
 80082fa:	b959      	cbnz	r1, 8008314 <HEADER_CreateUser+0x30>
 80082fc:	4640      	mov	r0, r8
 80082fe:	a904      	add	r1, sp, #16
 8008300:	f001 faa2 	bl	8009848 <WM_GetInsideRectEx>
 8008304:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8008308:	f9bd 7014 	ldrsh.w	r7, [sp, #20]
 800830c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8008310:	1b3f      	subs	r7, r7, r4
 8008312:	3701      	adds	r7, #1
 8008314:	b96d      	cbnz	r5, 8008332 <HEADER_CreateUser+0x4e>
 8008316:	f7fe fccd 	bl	8006cb4 <WIDGET_GetDefaultEffect>
 800831a:	4b25      	ldr	r3, [pc, #148]	; (80083b0 <HEADER_CreateUser+0xcc>)
 800831c:	4605      	mov	r5, r0
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	f006 fdb4 	bl	800ee8c <GUI_GetYDistOfFont>
 8008324:	4b23      	ldr	r3, [pc, #140]	; (80083b4 <HEADER_CreateUser+0xd0>)
 8008326:	682d      	ldr	r5, [r5, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800832e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008334:	f8cd 8000 	str.w	r8, [sp]
 8008338:	f443 7320 	orr.w	r3, r3, #640	; 0x280
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	4b1e      	ldr	r3, [pc, #120]	; (80083b8 <HEADER_CreateUser+0xd4>)
 8008340:	9302      	str	r3, [sp, #8]
 8008342:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008344:	3344      	adds	r3, #68	; 0x44
 8008346:	9303      	str	r3, [sp, #12]
 8008348:	463a      	mov	r2, r7
 800834a:	4620      	mov	r0, r4
 800834c:	4631      	mov	r1, r6
 800834e:	462b      	mov	r3, r5
 8008350:	f002 f858 	bl	800a404 <WM_CreateWindowAsChild>
 8008354:	4607      	mov	r7, r0
 8008356:	b338      	cbz	r0, 80083a8 <HEADER_CreateUser+0xc4>
 8008358:	f000 fc5e 	bl	8008c18 <GUI_ARRAY_Create>
 800835c:	4604      	mov	r4, r0
 800835e:	4638      	mov	r0, r7
 8008360:	f007 fcfe 	bl	800fd60 <GUI_ALLOC_LockH>
 8008364:	4d12      	ldr	r5, [pc, #72]	; (80083b0 <HEADER_CreateUser+0xcc>)
 8008366:	9004      	str	r0, [sp, #16]
 8008368:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800836a:	64c4      	str	r4, [r0, #76]	; 0x4c
 800836c:	2200      	movs	r2, #0
 800836e:	f7fe fbab 	bl	8006ac8 <WIDGET__Init>
 8008372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008374:	f10d 0e18 	add.w	lr, sp, #24
 8008378:	f85e 6d08 	ldr.w	r6, [lr, #-8]!
 800837c:	f106 0434 	add.w	r4, r6, #52	; 0x34
 8008380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008382:	682b      	ldr	r3, [r5, #0]
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	4c0d      	ldr	r4, [pc, #52]	; (80083bc <HEADER_CreateUser+0xd8>)
 8008388:	f04f 33ff 	mov.w	r3, #4294967295
 800838c:	6533      	str	r3, [r6, #80]	; 0x50
 800838e:	6573      	str	r3, [r6, #84]	; 0x54
 8008390:	2200      	movs	r2, #0
 8008392:	6633      	str	r3, [r6, #96]	; 0x60
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	64b3      	str	r3, [r6, #72]	; 0x48
 8008398:	65b2      	str	r2, [r6, #88]	; 0x58
 800839a:	4670      	mov	r0, lr
 800839c:	f007 fcee 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	4638      	mov	r0, r7
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	4798      	blx	r3
 80083a8:	4638      	mov	r0, r7
 80083aa:	b006      	add	sp, #24
 80083ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083b0:	20000058 	.word	0x20000058
 80083b4:	2001d040 	.word	0x2001d040
 80083b8:	080087e5 	.word	0x080087e5
 80083bc:	2000006c 	.word	0x2000006c

080083c0 <HEADER_CreateEx>:
 80083c0:	b510      	push	{r4, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	9c08      	ldr	r4, [sp, #32]
 80083c6:	9400      	str	r4, [sp, #0]
 80083c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80083ca:	9401      	str	r4, [sp, #4]
 80083cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083ce:	9402      	str	r4, [sp, #8]
 80083d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80083d2:	9403      	str	r4, [sp, #12]
 80083d4:	2400      	movs	r4, #0
 80083d6:	9404      	str	r4, [sp, #16]
 80083d8:	f7ff ff84 	bl	80082e4 <HEADER_CreateUser>
 80083dc:	b006      	add	sp, #24
 80083de:	bd10      	pop	{r4, pc}

080083e0 <HEADER_SetScrollPos>:
 80083e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083e2:	460c      	mov	r4, r1
 80083e4:	4605      	mov	r5, r0
 80083e6:	b198      	cbz	r0, 8008410 <HEADER_SetScrollPos+0x30>
 80083e8:	2900      	cmp	r1, #0
 80083ea:	db11      	blt.n	8008410 <HEADER_SetScrollPos+0x30>
 80083ec:	f007 fcb8 	bl	800fd60 <GUI_ALLOC_LockH>
 80083f0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80083f2:	9001      	str	r0, [sp, #4]
 80083f4:	4294      	cmp	r4, r2
 80083f6:	d008      	beq.n	800840a <HEADER_SetScrollPos+0x2a>
 80083f8:	6584      	str	r4, [r0, #88]	; 0x58
 80083fa:	4628      	mov	r0, r5
 80083fc:	f001 ffc1 	bl	800a382 <WM_InvalidateWindow>
 8008400:	4628      	mov	r0, r5
 8008402:	f001 f9c5 	bl	8009790 <WM_GetParent>
 8008406:	f001 ffbc 	bl	800a382 <WM_InvalidateWindow>
 800840a:	a801      	add	r0, sp, #4
 800840c:	f007 fcb6 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008410:	b003      	add	sp, #12
 8008412:	bd30      	pop	{r4, r5, pc}

08008414 <HEADER_AddItem>:
 8008414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008418:	460e      	mov	r6, r1
 800841a:	b086      	sub	sp, #24
 800841c:	4614      	mov	r4, r2
 800841e:	469a      	mov	sl, r3
 8008420:	4681      	mov	r9, r0
 8008422:	2800      	cmp	r0, #0
 8008424:	d04c      	beq.n	80084c0 <HEADER_AddItem+0xac>
 8008426:	f007 fc9b 	bl	800fd60 <GUI_ALLOC_LockH>
 800842a:	4680      	mov	r8, r0
 800842c:	9000      	str	r0, [sp, #0]
 800842e:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 8008430:	b1d4      	cbz	r4, 8008468 <HEADER_AddItem+0x54>
 8008432:	4620      	mov	r0, r4
 8008434:	f7f7 feec 	bl	8000210 <strlen>
 8008438:	4605      	mov	r5, r0
 800843a:	b9be      	cbnz	r6, 800846c <HEADER_AddItem+0x58>
 800843c:	2800      	cmp	r0, #0
 800843e:	d03f      	beq.n	80084c0 <HEADER_AddItem+0xac>
 8008440:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 8008444:	f006 fb4a 	bl	800eadc <GUI_SetFont>
 8008448:	4680      	mov	r8, r0
 800844a:	4620      	mov	r0, r4
 800844c:	f006 fd20 	bl	800ee90 <GUI_GetStringDistX>
 8008450:	9a00      	ldr	r2, [sp, #0]
 8008452:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008454:	681e      	ldr	r6, [r3, #0]
 8008456:	4b1c      	ldr	r3, [pc, #112]	; (80084c8 <HEADER_AddItem+0xb4>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	441e      	add	r6, r3
 800845c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8008460:	4640      	mov	r0, r8
 8008462:	f006 fb3b 	bl	800eadc <GUI_SetFont>
 8008466:	e001      	b.n	800846c <HEADER_AddItem+0x58>
 8008468:	b356      	cbz	r6, 80084c0 <HEADER_AddItem+0xac>
 800846a:	4625      	mov	r5, r4
 800846c:	2300      	movs	r3, #0
 800846e:	4668      	mov	r0, sp
 8008470:	9602      	str	r6, [sp, #8]
 8008472:	9304      	str	r3, [sp, #16]
 8008474:	f8ad a00c 	strh.w	sl, [sp, #12]
 8008478:	f007 fc80 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800847c:	4638      	mov	r0, r7
 800847e:	f000 fb36 	bl	8008aee <GUI_ARRAY_GetNumItems>
 8008482:	a902      	add	r1, sp, #8
 8008484:	4606      	mov	r6, r0
 8008486:	f105 0211 	add.w	r2, r5, #17
 800848a:	4638      	mov	r0, r7
 800848c:	f000 fb3e 	bl	8008b0c <GUI_ARRAY_AddItem>
 8008490:	b9b0      	cbnz	r0, 80084c0 <HEADER_AddItem+0xac>
 8008492:	4638      	mov	r0, r7
 8008494:	4631      	mov	r1, r6
 8008496:	f000 fbac 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 800849a:	9001      	str	r0, [sp, #4]
 800849c:	b125      	cbz	r5, 80084a8 <HEADER_AddItem+0x94>
 800849e:	4621      	mov	r1, r4
 80084a0:	300c      	adds	r0, #12
 80084a2:	f00e fa39 	bl	8016918 <strcpy>
 80084a6:	e000      	b.n	80084aa <HEADER_AddItem+0x96>
 80084a8:	7305      	strb	r5, [r0, #12]
 80084aa:	a801      	add	r0, sp, #4
 80084ac:	f007 fc66 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80084b0:	4648      	mov	r0, r9
 80084b2:	f001 ff66 	bl	800a382 <WM_InvalidateWindow>
 80084b6:	4648      	mov	r0, r9
 80084b8:	f001 f96a 	bl	8009790 <WM_GetParent>
 80084bc:	f001 ff61 	bl	800a382 <WM_InvalidateWindow>
 80084c0:	b006      	add	sp, #24
 80084c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c6:	bf00      	nop
 80084c8:	20000074 	.word	0x20000074

080084cc <HEADER_SetItemWidth>:
 80084cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ce:	460f      	mov	r7, r1
 80084d0:	b087      	sub	sp, #28
 80084d2:	4615      	mov	r5, r2
 80084d4:	4604      	mov	r4, r0
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d031      	beq.n	800853e <HEADER_SetItemWidth+0x72>
 80084da:	2a00      	cmp	r2, #0
 80084dc:	db2f      	blt.n	800853e <HEADER_SetItemWidth+0x72>
 80084de:	f007 fc3f 	bl	800fd60 <GUI_ALLOC_LockH>
 80084e2:	ab06      	add	r3, sp, #24
 80084e4:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 80084e6:	f843 0d18 	str.w	r0, [r3, #-24]!
 80084ea:	4668      	mov	r0, sp
 80084ec:	f007 fc46 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80084f0:	4630      	mov	r0, r6
 80084f2:	f000 fafc 	bl	8008aee <GUI_ARRAY_GetNumItems>
 80084f6:	4287      	cmp	r7, r0
 80084f8:	d221      	bcs.n	800853e <HEADER_SetItemWidth+0x72>
 80084fa:	4630      	mov	r0, r6
 80084fc:	4639      	mov	r1, r7
 80084fe:	f000 fb78 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 8008502:	4603      	mov	r3, r0
 8008504:	a806      	add	r0, sp, #24
 8008506:	f840 3d14 	str.w	r3, [r0, #-20]!
 800850a:	b1b3      	cbz	r3, 800853a <HEADER_SetItemWidth+0x6e>
 800850c:	601d      	str	r5, [r3, #0]
 800850e:	f007 fc35 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008512:	4620      	mov	r0, r4
 8008514:	f001 f93c 	bl	8009790 <WM_GetParent>
 8008518:	2325      	movs	r3, #37	; 0x25
 800851a:	9003      	str	r0, [sp, #12]
 800851c:	4620      	mov	r0, r4
 800851e:	9302      	str	r3, [sp, #8]
 8008520:	9404      	str	r4, [sp, #16]
 8008522:	f001 ff2e 	bl	800a382 <WM_InvalidateWindow>
 8008526:	9803      	ldr	r0, [sp, #12]
 8008528:	a902      	add	r1, sp, #8
 800852a:	f000 fd8f 	bl	800904c <WM__SendMessage>
 800852e:	4620      	mov	r0, r4
 8008530:	f001 f92e 	bl	8009790 <WM_GetParent>
 8008534:	f001 ff25 	bl	800a382 <WM_InvalidateWindow>
 8008538:	e001      	b.n	800853e <HEADER_SetItemWidth+0x72>
 800853a:	f007 fc1f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800853e:	b007      	add	sp, #28
 8008540:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008542 <HEADER_GetHeight>:
 8008542:	b507      	push	{r0, r1, r2, lr}
 8008544:	b190      	cbz	r0, 800856c <HEADER_GetHeight+0x2a>
 8008546:	4669      	mov	r1, sp
 8008548:	f001 f9ff 	bl	800994a <WM_GetClientRectEx>
 800854c:	f9bd 1000 	ldrsh.w	r1, [sp]
 8008550:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8008554:	4668      	mov	r0, sp
 8008556:	4249      	negs	r1, r1
 8008558:	4252      	negs	r2, r2
 800855a:	f006 fc53 	bl	800ee04 <GUI_MoveRect>
 800855e:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8008562:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8008566:	1ac0      	subs	r0, r0, r3
 8008568:	3001      	adds	r0, #1
 800856a:	e7ff      	b.n	800856c <HEADER_GetHeight+0x2a>
 800856c:	b003      	add	sp, #12
 800856e:	f85d fb04 	ldr.w	pc, [sp], #4

08008572 <HEADER_GetItemWidth>:
 8008572:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008574:	460d      	mov	r5, r1
 8008576:	4604      	mov	r4, r0
 8008578:	b1c0      	cbz	r0, 80085ac <HEADER_GetItemWidth+0x3a>
 800857a:	f007 fbf1 	bl	800fd60 <GUI_ALLOC_LockH>
 800857e:	9001      	str	r0, [sp, #4]
 8008580:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008582:	f000 fab4 	bl	8008aee <GUI_ARRAY_GetNumItems>
 8008586:	4285      	cmp	r5, r0
 8008588:	d20c      	bcs.n	80085a4 <HEADER_GetItemWidth+0x32>
 800858a:	9b01      	ldr	r3, [sp, #4]
 800858c:	4629      	mov	r1, r5
 800858e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008590:	f000 fb2f 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 8008594:	ab02      	add	r3, sp, #8
 8008596:	6804      	ldr	r4, [r0, #0]
 8008598:	f843 0d08 	str.w	r0, [r3, #-8]!
 800859c:	4668      	mov	r0, sp
 800859e:	f007 fbed 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80085a2:	e000      	b.n	80085a6 <HEADER_GetItemWidth+0x34>
 80085a4:	2400      	movs	r4, #0
 80085a6:	a801      	add	r0, sp, #4
 80085a8:	f007 fbe8 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80085ac:	4620      	mov	r0, r4
 80085ae:	b003      	add	sp, #12
 80085b0:	bd30      	pop	{r4, r5, pc}
	...

080085b4 <_HandlePID>:
 80085b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b8:	b089      	sub	sp, #36	; 0x24
 80085ba:	4615      	mov	r5, r2
 80085bc:	4604      	mov	r4, r0
 80085be:	4689      	mov	r9, r1
 80085c0:	469a      	mov	sl, r3
 80085c2:	f007 fbcd 	bl	800fd60 <GUI_ALLOC_LockH>
 80085c6:	9004      	str	r0, [sp, #16]
 80085c8:	4680      	mov	r8, r0
 80085ca:	4620      	mov	r0, r4
 80085cc:	f001 f895 	bl	80096fa <WM_GetWindowSizeY>
 80085d0:	2d00      	cmp	r5, #0
 80085d2:	db67      	blt.n	80086a4 <_HandlePID+0xf0>
 80085d4:	4285      	cmp	r5, r0
 80085d6:	da65      	bge.n	80086a4 <_HandlePID+0xf0>
 80085d8:	2c00      	cmp	r4, #0
 80085da:	d063      	beq.n	80086a4 <_HandlePID+0xf0>
 80085dc:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 80085e0:	f000 fa85 	bl	8008aee <GUI_ARRAY_GetNumItems>
 80085e4:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 80085e8:	9003      	str	r0, [sp, #12]
 80085ea:	b113      	cbz	r3, 80085f2 <_HandlePID+0x3e>
 80085ec:	f8d8 b058 	ldr.w	fp, [r8, #88]	; 0x58
 80085f0:	e000      	b.n	80085f4 <_HandlePID+0x40>
 80085f2:	469b      	mov	fp, r3
 80085f4:	2700      	movs	r7, #0
 80085f6:	463a      	mov	r2, r7
 80085f8:	f04f 35ff 	mov.w	r5, #4294967295
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	429f      	cmp	r7, r3
 8008600:	d043      	beq.n	800868a <_HandlePID+0xd6>
 8008602:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 8008606:	9201      	str	r2, [sp, #4]
 8008608:	4639      	mov	r1, r7
 800860a:	f000 faf2 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 800860e:	ab08      	add	r3, sp, #32
 8008610:	6806      	ldr	r6, [r0, #0]
 8008612:	f843 0d08 	str.w	r0, [r3, #-8]!
 8008616:	4618      	mov	r0, r3
 8008618:	9302      	str	r3, [sp, #8]
 800861a:	f007 fbaf 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800861e:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 8008622:	9a01      	ldr	r2, [sp, #4]
 8008624:	429f      	cmp	r7, r3
 8008626:	445e      	add	r6, fp
 8008628:	f107 0c01 	add.w	ip, r7, #1
 800862c:	d30b      	bcc.n	8008646 <_HandlePID+0x92>
 800862e:	b12b      	cbz	r3, 800863c <_HandlePID+0x88>
 8008630:	429f      	cmp	r7, r3
 8008632:	bf04      	itt	eq
 8008634:	f8d8 3058 	ldreq.w	r3, [r8, #88]	; 0x58
 8008638:	ebc3 0606 	rsbeq	r6, r3, r6
 800863c:	4296      	cmp	r6, r2
 800863e:	46b3      	mov	fp, r6
 8008640:	4616      	mov	r6, r2
 8008642:	db1f      	blt.n	8008684 <_HandlePID+0xd0>
 8008644:	e000      	b.n	8008648 <_HandlePID+0x94>
 8008646:	46b3      	mov	fp, r6
 8008648:	f1a9 0204 	sub.w	r2, r9, #4
 800864c:	4593      	cmp	fp, r2
 800864e:	db19      	blt.n	8008684 <_HandlePID+0xd0>
 8008650:	f109 0204 	add.w	r2, r9, #4
 8008654:	4593      	cmp	fp, r2
 8008656:	dc15      	bgt.n	8008684 <_HandlePID+0xd0>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	1e5a      	subs	r2, r3, #1
 800865c:	4297      	cmp	r7, r2
 800865e:	463d      	mov	r5, r7
 8008660:	d210      	bcs.n	8008684 <_HandlePID+0xd0>
 8008662:	45d9      	cmp	r9, fp
 8008664:	da0e      	bge.n	8008684 <_HandlePID+0xd0>
 8008666:	4661      	mov	r1, ip
 8008668:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 800866c:	f8cd c004 	str.w	ip, [sp, #4]
 8008670:	f000 fabf 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 8008674:	6807      	ldr	r7, [r0, #0]
 8008676:	9006      	str	r0, [sp, #24]
 8008678:	9802      	ldr	r0, [sp, #8]
 800867a:	f007 fb7f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800867e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008682:	b117      	cbz	r7, 800868a <_HandlePID+0xd6>
 8008684:	4667      	mov	r7, ip
 8008686:	4632      	mov	r2, r6
 8008688:	e7b8      	b.n	80085fc <_HandlePID+0x48>
 800868a:	f1ba 0f01 	cmp.w	sl, #1
 800868e:	d10e      	bne.n	80086ae <_HandlePID+0xfa>
 8008690:	2d00      	cmp	r5, #0
 8008692:	db13      	blt.n	80086bc <_HandlePID+0x108>
 8008694:	9b04      	ldr	r3, [sp, #16]
 8008696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008698:	3201      	adds	r2, #1
 800869a:	d10f      	bne.n	80086bc <_HandlePID+0x108>
 800869c:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
 80086a0:	655d      	str	r5, [r3, #84]	; 0x54
 80086a2:	e00b      	b.n	80086bc <_HandlePID+0x108>
 80086a4:	f1ba 0f01 	cmp.w	sl, #1
 80086a8:	f04f 35ff 	mov.w	r5, #4294967295
 80086ac:	d006      	beq.n	80086bc <_HandlePID+0x108>
 80086ae:	f1ba 0f00 	cmp.w	sl, #0
 80086b2:	dc03      	bgt.n	80086bc <_HandlePID+0x108>
 80086b4:	9b04      	ldr	r3, [sp, #16]
 80086b6:	f04f 32ff 	mov.w	r2, #4294967295
 80086ba:	651a      	str	r2, [r3, #80]	; 0x50
 80086bc:	af08      	add	r7, sp, #32
 80086be:	f857 3d10 	ldr.w	r3, [r7, #-16]!
 80086c2:	4638      	mov	r0, r7
 80086c4:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80086c6:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
 80086ca:	f007 fb57 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80086ce:	2d00      	cmp	r5, #0
 80086d0:	db16      	blt.n	8008700 <_HandlePID+0x14c>
 80086d2:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80087e0 <_HandlePID+0x22c>
 80086d6:	4620      	mov	r0, r4
 80086d8:	2101      	movs	r1, #1
 80086da:	f000 fe8b 	bl	80093f4 <WM_SetCapture>
 80086de:	f8db 3000 	ldr.w	r3, [fp]
 80086e2:	b96b      	cbnz	r3, 8008700 <_HandlePID+0x14c>
 80086e4:	4b3c      	ldr	r3, [pc, #240]	; (80087d8 <_HandlePID+0x224>)
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	9301      	str	r3, [sp, #4]
 80086ea:	f006 fe4b 	bl	800f384 <GUI_CURSOR_GetStateEx>
 80086ee:	9b01      	ldr	r3, [sp, #4]
 80086f0:	b130      	cbz	r0, 8008700 <_HandlePID+0x14c>
 80086f2:	4a3a      	ldr	r2, [pc, #232]	; (80087dc <_HandlePID+0x228>)
 80086f4:	6819      	ldr	r1, [r3, #0]
 80086f6:	6810      	ldr	r0, [r2, #0]
 80086f8:	f006 fdde 	bl	800f2b8 <GUI_CURSOR_SelectEx>
 80086fc:	f8cb 0000 	str.w	r0, [fp]
 8008700:	2e00      	cmp	r6, #0
 8008702:	db54      	blt.n	80087ae <_HandlePID+0x1fa>
 8008704:	45b1      	cmp	r9, r6
 8008706:	d052      	beq.n	80087ae <_HandlePID+0x1fa>
 8008708:	f1ba 0f01 	cmp.w	sl, #1
 800870c:	d14f      	bne.n	80087ae <_HandlePID+0x1fa>
 800870e:	4620      	mov	r0, r4
 8008710:	4641      	mov	r1, r8
 8008712:	f7ff ff2e 	bl	8008572 <HEADER_GetItemWidth>
 8008716:	4448      	add	r0, r9
 8008718:	1b82      	subs	r2, r0, r6
 800871a:	d452      	bmi.n	80087c2 <_HandlePID+0x20e>
 800871c:	4620      	mov	r0, r4
 800871e:	4641      	mov	r1, r8
 8008720:	f7ff fed4 	bl	80084cc <HEADER_SetItemWidth>
 8008724:	4620      	mov	r0, r4
 8008726:	f007 fb1b 	bl	800fd60 <GUI_ALLOC_LockH>
 800872a:	ab08      	add	r3, sp, #32
 800872c:	f890 506c 	ldrb.w	r5, [r0, #108]	; 0x6c
 8008730:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8008734:	f8d0 a054 	ldr.w	sl, [r0, #84]	; 0x54
 8008738:	4618      	mov	r0, r3
 800873a:	f007 fb1f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800873e:	b90d      	cbnz	r5, 8008744 <_HandlePID+0x190>
 8008740:	464e      	mov	r6, r9
 8008742:	e03e      	b.n	80087c2 <_HandlePID+0x20e>
 8008744:	4620      	mov	r0, r4
 8008746:	a906      	add	r1, sp, #24
 8008748:	f001 f8ff 	bl	800994a <WM_GetClientRectEx>
 800874c:	4620      	mov	r0, r4
 800874e:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 8008752:	f001 f81d 	bl	8009790 <WM_GetParent>
 8008756:	b140      	cbz	r0, 800876a <_HandlePID+0x1b6>
 8008758:	4620      	mov	r0, r4
 800875a:	f001 f819 	bl	8009790 <WM_GetParent>
 800875e:	f001 f808 	bl	8009772 <WM_GetScrollbarV>
 8008762:	b110      	cbz	r0, 800876a <_HandlePID+0x1b6>
 8008764:	f000 ffb4 	bl	80096d0 <WM_GetWindowSizeX>
 8008768:	1a2d      	subs	r5, r5, r0
 800876a:	f04f 0800 	mov.w	r8, #0
 800876e:	46c3      	mov	fp, r8
 8008770:	45d3      	cmp	fp, sl
 8008772:	dc07      	bgt.n	8008784 <_HandlePID+0x1d0>
 8008774:	4659      	mov	r1, fp
 8008776:	4620      	mov	r0, r4
 8008778:	f7ff fefb 	bl	8008572 <HEADER_GetItemWidth>
 800877c:	f10b 0b01 	add.w	fp, fp, #1
 8008780:	4480      	add	r8, r0
 8008782:	e7f5      	b.n	8008770 <_HandlePID+0x1bc>
 8008784:	45a8      	cmp	r8, r5
 8008786:	dddb      	ble.n	8008740 <_HandlePID+0x18c>
 8008788:	f04f 0800 	mov.w	r8, #0
 800878c:	46c1      	mov	r9, r8
 800878e:	45d1      	cmp	r9, sl
 8008790:	4620      	mov	r0, r4
 8008792:	da06      	bge.n	80087a2 <_HandlePID+0x1ee>
 8008794:	4649      	mov	r1, r9
 8008796:	f7ff feec 	bl	8008572 <HEADER_GetItemWidth>
 800879a:	f109 0901 	add.w	r9, r9, #1
 800879e:	4480      	add	r8, r0
 80087a0:	e7f5      	b.n	800878e <_HandlePID+0x1da>
 80087a2:	4651      	mov	r1, sl
 80087a4:	ebc8 0205 	rsb	r2, r8, r5
 80087a8:	f7ff fe90 	bl	80084cc <HEADER_SetItemWidth>
 80087ac:	e009      	b.n	80087c2 <_HandlePID+0x20e>
 80087ae:	f1ba 0f00 	cmp.w	sl, #0
 80087b2:	dc06      	bgt.n	80087c2 <_HandlePID+0x20e>
 80087b4:	1c6b      	adds	r3, r5, #1
 80087b6:	d104      	bne.n	80087c2 <_HandlePID+0x20e>
 80087b8:	f7ff fd80 	bl	80082bc <_RestoreOldCursor>
 80087bc:	f000 fe34 	bl	8009428 <WM_ReleaseCapture>
 80087c0:	462e      	mov	r6, r5
 80087c2:	4620      	mov	r0, r4
 80087c4:	f007 facc 	bl	800fd60 <GUI_ALLOC_LockH>
 80087c8:	9004      	str	r0, [sp, #16]
 80087ca:	6506      	str	r6, [r0, #80]	; 0x50
 80087cc:	4638      	mov	r0, r7
 80087ce:	f007 fad5 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80087d2:	b009      	add	sp, #36	; 0x24
 80087d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d8:	2001d4b4 	.word	0x2001d4b4
 80087dc:	20000070 	.word	0x20000070
 80087e0:	2001d03c 	.word	0x2001d03c

080087e4 <HEADER_Callback>:
 80087e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80087e8:	6844      	ldr	r4, [r0, #4]
 80087ea:	4606      	mov	r6, r0
 80087ec:	4631      	mov	r1, r6
 80087ee:	4620      	mov	r0, r4
 80087f0:	f7fe f972 	bl	8006ad8 <WIDGET_HandleActive>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	f000 80c8 	beq.w	800898a <HEADER_Callback+0x1a6>
 80087fa:	6833      	ldr	r3, [r6, #0]
 80087fc:	2b10      	cmp	r3, #16
 80087fe:	f000 8089 	beq.w	8008914 <HEADER_Callback+0x130>
 8008802:	dc05      	bgt.n	8008810 <HEADER_Callback+0x2c>
 8008804:	2b0b      	cmp	r3, #11
 8008806:	f000 809a 	beq.w	800893e <HEADER_Callback+0x15a>
 800880a:	2b0f      	cmp	r3, #15
 800880c:	d006      	beq.n	800881c <HEADER_Callback+0x38>
 800880e:	e0b9      	b.n	8008984 <HEADER_Callback+0x1a0>
 8008810:	2b11      	cmp	r3, #17
 8008812:	d014      	beq.n	800883e <HEADER_Callback+0x5a>
 8008814:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008818:	d05e      	beq.n	80088d8 <HEADER_Callback+0xf4>
 800881a:	e0b3      	b.n	8008984 <HEADER_Callback+0x1a0>
 800881c:	4620      	mov	r0, r4
 800881e:	f007 fa9f 	bl	800fd60 <GUI_ALLOC_LockH>
 8008822:	ab02      	add	r3, sp, #8
 8008824:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008828:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800882a:	6815      	ldr	r5, [r2, #0]
 800882c:	4618      	mov	r0, r3
 800882e:	f007 faa5 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008832:	2d00      	cmp	r5, #0
 8008834:	f000 80a9 	beq.w	800898a <HEADER_Callback+0x1a6>
 8008838:	4620      	mov	r0, r4
 800883a:	47a8      	blx	r5
 800883c:	e0a5      	b.n	800898a <HEADER_Callback+0x1a6>
 800883e:	4620      	mov	r0, r4
 8008840:	f007 fa8e 	bl	800fd60 <GUI_ALLOC_LockH>
 8008844:	68f3      	ldr	r3, [r6, #12]
 8008846:	9000      	str	r0, [sp, #0]
 8008848:	891a      	ldrh	r2, [r3, #8]
 800884a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800884e:	4605      	mov	r5, r0
 8008850:	d13e      	bne.n	80088d0 <HEADER_Callback+0xec>
 8008852:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008854:	681f      	ldr	r7, [r3, #0]
 8008856:	685e      	ldr	r6, [r3, #4]
 8008858:	4620      	mov	r0, r4
 800885a:	4417      	add	r7, r2
 800885c:	f000 ff4d 	bl	80096fa <WM_GetWindowSizeY>
 8008860:	2e00      	cmp	r6, #0
 8008862:	da02      	bge.n	800886a <HEADER_Callback+0x86>
 8008864:	f04f 36ff 	mov.w	r6, #4294967295
 8008868:	e031      	b.n	80088ce <HEADER_Callback+0xea>
 800886a:	4286      	cmp	r6, r0
 800886c:	dafa      	bge.n	8008864 <HEADER_Callback+0x80>
 800886e:	2c00      	cmp	r4, #0
 8008870:	d0f8      	beq.n	8008864 <HEADER_Callback+0x80>
 8008872:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8008874:	f000 f93b 	bl	8008aee <GUI_ARRAY_GetNumItems>
 8008878:	6eac      	ldr	r4, [r5, #104]	; 0x68
 800887a:	4682      	mov	sl, r0
 800887c:	b104      	cbz	r4, 8008880 <HEADER_Callback+0x9c>
 800887e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8008880:	2600      	movs	r6, #0
 8008882:	46b0      	mov	r8, r6
 8008884:	4556      	cmp	r6, sl
 8008886:	d0ed      	beq.n	8008864 <HEADER_Callback+0x80>
 8008888:	4631      	mov	r1, r6
 800888a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800888c:	f000 f9b1 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 8008890:	4602      	mov	r2, r0
 8008892:	a802      	add	r0, sp, #8
 8008894:	f8d2 9000 	ldr.w	r9, [r2]
 8008898:	f840 2d04 	str.w	r2, [r0, #-4]!
 800889c:	f007 fa6e 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80088a0:	4544      	cmp	r4, r8
 80088a2:	db07      	blt.n	80088b4 <HEADER_Callback+0xd0>
 80088a4:	1d23      	adds	r3, r4, #4
 80088a6:	429f      	cmp	r7, r3
 80088a8:	dd04      	ble.n	80088b4 <HEADER_Callback+0xd0>
 80088aa:	eb04 0309 	add.w	r3, r4, r9
 80088ae:	3b04      	subs	r3, #4
 80088b0:	429f      	cmp	r7, r3
 80088b2:	db0c      	blt.n	80088ce <HEADER_Callback+0xea>
 80088b4:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80088b6:	429e      	cmp	r6, r3
 80088b8:	d305      	bcc.n	80088c6 <HEADER_Callback+0xe2>
 80088ba:	b12b      	cbz	r3, 80088c8 <HEADER_Callback+0xe4>
 80088bc:	429e      	cmp	r6, r3
 80088be:	d103      	bne.n	80088c8 <HEADER_Callback+0xe4>
 80088c0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80088c2:	1ae4      	subs	r4, r4, r3
 80088c4:	e000      	b.n	80088c8 <HEADER_Callback+0xe4>
 80088c6:	46a0      	mov	r8, r4
 80088c8:	444c      	add	r4, r9
 80088ca:	3601      	adds	r6, #1
 80088cc:	e7da      	b.n	8008884 <HEADER_Callback+0xa0>
 80088ce:	65ee      	str	r6, [r5, #92]	; 0x5c
 80088d0:	4668      	mov	r0, sp
 80088d2:	f007 fa53 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80088d6:	e058      	b.n	800898a <HEADER_Callback+0x1a6>
 80088d8:	4620      	mov	r0, r4
 80088da:	f007 fa41 	bl	800fd60 <GUI_ALLOC_LockH>
 80088de:	ab02      	add	r3, sp, #8
 80088e0:	6d87      	ldr	r7, [r0, #88]	; 0x58
 80088e2:	f843 0d04 	str.w	r0, [r3, #-4]!
 80088e6:	4618      	mov	r0, r3
 80088e8:	f007 fa48 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80088ec:	68f5      	ldr	r5, [r6, #12]
 80088ee:	b165      	cbz	r5, 800890a <HEADER_Callback+0x126>
 80088f0:	6829      	ldr	r1, [r5, #0]
 80088f2:	7a2b      	ldrb	r3, [r5, #8]
 80088f4:	686a      	ldr	r2, [r5, #4]
 80088f6:	4439      	add	r1, r7
 80088f8:	4620      	mov	r0, r4
 80088fa:	f7ff fe5b 	bl	80085b4 <_HandlePID>
 80088fe:	7a2b      	ldrb	r3, [r5, #8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	bf0c      	ite	eq
 8008904:	2102      	moveq	r1, #2
 8008906:	2101      	movne	r1, #1
 8008908:	e000      	b.n	800890c <HEADER_Callback+0x128>
 800890a:	2103      	movs	r1, #3
 800890c:	4620      	mov	r0, r4
 800890e:	f000 fe0a 	bl	8009526 <WM_NotifyParent>
 8008912:	e03a      	b.n	800898a <HEADER_Callback+0x1a6>
 8008914:	4620      	mov	r0, r4
 8008916:	f007 fa23 	bl	800fd60 <GUI_ALLOC_LockH>
 800891a:	ab02      	add	r3, sp, #8
 800891c:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800891e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008922:	4618      	mov	r0, r3
 8008924:	f007 fa2a 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008928:	68f3      	ldr	r3, [r6, #12]
 800892a:	b373      	cbz	r3, 800898a <HEADER_Callback+0x1a6>
 800892c:	6819      	ldr	r1, [r3, #0]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	4620      	mov	r0, r4
 8008932:	4429      	add	r1, r5
 8008934:	f04f 33ff 	mov.w	r3, #4294967295
 8008938:	f7ff fe3c 	bl	80085b4 <_HandlePID>
 800893c:	e025      	b.n	800898a <HEADER_Callback+0x1a6>
 800893e:	4620      	mov	r0, r4
 8008940:	f007 fa0e 	bl	800fd60 <GUI_ALLOC_LockH>
 8008944:	ab02      	add	r3, sp, #8
 8008946:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8008948:	f843 0d08 	str.w	r0, [r3, #-8]!
 800894c:	4668      	mov	r0, sp
 800894e:	f007 fa15 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008952:	4628      	mov	r0, r5
 8008954:	f000 f8cb 	bl	8008aee <GUI_ARRAY_GetNumItems>
 8008958:	2400      	movs	r4, #0
 800895a:	4607      	mov	r7, r0
 800895c:	42bc      	cmp	r4, r7
 800895e:	4628      	mov	r0, r5
 8008960:	da0c      	bge.n	800897c <HEADER_Callback+0x198>
 8008962:	4621      	mov	r1, r4
 8008964:	f000 f945 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 8008968:	9001      	str	r0, [sp, #4]
 800896a:	6880      	ldr	r0, [r0, #8]
 800896c:	b108      	cbz	r0, 8008972 <HEADER_Callback+0x18e>
 800896e:	f007 fa31 	bl	800fdd4 <GUI_ALLOC_Free>
 8008972:	a801      	add	r0, sp, #4
 8008974:	f007 fa02 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008978:	3401      	adds	r4, #1
 800897a:	e7ef      	b.n	800895c <HEADER_Callback+0x178>
 800897c:	f000 f910 	bl	8008ba0 <GUI_ARRAY_Delete>
 8008980:	f7ff fc9c 	bl	80082bc <_RestoreOldCursor>
 8008984:	4630      	mov	r0, r6
 8008986:	f002 f92d 	bl	800abe4 <WM_DefaultProc>
 800898a:	b002      	add	sp, #8
 800898c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008990 <HEADER_GetNumItems>:
 8008990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008992:	4605      	mov	r5, r0
 8008994:	b158      	cbz	r0, 80089ae <HEADER_GetNumItems+0x1e>
 8008996:	f007 f9e3 	bl	800fd60 <GUI_ALLOC_LockH>
 800899a:	ac02      	add	r4, sp, #8
 800899c:	f844 0d04 	str.w	r0, [r4, #-4]!
 80089a0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80089a2:	f000 f8a4 	bl	8008aee <GUI_ARRAY_GetNumItems>
 80089a6:	4605      	mov	r5, r0
 80089a8:	4620      	mov	r0, r4
 80089aa:	f007 f9e7 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80089ae:	4628      	mov	r0, r5
 80089b0:	b003      	add	sp, #12
 80089b2:	bd30      	pop	{r4, r5, pc}

080089b4 <GUI_ARRAY_ResizeItemLocked>:
 80089b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089b6:	4607      	mov	r7, r0
 80089b8:	b085      	sub	sp, #20
 80089ba:	4610      	mov	r0, r2
 80089bc:	460d      	mov	r5, r1
 80089be:	4616      	mov	r6, r2
 80089c0:	f007 fc3b 	bl	801023a <GUI_ALLOC_AllocZero>
 80089c4:	9003      	str	r0, [sp, #12]
 80089c6:	b350      	cbz	r0, 8008a1e <GUI_ARRAY_ResizeItemLocked+0x6a>
 80089c8:	4638      	mov	r0, r7
 80089ca:	f007 f9c9 	bl	800fd60 <GUI_ALLOC_LockH>
 80089ce:	4629      	mov	r1, r5
 80089d0:	9000      	str	r0, [sp, #0]
 80089d2:	f000 f883 	bl	8008adc <GUI_ARRAY__GetpItemLocked>
 80089d6:	ac04      	add	r4, sp, #16
 80089d8:	9001      	str	r0, [sp, #4]
 80089da:	9803      	ldr	r0, [sp, #12]
 80089dc:	f007 f9c0 	bl	800fd60 <GUI_ALLOC_LockH>
 80089e0:	f854 1d0c 	ldr.w	r1, [r4, #-12]!
 80089e4:	9002      	str	r0, [sp, #8]
 80089e6:	4632      	mov	r2, r6
 80089e8:	f00d ff46 	bl	8016878 <memcpy>
 80089ec:	4620      	mov	r0, r4
 80089ee:	f007 f9c5 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80089f2:	a802      	add	r0, sp, #8
 80089f4:	f007 f9c2 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80089f8:	9800      	ldr	r0, [sp, #0]
 80089fa:	9a03      	ldr	r2, [sp, #12]
 80089fc:	4629      	mov	r1, r5
 80089fe:	f000 f839 	bl	8008a74 <GUI_ARRAY__SethItem>
 8008a02:	b120      	cbz	r0, 8008a0e <GUI_ARRAY_ResizeItemLocked+0x5a>
 8008a04:	a803      	add	r0, sp, #12
 8008a06:	f007 fc03 	bl	8010210 <GUI_ALLOC_FreePtr>
 8008a0a:	2400      	movs	r4, #0
 8008a0c:	e003      	b.n	8008a16 <GUI_ARRAY_ResizeItemLocked+0x62>
 8008a0e:	9803      	ldr	r0, [sp, #12]
 8008a10:	f007 f9a6 	bl	800fd60 <GUI_ALLOC_LockH>
 8008a14:	4604      	mov	r4, r0
 8008a16:	4668      	mov	r0, sp
 8008a18:	f007 f9b0 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008a1c:	e000      	b.n	8008a20 <GUI_ARRAY_ResizeItemLocked+0x6c>
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4620      	mov	r0, r4
 8008a22:	b005      	add	sp, #20
 8008a24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a26 <GUI_ARRAY_DeleteItem>:
 8008a26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a28:	460c      	mov	r4, r1
 8008a2a:	f007 f999 	bl	800fd60 <GUI_ALLOC_LockH>
 8008a2e:	8803      	ldrh	r3, [r0, #0]
 8008a30:	9000      	str	r0, [sp, #0]
 8008a32:	429c      	cmp	r4, r3
 8008a34:	d219      	bcs.n	8008a6a <GUI_ARRAY_DeleteItem+0x44>
 8008a36:	6840      	ldr	r0, [r0, #4]
 8008a38:	b1b8      	cbz	r0, 8008a6a <GUI_ARRAY_DeleteItem+0x44>
 8008a3a:	f007 f991 	bl	800fd60 <GUI_ALLOC_LockH>
 8008a3e:	00a5      	lsls	r5, r4, #2
 8008a40:	9001      	str	r0, [sp, #4]
 8008a42:	4428      	add	r0, r5
 8008a44:	f007 fbe4 	bl	8010210 <GUI_ALLOC_FreePtr>
 8008a48:	9b00      	ldr	r3, [sp, #0]
 8008a4a:	881a      	ldrh	r2, [r3, #0]
 8008a4c:	3a01      	subs	r2, #1
 8008a4e:	b292      	uxth	r2, r2
 8008a50:	801a      	strh	r2, [r3, #0]
 8008a52:	9b01      	ldr	r3, [sp, #4]
 8008a54:	442b      	add	r3, r5
 8008a56:	42a2      	cmp	r2, r4
 8008a58:	dd04      	ble.n	8008a64 <GUI_ARRAY_DeleteItem+0x3e>
 8008a5a:	6859      	ldr	r1, [r3, #4]
 8008a5c:	f843 1b04 	str.w	r1, [r3], #4
 8008a60:	3401      	adds	r4, #1
 8008a62:	e7f8      	b.n	8008a56 <GUI_ARRAY_DeleteItem+0x30>
 8008a64:	a801      	add	r0, sp, #4
 8008a66:	f007 f989 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008a6a:	4668      	mov	r0, sp
 8008a6c:	f007 f986 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008a70:	b003      	add	sp, #12
 8008a72:	bd30      	pop	{r4, r5, pc}

08008a74 <GUI_ARRAY__SethItem>:
 8008a74:	8803      	ldrh	r3, [r0, #0]
 8008a76:	4299      	cmp	r1, r3
 8008a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	4617      	mov	r7, r2
 8008a7e:	d212      	bcs.n	8008aa6 <GUI_ARRAY__SethItem+0x32>
 8008a80:	6840      	ldr	r0, [r0, #4]
 8008a82:	b180      	cbz	r0, 8008aa6 <GUI_ARRAY__SethItem+0x32>
 8008a84:	f007 f96c 	bl	800fd60 <GUI_ALLOC_LockH>
 8008a88:	ad02      	add	r5, sp, #8
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8008a90:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8008a94:	f007 fbbc 	bl	8010210 <GUI_ALLOC_FreePtr>
 8008a98:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f007 f96d 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	e000      	b.n	8008aa8 <GUI_ARRAY__SethItem+0x34>
 8008aa6:	2001      	movs	r0, #1
 8008aa8:	b003      	add	sp, #12
 8008aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008aac <GUI_ARRAY__GethItem>:
 8008aac:	8803      	ldrh	r3, [r0, #0]
 8008aae:	4299      	cmp	r1, r3
 8008ab0:	b513      	push	{r0, r1, r4, lr}
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	d20e      	bcs.n	8008ad4 <GUI_ARRAY__GethItem+0x28>
 8008ab6:	6840      	ldr	r0, [r0, #4]
 8008ab8:	b150      	cbz	r0, 8008ad0 <GUI_ARRAY__GethItem+0x24>
 8008aba:	f007 f951 	bl	800fd60 <GUI_ALLOC_LockH>
 8008abe:	ab02      	add	r3, sp, #8
 8008ac0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8008ac4:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f007 f957 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008ace:	e002      	b.n	8008ad6 <GUI_ARRAY__GethItem+0x2a>
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	e000      	b.n	8008ad6 <GUI_ARRAY__GethItem+0x2a>
 8008ad4:	2400      	movs	r4, #0
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	b002      	add	sp, #8
 8008ada:	bd10      	pop	{r4, pc}

08008adc <GUI_ARRAY__GetpItemLocked>:
 8008adc:	b508      	push	{r3, lr}
 8008ade:	f7ff ffe5 	bl	8008aac <GUI_ARRAY__GethItem>
 8008ae2:	b118      	cbz	r0, 8008aec <GUI_ARRAY__GetpItemLocked+0x10>
 8008ae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ae8:	f007 b93a 	b.w	800fd60 <GUI_ALLOC_LockH>
 8008aec:	bd08      	pop	{r3, pc}

08008aee <GUI_ARRAY_GetNumItems>:
 8008aee:	b513      	push	{r0, r1, r4, lr}
 8008af0:	4604      	mov	r4, r0
 8008af2:	b140      	cbz	r0, 8008b06 <GUI_ARRAY_GetNumItems+0x18>
 8008af4:	f007 f934 	bl	800fd60 <GUI_ALLOC_LockH>
 8008af8:	ab02      	add	r3, sp, #8
 8008afa:	8804      	ldrh	r4, [r0, #0]
 8008afc:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008b00:	4618      	mov	r0, r3
 8008b02:	f007 f93b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008b06:	4620      	mov	r0, r4
 8008b08:	b002      	add	sp, #8
 8008b0a:	bd10      	pop	{r4, pc}

08008b0c <GUI_ARRAY_AddItem>:
 8008b0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b10:	4605      	mov	r5, r0
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d03d      	beq.n	8008b92 <GUI_ARRAY_AddItem+0x86>
 8008b16:	b14a      	cbz	r2, 8008b2c <GUI_ARRAY_AddItem+0x20>
 8008b18:	4608      	mov	r0, r1
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	f007 fba2 	bl	8010264 <GUI_ALLOC_AllocInit>
 8008b20:	f1d0 0401 	rsbs	r4, r0, #1
 8008b24:	4607      	mov	r7, r0
 8008b26:	bf38      	it	cc
 8008b28:	2400      	movcc	r4, #0
 8008b2a:	e001      	b.n	8008b30 <GUI_ARRAY_AddItem+0x24>
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	4617      	mov	r7, r2
 8008b30:	4628      	mov	r0, r5
 8008b32:	f007 f915 	bl	800fd60 <GUI_ALLOC_LockH>
 8008b36:	ae02      	add	r6, sp, #8
 8008b38:	f8b0 8000 	ldrh.w	r8, [r0]
 8008b3c:	f846 0d08 	str.w	r0, [r6, #-8]!
 8008b40:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8008b44:	4668      	mov	r0, sp
 8008b46:	f007 f919 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008b4a:	bb24      	cbnz	r4, 8008b96 <GUI_ARRAY_AddItem+0x8a>
 8008b4c:	f108 0101 	add.w	r1, r8, #1
 8008b50:	4648      	mov	r0, r9
 8008b52:	0089      	lsls	r1, r1, #2
 8008b54:	f006 f86f 	bl	800ec36 <GUI_ALLOC_Realloc>
 8008b58:	4681      	mov	r9, r0
 8008b5a:	b918      	cbnz	r0, 8008b64 <GUI_ARRAY_AddItem+0x58>
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f007 f939 	bl	800fdd4 <GUI_ALLOC_Free>
 8008b62:	e018      	b.n	8008b96 <GUI_ARRAY_AddItem+0x8a>
 8008b64:	f007 f8fc 	bl	800fd60 <GUI_ALLOC_LockH>
 8008b68:	ab02      	add	r3, sp, #8
 8008b6a:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008b6e:	f840 7028 	str.w	r7, [r0, r8, lsl #2]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f007 f902 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008b78:	4628      	mov	r0, r5
 8008b7a:	f007 f8f1 	bl	800fd60 <GUI_ALLOC_LockH>
 8008b7e:	8803      	ldrh	r3, [r0, #0]
 8008b80:	9000      	str	r0, [sp, #0]
 8008b82:	3301      	adds	r3, #1
 8008b84:	f8c0 9004 	str.w	r9, [r0, #4]
 8008b88:	8003      	strh	r3, [r0, #0]
 8008b8a:	4668      	mov	r0, sp
 8008b8c:	f007 f8f6 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008b90:	e002      	b.n	8008b98 <GUI_ARRAY_AddItem+0x8c>
 8008b92:	4604      	mov	r4, r0
 8008b94:	e000      	b.n	8008b98 <GUI_ARRAY_AddItem+0x8c>
 8008b96:	2401      	movs	r4, #1
 8008b98:	4620      	mov	r0, r4
 8008b9a:	b003      	add	sp, #12
 8008b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008ba0 <GUI_ARRAY_Delete>:
 8008ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	b318      	cbz	r0, 8008bee <GUI_ARRAY_Delete+0x4e>
 8008ba6:	f007 f8db 	bl	800fd60 <GUI_ALLOC_LockH>
 8008baa:	9000      	str	r0, [sp, #0]
 8008bac:	6840      	ldr	r0, [r0, #4]
 8008bae:	b1c0      	cbz	r0, 8008be2 <GUI_ARRAY_Delete+0x42>
 8008bb0:	f007 f8d6 	bl	800fd60 <GUI_ALLOC_LockH>
 8008bb4:	2400      	movs	r4, #0
 8008bb6:	9001      	str	r0, [sp, #4]
 8008bb8:	9b00      	ldr	r3, [sp, #0]
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	429c      	cmp	r4, r3
 8008bbe:	da06      	bge.n	8008bce <GUI_ARRAY_Delete+0x2e>
 8008bc0:	9801      	ldr	r0, [sp, #4]
 8008bc2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8008bc6:	f007 fb23 	bl	8010210 <GUI_ALLOC_FreePtr>
 8008bca:	3401      	adds	r4, #1
 8008bcc:	e7f4      	b.n	8008bb8 <GUI_ARRAY_Delete+0x18>
 8008bce:	a801      	add	r0, sp, #4
 8008bd0:	f007 f8d4 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008bd4:	9800      	ldr	r0, [sp, #0]
 8008bd6:	3004      	adds	r0, #4
 8008bd8:	f007 fb1a 	bl	8010210 <GUI_ALLOC_FreePtr>
 8008bdc:	9b00      	ldr	r3, [sp, #0]
 8008bde:	2200      	movs	r2, #0
 8008be0:	801a      	strh	r2, [r3, #0]
 8008be2:	4668      	mov	r0, sp
 8008be4:	f007 f8ca 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008be8:	4628      	mov	r0, r5
 8008bea:	f007 f8f3 	bl	800fdd4 <GUI_ALLOC_Free>
 8008bee:	b003      	add	sp, #12
 8008bf0:	bd30      	pop	{r4, r5, pc}

08008bf2 <GUI_ARRAY_GetpItemLocked>:
 8008bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bf4:	460e      	mov	r6, r1
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	b158      	cbz	r0, 8008c12 <GUI_ARRAY_GetpItemLocked+0x20>
 8008bfa:	f007 f8b1 	bl	800fd60 <GUI_ALLOC_LockH>
 8008bfe:	ac02      	add	r4, sp, #8
 8008c00:	4631      	mov	r1, r6
 8008c02:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008c06:	f7ff ff69 	bl	8008adc <GUI_ARRAY__GetpItemLocked>
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f007 f8b5 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008c12:	4628      	mov	r0, r5
 8008c14:	b002      	add	sp, #8
 8008c16:	bd70      	pop	{r4, r5, r6, pc}

08008c18 <GUI_ARRAY_Create>:
 8008c18:	2008      	movs	r0, #8
 8008c1a:	f007 bb0e 	b.w	801023a <GUI_ALLOC_AllocZero>

08008c1e <GUI_CreateDialogBox>:
 8008c1e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c22:	4606      	mov	r6, r0
 8008c24:	4688      	mov	r8, r1
 8008c26:	4614      	mov	r4, r2
 8008c28:	461d      	mov	r5, r3
 8008c2a:	b913      	cbnz	r3, 8008c32 <GUI_CreateDialogBox+0x14>
 8008c2c:	f000 fe62 	bl	80098f4 <WM_GetDesktopWindow>
 8008c30:	4605      	mov	r5, r0
 8008c32:	9400      	str	r4, [sp, #0]
 8008c34:	4630      	mov	r0, r6
 8008c36:	6834      	ldr	r4, [r6, #0]
 8008c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	47a0      	blx	r4
 8008c40:	4604      	mov	r4, r0
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d039      	beq.n	8008cba <GUI_CreateDialogBox+0x9c>
 8008c46:	f000 fe61 	bl	800990c <WM_GetClientWindow>
 8008c4a:	8a71      	ldrh	r1, [r6, #18]
 8008c4c:	4607      	mov	r7, r0
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f7fd ff0e 	bl	8006a70 <WIDGET_OrState>
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 fa4a 	bl	80090ee <WM_ShowWindow>
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c60:	f000 fa45 	bl	80090ee <WM_ShowWindow>
 8008c64:	f1b8 0f00 	cmp.w	r8, #0
 8008c68:	dd0f      	ble.n	8008c8a <GUI_CreateDialogBox+0x6c>
 8008c6a:	f856 cf1c 	ldr.w	ip, [r6, #28]!
 8008c6e:	2200      	movs	r2, #0
 8008c70:	9200      	str	r2, [sp, #0]
 8008c72:	4630      	mov	r0, r6
 8008c74:	4639      	mov	r1, r7
 8008c76:	4613      	mov	r3, r2
 8008c78:	47e0      	blx	ip
 8008c7a:	4681      	mov	r9, r0
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	d1ed      	bne.n	8008c5c <GUI_CreateDialogBox+0x3e>
 8008c80:	4620      	mov	r0, r4
 8008c82:	f001 fc69 	bl	800a558 <WM_DeleteWindow>
 8008c86:	4648      	mov	r0, r9
 8008c88:	e018      	b.n	8008cbc <GUI_CreateDialogBox+0x9e>
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	211d      	movs	r1, #29
 8008c8e:	f000 fbcd 	bl	800942c <WM_SendMessageNoPara>
 8008c92:	1c6b      	adds	r3, r5, #1
 8008c94:	d011      	beq.n	8008cba <GUI_CreateDialogBox+0x9c>
 8008c96:	f000 fdf3 	bl	8009880 <WM_GetFocussedWindow>
 8008c9a:	b150      	cbz	r0, 8008cb2 <GUI_CreateDialogBox+0x94>
 8008c9c:	f007 f856 	bl	800fd4c <GUI_ALLOC_h2p>
 8008ca0:	6980      	ldr	r0, [r0, #24]
 8008ca2:	42a0      	cmp	r0, r4
 8008ca4:	d00a      	beq.n	8008cbc <GUI_CreateDialogBox+0x9e>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d1f8      	bne.n	8008c9c <GUI_CreateDialogBox+0x7e>
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 fb00 	bl	80092b0 <WM_SetFocusOnNextChild>
 8008cb0:	e003      	b.n	8008cba <GUI_CreateDialogBox+0x9c>
 8008cb2:	42a5      	cmp	r5, r4
 8008cb4:	d1f9      	bne.n	8008caa <GUI_CreateDialogBox+0x8c>
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	e000      	b.n	8008cbc <GUI_CreateDialogBox+0x9e>
 8008cba:	4620      	mov	r0, r4
 8008cbc:	b003      	add	sp, #12
 8008cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008cc2 <BUTTON_CreateIndirect>:
 8008cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cc4:	b087      	sub	sp, #28
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8008ccc:	9100      	str	r1, [sp, #0]
 8008cce:	2100      	movs	r1, #0
 8008cd0:	f9b4 e00c 	ldrsh.w	lr, [r4, #12]
 8008cd4:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
 8008cd8:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 8008cdc:	9101      	str	r1, [sp, #4]
 8008cde:	8a61      	ldrh	r1, [r4, #18]
 8008ce0:	69a5      	ldr	r5, [r4, #24]
 8008ce2:	9102      	str	r1, [sp, #8]
 8008ce4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8008ce8:	9103      	str	r1, [sp, #12]
 8008cea:	9504      	str	r5, [sp, #16]
 8008cec:	eb0e 0103 	add.w	r1, lr, r3
 8008cf0:	4410      	add	r0, r2
 8008cf2:	4633      	mov	r3, r6
 8008cf4:	463a      	mov	r2, r7
 8008cf6:	f000 f8cd 	bl	8008e94 <BUTTON_CreateUser>
 8008cfa:	6861      	ldr	r1, [r4, #4]
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	f000 f901 	bl	8008f04 <BUTTON_SetText>
 8008d02:	4628      	mov	r0, r5
 8008d04:	b007      	add	sp, #28
 8008d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d08 <_OnButtonPressed>:
 8008d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d0e:	4604      	mov	r4, r0
 8008d10:	f7fd feae 	bl	8006a70 <WIDGET_OrState>
 8008d14:	4620      	mov	r0, r4
 8008d16:	f007 f823 	bl	800fd60 <GUI_ALLOC_LockH>
 8008d1a:	ab02      	add	r3, sp, #8
 8008d1c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8008d1e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008d22:	4618      	mov	r0, r3
 8008d24:	f007 f82a 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008d28:	07ab      	lsls	r3, r5, #30
 8008d2a:	d503      	bpl.n	8008d34 <_OnButtonPressed+0x2c>
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	2101      	movs	r1, #1
 8008d30:	f000 fbf9 	bl	8009526 <WM_NotifyParent>
 8008d34:	b003      	add	sp, #12
 8008d36:	bd30      	pop	{r4, r5, pc}

08008d38 <_OnButtonReleased>:
 8008d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	460c      	mov	r4, r1
 8008d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d42:	f7fd feab 	bl	8006a9c <WIDGET_AndState>
 8008d46:	4628      	mov	r0, r5
 8008d48:	f007 f80a 	bl	800fd60 <GUI_ALLOC_LockH>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	a802      	add	r0, sp, #8
 8008d50:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8008d52:	f840 2d04 	str.w	r2, [r0, #-4]!
 8008d56:	8e17      	ldrh	r7, [r2, #48]	; 0x30
 8008d58:	f007 f810 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008d5c:	2c02      	cmp	r4, #2
 8008d5e:	d102      	bne.n	8008d66 <_OnButtonReleased+0x2e>
 8008d60:	4638      	mov	r0, r7
 8008d62:	f006 f82b 	bl	800edbc <GUI_StoreKey>
 8008d66:	07b3      	lsls	r3, r6, #30
 8008d68:	d503      	bpl.n	8008d72 <_OnButtonReleased+0x3a>
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	f000 fbda 	bl	8009526 <WM_NotifyParent>
 8008d72:	b003      	add	sp, #12
 8008d74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d76 <_OnTouchDefault>:
 8008d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d78:	460d      	mov	r5, r1
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	f006 fff0 	bl	800fd60 <GUI_ALLOC_LockH>
 8008d80:	ab02      	add	r3, sp, #8
 8008d82:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 8008d84:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f006 fff7 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008d8e:	68ea      	ldr	r2, [r5, #12]
 8008d90:	b162      	cbz	r2, 8008dac <_OnTouchDefault+0x36>
 8008d92:	7a12      	ldrb	r2, [r2, #8]
 8008d94:	f406 7380 	and.w	r3, r6, #256	; 0x100
 8008d98:	b122      	cbz	r2, 8008da4 <_OnTouchDefault+0x2e>
 8008d9a:	b95b      	cbnz	r3, 8008db4 <_OnTouchDefault+0x3e>
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f7ff ffb3 	bl	8008d08 <_OnButtonPressed>
 8008da2:	e007      	b.n	8008db4 <_OnTouchDefault+0x3e>
 8008da4:	b133      	cbz	r3, 8008db4 <_OnTouchDefault+0x3e>
 8008da6:	4620      	mov	r0, r4
 8008da8:	2102      	movs	r1, #2
 8008daa:	e001      	b.n	8008db0 <_OnTouchDefault+0x3a>
 8008dac:	4620      	mov	r0, r4
 8008dae:	2103      	movs	r1, #3
 8008db0:	f7ff ffc2 	bl	8008d38 <_OnButtonReleased>
 8008db4:	b002      	add	sp, #8
 8008db6:	bd70      	pop	{r4, r5, r6, pc}

08008db8 <BUTTON_Callback>:
 8008db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dba:	6844      	ldr	r4, [r0, #4]
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f7fd fe89 	bl	8006ad8 <WIDGET_HandleActive>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d05d      	beq.n	8008e86 <BUTTON_Callback+0xce>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	2b0f      	cmp	r3, #15
 8008dce:	d016      	beq.n	8008dfe <BUTTON_Callback+0x46>
 8008dd0:	dc04      	bgt.n	8008ddc <BUTTON_Callback+0x24>
 8008dd2:	2b0b      	cmp	r3, #11
 8008dd4:	d023      	beq.n	8008e1e <BUTTON_Callback+0x66>
 8008dd6:	2b0e      	cmp	r3, #14
 8008dd8:	d033      	beq.n	8008e42 <BUTTON_Callback+0x8a>
 8008dda:	e051      	b.n	8008e80 <BUTTON_Callback+0xc8>
 8008ddc:	2b28      	cmp	r3, #40	; 0x28
 8008dde:	d048      	beq.n	8008e72 <BUTTON_Callback+0xba>
 8008de0:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008de4:	d005      	beq.n	8008df2 <BUTTON_Callback+0x3a>
 8008de6:	2b11      	cmp	r3, #17
 8008de8:	d14a      	bne.n	8008e80 <BUTTON_Callback+0xc8>
 8008dea:	4b28      	ldr	r3, [pc, #160]	; (8008e8c <BUTTON_Callback+0xd4>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	b913      	cbnz	r3, 8008df6 <BUTTON_Callback+0x3e>
 8008df0:	e049      	b.n	8008e86 <BUTTON_Callback+0xce>
 8008df2:	4b27      	ldr	r3, [pc, #156]	; (8008e90 <BUTTON_Callback+0xd8>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4620      	mov	r0, r4
 8008df8:	4629      	mov	r1, r5
 8008dfa:	4798      	blx	r3
 8008dfc:	e043      	b.n	8008e86 <BUTTON_Callback+0xce>
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f006 ffae 	bl	800fd60 <GUI_ALLOC_LockH>
 8008e04:	ab02      	add	r3, sp, #8
 8008e06:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008e0a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8008e0c:	6815      	ldr	r5, [r2, #0]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f006 ffb4 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008e14:	2d00      	cmp	r5, #0
 8008e16:	d036      	beq.n	8008e86 <BUTTON_Callback+0xce>
 8008e18:	4620      	mov	r0, r4
 8008e1a:	47a8      	blx	r5
 8008e1c:	e033      	b.n	8008e86 <BUTTON_Callback+0xce>
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f006 ff9e 	bl	800fd60 <GUI_ALLOC_LockH>
 8008e24:	ac02      	add	r4, sp, #8
 8008e26:	9001      	str	r0, [sp, #4]
 8008e28:	3068      	adds	r0, #104	; 0x68
 8008e2a:	f007 f9f1 	bl	8010210 <GUI_ALLOC_FreePtr>
 8008e2e:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8008e32:	2103      	movs	r1, #3
 8008e34:	306c      	adds	r0, #108	; 0x6c
 8008e36:	f007 f9f3 	bl	8010220 <GUI_ALLOC_FreePtrArray>
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f006 ff9e 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008e40:	e01e      	b.n	8008e80 <BUTTON_Callback+0xc8>
 8008e42:	68ea      	ldr	r2, [r5, #12]
 8008e44:	ca0c      	ldmia	r2, {r2, r3}
 8008e46:	2a0d      	cmp	r2, #13
 8008e48:	d002      	beq.n	8008e50 <BUTTON_Callback+0x98>
 8008e4a:	2a20      	cmp	r2, #32
 8008e4c:	d007      	beq.n	8008e5e <BUTTON_Callback+0xa6>
 8008e4e:	e010      	b.n	8008e72 <BUTTON_Callback+0xba>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	dd0e      	ble.n	8008e72 <BUTTON_Callback+0xba>
 8008e54:	4620      	mov	r0, r4
 8008e56:	f7ff ff57 	bl	8008d08 <_OnButtonPressed>
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	e005      	b.n	8008e6a <BUTTON_Callback+0xb2>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	4620      	mov	r0, r4
 8008e62:	dd02      	ble.n	8008e6a <BUTTON_Callback+0xb2>
 8008e64:	f7ff ff50 	bl	8008d08 <_OnButtonPressed>
 8008e68:	e00d      	b.n	8008e86 <BUTTON_Callback+0xce>
 8008e6a:	2102      	movs	r1, #2
 8008e6c:	f7ff ff64 	bl	8008d38 <_OnButtonReleased>
 8008e70:	e009      	b.n	8008e86 <BUTTON_Callback+0xce>
 8008e72:	68eb      	ldr	r3, [r5, #12]
 8008e74:	b923      	cbnz	r3, 8008e80 <BUTTON_Callback+0xc8>
 8008e76:	4620      	mov	r0, r4
 8008e78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e7c:	f7fd fe0e 	bl	8006a9c <WIDGET_AndState>
 8008e80:	4628      	mov	r0, r5
 8008e82:	f001 feaf 	bl	800abe4 <WM_DefaultProc>
 8008e86:	b003      	add	sp, #12
 8008e88:	bd30      	pop	{r4, r5, pc}
 8008e8a:	bf00      	nop
 8008e8c:	2001d044 	.word	0x2001d044
 8008e90:	20000078 	.word	0x20000078

08008e94 <BUTTON_CreateUser>:
 8008e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e96:	b087      	sub	sp, #28
 8008e98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008e9a:	9400      	str	r4, [sp, #0]
 8008e9c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008e9e:	9401      	str	r4, [sp, #4]
 8008ea0:	4c15      	ldr	r4, [pc, #84]	; (8008ef8 <BUTTON_CreateUser+0x64>)
 8008ea2:	9402      	str	r4, [sp, #8]
 8008ea4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008ea6:	344c      	adds	r4, #76	; 0x4c
 8008ea8:	9403      	str	r4, [sp, #12]
 8008eaa:	f001 faab 	bl	800a404 <WM_CreateWindowAsChild>
 8008eae:	4607      	mov	r7, r0
 8008eb0:	b1f8      	cbz	r0, 8008ef2 <BUTTON_CreateUser+0x5e>
 8008eb2:	f006 ff55 	bl	800fd60 <GUI_ALLOC_LockH>
 8008eb6:	4d11      	ldr	r5, [pc, #68]	; (8008efc <BUTTON_CreateUser+0x68>)
 8008eb8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008eba:	9005      	str	r0, [sp, #20]
 8008ebc:	2210      	movs	r2, #16
 8008ebe:	f7fd fe03 	bl	8006ac8 <WIDGET__Init>
 8008ec2:	ae06      	add	r6, sp, #24
 8008ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ec6:	f856 ed04 	ldr.w	lr, [r6, #-4]!
 8008eca:	f10e 0434 	add.w	r4, lr, #52	; 0x34
 8008ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ed4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008edc:	4c08      	ldr	r4, [pc, #32]	; (8008f00 <BUTTON_CreateUser+0x6c>)
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	f8ce 3064 	str.w	r3, [lr, #100]	; 0x64
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f006 ff49 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	4638      	mov	r0, r7
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	4798      	blx	r3
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	b007      	add	sp, #28
 8008ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ef8:	08008db9 	.word	0x08008db9
 8008efc:	2000007c 	.word	0x2000007c
 8008f00:	200000ac 	.word	0x200000ac

08008f04 <BUTTON_SetText>:
 8008f04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f06:	460c      	mov	r4, r1
 8008f08:	4605      	mov	r5, r0
 8008f0a:	b300      	cbz	r0, 8008f4e <BUTTON_SetText+0x4a>
 8008f0c:	f006 ff28 	bl	800fd60 <GUI_ALLOC_LockH>
 8008f10:	6e86      	ldr	r6, [r0, #104]	; 0x68
 8008f12:	9000      	str	r0, [sp, #0]
 8008f14:	4668      	mov	r0, sp
 8008f16:	9601      	str	r6, [sp, #4]
 8008f18:	f006 ff30 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	a801      	add	r0, sp, #4
 8008f20:	f004 fd93 	bl	800da4a <GUI__SetText>
 8008f24:	f1d0 0401 	rsbs	r4, r0, #1
 8008f28:	bf38      	it	cc
 8008f2a:	2400      	movcc	r4, #0
 8008f2c:	b984      	cbnz	r4, 8008f50 <BUTTON_SetText+0x4c>
 8008f2e:	9b01      	ldr	r3, [sp, #4]
 8008f30:	42b3      	cmp	r3, r6
 8008f32:	d008      	beq.n	8008f46 <BUTTON_SetText+0x42>
 8008f34:	4628      	mov	r0, r5
 8008f36:	f006 ff13 	bl	800fd60 <GUI_ALLOC_LockH>
 8008f3a:	9b01      	ldr	r3, [sp, #4]
 8008f3c:	9000      	str	r0, [sp, #0]
 8008f3e:	6683      	str	r3, [r0, #104]	; 0x68
 8008f40:	4668      	mov	r0, sp
 8008f42:	f006 ff1b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8008f46:	4628      	mov	r0, r5
 8008f48:	f001 fa1b 	bl	800a382 <WM_InvalidateWindow>
 8008f4c:	e000      	b.n	8008f50 <BUTTON_SetText+0x4c>
 8008f4e:	2401      	movs	r4, #1
 8008f50:	4620      	mov	r0, r4
 8008f52:	b002      	add	sp, #8
 8008f54:	bd70      	pop	{r4, r5, r6, pc}

08008f56 <WM__UpdateChildPositions>:
 8008f56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	69c4      	ldr	r4, [r0, #28]
 8008f5e:	9303      	str	r3, [sp, #12]
 8008f60:	468a      	mov	sl, r1
 8008f62:	4693      	mov	fp, r2
 8008f64:	2c00      	cmp	r4, #0
 8008f66:	d06d      	beq.n	8009044 <WM__UpdateChildPositions+0xee>
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f006 fef9 	bl	800fd60 <GUI_ALLOC_LockH>
 8008f6e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008f70:	9005      	str	r0, [sp, #20]
 8008f72:	f401 7320 	and.w	r3, r1, #640	; 0x280
 8008f76:	2b80      	cmp	r3, #128	; 0x80
 8008f78:	f8b0 8000 	ldrh.w	r8, [r0]
 8008f7c:	8842      	ldrh	r2, [r0, #2]
 8008f7e:	8886      	ldrh	r6, [r0, #4]
 8008f80:	88c5      	ldrh	r5, [r0, #6]
 8008f82:	d008      	beq.n	8008f96 <WM__UpdateChildPositions+0x40>
 8008f84:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008f88:	d108      	bne.n	8008f9c <WM__UpdateChildPositions+0x46>
 8008f8a:	eb08 090a 	add.w	r9, r8, sl
 8008f8e:	fa1f f989 	uxth.w	r9, r9
 8008f92:	9b03      	ldr	r3, [sp, #12]
 8008f94:	e008      	b.n	8008fa8 <WM__UpdateChildPositions+0x52>
 8008f96:	9803      	ldr	r0, [sp, #12]
 8008f98:	b283      	uxth	r3, r0
 8008f9a:	e001      	b.n	8008fa0 <WM__UpdateChildPositions+0x4a>
 8008f9c:	fa1f f38a 	uxth.w	r3, sl
 8008fa0:	eb03 0908 	add.w	r9, r3, r8
 8008fa4:	fa1f f989 	uxth.w	r9, r9
 8008fa8:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 8008fac:	4433      	add	r3, r6
 8008fae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	d008      	beq.n	8008fc8 <WM__UpdateChildPositions+0x72>
 8008fb6:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8008fba:	d108      	bne.n	8008fce <WM__UpdateChildPositions+0x78>
 8008fbc:	eb02 0c0b 	add.w	ip, r2, fp
 8008fc0:	fa1f fc8c 	uxth.w	ip, ip
 8008fc4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008fc6:	e008      	b.n	8008fda <WM__UpdateChildPositions+0x84>
 8008fc8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008fca:	b28f      	uxth	r7, r1
 8008fcc:	e001      	b.n	8008fd2 <WM__UpdateChildPositions+0x7c>
 8008fce:	fa1f f78b 	uxth.w	r7, fp
 8008fd2:	eb07 0c02 	add.w	ip, r7, r2
 8008fd6:	fa1f fc8c 	uxth.w	ip, ip
 8008fda:	fa0f f989 	sxth.w	r9, r9
 8008fde:	fa0f f888 	sxth.w	r8, r8
 8008fe2:	b212      	sxth	r2, r2
 8008fe4:	442f      	add	r7, r5
 8008fe6:	fa0f fc8c 	sxth.w	ip, ip
 8008fea:	ebb9 0108 	subs.w	r1, r9, r8
 8008fee:	9202      	str	r2, [sp, #8]
 8008ff0:	b2bf      	uxth	r7, r7
 8008ff2:	ebc2 020c 	rsb	r2, r2, ip
 8008ff6:	d100      	bne.n	8008ffa <WM__UpdateChildPositions+0xa4>
 8008ff8:	b142      	cbz	r2, 800900c <WM__UpdateChildPositions+0xb6>
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	9301      	str	r3, [sp, #4]
 8008ffe:	f8cd c000 	str.w	ip, [sp]
 8009002:	f000 fb24 	bl	800964e <WM_MoveWindow>
 8009006:	f8dd c000 	ldr.w	ip, [sp]
 800900a:	9b01      	ldr	r3, [sp, #4]
 800900c:	b21b      	sxth	r3, r3
 800900e:	ebc9 0903 	rsb	r9, r9, r3
 8009012:	b236      	sxth	r6, r6
 8009014:	9b02      	ldr	r3, [sp, #8]
 8009016:	ebc6 0808 	rsb	r8, r6, r8
 800901a:	b23f      	sxth	r7, r7
 800901c:	b22d      	sxth	r5, r5
 800901e:	ebcc 0c07 	rsb	ip, ip, r7
 8009022:	1b5d      	subs	r5, r3, r5
 8009024:	eb19 0108 	adds.w	r1, r9, r8
 8009028:	eb0c 0205 	add.w	r2, ip, r5
 800902c:	d100      	bne.n	8009030 <WM__UpdateChildPositions+0xda>
 800902e:	b112      	cbz	r2, 8009036 <WM__UpdateChildPositions+0xe0>
 8009030:	4620      	mov	r0, r4
 8009032:	f000 f9fd 	bl	8009430 <WM_ResizeWindow>
 8009036:	a806      	add	r0, sp, #24
 8009038:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800903c:	6a1c      	ldr	r4, [r3, #32]
 800903e:	f006 fe9d 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009042:	e78f      	b.n	8008f64 <WM__UpdateChildPositions+0xe>
 8009044:	b007      	add	sp, #28
 8009046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800904c <WM__SendMessage>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	4c0d      	ldr	r4, [pc, #52]	; (8009084 <WM__SendMessage+0x38>)
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	2b13      	cmp	r3, #19
 8009054:	4606      	mov	r6, r0
 8009056:	460d      	mov	r5, r1
 8009058:	dc12      	bgt.n	8009080 <WM__SendMessage+0x34>
 800905a:	f006 fe77 	bl	800fd4c <GUI_ALLOC_h2p>
 800905e:	6903      	ldr	r3, [r0, #16]
 8009060:	606e      	str	r6, [r5, #4]
 8009062:	b143      	cbz	r3, 8009076 <WM__SendMessage+0x2a>
 8009064:	6822      	ldr	r2, [r4, #0]
 8009066:	4628      	mov	r0, r5
 8009068:	3201      	adds	r2, #1
 800906a:	6022      	str	r2, [r4, #0]
 800906c:	4798      	blx	r3
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	3b01      	subs	r3, #1
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	bd70      	pop	{r4, r5, r6, pc}
 8009076:	4628      	mov	r0, r5
 8009078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800907c:	f001 bdb2 	b.w	800abe4 <WM_DefaultProc>
 8009080:	bd70      	pop	{r4, r5, r6, pc}
 8009082:	bf00      	nop
 8009084:	2001d048 	.word	0x2001d048

08009088 <WM__Screen2Client>:
 8009088:	f9b0 3000 	ldrsh.w	r3, [r0]
 800908c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009090:	4608      	mov	r0, r1
 8009092:	4252      	negs	r2, r2
 8009094:	4259      	negs	r1, r3
 8009096:	f005 beb5 	b.w	800ee04 <GUI_MoveRect>

0800909a <WM__IsAncestor>:
 800909a:	b510      	push	{r4, lr}
 800909c:	460c      	mov	r4, r1
 800909e:	b908      	cbnz	r0, 80090a4 <WM__IsAncestor+0xa>
 80090a0:	2000      	movs	r0, #0
 80090a2:	bd10      	pop	{r4, pc}
 80090a4:	2900      	cmp	r1, #0
 80090a6:	d0fb      	beq.n	80090a0 <WM__IsAncestor+0x6>
 80090a8:	f006 fe50 	bl	800fd4c <GUI_ALLOC_h2p>
 80090ac:	6980      	ldr	r0, [r0, #24]
 80090ae:	42a0      	cmp	r0, r4
 80090b0:	d002      	beq.n	80090b8 <WM__IsAncestor+0x1e>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d1f8      	bne.n	80090a8 <WM__IsAncestor+0xe>
 80090b6:	e7f3      	b.n	80090a0 <WM__IsAncestor+0x6>
 80090b8:	2001      	movs	r0, #1
 80090ba:	bd10      	pop	{r4, pc}

080090bc <WM__IsAncestorOrSelf>:
 80090bc:	4288      	cmp	r0, r1
 80090be:	d001      	beq.n	80090c4 <WM__IsAncestorOrSelf+0x8>
 80090c0:	f7ff bfeb 	b.w	800909a <WM__IsAncestor>
 80090c4:	2001      	movs	r0, #1
 80090c6:	4770      	bx	lr

080090c8 <WM_InvalidateWindowAndDescs>:
 80090c8:	b510      	push	{r4, lr}
 80090ca:	4604      	mov	r4, r0
 80090cc:	b170      	cbz	r0, 80090ec <WM_InvalidateWindowAndDescs+0x24>
 80090ce:	f001 f958 	bl	800a382 <WM_InvalidateWindow>
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 fbe5 	bl	80098a2 <WM_GetFirstChild>
 80090d8:	4604      	mov	r4, r0
 80090da:	b13c      	cbz	r4, 80090ec <WM_InvalidateWindowAndDescs+0x24>
 80090dc:	4620      	mov	r0, r4
 80090de:	f7ff fff3 	bl	80090c8 <WM_InvalidateWindowAndDescs>
 80090e2:	4620      	mov	r0, r4
 80090e4:	f006 fe32 	bl	800fd4c <GUI_ALLOC_h2p>
 80090e8:	6a04      	ldr	r4, [r0, #32]
 80090ea:	e7f6      	b.n	80090da <WM_InvalidateWindowAndDescs+0x12>
 80090ec:	bd10      	pop	{r4, pc}

080090ee <WM_ShowWindow>:
 80090ee:	b513      	push	{r0, r1, r4, lr}
 80090f0:	4604      	mov	r4, r0
 80090f2:	b170      	cbz	r0, 8009112 <WM_ShowWindow+0x24>
 80090f4:	f006 fe34 	bl	800fd60 <GUI_ALLOC_LockH>
 80090f8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80090fa:	9001      	str	r0, [sp, #4]
 80090fc:	0793      	lsls	r3, r2, #30
 80090fe:	d405      	bmi.n	800910c <WM_ShowWindow+0x1e>
 8009100:	f042 0202 	orr.w	r2, r2, #2
 8009104:	6282      	str	r2, [r0, #40]	; 0x28
 8009106:	4620      	mov	r0, r4
 8009108:	f7ff ffde 	bl	80090c8 <WM_InvalidateWindowAndDescs>
 800910c:	a801      	add	r0, sp, #4
 800910e:	f006 fe35 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009112:	b002      	add	sp, #8
 8009114:	bd10      	pop	{r4, pc}
	...

08009118 <WM_SetHasTrans>:
 8009118:	b513      	push	{r0, r1, r4, lr}
 800911a:	4604      	mov	r4, r0
 800911c:	b1b8      	cbz	r0, 800914e <WM_SetHasTrans+0x36>
 800911e:	f006 fe1f 	bl	800fd60 <GUI_ALLOC_LockH>
 8009122:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009124:	9001      	str	r0, [sp, #4]
 8009126:	07db      	lsls	r3, r3, #31
 8009128:	d40e      	bmi.n	8009148 <WM_SetHasTrans+0x30>
 800912a:	4620      	mov	r0, r4
 800912c:	f008 f8c6 	bl	80112bc <WM_ValidateWindow>
 8009130:	9b01      	ldr	r3, [sp, #4]
 8009132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009134:	f042 0201 	orr.w	r2, r2, #1
 8009138:	629a      	str	r2, [r3, #40]	; 0x28
 800913a:	4b06      	ldr	r3, [pc, #24]	; (8009154 <WM_SetHasTrans+0x3c>)
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	4620      	mov	r0, r4
 8009140:	3201      	adds	r2, #1
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	f001 f91d 	bl	800a382 <WM_InvalidateWindow>
 8009148:	a801      	add	r0, sp, #4
 800914a:	f006 fe17 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800914e:	b002      	add	sp, #8
 8009150:	bd10      	pop	{r4, pc}
 8009152:	bf00      	nop
 8009154:	2001d4dc 	.word	0x2001d4dc

08009158 <WM_GetHasTrans>:
 8009158:	b508      	push	{r3, lr}
 800915a:	b128      	cbz	r0, 8009168 <WM_GetHasTrans+0x10>
 800915c:	f006 fdf6 	bl	800fd4c <GUI_ALLOC_h2p>
 8009160:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009162:	f000 0001 	and.w	r0, r0, #1
 8009166:	bd08      	pop	{r3, pc}
 8009168:	bd08      	pop	{r3, pc}

0800916a <WM_SetSize>:
 800916a:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 800916e:	460e      	mov	r6, r1
 8009170:	4690      	mov	r8, r2
 8009172:	4607      	mov	r7, r0
 8009174:	b1d0      	cbz	r0, 80091ac <WM_SetSize+0x42>
 8009176:	f006 fdf3 	bl	800fd60 <GUI_ALLOC_LockH>
 800917a:	4603      	mov	r3, r0
 800917c:	a802      	add	r0, sp, #8
 800917e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8009182:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009186:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800918a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800918e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009192:	1a8a      	subs	r2, r1, r2
 8009194:	1aed      	subs	r5, r5, r3
 8009196:	43d2      	mvns	r2, r2
 8009198:	43ed      	mvns	r5, r5
 800919a:	4416      	add	r6, r2
 800919c:	4445      	add	r5, r8
 800919e:	f006 fded 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80091a2:	4638      	mov	r0, r7
 80091a4:	4631      	mov	r1, r6
 80091a6:	462a      	mov	r2, r5
 80091a8:	f000 f942 	bl	8009430 <WM_ResizeWindow>
 80091ac:	b003      	add	sp, #12
 80091ae:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

080091b2 <_SetScrollbar>:
 80091b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091b4:	460d      	mov	r5, r1
 80091b6:	4611      	mov	r1, r2
 80091b8:	4606      	mov	r6, r0
 80091ba:	461f      	mov	r7, r3
 80091bc:	f000 fb96 	bl	80098ec <WM_GetDialogItem>
 80091c0:	4604      	mov	r4, r0
 80091c2:	b1a5      	cbz	r5, 80091ee <_SetScrollbar+0x3c>
 80091c4:	b920      	cbnz	r0, 80091d0 <_SetScrollbar+0x1e>
 80091c6:	4630      	mov	r0, r6
 80091c8:	4639      	mov	r1, r7
 80091ca:	f007 f94b 	bl	8010464 <SCROLLBAR_CreateAttached>
 80091ce:	e014      	b.n	80091fa <_SetScrollbar+0x48>
 80091d0:	f006 fdc6 	bl	800fd60 <GUI_ALLOC_LockH>
 80091d4:	ab02      	add	r3, sp, #8
 80091d6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80091d8:	f843 0d04 	str.w	r0, [r3, #-4]!
 80091dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091e0:	f042 0202 	orr.w	r2, r2, #2
 80091e4:	6282      	str	r2, [r0, #40]	; 0x28
 80091e6:	4618      	mov	r0, r3
 80091e8:	f006 fdc8 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80091ec:	e005      	b.n	80091fa <_SetScrollbar+0x48>
 80091ee:	b120      	cbz	r0, 80091fa <_SetScrollbar+0x48>
 80091f0:	f000 fa4a 	bl	8009688 <WM_HideWindow>
 80091f4:	4620      	mov	r0, r4
 80091f6:	f001 fc27 	bl	800aa48 <WM__DeleteSecure>
 80091fa:	1c20      	adds	r0, r4, #0
 80091fc:	bf18      	it	ne
 80091fe:	2001      	movne	r0, #1
 8009200:	b003      	add	sp, #12
 8009202:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009204 <WM__SetScrollbarV>:
 8009204:	22fe      	movs	r2, #254	; 0xfe
 8009206:	2308      	movs	r3, #8
 8009208:	f7ff bfd3 	b.w	80091b2 <_SetScrollbar>

0800920c <WM__SetScrollbarH>:
 800920c:	22ff      	movs	r2, #255	; 0xff
 800920e:	2300      	movs	r3, #0
 8009210:	f7ff bfcf 	b.w	80091b2 <_SetScrollbar>

08009214 <WM_SetScrollbarH>:
 8009214:	f7ff bffa 	b.w	800920c <WM__SetScrollbarH>

08009218 <WM_SetScrollbarV>:
 8009218:	f7ff bff4 	b.w	8009204 <WM__SetScrollbarV>

0800921c <WM_SetScrollState>:
 800921c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800921e:	b130      	cbz	r0, 800922e <WM_SetScrollState+0x12>
 8009220:	b129      	cbz	r1, 800922e <WM_SetScrollState+0x12>
 8009222:	2324      	movs	r3, #36	; 0x24
 8009224:	9103      	str	r1, [sp, #12]
 8009226:	4669      	mov	r1, sp
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	f001 f853 	bl	800a2d4 <WM_SendMessage>
 800922e:	b005      	add	sp, #20
 8009230:	f85d fb04 	ldr.w	pc, [sp], #4

08009234 <_GetPrevChild>:
 8009234:	b510      	push	{r4, lr}
 8009236:	4604      	mov	r4, r0
 8009238:	b918      	cbnz	r0, 8009242 <_GetPrevChild+0xe>
 800923a:	4620      	mov	r0, r4
 800923c:	f008 f816 	bl	801126c <WM__GetLastSibling>
 8009240:	e003      	b.n	800924a <_GetPrevChild+0x16>
 8009242:	f008 f800 	bl	8011246 <WM__GetPrevSibling>
 8009246:	2800      	cmp	r0, #0
 8009248:	d0f7      	beq.n	800923a <_GetPrevChild+0x6>
 800924a:	42a0      	cmp	r0, r4
 800924c:	bf08      	it	eq
 800924e:	2000      	moveq	r0, #0
 8009250:	bd10      	pop	{r4, pc}

08009252 <WM_SetFocusOnPrevChild>:
 8009252:	b538      	push	{r3, r4, r5, lr}
 8009254:	4604      	mov	r4, r0
 8009256:	b1b0      	cbz	r0, 8009286 <WM_SetFocusOnPrevChild+0x34>
 8009258:	f008 f814 	bl	8011284 <WM__GetFocussedChild>
 800925c:	f7ff ffea 	bl	8009234 <_GetPrevChild>
 8009260:	4605      	mov	r5, r0
 8009262:	4604      	mov	r4, r0
 8009264:	4620      	mov	r0, r4
 8009266:	f000 f9f6 	bl	8009656 <WM_IsFocussable>
 800926a:	b930      	cbnz	r0, 800927a <WM_SetFocusOnPrevChild+0x28>
 800926c:	b12c      	cbz	r4, 800927a <WM_SetFocusOnPrevChild+0x28>
 800926e:	4620      	mov	r0, r4
 8009270:	f7ff ffe0 	bl	8009234 <_GetPrevChild>
 8009274:	42a8      	cmp	r0, r5
 8009276:	4604      	mov	r4, r0
 8009278:	d1f4      	bne.n	8009264 <WM_SetFocusOnPrevChild+0x12>
 800927a:	4620      	mov	r0, r4
 800927c:	f000 f84a 	bl	8009314 <WM_SetFocus>
 8009280:	2800      	cmp	r0, #0
 8009282:	bf18      	it	ne
 8009284:	2400      	movne	r4, #0
 8009286:	4620      	mov	r0, r4
 8009288:	bd38      	pop	{r3, r4, r5, pc}

0800928a <_GetNextChild>:
 800928a:	b538      	push	{r3, r4, r5, lr}
 800928c:	4605      	mov	r5, r0
 800928e:	460c      	mov	r4, r1
 8009290:	b921      	cbnz	r1, 800929c <_GetNextChild+0x12>
 8009292:	4628      	mov	r0, r5
 8009294:	f006 fd5a 	bl	800fd4c <GUI_ALLOC_h2p>
 8009298:	69c0      	ldr	r0, [r0, #28]
 800929a:	e005      	b.n	80092a8 <_GetNextChild+0x1e>
 800929c:	4608      	mov	r0, r1
 800929e:	f006 fd55 	bl	800fd4c <GUI_ALLOC_h2p>
 80092a2:	6a00      	ldr	r0, [r0, #32]
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d0f4      	beq.n	8009292 <_GetNextChild+0x8>
 80092a8:	42a0      	cmp	r0, r4
 80092aa:	bf08      	it	eq
 80092ac:	2000      	moveq	r0, #0
 80092ae:	bd38      	pop	{r3, r4, r5, pc}

080092b0 <WM_SetFocusOnNextChild>:
 80092b0:	b570      	push	{r4, r5, r6, lr}
 80092b2:	4605      	mov	r5, r0
 80092b4:	b340      	cbz	r0, 8009308 <WM_SetFocusOnNextChild+0x58>
 80092b6:	f007 ffe5 	bl	8011284 <WM__GetFocussedChild>
 80092ba:	4601      	mov	r1, r0
 80092bc:	4628      	mov	r0, r5
 80092be:	f7ff ffe4 	bl	800928a <_GetNextChild>
 80092c2:	4606      	mov	r6, r0
 80092c4:	4604      	mov	r4, r0
 80092c6:	4620      	mov	r0, r4
 80092c8:	f000 f9c5 	bl	8009656 <WM_IsFocussable>
 80092cc:	b938      	cbnz	r0, 80092de <WM_SetFocusOnNextChild+0x2e>
 80092ce:	b13c      	cbz	r4, 80092e0 <WM_SetFocusOnNextChild+0x30>
 80092d0:	4621      	mov	r1, r4
 80092d2:	4628      	mov	r0, r5
 80092d4:	f7ff ffd9 	bl	800928a <_GetNextChild>
 80092d8:	42b0      	cmp	r0, r6
 80092da:	4604      	mov	r4, r0
 80092dc:	d1f3      	bne.n	80092c6 <WM_SetFocusOnNextChild+0x16>
 80092de:	b90c      	cbnz	r4, 80092e4 <WM_SetFocusOnNextChild+0x34>
 80092e0:	2400      	movs	r4, #0
 80092e2:	e012      	b.n	800930a <WM_SetFocusOnNextChild+0x5a>
 80092e4:	4d0a      	ldr	r5, [pc, #40]	; (8009310 <WM_SetFocusOnNextChild+0x60>)
 80092e6:	4620      	mov	r0, r4
 80092e8:	682e      	ldr	r6, [r5, #0]
 80092ea:	f001 f84d 	bl	800a388 <WM__GetTopLevelLayer>
 80092ee:	3001      	adds	r0, #1
 80092f0:	d00b      	beq.n	800930a <WM_SetFocusOnNextChild+0x5a>
 80092f2:	4620      	mov	r0, r4
 80092f4:	f001 f848 	bl	800a388 <WM__GetTopLevelLayer>
 80092f8:	6028      	str	r0, [r5, #0]
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 f80a 	bl	8009314 <WM_SetFocus>
 8009300:	602e      	str	r6, [r5, #0]
 8009302:	2800      	cmp	r0, #0
 8009304:	d1ec      	bne.n	80092e0 <WM_SetFocusOnNextChild+0x30>
 8009306:	e000      	b.n	800930a <WM_SetFocusOnNextChild+0x5a>
 8009308:	4604      	mov	r4, r0
 800930a:	4620      	mov	r0, r4
 800930c:	bd70      	pop	{r4, r5, r6, pc}
 800930e:	bf00      	nop
 8009310:	2001d4b4 	.word	0x2001d4b4

08009314 <WM_SetFocus>:
 8009314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009316:	b087      	sub	sp, #28
 8009318:	4604      	mov	r4, r0
 800931a:	2100      	movs	r1, #0
 800931c:	a802      	add	r0, sp, #8
 800931e:	2210      	movs	r2, #16
 8009320:	f00d fad2 	bl	80168c8 <memset>
 8009324:	2c00      	cmp	r4, #0
 8009326:	d03a      	beq.n	800939e <WM_SetFocus+0x8a>
 8009328:	4b1f      	ldr	r3, [pc, #124]	; (80093a8 <WM_SetFocus+0x94>)
 800932a:	4a20      	ldr	r2, [pc, #128]	; (80093ac <WM_SetFocus+0x98>)
 800932c:	6819      	ldr	r1, [r3, #0]
 800932e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8009332:	4284      	cmp	r4, r0
 8009334:	4616      	mov	r6, r2
 8009336:	461f      	mov	r7, r3
 8009338:	d031      	beq.n	800939e <WM_SetFocus+0x8a>
 800933a:	231e      	movs	r3, #30
 800933c:	e88d 0011 	stmia.w	sp, {r0, r4}
 8009340:	9302      	str	r3, [sp, #8]
 8009342:	b110      	cbz	r0, 800934a <WM_SetFocus+0x36>
 8009344:	a902      	add	r1, sp, #8
 8009346:	f7ff fe81 	bl	800904c <WM__SendMessage>
 800934a:	2301      	movs	r3, #1
 800934c:	4620      	mov	r0, r4
 800934e:	a902      	add	r1, sp, #8
 8009350:	9305      	str	r3, [sp, #20]
 8009352:	f7ff fe7b 	bl	800904c <WM__SendMessage>
 8009356:	9d05      	ldr	r5, [sp, #20]
 8009358:	bb15      	cbnz	r5, 80093a0 <WM_SetFocus+0x8c>
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
 8009360:	4620      	mov	r0, r4
 8009362:	f000 fa15 	bl	8009790 <WM_GetParent>
 8009366:	4604      	mov	r4, r0
 8009368:	b138      	cbz	r0, 800937a <WM_SetFocus+0x66>
 800936a:	2320      	movs	r3, #32
 800936c:	9302      	str	r3, [sp, #8]
 800936e:	a902      	add	r1, sp, #8
 8009370:	ab00      	add	r3, sp, #0
 8009372:	9305      	str	r3, [sp, #20]
 8009374:	f7ff fe6a 	bl	800904c <WM__SendMessage>
 8009378:	e7f2      	b.n	8009360 <WM_SetFocus+0x4c>
 800937a:	9c00      	ldr	r4, [sp, #0]
 800937c:	4620      	mov	r0, r4
 800937e:	f000 f968 	bl	8009652 <WM_IsWindow>
 8009382:	b168      	cbz	r0, 80093a0 <WM_SetFocus+0x8c>
 8009384:	4620      	mov	r0, r4
 8009386:	f000 fa03 	bl	8009790 <WM_GetParent>
 800938a:	4604      	mov	r4, r0
 800938c:	b140      	cbz	r0, 80093a0 <WM_SetFocus+0x8c>
 800938e:	2320      	movs	r3, #32
 8009390:	9302      	str	r3, [sp, #8]
 8009392:	a902      	add	r1, sp, #8
 8009394:	ab00      	add	r3, sp, #0
 8009396:	9305      	str	r3, [sp, #20]
 8009398:	f7ff fe58 	bl	800904c <WM__SendMessage>
 800939c:	e7f2      	b.n	8009384 <WM_SetFocus+0x70>
 800939e:	2501      	movs	r5, #1
 80093a0:	4628      	mov	r0, r5
 80093a2:	b007      	add	sp, #28
 80093a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093a6:	bf00      	nop
 80093a8:	2001d4b4 	.word	0x2001d4b4
 80093ac:	2001d4a4 	.word	0x2001d4a4

080093b0 <WM_SetCreateFlags>:
 80093b0:	4b02      	ldr	r3, [pc, #8]	; (80093bc <WM_SetCreateFlags+0xc>)
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	6018      	str	r0, [r3, #0]
 80093b6:	4610      	mov	r0, r2
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	2001d4bc 	.word	0x2001d4bc

080093c0 <WM__ReleaseCapture>:
 80093c0:	b530      	push	{r4, r5, lr}
 80093c2:	4d0a      	ldr	r5, [pc, #40]	; (80093ec <WM__ReleaseCapture+0x2c>)
 80093c4:	4c0a      	ldr	r4, [pc, #40]	; (80093f0 <WM__ReleaseCapture+0x30>)
 80093c6:	682b      	ldr	r3, [r5, #0]
 80093c8:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80093cc:	b085      	sub	sp, #20
 80093ce:	b150      	cbz	r0, 80093e6 <WM__ReleaseCapture+0x26>
 80093d0:	a904      	add	r1, sp, #16
 80093d2:	2318      	movs	r3, #24
 80093d4:	f841 3d10 	str.w	r3, [r1, #-16]!
 80093d8:	4669      	mov	r1, sp
 80093da:	f7ff fe37 	bl	800904c <WM__SendMessage>
 80093de:	682b      	ldr	r3, [r5, #0]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 80093e6:	b005      	add	sp, #20
 80093e8:	bd30      	pop	{r4, r5, pc}
 80093ea:	bf00      	nop
 80093ec:	2001d4b4 	.word	0x2001d4b4
 80093f0:	2001d4d0 	.word	0x2001d4d0

080093f4 <WM_SetCapture>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	4b09      	ldr	r3, [pc, #36]	; (800941c <WM_SetCapture+0x28>)
 80093f8:	4a09      	ldr	r2, [pc, #36]	; (8009420 <WM_SetCapture+0x2c>)
 80093fa:	4604      	mov	r4, r0
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	460f      	mov	r7, r1
 8009400:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8009404:	42a1      	cmp	r1, r4
 8009406:	4615      	mov	r5, r2
 8009408:	461e      	mov	r6, r3
 800940a:	d001      	beq.n	8009410 <WM_SetCapture+0x1c>
 800940c:	f7ff ffd8 	bl	80093c0 <WM__ReleaseCapture>
 8009410:	6833      	ldr	r3, [r6, #0]
 8009412:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
 8009416:	4b03      	ldr	r3, [pc, #12]	; (8009424 <WM_SetCapture+0x30>)
 8009418:	701f      	strb	r7, [r3, #0]
 800941a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800941c:	2001d4b4 	.word	0x2001d4b4
 8009420:	2001d4d0 	.word	0x2001d4d0
 8009424:	2001d4b8 	.word	0x2001d4b8

08009428 <WM_ReleaseCapture>:
 8009428:	f7ff bfca 	b.w	80093c0 <WM__ReleaseCapture>

0800942c <WM_SendMessageNoPara>:
 800942c:	f007 beee 	b.w	801120c <WM__SendMessageNoPara>

08009430 <WM_ResizeWindow>:
 8009430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009434:	ea51 0302 	orrs.w	r3, r1, r2
 8009438:	b08a      	sub	sp, #40	; 0x28
 800943a:	4680      	mov	r8, r0
 800943c:	460e      	mov	r6, r1
 800943e:	4617      	mov	r7, r2
 8009440:	d06e      	beq.n	8009520 <WM_ResizeWindow+0xf0>
 8009442:	2800      	cmp	r0, #0
 8009444:	d06c      	beq.n	8009520 <WM_ResizeWindow+0xf0>
 8009446:	f006 fc8b 	bl	800fd60 <GUI_ALLOC_LockH>
 800944a:	4603      	mov	r3, r0
 800944c:	9003      	str	r0, [sp, #12]
 800944e:	c803      	ldmia	r0, {r0, r1}
 8009450:	ad04      	add	r5, sp, #16
 8009452:	ac06      	add	r4, sp, #24
 8009454:	e885 0003 	stmia.w	r5, {r0, r1}
 8009458:	e884 0003 	stmia.w	r4, {r0, r1}
 800945c:	b17e      	cbz	r6, 800947e <WM_ResizeWindow+0x4e>
 800945e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009460:	f402 7220 	and.w	r2, r2, #640	; 0x280
 8009464:	2a80      	cmp	r2, #128	; 0x80
 8009466:	d105      	bne.n	8009474 <WM_ResizeWindow+0x44>
 8009468:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800946c:	1b96      	subs	r6, r2, r6
 800946e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8009472:	e004      	b.n	800947e <WM_ResizeWindow+0x4e>
 8009474:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009478:	4416      	add	r6, r2
 800947a:	f8ad 601c 	strh.w	r6, [sp, #28]
 800947e:	b187      	cbz	r7, 80094a2 <WM_ResizeWindow+0x72>
 8009480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009482:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8009486:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800948a:	d105      	bne.n	8009498 <WM_ResizeWindow+0x68>
 800948c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8009490:	1bd7      	subs	r7, r2, r7
 8009492:	f8ad 701a 	strh.w	r7, [sp, #26]
 8009496:	e004      	b.n	80094a2 <WM_ResizeWindow+0x72>
 8009498:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800949c:	4417      	add	r7, r2
 800949e:	f8ad 701e 	strh.w	r7, [sp, #30]
 80094a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a4:	03da      	lsls	r2, r3, #15
 80094a6:	d502      	bpl.n	80094ae <WM_ResizeWindow+0x7e>
 80094a8:	4640      	mov	r0, r8
 80094aa:	f000 fdf7 	bl	800a09c <WM__InvalidateDrawAndDescs>
 80094ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094b2:	9b03      	ldr	r3, [sp, #12]
 80094b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80094b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ba:	079b      	lsls	r3, r3, #30
 80094bc:	d50a      	bpl.n	80094d4 <WM_ResizeWindow+0xa4>
 80094be:	a808      	add	r0, sp, #32
 80094c0:	4629      	mov	r1, r5
 80094c2:	4622      	mov	r2, r4
 80094c4:	f005 fcae 	bl	800ee24 <GUI_MergeRect>
 80094c8:	9b03      	ldr	r3, [sp, #12]
 80094ca:	a808      	add	r0, sp, #32
 80094cc:	6999      	ldr	r1, [r3, #24]
 80094ce:	6a1a      	ldr	r2, [r3, #32]
 80094d0:	f000 fee8 	bl	800a2a4 <WM__InvalidateRectEx>
 80094d4:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 80094d8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80094dc:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 80094e0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80094e4:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 80094e8:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80094ec:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 80094f0:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80094f4:	1ae3      	subs	r3, r4, r3
 80094f6:	1a38      	subs	r0, r7, r0
 80094f8:	ac0a      	add	r4, sp, #40	; 0x28
 80094fa:	1aaa      	subs	r2, r5, r2
 80094fc:	9000      	str	r0, [sp, #0]
 80094fe:	1a71      	subs	r1, r6, r1
 8009500:	9803      	ldr	r0, [sp, #12]
 8009502:	f7ff fd28 	bl	8008f56 <WM__UpdateChildPositions>
 8009506:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800950a:	f101 0008 	add.w	r0, r1, #8
 800950e:	f004 fb93 	bl	800dc38 <GUI__IntersectRect>
 8009512:	4640      	mov	r0, r8
 8009514:	2105      	movs	r1, #5
 8009516:	f000 fee1 	bl	800a2dc <WM__SendMsgNoData>
 800951a:	4620      	mov	r0, r4
 800951c:	f006 fc2e 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009520:	b00a      	add	sp, #40	; 0x28
 8009522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009526 <WM_NotifyParent>:
 8009526:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009528:	2326      	movs	r3, #38	; 0x26
 800952a:	9103      	str	r1, [sp, #12]
 800952c:	4669      	mov	r1, sp
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	f008 f9a8 	bl	8011884 <WM_SendToParent>
 8009534:	b005      	add	sp, #20
 8009536:	f85d fb04 	ldr.w	pc, [sp], #4

0800953a <_MoveDescendents>:
 800953a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	4606      	mov	r6, r0
 8009542:	460c      	mov	r4, r1
 8009544:	4615      	mov	r5, r2
 8009546:	a804      	add	r0, sp, #16
 8009548:	2100      	movs	r1, #0
 800954a:	2210      	movs	r2, #16
 800954c:	f00d f9bc 	bl	80168c8 <memset>
 8009550:	b336      	cbz	r6, 80095a0 <_MoveDescendents+0x66>
 8009552:	4630      	mov	r0, r6
 8009554:	f006 fc04 	bl	800fd60 <GUI_ALLOC_LockH>
 8009558:	4621      	mov	r1, r4
 800955a:	462a      	mov	r2, r5
 800955c:	9001      	str	r0, [sp, #4]
 800955e:	f005 fc51 	bl	800ee04 <GUI_MoveRect>
 8009562:	9801      	ldr	r0, [sp, #4]
 8009564:	4621      	mov	r1, r4
 8009566:	3008      	adds	r0, #8
 8009568:	462a      	mov	r2, r5
 800956a:	f005 fc4b 	bl	800ee04 <GUI_MoveRect>
 800956e:	a808      	add	r0, sp, #32
 8009570:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 8009574:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8009578:	6a17      	ldr	r7, [r2, #32]
 800957a:	f006 fbff 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800957e:	4640      	mov	r0, r8
 8009580:	4621      	mov	r1, r4
 8009582:	462a      	mov	r2, r5
 8009584:	f7ff ffd9 	bl	800953a <_MoveDescendents>
 8009588:	2303      	movs	r3, #3
 800958a:	9304      	str	r3, [sp, #16]
 800958c:	4630      	mov	r0, r6
 800958e:	ab02      	add	r3, sp, #8
 8009590:	a904      	add	r1, sp, #16
 8009592:	9307      	str	r3, [sp, #28]
 8009594:	9402      	str	r4, [sp, #8]
 8009596:	9503      	str	r5, [sp, #12]
 8009598:	463e      	mov	r6, r7
 800959a:	f7ff fd57 	bl	800904c <WM__SendMessage>
 800959e:	e7d7      	b.n	8009550 <_MoveDescendents+0x16>
 80095a0:	b008      	add	sp, #32
 80095a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080095a6 <WM__MoveWindow>:
 80095a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095aa:	b08b      	sub	sp, #44	; 0x2c
 80095ac:	4606      	mov	r6, r0
 80095ae:	460d      	mov	r5, r1
 80095b0:	4614      	mov	r4, r2
 80095b2:	a806      	add	r0, sp, #24
 80095b4:	2100      	movs	r1, #0
 80095b6:	2210      	movs	r2, #16
 80095b8:	f00d f986 	bl	80168c8 <memset>
 80095bc:	2e00      	cmp	r6, #0
 80095be:	d043      	beq.n	8009648 <WM__MoveWindow+0xa2>
 80095c0:	b90d      	cbnz	r5, 80095c6 <WM__MoveWindow+0x20>
 80095c2:	2c00      	cmp	r4, #0
 80095c4:	d040      	beq.n	8009648 <WM__MoveWindow+0xa2>
 80095c6:	4630      	mov	r0, r6
 80095c8:	f006 fbca 	bl	800fd60 <GUI_ALLOC_LockH>
 80095cc:	4603      	mov	r3, r0
 80095ce:	9001      	str	r0, [sp, #4]
 80095d0:	c803      	ldmia	r0, {r0, r1}
 80095d2:	f10d 0808 	add.w	r8, sp, #8
 80095d6:	e888 0003 	stmia.w	r8, {r0, r1}
 80095da:	4622      	mov	r2, r4
 80095dc:	4618      	mov	r0, r3
 80095de:	4629      	mov	r1, r5
 80095e0:	f005 fc10 	bl	800ee04 <GUI_MoveRect>
 80095e4:	9801      	ldr	r0, [sp, #4]
 80095e6:	af0a      	add	r7, sp, #40	; 0x28
 80095e8:	4629      	mov	r1, r5
 80095ea:	4622      	mov	r2, r4
 80095ec:	3008      	adds	r0, #8
 80095ee:	f005 fc09 	bl	800ee04 <GUI_MoveRect>
 80095f2:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 80095f6:	f8d3 901c 	ldr.w	r9, [r3, #28]
 80095fa:	4638      	mov	r0, r7
 80095fc:	f006 fbbe 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009600:	4622      	mov	r2, r4
 8009602:	4648      	mov	r0, r9
 8009604:	4629      	mov	r1, r5
 8009606:	f7ff ff98 	bl	800953a <_MoveDescendents>
 800960a:	4630      	mov	r0, r6
 800960c:	f006 fba8 	bl	800fd60 <GUI_ALLOC_LockH>
 8009610:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009612:	9001      	str	r0, [sp, #4]
 8009614:	0792      	lsls	r2, r2, #30
 8009616:	d50a      	bpl.n	800962e <WM__MoveWindow+0x88>
 8009618:	6981      	ldr	r1, [r0, #24]
 800961a:	b141      	cbz	r1, 800962e <WM__MoveWindow+0x88>
 800961c:	6a02      	ldr	r2, [r0, #32]
 800961e:	f000 fe2c 	bl	800a27a <WM__InvalidateParent>
 8009622:	9b01      	ldr	r3, [sp, #4]
 8009624:	4640      	mov	r0, r8
 8009626:	6999      	ldr	r1, [r3, #24]
 8009628:	6a1a      	ldr	r2, [r3, #32]
 800962a:	f000 fe26 	bl	800a27a <WM__InvalidateParent>
 800962e:	4638      	mov	r0, r7
 8009630:	f006 fba4 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009634:	2303      	movs	r3, #3
 8009636:	9306      	str	r3, [sp, #24]
 8009638:	4630      	mov	r0, r6
 800963a:	ab04      	add	r3, sp, #16
 800963c:	a906      	add	r1, sp, #24
 800963e:	9309      	str	r3, [sp, #36]	; 0x24
 8009640:	9504      	str	r5, [sp, #16]
 8009642:	9405      	str	r4, [sp, #20]
 8009644:	f7ff fd02 	bl	800904c <WM__SendMessage>
 8009648:	b00b      	add	sp, #44	; 0x2c
 800964a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800964e <WM_MoveWindow>:
 800964e:	f7ff bfaa 	b.w	80095a6 <WM__MoveWindow>

08009652 <WM_IsWindow>:
 8009652:	f000 bd13 	b.w	800a07c <WM__IsWindow>

08009656 <WM_IsFocussable>:
 8009656:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009658:	4604      	mov	r4, r0
 800965a:	b908      	cbnz	r0, 8009660 <WM_IsFocussable+0xa>
 800965c:	2000      	movs	r0, #0
 800965e:	e011      	b.n	8009684 <WM_IsFocussable+0x2e>
 8009660:	f006 fb74 	bl	800fd4c <GUI_ALLOC_h2p>
 8009664:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009666:	079a      	lsls	r2, r3, #30
 8009668:	d5f8      	bpl.n	800965c <WM_IsFocussable+0x6>
 800966a:	f013 0310 	ands.w	r3, r3, #16
 800966e:	d1f5      	bne.n	800965c <WM_IsFocussable+0x6>
 8009670:	a904      	add	r1, sp, #16
 8009672:	9303      	str	r3, [sp, #12]
 8009674:	231f      	movs	r3, #31
 8009676:	f841 3d10 	str.w	r3, [r1, #-16]!
 800967a:	4620      	mov	r0, r4
 800967c:	4669      	mov	r1, sp
 800967e:	f000 fe29 	bl	800a2d4 <WM_SendMessage>
 8009682:	9803      	ldr	r0, [sp, #12]
 8009684:	b004      	add	sp, #16
 8009686:	bd10      	pop	{r4, pc}

08009688 <WM_HideWindow>:
 8009688:	b513      	push	{r0, r1, r4, lr}
 800968a:	b188      	cbz	r0, 80096b0 <WM_HideWindow+0x28>
 800968c:	f006 fb68 	bl	800fd60 <GUI_ALLOC_LockH>
 8009690:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009692:	ac02      	add	r4, sp, #8
 8009694:	0791      	lsls	r1, r2, #30
 8009696:	f844 0d04 	str.w	r0, [r4, #-4]!
 800969a:	d506      	bpl.n	80096aa <WM_HideWindow+0x22>
 800969c:	f022 0202 	bic.w	r2, r2, #2
 80096a0:	6282      	str	r2, [r0, #40]	; 0x28
 80096a2:	6981      	ldr	r1, [r0, #24]
 80096a4:	6a02      	ldr	r2, [r0, #32]
 80096a6:	f000 fdfd 	bl	800a2a4 <WM__InvalidateRectEx>
 80096aa:	4620      	mov	r0, r4
 80096ac:	f006 fb66 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80096b0:	b002      	add	sp, #8
 80096b2:	bd10      	pop	{r4, pc}

080096b4 <WM_HasFocus>:
 80096b4:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <WM_HasFocus+0x14>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	4b04      	ldr	r3, [pc, #16]	; (80096cc <WM_HasFocus+0x18>)
 80096ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096be:	1ac3      	subs	r3, r0, r3
 80096c0:	4258      	negs	r0, r3
 80096c2:	4158      	adcs	r0, r3
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	2001d4b4 	.word	0x2001d4b4
 80096cc:	2001d4a4 	.word	0x2001d4a4

080096d0 <WM_GetWindowSizeX>:
 80096d0:	b513      	push	{r0, r1, r4, lr}
 80096d2:	b908      	cbnz	r0, 80096d8 <WM_GetWindowSizeX+0x8>
 80096d4:	f000 ffca 	bl	800a66c <WM_GetActiveWindow>
 80096d8:	f006 fb42 	bl	800fd60 <GUI_ALLOC_LockH>
 80096dc:	ab02      	add	r3, sp, #8
 80096de:	f9b0 2000 	ldrsh.w	r2, [r0]
 80096e2:	f843 0d04 	str.w	r0, [r3, #-4]!
 80096e6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80096ea:	4618      	mov	r0, r3
 80096ec:	1aa4      	subs	r4, r4, r2
 80096ee:	f006 fb45 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80096f2:	3401      	adds	r4, #1
 80096f4:	4620      	mov	r0, r4
 80096f6:	b002      	add	sp, #8
 80096f8:	bd10      	pop	{r4, pc}

080096fa <WM_GetWindowSizeY>:
 80096fa:	b513      	push	{r0, r1, r4, lr}
 80096fc:	b908      	cbnz	r0, 8009702 <WM_GetWindowSizeY+0x8>
 80096fe:	f000 ffb5 	bl	800a66c <WM_GetActiveWindow>
 8009702:	f006 fb2d 	bl	800fd60 <GUI_ALLOC_LockH>
 8009706:	ab02      	add	r3, sp, #8
 8009708:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800970c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009710:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8009714:	4618      	mov	r0, r3
 8009716:	1aa4      	subs	r4, r4, r2
 8009718:	f006 fb30 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800971c:	3401      	adds	r4, #1
 800971e:	4620      	mov	r0, r4
 8009720:	b002      	add	sp, #8
 8009722:	bd10      	pop	{r4, pc}

08009724 <_GetDialogItem>:
 8009724:	b570      	push	{r4, r5, r6, lr}
 8009726:	4606      	mov	r6, r0
 8009728:	460d      	mov	r5, r1
 800972a:	f006 fb0f 	bl	800fd4c <GUI_ALLOC_h2p>
 800972e:	69c4      	ldr	r4, [r0, #28]
 8009730:	b14c      	cbz	r4, 8009746 <_GetDialogItem+0x22>
 8009732:	4620      	mov	r0, r4
 8009734:	f000 f894 	bl	8009860 <WM_GetId>
 8009738:	42a8      	cmp	r0, r5
 800973a:	4620      	mov	r0, r4
 800973c:	d013      	beq.n	8009766 <_GetDialogItem+0x42>
 800973e:	f006 fb05 	bl	800fd4c <GUI_ALLOC_h2p>
 8009742:	6a04      	ldr	r4, [r0, #32]
 8009744:	e7f4      	b.n	8009730 <_GetDialogItem+0xc>
 8009746:	4630      	mov	r0, r6
 8009748:	f006 fb00 	bl	800fd4c <GUI_ALLOC_h2p>
 800974c:	69c4      	ldr	r4, [r0, #28]
 800974e:	4620      	mov	r0, r4
 8009750:	b144      	cbz	r4, 8009764 <_GetDialogItem+0x40>
 8009752:	4629      	mov	r1, r5
 8009754:	f7ff ffe6 	bl	8009724 <_GetDialogItem>
 8009758:	b928      	cbnz	r0, 8009766 <_GetDialogItem+0x42>
 800975a:	4620      	mov	r0, r4
 800975c:	f006 faf6 	bl	800fd4c <GUI_ALLOC_h2p>
 8009760:	6a04      	ldr	r4, [r0, #32]
 8009762:	e7f4      	b.n	800974e <_GetDialogItem+0x2a>
 8009764:	bd70      	pop	{r4, r5, r6, pc}
 8009766:	bd70      	pop	{r4, r5, r6, pc}

08009768 <WM_GetScrollbarH>:
 8009768:	b110      	cbz	r0, 8009770 <WM_GetScrollbarH+0x8>
 800976a:	21ff      	movs	r1, #255	; 0xff
 800976c:	f7ff bfda 	b.w	8009724 <_GetDialogItem>
 8009770:	4770      	bx	lr

08009772 <WM_GetScrollbarV>:
 8009772:	b110      	cbz	r0, 800977a <WM_GetScrollbarV+0x8>
 8009774:	21fe      	movs	r1, #254	; 0xfe
 8009776:	f7ff bfd5 	b.w	8009724 <_GetDialogItem>
 800977a:	4770      	bx	lr

0800977c <WM_GetScrollState>:
 800977c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800977e:	2323      	movs	r3, #35	; 0x23
 8009780:	9103      	str	r1, [sp, #12]
 8009782:	4669      	mov	r1, sp
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	f000 fda5 	bl	800a2d4 <WM_SendMessage>
 800978a:	b005      	add	sp, #20
 800978c:	f85d fb04 	ldr.w	pc, [sp], #4

08009790 <WM_GetParent>:
 8009790:	b508      	push	{r3, lr}
 8009792:	4603      	mov	r3, r0
 8009794:	b110      	cbz	r0, 800979c <WM_GetParent+0xc>
 8009796:	f006 fad9 	bl	800fd4c <GUI_ALLOC_h2p>
 800979a:	6983      	ldr	r3, [r0, #24]
 800979c:	4618      	mov	r0, r3
 800979e:	bd08      	pop	{r3, pc}

080097a0 <WM_GetInsideRectExScrollbar>:
 80097a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097a2:	460c      	mov	r4, r1
 80097a4:	b087      	sub	sp, #28
 80097a6:	4606      	mov	r6, r0
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d04b      	beq.n	8009844 <WM_GetInsideRectExScrollbar+0xa4>
 80097ac:	2900      	cmp	r1, #0
 80097ae:	d049      	beq.n	8009844 <WM_GetInsideRectExScrollbar+0xa4>
 80097b0:	21ff      	movs	r1, #255	; 0xff
 80097b2:	f000 f89b 	bl	80098ec <WM_GetDialogItem>
 80097b6:	21fe      	movs	r1, #254	; 0xfe
 80097b8:	4605      	mov	r5, r0
 80097ba:	4630      	mov	r0, r6
 80097bc:	f000 f896 	bl	80098ec <WM_GetDialogItem>
 80097c0:	4669      	mov	r1, sp
 80097c2:	4607      	mov	r7, r0
 80097c4:	4630      	mov	r0, r6
 80097c6:	f008 f8eb 	bl	80119a0 <WM_GetWindowRectEx>
 80097ca:	4630      	mov	r0, r6
 80097cc:	a902      	add	r1, sp, #8
 80097ce:	f000 f83b 	bl	8009848 <WM_GetInsideRectEx>
 80097d2:	b1c7      	cbz	r7, 8009806 <WM_GetInsideRectExScrollbar+0x66>
 80097d4:	4638      	mov	r0, r7
 80097d6:	a904      	add	r1, sp, #16
 80097d8:	f008 f8e2 	bl	80119a0 <WM_GetWindowRectEx>
 80097dc:	f9bd 1000 	ldrsh.w	r1, [sp]
 80097e0:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80097e4:	a804      	add	r0, sp, #16
 80097e6:	4249      	negs	r1, r1
 80097e8:	4252      	negs	r2, r2
 80097ea:	f005 fb0b 	bl	800ee04 <GUI_MoveRect>
 80097ee:	4638      	mov	r0, r7
 80097f0:	f000 f850 	bl	8009894 <WM_GetFlags>
 80097f4:	f000 0082 	and.w	r0, r0, #130	; 0x82
 80097f8:	2882      	cmp	r0, #130	; 0x82
 80097fa:	d104      	bne.n	8009806 <WM_GetInsideRectExScrollbar+0x66>
 80097fc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8009800:	3b01      	subs	r3, #1
 8009802:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009806:	b1cd      	cbz	r5, 800983c <WM_GetInsideRectExScrollbar+0x9c>
 8009808:	4628      	mov	r0, r5
 800980a:	a904      	add	r1, sp, #16
 800980c:	f008 f8c8 	bl	80119a0 <WM_GetWindowRectEx>
 8009810:	f9bd 1000 	ldrsh.w	r1, [sp]
 8009814:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8009818:	a804      	add	r0, sp, #16
 800981a:	4249      	negs	r1, r1
 800981c:	4252      	negs	r2, r2
 800981e:	f005 faf1 	bl	800ee04 <GUI_MoveRect>
 8009822:	4628      	mov	r0, r5
 8009824:	f000 f836 	bl	8009894 <WM_GetFlags>
 8009828:	f400 7081 	and.w	r0, r0, #258	; 0x102
 800982c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8009830:	d104      	bne.n	800983c <WM_GetInsideRectExScrollbar+0x9c>
 8009832:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009836:	3b01      	subs	r3, #1
 8009838:	f8ad 300e 	strh.w	r3, [sp, #14]
 800983c:	ab02      	add	r3, sp, #8
 800983e:	cb03      	ldmia	r3!, {r0, r1}
 8009840:	6020      	str	r0, [r4, #0]
 8009842:	6061      	str	r1, [r4, #4]
 8009844:	b007      	add	sp, #28
 8009846:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009848 <WM_GetInsideRectEx>:
 8009848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800984a:	9103      	str	r1, [sp, #12]
 800984c:	a904      	add	r1, sp, #16
 800984e:	2314      	movs	r3, #20
 8009850:	f841 3d10 	str.w	r3, [r1, #-16]!
 8009854:	4669      	mov	r1, sp
 8009856:	f000 fd3d 	bl	800a2d4 <WM_SendMessage>
 800985a:	b005      	add	sp, #20
 800985c:	f85d fb04 	ldr.w	pc, [sp], #4

08009860 <WM_GetId>:
 8009860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009862:	4604      	mov	r4, r0
 8009864:	2210      	movs	r2, #16
 8009866:	4668      	mov	r0, sp
 8009868:	2100      	movs	r1, #0
 800986a:	f00d f82d 	bl	80168c8 <memset>
 800986e:	2315      	movs	r3, #21
 8009870:	4620      	mov	r0, r4
 8009872:	4669      	mov	r1, sp
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	f000 fd2d 	bl	800a2d4 <WM_SendMessage>
 800987a:	9803      	ldr	r0, [sp, #12]
 800987c:	b004      	add	sp, #16
 800987e:	bd10      	pop	{r4, pc}

08009880 <WM_GetFocussedWindow>:
 8009880:	4b02      	ldr	r3, [pc, #8]	; (800988c <WM_GetFocussedWindow+0xc>)
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	4b02      	ldr	r3, [pc, #8]	; (8009890 <WM_GetFocussedWindow+0x10>)
 8009886:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800988a:	4770      	bx	lr
 800988c:	2001d4b4 	.word	0x2001d4b4
 8009890:	2001d4a4 	.word	0x2001d4a4

08009894 <WM_GetFlags>:
 8009894:	b508      	push	{r3, lr}
 8009896:	b118      	cbz	r0, 80098a0 <WM_GetFlags+0xc>
 8009898:	f006 fa58 	bl	800fd4c <GUI_ALLOC_h2p>
 800989c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 800989e:	bd08      	pop	{r3, pc}
 80098a0:	bd08      	pop	{r3, pc}

080098a2 <WM_GetFirstChild>:
 80098a2:	b508      	push	{r3, lr}
 80098a4:	4603      	mov	r3, r0
 80098a6:	b110      	cbz	r0, 80098ae <WM_GetFirstChild+0xc>
 80098a8:	f006 fa50 	bl	800fd4c <GUI_ALLOC_h2p>
 80098ac:	69c3      	ldr	r3, [r0, #28]
 80098ae:	4618      	mov	r0, r3
 80098b0:	bd08      	pop	{r3, pc}

080098b2 <_GetDialogItem>:
 80098b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098b4:	460d      	mov	r5, r1
 80098b6:	f006 fa53 	bl	800fd60 <GUI_ALLOC_LockH>
 80098ba:	ab02      	add	r3, sp, #8
 80098bc:	69c4      	ldr	r4, [r0, #28]
 80098be:	f843 0d04 	str.w	r0, [r3, #-4]!
 80098c2:	4618      	mov	r0, r3
 80098c4:	f006 fa5a 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80098c8:	4620      	mov	r0, r4
 80098ca:	b16c      	cbz	r4, 80098e8 <_GetDialogItem+0x36>
 80098cc:	f7ff ffc8 	bl	8009860 <WM_GetId>
 80098d0:	42a8      	cmp	r0, r5
 80098d2:	4620      	mov	r0, r4
 80098d4:	d008      	beq.n	80098e8 <_GetDialogItem+0x36>
 80098d6:	4629      	mov	r1, r5
 80098d8:	f7ff ffeb 	bl	80098b2 <_GetDialogItem>
 80098dc:	b920      	cbnz	r0, 80098e8 <_GetDialogItem+0x36>
 80098de:	4620      	mov	r0, r4
 80098e0:	f006 fa34 	bl	800fd4c <GUI_ALLOC_h2p>
 80098e4:	6a04      	ldr	r4, [r0, #32]
 80098e6:	e7ef      	b.n	80098c8 <_GetDialogItem+0x16>
 80098e8:	b003      	add	sp, #12
 80098ea:	bd30      	pop	{r4, r5, pc}

080098ec <WM_GetDialogItem>:
 80098ec:	b108      	cbz	r0, 80098f2 <WM_GetDialogItem+0x6>
 80098ee:	f7ff bfe0 	b.w	80098b2 <_GetDialogItem>
 80098f2:	4770      	bx	lr

080098f4 <WM_GetDesktopWindow>:
 80098f4:	4b03      	ldr	r3, [pc, #12]	; (8009904 <WM_GetDesktopWindow+0x10>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	7c5a      	ldrb	r2, [r3, #17]
 80098fa:	4b03      	ldr	r3, [pc, #12]	; (8009908 <WM_GetDesktopWindow+0x14>)
 80098fc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	200000d8 	.word	0x200000d8
 8009908:	2001d494 	.word	0x2001d494

0800990c <WM_GetClientWindow>:
 800990c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800990e:	2300      	movs	r3, #0
 8009910:	a904      	add	r1, sp, #16
 8009912:	9303      	str	r3, [sp, #12]
 8009914:	2317      	movs	r3, #23
 8009916:	f841 3d10 	str.w	r3, [r1, #-16]!
 800991a:	4669      	mov	r1, sp
 800991c:	f000 fcda 	bl	800a2d4 <WM_SendMessage>
 8009920:	9803      	ldr	r0, [sp, #12]
 8009922:	b005      	add	sp, #20
 8009924:	f85d fb04 	ldr.w	pc, [sp], #4

08009928 <WM__GetClientRectEx>:
 8009928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800992a:	460d      	mov	r5, r1
 800992c:	b158      	cbz	r0, 8009946 <WM__GetClientRectEx+0x1e>
 800992e:	b151      	cbz	r1, 8009946 <WM__GetClientRectEx+0x1e>
 8009930:	f006 fa16 	bl	800fd60 <GUI_ALLOC_LockH>
 8009934:	ac02      	add	r4, sp, #8
 8009936:	4629      	mov	r1, r5
 8009938:	f844 0d04 	str.w	r0, [r4, #-4]!
 800993c:	f000 fcd9 	bl	800a2f2 <WM__GetClientRectWin>
 8009940:	4620      	mov	r0, r4
 8009942:	f006 fa1b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009946:	b003      	add	sp, #12
 8009948:	bd30      	pop	{r4, r5, pc}

0800994a <WM_GetClientRectEx>:
 800994a:	f7ff bfed 	b.w	8009928 <WM__GetClientRectEx>
	...

08009950 <WM_GetClientRect>:
 8009950:	4b04      	ldr	r3, [pc, #16]	; (8009964 <WM_GetClientRect+0x14>)
 8009952:	4601      	mov	r1, r0
 8009954:	6818      	ldr	r0, [r3, #0]
 8009956:	b910      	cbnz	r0, 800995e <WM_GetClientRect+0xe>
 8009958:	4b03      	ldr	r3, [pc, #12]	; (8009968 <WM_GetClientRect+0x18>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800995e:	f7ff bfe3 	b.w	8009928 <WM__GetClientRectEx>
 8009962:	bf00      	nop
 8009964:	2001d490 	.word	0x2001d490
 8009968:	200000d8 	.word	0x200000d8

0800996c <WM_CheckScrollBounds>:
 800996c:	6802      	ldr	r2, [r0, #0]
 800996e:	6883      	ldr	r3, [r0, #8]
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	6842      	ldr	r2, [r0, #4]
 8009974:	2a00      	cmp	r2, #0
 8009976:	bfbc      	itt	lt
 8009978:	2200      	movlt	r2, #0
 800997a:	6042      	strlt	r2, [r0, #4]
 800997c:	6842      	ldr	r2, [r0, #4]
 800997e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009982:	429a      	cmp	r2, r3
 8009984:	bfc8      	it	gt
 8009986:	6043      	strgt	r3, [r0, #4]
 8009988:	4770      	bx	lr

0800998a <WM_CheckScrollPos>:
 800998a:	b570      	push	{r4, r5, r6, lr}
 800998c:	6845      	ldr	r5, [r0, #4]
 800998e:	4604      	mov	r4, r0
 8009990:	6880      	ldr	r0, [r0, #8]
 8009992:	182e      	adds	r6, r5, r0
 8009994:	428e      	cmp	r6, r1
 8009996:	dc04      	bgt.n	80099a2 <WM_CheckScrollPos+0x18>
 8009998:	f1c0 0001 	rsb	r0, r0, #1
 800999c:	4408      	add	r0, r1
 800999e:	4403      	add	r3, r0
 80099a0:	6063      	str	r3, [r4, #4]
 80099a2:	6863      	ldr	r3, [r4, #4]
 80099a4:	4299      	cmp	r1, r3
 80099a6:	bfb8      	it	lt
 80099a8:	ebc2 0101 	rsblt	r1, r2, r1
 80099ac:	4620      	mov	r0, r4
 80099ae:	bfb8      	it	lt
 80099b0:	6061      	strlt	r1, [r4, #4]
 80099b2:	f7ff ffdb 	bl	800996c <WM_CheckScrollBounds>
 80099b6:	6860      	ldr	r0, [r4, #4]
 80099b8:	1b40      	subs	r0, r0, r5
 80099ba:	bd70      	pop	{r4, r5, r6, pc}

080099bc <WM_SetScrollValue>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4604      	mov	r4, r0
 80099c0:	6845      	ldr	r5, [r0, #4]
 80099c2:	6041      	str	r1, [r0, #4]
 80099c4:	f7ff ffd2 	bl	800996c <WM_CheckScrollBounds>
 80099c8:	6860      	ldr	r0, [r4, #4]
 80099ca:	1b40      	subs	r0, r0, r5
 80099cc:	bd38      	pop	{r3, r4, r5, pc}

080099ce <_cbInvalidateOne>:
 80099ce:	f000 bcd8 	b.w	800a382 <WM_InvalidateWindow>
	...

080099d4 <WM_BringToTop>:
 80099d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099d6:	4605      	mov	r5, r0
 80099d8:	2800      	cmp	r0, #0
 80099da:	d032      	beq.n	8009a42 <WM_BringToTop+0x6e>
 80099dc:	f006 f9c0 	bl	800fd60 <GUI_ALLOC_LockH>
 80099e0:	ac02      	add	r4, sp, #8
 80099e2:	4603      	mov	r3, r0
 80099e4:	f844 0d08 	str.w	r0, [r4, #-8]!
 80099e8:	6a00      	ldr	r0, [r0, #32]
 80099ea:	b908      	cbnz	r0, 80099f0 <WM_BringToTop+0x1c>
 80099ec:	4668      	mov	r0, sp
 80099ee:	e00e      	b.n	8009a0e <WM_BringToTop+0x3a>
 80099f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f2:	071a      	lsls	r2, r3, #28
 80099f4:	d411      	bmi.n	8009a1a <WM_BringToTop+0x46>
 80099f6:	f006 f9b3 	bl	800fd60 <GUI_ALLOC_LockH>
 80099fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80099fc:	ae02      	add	r6, sp, #8
 80099fe:	071b      	lsls	r3, r3, #28
 8009a00:	f846 0d04 	str.w	r0, [r6, #-4]!
 8009a04:	d506      	bpl.n	8009a14 <WM_BringToTop+0x40>
 8009a06:	4668      	mov	r0, sp
 8009a08:	f006 f9b8 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	f006 f9b5 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009a12:	e016      	b.n	8009a42 <WM_BringToTop+0x6e>
 8009a14:	4630      	mov	r0, r6
 8009a16:	f006 f9b1 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009a1a:	9b00      	ldr	r3, [sp, #0]
 8009a1c:	4668      	mov	r0, sp
 8009a1e:	699e      	ldr	r6, [r3, #24]
 8009a20:	f006 f9ac 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009a24:	4628      	mov	r0, r5
 8009a26:	f000 fab7 	bl	8009f98 <WM__RemoveWindowFromList>
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	f000 fa61 	bl	8009ef4 <WM__InsertWindowIntoList>
 8009a32:	4628      	mov	r0, r5
 8009a34:	f000 fca5 	bl	800a382 <WM_InvalidateWindow>
 8009a38:	4628      	mov	r0, r5
 8009a3a:	4903      	ldr	r1, [pc, #12]	; (8009a48 <WM_BringToTop+0x74>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f007 ffe1 	bl	8011a04 <WM_ForEachDesc>
 8009a42:	b002      	add	sp, #8
 8009a44:	bd70      	pop	{r4, r5, r6, pc}
 8009a46:	bf00      	nop
 8009a48:	080099cf 	.word	0x080099cf

08009a4c <_OnExit>:
 8009a4c:	4a0a      	ldr	r2, [pc, #40]	; (8009a78 <_OnExit+0x2c>)
 8009a4e:	490b      	ldr	r1, [pc, #44]	; (8009a7c <_OnExit+0x30>)
 8009a50:	2300      	movs	r3, #0
 8009a52:	7013      	strb	r3, [r2, #0]
 8009a54:	4a0a      	ldr	r2, [pc, #40]	; (8009a80 <_OnExit+0x34>)
 8009a56:	600b      	str	r3, [r1, #0]
 8009a58:	6013      	str	r3, [r2, #0]
 8009a5a:	4a0a      	ldr	r2, [pc, #40]	; (8009a84 <_OnExit+0x38>)
 8009a5c:	604b      	str	r3, [r1, #4]
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	4a09      	ldr	r2, [pc, #36]	; (8009a88 <_OnExit+0x3c>)
 8009a62:	6013      	str	r3, [r2, #0]
 8009a64:	6053      	str	r3, [r2, #4]
 8009a66:	4a09      	ldr	r2, [pc, #36]	; (8009a8c <_OnExit+0x40>)
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	4a09      	ldr	r2, [pc, #36]	; (8009a90 <_OnExit+0x44>)
 8009a6c:	6013      	str	r3, [r2, #0]
 8009a6e:	4a09      	ldr	r2, [pc, #36]	; (8009a94 <_OnExit+0x48>)
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	4a09      	ldr	r2, [pc, #36]	; (8009a98 <_OnExit+0x4c>)
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	4770      	bx	lr
 8009a78:	2001d074 	.word	0x2001d074
 8009a7c:	2001d4a4 	.word	0x2001d4a4
 8009a80:	2001d04c 	.word	0x2001d04c
 8009a84:	2001d4c8 	.word	0x2001d4c8
 8009a88:	2001d4d0 	.word	0x2001d4d0
 8009a8c:	2001d4dc 	.word	0x2001d4dc
 8009a90:	2001d490 	.word	0x2001d490
 8009a94:	2001d4bc 	.word	0x2001d4bc
 8009a98:	2001d4cc 	.word	0x2001d4cc

08009a9c <_Paint1>:
 8009a9c:	b510      	push	{r4, lr}
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	f006 f954 	bl	800fd4c <GUI_ALLOC_h2p>
 8009aa4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009aa6:	4a04      	ldr	r2, [pc, #16]	; (8009ab8 <_Paint1+0x1c>)
 8009aa8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009aac:	4b03      	ldr	r3, [pc, #12]	; (8009abc <_Paint1+0x20>)
 8009aae:	4620      	mov	r0, r4
 8009ab0:	bf08      	it	eq
 8009ab2:	4613      	moveq	r3, r2
 8009ab4:	4798      	blx	r3
 8009ab6:	bd10      	pop	{r4, pc}
 8009ab8:	0800a90d 	.word	0x0800a90d
 8009abc:	0800aef9 	.word	0x0800aef9

08009ac0 <_Findy1>:
 8009ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	b085      	sub	sp, #20
 8009ac6:	460c      	mov	r4, r1
 8009ac8:	4616      	mov	r6, r2
 8009aca:	2d00      	cmp	r5, #0
 8009acc:	d04c      	beq.n	8009b68 <_Findy1+0xa8>
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f006 f946 	bl	800fd60 <GUI_ALLOC_LockH>
 8009ad4:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8009ad6:	9001      	str	r0, [sp, #4]
 8009ad8:	07bb      	lsls	r3, r7, #30
 8009ada:	4601      	mov	r1, r0
 8009adc:	d53d      	bpl.n	8009b5a <_Findy1+0x9a>
 8009ade:	ad02      	add	r5, sp, #8
 8009ae0:	b126      	cbz	r6, 8009aec <_Findy1+0x2c>
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	4632      	mov	r2, r6
 8009ae6:	f004 f875 	bl	800dbd4 <GUI__IntersectRects>
 8009aea:	e002      	b.n	8009af2 <_Findy1+0x32>
 8009aec:	c803      	ldmia	r0, {r0, r1}
 8009aee:	e885 0003 	stmia.w	r5, {r0, r1}
 8009af2:	4620      	mov	r0, r4
 8009af4:	4629      	mov	r1, r5
 8009af6:	f005 f881 	bl	800ebfc <GUI_RectsIntersect>
 8009afa:	b370      	cbz	r0, 8009b5a <_Findy1+0x9a>
 8009afc:	f017 0f01 	tst.w	r7, #1
 8009b00:	9b01      	ldr	r3, [sp, #4]
 8009b02:	d11e      	bne.n	8009b42 <_Findy1+0x82>
 8009b04:	b13e      	cbz	r6, 8009b16 <_Findy1+0x56>
 8009b06:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009b0a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	bfa8      	it	ge
 8009b12:	4613      	movge	r3, r2
 8009b14:	e001      	b.n	8009b1a <_Findy1+0x5a>
 8009b16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009b1a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8009b24:	dd06      	ble.n	8009b34 <_Findy1+0x74>
 8009b26:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8009b2a:	b219      	sxth	r1, r3
 8009b2c:	428a      	cmp	r2, r1
 8009b2e:	db14      	blt.n	8009b5a <_Findy1+0x9a>
 8009b30:	3b01      	subs	r3, #1
 8009b32:	e004      	b.n	8009b3e <_Findy1+0x7e>
 8009b34:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009b38:	b219      	sxth	r1, r3
 8009b3a:	428a      	cmp	r2, r1
 8009b3c:	dd0d      	ble.n	8009b5a <_Findy1+0x9a>
 8009b3e:	80e3      	strh	r3, [r4, #6]
 8009b40:	e00b      	b.n	8009b5a <_Findy1+0x9a>
 8009b42:	69df      	ldr	r7, [r3, #28]
 8009b44:	b14f      	cbz	r7, 8009b5a <_Findy1+0x9a>
 8009b46:	4638      	mov	r0, r7
 8009b48:	4621      	mov	r1, r4
 8009b4a:	462a      	mov	r2, r5
 8009b4c:	f7ff ffb8 	bl	8009ac0 <_Findy1>
 8009b50:	4638      	mov	r0, r7
 8009b52:	f006 f8fb 	bl	800fd4c <GUI_ALLOC_h2p>
 8009b56:	6a07      	ldr	r7, [r0, #32]
 8009b58:	e7f4      	b.n	8009b44 <_Findy1+0x84>
 8009b5a:	a804      	add	r0, sp, #16
 8009b5c:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8009b60:	6a1d      	ldr	r5, [r3, #32]
 8009b62:	f006 f90b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009b66:	e7b0      	b.n	8009aca <_Findy1+0xa>
 8009b68:	b005      	add	sp, #20
 8009b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b6c <_Findx0>:
 8009b6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009b70:	4604      	mov	r4, r0
 8009b72:	460f      	mov	r7, r1
 8009b74:	4690      	mov	r8, r2
 8009b76:	2500      	movs	r5, #0
 8009b78:	2c00      	cmp	r4, #0
 8009b7a:	d037      	beq.n	8009bec <_Findx0+0x80>
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f006 f8ef 	bl	800fd60 <GUI_ALLOC_LockH>
 8009b82:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009b84:	9001      	str	r0, [sp, #4]
 8009b86:	07b2      	lsls	r2, r6, #30
 8009b88:	4601      	mov	r1, r0
 8009b8a:	d528      	bpl.n	8009bde <_Findx0+0x72>
 8009b8c:	ac02      	add	r4, sp, #8
 8009b8e:	f1b8 0f00 	cmp.w	r8, #0
 8009b92:	d004      	beq.n	8009b9e <_Findx0+0x32>
 8009b94:	4620      	mov	r0, r4
 8009b96:	4642      	mov	r2, r8
 8009b98:	f004 f81c 	bl	800dbd4 <GUI__IntersectRects>
 8009b9c:	e002      	b.n	8009ba4 <_Findx0+0x38>
 8009b9e:	c803      	ldmia	r0, {r0, r1}
 8009ba0:	e884 0003 	stmia.w	r4, {r0, r1}
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	f005 f828 	bl	800ebfc <GUI_RectsIntersect>
 8009bac:	b1b8      	cbz	r0, 8009bde <_Findx0+0x72>
 8009bae:	07f3      	lsls	r3, r6, #31
 8009bb0:	d405      	bmi.n	8009bbe <_Findx0+0x52>
 8009bb2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	803b      	strh	r3, [r7, #0]
 8009bba:	2501      	movs	r5, #1
 8009bbc:	e00f      	b.n	8009bde <_Findx0+0x72>
 8009bbe:	9b01      	ldr	r3, [sp, #4]
 8009bc0:	69de      	ldr	r6, [r3, #28]
 8009bc2:	b166      	cbz	r6, 8009bde <_Findx0+0x72>
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	4622      	mov	r2, r4
 8009bca:	f7ff ffcf 	bl	8009b6c <_Findx0>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	bf18      	it	ne
 8009bd4:	2501      	movne	r5, #1
 8009bd6:	f006 f8b9 	bl	800fd4c <GUI_ALLOC_h2p>
 8009bda:	6a06      	ldr	r6, [r0, #32]
 8009bdc:	e7f1      	b.n	8009bc2 <_Findx0+0x56>
 8009bde:	a804      	add	r0, sp, #16
 8009be0:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8009be4:	6a1c      	ldr	r4, [r3, #32]
 8009be6:	f006 f8c9 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009bea:	e7c5      	b.n	8009b78 <_Findx0+0xc>
 8009bec:	4628      	mov	r0, r5
 8009bee:	b004      	add	sp, #16
 8009bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009bf4 <_Findx1>:
 8009bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	b085      	sub	sp, #20
 8009bfa:	460e      	mov	r6, r1
 8009bfc:	4617      	mov	r7, r2
 8009bfe:	2c00      	cmp	r4, #0
 8009c00:	d031      	beq.n	8009c66 <_Findx1+0x72>
 8009c02:	4620      	mov	r0, r4
 8009c04:	f006 f8ac 	bl	800fd60 <GUI_ALLOC_LockH>
 8009c08:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8009c0a:	9001      	str	r0, [sp, #4]
 8009c0c:	07aa      	lsls	r2, r5, #30
 8009c0e:	4601      	mov	r1, r0
 8009c10:	d522      	bpl.n	8009c58 <_Findx1+0x64>
 8009c12:	ac02      	add	r4, sp, #8
 8009c14:	b127      	cbz	r7, 8009c20 <_Findx1+0x2c>
 8009c16:	4620      	mov	r0, r4
 8009c18:	463a      	mov	r2, r7
 8009c1a:	f003 ffdb 	bl	800dbd4 <GUI__IntersectRects>
 8009c1e:	e002      	b.n	8009c26 <_Findx1+0x32>
 8009c20:	c803      	ldmia	r0, {r0, r1}
 8009c22:	e884 0003 	stmia.w	r4, {r0, r1}
 8009c26:	4630      	mov	r0, r6
 8009c28:	4621      	mov	r1, r4
 8009c2a:	f004 ffe7 	bl	800ebfc <GUI_RectsIntersect>
 8009c2e:	b198      	cbz	r0, 8009c58 <_Findx1+0x64>
 8009c30:	07eb      	lsls	r3, r5, #31
 8009c32:	d404      	bmi.n	8009c3e <_Findx1+0x4a>
 8009c34:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	80b3      	strh	r3, [r6, #4]
 8009c3c:	e00c      	b.n	8009c58 <_Findx1+0x64>
 8009c3e:	9b01      	ldr	r3, [sp, #4]
 8009c40:	69dd      	ldr	r5, [r3, #28]
 8009c42:	b14d      	cbz	r5, 8009c58 <_Findx1+0x64>
 8009c44:	4628      	mov	r0, r5
 8009c46:	4631      	mov	r1, r6
 8009c48:	4622      	mov	r2, r4
 8009c4a:	f7ff ffd3 	bl	8009bf4 <_Findx1>
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f006 f87c 	bl	800fd4c <GUI_ALLOC_h2p>
 8009c54:	6a05      	ldr	r5, [r0, #32]
 8009c56:	e7f4      	b.n	8009c42 <_Findx1+0x4e>
 8009c58:	a804      	add	r0, sp, #16
 8009c5a:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8009c5e:	6a1c      	ldr	r4, [r3, #32]
 8009c60:	f006 f88c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009c64:	e7cb      	b.n	8009bfe <_Findx1+0xa>
 8009c66:	b005      	add	sp, #20
 8009c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009c6c <_Paint1Trans>:
 8009c6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009c70:	4d21      	ldr	r5, [pc, #132]	; (8009cf8 <_Paint1Trans+0x8c>)
 8009c72:	682b      	ldr	r3, [r5, #0]
 8009c74:	4606      	mov	r6, r0
 8009c76:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009c78:	f006 f872 	bl	800fd60 <GUI_ALLOC_LockH>
 8009c7c:	9000      	str	r0, [sp, #0]
 8009c7e:	4630      	mov	r0, r6
 8009c80:	f006 f86e 	bl	800fd60 <GUI_ALLOC_LockH>
 8009c84:	ac02      	add	r4, sp, #8
 8009c86:	4601      	mov	r1, r0
 8009c88:	9001      	str	r0, [sp, #4]
 8009c8a:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 8009c8e:	3008      	adds	r0, #8
 8009c90:	f004 ffb4 	bl	800ebfc <GUI_RectsIntersect>
 8009c94:	4607      	mov	r7, r0
 8009c96:	b328      	cbz	r0, 8009ce4 <_Paint1Trans+0x78>
 8009c98:	9901      	ldr	r1, [sp, #4]
 8009c9a:	9a00      	ldr	r2, [sp, #0]
 8009c9c:	682b      	ldr	r3, [r5, #0]
 8009c9e:	4c17      	ldr	r4, [pc, #92]	; (8009cfc <_Paint1Trans+0x90>)
 8009ca0:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8009ca2:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 8009ca6:	f101 0008 	add.w	r0, r1, #8
 8009caa:	3208      	adds	r2, #8
 8009cac:	f003 ff92 	bl	800dbd4 <GUI__IntersectRects>
 8009cb0:	4668      	mov	r0, sp
 8009cb2:	f006 f863 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009cb6:	9a01      	ldr	r2, [sp, #4]
 8009cb8:	682b      	ldr	r3, [r5, #0]
 8009cba:	f9b2 1000 	ldrsh.w	r1, [r2]
 8009cbe:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009cc2:	64d9      	str	r1, [r3, #76]	; 0x4c
 8009cc4:	651a      	str	r2, [r3, #80]	; 0x50
 8009cc6:	a801      	add	r0, sp, #4
 8009cc8:	6026      	str	r6, [r4, #0]
 8009cca:	f006 f857 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f7ff fee4 	bl	8009a9c <_Paint1>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	6023      	str	r3, [r4, #0]
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	651f      	str	r7, [r3, #80]	; 0x50
 8009cdc:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 8009ce0:	2701      	movs	r7, #1
 8009ce2:	e005      	b.n	8009cf0 <_Paint1Trans+0x84>
 8009ce4:	4668      	mov	r0, sp
 8009ce6:	f006 f849 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009cea:	a801      	add	r0, sp, #4
 8009cec:	f006 f846 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	b002      	add	sp, #8
 8009cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf8:	200000d8 	.word	0x200000d8
 8009cfc:	2001d490 	.word	0x2001d490

08009d00 <_PaintTransChildren>:
 8009d00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d04:	4606      	mov	r6, r0
 8009d06:	f006 f82b 	bl	800fd60 <GUI_ALLOC_LockH>
 8009d0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009d0c:	9001      	str	r0, [sp, #4]
 8009d0e:	079b      	lsls	r3, r3, #30
 8009d10:	d405      	bmi.n	8009d1e <_PaintTransChildren+0x1e>
 8009d12:	a801      	add	r0, sp, #4
 8009d14:	f006 f832 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009d18:	b002      	add	sp, #8
 8009d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1e:	69c4      	ldr	r4, [r0, #28]
 8009d20:	2c00      	cmp	r4, #0
 8009d22:	d0f6      	beq.n	8009d12 <_PaintTransChildren+0x12>
 8009d24:	4620      	mov	r0, r4
 8009d26:	f006 f81b 	bl	800fd60 <GUI_ALLOC_LockH>
 8009d2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009d2c:	ad02      	add	r5, sp, #8
 8009d2e:	f003 0303 	and.w	r3, r3, #3
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	f845 0d08 	str.w	r0, [r5, #-8]!
 8009d38:	d137      	bne.n	8009daa <_PaintTransChildren+0xaa>
 8009d3a:	9901      	ldr	r1, [sp, #4]
 8009d3c:	3108      	adds	r1, #8
 8009d3e:	f004 ff5d 	bl	800ebfc <GUI_RectsIntersect>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d031      	beq.n	8009daa <_PaintTransChildren+0xaa>
 8009d46:	a802      	add	r0, sp, #8
 8009d48:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8009d4c:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 8009d50:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8009d54:	899f      	ldrh	r7, [r3, #12]
 8009d56:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 8009d5a:	f006 f80f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009d5e:	4668      	mov	r0, sp
 8009d60:	f006 f80c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009d64:	4620      	mov	r0, r4
 8009d66:	f7ff ff81 	bl	8009c6c <_Paint1Trans>
 8009d6a:	b170      	cbz	r0, 8009d8a <_PaintTransChildren+0x8a>
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f005 ffed 	bl	800fd4c <GUI_ALLOC_h2p>
 8009d72:	9000      	str	r0, [sp, #0]
 8009d74:	4620      	mov	r0, r4
 8009d76:	f7ff ffc3 	bl	8009d00 <_PaintTransChildren>
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f005 ffe6 	bl	800fd4c <GUI_ALLOC_h2p>
 8009d80:	9000      	str	r0, [sp, #0]
 8009d82:	4630      	mov	r0, r6
 8009d84:	f005 ffe2 	bl	800fd4c <GUI_ALLOC_h2p>
 8009d88:	9001      	str	r0, [sp, #4]
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f005 ffe8 	bl	800fd60 <GUI_ALLOC_LockH>
 8009d90:	9001      	str	r0, [sp, #4]
 8009d92:	4620      	mov	r0, r4
 8009d94:	f005 ffe4 	bl	800fd60 <GUI_ALLOC_LockH>
 8009d98:	9b01      	ldr	r3, [sp, #4]
 8009d9a:	9000      	str	r0, [sp, #0]
 8009d9c:	f8a3 9008 	strh.w	r9, [r3, #8]
 8009da0:	f8a3 800a 	strh.w	r8, [r3, #10]
 8009da4:	819f      	strh	r7, [r3, #12]
 8009da6:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8009daa:	9b00      	ldr	r3, [sp, #0]
 8009dac:	4668      	mov	r0, sp
 8009dae:	6a1c      	ldr	r4, [r3, #32]
 8009db0:	f005 ffe4 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009db4:	e7b4      	b.n	8009d20 <_PaintTransChildren+0x20>
	...

08009db8 <WM__PaintWinAndOverlays>:
 8009db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dba:	4604      	mov	r4, r0
 8009dbc:	f005 ffd0 	bl	800fd60 <GUI_ALLOC_LockH>
 8009dc0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009dc2:	9001      	str	r0, [sp, #4]
 8009dc4:	f640 0301 	movw	r3, #2049	; 0x801
 8009dc8:	4013      	ands	r3, r2
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d005      	beq.n	8009dda <WM__PaintWinAndOverlays+0x22>
 8009dce:	a801      	add	r0, sp, #4
 8009dd0:	f005 ffd4 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f7ff fe61 	bl	8009a9c <_Paint1>
 8009dda:	4b14      	ldr	r3, [pc, #80]	; (8009e2c <WM__PaintWinAndOverlays+0x74>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	b313      	cbz	r3, 8009e26 <WM__PaintWinAndOverlays+0x6e>
 8009de0:	4620      	mov	r0, r4
 8009de2:	f7ff ff8d 	bl	8009d00 <_PaintTransChildren>
 8009de6:	4620      	mov	r0, r4
 8009de8:	f005 ffb0 	bl	800fd4c <GUI_ALLOC_h2p>
 8009dec:	6985      	ldr	r5, [r0, #24]
 8009dee:	6a04      	ldr	r4, [r0, #32]
 8009df0:	b1cd      	cbz	r5, 8009e26 <WM__PaintWinAndOverlays+0x6e>
 8009df2:	b194      	cbz	r4, 8009e1a <WM__PaintWinAndOverlays+0x62>
 8009df4:	4620      	mov	r0, r4
 8009df6:	f005 ffa9 	bl	800fd4c <GUI_ALLOC_h2p>
 8009dfa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009dfc:	f003 0303 	and.w	r3, r3, #3
 8009e00:	2b03      	cmp	r3, #3
 8009e02:	d102      	bne.n	8009e0a <WM__PaintWinAndOverlays+0x52>
 8009e04:	4620      	mov	r0, r4
 8009e06:	f7ff ff31 	bl	8009c6c <_Paint1Trans>
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f7ff ff78 	bl	8009d00 <_PaintTransChildren>
 8009e10:	4620      	mov	r0, r4
 8009e12:	f005 ff9b 	bl	800fd4c <GUI_ALLOC_h2p>
 8009e16:	6a04      	ldr	r4, [r0, #32]
 8009e18:	e7eb      	b.n	8009df2 <WM__PaintWinAndOverlays+0x3a>
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f005 ff96 	bl	800fd4c <GUI_ALLOC_h2p>
 8009e20:	6a04      	ldr	r4, [r0, #32]
 8009e22:	6985      	ldr	r5, [r0, #24]
 8009e24:	e7e4      	b.n	8009df0 <WM__PaintWinAndOverlays+0x38>
 8009e26:	b003      	add	sp, #12
 8009e28:	bd30      	pop	{r4, r5, pc}
 8009e2a:	bf00      	nop
 8009e2c:	2001d4dc 	.word	0x2001d4dc

08009e30 <_cbPaintMemDev>:
 8009e30:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e34:	4d17      	ldr	r5, [pc, #92]	; (8009e94 <_cbPaintMemDev+0x64>)
 8009e36:	682b      	ldr	r3, [r5, #0]
 8009e38:	4606      	mov	r6, r0
 8009e3a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009e3c:	f005 ff90 	bl	800fd60 <GUI_ALLOC_LockH>
 8009e40:	682a      	ldr	r2, [r5, #0]
 8009e42:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 8009e46:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 8009e4a:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 8009e4e:	89c7      	ldrh	r7, [r0, #14]
 8009e50:	ac02      	add	r4, sp, #8
 8009e52:	3208      	adds	r2, #8
 8009e54:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009e58:	f100 0308 	add.w	r3, r0, #8
 8009e5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e60:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e64:	4620      	mov	r0, r4
 8009e66:	f005 ff89 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009e6a:	6830      	ldr	r0, [r6, #0]
 8009e6c:	f7ff ffa4 	bl	8009db8 <WM__PaintWinAndOverlays>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009e74:	f005 ff74 	bl	800fd60 <GUI_ALLOC_LockH>
 8009e78:	9001      	str	r0, [sp, #4]
 8009e7a:	f8a0 a008 	strh.w	sl, [r0, #8]
 8009e7e:	f8a0 900a 	strh.w	r9, [r0, #10]
 8009e82:	f8a0 800c 	strh.w	r8, [r0, #12]
 8009e86:	81c7      	strh	r7, [r0, #14]
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f005 ff77 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009e8e:	b002      	add	sp, #8
 8009e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e94:	200000d8 	.word	0x200000d8

08009e98 <WM__ClipAtParentBorders>:
 8009e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e9a:	4607      	mov	r7, r0
 8009e9c:	460d      	mov	r5, r1
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	f005 ff5e 	bl	800fd60 <GUI_ALLOC_LockH>
 8009ea4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009ea6:	ac02      	add	r4, sp, #8
 8009ea8:	f013 0602 	ands.w	r6, r3, #2
 8009eac:	4601      	mov	r1, r0
 8009eae:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009eb2:	d104      	bne.n	8009ebe <WM__ClipAtParentBorders+0x26>
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f005 ff61 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009eba:	4630      	mov	r0, r6
 8009ebc:	e016      	b.n	8009eec <WM__ClipAtParentBorders+0x54>
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	f003 feba 	bl	800dc38 <GUI__IntersectRect>
 8009ec4:	9b01      	ldr	r3, [sp, #4]
 8009ec6:	699e      	ldr	r6, [r3, #24]
 8009ec8:	4620      	mov	r0, r4
 8009eca:	b956      	cbnz	r6, 8009ee2 <WM__ClipAtParentBorders+0x4a>
 8009ecc:	f005 ff56 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009ed0:	4b07      	ldr	r3, [pc, #28]	; (8009ef0 <WM__ClipAtParentBorders+0x58>)
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	4295      	cmp	r5, r2
 8009ed6:	d008      	beq.n	8009eea <WM__ClipAtParentBorders+0x52>
 8009ed8:	6858      	ldr	r0, [r3, #4]
 8009eda:	1a2b      	subs	r3, r5, r0
 8009edc:	4258      	negs	r0, r3
 8009ede:	4158      	adcs	r0, r3
 8009ee0:	e004      	b.n	8009eec <WM__ClipAtParentBorders+0x54>
 8009ee2:	f005 ff4b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009ee6:	4635      	mov	r5, r6
 8009ee8:	e7d9      	b.n	8009e9e <WM__ClipAtParentBorders+0x6>
 8009eea:	2001      	movs	r0, #1
 8009eec:	b003      	add	sp, #12
 8009eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ef0:	2001d494 	.word	0x2001d494

08009ef4 <WM__InsertWindowIntoList>:
 8009ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	b085      	sub	sp, #20
 8009efa:	460d      	mov	r5, r1
 8009efc:	2900      	cmp	r1, #0
 8009efe:	d049      	beq.n	8009f94 <WM__InsertWindowIntoList+0xa0>
 8009f00:	f005 ff2e 	bl	800fd60 <GUI_ALLOC_LockH>
 8009f04:	2300      	movs	r3, #0
 8009f06:	6203      	str	r3, [r0, #32]
 8009f08:	6185      	str	r5, [r0, #24]
 8009f0a:	9001      	str	r0, [sp, #4]
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f005 ff27 	bl	800fd60 <GUI_ALLOC_LockH>
 8009f12:	9b01      	ldr	r3, [sp, #4]
 8009f14:	69c5      	ldr	r5, [r0, #28]
 8009f16:	9002      	str	r0, [sp, #8]
 8009f18:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8009f1a:	b92d      	cbnz	r5, 8009f28 <WM__InsertWindowIntoList+0x34>
 8009f1c:	61c4      	str	r4, [r0, #28]
 8009f1e:	a801      	add	r0, sp, #4
 8009f20:	f005 ff2c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009f24:	a802      	add	r0, sp, #8
 8009f26:	e033      	b.n	8009f90 <WM__InsertWindowIntoList+0x9c>
 8009f28:	4628      	mov	r0, r5
 8009f2a:	f005 ff19 	bl	800fd60 <GUI_ALLOC_LockH>
 8009f2e:	ae04      	add	r6, sp, #16
 8009f30:	f007 0708 	and.w	r7, r7, #8
 8009f34:	f846 0d04 	str.w	r0, [r6, #-4]!
 8009f38:	b977      	cbnz	r7, 8009f58 <WM__InsertWindowIntoList+0x64>
 8009f3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009f3c:	071a      	lsls	r2, r3, #28
 8009f3e:	d50b      	bpl.n	8009f58 <WM__InsertWindowIntoList+0x64>
 8009f40:	9b01      	ldr	r3, [sp, #4]
 8009f42:	621d      	str	r5, [r3, #32]
 8009f44:	9b02      	ldr	r3, [sp, #8]
 8009f46:	a801      	add	r0, sp, #4
 8009f48:	61dc      	str	r4, [r3, #28]
 8009f4a:	f005 ff17 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009f4e:	a802      	add	r0, sp, #8
 8009f50:	f005 ff14 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009f54:	4630      	mov	r0, r6
 8009f56:	e01b      	b.n	8009f90 <WM__InsertWindowIntoList+0x9c>
 8009f58:	a802      	add	r0, sp, #8
 8009f5a:	f005 ff0f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f005 ff0c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009f64:	4628      	mov	r0, r5
 8009f66:	f005 fef1 	bl	800fd4c <GUI_ALLOC_h2p>
 8009f6a:	9003      	str	r0, [sp, #12]
 8009f6c:	9b03      	ldr	r3, [sp, #12]
 8009f6e:	6a1d      	ldr	r5, [r3, #32]
 8009f70:	b90d      	cbnz	r5, 8009f76 <WM__InsertWindowIntoList+0x82>
 8009f72:	621c      	str	r4, [r3, #32]
 8009f74:	e00b      	b.n	8009f8e <WM__InsertWindowIntoList+0x9a>
 8009f76:	4628      	mov	r0, r5
 8009f78:	f005 fee8 	bl	800fd4c <GUI_ALLOC_h2p>
 8009f7c:	2f00      	cmp	r7, #0
 8009f7e:	d1f4      	bne.n	8009f6a <WM__InsertWindowIntoList+0x76>
 8009f80:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009f82:	071b      	lsls	r3, r3, #28
 8009f84:	d5f1      	bpl.n	8009f6a <WM__InsertWindowIntoList+0x76>
 8009f86:	9b03      	ldr	r3, [sp, #12]
 8009f88:	621c      	str	r4, [r3, #32]
 8009f8a:	9b01      	ldr	r3, [sp, #4]
 8009f8c:	621d      	str	r5, [r3, #32]
 8009f8e:	a801      	add	r0, sp, #4
 8009f90:	f005 fef4 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8009f94:	b005      	add	sp, #20
 8009f96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f98 <WM__RemoveWindowFromList>:
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	f005 fed6 	bl	800fd4c <GUI_ALLOC_h2p>
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	6980      	ldr	r0, [r0, #24]
 8009fa4:	b1a8      	cbz	r0, 8009fd2 <WM__RemoveWindowFromList+0x3a>
 8009fa6:	f005 fed1 	bl	800fd4c <GUI_ALLOC_h2p>
 8009faa:	69c3      	ldr	r3, [r0, #28]
 8009fac:	42a3      	cmp	r3, r4
 8009fae:	4606      	mov	r6, r0
 8009fb0:	d105      	bne.n	8009fbe <WM__RemoveWindowFromList+0x26>
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f005 feca 	bl	800fd4c <GUI_ALLOC_h2p>
 8009fb8:	6a03      	ldr	r3, [r0, #32]
 8009fba:	61f3      	str	r3, [r6, #28]
 8009fbc:	bd70      	pop	{r4, r5, r6, pc}
 8009fbe:	b143      	cbz	r3, 8009fd2 <WM__RemoveWindowFromList+0x3a>
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f005 fec3 	bl	800fd4c <GUI_ALLOC_h2p>
 8009fc6:	6a03      	ldr	r3, [r0, #32]
 8009fc8:	42a3      	cmp	r3, r4
 8009fca:	d1f8      	bne.n	8009fbe <WM__RemoveWindowFromList+0x26>
 8009fcc:	6a2b      	ldr	r3, [r5, #32]
 8009fce:	6203      	str	r3, [r0, #32]
 8009fd0:	bd70      	pop	{r4, r5, r6, pc}
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}

08009fd4 <WM__Client2Screen>:
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	4608      	mov	r0, r1
 8009fd8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009fdc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009fe0:	f004 bf10 	b.w	800ee04 <GUI_MoveRect>

08009fe4 <_SetClipRectUserIntersect>:
 8009fe4:	4b11      	ldr	r3, [pc, #68]	; (800a02c <_SetClipRectUserIntersect+0x48>)
 8009fe6:	b530      	push	{r4, r5, lr}
 8009fe8:	681c      	ldr	r4, [r3, #0]
 8009fea:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009fec:	b085      	sub	sp, #20
 8009fee:	4605      	mov	r5, r0
 8009ff0:	b1ba      	cbz	r2, 800a022 <_SetClipRectUserIntersect+0x3e>
 8009ff2:	6810      	ldr	r0, [r2, #0]
 8009ff4:	6851      	ldr	r1, [r2, #4]
 8009ff6:	ab02      	add	r3, sp, #8
 8009ff8:	c303      	stmia	r3!, {r0, r1}
 8009ffa:	4b0d      	ldr	r3, [pc, #52]	; (800a030 <_SetClipRectUserIntersect+0x4c>)
 8009ffc:	6818      	ldr	r0, [r3, #0]
 8009ffe:	b900      	cbnz	r0, 800a002 <_SetClipRectUserIntersect+0x1e>
 800a000:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a002:	f005 fead 	bl	800fd60 <GUI_ALLOC_LockH>
 800a006:	ac04      	add	r4, sp, #16
 800a008:	a902      	add	r1, sp, #8
 800a00a:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800a00e:	f7ff ffe1 	bl	8009fd4 <WM__Client2Screen>
 800a012:	4620      	mov	r0, r4
 800a014:	f005 feb2 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a018:	a802      	add	r0, sp, #8
 800a01a:	4629      	mov	r1, r5
 800a01c:	f003 fe0c 	bl	800dc38 <GUI__IntersectRect>
 800a020:	a802      	add	r0, sp, #8
 800a022:	f002 ffb1 	bl	800cf88 <LCD_SetClipRectEx>
 800a026:	b005      	add	sp, #20
 800a028:	bd30      	pop	{r4, r5, pc}
 800a02a:	bf00      	nop
 800a02c:	200000d8 	.word	0x200000d8
 800a030:	2001d490 	.word	0x2001d490

0800a034 <WM__ActivateClipRect>:
 800a034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a036:	4b0e      	ldr	r3, [pc, #56]	; (800a070 <WM__ActivateClipRect+0x3c>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800a03e:	b10a      	cbz	r2, 800a044 <WM__ActivateClipRect+0x10>
 800a040:	480c      	ldr	r0, [pc, #48]	; (800a074 <WM__ActivateClipRect+0x40>)
 800a042:	e011      	b.n	800a068 <WM__ActivateClipRect+0x34>
 800a044:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a046:	f005 fe8b 	bl	800fd60 <GUI_ALLOC_LockH>
 800a04a:	9001      	str	r0, [sp, #4]
 800a04c:	c803      	ldmia	r0, {r0, r1}
 800a04e:	ac02      	add	r4, sp, #8
 800a050:	e884 0003 	stmia.w	r4, {r0, r1}
 800a054:	a801      	add	r0, sp, #4
 800a056:	f005 fe91 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a05a:	4b07      	ldr	r3, [pc, #28]	; (800a078 <WM__ActivateClipRect+0x44>)
 800a05c:	6819      	ldr	r1, [r3, #0]
 800a05e:	b111      	cbz	r1, 800a066 <WM__ActivateClipRect+0x32>
 800a060:	4620      	mov	r0, r4
 800a062:	f7ff ff19 	bl	8009e98 <WM__ClipAtParentBorders>
 800a066:	4620      	mov	r0, r4
 800a068:	f7ff ffbc 	bl	8009fe4 <_SetClipRectUserIntersect>
 800a06c:	b004      	add	sp, #16
 800a06e:	bd10      	pop	{r4, pc}
 800a070:	200000d8 	.word	0x200000d8
 800a074:	2001d058 	.word	0x2001d058
 800a078:	2001d490 	.word	0x2001d490

0800a07c <WM__IsWindow>:
 800a07c:	4b06      	ldr	r3, [pc, #24]	; (800a098 <WM__IsWindow+0x1c>)
 800a07e:	b510      	push	{r4, lr}
 800a080:	4604      	mov	r4, r0
 800a082:	6818      	ldr	r0, [r3, #0]
 800a084:	b128      	cbz	r0, 800a092 <WM__IsWindow+0x16>
 800a086:	42a0      	cmp	r0, r4
 800a088:	d004      	beq.n	800a094 <WM__IsWindow+0x18>
 800a08a:	f005 fe5f 	bl	800fd4c <GUI_ALLOC_h2p>
 800a08e:	6940      	ldr	r0, [r0, #20]
 800a090:	e7f8      	b.n	800a084 <WM__IsWindow+0x8>
 800a092:	bd10      	pop	{r4, pc}
 800a094:	2001      	movs	r0, #1
 800a096:	bd10      	pop	{r4, pc}
 800a098:	2001d4b0 	.word	0x2001d4b0

0800a09c <WM__InvalidateDrawAndDescs>:
 800a09c:	b513      	push	{r0, r1, r4, lr}
 800a09e:	4604      	mov	r4, r0
 800a0a0:	b300      	cbz	r0, 800a0e4 <WM__InvalidateDrawAndDescs+0x48>
 800a0a2:	f005 fe5d 	bl	800fd60 <GUI_ALLOC_LockH>
 800a0a6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a0a8:	9001      	str	r0, [sp, #4]
 800a0aa:	0793      	lsls	r3, r2, #30
 800a0ac:	d517      	bpl.n	800a0de <WM__InvalidateDrawAndDescs+0x42>
 800a0ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a0b0:	b140      	cbz	r0, 800a0c4 <WM__InvalidateDrawAndDescs+0x28>
 800a0b2:	4b0d      	ldr	r3, [pc, #52]	; (800a0e8 <WM__InvalidateDrawAndDescs+0x4c>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	42a3      	cmp	r3, r4
 800a0b8:	d004      	beq.n	800a0c4 <WM__InvalidateDrawAndDescs+0x28>
 800a0ba:	f001 fde5 	bl	800bc88 <GUI_MEMDEV_Delete>
 800a0be:	9b01      	ldr	r3, [sp, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	625a      	str	r2, [r3, #36]	; 0x24
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f7ff fbec 	bl	80098a2 <WM_GetFirstChild>
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	b13c      	cbz	r4, 800a0de <WM__InvalidateDrawAndDescs+0x42>
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f7ff ffe4 	bl	800a09c <WM__InvalidateDrawAndDescs>
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	f005 fe39 	bl	800fd4c <GUI_ALLOC_h2p>
 800a0da:	6a04      	ldr	r4, [r0, #32]
 800a0dc:	e7f6      	b.n	800a0cc <WM__InvalidateDrawAndDescs+0x30>
 800a0de:	a801      	add	r0, sp, #4
 800a0e0:	f005 fe4c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a0e4:	b002      	add	sp, #8
 800a0e6:	bd10      	pop	{r4, pc}
 800a0e8:	2001d4d8 	.word	0x2001d4d8

0800a0ec <WM__RectIsNZ>:
 800a0ec:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a0f0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	dc08      	bgt.n	800a10a <WM__RectIsNZ+0x1e>
 800a0f8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a0fc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800a100:	429a      	cmp	r2, r3
 800a102:	bfcc      	ite	gt
 800a104:	2000      	movgt	r0, #0
 800a106:	2001      	movle	r0, #1
 800a108:	4770      	bx	lr
 800a10a:	2000      	movs	r0, #0
 800a10c:	4770      	bx	lr
	...

0800a110 <_Invalidate1Abs>:
 800a110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a112:	b085      	sub	sp, #20
 800a114:	4606      	mov	r6, r0
 800a116:	460d      	mov	r5, r1
 800a118:	4617      	mov	r7, r2
 800a11a:	f005 fe17 	bl	800fd4c <GUI_ALLOC_h2p>
 800a11e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a120:	9001      	str	r0, [sp, #4]
 800a122:	07a3      	lsls	r3, r4, #30
 800a124:	d534      	bpl.n	800a190 <_Invalidate1Abs+0x80>
 800a126:	4628      	mov	r0, r5
 800a128:	f7ff ffe0 	bl	800a0ec <WM__RectIsNZ>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d02f      	beq.n	800a190 <_Invalidate1Abs+0x80>
 800a130:	f640 0301 	movw	r3, #2049	; 0x801
 800a134:	4023      	ands	r3, r4
 800a136:	2b01      	cmp	r3, #1
 800a138:	d02a      	beq.n	800a190 <_Invalidate1Abs+0x80>
 800a13a:	4630      	mov	r0, r6
 800a13c:	f005 fe10 	bl	800fd60 <GUI_ALLOC_LockH>
 800a140:	ac02      	add	r4, sp, #8
 800a142:	4602      	mov	r2, r0
 800a144:	9001      	str	r0, [sp, #4]
 800a146:	4629      	mov	r1, r5
 800a148:	4620      	mov	r0, r4
 800a14a:	f003 fd43 	bl	800dbd4 <GUI__IntersectRects>
 800a14e:	4620      	mov	r0, r4
 800a150:	f7ff ffcc 	bl	800a0ec <WM__RectIsNZ>
 800a154:	b1c8      	cbz	r0, 800a18a <_Invalidate1Abs+0x7a>
 800a156:	9b01      	ldr	r3, [sp, #4]
 800a158:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800a15a:	f244 0120 	movw	r1, #16416	; 0x4020
 800a15e:	4031      	ands	r1, r6
 800a160:	f103 0508 	add.w	r5, r3, #8
 800a164:	b129      	cbz	r1, 800a172 <_Invalidate1Abs+0x62>
 800a166:	4628      	mov	r0, r5
 800a168:	4629      	mov	r1, r5
 800a16a:	4622      	mov	r2, r4
 800a16c:	f004 fe5a 	bl	800ee24 <GUI_MergeRect>
 800a170:	e00b      	b.n	800a18a <_Invalidate1Abs+0x7a>
 800a172:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a176:	433e      	orrs	r6, r7
 800a178:	e885 0003 	stmia.w	r5, {r0, r1}
 800a17c:	629e      	str	r6, [r3, #40]	; 0x28
 800a17e:	4b05      	ldr	r3, [pc, #20]	; (800a194 <_Invalidate1Abs+0x84>)
 800a180:	881a      	ldrh	r2, [r3, #0]
 800a182:	3201      	adds	r2, #1
 800a184:	801a      	strh	r2, [r3, #0]
 800a186:	f003 ff1d 	bl	800dfc4 <GUI_SignalEvent>
 800a18a:	a801      	add	r0, sp, #4
 800a18c:	f005 fdf6 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a190:	b005      	add	sp, #20
 800a192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a194:	2001d4ac 	.word	0x2001d4ac

0800a198 <WM__Invalidate1Abs>:
 800a198:	2220      	movs	r2, #32
 800a19a:	f7ff bfb9 	b.w	800a110 <_Invalidate1Abs>

0800a19e <WM_InvalidateWindowAndDescsEx>:
 800a19e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1a0:	460f      	mov	r7, r1
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	4615      	mov	r5, r2
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	b348      	cbz	r0, 800a1fe <WM_InvalidateWindowAndDescsEx+0x60>
 800a1aa:	f005 fdd9 	bl	800fd60 <GUI_ALLOC_LockH>
 800a1ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a1b0:	ac04      	add	r4, sp, #16
 800a1b2:	079b      	lsls	r3, r3, #30
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800a1ba:	d403      	bmi.n	800a1c4 <WM_InvalidateWindowAndDescsEx+0x26>
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f005 fddd 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a1c2:	e01c      	b.n	800a1fe <WM_InvalidateWindowAndDescsEx+0x60>
 800a1c4:	a802      	add	r0, sp, #8
 800a1c6:	4639      	mov	r1, r7
 800a1c8:	f003 fd04 	bl	800dbd4 <GUI__IntersectRects>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d0f5      	beq.n	800a1bc <WM_InvalidateWindowAndDescsEx+0x1e>
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f005 fdd3 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	a902      	add	r1, sp, #8
 800a1da:	462a      	mov	r2, r5
 800a1dc:	f7ff ff98 	bl	800a110 <_Invalidate1Abs>
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f7ff fb5e 	bl	80098a2 <WM_GetFirstChild>
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	b14c      	cbz	r4, 800a1fe <WM_InvalidateWindowAndDescsEx+0x60>
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	a902      	add	r1, sp, #8
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	f7ff ffd5 	bl	800a19e <WM_InvalidateWindowAndDescsEx>
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f005 fda9 	bl	800fd4c <GUI_ALLOC_h2p>
 800a1fa:	6a04      	ldr	r4, [r0, #32]
 800a1fc:	e7f4      	b.n	800a1e8 <WM_InvalidateWindowAndDescsEx+0x4a>
 800a1fe:	b005      	add	sp, #20
 800a200:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a202 <WM__InvalidateRect>:
 800a202:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a206:	4680      	mov	r8, r0
 800a208:	4617      	mov	r7, r2
 800a20a:	461d      	mov	r5, r3
 800a20c:	460c      	mov	r4, r1
 800a20e:	2900      	cmp	r1, #0
 800a210:	d030      	beq.n	800a274 <WM__InvalidateRect+0x72>
 800a212:	4608      	mov	r0, r1
 800a214:	f005 fda4 	bl	800fd60 <GUI_ALLOC_LockH>
 800a218:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800a21a:	9001      	str	r0, [sp, #4]
 800a21c:	07b3      	lsls	r3, r6, #30
 800a21e:	4602      	mov	r2, r0
 800a220:	d525      	bpl.n	800a26e <WM__InvalidateRect+0x6c>
 800a222:	a802      	add	r0, sp, #8
 800a224:	4641      	mov	r1, r8
 800a226:	f003 fcd5 	bl	800dbd4 <GUI__IntersectRects>
 800a22a:	b300      	cbz	r0, 800a26e <WM__InvalidateRect+0x6c>
 800a22c:	f640 0301 	movw	r3, #2049	; 0x801
 800a230:	4033      	ands	r3, r6
 800a232:	2b01      	cmp	r3, #1
 800a234:	d107      	bne.n	800a246 <WM__InvalidateRect+0x44>
 800a236:	9b01      	ldr	r3, [sp, #4]
 800a238:	a802      	add	r0, sp, #8
 800a23a:	6999      	ldr	r1, [r3, #24]
 800a23c:	6a1a      	ldr	r2, [r3, #32]
 800a23e:	462b      	mov	r3, r5
 800a240:	f7ff ffdf 	bl	800a202 <WM__InvalidateRect>
 800a244:	e004      	b.n	800a250 <WM__InvalidateRect+0x4e>
 800a246:	4620      	mov	r0, r4
 800a248:	a902      	add	r1, sp, #8
 800a24a:	462a      	mov	r2, r5
 800a24c:	f7ff ff60 	bl	800a110 <_Invalidate1Abs>
 800a250:	9b01      	ldr	r3, [sp, #4]
 800a252:	69dc      	ldr	r4, [r3, #28]
 800a254:	b15c      	cbz	r4, 800a26e <WM__InvalidateRect+0x6c>
 800a256:	42bc      	cmp	r4, r7
 800a258:	d009      	beq.n	800a26e <WM__InvalidateRect+0x6c>
 800a25a:	4620      	mov	r0, r4
 800a25c:	a902      	add	r1, sp, #8
 800a25e:	462a      	mov	r2, r5
 800a260:	f7ff ff9d 	bl	800a19e <WM_InvalidateWindowAndDescsEx>
 800a264:	4620      	mov	r0, r4
 800a266:	f005 fd71 	bl	800fd4c <GUI_ALLOC_h2p>
 800a26a:	6a04      	ldr	r4, [r0, #32]
 800a26c:	e7f2      	b.n	800a254 <WM__InvalidateRect+0x52>
 800a26e:	a801      	add	r0, sp, #4
 800a270:	f005 fd84 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a274:	b004      	add	sp, #16
 800a276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a27a <WM__InvalidateParent>:
 800a27a:	b570      	push	{r4, r5, r6, lr}
 800a27c:	4605      	mov	r5, r0
 800a27e:	4608      	mov	r0, r1
 800a280:	460c      	mov	r4, r1
 800a282:	4616      	mov	r6, r2
 800a284:	f005 fd62 	bl	800fd4c <GUI_ALLOC_h2p>
 800a288:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a28a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a28e:	4628      	mov	r0, r5
 800a290:	4621      	mov	r1, r4
 800a292:	4632      	mov	r2, r6
 800a294:	bf0c      	ite	eq
 800a296:	2320      	moveq	r3, #32
 800a298:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 800a29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2a0:	f7ff bfaf 	b.w	800a202 <WM__InvalidateRect>

0800a2a4 <WM__InvalidateRectEx>:
 800a2a4:	2320      	movs	r3, #32
 800a2a6:	f7ff bfac 	b.w	800a202 <WM__InvalidateRect>

0800a2aa <WM__DetachWindow>:
 800a2aa:	b513      	push	{r0, r1, r4, lr}
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	f005 fd57 	bl	800fd60 <GUI_ALLOC_LockH>
 800a2b2:	6981      	ldr	r1, [r0, #24]
 800a2b4:	9001      	str	r0, [sp, #4]
 800a2b6:	b141      	cbz	r1, 800a2ca <WM__DetachWindow+0x20>
 800a2b8:	6a02      	ldr	r2, [r0, #32]
 800a2ba:	f7ff fff3 	bl	800a2a4 <WM__InvalidateRectEx>
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f7ff fe6a 	bl	8009f98 <WM__RemoveWindowFromList>
 800a2c4:	9b01      	ldr	r3, [sp, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	619a      	str	r2, [r3, #24]
 800a2ca:	a801      	add	r0, sp, #4
 800a2cc:	f005 fd56 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a2d0:	b002      	add	sp, #8
 800a2d2:	bd10      	pop	{r4, pc}

0800a2d4 <WM_SendMessage>:
 800a2d4:	b108      	cbz	r0, 800a2da <WM_SendMessage+0x6>
 800a2d6:	f7fe beb9 	b.w	800904c <WM__SendMessage>
 800a2da:	4770      	bx	lr

0800a2dc <WM__SendMsgNoData>:
 800a2dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2de:	ab04      	add	r3, sp, #16
 800a2e0:	9001      	str	r0, [sp, #4]
 800a2e2:	f843 1d10 	str.w	r1, [r3, #-16]!
 800a2e6:	4669      	mov	r1, sp
 800a2e8:	f7fe feb0 	bl	800904c <WM__SendMessage>
 800a2ec:	b005      	add	sp, #20
 800a2ee:	f85d fb04 	ldr.w	pc, [sp], #4

0800a2f2 <WM__GetClientRectWin>:
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	800b      	strh	r3, [r1, #0]
 800a2f6:	8882      	ldrh	r2, [r0, #4]
 800a2f8:	804b      	strh	r3, [r1, #2]
 800a2fa:	8803      	ldrh	r3, [r0, #0]
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	808b      	strh	r3, [r1, #4]
 800a300:	88c2      	ldrh	r2, [r0, #6]
 800a302:	8843      	ldrh	r3, [r0, #2]
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	80cb      	strh	r3, [r1, #6]
 800a308:	4770      	bx	lr

0800a30a <WM_InvalidateRect>:
 800a30a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a30c:	460f      	mov	r7, r1
 800a30e:	b087      	sub	sp, #28
 800a310:	4605      	mov	r5, r0
 800a312:	2800      	cmp	r0, #0
 800a314:	d033      	beq.n	800a37e <WM_InvalidateRect+0x74>
 800a316:	f005 fd23 	bl	800fd60 <GUI_ALLOC_LockH>
 800a31a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800a31c:	9001      	str	r0, [sp, #4]
 800a31e:	07b2      	lsls	r2, r6, #30
 800a320:	d52a      	bpl.n	800a378 <WM_InvalidateRect+0x6e>
 800a322:	c803      	ldmia	r0, {r0, r1}
 800a324:	ac04      	add	r4, sp, #16
 800a326:	03f3      	lsls	r3, r6, #15
 800a328:	e884 0003 	stmia.w	r4, {r0, r1}
 800a32c:	d502      	bpl.n	800a334 <WM_InvalidateRect+0x2a>
 800a32e:	4628      	mov	r0, r5
 800a330:	f7ff feb4 	bl	800a09c <WM__InvalidateDrawAndDescs>
 800a334:	b15f      	cbz	r7, 800a34e <WM_InvalidateRect+0x44>
 800a336:	6838      	ldr	r0, [r7, #0]
 800a338:	6879      	ldr	r1, [r7, #4]
 800a33a:	ab02      	add	r3, sp, #8
 800a33c:	c303      	stmia	r3!, {r0, r1}
 800a33e:	9801      	ldr	r0, [sp, #4]
 800a340:	a902      	add	r1, sp, #8
 800a342:	f7ff fe47 	bl	8009fd4 <WM__Client2Screen>
 800a346:	4620      	mov	r0, r4
 800a348:	a902      	add	r1, sp, #8
 800a34a:	f003 fc75 	bl	800dc38 <GUI__IntersectRect>
 800a34e:	4620      	mov	r0, r4
 800a350:	4629      	mov	r1, r5
 800a352:	f7ff fda1 	bl	8009e98 <WM__ClipAtParentBorders>
 800a356:	b178      	cbz	r0, 800a378 <WM_InvalidateRect+0x6e>
 800a358:	f640 0301 	movw	r3, #2049	; 0x801
 800a35c:	4033      	ands	r3, r6
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d106      	bne.n	800a370 <WM_InvalidateRect+0x66>
 800a362:	9b01      	ldr	r3, [sp, #4]
 800a364:	4620      	mov	r0, r4
 800a366:	6999      	ldr	r1, [r3, #24]
 800a368:	6a1a      	ldr	r2, [r3, #32]
 800a36a:	f7ff ff9b 	bl	800a2a4 <WM__InvalidateRectEx>
 800a36e:	e003      	b.n	800a378 <WM_InvalidateRect+0x6e>
 800a370:	4628      	mov	r0, r5
 800a372:	4621      	mov	r1, r4
 800a374:	f7ff ff10 	bl	800a198 <WM__Invalidate1Abs>
 800a378:	a801      	add	r0, sp, #4
 800a37a:	f005 fcff 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a37e:	b007      	add	sp, #28
 800a380:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a382 <WM_InvalidateWindow>:
 800a382:	2100      	movs	r1, #0
 800a384:	f7ff bfc1 	b.w	800a30a <WM_InvalidateRect>

0800a388 <WM__GetTopLevelLayer>:
 800a388:	b510      	push	{r4, lr}
 800a38a:	4604      	mov	r4, r0
 800a38c:	f005 fcde 	bl	800fd4c <GUI_ALLOC_h2p>
 800a390:	6980      	ldr	r0, [r0, #24]
 800a392:	2800      	cmp	r0, #0
 800a394:	d1f9      	bne.n	800a38a <WM__GetTopLevelLayer+0x2>
 800a396:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <WM__GetTopLevelLayer+0x24>)
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	4294      	cmp	r4, r2
 800a39c:	d005      	beq.n	800a3aa <WM__GetTopLevelLayer+0x22>
 800a39e:	6858      	ldr	r0, [r3, #4]
 800a3a0:	4284      	cmp	r4, r0
 800a3a2:	bf14      	ite	ne
 800a3a4:	f04f 30ff 	movne.w	r0, #4294967295
 800a3a8:	2001      	moveq	r0, #1
 800a3aa:	bd10      	pop	{r4, pc}
 800a3ac:	2001d494 	.word	0x2001d494

0800a3b0 <WM__SelectTopLevelLayer>:
 800a3b0:	b508      	push	{r3, lr}
 800a3b2:	f7ff ffe9 	bl	800a388 <WM__GetTopLevelLayer>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	db03      	blt.n	800a3c2 <WM__SelectTopLevelLayer+0x12>
 800a3ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a3be:	f004 bbe3 	b.w	800eb88 <GUI_SelectLayer>
 800a3c2:	bd08      	pop	{r3, pc}

0800a3c4 <WM_SelectWindow>:
 800a3c4:	4a0d      	ldr	r2, [pc, #52]	; (800a3fc <WM_SelectWindow+0x38>)
 800a3c6:	6813      	ldr	r3, [r2, #0]
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	4616      	mov	r6, r2
 800a3d0:	b908      	cbnz	r0, 800a3d6 <WM_SelectWindow+0x12>
 800a3d2:	4a0b      	ldr	r2, [pc, #44]	; (800a400 <WM_SelectWindow+0x3c>)
 800a3d4:	6814      	ldr	r4, [r2, #0]
 800a3d6:	649c      	str	r4, [r3, #72]	; 0x48
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f7ff ffe9 	bl	800a3b0 <WM__SelectTopLevelLayer>
 800a3de:	f003 fa11 	bl	800d804 <LCD_SetClipRectMax>
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f005 fcb2 	bl	800fd4c <GUI_ALLOC_h2p>
 800a3e8:	6833      	ldr	r3, [r6, #0]
 800a3ea:	f9b0 1000 	ldrsh.w	r1, [r0]
 800a3ee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a3f2:	64d9      	str	r1, [r3, #76]	; 0x4c
 800a3f4:	651a      	str	r2, [r3, #80]	; 0x50
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	bd70      	pop	{r4, r5, r6, pc}
 800a3fa:	bf00      	nop
 800a3fc:	200000d8 	.word	0x200000d8
 800a400:	2001d4b0 	.word	0x2001d4b0

0800a404 <WM_CreateWindowAsChild>:
 800a404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a408:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a40a:	469b      	mov	fp, r3
 800a40c:	4b4b      	ldr	r3, [pc, #300]	; (800a53c <WM_CreateWindowAsChild+0x138>)
 800a40e:	4607      	mov	r7, r0
 800a410:	4688      	mov	r8, r1
 800a412:	4692      	mov	sl, r2
 800a414:	681e      	ldr	r6, [r3, #0]
 800a416:	bb65      	cbnz	r5, 800a472 <WM_CreateWindowAsChild+0x6e>
 800a418:	4b49      	ldr	r3, [pc, #292]	; (800a540 <WM_CreateWindowAsChild+0x13c>)
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	b363      	cbz	r3, 800a478 <WM_CreateWindowAsChild+0x74>
 800a41e:	4b49      	ldr	r3, [pc, #292]	; (800a544 <WM_CreateWindowAsChild+0x140>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	7c5a      	ldrb	r2, [r3, #17]
 800a424:	4b48      	ldr	r3, [pc, #288]	; (800a548 <WM_CreateWindowAsChild+0x144>)
 800a426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42a:	1c5a      	adds	r2, r3, #1
 800a42c:	d024      	beq.n	800a478 <WM_CreateWindowAsChild+0x74>
 800a42e:	b31b      	cbz	r3, 800a478 <WM_CreateWindowAsChild+0x74>
 800a430:	461d      	mov	r5, r3
 800a432:	4628      	mov	r0, r5
 800a434:	f005 fc94 	bl	800fd60 <GUI_ALLOC_LockH>
 800a438:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a43c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800a440:	9001      	str	r0, [sp, #4]
 800a442:	4417      	add	r7, r2
 800a444:	4498      	add	r8, r3
 800a446:	f1ba 0f00 	cmp.w	sl, #0
 800a44a:	d105      	bne.n	800a458 <WM_CreateWindowAsChild+0x54>
 800a44c:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 800a450:	ebc2 0a0a 	rsb	sl, r2, sl
 800a454:	f10a 0a01 	add.w	sl, sl, #1
 800a458:	f1bb 0f00 	cmp.w	fp, #0
 800a45c:	d105      	bne.n	800a46a <WM_CreateWindowAsChild+0x66>
 800a45e:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 800a462:	ebc3 0b0b 	rsb	fp, r3, fp
 800a466:	f10b 0b01 	add.w	fp, fp, #1
 800a46a:	a801      	add	r0, sp, #4
 800a46c:	f005 fc86 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a470:	e002      	b.n	800a478 <WM_CreateWindowAsChild+0x74>
 800a472:	1c6b      	adds	r3, r5, #1
 800a474:	d1dd      	bne.n	800a432 <WM_CreateWindowAsChild+0x2e>
 800a476:	2500      	movs	r5, #0
 800a478:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a47a:	302c      	adds	r0, #44	; 0x2c
 800a47c:	f005 fedd 	bl	801023a <GUI_ALLOC_AllocZero>
 800a480:	4604      	mov	r4, r0
 800a482:	2800      	cmp	r0, #0
 800a484:	d056      	beq.n	800a534 <WM_CreateWindowAsChild+0x130>
 800a486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a488:	431e      	orrs	r6, r3
 800a48a:	4b2d      	ldr	r3, [pc, #180]	; (800a540 <WM_CreateWindowAsChild+0x13c>)
 800a48c:	881a      	ldrh	r2, [r3, #0]
 800a48e:	3201      	adds	r2, #1
 800a490:	801a      	strh	r2, [r3, #0]
 800a492:	f005 fc65 	bl	800fd60 <GUI_ALLOC_LockH>
 800a496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a498:	6103      	str	r3, [r0, #16]
 800a49a:	f10d 0908 	add.w	r9, sp, #8
 800a49e:	4b2b      	ldr	r3, [pc, #172]	; (800a54c <WM_CreateWindowAsChild+0x148>)
 800a4a0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a4a2:	f849 0d08 	str.w	r0, [r9, #-8]!
 800a4a6:	4033      	ands	r3, r6
 800a4a8:	8007      	strh	r7, [r0, #0]
 800a4aa:	f8a0 8002 	strh.w	r8, [r0, #2]
 800a4ae:	4457      	add	r7, sl
 800a4b0:	44d8      	add	r8, fp
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	3f01      	subs	r7, #1
 800a4b6:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4ba:	6283      	str	r3, [r0, #40]	; 0x28
 800a4bc:	8087      	strh	r7, [r0, #4]
 800a4be:	f8a0 8006 	strh.w	r8, [r0, #6]
 800a4c2:	4668      	mov	r0, sp
 800a4c4:	f005 fc5a 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a4c8:	4b21      	ldr	r3, [pc, #132]	; (800a550 <WM_CreateWindowAsChild+0x14c>)
 800a4ca:	6818      	ldr	r0, [r3, #0]
 800a4cc:	b148      	cbz	r0, 800a4e2 <WM_CreateWindowAsChild+0xde>
 800a4ce:	f005 fc3d 	bl	800fd4c <GUI_ALLOC_h2p>
 800a4d2:	4607      	mov	r7, r0
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f005 fc39 	bl	800fd4c <GUI_ALLOC_h2p>
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	6143      	str	r3, [r0, #20]
 800a4de:	617c      	str	r4, [r7, #20]
 800a4e0:	e000      	b.n	800a4e4 <WM_CreateWindowAsChild+0xe0>
 800a4e2:	601c      	str	r4, [r3, #0]
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f7ff fd04 	bl	8009ef4 <WM__InsertWindowIntoList>
 800a4ec:	06b5      	lsls	r5, r6, #26
 800a4ee:	d502      	bpl.n	800a4f6 <WM_CreateWindowAsChild+0xf2>
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f7ff ff67 	bl	800a3c4 <WM_SelectWindow>
 800a4f6:	07f0      	lsls	r0, r6, #31
 800a4f8:	d503      	bpl.n	800a502 <WM_CreateWindowAsChild+0xfe>
 800a4fa:	4b16      	ldr	r3, [pc, #88]	; (800a554 <WM_CreateWindowAsChild+0x150>)
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	3201      	adds	r2, #1
 800a500:	601a      	str	r2, [r3, #0]
 800a502:	0671      	lsls	r1, r6, #25
 800a504:	d502      	bpl.n	800a50c <WM_CreateWindowAsChild+0x108>
 800a506:	4620      	mov	r0, r4
 800a508:	f007 fa9c 	bl	8011a44 <WM_BringToBottom>
 800a50c:	07b2      	lsls	r2, r6, #30
 800a50e:	d50d      	bpl.n	800a52c <WM_CreateWindowAsChild+0x128>
 800a510:	4620      	mov	r0, r4
 800a512:	f005 fc25 	bl	800fd60 <GUI_ALLOC_LockH>
 800a516:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a518:	9000      	str	r0, [sp, #0]
 800a51a:	f043 0302 	orr.w	r3, r3, #2
 800a51e:	6283      	str	r3, [r0, #40]	; 0x28
 800a520:	4668      	mov	r0, sp
 800a522:	f005 fc2b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a526:	4620      	mov	r0, r4
 800a528:	f7ff ff2b 	bl	800a382 <WM_InvalidateWindow>
 800a52c:	4620      	mov	r0, r4
 800a52e:	2101      	movs	r1, #1
 800a530:	f7ff fed4 	bl	800a2dc <WM__SendMsgNoData>
 800a534:	4620      	mov	r0, r4
 800a536:	b003      	add	sp, #12
 800a538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53c:	2001d4bc 	.word	0x2001d4bc
 800a540:	2001d48c 	.word	0x2001d48c
 800a544:	200000d8 	.word	0x200000d8
 800a548:	2001d494 	.word	0x2001d494
 800a54c:	003f3f9f 	.word	0x003f3f9f
 800a550:	2001d4b0 	.word	0x2001d4b0
 800a554:	2001d4dc 	.word	0x2001d4dc

0800a558 <WM_DeleteWindow>:
 800a558:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a55a:	4604      	mov	r4, r0
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d06e      	beq.n	800a63e <WM_DeleteWindow+0xe6>
 800a560:	f7ff fd8c 	bl	800a07c <WM__IsWindow>
 800a564:	2800      	cmp	r0, #0
 800a566:	d06a      	beq.n	800a63e <WM_DeleteWindow+0xe6>
 800a568:	4620      	mov	r0, r4
 800a56a:	f7ff ff0d 	bl	800a388 <WM__GetTopLevelLayer>
 800a56e:	210b      	movs	r1, #11
 800a570:	4605      	mov	r5, r0
 800a572:	4620      	mov	r0, r4
 800a574:	f7ff feb2 	bl	800a2dc <WM__SendMsgNoData>
 800a578:	4620      	mov	r0, r4
 800a57a:	f007 f90c 	bl	8011796 <WM__DeleteAssocTimer>
 800a57e:	4620      	mov	r0, r4
 800a580:	f005 fbee 	bl	800fd60 <GUI_ALLOC_LockH>
 800a584:	9001      	str	r0, [sp, #4]
 800a586:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a588:	b108      	cbz	r0, 800a58e <WM_DeleteWindow+0x36>
 800a58a:	f001 fb7d 	bl	800bc88 <GUI_MEMDEV_Delete>
 800a58e:	4b2d      	ldr	r3, [pc, #180]	; (800a644 <WM_DeleteWindow+0xec>)
 800a590:	4a2d      	ldr	r2, [pc, #180]	; (800a648 <WM_DeleteWindow+0xf0>)
 800a592:	2100      	movs	r1, #0
 800a594:	6019      	str	r1, [r3, #0]
 800a596:	4b2d      	ldr	r3, [pc, #180]	; (800a64c <WM_DeleteWindow+0xf4>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a59e:	42a0      	cmp	r0, r4
 800a5a0:	bf08      	it	eq
 800a5a2:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800a5a6:	4a2a      	ldr	r2, [pc, #168]	; (800a650 <WM_DeleteWindow+0xf8>)
 800a5a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a5ac:	42a1      	cmp	r1, r4
 800a5ae:	bf04      	itt	eq
 800a5b0:	2100      	moveq	r1, #0
 800a5b2:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800a5b6:	4b27      	ldr	r3, [pc, #156]	; (800a654 <WM_DeleteWindow+0xfc>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	b12b      	cbz	r3, 800a5c8 <WM_DeleteWindow+0x70>
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	42a2      	cmp	r2, r4
 800a5c0:	bf04      	itt	eq
 800a5c2:	2200      	moveq	r2, #0
 800a5c4:	605a      	streq	r2, [r3, #4]
 800a5c6:	e7f7      	b.n	800a5b8 <WM_DeleteWindow+0x60>
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	2107      	movs	r1, #7
 800a5cc:	f7fe ffab 	bl	8009526 <WM_NotifyParent>
 800a5d0:	9e01      	ldr	r6, [sp, #4]
 800a5d2:	69f0      	ldr	r0, [r6, #28]
 800a5d4:	f7ff ffc0 	bl	800a558 <WM_DeleteWindow>
 800a5d8:	69f3      	ldr	r3, [r6, #28]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1f9      	bne.n	800a5d2 <WM_DeleteWindow+0x7a>
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f7ff fe63 	bl	800a2aa <WM__DetachWindow>
 800a5e4:	4b1c      	ldr	r3, [pc, #112]	; (800a658 <WM_DeleteWindow+0x100>)
 800a5e6:	6818      	ldr	r0, [r3, #0]
 800a5e8:	b150      	cbz	r0, 800a600 <WM_DeleteWindow+0xa8>
 800a5ea:	f005 fbaf 	bl	800fd4c <GUI_ALLOC_h2p>
 800a5ee:	4606      	mov	r6, r0
 800a5f0:	6940      	ldr	r0, [r0, #20]
 800a5f2:	42a0      	cmp	r0, r4
 800a5f4:	d1f8      	bne.n	800a5e8 <WM_DeleteWindow+0x90>
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f005 fba8 	bl	800fd4c <GUI_ALLOC_h2p>
 800a5fc:	6943      	ldr	r3, [r0, #20]
 800a5fe:	6173      	str	r3, [r6, #20]
 800a600:	9b01      	ldr	r3, [sp, #4]
 800a602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a604:	07da      	lsls	r2, r3, #31
 800a606:	d503      	bpl.n	800a610 <WM_DeleteWindow+0xb8>
 800a608:	4a14      	ldr	r2, [pc, #80]	; (800a65c <WM_DeleteWindow+0x104>)
 800a60a:	6811      	ldr	r1, [r2, #0]
 800a60c:	3901      	subs	r1, #1
 800a60e:	6011      	str	r1, [r2, #0]
 800a610:	069b      	lsls	r3, r3, #26
 800a612:	d503      	bpl.n	800a61c <WM_DeleteWindow+0xc4>
 800a614:	4b12      	ldr	r3, [pc, #72]	; (800a660 <WM_DeleteWindow+0x108>)
 800a616:	881a      	ldrh	r2, [r3, #0]
 800a618:	3a01      	subs	r2, #1
 800a61a:	801a      	strh	r2, [r3, #0]
 800a61c:	a801      	add	r0, sp, #4
 800a61e:	f005 fbad 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a622:	4b10      	ldr	r3, [pc, #64]	; (800a664 <WM_DeleteWindow+0x10c>)
 800a624:	881a      	ldrh	r2, [r3, #0]
 800a626:	4620      	mov	r0, r4
 800a628:	3a01      	subs	r2, #1
 800a62a:	801a      	strh	r2, [r3, #0]
 800a62c:	f005 fbd2 	bl	800fdd4 <GUI_ALLOC_Free>
 800a630:	2d00      	cmp	r5, #0
 800a632:	db04      	blt.n	800a63e <WM_DeleteWindow+0xe6>
 800a634:	4b0c      	ldr	r3, [pc, #48]	; (800a668 <WM_DeleteWindow+0x110>)
 800a636:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a63a:	f7ff fec3 	bl	800a3c4 <WM_SelectWindow>
 800a63e:	b002      	add	sp, #8
 800a640:	bd70      	pop	{r4, r5, r6, pc}
 800a642:	bf00      	nop
 800a644:	2001d068 	.word	0x2001d068
 800a648:	2001d4a4 	.word	0x2001d4a4
 800a64c:	2001d4b4 	.word	0x2001d4b4
 800a650:	2001d4d0 	.word	0x2001d4d0
 800a654:	2001d4c8 	.word	0x2001d4c8
 800a658:	2001d4b0 	.word	0x2001d4b0
 800a65c:	2001d4dc 	.word	0x2001d4dc
 800a660:	2001d4ac 	.word	0x2001d4ac
 800a664:	2001d48c 	.word	0x2001d48c
 800a668:	2001d494 	.word	0x2001d494

0800a66c <WM_GetActiveWindow>:
 800a66c:	4b01      	ldr	r3, [pc, #4]	; (800a674 <WM_GetActiveWindow+0x8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a672:	4770      	bx	lr
 800a674:	200000d8 	.word	0x200000d8

0800a678 <WM__GetNextIVR>:
 800a678:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a67c:	4f5d      	ldr	r7, [pc, #372]	; (800a7f4 <WM__GetNextIVR+0x17c>)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800a684:	2800      	cmp	r0, #0
 800a686:	f000 80b2 	beq.w	800a7ee <WM__GetNextIVR+0x176>
 800a68a:	4b5b      	ldr	r3, [pc, #364]	; (800a7f8 <WM__GetNextIVR+0x180>)
 800a68c:	695a      	ldr	r2, [r3, #20]
 800a68e:	2a01      	cmp	r2, #1
 800a690:	461c      	mov	r4, r3
 800a692:	dd03      	ble.n	800a69c <WM__GetNextIVR+0x24>
 800a694:	3a01      	subs	r2, #1
 800a696:	615a      	str	r2, [r3, #20]
 800a698:	2000      	movs	r0, #0
 800a69a:	e0a8      	b.n	800a7ee <WM__GetNextIVR+0x176>
 800a69c:	f104 0608 	add.w	r6, r4, #8
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	ad02      	add	r5, sp, #8
 800a6aa:	6123      	str	r3, [r4, #16]
 800a6ac:	e885 0003 	stmia.w	r5, {r0, r1}
 800a6b0:	b923      	cbnz	r3, 800a6bc <WM__GetNextIVR+0x44>
 800a6b2:	8823      	ldrh	r3, [r4, #0]
 800a6b4:	f8ad 3008 	strh.w	r3, [sp, #8]
 800a6b8:	8863      	ldrh	r3, [r4, #2]
 800a6ba:	e011      	b.n	800a6e0 <WM__GetNextIVR+0x68>
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	8962      	ldrh	r2, [r4, #10]
 800a6c0:	f8ad 200a 	strh.w	r2, [sp, #10]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800a6cc:	f8ad 3008 	strh.w	r3, [sp, #8]
 800a6d0:	b21b      	sxth	r3, r3
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	da06      	bge.n	800a6e4 <WM__GetNextIVR+0x6c>
 800a6d6:	8823      	ldrh	r3, [r4, #0]
 800a6d8:	f8ad 3008 	strh.w	r3, [sp, #8]
 800a6dc:	89e3      	ldrh	r3, [r4, #14]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	f8ad 300a 	strh.w	r3, [sp, #10]
 800a6e4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800a6e8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800a6ec:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800a7f8 <WM__GetNextIVR+0x180>
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	dd04      	ble.n	800a6fe <WM__GetNextIVR+0x86>
 800a6f4:	6963      	ldr	r3, [r4, #20]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	6163      	str	r3, [r4, #20]
 800a6fc:	e077      	b.n	800a7ee <WM__GetNextIVR+0x176>
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a702:	f005 fb2d 	bl	800fd60 <GUI_ALLOC_LockH>
 800a706:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800a70a:	f9b8 3000 	ldrsh.w	r3, [r8]
 800a70e:	9001      	str	r0, [sp, #4]
 800a710:	429a      	cmp	r2, r3
 800a712:	d11c      	bne.n	800a74e <WM__GetNextIVR+0xd6>
 800a714:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800a718:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a71c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800a720:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a724:	4b33      	ldr	r3, [pc, #204]	; (800a7f4 <WM__GetNextIVR+0x17c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a72a:	b15a      	cbz	r2, 800a744 <WM__GetNextIVR+0xcc>
 800a72c:	4610      	mov	r0, r2
 800a72e:	f005 fb0d 	bl	800fd4c <GUI_ALLOC_h2p>
 800a732:	4680      	mov	r8, r0
 800a734:	2200      	movs	r2, #0
 800a736:	6a00      	ldr	r0, [r0, #32]
 800a738:	4629      	mov	r1, r5
 800a73a:	f7ff f9c1 	bl	8009ac0 <_Findy1>
 800a73e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800a742:	e7f2      	b.n	800a72a <WM__GetNextIVR+0xb2>
 800a744:	9b01      	ldr	r3, [sp, #4]
 800a746:	4629      	mov	r1, r5
 800a748:	69d8      	ldr	r0, [r3, #28]
 800a74a:	f7ff f9b9 	bl	8009ac0 <_Findy1>
 800a74e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800a752:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a75a:	b16a      	cbz	r2, 800a778 <WM__GetNextIVR+0x100>
 800a75c:	4610      	mov	r0, r2
 800a75e:	f005 faf5 	bl	800fd4c <GUI_ALLOC_h2p>
 800a762:	4629      	mov	r1, r5
 800a764:	4680      	mov	r8, r0
 800a766:	2200      	movs	r2, #0
 800a768:	6a00      	ldr	r0, [r0, #32]
 800a76a:	f7ff f9ff 	bl	8009b6c <_Findx0>
 800a76e:	2800      	cmp	r0, #0
 800a770:	d1ed      	bne.n	800a74e <WM__GetNextIVR+0xd6>
 800a772:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800a776:	e7f0      	b.n	800a75a <WM__GetNextIVR+0xe2>
 800a778:	9b01      	ldr	r3, [sp, #4]
 800a77a:	4629      	mov	r1, r5
 800a77c:	69d8      	ldr	r0, [r3, #28]
 800a77e:	f7ff f9f5 	bl	8009b6c <_Findx0>
 800a782:	2800      	cmp	r0, #0
 800a784:	d1e3      	bne.n	800a74e <WM__GetNextIVR+0xd6>
 800a786:	88a3      	ldrh	r3, [r4, #4]
 800a788:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800a78c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a790:	b21b      	sxth	r3, r3
 800a792:	429a      	cmp	r2, r3
 800a794:	dd07      	ble.n	800a7a6 <WM__GetNextIVR+0x12e>
 800a796:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a79a:	e886 0003 	stmia.w	r6, {r0, r1}
 800a79e:	a801      	add	r0, sp, #4
 800a7a0:	f005 faec 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a7a4:	e797      	b.n	800a6d6 <WM__GetNextIVR+0x5e>
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7aa:	b152      	cbz	r2, 800a7c2 <WM__GetNextIVR+0x14a>
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	f005 facd 	bl	800fd4c <GUI_ALLOC_h2p>
 800a7b2:	4607      	mov	r7, r0
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	6a00      	ldr	r0, [r0, #32]
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	f7ff fa1b 	bl	8009bf4 <_Findx1>
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	e7f3      	b.n	800a7aa <WM__GetNextIVR+0x132>
 800a7c2:	af04      	add	r7, sp, #16
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800a7ca:	69d8      	ldr	r0, [r3, #28]
 800a7cc:	f7ff fa12 	bl	8009bf4 <_Findx1>
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	f005 fad3 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a7d6:	6923      	ldr	r3, [r4, #16]
 800a7d8:	f644 6220 	movw	r2, #20000	; 0x4e20
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	dc89      	bgt.n	800a6f4 <WM__GetNextIVR+0x7c>
 800a7e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a7e4:	e886 0003 	stmia.w	r6, {r0, r1}
 800a7e8:	f7ff fc24 	bl	800a034 <WM__ActivateClipRect>
 800a7ec:	2001      	movs	r0, #1
 800a7ee:	b004      	add	sp, #16
 800a7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f4:	200000d8 	.word	0x200000d8
 800a7f8:	2001d050 	.word	0x2001d050

0800a7fc <WM__InitIVRSearch>:
 800a7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a800:	4f39      	ldr	r7, [pc, #228]	; (800a8e8 <WM__InitIVRSearch+0xec>)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800a808:	b086      	sub	sp, #24
 800a80a:	4606      	mov	r6, r0
 800a80c:	b912      	cbnz	r2, 800a814 <WM__InitIVRSearch+0x18>
 800a80e:	f7ff fc11 	bl	800a034 <WM__ActivateClipRect>
 800a812:	e064      	b.n	800a8de <WM__InitIVRSearch+0xe2>
 800a814:	4d35      	ldr	r5, [pc, #212]	; (800a8ec <WM__InitIVRSearch+0xf0>)
 800a816:	696a      	ldr	r2, [r5, #20]
 800a818:	3201      	adds	r2, #1
 800a81a:	2a01      	cmp	r2, #1
 800a81c:	616a      	str	r2, [r5, #20]
 800a81e:	462c      	mov	r4, r5
 800a820:	dc5d      	bgt.n	800a8de <WM__InitIVRSearch+0xe2>
 800a822:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a824:	f005 fa9c 	bl	800fd60 <GUI_ALLOC_LockH>
 800a828:	f04f 32ff 	mov.w	r2, #4294967295
 800a82c:	612a      	str	r2, [r5, #16]
 800a82e:	4a30      	ldr	r2, [pc, #192]	; (800a8f0 <WM__InitIVRSearch+0xf4>)
 800a830:	9000      	str	r0, [sp, #0]
 800a832:	7812      	ldrb	r2, [r2, #0]
 800a834:	b12a      	cbz	r2, 800a842 <WM__InitIVRSearch+0x46>
 800a836:	f100 0308 	add.w	r3, r0, #8
 800a83a:	aa02      	add	r2, sp, #8
 800a83c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a840:	e005      	b.n	800a84e <WM__InitIVRSearch+0x52>
 800a842:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a844:	f012 0802 	ands.w	r8, r2, #2
 800a848:	d00a      	beq.n	800a860 <WM__InitIVRSearch+0x64>
 800a84a:	c803      	ldmia	r0, {r0, r1}
 800a84c:	aa02      	add	r2, sp, #8
 800a84e:	e882 0003 	stmia.w	r2, {r0, r1}
 800a852:	ad02      	add	r5, sp, #8
 800a854:	b166      	cbz	r6, 800a870 <WM__InitIVRSearch+0x74>
 800a856:	4628      	mov	r0, r5
 800a858:	4631      	mov	r1, r6
 800a85a:	f003 f9ed 	bl	800dc38 <GUI__IntersectRect>
 800a85e:	e007      	b.n	800a870 <WM__InitIVRSearch+0x74>
 800a860:	696b      	ldr	r3, [r5, #20]
 800a862:	4668      	mov	r0, sp
 800a864:	3b01      	subs	r3, #1
 800a866:	616b      	str	r3, [r5, #20]
 800a868:	f005 fa88 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a86c:	4640      	mov	r0, r8
 800a86e:	e037      	b.n	800a8e0 <WM__InitIVRSearch+0xe4>
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	4e20      	ldr	r6, [pc, #128]	; (800a8f4 <WM__InitIVRSearch+0xf8>)
 800a874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a876:	b1c2      	cbz	r2, 800a8aa <WM__InitIVRSearch+0xae>
 800a878:	9b00      	ldr	r3, [sp, #0]
 800a87a:	6810      	ldr	r0, [r2, #0]
 800a87c:	6851      	ldr	r1, [r2, #4]
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	ab04      	add	r3, sp, #16
 800a882:	c303      	stmia	r3!, {r0, r1}
 800a884:	6833      	ldr	r3, [r6, #0]
 800a886:	b133      	cbz	r3, 800a896 <WM__InitIVRSearch+0x9a>
 800a888:	a801      	add	r0, sp, #4
 800a88a:	f005 fa77 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a88e:	6830      	ldr	r0, [r6, #0]
 800a890:	f005 fa66 	bl	800fd60 <GUI_ALLOC_LockH>
 800a894:	9001      	str	r0, [sp, #4]
 800a896:	9801      	ldr	r0, [sp, #4]
 800a898:	a904      	add	r1, sp, #16
 800a89a:	f7ff fb9b 	bl	8009fd4 <WM__Client2Screen>
 800a89e:	4628      	mov	r0, r5
 800a8a0:	a904      	add	r1, sp, #16
 800a8a2:	f003 f9c9 	bl	800dc38 <GUI__IntersectRect>
 800a8a6:	a801      	add	r0, sp, #4
 800a8a8:	e000      	b.n	800a8ac <WM__InitIVRSearch+0xb0>
 800a8aa:	4668      	mov	r0, sp
 800a8ac:	f005 fa66 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a8b0:	6831      	ldr	r1, [r6, #0]
 800a8b2:	b119      	cbz	r1, 800a8bc <WM__InitIVRSearch+0xc0>
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	f7ff faef 	bl	8009e98 <WM__ClipAtParentBorders>
 800a8ba:	b128      	cbz	r0, 800a8c8 <WM__InitIVRSearch+0xcc>
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	4628      	mov	r0, r5
 800a8c0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800a8c2:	f7ff fae9 	bl	8009e98 <WM__ClipAtParentBorders>
 800a8c6:	b918      	cbnz	r0, 800a8d0 <WM__InitIVRSearch+0xd4>
 800a8c8:	6963      	ldr	r3, [r4, #20]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	6163      	str	r3, [r4, #20]
 800a8ce:	e007      	b.n	800a8e0 <WM__InitIVRSearch+0xe4>
 800a8d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a8d4:	e884 0003 	stmia.w	r4, {r0, r1}
 800a8d8:	f7ff fece 	bl	800a678 <WM__GetNextIVR>
 800a8dc:	e000      	b.n	800a8e0 <WM__InitIVRSearch+0xe4>
 800a8de:	2001      	movs	r0, #1
 800a8e0:	b006      	add	sp, #24
 800a8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e6:	bf00      	nop
 800a8e8:	200000d8 	.word	0x200000d8
 800a8ec:	2001d050 	.word	0x2001d050
 800a8f0:	2001d4b9 	.word	0x2001d4b9
 800a8f4:	2001d490 	.word	0x2001d490

0800a8f8 <WM_SetDefault>:
 800a8f8:	b508      	push	{r3, lr}
 800a8fa:	f004 f8fb 	bl	800eaf4 <GL_SetDefault>
 800a8fe:	4b02      	ldr	r3, [pc, #8]	; (800a908 <WM_SetDefault+0x10>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2200      	movs	r2, #0
 800a904:	645a      	str	r2, [r3, #68]	; 0x44
 800a906:	bd08      	pop	{r3, pc}
 800a908:	200000d8 	.word	0x200000d8

0800a90c <WM__Paint1>:
 800a90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a90e:	b089      	sub	sp, #36	; 0x24
 800a910:	4604      	mov	r4, r0
 800a912:	f005 fa25 	bl	800fd60 <GUI_ALLOC_LockH>
 800a916:	6907      	ldr	r7, [r0, #16]
 800a918:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800a91a:	9001      	str	r0, [sp, #4]
 800a91c:	3008      	adds	r0, #8
 800a91e:	c803      	ldmia	r0, {r0, r1}
 800a920:	ad02      	add	r5, sp, #8
 800a922:	e885 0003 	stmia.w	r5, {r0, r1}
 800a926:	a801      	add	r0, sp, #4
 800a928:	f005 fa28 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a92c:	2f00      	cmp	r7, #0
 800a92e:	d031      	beq.n	800a994 <WM__Paint1+0x88>
 800a930:	07b3      	lsls	r3, r6, #30
 800a932:	d52f      	bpl.n	800a994 <WM__Paint1+0x88>
 800a934:	4620      	mov	r0, r4
 800a936:	212e      	movs	r1, #46	; 0x2e
 800a938:	f7fe fd78 	bl	800942c <WM_SendMessageNoPara>
 800a93c:	4b16      	ldr	r3, [pc, #88]	; (800a998 <WM__Paint1+0x8c>)
 800a93e:	781a      	ldrb	r2, [r3, #0]
 800a940:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 800a944:	f102 0201 	add.w	r2, r2, #1
 800a948:	701a      	strb	r2, [r3, #0]
 800a94a:	461e      	mov	r6, r3
 800a94c:	d00a      	beq.n	800a964 <WM__Paint1+0x58>
 800a94e:	230f      	movs	r3, #15
 800a950:	9405      	str	r4, [sp, #20]
 800a952:	9304      	str	r3, [sp, #16]
 800a954:	9507      	str	r5, [sp, #28]
 800a956:	f7ff ffcf 	bl	800a8f8 <WM_SetDefault>
 800a95a:	4620      	mov	r0, r4
 800a95c:	a904      	add	r1, sp, #16
 800a95e:	f7fe fb75 	bl	800904c <WM__SendMessage>
 800a962:	e010      	b.n	800a986 <WM__Paint1+0x7a>
 800a964:	4628      	mov	r0, r5
 800a966:	f7ff ff49 	bl	800a7fc <WM__InitIVRSearch>
 800a96a:	b160      	cbz	r0, 800a986 <WM__Paint1+0x7a>
 800a96c:	230f      	movs	r3, #15
 800a96e:	9304      	str	r3, [sp, #16]
 800a970:	9405      	str	r4, [sp, #20]
 800a972:	9507      	str	r5, [sp, #28]
 800a974:	f7ff ffc0 	bl	800a8f8 <WM_SetDefault>
 800a978:	4620      	mov	r0, r4
 800a97a:	a904      	add	r1, sp, #16
 800a97c:	f7fe fb66 	bl	800904c <WM__SendMessage>
 800a980:	f7ff fe7a 	bl	800a678 <WM__GetNextIVR>
 800a984:	e7f1      	b.n	800a96a <WM__Paint1+0x5e>
 800a986:	7833      	ldrb	r3, [r6, #0]
 800a988:	4620      	mov	r0, r4
 800a98a:	3b01      	subs	r3, #1
 800a98c:	212f      	movs	r1, #47	; 0x2f
 800a98e:	7033      	strb	r3, [r6, #0]
 800a990:	f7fe fd4c 	bl	800942c <WM_SendMessageNoPara>
 800a994:	b009      	add	sp, #36	; 0x24
 800a996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a998:	2001d4b9 	.word	0x2001d4b9

0800a99c <WM__Paint>:
 800a99c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a99e:	b089      	sub	sp, #36	; 0x24
 800a9a0:	ac06      	add	r4, sp, #24
 800a9a2:	9003      	str	r0, [sp, #12]
 800a9a4:	f005 f9dc 	bl	800fd60 <GUI_ALLOC_LockH>
 800a9a8:	f100 0208 	add.w	r2, r0, #8
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	9005      	str	r0, [sp, #20]
 800a9b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9b4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800a9b6:	699e      	ldr	r6, [r3, #24]
 800a9b8:	691f      	ldr	r7, [r3, #16]
 800a9ba:	e884 0003 	stmia.w	r4, {r0, r1}
 800a9be:	a805      	add	r0, sp, #20
 800a9c0:	f005 f9dc 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800a9c4:	f244 0320 	movw	r3, #16416	; 0x4020
 800a9c8:	402b      	ands	r3, r5
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d034      	beq.n	800aa38 <WM__Paint+0x9c>
 800a9ce:	b1bf      	cbz	r7, 800aa00 <WM__Paint+0x64>
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	9903      	ldr	r1, [sp, #12]
 800a9d4:	f7ff fa60 	bl	8009e98 <WM__ClipAtParentBorders>
 800a9d8:	b190      	cbz	r0, 800aa00 <WM__Paint+0x64>
 800a9da:	9803      	ldr	r0, [sp, #12]
 800a9dc:	f7ff fcf2 	bl	800a3c4 <WM_SelectWindow>
 800a9e0:	0769      	lsls	r1, r5, #29
 800a9e2:	d50f      	bpl.n	800aa04 <WM__Paint+0x68>
 800a9e4:	b126      	cbz	r6, 800a9f0 <WM__Paint+0x54>
 800a9e6:	f005 0501 	and.w	r5, r5, #1
 800a9ea:	f085 0501 	eor.w	r5, r5, #1
 800a9ee:	e000      	b.n	800a9f2 <WM__Paint+0x56>
 800a9f0:	2501      	movs	r5, #1
 800a9f2:	9500      	str	r5, [sp, #0]
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	4912      	ldr	r1, [pc, #72]	; (800aa40 <WM__Paint+0xa4>)
 800a9f8:	aa03      	add	r2, sp, #12
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	f000 fada 	bl	800afb4 <GUI_MEMDEV_Draw>
 800aa00:	2400      	movs	r4, #0
 800aa02:	e003      	b.n	800aa0c <WM__Paint+0x70>
 800aa04:	9803      	ldr	r0, [sp, #12]
 800aa06:	f7ff f9d7 	bl	8009db8 <WM__PaintWinAndOverlays>
 800aa0a:	2401      	movs	r4, #1
 800aa0c:	9803      	ldr	r0, [sp, #12]
 800aa0e:	f005 f9a7 	bl	800fd60 <GUI_ALLOC_LockH>
 800aa12:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800aa14:	9005      	str	r0, [sp, #20]
 800aa16:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 800aa1a:	f023 0320 	bic.w	r3, r3, #32
 800aa1e:	0492      	lsls	r2, r2, #18
 800aa20:	bf48      	it	mi
 800aa22:	f043 0304 	orrmi.w	r3, r3, #4
 800aa26:	6283      	str	r3, [r0, #40]	; 0x28
 800aa28:	a805      	add	r0, sp, #20
 800aa2a:	f005 f9a7 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800aa2e:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <WM__Paint+0xa8>)
 800aa30:	881a      	ldrh	r2, [r3, #0]
 800aa32:	3a01      	subs	r2, #1
 800aa34:	801a      	strh	r2, [r3, #0]
 800aa36:	e000      	b.n	800aa3a <WM__Paint+0x9e>
 800aa38:	461c      	mov	r4, r3
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	b009      	add	sp, #36	; 0x24
 800aa3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa40:	08009e31 	.word	0x08009e31
 800aa44:	2001d4ac 	.word	0x2001d4ac

0800aa48 <WM__DeleteSecure>:
 800aa48:	b508      	push	{r3, lr}
 800aa4a:	f005 f97f 	bl	800fd4c <GUI_ALLOC_h2p>
 800aa4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aa50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa54:	6283      	str	r3, [r0, #40]	; 0x28
 800aa56:	4b02      	ldr	r3, [pc, #8]	; (800aa60 <WM__DeleteSecure+0x18>)
 800aa58:	2201      	movs	r2, #1
 800aa5a:	601a      	str	r2, [r3, #0]
 800aa5c:	bd08      	pop	{r3, pc}
 800aa5e:	bf00      	nop
 800aa60:	2001d04c 	.word	0x2001d04c

0800aa64 <WM_Exec>:
 800aa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa68:	4b4c      	ldr	r3, [pc, #304]	; (800ab9c <WM_Exec+0x138>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	b09f      	sub	sp, #124	; 0x7c
 800aa6e:	b103      	cbz	r3, 800aa72 <WM_Exec+0xe>
 800aa70:	4798      	blx	r3
 800aa72:	2600      	movs	r6, #0
 800aa74:	4d4a      	ldr	r5, [pc, #296]	; (800aba0 <WM_Exec+0x13c>)
 800aa76:	682b      	ldr	r3, [r5, #0]
 800aa78:	b1db      	cbz	r3, 800aab2 <WM_Exec+0x4e>
 800aa7a:	4b4a      	ldr	r3, [pc, #296]	; (800aba4 <WM_Exec+0x140>)
 800aa7c:	681c      	ldr	r4, [r3, #0]
 800aa7e:	b1bc      	cbz	r4, 800aab0 <WM_Exec+0x4c>
 800aa80:	4620      	mov	r0, r4
 800aa82:	f005 f96d 	bl	800fd60 <GUI_ALLOC_LockH>
 800aa86:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800aa88:	6947      	ldr	r7, [r0, #20]
 800aa8a:	ab1e      	add	r3, sp, #120	; 0x78
 800aa8c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800aa90:	f843 0d70 	str.w	r0, [r3, #-112]!
 800aa94:	d007      	beq.n	800aaa6 <WM_Exec+0x42>
 800aa96:	4618      	mov	r0, r3
 800aa98:	f005 f970 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f7ff fd5b 	bl	800a558 <WM_DeleteWindow>
 800aaa2:	463c      	mov	r4, r7
 800aaa4:	e7eb      	b.n	800aa7e <WM_Exec+0x1a>
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	463c      	mov	r4, r7
 800aaaa:	f005 f967 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800aaae:	e7e6      	b.n	800aa7e <WM_Exec+0x1a>
 800aab0:	602c      	str	r4, [r5, #0]
 800aab2:	4b3d      	ldr	r3, [pc, #244]	; (800aba8 <WM_Exec+0x144>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	b103      	cbz	r3, 800aaba <WM_Exec+0x56>
 800aab8:	4798      	blx	r3
 800aaba:	4b3c      	ldr	r3, [pc, #240]	; (800abac <WM_Exec+0x148>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	b92b      	cbnz	r3, 800aacc <WM_Exec+0x68>
 800aac0:	4f3b      	ldr	r7, [pc, #236]	; (800abb0 <WM_Exec+0x14c>)
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800aac8:	b143      	cbz	r3, 800aadc <WM_Exec+0x78>
 800aaca:	e003      	b.n	800aad4 <WM_Exec+0x70>
 800aacc:	4798      	blx	r3
 800aace:	2800      	cmp	r0, #0
 800aad0:	d0f6      	beq.n	800aac0 <WM_Exec+0x5c>
 800aad2:	e058      	b.n	800ab86 <WM_Exec+0x122>
 800aad4:	f004 f97a 	bl	800edcc <GUI_PollKeyMsg>
 800aad8:	2800      	cmp	r0, #0
 800aada:	d154      	bne.n	800ab86 <WM_Exec+0x122>
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	f893 5054 	ldrb.w	r5, [r3, #84]	; 0x54
 800aae2:	b14d      	cbz	r5, 800aaf8 <WM_Exec+0x94>
 800aae4:	4b33      	ldr	r3, [pc, #204]	; (800abb4 <WM_Exec+0x150>)
 800aae6:	881d      	ldrh	r5, [r3, #0]
 800aae8:	b135      	cbz	r5, 800aaf8 <WM_Exec+0x94>
 800aaea:	4b33      	ldr	r3, [pc, #204]	; (800abb8 <WM_Exec+0x154>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d04b      	beq.n	800ab8a <WM_Exec+0x126>
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4798      	blx	r3
 800aaf6:	2501      	movs	r5, #1
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800aafe:	b913      	cbnz	r3, 800ab06 <WM_Exec+0xa2>
 800ab00:	2d00      	cmp	r5, #0
 800ab02:	d137      	bne.n	800ab74 <WM_Exec+0x110>
 800ab04:	e045      	b.n	800ab92 <WM_Exec+0x12e>
 800ab06:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800abb4 <WM_Exec+0x150>
 800ab0a:	f8b8 3000 	ldrh.w	r3, [r8]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d0f6      	beq.n	800ab00 <WM_Exec+0x9c>
 800ab12:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800abbc <WM_Exec+0x158>
 800ab16:	f8d9 4000 	ldr.w	r4, [r9]
 800ab1a:	b90c      	cbnz	r4, 800ab20 <WM_Exec+0xbc>
 800ab1c:	4b21      	ldr	r3, [pc, #132]	; (800aba4 <WM_Exec+0x140>)
 800ab1e:	681c      	ldr	r4, [r3, #0]
 800ab20:	a802      	add	r0, sp, #8
 800ab22:	f004 f857 	bl	800ebd4 <GUI_SaveContext_W>
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 800ab2c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 800ab30:	b914      	cbnz	r4, 800ab38 <WM_Exec+0xd4>
 800ab32:	2400      	movs	r4, #0
 800ab34:	e00d      	b.n	800ab52 <WM_Exec+0xee>
 800ab36:	b963      	cbnz	r3, 800ab52 <WM_Exec+0xee>
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f7ff ff2f 	bl	800a99c <WM__Paint>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	4620      	mov	r0, r4
 800ab42:	9301      	str	r3, [sp, #4]
 800ab44:	f005 f902 	bl	800fd4c <GUI_ALLOC_h2p>
 800ab48:	6944      	ldr	r4, [r0, #20]
 800ab4a:	9b01      	ldr	r3, [sp, #4]
 800ab4c:	2c00      	cmp	r4, #0
 800ab4e:	d1f2      	bne.n	800ab36 <WM_Exec+0xd2>
 800ab50:	e7ef      	b.n	800ab32 <WM_Exec+0xce>
 800ab52:	4658      	mov	r0, fp
 800ab54:	f8c9 4000 	str.w	r4, [r9]
 800ab58:	f003 ffee 	bl	800eb38 <GUI_SetColor>
 800ab5c:	4650      	mov	r0, sl
 800ab5e:	f003 ffe9 	bl	800eb34 <GUI_SetBkColor>
 800ab62:	a802      	add	r0, sp, #8
 800ab64:	f004 f840 	bl	800ebe8 <GUI_RestoreContext>
 800ab68:	f8b8 3000 	ldrh.w	r3, [r8]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d0c7      	beq.n	800ab00 <WM_Exec+0x9c>
 800ab70:	2601      	movs	r6, #1
 800ab72:	e7c1      	b.n	800aaf8 <WM_Exec+0x94>
 800ab74:	4b10      	ldr	r3, [pc, #64]	; (800abb8 <WM_Exec+0x154>)
 800ab76:	6818      	ldr	r0, [r3, #0]
 800ab78:	b110      	cbz	r0, 800ab80 <WM_Exec+0x11c>
 800ab7a:	6843      	ldr	r3, [r0, #4]
 800ab7c:	4798      	blx	r3
 800ab7e:	e008      	b.n	800ab92 <WM_Exec+0x12e>
 800ab80:	f003 f820 	bl	800dbc4 <GUI__ManageCache>
 800ab84:	e005      	b.n	800ab92 <WM_Exec+0x12e>
 800ab86:	2601      	movs	r6, #1
 800ab88:	e774      	b.n	800aa74 <WM_Exec+0x10>
 800ab8a:	2001      	movs	r0, #1
 800ab8c:	f003 f81a 	bl	800dbc4 <GUI__ManageCache>
 800ab90:	e7b1      	b.n	800aaf6 <WM_Exec+0x92>
 800ab92:	4630      	mov	r0, r6
 800ab94:	b01f      	add	sp, #124	; 0x7c
 800ab96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab9a:	bf00      	nop
 800ab9c:	2001d4a0 	.word	0x2001d4a0
 800aba0:	2001d04c 	.word	0x2001d04c
 800aba4:	2001d4b0 	.word	0x2001d4b0
 800aba8:	2001d49c 	.word	0x2001d49c
 800abac:	2001d51c 	.word	0x2001d51c
 800abb0:	200000d8 	.word	0x200000d8
 800abb4:	2001d4ac 	.word	0x2001d4ac
 800abb8:	2001d4cc 	.word	0x2001d4cc
 800abbc:	2001d068 	.word	0x2001d068

0800abc0 <WM_Activate>:
 800abc0:	4b02      	ldr	r3, [pc, #8]	; (800abcc <WM_Activate+0xc>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800abca:	4770      	bx	lr
 800abcc:	200000d8 	.word	0x200000d8

0800abd0 <WM_Deactivate>:
 800abd0:	4b03      	ldr	r3, [pc, #12]	; (800abe0 <WM_Deactivate+0x10>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800abda:	f002 be13 	b.w	800d804 <LCD_SetClipRectMax>
 800abde:	bf00      	nop
 800abe0:	200000d8 	.word	0x200000d8

0800abe4 <WM_DefaultProc>:
 800abe4:	b510      	push	{r4, lr}
 800abe6:	4604      	mov	r4, r0
 800abe8:	6840      	ldr	r0, [r0, #4]
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	68e1      	ldr	r1, [r4, #12]
 800abee:	2b17      	cmp	r3, #23
 800abf0:	d00f      	beq.n	800ac12 <WM_DefaultProc+0x2e>
 800abf2:	dc06      	bgt.n	800ac02 <WM_DefaultProc+0x1e>
 800abf4:	2b0e      	cmp	r3, #14
 800abf6:	d00e      	beq.n	800ac16 <WM_DefaultProc+0x32>
 800abf8:	2b14      	cmp	r3, #20
 800abfa:	d114      	bne.n	800ac26 <WM_DefaultProc+0x42>
 800abfc:	f7fe fe94 	bl	8009928 <WM__GetClientRectEx>
 800ac00:	e011      	b.n	800ac26 <WM_DefaultProc+0x42>
 800ac02:	2b22      	cmp	r3, #34	; 0x22
 800ac04:	d00c      	beq.n	800ac20 <WM_DefaultProc+0x3c>
 800ac06:	2b28      	cmp	r3, #40	; 0x28
 800ac08:	d10d      	bne.n	800ac26 <WM_DefaultProc+0x42>
 800ac0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac0e:	f7ff bbb8 	b.w	800a382 <WM_InvalidateWindow>
 800ac12:	60e0      	str	r0, [r4, #12]
 800ac14:	bd10      	pop	{r4, pc}
 800ac16:	4621      	mov	r1, r4
 800ac18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac1c:	f006 be32 	b.w	8011884 <WM_SendToParent>
 800ac20:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800ac24:	e000      	b.n	800ac28 <WM_DefaultProc+0x44>
 800ac26:	2300      	movs	r3, #0
 800ac28:	60e3      	str	r3, [r4, #12]
 800ac2a:	bd10      	pop	{r4, pc}

0800ac2c <_cbBackWin>:
 800ac2c:	6803      	ldr	r3, [r0, #0]
 800ac2e:	2b0e      	cmp	r3, #14
 800ac30:	b510      	push	{r4, lr}
 800ac32:	4604      	mov	r4, r0
 800ac34:	d002      	beq.n	800ac3c <_cbBackWin+0x10>
 800ac36:	2b0f      	cmp	r3, #15
 800ac38:	d009      	beq.n	800ac4e <_cbBackWin+0x22>
 800ac3a:	e020      	b.n	800ac7e <_cbBackWin+0x52>
 800ac3c:	68c3      	ldr	r3, [r0, #12]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	2a01      	cmp	r2, #1
 800ac42:	d121      	bne.n	800ac88 <_cbBackWin+0x5c>
 800ac44:	6818      	ldr	r0, [r3, #0]
 800ac46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac4a:	f004 b8b7 	b.w	800edbc <GUI_StoreKey>
 800ac4e:	4a0f      	ldr	r2, [pc, #60]	; (800ac8c <_cbBackWin+0x60>)
 800ac50:	6843      	ldr	r3, [r0, #4]
 800ac52:	6811      	ldr	r1, [r2, #0]
 800ac54:	428b      	cmp	r3, r1
 800ac56:	d006      	beq.n	800ac66 <_cbBackWin+0x3a>
 800ac58:	6852      	ldr	r2, [r2, #4]
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	bf14      	ite	ne
 800ac5e:	f04f 33ff 	movne.w	r3, #4294967295
 800ac62:	2301      	moveq	r3, #1
 800ac64:	e000      	b.n	800ac68 <_cbBackWin+0x3c>
 800ac66:	2300      	movs	r3, #0
 800ac68:	4a09      	ldr	r2, [pc, #36]	; (800ac90 <_cbBackWin+0x64>)
 800ac6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ac6e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800ac72:	4298      	cmp	r0, r3
 800ac74:	d003      	beq.n	800ac7e <_cbBackWin+0x52>
 800ac76:	f003 ff5d 	bl	800eb34 <GUI_SetBkColor>
 800ac7a:	f004 fc4d 	bl	800f518 <GUI_Clear>
 800ac7e:	4620      	mov	r0, r4
 800ac80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac84:	f7ff bfae 	b.w	800abe4 <WM_DefaultProc>
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	bf00      	nop
 800ac8c:	2001d494 	.word	0x2001d494
 800ac90:	2001d4c0 	.word	0x2001d4c0

0800ac94 <WM_Init>:
 800ac94:	b530      	push	{r4, r5, lr}
 800ac96:	4b2b      	ldr	r3, [pc, #172]	; (800ad44 <WM_Init+0xb0>)
 800ac98:	7818      	ldrb	r0, [r3, #0]
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	461d      	mov	r5, r3
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d14d      	bne.n	800ad3e <WM_Init+0xaa>
 800aca2:	4b29      	ldr	r3, [pc, #164]	; (800ad48 <WM_Init+0xb4>)
 800aca4:	6018      	str	r0, [r3, #0]
 800aca6:	4b29      	ldr	r3, [pc, #164]	; (800ad4c <WM_Init+0xb8>)
 800aca8:	6018      	str	r0, [r3, #0]
 800acaa:	4b29      	ldr	r3, [pc, #164]	; (800ad50 <WM_Init+0xbc>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	6458      	str	r0, [r3, #68]	; 0x44
 800acb0:	4b28      	ldr	r3, [pc, #160]	; (800ad54 <WM_Init+0xc0>)
 800acb2:	8018      	strh	r0, [r3, #0]
 800acb4:	4b28      	ldr	r3, [pc, #160]	; (800ad58 <WM_Init+0xc4>)
 800acb6:	4604      	mov	r4, r0
 800acb8:	8018      	strh	r0, [r3, #0]
 800acba:	4620      	mov	r0, r4
 800acbc:	f004 fa3a 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800acc0:	b1c0      	cbz	r0, 800acf4 <WM_Init+0x60>
 800acc2:	f04f 32ff 	mov.w	r2, #4294967295
 800acc6:	2302      	movs	r3, #2
 800acc8:	e88d 000c 	stmia.w	sp, {r2, r3}
 800accc:	2000      	movs	r0, #0
 800acce:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800acd2:	4b22      	ldr	r3, [pc, #136]	; (800ad5c <WM_Init+0xc8>)
 800acd4:	9302      	str	r3, [sp, #8]
 800acd6:	9003      	str	r0, [sp, #12]
 800acd8:	4613      	mov	r3, r2
 800acda:	4601      	mov	r1, r0
 800acdc:	f7ff fb92 	bl	800a404 <WM_CreateWindowAsChild>
 800ace0:	4b1f      	ldr	r3, [pc, #124]	; (800ad60 <WM_Init+0xcc>)
 800ace2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ace6:	4b1f      	ldr	r3, [pc, #124]	; (800ad64 <WM_Init+0xd0>)
 800ace8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800acec:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800acf0:	f7ff fb47 	bl	800a382 <WM_InvalidateWindow>
 800acf4:	3401      	adds	r4, #1
 800acf6:	2c02      	cmp	r4, #2
 800acf8:	d1df      	bne.n	800acba <WM_Init+0x26>
 800acfa:	481b      	ldr	r0, [pc, #108]	; (800ad68 <WM_Init+0xd4>)
 800acfc:	f006 fe84 	bl	8011a08 <WM__AddCriticalHandle>
 800ad00:	481a      	ldr	r0, [pc, #104]	; (800ad6c <WM_Init+0xd8>)
 800ad02:	f006 fe81 	bl	8011a08 <WM__AddCriticalHandle>
 800ad06:	481a      	ldr	r0, [pc, #104]	; (800ad70 <WM_Init+0xdc>)
 800ad08:	f006 fe7e 	bl	8011a08 <WM__AddCriticalHandle>
 800ad0c:	4819      	ldr	r0, [pc, #100]	; (800ad74 <WM_Init+0xe0>)
 800ad0e:	f006 fe7b 	bl	8011a08 <WM__AddCriticalHandle>
 800ad12:	4819      	ldr	r0, [pc, #100]	; (800ad78 <WM_Init+0xe4>)
 800ad14:	f006 fe78 	bl	8011a08 <WM__AddCriticalHandle>
 800ad18:	4818      	ldr	r0, [pc, #96]	; (800ad7c <WM_Init+0xe8>)
 800ad1a:	f006 fe75 	bl	8011a08 <WM__AddCriticalHandle>
 800ad1e:	4b10      	ldr	r3, [pc, #64]	; (800ad60 <WM_Init+0xcc>)
 800ad20:	6818      	ldr	r0, [r3, #0]
 800ad22:	f7ff fb4f 	bl	800a3c4 <WM_SelectWindow>
 800ad26:	f7ff ff4b 	bl	800abc0 <WM_Activate>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	702b      	strb	r3, [r5, #0]
 800ad2e:	4814      	ldr	r0, [pc, #80]	; (800ad80 <WM_Init+0xec>)
 800ad30:	4b14      	ldr	r3, [pc, #80]	; (800ad84 <WM_Init+0xf0>)
 800ad32:	6003      	str	r3, [r0, #0]
 800ad34:	b005      	add	sp, #20
 800ad36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad3a:	f004 bbfd 	b.w	800f538 <GUI__RegisterExit>
 800ad3e:	b005      	add	sp, #20
 800ad40:	bd30      	pop	{r4, r5, pc}
 800ad42:	bf00      	nop
 800ad44:	2001d074 	.word	0x2001d074
 800ad48:	2001d4b0 	.word	0x2001d4b0
 800ad4c:	2001d068 	.word	0x2001d068
 800ad50:	200000d8 	.word	0x200000d8
 800ad54:	2001d4ac 	.word	0x2001d4ac
 800ad58:	2001d48c 	.word	0x2001d48c
 800ad5c:	0800ac2d 	.word	0x0800ac2d
 800ad60:	2001d494 	.word	0x2001d494
 800ad64:	2001d4c0 	.word	0x2001d4c0
 800ad68:	2001d600 	.word	0x2001d600
 800ad6c:	2001d5f0 	.word	0x2001d5f0
 800ad70:	2001d5e0 	.word	0x2001d5e0
 800ad74:	2001d608 	.word	0x2001d608
 800ad78:	2001d5f8 	.word	0x2001d5f8
 800ad7c:	2001d5e8 	.word	0x2001d5e8
 800ad80:	2001d06c 	.word	0x2001d06c
 800ad84:	08009a4d 	.word	0x08009a4d

0800ad88 <_CreateStaticDevice>:
 800ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8c:	b087      	sub	sp, #28
 800ad8e:	4604      	mov	r4, r0
 800ad90:	f004 ffe6 	bl	800fd60 <GUI_ALLOC_LockH>
 800ad94:	af06      	add	r7, sp, #24
 800ad96:	f8b0 8000 	ldrh.w	r8, [r0]
 800ad9a:	8886      	ldrh	r6, [r0, #4]
 800ad9c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 800ada0:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 800ada4:	f847 0d04 	str.w	r0, [r7, #-4]!
 800ada8:	fa0f f888 	sxth.w	r8, r8
 800adac:	b236      	sxth	r6, r6
 800adae:	ebc8 0606 	rsb	r6, r8, r6
 800adb2:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 800adb6:	3601      	adds	r6, #1
 800adb8:	4638      	mov	r0, r7
 800adba:	fa0f f989 	sxth.w	r9, r9
 800adbe:	fa0f f58b 	sxth.w	r5, fp
 800adc2:	f004 ffdb 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800adc6:	ebc9 0505 	rsb	r5, r9, r5
 800adca:	2e00      	cmp	r6, #0
 800adcc:	f105 0501 	add.w	r5, r5, #1
 800add0:	dd4d      	ble.n	800ae6e <_CreateStaticDevice+0xe6>
 800add2:	2d00      	cmp	r5, #0
 800add4:	dd4b      	ble.n	800ae6e <_CreateStaticDevice+0xe6>
 800add6:	f1ba 0f00 	cmp.w	sl, #0
 800adda:	d04a      	beq.n	800ae72 <_CreateStaticDevice+0xea>
 800addc:	4650      	mov	r0, sl
 800adde:	f004 ffbf 	bl	800fd60 <GUI_ALLOC_LockH>
 800ade2:	ab06      	add	r3, sp, #24
 800ade4:	8886      	ldrh	r6, [r0, #4]
 800ade6:	f843 0d08 	str.w	r0, [r3, #-8]!
 800adea:	88c5      	ldrh	r5, [r0, #6]
 800adec:	b236      	sxth	r6, r6
 800adee:	4618      	mov	r0, r3
 800adf0:	f004 ffc4 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800adf4:	4546      	cmp	r6, r8
 800adf6:	d102      	bne.n	800adfe <_CreateStaticDevice+0x76>
 800adf8:	b22d      	sxth	r5, r5
 800adfa:	454d      	cmp	r5, r9
 800adfc:	d032      	beq.n	800ae64 <_CreateStaticDevice+0xdc>
 800adfe:	4650      	mov	r0, sl
 800ae00:	4641      	mov	r1, r8
 800ae02:	464a      	mov	r2, r9
 800ae04:	f000 f886 	bl	800af14 <GUI_MEMDEV_SetOrg>
 800ae08:	e02c      	b.n	800ae64 <_CreateStaticDevice+0xdc>
 800ae0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ae0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae10:	6283      	str	r3, [r0, #40]	; 0x28
 800ae12:	4638      	mov	r0, r7
 800ae14:	f004 ffb2 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800ae18:	4640      	mov	r0, r8
 800ae1a:	f000 ff93 	bl	800bd44 <GUI_MEMDEV_Select>
 800ae1e:	4607      	mov	r7, r0
 800ae20:	4650      	mov	r0, sl
 800ae22:	f003 fe8b 	bl	800eb3c <GUI__AlphaPreserveTrans>
 800ae26:	4640      	mov	r0, r8
 800ae28:	f000 f8b4 	bl	800af94 <GUI_MEMDEV_GetDataPtr>
 800ae2c:	4b2d      	ldr	r3, [pc, #180]	; (800aee4 <_CreateStaticDevice+0x15c>)
 800ae2e:	fb05 f206 	mul.w	r2, r5, r6
 800ae32:	7819      	ldrb	r1, [r3, #0]
 800ae34:	4d2c      	ldr	r5, [pc, #176]	; (800aee8 <_CreateStaticDevice+0x160>)
 800ae36:	4e2d      	ldr	r6, [pc, #180]	; (800aeec <_CreateStaticDevice+0x164>)
 800ae38:	0092      	lsls	r2, r2, #2
 800ae3a:	f002 fddc 	bl	800d9f6 <GUI__memset>
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f8d5 8000 	ldr.w	r8, [r5]
 800ae44:	6034      	str	r4, [r6, #0]
 800ae46:	f006 fdca 	bl	80119de <WM_GetWindowOrgX>
 800ae4a:	6028      	str	r0, [r5, #0]
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f7ff fd5d 	bl	800a90c <WM__Paint1>
 800ae52:	2000      	movs	r0, #0
 800ae54:	f8c5 8000 	str.w	r8, [r5]
 800ae58:	6030      	str	r0, [r6, #0]
 800ae5a:	f003 fe6f 	bl	800eb3c <GUI__AlphaPreserveTrans>
 800ae5e:	4638      	mov	r0, r7
 800ae60:	f000 ff70 	bl	800bd44 <GUI_MEMDEV_Select>
 800ae64:	4620      	mov	r0, r4
 800ae66:	f004 ff71 	bl	800fd4c <GUI_ALLOC_h2p>
 800ae6a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800ae6c:	e037      	b.n	800aede <_CreateStaticDevice+0x156>
 800ae6e:	2000      	movs	r0, #0
 800ae70:	e035      	b.n	800aede <_CreateStaticDevice+0x156>
 800ae72:	f7fe fd3f 	bl	80098f4 <WM_GetDesktopWindow>
 800ae76:	4284      	cmp	r4, r0
 800ae78:	d112      	bne.n	800aea0 <_CreateStaticDevice+0x118>
 800ae7a:	f002 f95d 	bl	800d138 <LCD_GetXSize>
 800ae7e:	4682      	mov	sl, r0
 800ae80:	f002 f962 	bl	800d148 <LCD_GetYSize>
 800ae84:	4556      	cmp	r6, sl
 800ae86:	dc02      	bgt.n	800ae8e <_CreateStaticDevice+0x106>
 800ae88:	4285      	cmp	r5, r0
 800ae8a:	dd09      	ble.n	800aea0 <_CreateStaticDevice+0x118>
 800ae8c:	e000      	b.n	800ae90 <_CreateStaticDevice+0x108>
 800ae8e:	4656      	mov	r6, sl
 800ae90:	4285      	cmp	r5, r0
 800ae92:	bfa8      	it	ge
 800ae94:	4605      	movge	r5, r0
 800ae96:	4631      	mov	r1, r6
 800ae98:	4620      	mov	r0, r4
 800ae9a:	462a      	mov	r2, r5
 800ae9c:	f7fe f965 	bl	800916a <WM_SetSize>
 800aea0:	4b13      	ldr	r3, [pc, #76]	; (800aef0 <_CreateStaticDevice+0x168>)
 800aea2:	9301      	str	r3, [sp, #4]
 800aea4:	f04f 0a01 	mov.w	sl, #1
 800aea8:	4b12      	ldr	r3, [pc, #72]	; (800aef4 <_CreateStaticDevice+0x16c>)
 800aeaa:	9302      	str	r3, [sp, #8]
 800aeac:	4640      	mov	r0, r8
 800aeae:	4649      	mov	r1, r9
 800aeb0:	4632      	mov	r2, r6
 800aeb2:	462b      	mov	r3, r5
 800aeb4:	f8cd a000 	str.w	sl, [sp]
 800aeb8:	f000 fe4e 	bl	800bb58 <GUI_MEMDEV__CreateFixed>
 800aebc:	4680      	mov	r8, r0
 800aebe:	4620      	mov	r0, r4
 800aec0:	f004 ff4e 	bl	800fd60 <GUI_ALLOC_LockH>
 800aec4:	9005      	str	r0, [sp, #20]
 800aec6:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 800aeca:	f1b8 0f00 	cmp.w	r8, #0
 800aece:	d19c      	bne.n	800ae0a <_CreateStaticDevice+0x82>
 800aed0:	4638      	mov	r0, r7
 800aed2:	f004 ff53 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800aed6:	4620      	mov	r0, r4
 800aed8:	f7ff fd18 	bl	800a90c <WM__Paint1>
 800aedc:	4640      	mov	r0, r8
 800aede:	b007      	add	sp, #28
 800aee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee4:	200000b0 	.word	0x200000b0
 800aee8:	2001d4e8 	.word	0x2001d4e8
 800aeec:	2001d4d8 	.word	0x2001d4d8
 800aef0:	080173d0 	.word	0x080173d0
 800aef4:	0801a930 	.word	0x0801a930

0800aef8 <GUI_MEMDEV_Paint1Static>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4605      	mov	r5, r0
 800aefc:	2405      	movs	r4, #5
 800aefe:	4628      	mov	r0, r5
 800af00:	f7ff ff42 	bl	800ad88 <_CreateStaticDevice>
 800af04:	b910      	cbnz	r0, 800af0c <GUI_MEMDEV_Paint1Static+0x14>
 800af06:	3c01      	subs	r4, #1
 800af08:	d1f9      	bne.n	800aefe <GUI_MEMDEV_Paint1Static+0x6>
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
 800af0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af10:	f007 baa6 	b.w	8012460 <GUI_MEMDEV_Write>

0800af14 <GUI_MEMDEV_SetOrg>:
 800af14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af16:	460d      	mov	r5, r1
 800af18:	4614      	mov	r4, r2
 800af1a:	b918      	cbnz	r0, 800af24 <GUI_MEMDEV_SetOrg+0x10>
 800af1c:	4b11      	ldr	r3, [pc, #68]	; (800af64 <GUI_MEMDEV_SetOrg+0x50>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800af22:	b1e8      	cbz	r0, 800af60 <GUI_MEMDEV_SetOrg+0x4c>
 800af24:	f004 ff1c 	bl	800fd60 <GUI_ALLOC_LockH>
 800af28:	b2a4      	uxth	r4, r4
 800af2a:	b2ad      	uxth	r5, r5
 800af2c:	80c4      	strh	r4, [r0, #6]
 800af2e:	8085      	strh	r5, [r0, #4]
 800af30:	9000      	str	r0, [sp, #0]
 800af32:	f002 fc67 	bl	800d804 <LCD_SetClipRectMax>
 800af36:	9b00      	ldr	r3, [sp, #0]
 800af38:	6958      	ldr	r0, [r3, #20]
 800af3a:	b170      	cbz	r0, 800af5a <GUI_MEMDEV_SetOrg+0x46>
 800af3c:	f004 ff10 	bl	800fd60 <GUI_ALLOC_LockH>
 800af40:	9b00      	ldr	r3, [sp, #0]
 800af42:	9001      	str	r0, [sp, #4]
 800af44:	891a      	ldrh	r2, [r3, #8]
 800af46:	895b      	ldrh	r3, [r3, #10]
 800af48:	8082      	strh	r2, [r0, #4]
 800af4a:	80c3      	strh	r3, [r0, #6]
 800af4c:	b112      	cbz	r2, 800af54 <GUI_MEMDEV_SetOrg+0x40>
 800af4e:	b10b      	cbz	r3, 800af54 <GUI_MEMDEV_SetOrg+0x40>
 800af50:	8005      	strh	r5, [r0, #0]
 800af52:	8044      	strh	r4, [r0, #2]
 800af54:	a801      	add	r0, sp, #4
 800af56:	f004 ff11 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800af5a:	4668      	mov	r0, sp
 800af5c:	f004 ff0e 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800af60:	b003      	add	sp, #12
 800af62:	bd30      	pop	{r4, r5, pc}
 800af64:	200000d8 	.word	0x200000d8

0800af68 <GUI_MEMDEV_GetYSize>:
 800af68:	b513      	push	{r0, r1, r4, lr}
 800af6a:	b920      	cbnz	r0, 800af76 <GUI_MEMDEV_GetYSize+0xe>
 800af6c:	4b08      	ldr	r3, [pc, #32]	; (800af90 <GUI_MEMDEV_GetYSize+0x28>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800af72:	4604      	mov	r4, r0
 800af74:	b148      	cbz	r0, 800af8a <GUI_MEMDEV_GetYSize+0x22>
 800af76:	f004 fef3 	bl	800fd60 <GUI_ALLOC_LockH>
 800af7a:	ab02      	add	r3, sp, #8
 800af7c:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800af80:	f843 0d04 	str.w	r0, [r3, #-4]!
 800af84:	4618      	mov	r0, r3
 800af86:	f004 fef9 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800af8a:	4620      	mov	r0, r4
 800af8c:	b002      	add	sp, #8
 800af8e:	bd10      	pop	{r4, pc}
 800af90:	200000d8 	.word	0x200000d8

0800af94 <GUI_MEMDEV_GetDataPtr>:
 800af94:	b513      	push	{r0, r1, r4, lr}
 800af96:	b150      	cbz	r0, 800afae <GUI_MEMDEV_GetDataPtr+0x1a>
 800af98:	f004 fee2 	bl	800fd60 <GUI_ALLOC_LockH>
 800af9c:	4604      	mov	r4, r0
 800af9e:	a802      	add	r0, sp, #8
 800afa0:	f840 4d04 	str.w	r4, [r0, #-4]!
 800afa4:	f004 feea 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800afa8:	f104 0018 	add.w	r0, r4, #24
 800afac:	e7ff      	b.n	800afae <GUI_MEMDEV_GetDataPtr+0x1a>
 800afae:	b002      	add	sp, #8
 800afb0:	bd10      	pop	{r4, pc}
	...

0800afb4 <GUI_MEMDEV_Draw>:
 800afb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb8:	461e      	mov	r6, r3
 800afba:	b089      	sub	sp, #36	; 0x24
 800afbc:	4b4e      	ldr	r3, [pc, #312]	; (800b0f8 <GUI_MEMDEV_Draw+0x144>)
 800afbe:	9204      	str	r2, [sp, #16]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	9103      	str	r1, [sp, #12]
 800afc4:	7c54      	ldrb	r4, [r2, #17]
 800afc6:	4a4d      	ldr	r2, [pc, #308]	; (800b0fc <GUI_MEMDEV_Draw+0x148>)
 800afc8:	5712      	ldrsb	r2, [r2, r4]
 800afca:	2a01      	cmp	r2, #1
 800afcc:	4605      	mov	r5, r0
 800afce:	469b      	mov	fp, r3
 800afd0:	4620      	mov	r0, r4
 800afd2:	dd06      	ble.n	800afe2 <GUI_MEMDEV_Draw+0x2e>
 800afd4:	f002 f89e 	bl	800d114 <LCD_GetXSizeEx>
 800afd8:	4607      	mov	r7, r0
 800afda:	4620      	mov	r0, r4
 800afdc:	f002 f89d 	bl	800d11a <LCD_GetYSizeEx>
 800afe0:	e005      	b.n	800afee <GUI_MEMDEV_Draw+0x3a>
 800afe2:	f002 f89d 	bl	800d120 <LCD_GetVXSizeEx>
 800afe6:	4607      	mov	r7, r0
 800afe8:	4620      	mov	r0, r4
 800afea:	f002 f89c 	bl	800d126 <LCD_GetVYSizeEx>
 800afee:	4604      	mov	r4, r0
 800aff0:	b325      	cbz	r5, 800b03c <GUI_MEMDEV_Draw+0x88>
 800aff2:	a806      	add	r0, sp, #24
 800aff4:	a907      	add	r1, sp, #28
 800aff6:	f003 ff55 	bl	800eea4 <GUI_GetOrg>
 800affa:	9b06      	ldr	r3, [sp, #24]
 800affc:	f9b5 a000 	ldrsh.w	sl, [r5]
 800b000:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800b004:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 800b008:	441f      	add	r7, r3
 800b00a:	9b07      	ldr	r3, [sp, #28]
 800b00c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b010:	3f01      	subs	r7, #1
 800b012:	4297      	cmp	r7, r2
 800b014:	bfd4      	ite	le
 800b016:	ebca 0707 	rsble	r7, sl, r7
 800b01a:	ebca 0702 	rsbgt	r7, sl, r2
 800b01e:	441c      	add	r4, r3
 800b020:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800b024:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800b028:	3c01      	subs	r4, #1
 800b02a:	4294      	cmp	r4, r2
 800b02c:	bfd4      	ite	le
 800b02e:	ebc8 0404 	rsble	r4, r8, r4
 800b032:	ebc8 0402 	rsbgt	r4, r8, r2
 800b036:	3701      	adds	r7, #1
 800b038:	3401      	adds	r4, #1
 800b03a:	e001      	b.n	800b040 <GUI_MEMDEV_Draw+0x8c>
 800b03c:	46a8      	mov	r8, r5
 800b03e:	46aa      	mov	sl, r5
 800b040:	b906      	cbnz	r6, 800b044 <GUI_MEMDEV_Draw+0x90>
 800b042:	4266      	negs	r6, r4
 800b044:	2f00      	cmp	r7, #0
 800b046:	dd52      	ble.n	800b0ee <GUI_MEMDEV_Draw+0x13a>
 800b048:	2c00      	cmp	r4, #0
 800b04a:	dd50      	ble.n	800b0ee <GUI_MEMDEV_Draw+0x13a>
 800b04c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	4650      	mov	r0, sl
 800b052:	4641      	mov	r1, r8
 800b054:	463a      	mov	r2, r7
 800b056:	4633      	mov	r3, r6
 800b058:	f000 fe38 	bl	800bccc <GUI_MEMDEV_CreateEx>
 800b05c:	4605      	mov	r5, r0
 800b05e:	b920      	cbnz	r0, 800b06a <GUI_MEMDEV_Draw+0xb6>
 800b060:	9804      	ldr	r0, [sp, #16]
 800b062:	9b03      	ldr	r3, [sp, #12]
 800b064:	4798      	blx	r3
 800b066:	2001      	movs	r0, #1
 800b068:	e042      	b.n	800b0f0 <GUI_MEMDEV_Draw+0x13c>
 800b06a:	f7ff ff7d 	bl	800af68 <GUI_MEMDEV_GetYSize>
 800b06e:	42a0      	cmp	r0, r4
 800b070:	4606      	mov	r6, r0
 800b072:	d006      	beq.n	800b082 <GUI_MEMDEV_Draw+0xce>
 800b074:	f8db 3000 	ldr.w	r3, [fp]
 800b078:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b07a:	b110      	cbz	r0, 800b082 <GUI_MEMDEV_Draw+0xce>
 800b07c:	2132      	movs	r1, #50	; 0x32
 800b07e:	f006 f8c5 	bl	801120c <WM__SendMessageNoPara>
 800b082:	4628      	mov	r0, r5
 800b084:	f000 fe5e 	bl	800bd44 <GUI_MEMDEV_Select>
 800b088:	4273      	negs	r3, r6
 800b08a:	9305      	str	r3, [sp, #20]
 800b08c:	46a1      	mov	r9, r4
 800b08e:	2700      	movs	r7, #0
 800b090:	45b1      	cmp	r9, r6
 800b092:	da03      	bge.n	800b09c <GUI_MEMDEV_Draw+0xe8>
 800b094:	4628      	mov	r0, r5
 800b096:	4649      	mov	r1, r9
 800b098:	f007 fae2 	bl	8012660 <GUI_MEMDEV_ReduceYSize>
 800b09c:	b147      	cbz	r7, 800b0b0 <GUI_MEMDEV_Draw+0xfc>
 800b09e:	4628      	mov	r0, r5
 800b0a0:	4651      	mov	r1, sl
 800b0a2:	eb07 0208 	add.w	r2, r7, r8
 800b0a6:	f7ff ff35 	bl	800af14 <GUI_MEMDEV_SetOrg>
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f007 faee 	bl	801268c <GUI_MEMDEV_Clear>
 800b0b0:	9b03      	ldr	r3, [sp, #12]
 800b0b2:	9804      	ldr	r0, [sp, #16]
 800b0b4:	4798      	blx	r3
 800b0b6:	4b12      	ldr	r3, [pc, #72]	; (800b100 <GUI_MEMDEV_Draw+0x14c>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	b10b      	cbz	r3, 800b0c0 <GUI_MEMDEV_Draw+0x10c>
 800b0bc:	2000      	movs	r0, #0
 800b0be:	4798      	blx	r3
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	f000 feb7 	bl	800be34 <GUI_MEMDEV_CopyToLCD>
 800b0c6:	4437      	add	r7, r6
 800b0c8:	9b05      	ldr	r3, [sp, #20]
 800b0ca:	42a7      	cmp	r7, r4
 800b0cc:	4499      	add	r9, r3
 800b0ce:	dbdf      	blt.n	800b090 <GUI_MEMDEV_Draw+0xdc>
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	f000 fdd9 	bl	800bc88 <GUI_MEMDEV_Delete>
 800b0d6:	2000      	movs	r0, #0
 800b0d8:	f000 fe34 	bl	800bd44 <GUI_MEMDEV_Select>
 800b0dc:	42a6      	cmp	r6, r4
 800b0de:	d006      	beq.n	800b0ee <GUI_MEMDEV_Draw+0x13a>
 800b0e0:	f8db 3000 	ldr.w	r3, [fp]
 800b0e4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b0e6:	b110      	cbz	r0, 800b0ee <GUI_MEMDEV_Draw+0x13a>
 800b0e8:	2133      	movs	r1, #51	; 0x33
 800b0ea:	f006 f88f 	bl	801120c <WM__SendMessageNoPara>
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	b009      	add	sp, #36	; 0x24
 800b0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f6:	bf00      	nop
 800b0f8:	200000d8 	.word	0x200000d8
 800b0fc:	2001d4e0 	.word	0x2001d4e0
 800b100:	2001d078 	.word	0x2001d078

0800b104 <_GetDevData>:
 800b104:	4802      	ldr	r0, [pc, #8]	; (800b110 <_GetDevData+0xc>)
 800b106:	2901      	cmp	r1, #1
 800b108:	bf18      	it	ne
 800b10a:	2000      	movne	r0, #0
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	080173d0 	.word	0x080173d0

0800b114 <_GetDevFunc>:
 800b114:	4802      	ldr	r0, [pc, #8]	; (800b120 <_GetDevFunc+0xc>)
 800b116:	2916      	cmp	r1, #22
 800b118:	bf18      	it	ne
 800b11a:	2000      	movne	r0, #0
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	08012271 	.word	0x08012271

0800b124 <_GetDevProp>:
 800b124:	2908      	cmp	r1, #8
 800b126:	bf0c      	ite	eq
 800b128:	2020      	moveq	r0, #32
 800b12a:	2000      	movne	r0, #0
 800b12c:	4770      	bx	lr

0800b12e <_SetOrg>:
 800b12e:	b508      	push	{r3, lr}
 800b130:	6800      	ldr	r0, [r0, #0]
 800b132:	68c3      	ldr	r3, [r0, #12]
 800b134:	6a1b      	ldr	r3, [r3, #32]
 800b136:	4798      	blx	r3
 800b138:	bd08      	pop	{r3, pc}

0800b13a <_GetRect>:
 800b13a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b13c:	6880      	ldr	r0, [r0, #8]
 800b13e:	460c      	mov	r4, r1
 800b140:	f004 fe0e 	bl	800fd60 <GUI_ALLOC_LockH>
 800b144:	4603      	mov	r3, r0
 800b146:	a802      	add	r0, sp, #8
 800b148:	8899      	ldrh	r1, [r3, #4]
 800b14a:	88da      	ldrh	r2, [r3, #6]
 800b14c:	891d      	ldrh	r5, [r3, #8]
 800b14e:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b152:	895b      	ldrh	r3, [r3, #10]
 800b154:	8021      	strh	r1, [r4, #0]
 800b156:	8062      	strh	r2, [r4, #2]
 800b158:	4429      	add	r1, r5
 800b15a:	441a      	add	r2, r3
 800b15c:	3901      	subs	r1, #1
 800b15e:	3a01      	subs	r2, #1
 800b160:	80a1      	strh	r1, [r4, #4]
 800b162:	80e2      	strh	r2, [r4, #6]
 800b164:	f004 fe0a 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800b168:	b003      	add	sp, #12
 800b16a:	bd30      	pop	{r4, r5, pc}

0800b16c <_XY2PTR>:
 800b16c:	4b0e      	ldr	r3, [pc, #56]	; (800b1a8 <_XY2PTR+0x3c>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b172:	4605      	mov	r5, r0
 800b174:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b176:	460e      	mov	r6, r1
 800b178:	f004 fdf2 	bl	800fd60 <GUI_ALLOC_LockH>
 800b17c:	4603      	mov	r3, r0
 800b17e:	a802      	add	r0, sp, #8
 800b180:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800b184:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b188:	f103 0118 	add.w	r1, r3, #24
 800b18c:	1b36      	subs	r6, r6, r4
 800b18e:	68dc      	ldr	r4, [r3, #12]
 800b190:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b194:	fb04 1406 	mla	r4, r4, r6, r1
 800b198:	1aed      	subs	r5, r5, r3
 800b19a:	f004 fdef 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800b19e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	b002      	add	sp, #8
 800b1a6:	bd70      	pop	{r4, r5, r6, pc}
 800b1a8:	200000d8 	.word	0x200000d8

0800b1ac <_GetPixelIndex>:
 800b1ac:	b508      	push	{r3, lr}
 800b1ae:	4608      	mov	r0, r1
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	f7ff ffdb 	bl	800b16c <_XY2PTR>
 800b1b6:	6800      	ldr	r0, [r0, #0]
 800b1b8:	bd08      	pop	{r3, pc}
	...

0800b1bc <_XorPixel>:
 800b1bc:	4b15      	ldr	r3, [pc, #84]	; (800b214 <_XorPixel+0x58>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1c2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b1c4:	4615      	mov	r5, r2
 800b1c6:	460e      	mov	r6, r1
 800b1c8:	f004 fdca 	bl	800fd60 <GUI_ALLOC_LockH>
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	9000      	str	r0, [sp, #0]
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	f7ff ffcb 	bl	800b16c <_XY2PTR>
 800b1d6:	9b00      	ldr	r3, [sp, #0]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	691b      	ldr	r3, [r3, #16]
 800b1dc:	4604      	mov	r4, r0
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	4798      	blx	r3
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	4058      	eors	r0, r3
 800b1e6:	9b00      	ldr	r3, [sp, #0]
 800b1e8:	6020      	str	r0, [r4, #0]
 800b1ea:	6958      	ldr	r0, [r3, #20]
 800b1ec:	b160      	cbz	r0, 800b208 <_XorPixel+0x4c>
 800b1ee:	f004 fdb7 	bl	800fd60 <GUI_ALLOC_LockH>
 800b1f2:	ac02      	add	r4, sp, #8
 800b1f4:	6883      	ldr	r3, [r0, #8]
 800b1f6:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4631      	mov	r1, r6
 800b1fe:	462a      	mov	r2, r5
 800b200:	4798      	blx	r3
 800b202:	4620      	mov	r0, r4
 800b204:	f004 fdba 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800b208:	4668      	mov	r0, sp
 800b20a:	f004 fdb7 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800b20e:	b002      	add	sp, #8
 800b210:	bd70      	pop	{r4, r5, r6, pc}
 800b212:	bf00      	nop
 800b214:	200000d8 	.word	0x200000d8

0800b218 <_SetPixelIndex>:
 800b218:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b21a:	461c      	mov	r4, r3
 800b21c:	4b10      	ldr	r3, [pc, #64]	; (800b260 <_SetPixelIndex+0x48>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b222:	460e      	mov	r6, r1
 800b224:	4615      	mov	r5, r2
 800b226:	f004 fd9b 	bl	800fd60 <GUI_ALLOC_LockH>
 800b22a:	4629      	mov	r1, r5
 800b22c:	9000      	str	r0, [sp, #0]
 800b22e:	4630      	mov	r0, r6
 800b230:	f7ff ff9c 	bl	800b16c <_XY2PTR>
 800b234:	9b00      	ldr	r3, [sp, #0]
 800b236:	6004      	str	r4, [r0, #0]
 800b238:	6958      	ldr	r0, [r3, #20]
 800b23a:	b160      	cbz	r0, 800b256 <_SetPixelIndex+0x3e>
 800b23c:	f004 fd90 	bl	800fd60 <GUI_ALLOC_LockH>
 800b240:	ac02      	add	r4, sp, #8
 800b242:	6883      	ldr	r3, [r0, #8]
 800b244:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4631      	mov	r1, r6
 800b24c:	462a      	mov	r2, r5
 800b24e:	4798      	blx	r3
 800b250:	4620      	mov	r0, r4
 800b252:	f004 fd93 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800b256:	4668      	mov	r0, sp
 800b258:	f004 fd90 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800b25c:	b002      	add	sp, #8
 800b25e:	bd70      	pop	{r4, r5, r6, pc}
 800b260:	200000d8 	.word	0x200000d8

0800b264 <_DrawVLine>:
 800b264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b268:	4d2c      	ldr	r5, [pc, #176]	; (800b31c <_DrawVLine+0xb8>)
 800b26a:	461e      	mov	r6, r3
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b270:	460f      	mov	r7, r1
 800b272:	4614      	mov	r4, r2
 800b274:	f004 fd74 	bl	800fd60 <GUI_ALLOC_LockH>
 800b278:	9000      	str	r0, [sp, #0]
 800b27a:	6940      	ldr	r0, [r0, #20]
 800b27c:	46a9      	mov	r9, r5
 800b27e:	b108      	cbz	r0, 800b284 <_DrawVLine+0x20>
 800b280:	f004 fd6e 	bl	800fd60 <GUI_ALLOC_LockH>
 800b284:	9001      	str	r0, [sp, #4]
 800b286:	4621      	mov	r1, r4
 800b288:	4638      	mov	r0, r7
 800b28a:	f7ff ff6f 	bl	800b16c <_XY2PTR>
 800b28e:	f8d9 2000 	ldr.w	r2, [r9]
 800b292:	9b00      	ldr	r3, [sp, #0]
 800b294:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b296:	7c12      	ldrb	r2, [r2, #16]
 800b298:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800b29c:	f8d1 9000 	ldr.w	r9, [r1]
 800b2a0:	07d2      	lsls	r2, r2, #31
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	d51f      	bpl.n	800b2e6 <_DrawVLine+0x82>
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	4798      	blx	r3
 800b2ae:	4680      	mov	r8, r0
 800b2b0:	9801      	ldr	r0, [sp, #4]
 800b2b2:	b128      	cbz	r0, 800b2c0 <_DrawVLine+0x5c>
 800b2b4:	6882      	ldr	r2, [r0, #8]
 800b2b6:	4639      	mov	r1, r7
 800b2b8:	f8d2 c000 	ldr.w	ip, [r2]
 800b2bc:	4622      	mov	r2, r4
 800b2be:	47e0      	blx	ip
 800b2c0:	682b      	ldr	r3, [r5, #0]
 800b2c2:	ea83 0308 	eor.w	r3, r3, r8
 800b2c6:	602b      	str	r3, [r5, #0]
 800b2c8:	9b00      	ldr	r3, [sp, #0]
 800b2ca:	3401      	adds	r4, #1
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	42b4      	cmp	r4, r6
 800b2d0:	441d      	add	r5, r3
 800b2d2:	dded      	ble.n	800b2b0 <_DrawVLine+0x4c>
 800b2d4:	4668      	mov	r0, sp
 800b2d6:	f004 fd51 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800b2da:	9b01      	ldr	r3, [sp, #4]
 800b2dc:	b1d3      	cbz	r3, 800b314 <_DrawVLine+0xb0>
 800b2de:	a801      	add	r0, sp, #4
 800b2e0:	f004 fd4c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800b2e4:	e016      	b.n	800b314 <_DrawVLine+0xb0>
 800b2e6:	9b01      	ldr	r3, [sp, #4]
 800b2e8:	b163      	cbz	r3, 800b304 <_DrawVLine+0xa0>
 800b2ea:	9801      	ldr	r0, [sp, #4]
 800b2ec:	6883      	ldr	r3, [r0, #8]
 800b2ee:	4622      	mov	r2, r4
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4639      	mov	r1, r7
 800b2f4:	3401      	adds	r4, #1
 800b2f6:	4798      	blx	r3
 800b2f8:	42b4      	cmp	r4, r6
 800b2fa:	f8c5 9000 	str.w	r9, [r5]
 800b2fe:	4445      	add	r5, r8
 800b300:	ddf3      	ble.n	800b2ea <_DrawVLine+0x86>
 800b302:	e7e7      	b.n	800b2d4 <_DrawVLine+0x70>
 800b304:	1b34      	subs	r4, r6, r4
 800b306:	3401      	adds	r4, #1
 800b308:	3c01      	subs	r4, #1
 800b30a:	f8c5 9000 	str.w	r9, [r5]
 800b30e:	4445      	add	r5, r8
 800b310:	d1fa      	bne.n	800b308 <_DrawVLine+0xa4>
 800b312:	e7df      	b.n	800b2d4 <_DrawVLine+0x70>
 800b314:	b003      	add	sp, #12
 800b316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b31a:	bf00      	nop
 800b31c:	200000d8 	.word	0x200000d8

0800b320 <_FillRect>:
 800b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b324:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b3d4 <_FillRect+0xb4>
 800b328:	4614      	mov	r4, r2
 800b32a:	f8db 2000 	ldr.w	r2, [fp]
 800b32e:	b085      	sub	sp, #20
 800b330:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800b332:	460f      	mov	r7, r1
 800b334:	461d      	mov	r5, r3
 800b336:	f004 fd13 	bl	800fd60 <GUI_ALLOC_LockH>
 800b33a:	4621      	mov	r1, r4
 800b33c:	9002      	str	r0, [sp, #8]
 800b33e:	4638      	mov	r0, r7
 800b340:	f7ff ff14 	bl	800b16c <_XY2PTR>
 800b344:	9a02      	ldr	r2, [sp, #8]
 800b346:	f8db 3000 	ldr.w	r3, [fp]
 800b34a:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800b34e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b350:	4606      	mov	r6, r0
 800b352:	6950      	ldr	r0, [r2, #20]
 800b354:	f8d3 a000 	ldr.w	sl, [r3]
 800b358:	1bed      	subs	r5, r5, r7
 800b35a:	3501      	adds	r5, #1
 800b35c:	b338      	cbz	r0, 800b3ae <_FillRect+0x8e>
 800b35e:	f004 fcff 	bl	800fd60 <GUI_ALLOC_LockH>
 800b362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b364:	f10d 0810 	add.w	r8, sp, #16
 800b368:	1b13      	subs	r3, r2, r4
 800b36a:	f848 0d04 	str.w	r0, [r8, #-4]!
 800b36e:	3301      	adds	r3, #1
 800b370:	9300      	str	r3, [sp, #0]
 800b372:	4639      	mov	r1, r7
 800b374:	4622      	mov	r2, r4
 800b376:	462b      	mov	r3, r5
 800b378:	f007 f95c 	bl	8012634 <GUI_USAGE_AddRect>
 800b37c:	4640      	mov	r0, r8
 800b37e:	f004 fcfd 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800b382:	e014      	b.n	800b3ae <_FillRect+0x8e>
 800b384:	f8db 3000 	ldr.w	r3, [fp]
 800b388:	7c1b      	ldrb	r3, [r3, #16]
 800b38a:	07db      	lsls	r3, r3, #31
 800b38c:	d513      	bpl.n	800b3b6 <_FillRect+0x96>
 800b38e:	9b02      	ldr	r3, [sp, #8]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	4798      	blx	r3
 800b398:	4632      	mov	r2, r6
 800b39a:	462b      	mov	r3, r5
 800b39c:	6811      	ldr	r1, [r2, #0]
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	ea81 0100 	eor.w	r1, r1, r0
 800b3a4:	f842 1b04 	str.w	r1, [r2], #4
 800b3a8:	d1f8      	bne.n	800b39c <_FillRect+0x7c>
 800b3aa:	444e      	add	r6, r9
 800b3ac:	3401      	adds	r4, #1
 800b3ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3b0:	429c      	cmp	r4, r3
 800b3b2:	dde7      	ble.n	800b384 <_FillRect+0x64>
 800b3b4:	e008      	b.n	800b3c8 <_FillRect+0xa8>
 800b3b6:	2d00      	cmp	r5, #0
 800b3b8:	ddf7      	ble.n	800b3aa <_FillRect+0x8a>
 800b3ba:	462b      	mov	r3, r5
 800b3bc:	4632      	mov	r2, r6
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	f842 ab04 	str.w	sl, [r2], #4
 800b3c4:	d1fb      	bne.n	800b3be <_FillRect+0x9e>
 800b3c6:	e7f0      	b.n	800b3aa <_FillRect+0x8a>
 800b3c8:	a802      	add	r0, sp, #8
 800b3ca:	f004 fcd7 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800b3ce:	b005      	add	sp, #20
 800b3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d4:	200000d8 	.word	0x200000d8

0800b3d8 <_DrawHLine>:
 800b3d8:	b507      	push	{r0, r1, r2, lr}
 800b3da:	9200      	str	r2, [sp, #0]
 800b3dc:	f7ff ffa0 	bl	800b320 <_FillRect>
 800b3e0:	b003      	add	sp, #12
 800b3e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b3e8 <_DrawBitmap>:
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	4c9d      	ldr	r4, [pc, #628]	; (800b664 <_DrawBitmap+0x27c>)
 800b3ee:	469a      	mov	sl, r3
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	b091      	sub	sp, #68	; 0x44
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b3f8:	9207      	str	r2, [sp, #28]
 800b3fa:	460e      	mov	r6, r1
 800b3fc:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800b400:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800b402:	2800      	cmp	r0, #0
 800b404:	f000 8387 	beq.w	800bb16 <_DrawBitmap+0x72e>
 800b408:	f004 fcaa 	bl	800fd60 <GUI_ALLOC_LockH>
 800b40c:	900e      	str	r0, [sp, #56]	; 0x38
 800b40e:	6940      	ldr	r0, [r0, #20]
 800b410:	b108      	cbz	r0, 800b416 <_DrawBitmap+0x2e>
 800b412:	f004 fca5 	bl	800fd60 <GUI_ALLOC_LockH>
 800b416:	900f      	str	r0, [sp, #60]	; 0x3c
 800b418:	a810      	add	r0, sp, #64	; 0x40
 800b41a:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	930a      	str	r3, [sp, #40]	; 0x28
 800b422:	f004 fcab 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800b426:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b428:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b42a:	4437      	add	r7, r6
 800b42c:	9704      	str	r7, [sp, #16]
 800b42e:	b150      	cbz	r0, 800b446 <_DrawBitmap+0x5e>
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	7c1b      	ldrb	r3, [r3, #16]
 800b434:	079c      	lsls	r4, r3, #30
 800b436:	d406      	bmi.n	800b446 <_DrawBitmap+0x5e>
 800b438:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b43a:	9700      	str	r7, [sp, #0]
 800b43c:	9904      	ldr	r1, [sp, #16]
 800b43e:	9a07      	ldr	r2, [sp, #28]
 800b440:	4653      	mov	r3, sl
 800b442:	f007 f8f7 	bl	8012634 <GUI_USAGE_AddRect>
 800b446:	9804      	ldr	r0, [sp, #16]
 800b448:	9907      	ldr	r1, [sp, #28]
 800b44a:	f7ff fe8f 	bl	800b16c <_XY2PTR>
 800b44e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b450:	2f17      	cmp	r7, #23
 800b452:	4606      	mov	r6, r0
 800b454:	dd64      	ble.n	800b520 <_DrawBitmap+0x138>
 800b456:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800b45a:	9706      	str	r7, [sp, #24]
 800b45c:	f04f 0900 	mov.w	r9, #0
 800b460:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b462:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b464:	45b9      	cmp	r9, r7
 800b466:	da57      	bge.n	800b518 <_DrawBitmap+0x130>
 800b468:	b130      	cbz	r0, 800b478 <_DrawBitmap+0x90>
 800b46a:	6883      	ldr	r3, [r0, #8]
 800b46c:	9a07      	ldr	r2, [sp, #28]
 800b46e:	685c      	ldr	r4, [r3, #4]
 800b470:	9904      	ldr	r1, [sp, #16]
 800b472:	444a      	add	r2, r9
 800b474:	4653      	mov	r3, sl
 800b476:	47a0      	blx	r4
 800b478:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b47c:	68d8      	ldr	r0, [r3, #12]
 800b47e:	b128      	cbz	r0, 800b48c <_DrawBitmap+0xa4>
 800b480:	4630      	mov	r0, r6
 800b482:	4659      	mov	r1, fp
 800b484:	9a06      	ldr	r2, [sp, #24]
 800b486:	f00b f9f7 	bl	8016878 <memcpy>
 800b48a:	e03e      	b.n	800b50a <_DrawBitmap+0x122>
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	4798      	blx	r3
 800b490:	0e00      	lsrs	r0, r0, #24
 800b492:	9005      	str	r0, [sp, #20]
 800b494:	4635      	mov	r5, r6
 800b496:	4657      	mov	r7, sl
 800b498:	465c      	mov	r4, fp
 800b49a:	463b      	mov	r3, r7
 800b49c:	4622      	mov	r2, r4
 800b49e:	f04f 0c00 	mov.w	ip, #0
 800b4a2:	f852 1b04 	ldr.w	r1, [r2], #4
 800b4a6:	9805      	ldr	r0, [sp, #20]
 800b4a8:	0e09      	lsrs	r1, r1, #24
 800b4aa:	4281      	cmp	r1, r0
 800b4ac:	9805      	ldr	r0, [sp, #20]
 800b4ae:	bf08      	it	eq
 800b4b0:	f10c 0c01 	addeq.w	ip, ip, #1
 800b4b4:	4281      	cmp	r1, r0
 800b4b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800b4ba:	d014      	beq.n	800b4e6 <_DrawBitmap+0xfe>
 800b4bc:	f1bc 0f00 	cmp.w	ip, #0
 800b4c0:	d014      	beq.n	800b4ec <_DrawBitmap+0x104>
 800b4c2:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	9303      	str	r3, [sp, #12]
 800b4ce:	f8cd c008 	str.w	ip, [sp, #8]
 800b4d2:	f00b f9d1 	bl	8016878 <memcpy>
 800b4d6:	9b03      	ldr	r3, [sp, #12]
 800b4d8:	f8dd c008 	ldr.w	ip, [sp, #8]
 800b4dc:	441d      	add	r5, r3
 800b4de:	441c      	add	r4, r3
 800b4e0:	ebcc 0707 	rsb	r7, ip, r7
 800b4e4:	e00f      	b.n	800b506 <_DrawBitmap+0x11e>
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1db      	bne.n	800b4a2 <_DrawBitmap+0xba>
 800b4ea:	e7e7      	b.n	800b4bc <_DrawBitmap+0xd4>
 800b4ec:	6820      	ldr	r0, [r4, #0]
 800b4ee:	0e02      	lsrs	r2, r0, #24
 800b4f0:	2aff      	cmp	r2, #255	; 0xff
 800b4f2:	d005      	beq.n	800b500 <_DrawBitmap+0x118>
 800b4f4:	43d2      	mvns	r2, r2
 800b4f6:	6829      	ldr	r1, [r5, #0]
 800b4f8:	b2d2      	uxtb	r2, r2
 800b4fa:	f002 fbbb 	bl	800dc74 <GUI__MixColors>
 800b4fe:	6028      	str	r0, [r5, #0]
 800b500:	3504      	adds	r5, #4
 800b502:	3404      	adds	r4, #4
 800b504:	3f01      	subs	r7, #1
 800b506:	2f00      	cmp	r7, #0
 800b508:	d1c7      	bne.n	800b49a <_DrawBitmap+0xb2>
 800b50a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b50c:	44bb      	add	fp, r7
 800b50e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b510:	f109 0901 	add.w	r9, r9, #1
 800b514:	443e      	add	r6, r7
 800b516:	e7a3      	b.n	800b460 <_DrawBitmap+0x78>
 800b518:	2800      	cmp	r0, #0
 800b51a:	f040 82f9 	bne.w	800bb10 <_DrawBitmap+0x728>
 800b51e:	e2fa      	b.n	800bb16 <_DrawBitmap+0x72e>
 800b520:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b522:	2f10      	cmp	r7, #16
 800b524:	d137      	bne.n	800b596 <_DrawBitmap+0x1ae>
 800b526:	1f06      	subs	r6, r0, #4
 800b528:	2500      	movs	r5, #0
 800b52a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b52c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800b52e:	42bd      	cmp	r5, r7
 800b530:	f280 80a0 	bge.w	800b674 <_DrawBitmap+0x28c>
 800b534:	9f07      	ldr	r7, [sp, #28]
 800b536:	442f      	add	r7, r5
 800b538:	b13c      	cbz	r4, 800b54a <_DrawBitmap+0x162>
 800b53a:	68a3      	ldr	r3, [r4, #8]
 800b53c:	9904      	ldr	r1, [sp, #16]
 800b53e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800b542:	4620      	mov	r0, r4
 800b544:	463a      	mov	r2, r7
 800b546:	4653      	mov	r3, sl
 800b548:	47e0      	blx	ip
 800b54a:	f1ab 0302 	sub.w	r3, fp, #2
 800b54e:	9306      	str	r3, [sp, #24]
 800b550:	9605      	str	r6, [sp, #20]
 800b552:	46d1      	mov	r9, sl
 800b554:	9904      	ldr	r1, [sp, #16]
 800b556:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b55a:	9a06      	ldr	r2, [sp, #24]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800b562:	9206      	str	r2, [sp, #24]
 800b564:	4451      	add	r1, sl
 800b566:	ebc9 0101 	rsb	r1, r9, r1
 800b56a:	9103      	str	r1, [sp, #12]
 800b56c:	4798      	blx	r3
 800b56e:	9b05      	ldr	r3, [sp, #20]
 800b570:	9903      	ldr	r1, [sp, #12]
 800b572:	f843 0f04 	str.w	r0, [r3, #4]!
 800b576:	9305      	str	r3, [sp, #20]
 800b578:	b124      	cbz	r4, 800b584 <_DrawBitmap+0x19c>
 800b57a:	68a3      	ldr	r3, [r4, #8]
 800b57c:	4620      	mov	r0, r4
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	463a      	mov	r2, r7
 800b582:	4798      	blx	r3
 800b584:	f1b9 0901 	subs.w	r9, r9, #1
 800b588:	d1e4      	bne.n	800b554 <_DrawBitmap+0x16c>
 800b58a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b58c:	44bb      	add	fp, r7
 800b58e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b590:	3501      	adds	r5, #1
 800b592:	443e      	add	r6, r7
 800b594:	e7c9      	b.n	800b52a <_DrawBitmap+0x142>
 800b596:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b598:	2f08      	cmp	r7, #8
 800b59a:	f100 0604 	add.w	r6, r0, #4
 800b59e:	d16d      	bne.n	800b67c <_DrawBitmap+0x294>
 800b5a0:	9f07      	ldr	r7, [sp, #28]
 800b5a2:	9907      	ldr	r1, [sp, #28]
 800b5a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b5a6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800b5a8:	1a7b      	subs	r3, r7, r1
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	f1a6 0004 	sub.w	r0, r6, #4
 800b5b0:	da60      	bge.n	800b674 <_DrawBitmap+0x28c>
 800b5b2:	4b2c      	ldr	r3, [pc, #176]	; (800b664 <_DrawBitmap+0x27c>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	7c1b      	ldrb	r3, [r3, #16]
 800b5b8:	b36d      	cbz	r5, 800b616 <_DrawBitmap+0x22e>
 800b5ba:	f013 0303 	ands.w	r3, r3, #3
 800b5be:	d005      	beq.n	800b5cc <_DrawBitmap+0x1e4>
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	d151      	bne.n	800b668 <_DrawBitmap+0x280>
 800b5c4:	46b1      	mov	r9, r6
 800b5c6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b5ca:	e01c      	b.n	800b606 <_DrawBitmap+0x21e>
 800b5cc:	f81b 2003 	ldrb.w	r2, [fp, r3]
 800b5d0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800b5d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	4553      	cmp	r3, sl
 800b5dc:	d1f6      	bne.n	800b5cc <_DrawBitmap+0x1e4>
 800b5de:	e043      	b.n	800b668 <_DrawBitmap+0x280>
 800b5e0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800b5e4:	f849 3c04 	str.w	r3, [r9, #-4]
 800b5e8:	b12c      	cbz	r4, 800b5f6 <_DrawBitmap+0x20e>
 800b5ea:	68a3      	ldr	r3, [r4, #8]
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4641      	mov	r1, r8
 800b5f2:	463a      	mov	r2, r7
 800b5f4:	4798      	blx	r3
 800b5f6:	9b04      	ldr	r3, [sp, #16]
 800b5f8:	f108 0801 	add.w	r8, r8, #1
 800b5fc:	4453      	add	r3, sl
 800b5fe:	4543      	cmp	r3, r8
 800b600:	f109 0904 	add.w	r9, r9, #4
 800b604:	d030      	beq.n	800b668 <_DrawBitmap+0x280>
 800b606:	9804      	ldr	r0, [sp, #16]
 800b608:	ebc0 030b 	rsb	r3, r0, fp
 800b60c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d0f0      	beq.n	800b5f6 <_DrawBitmap+0x20e>
 800b614:	e7e4      	b.n	800b5e0 <_DrawBitmap+0x1f8>
 800b616:	f013 0303 	ands.w	r3, r3, #3
 800b61a:	d005      	beq.n	800b628 <_DrawBitmap+0x240>
 800b61c:	2b02      	cmp	r3, #2
 800b61e:	d123      	bne.n	800b668 <_DrawBitmap+0x280>
 800b620:	46b1      	mov	r9, r6
 800b622:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b626:	e015      	b.n	800b654 <_DrawBitmap+0x26c>
 800b628:	4659      	mov	r1, fp
 800b62a:	4652      	mov	r2, sl
 800b62c:	f00b f924 	bl	8016878 <memcpy>
 800b630:	e01a      	b.n	800b668 <_DrawBitmap+0x280>
 800b632:	f849 3c04 	str.w	r3, [r9, #-4]
 800b636:	b12c      	cbz	r4, 800b644 <_DrawBitmap+0x25c>
 800b638:	68a3      	ldr	r3, [r4, #8]
 800b63a:	4620      	mov	r0, r4
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4641      	mov	r1, r8
 800b640:	463a      	mov	r2, r7
 800b642:	4798      	blx	r3
 800b644:	9b04      	ldr	r3, [sp, #16]
 800b646:	f108 0801 	add.w	r8, r8, #1
 800b64a:	4453      	add	r3, sl
 800b64c:	4543      	cmp	r3, r8
 800b64e:	f109 0904 	add.w	r9, r9, #4
 800b652:	d009      	beq.n	800b668 <_DrawBitmap+0x280>
 800b654:	9904      	ldr	r1, [sp, #16]
 800b656:	ebc1 030b 	rsb	r3, r1, fp
 800b65a:	f813 3008 	ldrb.w	r3, [r3, r8]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d0f0      	beq.n	800b644 <_DrawBitmap+0x25c>
 800b662:	e7e6      	b.n	800b632 <_DrawBitmap+0x24a>
 800b664:	200000d8 	.word	0x200000d8
 800b668:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b66a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b66c:	4493      	add	fp, r2
 800b66e:	3701      	adds	r7, #1
 800b670:	441e      	add	r6, r3
 800b672:	e796      	b.n	800b5a2 <_DrawBitmap+0x1ba>
 800b674:	2c00      	cmp	r4, #0
 800b676:	f040 824b 	bne.w	800bb10 <_DrawBitmap+0x728>
 800b67a:	e24c      	b.n	800bb16 <_DrawBitmap+0x72e>
 800b67c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b67e:	4bb2      	ldr	r3, [pc, #712]	; (800b948 <_DrawBitmap+0x560>)
 800b680:	9609      	str	r6, [sp, #36]	; 0x24
 800b682:	007f      	lsls	r7, r7, #1
 800b684:	970c      	str	r7, [sp, #48]	; 0x30
 800b686:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b688:	00bf      	lsls	r7, r7, #2
 800b68a:	970d      	str	r7, [sp, #52]	; 0x34
 800b68c:	9f07      	ldr	r7, [sp, #28]
 800b68e:	9705      	str	r7, [sp, #20]
 800b690:	2d00      	cmp	r5, #0
 800b692:	bf08      	it	eq
 800b694:	461d      	moveq	r5, r3
 800b696:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b698:	9807      	ldr	r0, [sp, #28]
 800b69a:	1f3c      	subs	r4, r7, #4
 800b69c:	9f05      	ldr	r7, [sp, #20]
 800b69e:	1a3b      	subs	r3, r7, r0
 800b6a0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b6a2:	42bb      	cmp	r3, r7
 800b6a4:	f280 8232 	bge.w	800bb0c <_DrawBitmap+0x724>
 800b6a8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b6aa:	2f02      	cmp	r7, #2
 800b6ac:	f000 80ad 	beq.w	800b80a <_DrawBitmap+0x422>
 800b6b0:	2f04      	cmp	r7, #4
 800b6b2:	f000 814f 	beq.w	800b954 <_DrawBitmap+0x56c>
 800b6b6:	2f01      	cmp	r7, #1
 800b6b8:	f040 821e 	bne.w	800baf8 <_DrawBitmap+0x710>
 800b6bc:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800b950 <_DrawBitmap+0x568>
 800b6c0:	f8d9 3000 	ldr.w	r3, [r9]
 800b6c4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b6c6:	f004 fb4b 	bl	800fd60 <GUI_ALLOC_LockH>
 800b6ca:	f89b 3000 	ldrb.w	r3, [fp]
 800b6ce:	4a9f      	ldr	r2, [pc, #636]	; (800b94c <_DrawBitmap+0x564>)
 800b6d0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b6d2:	5cd6      	ldrb	r6, [r2, r3]
 800b6d4:	f8d9 3000 	ldr.w	r3, [r9]
 800b6d8:	900e      	str	r0, [sp, #56]	; 0x38
 800b6da:	7c1b      	ldrb	r3, [r3, #16]
 800b6dc:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800b6e0:	f003 0303 	and.w	r3, r3, #3
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	4657      	mov	r7, sl
 800b6e8:	f1c1 0808 	rsb	r8, r1, #8
 800b6ec:	fa46 f601 	asr.w	r6, r6, r1
 800b6f0:	d020      	beq.n	800b734 <_DrawBitmap+0x34c>
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	d061      	beq.n	800b7ba <_DrawBitmap+0x3d2>
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d05f      	beq.n	800b7ba <_DrawBitmap+0x3d2>
 800b6fa:	465a      	mov	r2, fp
 800b6fc:	4547      	cmp	r7, r8
 800b6fe:	bf38      	it	cc
 800b700:	46b8      	movcc	r8, r7
 800b702:	ebc8 0707 	rsb	r7, r8, r7
 800b706:	4643      	mov	r3, r8
 800b708:	4621      	mov	r1, r4
 800b70a:	f006 0001 	and.w	r0, r6, #1
 800b70e:	3b01      	subs	r3, #1
 800b710:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800b714:	f841 0b04 	str.w	r0, [r1], #4
 800b718:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b71c:	d1f5      	bne.n	800b70a <_DrawBitmap+0x322>
 800b71e:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800b722:	2f00      	cmp	r7, #0
 800b724:	d06d      	beq.n	800b802 <_DrawBitmap+0x41a>
 800b726:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b72a:	4988      	ldr	r1, [pc, #544]	; (800b94c <_DrawBitmap+0x564>)
 800b72c:	f04f 0808 	mov.w	r8, #8
 800b730:	5cce      	ldrb	r6, [r1, r3]
 800b732:	e7e3      	b.n	800b6fc <_DrawBitmap+0x314>
 800b734:	686b      	ldr	r3, [r5, #4]
 800b736:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800b73a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b73c:	f8cd b020 	str.w	fp, [sp, #32]
 800b740:	4547      	cmp	r7, r8
 800b742:	bf38      	it	cc
 800b744:	46b8      	movcc	r8, r7
 800b746:	ebc8 0707 	rsb	r7, r8, r7
 800b74a:	f1bc 0f00 	cmp.w	ip, #0
 800b74e:	d026      	beq.n	800b79e <_DrawBitmap+0x3b6>
 800b750:	b91e      	cbnz	r6, 800b75a <_DrawBitmap+0x372>
 800b752:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800b756:	44c1      	add	r9, r8
 800b758:	e025      	b.n	800b7a6 <_DrawBitmap+0x3be>
 800b75a:	07f0      	lsls	r0, r6, #31
 800b75c:	d50c      	bpl.n	800b778 <_DrawBitmap+0x390>
 800b75e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800b762:	9a05      	ldr	r2, [sp, #20]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f8cd c008 	str.w	ip, [sp, #8]
 800b76a:	4660      	mov	r0, ip
 800b76c:	4649      	mov	r1, r9
 800b76e:	4798      	blx	r3
 800b770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b772:	f8dd c008 	ldr.w	ip, [sp, #8]
 800b776:	6023      	str	r3, [r4, #0]
 800b778:	f1b8 0801 	subs.w	r8, r8, #1
 800b77c:	f109 0901 	add.w	r9, r9, #1
 800b780:	f104 0404 	add.w	r4, r4, #4
 800b784:	d00f      	beq.n	800b7a6 <_DrawBitmap+0x3be>
 800b786:	0876      	lsrs	r6, r6, #1
 800b788:	e7e2      	b.n	800b750 <_DrawBitmap+0x368>
 800b78a:	07f1      	lsls	r1, r6, #31
 800b78c:	bf44      	itt	mi
 800b78e:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800b790:	6023      	strmi	r3, [r4, #0]
 800b792:	f1b8 0801 	subs.w	r8, r8, #1
 800b796:	f104 0404 	add.w	r4, r4, #4
 800b79a:	d004      	beq.n	800b7a6 <_DrawBitmap+0x3be>
 800b79c:	0876      	lsrs	r6, r6, #1
 800b79e:	2e00      	cmp	r6, #0
 800b7a0:	d1f3      	bne.n	800b78a <_DrawBitmap+0x3a2>
 800b7a2:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800b7a6:	b367      	cbz	r7, 800b802 <_DrawBitmap+0x41a>
 800b7a8:	9808      	ldr	r0, [sp, #32]
 800b7aa:	4a68      	ldr	r2, [pc, #416]	; (800b94c <_DrawBitmap+0x564>)
 800b7ac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b7b0:	9008      	str	r0, [sp, #32]
 800b7b2:	5cd6      	ldrb	r6, [r2, r3]
 800b7b4:	f04f 0808 	mov.w	r8, #8
 800b7b8:	e7c2      	b.n	800b740 <_DrawBitmap+0x358>
 800b7ba:	6803      	ldr	r3, [r0, #0]
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	4798      	blx	r3
 800b7c2:	4659      	mov	r1, fp
 800b7c4:	4547      	cmp	r7, r8
 800b7c6:	bf38      	it	cc
 800b7c8:	46b8      	movcc	r8, r7
 800b7ca:	ebc8 0707 	rsb	r7, r8, r7
 800b7ce:	1d23      	adds	r3, r4, #4
 800b7d0:	46c6      	mov	lr, r8
 800b7d2:	07f2      	lsls	r2, r6, #31
 800b7d4:	d504      	bpl.n	800b7e0 <_DrawBitmap+0x3f8>
 800b7d6:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800b7da:	4042      	eors	r2, r0
 800b7dc:	f843 2c04 	str.w	r2, [r3, #-4]
 800b7e0:	f1be 0e01 	subs.w	lr, lr, #1
 800b7e4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b7e8:	f103 0304 	add.w	r3, r3, #4
 800b7ec:	d1f1      	bne.n	800b7d2 <_DrawBitmap+0x3ea>
 800b7ee:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800b7f2:	b137      	cbz	r7, 800b802 <_DrawBitmap+0x41a>
 800b7f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b7f8:	4a54      	ldr	r2, [pc, #336]	; (800b94c <_DrawBitmap+0x564>)
 800b7fa:	f04f 0808 	mov.w	r8, #8
 800b7fe:	5cd6      	ldrb	r6, [r2, r3]
 800b800:	e7e0      	b.n	800b7c4 <_DrawBitmap+0x3dc>
 800b802:	a80e      	add	r0, sp, #56	; 0x38
 800b804:	f004 faba 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800b808:	e176      	b.n	800baf8 <_DrawBitmap+0x710>
 800b80a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b80c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b80e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800b812:	f1c7 0604 	rsb	r6, r7, #4
 800b816:	f89b 7000 	ldrb.w	r7, [fp]
 800b81a:	409f      	lsls	r7, r3
 800b81c:	4b4c      	ldr	r3, [pc, #304]	; (800b950 <_DrawBitmap+0x568>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	7c1b      	ldrb	r3, [r3, #16]
 800b822:	f003 0303 	and.w	r3, r3, #3
 800b826:	2b01      	cmp	r3, #1
 800b828:	b2f6      	uxtb	r6, r6
 800b82a:	b2ff      	uxtb	r7, r7
 800b82c:	d066      	beq.n	800b8fc <_DrawBitmap+0x514>
 800b82e:	d308      	bcc.n	800b842 <_DrawBitmap+0x45a>
 800b830:	2b02      	cmp	r3, #2
 800b832:	f040 8161 	bne.w	800baf8 <_DrawBitmap+0x710>
 800b836:	9804      	ldr	r0, [sp, #16]
 800b838:	f8cd b020 	str.w	fp, [sp, #32]
 800b83c:	46d0      	mov	r8, sl
 800b83e:	9006      	str	r0, [sp, #24]
 800b840:	e03e      	b.n	800b8c0 <_DrawBitmap+0x4d8>
 800b842:	465a      	mov	r2, fp
 800b844:	4653      	mov	r3, sl
 800b846:	429e      	cmp	r6, r3
 800b848:	bfc8      	it	gt
 800b84a:	b2de      	uxtbgt	r6, r3
 800b84c:	1b9b      	subs	r3, r3, r6
 800b84e:	4631      	mov	r1, r6
 800b850:	4620      	mov	r0, r4
 800b852:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 800b856:	3901      	subs	r1, #1
 800b858:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800b85c:	f840 cb04 	str.w	ip, [r0], #4
 800b860:	00bf      	lsls	r7, r7, #2
 800b862:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800b866:	b2ff      	uxtb	r7, r7
 800b868:	d1f3      	bne.n	800b852 <_DrawBitmap+0x46a>
 800b86a:	3e01      	subs	r6, #1
 800b86c:	b2f6      	uxtb	r6, r6
 800b86e:	3601      	adds	r6, #1
 800b870:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800b874:	2b00      	cmp	r3, #0
 800b876:	f000 813f 	beq.w	800baf8 <_DrawBitmap+0x710>
 800b87a:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800b87e:	2604      	movs	r6, #4
 800b880:	e7e1      	b.n	800b846 <_DrawBitmap+0x45e>
 800b882:	9906      	ldr	r1, [sp, #24]
 800b884:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800b888:	4449      	add	r1, r9
 800b88a:	d122      	bne.n	800b8d2 <_DrawBitmap+0x4ea>
 800b88c:	f109 0901 	add.w	r9, r9, #1
 800b890:	fa5f f289 	uxtb.w	r2, r9
 800b894:	00bf      	lsls	r7, r7, #2
 800b896:	4296      	cmp	r6, r2
 800b898:	b2ff      	uxtb	r7, r7
 800b89a:	d1f2      	bne.n	800b882 <_DrawBitmap+0x49a>
 800b89c:	9f06      	ldr	r7, [sp, #24]
 800b89e:	3e01      	subs	r6, #1
 800b8a0:	b2f6      	uxtb	r6, r6
 800b8a2:	1c7b      	adds	r3, r7, #1
 800b8a4:	1c72      	adds	r2, r6, #1
 800b8a6:	199e      	adds	r6, r3, r6
 800b8a8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800b8ac:	9606      	str	r6, [sp, #24]
 800b8ae:	f1b8 0f00 	cmp.w	r8, #0
 800b8b2:	f000 8121 	beq.w	800baf8 <_DrawBitmap+0x710>
 800b8b6:	9b08      	ldr	r3, [sp, #32]
 800b8b8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800b8bc:	9308      	str	r3, [sp, #32]
 800b8be:	2604      	movs	r6, #4
 800b8c0:	4546      	cmp	r6, r8
 800b8c2:	bfc8      	it	gt
 800b8c4:	fa5f f688 	uxtbgt.w	r6, r8
 800b8c8:	ebc6 0808 	rsb	r8, r6, r8
 800b8cc:	f04f 0900 	mov.w	r9, #0
 800b8d0:	e7d7      	b.n	800b882 <_DrawBitmap+0x49a>
 800b8d2:	09ba      	lsrs	r2, r7, #6
 800b8d4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800b8d8:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 800b8dc:	f1bc 0f00 	cmp.w	ip, #0
 800b8e0:	d0d4      	beq.n	800b88c <_DrawBitmap+0x4a4>
 800b8e2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800b8e6:	6812      	ldr	r2, [r2, #0]
 800b8e8:	920b      	str	r2, [sp, #44]	; 0x2c
 800b8ea:	4660      	mov	r0, ip
 800b8ec:	f8cd c008 	str.w	ip, [sp, #8]
 800b8f0:	9a05      	ldr	r2, [sp, #20]
 800b8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8f4:	4798      	blx	r3
 800b8f6:	f8dd c008 	ldr.w	ip, [sp, #8]
 800b8fa:	e7c7      	b.n	800b88c <_DrawBitmap+0x4a4>
 800b8fc:	4658      	mov	r0, fp
 800b8fe:	4653      	mov	r3, sl
 800b900:	429e      	cmp	r6, r3
 800b902:	bfc8      	it	gt
 800b904:	b2de      	uxtbgt	r6, r3
 800b906:	1b9b      	subs	r3, r3, r6
 800b908:	1d22      	adds	r2, r4, #4
 800b90a:	46b4      	mov	ip, r6
 800b90c:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800b910:	d005      	beq.n	800b91e <_DrawBitmap+0x536>
 800b912:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800b916:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800b91a:	f842 1c04 	str.w	r1, [r2, #-4]
 800b91e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b922:	00bf      	lsls	r7, r7, #2
 800b924:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800b928:	b2ff      	uxtb	r7, r7
 800b92a:	f102 0204 	add.w	r2, r2, #4
 800b92e:	d1ed      	bne.n	800b90c <_DrawBitmap+0x524>
 800b930:	3e01      	subs	r6, #1
 800b932:	b2f6      	uxtb	r6, r6
 800b934:	3601      	adds	r6, #1
 800b936:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f000 80dc 	beq.w	800baf8 <_DrawBitmap+0x710>
 800b940:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800b944:	2604      	movs	r6, #4
 800b946:	e7db      	b.n	800b900 <_DrawBitmap+0x518>
 800b948:	08017390 	.word	0x08017390
 800b94c:	0801a7e4 	.word	0x0801a7e4
 800b950:	200000d8 	.word	0x200000d8
 800b954:	4a71      	ldr	r2, [pc, #452]	; (800bb1c <_DrawBitmap+0x734>)
 800b956:	f89b 3000 	ldrb.w	r3, [fp]
 800b95a:	6812      	ldr	r2, [r2, #0]
 800b95c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b95e:	7c12      	ldrb	r2, [r2, #16]
 800b960:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b962:	f002 0203 	and.w	r2, r2, #3
 800b966:	4083      	lsls	r3, r0
 800b968:	2a01      	cmp	r2, #1
 800b96a:	b2de      	uxtb	r6, r3
 800b96c:	f000 809c 	beq.w	800baa8 <_DrawBitmap+0x6c0>
 800b970:	d302      	bcc.n	800b978 <_DrawBitmap+0x590>
 800b972:	2a02      	cmp	r2, #2
 800b974:	d035      	beq.n	800b9e2 <_DrawBitmap+0x5fa>
 800b976:	e0bf      	b.n	800baf8 <_DrawBitmap+0x710>
 800b978:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b97a:	b15f      	cbz	r7, 800b994 <_DrawBitmap+0x5ac>
 800b97c:	0936      	lsrs	r6, r6, #4
 800b97e:	f10b 0201 	add.w	r2, fp, #1
 800b982:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800b986:	6023      	str	r3, [r4, #0]
 800b988:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800b98c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b98e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b992:	e001      	b.n	800b998 <_DrawBitmap+0x5b0>
 800b994:	4653      	mov	r3, sl
 800b996:	465a      	mov	r2, fp
 800b998:	2b01      	cmp	r3, #1
 800b99a:	dd1a      	ble.n	800b9d2 <_DrawBitmap+0x5ea>
 800b99c:	1058      	asrs	r0, r3, #1
 800b99e:	f104 0108 	add.w	r1, r4, #8
 800b9a2:	f003 0301 	and.w	r3, r3, #1
 800b9a6:	eb02 0800 	add.w	r8, r2, r0
 800b9aa:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800b9ae:	f006 060f 	and.w	r6, r6, #15
 800b9b2:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 800b9b6:	f841 7c08 	str.w	r7, [r1, #-8]
 800b9ba:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800b9be:	f841 6c04 	str.w	r6, [r1, #-4]
 800b9c2:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800b9c6:	4542      	cmp	r2, r8
 800b9c8:	f101 0108 	add.w	r1, r1, #8
 800b9cc:	d1ed      	bne.n	800b9aa <_DrawBitmap+0x5c2>
 800b9ce:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f000 8090 	beq.w	800baf8 <_DrawBitmap+0x710>
 800b9d8:	0936      	lsrs	r6, r6, #4
 800b9da:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800b9de:	6023      	str	r3, [r4, #0]
 800b9e0:	e08a      	b.n	800baf8 <_DrawBitmap+0x710>
 800b9e2:	981e      	ldr	r0, [sp, #120]	; 0x78
 800b9e4:	b1c0      	cbz	r0, 800ba18 <_DrawBitmap+0x630>
 800b9e6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800b9ea:	d00a      	beq.n	800ba02 <_DrawBitmap+0x61a>
 800b9ec:	0936      	lsrs	r6, r6, #4
 800b9ee:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800b9f2:	6023      	str	r3, [r4, #0]
 800b9f4:	b12f      	cbz	r7, 800ba02 <_DrawBitmap+0x61a>
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	9904      	ldr	r1, [sp, #16]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	9a05      	ldr	r2, [sp, #20]
 800b9fe:	4638      	mov	r0, r7
 800ba00:	4798      	blx	r3
 800ba02:	9904      	ldr	r1, [sp, #16]
 800ba04:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ba06:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800ba0a:	f101 0801 	add.w	r8, r1, #1
 800ba0e:	f10a 3cff 	add.w	ip, sl, #4294967295
 800ba12:	f10b 0901 	add.w	r9, fp, #1
 800ba16:	e011      	b.n	800ba3c <_DrawBitmap+0x654>
 800ba18:	46d4      	mov	ip, sl
 800ba1a:	46d9      	mov	r9, fp
 800ba1c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ba20:	e00c      	b.n	800ba3c <_DrawBitmap+0x654>
 800ba22:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 800ba26:	d10d      	bne.n	800ba44 <_DrawBitmap+0x65c>
 800ba28:	f016 060f 	ands.w	r6, r6, #15
 800ba2c:	d11b      	bne.n	800ba66 <_DrawBitmap+0x67e>
 800ba2e:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800ba32:	3408      	adds	r4, #8
 800ba34:	f108 0802 	add.w	r8, r8, #2
 800ba38:	f1ac 0c02 	sub.w	ip, ip, #2
 800ba3c:	f1bc 0f01 	cmp.w	ip, #1
 800ba40:	dcef      	bgt.n	800ba22 <_DrawBitmap+0x63a>
 800ba42:	e021      	b.n	800ba88 <_DrawBitmap+0x6a0>
 800ba44:	0933      	lsrs	r3, r6, #4
 800ba46:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800ba4a:	6023      	str	r3, [r4, #0]
 800ba4c:	2f00      	cmp	r7, #0
 800ba4e:	d0eb      	beq.n	800ba28 <_DrawBitmap+0x640>
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	9a05      	ldr	r2, [sp, #20]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f8cd c008 	str.w	ip, [sp, #8]
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	4641      	mov	r1, r8
 800ba5e:	4798      	blx	r3
 800ba60:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ba64:	e7e0      	b.n	800ba28 <_DrawBitmap+0x640>
 800ba66:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800ba6a:	6063      	str	r3, [r4, #4]
 800ba6c:	2f00      	cmp	r7, #0
 800ba6e:	d0de      	beq.n	800ba2e <_DrawBitmap+0x646>
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	9a05      	ldr	r2, [sp, #20]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f8cd c008 	str.w	ip, [sp, #8]
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	f108 0101 	add.w	r1, r8, #1
 800ba80:	4798      	blx	r3
 800ba82:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ba86:	e7d2      	b.n	800ba2e <_DrawBitmap+0x646>
 800ba88:	f1bc 0f00 	cmp.w	ip, #0
 800ba8c:	d034      	beq.n	800baf8 <_DrawBitmap+0x710>
 800ba8e:	0936      	lsrs	r6, r6, #4
 800ba90:	d032      	beq.n	800baf8 <_DrawBitmap+0x710>
 800ba92:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800ba96:	6023      	str	r3, [r4, #0]
 800ba98:	b377      	cbz	r7, 800baf8 <_DrawBitmap+0x710>
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	9a05      	ldr	r2, [sp, #20]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4638      	mov	r0, r7
 800baa2:	4641      	mov	r1, r8
 800baa4:	4798      	blx	r3
 800baa6:	e027      	b.n	800baf8 <_DrawBitmap+0x710>
 800baa8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800baaa:	f1c7 0302 	rsb	r3, r7, #2
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	465f      	mov	r7, fp
 800bab2:	4652      	mov	r2, sl
 800bab4:	4293      	cmp	r3, r2
 800bab6:	bfc8      	it	gt
 800bab8:	b2d3      	uxtbgt	r3, r2
 800baba:	1ad2      	subs	r2, r2, r3
 800babc:	1d20      	adds	r0, r4, #4
 800babe:	469c      	mov	ip, r3
 800bac0:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800bac4:	d005      	beq.n	800bad2 <_DrawBitmap+0x6ea>
 800bac6:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800baca:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800bace:	f840 1c04 	str.w	r1, [r0, #-4]
 800bad2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bad6:	0136      	lsls	r6, r6, #4
 800bad8:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800badc:	b2f6      	uxtb	r6, r6
 800bade:	f100 0004 	add.w	r0, r0, #4
 800bae2:	d1ed      	bne.n	800bac0 <_DrawBitmap+0x6d8>
 800bae4:	3b01      	subs	r3, #1
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	3301      	adds	r3, #1
 800baea:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800baee:	b11a      	cbz	r2, 800baf8 <_DrawBitmap+0x710>
 800baf0:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800baf4:	2302      	movs	r3, #2
 800baf6:	e7dd      	b.n	800bab4 <_DrawBitmap+0x6cc>
 800baf8:	9b05      	ldr	r3, [sp, #20]
 800bafa:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800bafc:	3301      	adds	r3, #1
 800bafe:	44bb      	add	fp, r7
 800bb00:	9305      	str	r3, [sp, #20]
 800bb02:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800bb04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb06:	443b      	add	r3, r7
 800bb08:	9309      	str	r3, [sp, #36]	; 0x24
 800bb0a:	e5c4      	b.n	800b696 <_DrawBitmap+0x2ae>
 800bb0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb0e:	b113      	cbz	r3, 800bb16 <_DrawBitmap+0x72e>
 800bb10:	a80f      	add	r0, sp, #60	; 0x3c
 800bb12:	f004 f933 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800bb16:	b011      	add	sp, #68	; 0x44
 800bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1c:	200000d8 	.word	0x200000d8

0800bb20 <GUI_MEMDEV__WriteToActiveAt>:
 800bb20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bb24:	460e      	mov	r6, r1
 800bb26:	4690      	mov	r8, r2
 800bb28:	4607      	mov	r7, r0
 800bb2a:	f004 f919 	bl	800fd60 <GUI_ALLOC_LockH>
 800bb2e:	6803      	ldr	r3, [r0, #0]
 800bb30:	ac02      	add	r4, sp, #8
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	f844 0d04 	str.w	r0, [r4, #-4]!
 800bb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3a:	2000      	movs	r0, #0
 800bb3c:	2116      	movs	r1, #22
 800bb3e:	4798      	blx	r3
 800bb40:	4605      	mov	r5, r0
 800bb42:	4620      	mov	r0, r4
 800bb44:	f004 f91a 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800bb48:	b11d      	cbz	r5, 800bb52 <GUI_MEMDEV__WriteToActiveAt+0x32>
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	4631      	mov	r1, r6
 800bb4e:	4642      	mov	r2, r8
 800bb50:	47a8      	blx	r5
 800bb52:	b002      	add	sp, #8
 800bb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bb58 <GUI_MEMDEV__CreateFixed>:
 800bb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	4e3e      	ldr	r6, [pc, #248]	; (800bc58 <GUI_MEMDEV__CreateFixed+0x100>)
 800bb5e:	b087      	sub	sp, #28
 800bb60:	461d      	mov	r5, r3
 800bb62:	6833      	ldr	r3, [r6, #0]
 800bb64:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800bb66:	7c5b      	ldrb	r3, [r3, #17]
 800bb68:	4683      	mov	fp, r0
 800bb6a:	468a      	mov	sl, r1
 800bb6c:	4690      	mov	r8, r2
 800bb6e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bb70:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bb72:	2200      	movs	r2, #0
 800bb74:	f003 faf0 	bl	800f158 <GUI_DEVICE_Create>
 800bb78:	4604      	mov	r4, r0
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	d033      	beq.n	800bbe6 <GUI_MEMDEV__CreateFixed+0x8e>
 800bb7e:	6903      	ldr	r3, [r0, #16]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	4798      	blx	r3
 800bb84:	f001 fb7d 	bl	800d282 <LCD__GetBPPDevice>
 800bb88:	fb08 f600 	mul.w	r6, r8, r0
 800bb8c:	9003      	str	r0, [sp, #12]
 800bb8e:	3607      	adds	r6, #7
 800bb90:	f004 faae 	bl	80100f0 <GUI_ALLOC_RequestSize>
 800bb94:	f017 0901 	ands.w	r9, r7, #1
 800bb98:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 800bb9c:	d104      	bne.n	800bba8 <GUI_MEMDEV__CreateFixed+0x50>
 800bb9e:	2304      	movs	r3, #4
 800bba0:	fb90 f0f3 	sdiv	r0, r0, r3
 800bba4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800bba8:	2d00      	cmp	r5, #0
 800bbaa:	dc09      	bgt.n	800bbc0 <GUI_MEMDEV__CreateFixed+0x68>
 800bbac:	b11e      	cbz	r6, 800bbb6 <GUI_MEMDEV__CreateFixed+0x5e>
 800bbae:	3818      	subs	r0, #24
 800bbb0:	fbb0 f0f6 	udiv	r0, r0, r6
 800bbb4:	e000      	b.n	800bbb8 <GUI_MEMDEV__CreateFixed+0x60>
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	426d      	negs	r5, r5
 800bbba:	42a8      	cmp	r0, r5
 800bbbc:	bfb8      	it	lt
 800bbbe:	4605      	movlt	r5, r0
 800bbc0:	f1b9 0f00 	cmp.w	r9, #0
 800bbc4:	d109      	bne.n	800bbda <GUI_MEMDEV__CreateFixed+0x82>
 800bbc6:	f8cd 9000 	str.w	r9, [sp]
 800bbca:	4658      	mov	r0, fp
 800bbcc:	4651      	mov	r1, sl
 800bbce:	4642      	mov	r2, r8
 800bbd0:	462b      	mov	r3, r5
 800bbd2:	f006 fcef 	bl	80125b4 <GUI_USAGE_BM_Create>
 800bbd6:	4607      	mov	r7, r0
 800bbd8:	e000      	b.n	800bbdc <GUI_MEMDEV__CreateFixed+0x84>
 800bbda:	2700      	movs	r7, #0
 800bbdc:	2d00      	cmp	r5, #0
 800bbde:	dc04      	bgt.n	800bbea <GUI_MEMDEV__CreateFixed+0x92>
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f003 fab7 	bl	800f154 <GUI_DEVICE_Delete>
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	e032      	b.n	800bc50 <GUI_MEMDEV__CreateFixed+0xf8>
 800bbea:	fb06 f005 	mul.w	r0, r6, r5
 800bbee:	3018      	adds	r0, #24
 800bbf0:	f1b9 0f00 	cmp.w	r9, #0
 800bbf4:	d002      	beq.n	800bbfc <GUI_MEMDEV__CreateFixed+0xa4>
 800bbf6:	f004 fb07 	bl	8010208 <GUI_ALLOC_AllocNoInit>
 800bbfa:	e001      	b.n	800bc00 <GUI_MEMDEV__CreateFixed+0xa8>
 800bbfc:	f004 fb1d 	bl	801023a <GUI_ALLOC_AllocZero>
 800bc00:	4681      	mov	r9, r0
 800bc02:	b940      	cbnz	r0, 800bc16 <GUI_MEMDEV__CreateFixed+0xbe>
 800bc04:	4620      	mov	r0, r4
 800bc06:	f003 faa5 	bl	800f154 <GUI_DEVICE_Delete>
 800bc0a:	2f00      	cmp	r7, #0
 800bc0c:	d0eb      	beq.n	800bbe6 <GUI_MEMDEV__CreateFixed+0x8e>
 800bc0e:	4638      	mov	r0, r7
 800bc10:	f004 f8e0 	bl	800fdd4 <GUI_ALLOC_Free>
 800bc14:	e01b      	b.n	800bc4e <GUI_MEMDEV__CreateFixed+0xf6>
 800bc16:	f004 f8a3 	bl	800fd60 <GUI_ALLOC_LockH>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	a806      	add	r0, sp, #24
 800bc1e:	9a03      	ldr	r2, [sp, #12]
 800bc20:	f840 3d04 	str.w	r3, [r0, #-4]!
 800bc24:	611a      	str	r2, [r3, #16]
 800bc26:	601c      	str	r4, [r3, #0]
 800bc28:	f8a3 b004 	strh.w	fp, [r3, #4]
 800bc2c:	f8a3 a006 	strh.w	sl, [r3, #6]
 800bc30:	f8a3 8008 	strh.w	r8, [r3, #8]
 800bc34:	815d      	strh	r5, [r3, #10]
 800bc36:	60de      	str	r6, [r3, #12]
 800bc38:	615f      	str	r7, [r3, #20]
 800bc3a:	f004 f89f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800bc3e:	4a06      	ldr	r2, [pc, #24]	; (800bc58 <GUI_MEMDEV__CreateFixed+0x100>)
 800bc40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc42:	6123      	str	r3, [r4, #16]
 800bc44:	6813      	ldr	r3, [r2, #0]
 800bc46:	f8c4 9008 	str.w	r9, [r4, #8]
 800bc4a:	7c5b      	ldrb	r3, [r3, #17]
 800bc4c:	61a3      	str	r3, [r4, #24]
 800bc4e:	4648      	mov	r0, r9
 800bc50:	b007      	add	sp, #28
 800bc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc56:	bf00      	nop
 800bc58:	200000d8 	.word	0x200000d8

0800bc5c <GUI_MEMDEV_GetBitsPerPixel>:
 800bc5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc5e:	4605      	mov	r5, r0
 800bc60:	b170      	cbz	r0, 800bc80 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800bc62:	f004 f87d 	bl	800fd60 <GUI_ALLOC_LockH>
 800bc66:	6803      	ldr	r3, [r0, #0]
 800bc68:	ac02      	add	r4, sp, #8
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	4798      	blx	r3
 800bc74:	f001 fb05 	bl	800d282 <LCD__GetBPPDevice>
 800bc78:	4605      	mov	r5, r0
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f004 f87e 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800bc80:	4628      	mov	r0, r5
 800bc82:	b003      	add	sp, #12
 800bc84:	bd30      	pop	{r4, r5, pc}
	...

0800bc88 <GUI_MEMDEV_Delete>:
 800bc88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	b1d0      	cbz	r0, 800bcc4 <GUI_MEMDEV_Delete+0x3c>
 800bc8e:	4b0e      	ldr	r3, [pc, #56]	; (800bcc8 <GUI_MEMDEV_Delete+0x40>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc94:	4283      	cmp	r3, r0
 800bc96:	d101      	bne.n	800bc9c <GUI_MEMDEV_Delete+0x14>
 800bc98:	f002 ff92 	bl	800ebc0 <GUI_SelectLCD>
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f004 f85f 	bl	800fd60 <GUI_ALLOC_LockH>
 800bca2:	9001      	str	r0, [sp, #4]
 800bca4:	6940      	ldr	r0, [r0, #20]
 800bca6:	b108      	cbz	r0, 800bcac <GUI_MEMDEV_Delete+0x24>
 800bca8:	f006 fcb0 	bl	801260c <GUI_USAGE_DecUseCnt>
 800bcac:	ad02      	add	r5, sp, #8
 800bcae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800bcb2:	6818      	ldr	r0, [r3, #0]
 800bcb4:	f003 fa4e 	bl	800f154 <GUI_DEVICE_Delete>
 800bcb8:	4628      	mov	r0, r5
 800bcba:	f004 f85f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f004 f888 	bl	800fdd4 <GUI_ALLOC_Free>
 800bcc4:	b003      	add	sp, #12
 800bcc6:	bd30      	pop	{r4, r5, pc}
 800bcc8:	200000d8 	.word	0x200000d8

0800bccc <GUI_MEMDEV_CreateEx>:
 800bccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcd0:	469a      	mov	sl, r3
 800bcd2:	4b19      	ldr	r3, [pc, #100]	; (800bd38 <GUI_MEMDEV_CreateEx+0x6c>)
 800bcd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4607      	mov	r7, r0
 800bcda:	7c58      	ldrb	r0, [r3, #17]
 800bcdc:	4b17      	ldr	r3, [pc, #92]	; (800bd3c <GUI_MEMDEV_CreateEx+0x70>)
 800bcde:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800bce2:	4688      	mov	r8, r1
 800bce4:	4691      	mov	r9, r2
 800bce6:	68e3      	ldr	r3, [r4, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	d006      	beq.n	800bcfc <GUI_MEMDEV_CreateEx+0x30>
 800bcee:	6824      	ldr	r4, [r4, #0]
 800bcf0:	2c00      	cmp	r4, #0
 800bcf2:	d1f8      	bne.n	800bce6 <GUI_MEMDEV_CreateEx+0x1a>
 800bcf4:	f003 fa1e 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	b130      	cbz	r0, 800bd0a <GUI_MEMDEV_CreateEx+0x3e>
 800bcfc:	68e3      	ldr	r3, [r4, #12]
 800bcfe:	4620      	mov	r0, r4
 800bd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd02:	2101      	movs	r1, #1
 800bd04:	4798      	blx	r3
 800bd06:	4606      	mov	r6, r0
 800bd08:	b908      	cbnz	r0, 800bd0e <GUI_MEMDEV_CreateEx+0x42>
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	e010      	b.n	800bd30 <GUI_MEMDEV_CreateEx+0x64>
 800bd0e:	6924      	ldr	r4, [r4, #16]
 800bd10:	68a3      	ldr	r3, [r4, #8]
 800bd12:	4798      	blx	r3
 800bd14:	3001      	adds	r0, #1
 800bd16:	bf04      	itt	eq
 800bd18:	f045 0501 	orreq.w	r5, r5, #1
 800bd1c:	4c08      	ldreq	r4, [pc, #32]	; (800bd40 <GUI_MEMDEV_CreateEx+0x74>)
 800bd1e:	9402      	str	r4, [sp, #8]
 800bd20:	e88d 0060 	stmia.w	sp, {r5, r6}
 800bd24:	4638      	mov	r0, r7
 800bd26:	4641      	mov	r1, r8
 800bd28:	464a      	mov	r2, r9
 800bd2a:	4653      	mov	r3, sl
 800bd2c:	f7ff ff14 	bl	800bb58 <GUI_MEMDEV__CreateFixed>
 800bd30:	b004      	add	sp, #16
 800bd32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd36:	bf00      	nop
 800bd38:	200000d8 	.word	0x200000d8
 800bd3c:	2001d510 	.word	0x2001d510
 800bd40:	0801a930 	.word	0x0801a930

0800bd44 <GUI_MEMDEV_Select>:
 800bd44:	4b11      	ldr	r3, [pc, #68]	; (800bd8c <GUI_MEMDEV_Select+0x48>)
 800bd46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800bd4e:	461f      	mov	r7, r3
 800bd50:	b910      	cbnz	r0, 800bd58 <GUI_MEMDEV_Select+0x14>
 800bd52:	f002 ff35 	bl	800ebc0 <GUI_SelectLCD>
 800bd56:	e016      	b.n	800bd86 <GUI_MEMDEV_Select+0x42>
 800bd58:	b10e      	cbz	r6, 800bd5e <GUI_MEMDEV_Select+0x1a>
 800bd5a:	f002 ff31 	bl	800ebc0 <GUI_SelectLCD>
 800bd5e:	f7fe ff37 	bl	800abd0 <WM_Deactivate>
 800bd62:	4620      	mov	r0, r4
 800bd64:	f003 fffc 	bl	800fd60 <GUI_ALLOC_LockH>
 800bd68:	ad02      	add	r5, sp, #8
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	f845 0d04 	str.w	r0, [r5, #-4]!
 800bd70:	661c      	str	r4, [r3, #96]	; 0x60
 800bd72:	6800      	ldr	r0, [r0, #0]
 800bd74:	f003 fa2c 	bl	800f1d0 <GUI_DEVICE_Link>
 800bd78:	4628      	mov	r0, r5
 800bd7a:	f003 ffff 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800bd7e:	f001 f8f1 	bl	800cf64 <LCD_UpdateColorIndices>
 800bd82:	f001 fd3f 	bl	800d804 <LCD_SetClipRectMax>
 800bd86:	4630      	mov	r0, r6
 800bd88:	b003      	add	sp, #12
 800bd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd8c:	200000d8 	.word	0x200000d8

0800bd90 <GUI_MEMDEV_CopyToLCDAt>:
 800bd90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd94:	460c      	mov	r4, r1
 800bd96:	b085      	sub	sp, #20
 800bd98:	4615      	mov	r5, r2
 800bd9a:	4606      	mov	r6, r0
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d041      	beq.n	800be24 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800bda0:	2000      	movs	r0, #0
 800bda2:	f002 fea5 	bl	800eaf0 <GUI_SetDrawMode>
 800bda6:	4b21      	ldr	r3, [pc, #132]	; (800be2c <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4607      	mov	r7, r0
 800bdac:	4630      	mov	r0, r6
 800bdae:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 800bdb2:	f003 ffd5 	bl	800fd60 <GUI_ALLOC_LockH>
 800bdb6:	6803      	ldr	r3, [r0, #0]
 800bdb8:	9001      	str	r0, [sp, #4]
 800bdba:	6998      	ldr	r0, [r3, #24]
 800bdbc:	f002 fee4 	bl	800eb88 <GUI_SelectLayer>
 800bdc0:	4b1b      	ldr	r3, [pc, #108]	; (800be30 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 800bdc2:	429c      	cmp	r4, r3
 800bdc4:	9b01      	ldr	r3, [sp, #4]
 800bdc6:	bf04      	itt	eq
 800bdc8:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 800bdcc:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 800bdd0:	891a      	ldrh	r2, [r3, #8]
 800bdd2:	895b      	ldrh	r3, [r3, #10]
 800bdd4:	f8ad 4008 	strh.w	r4, [sp, #8]
 800bdd8:	3a01      	subs	r2, #1
 800bdda:	3b01      	subs	r3, #1
 800bddc:	4422      	add	r2, r4
 800bdde:	442b      	add	r3, r5
 800bde0:	4681      	mov	r9, r0
 800bde2:	f8ad 200c 	strh.w	r2, [sp, #12]
 800bde6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bdea:	f8ad 500a 	strh.w	r5, [sp, #10]
 800bdee:	f7fe fee7 	bl	800abc0 <WM_Activate>
 800bdf2:	a801      	add	r0, sp, #4
 800bdf4:	f003 ffc2 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800bdf8:	a802      	add	r0, sp, #8
 800bdfa:	f7fe fcff 	bl	800a7fc <WM__InitIVRSearch>
 800bdfe:	b948      	cbnz	r0, 800be14 <GUI_MEMDEV_CopyToLCDAt+0x84>
 800be00:	4648      	mov	r0, r9
 800be02:	f002 fec1 	bl	800eb88 <GUI_SelectLayer>
 800be06:	4640      	mov	r0, r8
 800be08:	f7ff ff9c 	bl	800bd44 <GUI_MEMDEV_Select>
 800be0c:	4638      	mov	r0, r7
 800be0e:	f002 fe6f 	bl	800eaf0 <GUI_SetDrawMode>
 800be12:	e007      	b.n	800be24 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800be14:	4630      	mov	r0, r6
 800be16:	4621      	mov	r1, r4
 800be18:	462a      	mov	r2, r5
 800be1a:	f005 fe97 	bl	8011b4c <GUI_MEMDEV__WriteToActiveOpaque>
 800be1e:	f7fe fc2b 	bl	800a678 <WM__GetNextIVR>
 800be22:	e7ec      	b.n	800bdfe <GUI_MEMDEV_CopyToLCDAt+0x6e>
 800be24:	b005      	add	sp, #20
 800be26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be2a:	bf00      	nop
 800be2c:	200000d8 	.word	0x200000d8
 800be30:	fffff001 	.word	0xfffff001

0800be34 <GUI_MEMDEV_CopyToLCD>:
 800be34:	4901      	ldr	r1, [pc, #4]	; (800be3c <GUI_MEMDEV_CopyToLCD+0x8>)
 800be36:	460a      	mov	r2, r1
 800be38:	f7ff bfaa 	b.w	800bd90 <GUI_MEMDEV_CopyToLCDAt>
 800be3c:	fffff001 	.word	0xfffff001

0800be40 <_SetPhysRAMAddr>:
 800be40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be42:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800be44:	4604      	mov	r4, r0
 800be46:	460e      	mov	r6, r1
 800be48:	4615      	mov	r5, r2
 800be4a:	b15b      	cbz	r3, 800be64 <_SetPhysRAMAddr+0x24>
 800be4c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800be50:	4798      	blx	r3
 800be52:	4631      	mov	r1, r6
 800be54:	4607      	mov	r7, r0
 800be56:	462a      	mov	r2, r5
 800be58:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800be5c:	4620      	mov	r0, r4
 800be5e:	4798      	blx	r3
 800be60:	463e      	mov	r6, r7
 800be62:	4605      	mov	r5, r0
 800be64:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800be68:	4620      	mov	r0, r4
 800be6a:	212a      	movs	r1, #42	; 0x2a
 800be6c:	4798      	blx	r3
 800be6e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800be70:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800be74:	4431      	add	r1, r6
 800be76:	4620      	mov	r0, r4
 800be78:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800be7c:	4798      	blx	r3
 800be7e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800be80:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800be84:	b2b7      	uxth	r7, r6
 800be86:	4439      	add	r1, r7
 800be88:	4620      	mov	r0, r4
 800be8a:	b2c9      	uxtb	r1, r1
 800be8c:	4798      	blx	r3
 800be8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800be90:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800be94:	4431      	add	r1, r6
 800be96:	4620      	mov	r0, r4
 800be98:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800be9c:	4798      	blx	r3
 800be9e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bea0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bea4:	4439      	add	r1, r7
 800bea6:	4620      	mov	r0, r4
 800bea8:	b2c9      	uxtb	r1, r1
 800beaa:	4798      	blx	r3
 800beac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800beb0:	4620      	mov	r0, r4
 800beb2:	212b      	movs	r1, #43	; 0x2b
 800beb4:	4798      	blx	r3
 800beb6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800beb8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bebc:	4429      	add	r1, r5
 800bebe:	4620      	mov	r0, r4
 800bec0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800bec4:	4798      	blx	r3
 800bec6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bec8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800becc:	b2ae      	uxth	r6, r5
 800bece:	4431      	add	r1, r6
 800bed0:	4620      	mov	r0, r4
 800bed2:	b2c9      	uxtb	r1, r1
 800bed4:	4798      	blx	r3
 800bed6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bed8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bedc:	4429      	add	r1, r5
 800bede:	4620      	mov	r0, r4
 800bee0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800bee4:	4798      	blx	r3
 800bee6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bee8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800beec:	4431      	add	r1, r6
 800beee:	4620      	mov	r0, r4
 800bef0:	b2c9      	uxtb	r1, r1
 800bef2:	4798      	blx	r3
 800bef4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800bef8:	4620      	mov	r0, r4
 800befa:	212c      	movs	r1, #44	; 0x2c
 800befc:	4798      	blx	r3
 800befe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf00 <_SetRect>:
 800bf00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf04:	4698      	mov	r8, r3
 800bf06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bf08:	9f08      	ldr	r7, [sp, #32]
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	4689      	mov	r9, r1
 800bf0e:	4615      	mov	r5, r2
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d064      	beq.n	800bfde <_SetRect+0xde>
 800bf14:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800bf18:	4798      	blx	r3
 800bf1a:	463a      	mov	r2, r7
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800bf22:	4641      	mov	r1, r8
 800bf24:	4620      	mov	r0, r4
 800bf26:	4798      	blx	r3
 800bf28:	462a      	mov	r2, r5
 800bf2a:	4682      	mov	sl, r0
 800bf2c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800bf30:	4649      	mov	r1, r9
 800bf32:	4620      	mov	r0, r4
 800bf34:	4798      	blx	r3
 800bf36:	463a      	mov	r2, r7
 800bf38:	4605      	mov	r5, r0
 800bf3a:	4641      	mov	r1, r8
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800bf42:	4798      	blx	r3
 800bf44:	45b2      	cmp	sl, r6
 800bf46:	4607      	mov	r7, r0
 800bf48:	db02      	blt.n	800bf50 <_SetRect+0x50>
 800bf4a:	4653      	mov	r3, sl
 800bf4c:	46b2      	mov	sl, r6
 800bf4e:	461e      	mov	r6, r3
 800bf50:	42af      	cmp	r7, r5
 800bf52:	db02      	blt.n	800bf5a <_SetRect+0x5a>
 800bf54:	463b      	mov	r3, r7
 800bf56:	462f      	mov	r7, r5
 800bf58:	461d      	mov	r5, r3
 800bf5a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800bf5e:	4620      	mov	r0, r4
 800bf60:	212a      	movs	r1, #42	; 0x2a
 800bf62:	4798      	blx	r3
 800bf64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bf66:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bf6a:	4451      	add	r1, sl
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800bf72:	4798      	blx	r3
 800bf74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bf76:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bf7a:	4451      	add	r1, sl
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	b2c9      	uxtb	r1, r1
 800bf80:	4798      	blx	r3
 800bf82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bf84:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bf88:	4431      	add	r1, r6
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800bf90:	4798      	blx	r3
 800bf92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bf94:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bf98:	4431      	add	r1, r6
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	b2c9      	uxtb	r1, r1
 800bf9e:	4798      	blx	r3
 800bfa0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	212b      	movs	r1, #43	; 0x2b
 800bfa8:	4798      	blx	r3
 800bfaa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bfac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bfb0:	4439      	add	r1, r7
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800bfb8:	4798      	blx	r3
 800bfba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bfbc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bfc0:	4439      	add	r1, r7
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	b2c9      	uxtb	r1, r1
 800bfc6:	4798      	blx	r3
 800bfc8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bfca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bfce:	4429      	add	r1, r5
 800bfd0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	4798      	blx	r3
 800bfd8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bfda:	4429      	add	r1, r5
 800bfdc:	e03f      	b.n	800c05e <_SetRect+0x15e>
 800bfde:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800bfe2:	212a      	movs	r1, #42	; 0x2a
 800bfe4:	4798      	blx	r3
 800bfe6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bfe8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bfec:	4449      	add	r1, r9
 800bfee:	4620      	mov	r0, r4
 800bff0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800bff4:	4798      	blx	r3
 800bff6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bff8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bffc:	4449      	add	r1, r9
 800bffe:	4620      	mov	r0, r4
 800c000:	b2c9      	uxtb	r1, r1
 800c002:	4798      	blx	r3
 800c004:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c006:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c00a:	4441      	add	r1, r8
 800c00c:	4620      	mov	r0, r4
 800c00e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c012:	4798      	blx	r3
 800c014:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c016:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c01a:	4441      	add	r1, r8
 800c01c:	4620      	mov	r0, r4
 800c01e:	b2c9      	uxtb	r1, r1
 800c020:	4798      	blx	r3
 800c022:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c026:	4620      	mov	r0, r4
 800c028:	212b      	movs	r1, #43	; 0x2b
 800c02a:	4798      	blx	r3
 800c02c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c02e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c032:	4429      	add	r1, r5
 800c034:	4620      	mov	r0, r4
 800c036:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c03a:	4798      	blx	r3
 800c03c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c03e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c042:	4429      	add	r1, r5
 800c044:	4620      	mov	r0, r4
 800c046:	b2c9      	uxtb	r1, r1
 800c048:	4798      	blx	r3
 800c04a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c04c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c050:	4439      	add	r1, r7
 800c052:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c056:	4620      	mov	r0, r4
 800c058:	4798      	blx	r3
 800c05a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c05c:	4439      	add	r1, r7
 800c05e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c062:	4620      	mov	r0, r4
 800c064:	b2c9      	uxtb	r1, r1
 800c066:	4798      	blx	r3
 800c068:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c06c:	4620      	mov	r0, r4
 800c06e:	212c      	movs	r1, #44	; 0x2c
 800c070:	4798      	blx	r3
 800c072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800c078 <_SetOrientation>:
 800c078:	b513      	push	{r0, r1, r4, lr}
 800c07a:	4a0d      	ldr	r2, [pc, #52]	; (800c0b0 <_SetOrientation+0x38>)
 800c07c:	4604      	mov	r4, r0
 800c07e:	6851      	ldr	r1, [r2, #4]
 800c080:	6810      	ldr	r0, [r2, #0]
 800c082:	466b      	mov	r3, sp
 800c084:	c303      	stmia	r3!, {r0, r1}
 800c086:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c08a:	4620      	mov	r0, r4
 800c08c:	2136      	movs	r1, #54	; 0x36
 800c08e:	4798      	blx	r3
 800c090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c092:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800c094:	aa02      	add	r2, sp, #8
 800c096:	4413      	add	r3, r2
 800c098:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800c09c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800c0a0:	4319      	orrs	r1, r3
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c0a8:	b289      	uxth	r1, r1
 800c0aa:	4798      	blx	r3
 800c0ac:	b002      	add	sp, #8
 800c0ae:	bd10      	pop	{r4, pc}
 800c0b0:	080171f9 	.word	0x080171f9

0800c0b4 <_ReadPixel_16bpp_B8>:
 800c0b4:	b513      	push	{r0, r1, r4, lr}
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800c0bc:	202e      	movs	r0, #46	; 0x2e
 800c0be:	4798      	blx	r3
 800c0c0:	6a21      	ldr	r1, [r4, #32]
 800c0c2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800c0c6:	4668      	mov	r0, sp
 800c0c8:	3103      	adds	r1, #3
 800c0ca:	4798      	blx	r3
 800c0cc:	6a22      	ldr	r2, [r4, #32]
 800c0ce:	ab00      	add	r3, sp, #0
 800c0d0:	4413      	add	r3, r2
 800c0d2:	f81d 2002 	ldrb.w	r2, [sp, r2]
 800c0d6:	7859      	ldrb	r1, [r3, #1]
 800c0d8:	7898      	ldrb	r0, [r3, #2]
 800c0da:	08d2      	lsrs	r2, r2, #3
 800c0dc:	0889      	lsrs	r1, r1, #2
 800c0de:	02d2      	lsls	r2, r2, #11
 800c0e0:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 800c0e4:	ea42 00d0 	orr.w	r0, r2, r0, lsr #3
 800c0e8:	b002      	add	sp, #8
 800c0ea:	bd10      	pop	{r4, pc}

0800c0ec <_ReadPixel_16bpp_B16_I>:
 800c0ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0ee:	4604      	mov	r4, r0
 800c0f0:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800c0f4:	202e      	movs	r0, #46	; 0x2e
 800c0f6:	4798      	blx	r3
 800c0f8:	6a21      	ldr	r1, [r4, #32]
 800c0fa:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800c0fe:	4668      	mov	r0, sp
 800c100:	3102      	adds	r1, #2
 800c102:	4798      	blx	r3
 800c104:	6a23      	ldr	r3, [r4, #32]
 800c106:	a900      	add	r1, sp, #0
 800c108:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 800c10c:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 800c110:	8852      	ldrh	r2, [r2, #2]
 800c112:	f402 417c 	and.w	r1, r2, #64512	; 0xfc00
 800c116:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800c11a:	ea42 1251 	orr.w	r2, r2, r1, lsr #5
 800c11e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800c122:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800c126:	b004      	add	sp, #16
 800c128:	bd10      	pop	{r4, pc}

0800c12a <_SetReg_B8>:
 800c12a:	b538      	push	{r3, r4, r5, lr}
 800c12c:	4604      	mov	r4, r0
 800c12e:	460d      	mov	r5, r1
 800c130:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800c134:	0a08      	lsrs	r0, r1, #8
 800c136:	4798      	blx	r3
 800c138:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800c13c:	b2e8      	uxtb	r0, r5
 800c13e:	4798      	blx	r3
 800c140:	bd38      	pop	{r3, r4, r5, pc}

0800c142 <_SetReg_B16>:
 800c142:	b508      	push	{r3, lr}
 800c144:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800c148:	4608      	mov	r0, r1
 800c14a:	4798      	blx	r3
 800c14c:	bd08      	pop	{r3, pc}

0800c14e <_WritePara_B8>:
 800c14e:	b508      	push	{r3, lr}
 800c150:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800c154:	b2c8      	uxtb	r0, r1
 800c156:	4798      	blx	r3
 800c158:	bd08      	pop	{r3, pc}

0800c15a <_WritePara_B16>:
 800c15a:	b508      	push	{r3, lr}
 800c15c:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800c160:	4608      	mov	r0, r1
 800c162:	4798      	blx	r3
 800c164:	bd08      	pop	{r3, pc}
	...

0800c168 <_SetInterface>:
 800c168:	2908      	cmp	r1, #8
 800c16a:	d002      	beq.n	800c172 <_SetInterface+0xa>
 800c16c:	2910      	cmp	r1, #16
 800c16e:	d005      	beq.n	800c17c <_SetInterface+0x14>
 800c170:	4770      	bx	lr
 800c172:	4b06      	ldr	r3, [pc, #24]	; (800c18c <_SetInterface+0x24>)
 800c174:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800c178:	4b05      	ldr	r3, [pc, #20]	; (800c190 <_SetInterface+0x28>)
 800c17a:	e003      	b.n	800c184 <_SetInterface+0x1c>
 800c17c:	4b05      	ldr	r3, [pc, #20]	; (800c194 <_SetInterface+0x2c>)
 800c17e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800c182:	4b05      	ldr	r3, [pc, #20]	; (800c198 <_SetInterface+0x30>)
 800c184:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	0800c12b 	.word	0x0800c12b
 800c190:	0800c14f 	.word	0x0800c14f
 800c194:	0800c143 	.word	0x0800c143
 800c198:	0800c15b 	.word	0x0800c15b

0800c19c <_ReadRect_16bpp_B8>:
 800c19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c19e:	b085      	sub	sp, #20
 800c1a0:	6884      	ldr	r4, [r0, #8]
 800c1a2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c1a4:	9700      	str	r7, [sp, #0]
 800c1a6:	1abd      	subs	r5, r7, r2
 800c1a8:	1a58      	subs	r0, r3, r1
 800c1aa:	3501      	adds	r5, #1
 800c1ac:	fb00 5505 	mla	r5, r0, r5, r5
 800c1b0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800c1b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	47b8      	blx	r7
 800c1ba:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800c1be:	202e      	movs	r0, #46	; 0x2e
 800c1c0:	4798      	blx	r3
 800c1c2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800c1c6:	6a21      	ldr	r1, [r4, #32]
 800c1c8:	a802      	add	r0, sp, #8
 800c1ca:	4798      	blx	r3
 800c1cc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800c1d0:	a802      	add	r0, sp, #8
 800c1d2:	2103      	movs	r1, #3
 800c1d4:	4798      	blx	r3
 800c1d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c1da:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800c1de:	08db      	lsrs	r3, r3, #3
 800c1e0:	0892      	lsrs	r2, r2, #2
 800c1e2:	02db      	lsls	r3, r3, #11
 800c1e4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800c1e8:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800c1ec:	3d01      	subs	r5, #1
 800c1ee:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 800c1f2:	f826 3b02 	strh.w	r3, [r6], #2
 800c1f6:	d1e9      	bne.n	800c1cc <_ReadRect_16bpp_B8+0x30>
 800c1f8:	b005      	add	sp, #20
 800c1fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c1fc <_ReadRect_16bpp_B16_I>:
 800c1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1fe:	b087      	sub	sp, #28
 800c200:	6884      	ldr	r4, [r0, #8]
 800c202:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800c204:	9700      	str	r7, [sp, #0]
 800c206:	1abd      	subs	r5, r7, r2
 800c208:	1a58      	subs	r0, r3, r1
 800c20a:	3501      	adds	r5, #1
 800c20c:	fb00 5505 	mla	r5, r0, r5, r5
 800c210:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800c214:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800c216:	4620      	mov	r0, r4
 800c218:	47b8      	blx	r7
 800c21a:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800c21e:	202e      	movs	r0, #46	; 0x2e
 800c220:	4798      	blx	r3
 800c222:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800c226:	6a21      	ldr	r1, [r4, #32]
 800c228:	a802      	add	r0, sp, #8
 800c22a:	4798      	blx	r3
 800c22c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800c230:	a802      	add	r0, sp, #8
 800c232:	2102      	movs	r1, #2
 800c234:	4798      	blx	r3
 800c236:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800c23a:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 800c23e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800c242:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 800c246:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800c24a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 800c24e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c252:	3d01      	subs	r5, #1
 800c254:	f826 3b02 	strh.w	r3, [r6], #2
 800c258:	d1e8      	bne.n	800c22c <_ReadRect_16bpp_B16_I+0x30>
 800c25a:	b007      	add	sp, #28
 800c25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800c260 <GUIDRV_FlexColor_SetFunc66720>:
 800c260:	b510      	push	{r4, lr}
 800c262:	4604      	mov	r4, r0
 800c264:	f000 fda6 	bl	800cdb4 <GUIDRV_FlexColor__InitOnce>
 800c268:	68a3      	ldr	r3, [r4, #8]
 800c26a:	4a12      	ldr	r2, [pc, #72]	; (800c2b4 <GUIDRV_FlexColor_SetFunc66720+0x54>)
 800c26c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800c270:	4a11      	ldr	r2, [pc, #68]	; (800c2b8 <GUIDRV_FlexColor_SetFunc66720+0x58>)
 800c272:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800c276:	4a11      	ldr	r2, [pc, #68]	; (800c2bc <GUIDRV_FlexColor_SetFunc66720+0x5c>)
 800c278:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800c27c:	4a10      	ldr	r2, [pc, #64]	; (800c2c0 <GUIDRV_FlexColor_SetFunc66720+0x60>)
 800c27e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800c282:	2200      	movs	r2, #0
 800c284:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800c288:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800c28c:	4a0d      	ldr	r2, [pc, #52]	; (800c2c4 <GUIDRV_FlexColor_SetFunc66720+0x64>)
 800c28e:	490e      	ldr	r1, [pc, #56]	; (800c2c8 <GUIDRV_FlexColor_SetFunc66720+0x68>)
 800c290:	6812      	ldr	r2, [r2, #0]
 800c292:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800c296:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800c298:	6809      	ldr	r1, [r1, #0]
 800c29a:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 800c29e:	f022 0203 	bic.w	r2, r2, #3
 800c2a2:	490a      	ldr	r1, [pc, #40]	; (800c2cc <GUIDRV_FlexColor_SetFunc66720+0x6c>)
 800c2a4:	84da      	strh	r2, [r3, #38]	; 0x26
 800c2a6:	4a0a      	ldr	r2, [pc, #40]	; (800c2d0 <GUIDRV_FlexColor_SetFunc66720+0x70>)
 800c2a8:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 800c2ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800c2b0:	bd10      	pop	{r4, pc}
 800c2b2:	bf00      	nop
 800c2b4:	0800be41 	.word	0x0800be41
 800c2b8:	0800bf01 	.word	0x0800bf01
 800c2bc:	0800c079 	.word	0x0800c079
 800c2c0:	0800c0b5 	.word	0x0800c0b5
 800c2c4:	200000b8 	.word	0x200000b8
 800c2c8:	200000b4 	.word	0x200000b4
 800c2cc:	0800c19d 	.word	0x0800c19d
 800c2d0:	0800c169 	.word	0x0800c169

0800c2d4 <_ReadData>:
 800c2d4:	b508      	push	{r3, lr}
 800c2d6:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 800c2da:	4798      	blx	r3
 800c2dc:	bd08      	pop	{r3, pc}

0800c2de <_WriteData>:
 800c2de:	b508      	push	{r3, lr}
 800c2e0:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800c2e4:	b288      	uxth	r0, r1
 800c2e6:	4798      	blx	r3
 800c2e8:	bd08      	pop	{r3, pc}
	...

0800c2ec <_FillRect>:
 800c2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f0:	4f3d      	ldr	r7, [pc, #244]	; (800c3e8 <_FillRect+0xfc>)
 800c2f2:	6884      	ldr	r4, [r0, #8]
 800c2f4:	4682      	mov	sl, r0
 800c2f6:	6838      	ldr	r0, [r7, #0]
 800c2f8:	7c00      	ldrb	r0, [r0, #16]
 800c2fa:	f010 0f01 	tst.w	r0, #1
 800c2fe:	b085      	sub	sp, #20
 800c300:	460e      	mov	r6, r1
 800c302:	4615      	mov	r5, r2
 800c304:	4698      	mov	r8, r3
 800c306:	ebc1 0903 	rsb	r9, r1, r3
 800c30a:	d045      	beq.n	800c398 <_FillRect+0xac>
 800c30c:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 800c310:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c312:	4285      	cmp	r5, r0
 800c314:	dc65      	bgt.n	800c3e2 <_FillRect+0xf6>
 800c316:	f8d4 c0c4 	ldr.w	ip, [r4, #196]	; 0xc4
 800c31a:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800c31c:	f1bc 0f00 	cmp.w	ip, #0
 800c320:	d101      	bne.n	800c326 <_FillRect+0x3a>
 800c322:	46b4      	mov	ip, r6
 800c324:	e007      	b.n	800c336 <_FillRect+0x4a>
 800c326:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800c32a:	4650      	mov	r0, sl
 800c32c:	4631      	mov	r1, r6
 800c32e:	462a      	mov	r2, r5
 800c330:	4643      	mov	r3, r8
 800c332:	47e0      	blx	ip
 800c334:	e011      	b.n	800c35a <_FillRect+0x6e>
 800c336:	45c4      	cmp	ip, r8
 800c338:	dc0e      	bgt.n	800c358 <_FillRect+0x6c>
 800c33a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800c33e:	f8cd c00c 	str.w	ip, [sp, #12]
 800c342:	4661      	mov	r1, ip
 800c344:	4650      	mov	r0, sl
 800c346:	462a      	mov	r2, r5
 800c348:	4798      	blx	r3
 800c34a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c34e:	f827 0b02 	strh.w	r0, [r7], #2
 800c352:	f10c 0c01 	add.w	ip, ip, #1
 800c356:	e7ee      	b.n	800c336 <_FillRect+0x4a>
 800c358:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800c35a:	1ebb      	subs	r3, r7, #2
 800c35c:	f109 0c01 	add.w	ip, r9, #1
 800c360:	445f      	add	r7, fp
 800c362:	42bb      	cmp	r3, r7
 800c364:	d005      	beq.n	800c372 <_FillRect+0x86>
 800c366:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c368:	8859      	ldrh	r1, [r3, #2]
 800c36a:	404a      	eors	r2, r1
 800c36c:	f823 2f02 	strh.w	r2, [r3, #2]!
 800c370:	e7f7      	b.n	800c362 <_FillRect+0x76>
 800c372:	9500      	str	r5, [sp, #0]
 800c374:	462a      	mov	r2, r5
 800c376:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800c37a:	f8cd c00c 	str.w	ip, [sp, #12]
 800c37e:	4620      	mov	r0, r4
 800c380:	4631      	mov	r1, r6
 800c382:	4643      	mov	r3, r8
 800c384:	47b8      	blx	r7
 800c386:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c38a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800c38e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c390:	4661      	mov	r1, ip
 800c392:	4798      	blx	r3
 800c394:	3501      	adds	r5, #1
 800c396:	e7bb      	b.n	800c310 <_FillRect+0x24>
 800c398:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c39a:	9000      	str	r0, [sp, #0]
 800c39c:	1a85      	subs	r5, r0, r2
 800c39e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	47b0      	blx	r6
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	6ea7      	ldr	r7, [r4, #104]	; 0x68
 800c3aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ac:	f109 0901 	add.w	r9, r9, #1
 800c3b0:	f8d3 8000 	ldr.w	r8, [r3]
 800c3b4:	fb05 9509 	mla	r5, r5, r9, r9
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	b195      	cbz	r5, 800c3e2 <_FillRect+0xf6>
 800c3bc:	2dfa      	cmp	r5, #250	; 0xfa
 800c3be:	bf34      	ite	cc
 800c3c0:	462e      	movcc	r6, r5
 800c3c2:	26fa      	movcs	r6, #250	; 0xfa
 800c3c4:	b12b      	cbz	r3, 800c3d2 <_FillRect+0xe6>
 800c3c6:	4638      	mov	r0, r7
 800c3c8:	fa1f f188 	uxth.w	r1, r8
 800c3cc:	4632      	mov	r2, r6
 800c3ce:	f001 fae4 	bl	800d99a <GUI__memset16>
 800c3d2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	4631      	mov	r1, r6
 800c3da:	4798      	blx	r3
 800c3dc:	1bad      	subs	r5, r5, r6
 800c3de:	2300      	movs	r3, #0
 800c3e0:	e7eb      	b.n	800c3ba <_FillRect+0xce>
 800c3e2:	b005      	add	sp, #20
 800c3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e8:	200000d8 	.word	0x200000d8

0800c3ec <_DrawBitmap>:
 800c3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f0:	b08d      	sub	sp, #52	; 0x34
 800c3f2:	6885      	ldr	r5, [r0, #8]
 800c3f4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800c3f6:	9305      	str	r3, [sp, #20]
 800c3f8:	1e7b      	subs	r3, r7, #1
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	9009      	str	r0, [sp, #36]	; 0x24
 800c3fe:	9108      	str	r1, [sp, #32]
 800c400:	920a      	str	r2, [sp, #40]	; 0x28
 800c402:	950b      	str	r5, [sp, #44]	; 0x2c
 800c404:	d903      	bls.n	800c40e <_DrawBitmap+0x22>
 800c406:	2f04      	cmp	r7, #4
 800c408:	d001      	beq.n	800c40e <_DrawBitmap+0x22>
 800c40a:	2f08      	cmp	r7, #8
 800c40c:	d106      	bne.n	800c41c <_DrawBitmap+0x30>
 800c40e:	4b8f      	ldr	r3, [pc, #572]	; (800c64c <_DrawBitmap+0x260>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	7c1b      	ldrb	r3, [r3, #16]
 800c414:	f003 0303 	and.w	r3, r3, #3
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d010      	beq.n	800c43e <_DrawBitmap+0x52>
 800c41c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c41e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800c420:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c422:	9908      	ldr	r1, [sp, #32]
 800c424:	9b05      	ldr	r3, [sp, #20]
 800c426:	443a      	add	r2, r7
 800c428:	4429      	add	r1, r5
 800c42a:	3a01      	subs	r2, #1
 800c42c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c42e:	9200      	str	r2, [sp, #0]
 800c430:	440b      	add	r3, r1
 800c432:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 800c436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c438:	4628      	mov	r0, r5
 800c43a:	3b01      	subs	r3, #1
 800c43c:	47a0      	blx	r4
 800c43e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800c442:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c444:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800c446:	ebc7 030b 	rsb	r3, r7, fp
 800c44a:	42ab      	cmp	r3, r5
 800c44c:	f280 8251 	bge.w	800c8f2 <_DrawBitmap+0x506>
 800c450:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800c452:	1e7b      	subs	r3, r7, #1
 800c454:	2b0f      	cmp	r3, #15
 800c456:	f200 8245 	bhi.w	800c8e4 <_DrawBitmap+0x4f8>
 800c45a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c45e:	0010      	.short	0x0010
 800c460:	024300b7 	.word	0x024300b7
 800c464:	02430140 	.word	0x02430140
 800c468:	02430243 	.word	0x02430243
 800c46c:	024301d7 	.word	0x024301d7
 800c470:	02430243 	.word	0x02430243
 800c474:	02430243 	.word	0x02430243
 800c478:	02430243 	.word	0x02430243
 800c47c:	023d      	.short	0x023d
 800c47e:	4b73      	ldr	r3, [pc, #460]	; (800c64c <_DrawBitmap+0x260>)
 800c480:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	68ac      	ldr	r4, [r5, #8]
 800c486:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c488:	7c1b      	ldrb	r3, [r3, #16]
 800c48a:	682f      	ldr	r7, [r5, #0]
 800c48c:	686d      	ldr	r5, [r5, #4]
 800c48e:	9507      	str	r5, [sp, #28]
 800c490:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c494:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c496:	f003 0303 	and.w	r3, r3, #3
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	44aa      	add	sl, r5
 800c49e:	d01b      	beq.n	800c4d8 <_DrawBitmap+0xec>
 800c4a0:	2b03      	cmp	r3, #3
 800c4a2:	d06e      	beq.n	800c582 <_DrawBitmap+0x196>
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d06c      	beq.n	800c582 <_DrawBitmap+0x196>
 800c4a8:	9e05      	ldr	r6, [sp, #20]
 800c4aa:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 800c4ae:	f898 1000 	ldrb.w	r1, [r8]
 800c4b2:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800c4b6:	2280      	movs	r2, #128	; 0x80
 800c4b8:	412a      	asrs	r2, r5
 800c4ba:	4211      	tst	r1, r2
 800c4bc:	bf16      	itet	ne
 800c4be:	9907      	ldrne	r1, [sp, #28]
 800c4c0:	b2b8      	uxtheq	r0, r7
 800c4c2:	b288      	uxthne	r0, r1
 800c4c4:	3501      	adds	r5, #1
 800c4c6:	4798      	blx	r3
 800c4c8:	2d08      	cmp	r5, #8
 800c4ca:	bf04      	itt	eq
 800c4cc:	f108 0801 	addeq.w	r8, r8, #1
 800c4d0:	2500      	moveq	r5, #0
 800c4d2:	3e01      	subs	r6, #1
 800c4d4:	d1eb      	bne.n	800c4ae <_DrawBitmap+0xc2>
 800c4d6:	e205      	b.n	800c8e4 <_DrawBitmap+0x4f8>
 800c4d8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c4da:	9506      	str	r5, [sp, #24]
 800c4dc:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800c4e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c4e4:	f8cd a00c 	str.w	sl, [sp, #12]
 800c4e8:	2500      	movs	r5, #0
 800c4ea:	4656      	mov	r6, sl
 800c4ec:	462b      	mov	r3, r5
 800c4ee:	9f06      	ldr	r7, [sp, #24]
 800c4f0:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800c4f4:	783a      	ldrb	r2, [r7, #0]
 800c4f6:	fa4c fc08 	asr.w	ip, ip, r8
 800c4fa:	ea12 0c0c 	ands.w	ip, r2, ip
 800c4fe:	d00b      	beq.n	800c518 <_DrawBitmap+0x12c>
 800c500:	b913      	cbnz	r3, 800c508 <_DrawBitmap+0x11c>
 800c502:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800c506:	9603      	str	r6, [sp, #12]
 800c508:	9f07      	ldr	r7, [sp, #28]
 800c50a:	f8a9 7000 	strh.w	r7, [r9]
 800c50e:	3501      	adds	r5, #1
 800c510:	f109 0902 	add.w	r9, r9, #2
 800c514:	2301      	movs	r3, #1
 800c516:	e017      	b.n	800c548 <_DrawBitmap+0x15c>
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d114      	bne.n	800c546 <_DrawBitmap+0x15a>
 800c51c:	f8cd b000 	str.w	fp, [sp]
 800c520:	f8cd c010 	str.w	ip, [sp, #16]
 800c524:	4620      	mov	r0, r4
 800c526:	9903      	ldr	r1, [sp, #12]
 800c528:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800c52c:	465a      	mov	r2, fp
 800c52e:	1e73      	subs	r3, r6, #1
 800c530:	47b8      	blx	r7
 800c532:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800c536:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c538:	4629      	mov	r1, r5
 800c53a:	4798      	blx	r3
 800c53c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c540:	4665      	mov	r5, ip
 800c542:	4663      	mov	r3, ip
 800c544:	e000      	b.n	800c548 <_DrawBitmap+0x15c>
 800c546:	4663      	mov	r3, ip
 800c548:	f108 0801 	add.w	r8, r8, #1
 800c54c:	f1b8 0f08 	cmp.w	r8, #8
 800c550:	f106 0601 	add.w	r6, r6, #1
 800c554:	d104      	bne.n	800c560 <_DrawBitmap+0x174>
 800c556:	9f06      	ldr	r7, [sp, #24]
 800c558:	3701      	adds	r7, #1
 800c55a:	9706      	str	r7, [sp, #24]
 800c55c:	f04f 0800 	mov.w	r8, #0
 800c560:	9a05      	ldr	r2, [sp, #20]
 800c562:	4452      	add	r2, sl
 800c564:	42b2      	cmp	r2, r6
 800c566:	d1c2      	bne.n	800c4ee <_DrawBitmap+0x102>
 800c568:	9f05      	ldr	r7, [sp, #20]
 800c56a:	1e7b      	subs	r3, r7, #1
 800c56c:	4453      	add	r3, sl
 800c56e:	2d00      	cmp	r5, #0
 800c570:	f000 81b8 	beq.w	800c8e4 <_DrawBitmap+0x4f8>
 800c574:	f8cd b000 	str.w	fp, [sp]
 800c578:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800c57c:	9903      	ldr	r1, [sp, #12]
 800c57e:	4620      	mov	r0, r4
 800c580:	e13d      	b.n	800c7fe <_DrawBitmap+0x412>
 800c582:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c586:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800c588:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c58a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c58e:	782a      	ldrb	r2, [r5, #0]
 800c590:	2380      	movs	r3, #128	; 0x80
 800c592:	4133      	asrs	r3, r6
 800c594:	44d1      	add	r9, sl
 800c596:	421a      	tst	r2, r3
 800c598:	ebc8 0909 	rsb	r9, r8, r9
 800c59c:	d00d      	beq.n	800c5ba <_DrawBitmap+0x1ce>
 800c59e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800c5a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5a4:	4649      	mov	r1, r9
 800c5a6:	465a      	mov	r2, fp
 800c5a8:	4798      	blx	r3
 800c5aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c5ac:	f8d4 70f0 	ldr.w	r7, [r4, #240]	; 0xf0
 800c5b0:	4043      	eors	r3, r0
 800c5b2:	4649      	mov	r1, r9
 800c5b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5b6:	465a      	mov	r2, fp
 800c5b8:	47b8      	blx	r7
 800c5ba:	3601      	adds	r6, #1
 800c5bc:	2e08      	cmp	r6, #8
 800c5be:	bf04      	itt	eq
 800c5c0:	3501      	addeq	r5, #1
 800c5c2:	2600      	moveq	r6, #0
 800c5c4:	f1b8 0801 	subs.w	r8, r8, #1
 800c5c8:	d1df      	bne.n	800c58a <_DrawBitmap+0x19e>
 800c5ca:	e18b      	b.n	800c8e4 <_DrawBitmap+0x4f8>
 800c5cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c5ce:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c5d0:	68ac      	ldr	r4, [r5, #8]
 800c5d2:	2f00      	cmp	r7, #0
 800c5d4:	f000 8186 	beq.w	800c8e4 <_DrawBitmap+0x4f8>
 800c5d8:	4b1c      	ldr	r3, [pc, #112]	; (800c64c <_DrawBitmap+0x260>)
 800c5da:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f895 a000 	ldrb.w	sl, [r5]
 800c5e2:	7c1b      	ldrb	r3, [r3, #16]
 800c5e4:	f013 0303 	ands.w	r3, r3, #3
 800c5e8:	d011      	beq.n	800c60e <_DrawBitmap+0x222>
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	f040 817a 	bne.w	800c8e4 <_DrawBitmap+0x4f8>
 800c5f0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c5f2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c5f6:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800c5f8:	9703      	str	r7, [sp, #12]
 800c5fa:	44a9      	add	r9, r5
 800c5fc:	46a8      	mov	r8, r5
 800c5fe:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c600:	9507      	str	r5, [sp, #28]
 800c602:	2500      	movs	r5, #0
 800c604:	f8cd 9018 	str.w	r9, [sp, #24]
 800c608:	464e      	mov	r6, r9
 800c60a:	462b      	mov	r3, r5
 800c60c:	e040      	b.n	800c690 <_DrawBitmap+0x2a4>
 800c60e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c610:	9e05      	ldr	r6, [sp, #20]
 800c612:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800c614:	f1c5 0303 	rsb	r3, r5, #3
 800c618:	005b      	lsls	r3, r3, #1
 800c61a:	f1c3 0206 	rsb	r2, r3, #6
 800c61e:	21c0      	movs	r1, #192	; 0xc0
 800c620:	fa41 f202 	asr.w	r2, r1, r2
 800c624:	ea02 020a 	and.w	r2, r2, sl
 800c628:	40da      	lsrs	r2, r3
 800c62a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c62c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800c630:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 800c634:	3501      	adds	r5, #1
 800c636:	4798      	blx	r3
 800c638:	2d04      	cmp	r5, #4
 800c63a:	d103      	bne.n	800c644 <_DrawBitmap+0x258>
 800c63c:	f897 a001 	ldrb.w	sl, [r7, #1]
 800c640:	2500      	movs	r5, #0
 800c642:	3701      	adds	r7, #1
 800c644:	3e01      	subs	r6, #1
 800c646:	d1e5      	bne.n	800c614 <_DrawBitmap+0x228>
 800c648:	e14c      	b.n	800c8e4 <_DrawBitmap+0x4f8>
 800c64a:	bf00      	nop
 800c64c:	200000d8 	.word	0x200000d8
 800c650:	b913      	cbnz	r3, 800c658 <_DrawBitmap+0x26c>
 800c652:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800c654:	9703      	str	r7, [sp, #12]
 800c656:	9606      	str	r6, [sp, #24]
 800c658:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c65a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800c65e:	9f03      	ldr	r7, [sp, #12]
 800c660:	803b      	strh	r3, [r7, #0]
 800c662:	3702      	adds	r7, #2
 800c664:	3501      	adds	r5, #1
 800c666:	9703      	str	r7, [sp, #12]
 800c668:	2301      	movs	r3, #1
 800c66a:	f108 0801 	add.w	r8, r8, #1
 800c66e:	f1b8 0f04 	cmp.w	r8, #4
 800c672:	f106 0601 	add.w	r6, r6, #1
 800c676:	d106      	bne.n	800c686 <_DrawBitmap+0x29a>
 800c678:	9f07      	ldr	r7, [sp, #28]
 800c67a:	f897 a001 	ldrb.w	sl, [r7, #1]
 800c67e:	3701      	adds	r7, #1
 800c680:	9707      	str	r7, [sp, #28]
 800c682:	f04f 0800 	mov.w	r8, #0
 800c686:	9a05      	ldr	r2, [sp, #20]
 800c688:	444a      	add	r2, r9
 800c68a:	42b2      	cmp	r2, r6
 800c68c:	f000 80ac 	beq.w	800c7e8 <_DrawBitmap+0x3fc>
 800c690:	f1c8 0203 	rsb	r2, r8, #3
 800c694:	0052      	lsls	r2, r2, #1
 800c696:	f1c2 0106 	rsb	r1, r2, #6
 800c69a:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 800c69e:	fa4c fc01 	asr.w	ip, ip, r1
 800c6a2:	ea0c 0c0a 	and.w	ip, ip, sl
 800c6a6:	fa3c fc02 	lsrs.w	ip, ip, r2
 800c6aa:	d1d1      	bne.n	800c650 <_DrawBitmap+0x264>
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d114      	bne.n	800c6da <_DrawBitmap+0x2ee>
 800c6b0:	f8cd b000 	str.w	fp, [sp]
 800c6b4:	f8cd c010 	str.w	ip, [sp, #16]
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	9906      	ldr	r1, [sp, #24]
 800c6bc:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800c6c0:	465a      	mov	r2, fp
 800c6c2:	1e73      	subs	r3, r6, #1
 800c6c4:	47b8      	blx	r7
 800c6c6:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800c6ca:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c6cc:	4629      	mov	r1, r5
 800c6ce:	4798      	blx	r3
 800c6d0:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c6d4:	4665      	mov	r5, ip
 800c6d6:	4663      	mov	r3, ip
 800c6d8:	e7c7      	b.n	800c66a <_DrawBitmap+0x27e>
 800c6da:	4663      	mov	r3, ip
 800c6dc:	e7c5      	b.n	800c66a <_DrawBitmap+0x27e>
 800c6de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c6e0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c6e2:	68ac      	ldr	r4, [r5, #8]
 800c6e4:	2f00      	cmp	r7, #0
 800c6e6:	f000 80fd 	beq.w	800c8e4 <_DrawBitmap+0x4f8>
 800c6ea:	4b83      	ldr	r3, [pc, #524]	; (800c8f8 <_DrawBitmap+0x50c>)
 800c6ec:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f895 a000 	ldrb.w	sl, [r5]
 800c6f4:	7c1b      	ldrb	r3, [r3, #16]
 800c6f6:	f013 0303 	ands.w	r3, r3, #3
 800c6fa:	d011      	beq.n	800c720 <_DrawBitmap+0x334>
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	f040 80f1 	bne.w	800c8e4 <_DrawBitmap+0x4f8>
 800c702:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c704:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c708:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800c70a:	9703      	str	r7, [sp, #12]
 800c70c:	44a9      	add	r9, r5
 800c70e:	46a8      	mov	r8, r5
 800c710:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c712:	9507      	str	r5, [sp, #28]
 800c714:	2500      	movs	r5, #0
 800c716:	f8cd 9018 	str.w	r9, [sp, #24]
 800c71a:	464e      	mov	r6, r9
 800c71c:	462b      	mov	r3, r5
 800c71e:	e03c      	b.n	800c79a <_DrawBitmap+0x3ae>
 800c720:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c722:	9e05      	ldr	r6, [sp, #20]
 800c724:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800c726:	f1c5 0301 	rsb	r3, r5, #1
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	f1c3 0204 	rsb	r2, r3, #4
 800c730:	21f0      	movs	r1, #240	; 0xf0
 800c732:	fa41 f202 	asr.w	r2, r1, r2
 800c736:	ea02 020a 	and.w	r2, r2, sl
 800c73a:	40da      	lsrs	r2, r3
 800c73c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c73e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800c742:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 800c746:	3501      	adds	r5, #1
 800c748:	4798      	blx	r3
 800c74a:	2d02      	cmp	r5, #2
 800c74c:	d103      	bne.n	800c756 <_DrawBitmap+0x36a>
 800c74e:	f897 a001 	ldrb.w	sl, [r7, #1]
 800c752:	2500      	movs	r5, #0
 800c754:	3701      	adds	r7, #1
 800c756:	3e01      	subs	r6, #1
 800c758:	d1e5      	bne.n	800c726 <_DrawBitmap+0x33a>
 800c75a:	e0c3      	b.n	800c8e4 <_DrawBitmap+0x4f8>
 800c75c:	b913      	cbnz	r3, 800c764 <_DrawBitmap+0x378>
 800c75e:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800c760:	9703      	str	r7, [sp, #12]
 800c762:	9606      	str	r6, [sp, #24]
 800c764:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c766:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800c76a:	9f03      	ldr	r7, [sp, #12]
 800c76c:	803b      	strh	r3, [r7, #0]
 800c76e:	3702      	adds	r7, #2
 800c770:	3501      	adds	r5, #1
 800c772:	9703      	str	r7, [sp, #12]
 800c774:	2301      	movs	r3, #1
 800c776:	f108 0801 	add.w	r8, r8, #1
 800c77a:	f1b8 0f02 	cmp.w	r8, #2
 800c77e:	f106 0601 	add.w	r6, r6, #1
 800c782:	d106      	bne.n	800c792 <_DrawBitmap+0x3a6>
 800c784:	9f07      	ldr	r7, [sp, #28]
 800c786:	f897 a001 	ldrb.w	sl, [r7, #1]
 800c78a:	3701      	adds	r7, #1
 800c78c:	9707      	str	r7, [sp, #28]
 800c78e:	f04f 0800 	mov.w	r8, #0
 800c792:	9a05      	ldr	r2, [sp, #20]
 800c794:	444a      	add	r2, r9
 800c796:	42b2      	cmp	r2, r6
 800c798:	d026      	beq.n	800c7e8 <_DrawBitmap+0x3fc>
 800c79a:	f1c8 0201 	rsb	r2, r8, #1
 800c79e:	0092      	lsls	r2, r2, #2
 800c7a0:	f1c2 0104 	rsb	r1, r2, #4
 800c7a4:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800c7a8:	fa4c fc01 	asr.w	ip, ip, r1
 800c7ac:	ea0c 0c0a 	and.w	ip, ip, sl
 800c7b0:	fa3c fc02 	lsrs.w	ip, ip, r2
 800c7b4:	d1d2      	bne.n	800c75c <_DrawBitmap+0x370>
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d114      	bne.n	800c7e4 <_DrawBitmap+0x3f8>
 800c7ba:	f8cd b000 	str.w	fp, [sp]
 800c7be:	f8cd c010 	str.w	ip, [sp, #16]
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	9906      	ldr	r1, [sp, #24]
 800c7c6:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800c7ca:	465a      	mov	r2, fp
 800c7cc:	1e73      	subs	r3, r6, #1
 800c7ce:	47b8      	blx	r7
 800c7d0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800c7d4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c7d6:	4629      	mov	r1, r5
 800c7d8:	4798      	blx	r3
 800c7da:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c7de:	4665      	mov	r5, ip
 800c7e0:	4663      	mov	r3, ip
 800c7e2:	e7c8      	b.n	800c776 <_DrawBitmap+0x38a>
 800c7e4:	4663      	mov	r3, ip
 800c7e6:	e7c6      	b.n	800c776 <_DrawBitmap+0x38a>
 800c7e8:	9f05      	ldr	r7, [sp, #20]
 800c7ea:	1e7b      	subs	r3, r7, #1
 800c7ec:	444b      	add	r3, r9
 800c7ee:	2d00      	cmp	r5, #0
 800c7f0:	d078      	beq.n	800c8e4 <_DrawBitmap+0x4f8>
 800c7f2:	f8cd b000 	str.w	fp, [sp]
 800c7f6:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800c7fa:	9906      	ldr	r1, [sp, #24]
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	465a      	mov	r2, fp
 800c800:	47b0      	blx	r6
 800c802:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800c806:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c808:	4629      	mov	r1, r5
 800c80a:	e06a      	b.n	800c8e2 <_DrawBitmap+0x4f6>
 800c80c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c80e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c810:	68ac      	ldr	r4, [r5, #8]
 800c812:	2f00      	cmp	r7, #0
 800c814:	d066      	beq.n	800c8e4 <_DrawBitmap+0x4f8>
 800c816:	4b38      	ldr	r3, [pc, #224]	; (800c8f8 <_DrawBitmap+0x50c>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	7c1b      	ldrb	r3, [r3, #16]
 800c81c:	f013 0303 	ands.w	r3, r3, #3
 800c820:	d009      	beq.n	800c836 <_DrawBitmap+0x44a>
 800c822:	2b02      	cmp	r3, #2
 800c824:	d15e      	bne.n	800c8e4 <_DrawBitmap+0x4f8>
 800c826:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c82a:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800c82e:	2600      	movs	r6, #0
 800c830:	464f      	mov	r7, r9
 800c832:	4633      	mov	r3, r6
 800c834:	e022      	b.n	800c87c <_DrawBitmap+0x490>
 800c836:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c838:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c83a:	9f05      	ldr	r7, [sp, #20]
 800c83c:	443b      	add	r3, r7
 800c83e:	1b5b      	subs	r3, r3, r5
 800c840:	2b00      	cmp	r3, #0
 800c842:	dd4f      	ble.n	800c8e4 <_DrawBitmap+0x4f8>
 800c844:	f815 2b01 	ldrb.w	r2, [r5], #1
 800c848:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c84a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800c84e:	f837 0022 	ldrh.w	r0, [r7, r2, lsl #2]
 800c852:	4798      	blx	r3
 800c854:	e7f0      	b.n	800c838 <_DrawBitmap+0x44c>
 800c856:	b913      	cbnz	r3, 800c85e <_DrawBitmap+0x472>
 800c858:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800c85c:	46b9      	mov	r9, r7
 800c85e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c860:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 800c864:	f8a8 3000 	strh.w	r3, [r8]
 800c868:	3601      	adds	r6, #1
 800c86a:	f108 0802 	add.w	r8, r8, #2
 800c86e:	2301      	movs	r3, #1
 800c870:	9a08      	ldr	r2, [sp, #32]
 800c872:	9d05      	ldr	r5, [sp, #20]
 800c874:	3701      	adds	r7, #1
 800c876:	442a      	add	r2, r5
 800c878:	42ba      	cmp	r2, r7
 800c87a:	d01c      	beq.n	800c8b6 <_DrawBitmap+0x4ca>
 800c87c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c87e:	9808      	ldr	r0, [sp, #32]
 800c880:	1a2a      	subs	r2, r5, r0
 800c882:	f812 a007 	ldrb.w	sl, [r2, r7]
 800c886:	f1ba 0f00 	cmp.w	sl, #0
 800c88a:	d1e4      	bne.n	800c856 <_DrawBitmap+0x46a>
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d110      	bne.n	800c8b2 <_DrawBitmap+0x4c6>
 800c890:	f8cd b000 	str.w	fp, [sp]
 800c894:	4620      	mov	r0, r4
 800c896:	4649      	mov	r1, r9
 800c898:	465a      	mov	r2, fp
 800c89a:	1e7b      	subs	r3, r7, #1
 800c89c:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800c8a0:	47a8      	blx	r5
 800c8a2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800c8a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c8a8:	4631      	mov	r1, r6
 800c8aa:	4798      	blx	r3
 800c8ac:	4656      	mov	r6, sl
 800c8ae:	4653      	mov	r3, sl
 800c8b0:	e7de      	b.n	800c870 <_DrawBitmap+0x484>
 800c8b2:	4653      	mov	r3, sl
 800c8b4:	e7dc      	b.n	800c870 <_DrawBitmap+0x484>
 800c8b6:	9f08      	ldr	r7, [sp, #32]
 800c8b8:	1e6b      	subs	r3, r5, #1
 800c8ba:	443b      	add	r3, r7
 800c8bc:	b196      	cbz	r6, 800c8e4 <_DrawBitmap+0x4f8>
 800c8be:	f8cd b000 	str.w	fp, [sp]
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800c8ca:	465a      	mov	r2, fp
 800c8cc:	47a8      	blx	r5
 800c8ce:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800c8d2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c8d4:	4631      	mov	r1, r6
 800c8d6:	e004      	b.n	800c8e2 <_DrawBitmap+0x4f6>
 800c8d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c8da:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c8dc:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
 800c8e0:	9905      	ldr	r1, [sp, #20]
 800c8e2:	4798      	blx	r3
 800c8e4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800c8e6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800c8e8:	442f      	add	r7, r5
 800c8ea:	9719      	str	r7, [sp, #100]	; 0x64
 800c8ec:	f10b 0b01 	add.w	fp, fp, #1
 800c8f0:	e5a7      	b.n	800c442 <_DrawBitmap+0x56>
 800c8f2:	b00d      	add	sp, #52	; 0x34
 800c8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f8:	200000d8 	.word	0x200000d8

0800c8fc <GUIDRV_FlexColor_SetMode16bppC0B16>:
 800c8fc:	b510      	push	{r4, lr}
 800c8fe:	4604      	mov	r4, r0
 800c900:	f000 fa58 	bl	800cdb4 <GUIDRV_FlexColor__InitOnce>
 800c904:	68a4      	ldr	r4, [r4, #8]
 800c906:	4b10      	ldr	r3, [pc, #64]	; (800c948 <GUIDRV_FlexColor_SetMode16bppC0B16+0x4c>)
 800c908:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 800c90c:	4b0f      	ldr	r3, [pc, #60]	; (800c94c <GUIDRV_FlexColor_SetMode16bppC0B16+0x50>)
 800c90e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800c912:	4b0f      	ldr	r3, [pc, #60]	; (800c950 <GUIDRV_FlexColor_SetMode16bppC0B16+0x54>)
 800c914:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800c918:	4b0e      	ldr	r3, [pc, #56]	; (800c954 <GUIDRV_FlexColor_SetMode16bppC0B16+0x58>)
 800c91a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800c91e:	4b0e      	ldr	r3, [pc, #56]	; (800c958 <GUIDRV_FlexColor_SetMode16bppC0B16+0x5c>)
 800c920:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800c924:	4b0d      	ldr	r3, [pc, #52]	; (800c95c <GUIDRV_FlexColor_SetMode16bppC0B16+0x60>)
 800c926:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 800c92a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800c92e:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 800c932:	4620      	mov	r0, r4
 800c934:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800c938:	2110      	movs	r1, #16
 800c93a:	4798      	blx	r3
 800c93c:	2310      	movs	r3, #16
 800c93e:	63a3      	str	r3, [r4, #56]	; 0x38
 800c940:	4b07      	ldr	r3, [pc, #28]	; (800c960 <GUIDRV_FlexColor_SetMode16bppC0B16+0x64>)
 800c942:	6463      	str	r3, [r4, #68]	; 0x44
 800c944:	bd10      	pop	{r4, pc}
 800c946:	bf00      	nop
 800c948:	0800c3ed 	.word	0x0800c3ed
 800c94c:	0800c2ed 	.word	0x0800c2ed
 800c950:	0800cd03 	.word	0x0800cd03
 800c954:	0800cc73 	.word	0x0800cc73
 800c958:	0800c2d5 	.word	0x0800c2d5
 800c95c:	0800c2df 	.word	0x0800c2df
 800c960:	0801a9cc 	.word	0x0801a9cc

0800c964 <_Log2PhysX_X0Y0S0>:
 800c964:	4608      	mov	r0, r1
 800c966:	4770      	bx	lr

0800c968 <_Log2PhysX_X1Y0S0>:
 800c968:	6800      	ldr	r0, [r0, #0]
 800c96a:	1a40      	subs	r0, r0, r1
 800c96c:	3801      	subs	r0, #1
 800c96e:	4770      	bx	lr

0800c970 <_Log2PhysX_X0Y1S0>:
 800c970:	4608      	mov	r0, r1
 800c972:	4770      	bx	lr

0800c974 <_Log2PhysX_X1Y1S0>:
 800c974:	6800      	ldr	r0, [r0, #0]
 800c976:	1a40      	subs	r0, r0, r1
 800c978:	3801      	subs	r0, #1
 800c97a:	4770      	bx	lr

0800c97c <_Log2PhysX_X0Y0S1>:
 800c97c:	4610      	mov	r0, r2
 800c97e:	4770      	bx	lr

0800c980 <_Log2PhysX_X1Y0S1>:
 800c980:	6840      	ldr	r0, [r0, #4]
 800c982:	1a80      	subs	r0, r0, r2
 800c984:	3801      	subs	r0, #1
 800c986:	4770      	bx	lr

0800c988 <_Log2PhysX_X0Y1S1>:
 800c988:	4610      	mov	r0, r2
 800c98a:	4770      	bx	lr

0800c98c <_Log2PhysX_X1Y1S1>:
 800c98c:	6840      	ldr	r0, [r0, #4]
 800c98e:	1a80      	subs	r0, r0, r2
 800c990:	3801      	subs	r0, #1
 800c992:	4770      	bx	lr

0800c994 <_Log2PhysY_X0Y0S0>:
 800c994:	4610      	mov	r0, r2
 800c996:	4770      	bx	lr

0800c998 <_Log2PhysY_X1Y0S0>:
 800c998:	4610      	mov	r0, r2
 800c99a:	4770      	bx	lr

0800c99c <_Log2PhysY_X0Y1S0>:
 800c99c:	6840      	ldr	r0, [r0, #4]
 800c99e:	1a80      	subs	r0, r0, r2
 800c9a0:	3801      	subs	r0, #1
 800c9a2:	4770      	bx	lr

0800c9a4 <_Log2PhysY_X1Y1S0>:
 800c9a4:	6840      	ldr	r0, [r0, #4]
 800c9a6:	1a80      	subs	r0, r0, r2
 800c9a8:	3801      	subs	r0, #1
 800c9aa:	4770      	bx	lr

0800c9ac <_Log2PhysY_X0Y0S1>:
 800c9ac:	4608      	mov	r0, r1
 800c9ae:	4770      	bx	lr

0800c9b0 <_Log2PhysY_X1Y0S1>:
 800c9b0:	4608      	mov	r0, r1
 800c9b2:	4770      	bx	lr

0800c9b4 <_Log2PhysY_X0Y1S1>:
 800c9b4:	6800      	ldr	r0, [r0, #0]
 800c9b6:	1a40      	subs	r0, r0, r1
 800c9b8:	3801      	subs	r0, #1
 800c9ba:	4770      	bx	lr

0800c9bc <_Log2PhysY_X1Y1S1>:
 800c9bc:	6800      	ldr	r0, [r0, #0]
 800c9be:	1a40      	subs	r0, r0, r1
 800c9c0:	3801      	subs	r0, #1
 800c9c2:	4770      	bx	lr

0800c9c4 <_SetPixelIndex>:
 800c9c4:	b510      	push	{r4, lr}
 800c9c6:	6884      	ldr	r4, [r0, #8]
 800c9c8:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800c9cc:	47a0      	blx	r4
 800c9ce:	bd10      	pop	{r4, pc}

0800c9d0 <_GetPixelIndex>:
 800c9d0:	b508      	push	{r3, lr}
 800c9d2:	6883      	ldr	r3, [r0, #8]
 800c9d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c9d8:	4798      	blx	r3
 800c9da:	bd08      	pop	{r3, pc}

0800c9dc <_XorPixel>:
 800c9dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9de:	4604      	mov	r4, r0
 800c9e0:	460f      	mov	r7, r1
 800c9e2:	4616      	mov	r6, r2
 800c9e4:	6885      	ldr	r5, [r0, #8]
 800c9e6:	f7ff fff3 	bl	800c9d0 <_GetPixelIndex>
 800c9ea:	9001      	str	r0, [sp, #4]
 800c9ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c9f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	4639      	mov	r1, r7
 800c9f6:	4632      	mov	r2, r6
 800c9f8:	ea8e 0303 	eor.w	r3, lr, r3
 800c9fc:	f7ff ffe2 	bl	800c9c4 <_SetPixelIndex>
 800ca00:	b003      	add	sp, #12
 800ca02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca04 <_DrawHLine>:
 800ca04:	b513      	push	{r0, r1, r4, lr}
 800ca06:	6884      	ldr	r4, [r0, #8]
 800ca08:	9200      	str	r2, [sp, #0]
 800ca0a:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 800ca0e:	47a0      	blx	r4
 800ca10:	b002      	add	sp, #8
 800ca12:	bd10      	pop	{r4, pc}

0800ca14 <_DrawVLine>:
 800ca14:	b513      	push	{r0, r1, r4, lr}
 800ca16:	6884      	ldr	r4, [r0, #8]
 800ca18:	9300      	str	r3, [sp, #0]
 800ca1a:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 800ca1e:	460b      	mov	r3, r1
 800ca20:	47a0      	blx	r4
 800ca22:	b002      	add	sp, #8
 800ca24:	bd10      	pop	{r4, pc}

0800ca26 <_FillRect>:
 800ca26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca28:	9c06      	ldr	r4, [sp, #24]
 800ca2a:	6885      	ldr	r5, [r0, #8]
 800ca2c:	9400      	str	r4, [sp, #0]
 800ca2e:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 800ca32:	47a0      	blx	r4
 800ca34:	b003      	add	sp, #12
 800ca36:	bd30      	pop	{r4, r5, pc}

0800ca38 <_DrawBitmap>:
 800ca38:	b530      	push	{r4, r5, lr}
 800ca3a:	b087      	sub	sp, #28
 800ca3c:	6885      	ldr	r5, [r0, #8]
 800ca3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ca40:	9400      	str	r4, [sp, #0]
 800ca42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ca44:	9401      	str	r4, [sp, #4]
 800ca46:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ca48:	9402      	str	r4, [sp, #8]
 800ca4a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ca4c:	9403      	str	r4, [sp, #12]
 800ca4e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ca50:	9404      	str	r4, [sp, #16]
 800ca52:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800ca54:	9405      	str	r4, [sp, #20]
 800ca56:	f8d5 40e4 	ldr.w	r4, [r5, #228]	; 0xe4
 800ca5a:	47a0      	blx	r4
 800ca5c:	b007      	add	sp, #28
 800ca5e:	bd30      	pop	{r4, r5, pc}

0800ca60 <_GetDevFunc_SetRect>:
 800ca60:	4770      	bx	lr
	...

0800ca64 <_GetDevFunc_SetRectOutside>:
 800ca64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca66:	9e07      	ldr	r6, [sp, #28]
 800ca68:	6884      	ldr	r4, [r0, #8]
 800ca6a:	4d0c      	ldr	r5, [pc, #48]	; (800ca9c <_GetDevFunc_SetRectOutside+0x38>)
 800ca6c:	b176      	cbz	r6, 800ca8c <_GetDevFunc_SetRectOutside+0x28>
 800ca6e:	6828      	ldr	r0, [r5, #0]
 800ca70:	b988      	cbnz	r0, 800ca96 <_GetDevFunc_SetRectOutside+0x32>
 800ca72:	9806      	ldr	r0, [sp, #24]
 800ca74:	9000      	str	r0, [sp, #0]
 800ca76:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	47b0      	blx	r6
 800ca7e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800ca82:	602b      	str	r3, [r5, #0]
 800ca84:	4b06      	ldr	r3, [pc, #24]	; (800caa0 <_GetDevFunc_SetRectOutside+0x3c>)
 800ca86:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800ca8a:	e004      	b.n	800ca96 <_GetDevFunc_SetRectOutside+0x32>
 800ca8c:	682b      	ldr	r3, [r5, #0]
 800ca8e:	b113      	cbz	r3, 800ca96 <_GetDevFunc_SetRectOutside+0x32>
 800ca90:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800ca94:	602e      	str	r6, [r5, #0]
 800ca96:	b002      	add	sp, #8
 800ca98:	bd70      	pop	{r4, r5, r6, pc}
 800ca9a:	bf00      	nop
 800ca9c:	2001d07c 	.word	0x2001d07c
 800caa0:	0800ca61 	.word	0x0800ca61

0800caa4 <_ReadPixelCust_16bpp>:
 800caa4:	b508      	push	{r3, lr}
 800caa6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800caa8:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 800caac:	6990      	ldr	r0, [r2, #24]
 800caae:	4798      	blx	r3
 800cab0:	bd08      	pop	{r3, pc}

0800cab2 <_ReadPixelCust_18bpp>:
 800cab2:	b508      	push	{r3, lr}
 800cab4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800cab6:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800caba:	6990      	ldr	r0, [r2, #24]
 800cabc:	4798      	blx	r3
 800cabe:	bd08      	pop	{r3, pc}

0800cac0 <_ReadRectCust_16bpp>:
 800cac0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cac4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cac6:	6884      	ldr	r4, [r0, #8]
 800cac8:	9500      	str	r5, [sp, #0]
 800caca:	4617      	mov	r7, r2
 800cacc:	4620      	mov	r0, r4
 800cace:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800cad2:	4699      	mov	r9, r3
 800cad4:	4688      	mov	r8, r1
 800cad6:	1bed      	subs	r5, r5, r7
 800cad8:	47b0      	blx	r6
 800cada:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cadc:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800cae0:	6988      	ldr	r0, [r1, #24]
 800cae2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cae4:	ebc8 0809 	rsb	r8, r8, r9
 800cae8:	1c6a      	adds	r2, r5, #1
 800caea:	fb08 2202 	mla	r2, r8, r2, r2
 800caee:	4798      	blx	r3
 800caf0:	b003      	add	sp, #12
 800caf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800caf6 <_ReadRectCust_18bpp>:
 800caf6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cafa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cafc:	6884      	ldr	r4, [r0, #8]
 800cafe:	9500      	str	r5, [sp, #0]
 800cb00:	4617      	mov	r7, r2
 800cb02:	4620      	mov	r0, r4
 800cb04:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800cb08:	4699      	mov	r9, r3
 800cb0a:	4688      	mov	r8, r1
 800cb0c:	1bed      	subs	r5, r5, r7
 800cb0e:	47b0      	blx	r6
 800cb10:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cb12:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800cb16:	6988      	ldr	r0, [r1, #24]
 800cb18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb1a:	ebc8 0809 	rsb	r8, r8, r9
 800cb1e:	1c6a      	adds	r2, r5, #1
 800cb20:	fb08 2202 	mla	r2, r8, r2, r2
 800cb24:	4798      	blx	r3
 800cb26:	b003      	add	sp, #12
 800cb28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cb2c <_GetDevFunc>:
 800cb2c:	3901      	subs	r1, #1
 800cb2e:	2917      	cmp	r1, #23
 800cb30:	d824      	bhi.n	800cb7c <_GetDevFunc+0x50>
 800cb32:	e8df f001 	tbb	[pc, r1]
 800cb36:	2310      	.short	0x2310
 800cb38:	23232323 	.word	0x23232323
 800cb3c:	0c232323 	.word	0x0c232323
 800cb40:	23150e25 	.word	0x23150e25
 800cb44:	23232323 	.word	0x23232323
 800cb48:	1f232323 	.word	0x1f232323
 800cb4c:	211a      	.short	0x211a
 800cb4e:	480d      	ldr	r0, [pc, #52]	; (800cb84 <_GetDevFunc+0x58>)
 800cb50:	4770      	bx	lr
 800cb52:	480d      	ldr	r0, [pc, #52]	; (800cb88 <_GetDevFunc+0x5c>)
 800cb54:	4770      	bx	lr
 800cb56:	6803      	ldr	r3, [r0, #0]
 800cb58:	689b      	ldr	r3, [r3, #8]
 800cb5a:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 800cb5e:	4770      	bx	lr
 800cb60:	6803      	ldr	r3, [r0, #0]
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 800cb68:	4770      	bx	lr
 800cb6a:	6803      	ldr	r3, [r0, #0]
 800cb6c:	689b      	ldr	r3, [r3, #8]
 800cb6e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 800cb72:	4770      	bx	lr
 800cb74:	4805      	ldr	r0, [pc, #20]	; (800cb8c <_GetDevFunc+0x60>)
 800cb76:	4770      	bx	lr
 800cb78:	4805      	ldr	r0, [pc, #20]	; (800cb90 <_GetDevFunc+0x64>)
 800cb7a:	4770      	bx	lr
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	4770      	bx	lr
 800cb80:	4804      	ldr	r0, [pc, #16]	; (800cb94 <_GetDevFunc+0x68>)
 800cb82:	4770      	bx	lr
 800cb84:	0800cee3 	.word	0x0800cee3
 800cb88:	0800ce85 	.word	0x0800ce85
 800cb8c:	0800cde9 	.word	0x0800cde9
 800cb90:	0800ca65 	.word	0x0800ca65
 800cb94:	0800cecf 	.word	0x0800cecf

0800cb98 <_GetDevProp>:
 800cb98:	3901      	subs	r1, #1
 800cb9a:	6880      	ldr	r0, [r0, #8]
 800cb9c:	290d      	cmp	r1, #13
 800cb9e:	d823      	bhi.n	800cbe8 <_GetDevProp+0x50>
 800cba0:	e8df f001 	tbb	[pc, r1]
 800cba4:	0f0d0b09 	.word	0x0f0d0b09
 800cba8:	11222222 	.word	0x11222222
 800cbac:	13252507 	.word	0x13252507
 800cbb0:	1d18      	.short	0x1d18
 800cbb2:	2000      	movs	r0, #0
 800cbb4:	4770      	bx	lr
 800cbb6:	6800      	ldr	r0, [r0, #0]
 800cbb8:	4770      	bx	lr
 800cbba:	6840      	ldr	r0, [r0, #4]
 800cbbc:	4770      	bx	lr
 800cbbe:	6880      	ldr	r0, [r0, #8]
 800cbc0:	4770      	bx	lr
 800cbc2:	68c0      	ldr	r0, [r0, #12]
 800cbc4:	4770      	bx	lr
 800cbc6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800cbc8:	4770      	bx	lr
 800cbca:	b188      	cbz	r0, 800cbf0 <_GetDevProp+0x58>
 800cbcc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800cbce:	f000 0001 	and.w	r0, r0, #1
 800cbd2:	4770      	bx	lr
 800cbd4:	b160      	cbz	r0, 800cbf0 <_GetDevProp+0x58>
 800cbd6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800cbd8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800cbdc:	4770      	bx	lr
 800cbde:	b138      	cbz	r0, 800cbf0 <_GetDevProp+0x58>
 800cbe0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800cbe2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800cbe6:	4770      	bx	lr
 800cbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbec:	4770      	bx	lr
 800cbee:	2001      	movs	r0, #1
 800cbf0:	4770      	bx	lr

0800cbf2 <_GetDevData>:
 800cbf2:	6883      	ldr	r3, [r0, #8]
 800cbf4:	2901      	cmp	r1, #1
 800cbf6:	bf0c      	ite	eq
 800cbf8:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 800cbfa:	2000      	movne	r0, #0
 800cbfc:	4770      	bx	lr

0800cbfe <_GetRect>:
 800cbfe:	6883      	ldr	r3, [r0, #8]
 800cc00:	2200      	movs	r2, #0
 800cc02:	800a      	strh	r2, [r1, #0]
 800cc04:	804a      	strh	r2, [r1, #2]
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	3a01      	subs	r2, #1
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	808a      	strh	r2, [r1, #4]
 800cc10:	80cb      	strh	r3, [r1, #6]
 800cc12:	4770      	bx	lr

0800cc14 <GUIDRV_FlexColor__SetLog2Phys>:
 800cc14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc16:	4d10      	ldr	r5, [pc, #64]	; (800cc58 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 800cc18:	462e      	mov	r6, r5
 800cc1a:	4607      	mov	r7, r0
 800cc1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cc1e:	b091      	sub	sp, #68	; 0x44
 800cc20:	466c      	mov	r4, sp
 800cc22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc24:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800cc28:	3520      	adds	r5, #32
 800cc2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc30:	ac08      	add	r4, sp, #32
 800cc32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cc38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3e:	aa10      	add	r2, sp, #64	; 0x40
 800cc40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc44:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800cc48:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800cc4c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800cc50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cc54:	b011      	add	sp, #68	; 0x44
 800cc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc58:	08017204 	.word	0x08017204

0800cc5c <_SetOrg>:
 800cc5c:	b507      	push	{r0, r1, r2, lr}
 800cc5e:	6980      	ldr	r0, [r0, #24]
 800cc60:	e88d 0006 	stmia.w	sp, {r1, r2}
 800cc64:	2103      	movs	r1, #3
 800cc66:	466a      	mov	r2, sp
 800cc68:	f7f4 f9a8 	bl	8000fbc <LCD_X_DisplayDriver>
 800cc6c:	b003      	add	sp, #12
 800cc6e:	f85d fb04 	ldr.w	pc, [sp], #4

0800cc72 <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 800cc72:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc76:	6884      	ldr	r4, [r0, #8]
 800cc78:	4698      	mov	r8, r3
 800cc7a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800cc7c:	079b      	lsls	r3, r3, #30
 800cc7e:	4689      	mov	r9, r1
 800cc80:	4617      	mov	r7, r2
 800cc82:	d532      	bpl.n	800ccea <GUIDRV_FlexColor__SetPixelIndexNoCache+0x78>
 800cc84:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800cc88:	4620      	mov	r0, r4
 800cc8a:	4798      	blx	r3
 800cc8c:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 800cc90:	4606      	mov	r6, r0
 800cc92:	463a      	mov	r2, r7
 800cc94:	4620      	mov	r0, r4
 800cc96:	4649      	mov	r1, r9
 800cc98:	47a8      	blx	r5
 800cc9a:	6923      	ldr	r3, [r4, #16]
 800cc9c:	69a2      	ldr	r2, [r4, #24]
 800cc9e:	429e      	cmp	r6, r3
 800cca0:	bfac      	ite	ge
 800cca2:	2300      	movge	r3, #0
 800cca4:	2301      	movlt	r3, #1
 800cca6:	4296      	cmp	r6, r2
 800cca8:	bfd4      	ite	le
 800ccaa:	461a      	movle	r2, r3
 800ccac:	f043 0201 	orrgt.w	r2, r3, #1
 800ccb0:	6963      	ldr	r3, [r4, #20]
 800ccb2:	4298      	cmp	r0, r3
 800ccb4:	bfac      	ite	ge
 800ccb6:	4613      	movge	r3, r2
 800ccb8:	f042 0301 	orrlt.w	r3, r2, #1
 800ccbc:	4605      	mov	r5, r0
 800ccbe:	b913      	cbnz	r3, 800ccc6 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x54>
 800ccc0:	69e3      	ldr	r3, [r4, #28]
 800ccc2:	4298      	cmp	r0, r3
 800ccc4:	dd0a      	ble.n	800ccdc <GUIDRV_FlexColor__SetPixelIndexNoCache+0x6a>
 800ccc6:	6862      	ldr	r2, [r4, #4]
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	3a01      	subs	r2, #1
 800cccc:	9200      	str	r2, [sp, #0]
 800ccce:	2100      	movs	r1, #0
 800ccd0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	460a      	mov	r2, r1
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	47b8      	blx	r7
 800ccdc:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 800cce0:	4620      	mov	r0, r4
 800cce2:	4631      	mov	r1, r6
 800cce4:	462a      	mov	r2, r5
 800cce6:	47b8      	blx	r7
 800cce8:	e003      	b.n	800ccf2 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 800ccea:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800ccee:	4620      	mov	r0, r4
 800ccf0:	47a8      	blx	r5
 800ccf2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	4641      	mov	r1, r8
 800ccfa:	4798      	blx	r3
 800ccfc:	b003      	add	sp, #12
 800ccfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cd02 <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 800cd02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd04:	6884      	ldr	r4, [r0, #8]
 800cd06:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800cd08:	079b      	lsls	r3, r3, #30
 800cd0a:	460f      	mov	r7, r1
 800cd0c:	4616      	mov	r6, r2
 800cd0e:	d545      	bpl.n	800cd9c <GUIDRV_FlexColor__GetPixelIndexNoCache+0x9a>
 800cd10:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800cd14:	4620      	mov	r0, r4
 800cd16:	4798      	blx	r3
 800cd18:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800cd1c:	4632      	mov	r2, r6
 800cd1e:	4605      	mov	r5, r0
 800cd20:	4639      	mov	r1, r7
 800cd22:	4620      	mov	r0, r4
 800cd24:	4798      	blx	r3
 800cd26:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	b11b      	cbz	r3, 800cd36 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 800cd2e:	4620      	mov	r0, r4
 800cd30:	2101      	movs	r1, #1
 800cd32:	2200      	movs	r2, #0
 800cd34:	4798      	blx	r3
 800cd36:	6923      	ldr	r3, [r4, #16]
 800cd38:	69a2      	ldr	r2, [r4, #24]
 800cd3a:	429d      	cmp	r5, r3
 800cd3c:	bfac      	ite	ge
 800cd3e:	2300      	movge	r3, #0
 800cd40:	2301      	movlt	r3, #1
 800cd42:	4295      	cmp	r5, r2
 800cd44:	bfd4      	ite	le
 800cd46:	461a      	movle	r2, r3
 800cd48:	f043 0201 	orrgt.w	r2, r3, #1
 800cd4c:	6963      	ldr	r3, [r4, #20]
 800cd4e:	429e      	cmp	r6, r3
 800cd50:	bfac      	ite	ge
 800cd52:	4613      	movge	r3, r2
 800cd54:	f042 0301 	orrlt.w	r3, r2, #1
 800cd58:	b913      	cbnz	r3, 800cd60 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5e>
 800cd5a:	69e3      	ldr	r3, [r4, #28]
 800cd5c:	429e      	cmp	r6, r3
 800cd5e:	dd0a      	ble.n	800cd76 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x74>
 800cd60:	6862      	ldr	r2, [r4, #4]
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	3a01      	subs	r2, #1
 800cd66:	9200      	str	r2, [sp, #0]
 800cd68:	2100      	movs	r1, #0
 800cd6a:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800cd6e:	4620      	mov	r0, r4
 800cd70:	460a      	mov	r2, r1
 800cd72:	3b01      	subs	r3, #1
 800cd74:	47b8      	blx	r7
 800cd76:	4629      	mov	r1, r5
 800cd78:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	4632      	mov	r2, r6
 800cd80:	4798      	blx	r3
 800cd82:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800cd86:	4620      	mov	r0, r4
 800cd88:	4798      	blx	r3
 800cd8a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800cd8e:	4605      	mov	r5, r0
 800cd90:	b16b      	cbz	r3, 800cdae <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800cd92:	4620      	mov	r0, r4
 800cd94:	2100      	movs	r1, #0
 800cd96:	2201      	movs	r2, #1
 800cd98:	4798      	blx	r3
 800cd9a:	e008      	b.n	800cdae <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800cd9c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800cda0:	4620      	mov	r0, r4
 800cda2:	4798      	blx	r3
 800cda4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800cda8:	4620      	mov	r0, r4
 800cdaa:	4798      	blx	r3
 800cdac:	4605      	mov	r5, r0
 800cdae:	4628      	mov	r0, r5
 800cdb0:	b003      	add	sp, #12
 800cdb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cdb4 <GUIDRV_FlexColor__InitOnce>:
 800cdb4:	b538      	push	{r3, r4, r5, lr}
 800cdb6:	6885      	ldr	r5, [r0, #8]
 800cdb8:	4604      	mov	r4, r0
 800cdba:	b995      	cbnz	r5, 800cde2 <GUIDRV_FlexColor__InitOnce+0x2e>
 800cdbc:	f44f 70ba 	mov.w	r0, #372	; 0x174
 800cdc0:	f003 f926 	bl	8010010 <GUI_ALLOC_GetFixedBlock>
 800cdc4:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800cdc8:	60a0      	str	r0, [r4, #8]
 800cdca:	4629      	mov	r1, r5
 800cdcc:	f000 fe13 	bl	800d9f6 <GUI__memset>
 800cdd0:	68a3      	ldr	r3, [r4, #8]
 800cdd2:	2202      	movs	r2, #2
 800cdd4:	84da      	strh	r2, [r3, #38]	; 0x26
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	621a      	str	r2, [r3, #32]
 800cdda:	4a02      	ldr	r2, [pc, #8]	; (800cde4 <GUIDRV_FlexColor__InitOnce+0x30>)
 800cddc:	641c      	str	r4, [r3, #64]	; 0x40
 800cdde:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800cde2:	bd38      	pop	{r3, r4, r5, pc}
 800cde4:	0800cc15 	.word	0x0800cc15

0800cde8 <_SetDevFunc>:
 800cde8:	b570      	push	{r4, r5, r6, lr}
 800cdea:	4606      	mov	r6, r0
 800cdec:	460d      	mov	r5, r1
 800cdee:	4614      	mov	r4, r2
 800cdf0:	f7ff ffe0 	bl	800cdb4 <GUIDRV_FlexColor__InitOnce>
 800cdf4:	68b3      	ldr	r3, [r6, #8]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d03b      	beq.n	800ce72 <_SetDevFunc+0x8a>
 800cdfa:	2d26      	cmp	r5, #38	; 0x26
 800cdfc:	d002      	beq.n	800ce04 <_SetDevFunc+0x1c>
 800cdfe:	2d27      	cmp	r5, #39	; 0x27
 800ce00:	d016      	beq.n	800ce30 <_SetDevFunc+0x48>
 800ce02:	bd70      	pop	{r4, r5, r6, pc}
 800ce04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce06:	2a10      	cmp	r2, #16
 800ce08:	d002      	beq.n	800ce10 <_SetDevFunc+0x28>
 800ce0a:	2a12      	cmp	r2, #18
 800ce0c:	d008      	beq.n	800ce20 <_SetDevFunc+0x38>
 800ce0e:	bd70      	pop	{r4, r5, r6, pc}
 800ce10:	4a18      	ldr	r2, [pc, #96]	; (800ce74 <_SetDevFunc+0x8c>)
 800ce12:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 800ce16:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800ce1a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800ce1e:	bd70      	pop	{r4, r5, r6, pc}
 800ce20:	4a15      	ldr	r2, [pc, #84]	; (800ce78 <_SetDevFunc+0x90>)
 800ce22:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 800ce26:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800ce2a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800ce2e:	bd70      	pop	{r4, r5, r6, pc}
 800ce30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce32:	2a10      	cmp	r2, #16
 800ce34:	d002      	beq.n	800ce3c <_SetDevFunc+0x54>
 800ce36:	2a12      	cmp	r2, #18
 800ce38:	d00e      	beq.n	800ce58 <_SetDevFunc+0x70>
 800ce3a:	bd70      	pop	{r4, r5, r6, pc}
 800ce3c:	b13c      	cbz	r4, 800ce4e <_SetDevFunc+0x66>
 800ce3e:	4a0f      	ldr	r2, [pc, #60]	; (800ce7c <_SetDevFunc+0x94>)
 800ce40:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 800ce44:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800ce48:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800ce4c:	bd70      	pop	{r4, r5, r6, pc}
 800ce4e:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 800ce52:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
 800ce56:	bd70      	pop	{r4, r5, r6, pc}
 800ce58:	b13c      	cbz	r4, 800ce6a <_SetDevFunc+0x82>
 800ce5a:	4a09      	ldr	r2, [pc, #36]	; (800ce80 <_SetDevFunc+0x98>)
 800ce5c:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800ce60:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800ce64:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800ce68:	bd70      	pop	{r4, r5, r6, pc}
 800ce6a:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 800ce6e:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 800ce72:	bd70      	pop	{r4, r5, r6, pc}
 800ce74:	0800caa5 	.word	0x0800caa5
 800ce78:	0800cab3 	.word	0x0800cab3
 800ce7c:	0800cac1 	.word	0x0800cac1
 800ce80:	0800caf7 	.word	0x0800caf7

0800ce84 <_GetDevFunc_Init>:
 800ce84:	b538      	push	{r3, r4, r5, lr}
 800ce86:	4605      	mov	r5, r0
 800ce88:	f7ff ff94 	bl	800cdb4 <GUIDRV_FlexColor__InitOnce>
 800ce8c:	68ac      	ldr	r4, [r5, #8]
 800ce8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ce92:	f003 f8bd 	bl	8010010 <GUI_ALLOC_GetFixedBlock>
 800ce96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ce98:	66a0      	str	r0, [r4, #104]	; 0x68
 800ce9a:	3307      	adds	r3, #7
 800ce9c:	10d8      	asrs	r0, r3, #3
 800ce9e:	6823      	ldr	r3, [r4, #0]
 800cea0:	4358      	muls	r0, r3
 800cea2:	f003 f8b5 	bl	8010010 <GUI_ALLOC_GetFixedBlock>
 800cea6:	2101      	movs	r1, #1
 800cea8:	2200      	movs	r2, #0
 800ceaa:	66e0      	str	r0, [r4, #108]	; 0x6c
 800ceac:	69a8      	ldr	r0, [r5, #24]
 800ceae:	f7f4 f885 	bl	8000fbc <LCD_X_DisplayDriver>
 800ceb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800ceb6:	4605      	mov	r5, r0
 800ceb8:	4620      	mov	r0, r4
 800ceba:	4798      	blx	r3
 800cebc:	4620      	mov	r0, r4
 800cebe:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800cec2:	4798      	blx	r3
 800cec4:	2d00      	cmp	r5, #0
 800cec6:	bfd4      	ite	le
 800cec8:	2000      	movle	r0, #0
 800ceca:	2001      	movgt	r0, #1
 800cecc:	bd38      	pop	{r3, r4, r5, pc}

0800cece <_GetDevFunc_SetSize>:
 800cece:	b570      	push	{r4, r5, r6, lr}
 800ced0:	4604      	mov	r4, r0
 800ced2:	460d      	mov	r5, r1
 800ced4:	4616      	mov	r6, r2
 800ced6:	f7ff ff6d 	bl	800cdb4 <GUIDRV_FlexColor__InitOnce>
 800ceda:	68a3      	ldr	r3, [r4, #8]
 800cedc:	e883 0060 	stmia.w	r3, {r5, r6}
 800cee0:	bd70      	pop	{r4, r5, r6, pc}

0800cee2 <_GetDevFunc_SetVSize>:
 800cee2:	b570      	push	{r4, r5, r6, lr}
 800cee4:	4604      	mov	r4, r0
 800cee6:	460d      	mov	r5, r1
 800cee8:	4616      	mov	r6, r2
 800ceea:	f7ff ff63 	bl	800cdb4 <GUIDRV_FlexColor__InitOnce>
 800ceee:	68a3      	ldr	r3, [r4, #8]
 800cef0:	609d      	str	r5, [r3, #8]
 800cef2:	60de      	str	r6, [r3, #12]
 800cef4:	bd70      	pop	{r4, r5, r6, pc}

0800cef6 <GUIDRV_FlexColor_Config>:
 800cef6:	b538      	push	{r3, r4, r5, lr}
 800cef8:	4605      	mov	r5, r0
 800cefa:	460c      	mov	r4, r1
 800cefc:	f7ff ff5a 	bl	800cdb4 <GUIDRV_FlexColor__InitOnce>
 800cf00:	68ab      	ldr	r3, [r5, #8]
 800cf02:	6822      	ldr	r2, [r4, #0]
 800cf04:	62da      	str	r2, [r3, #44]	; 0x2c
 800cf06:	6862      	ldr	r2, [r4, #4]
 800cf08:	631a      	str	r2, [r3, #48]	; 0x30
 800cf0a:	68a2      	ldr	r2, [r4, #8]
 800cf0c:	635a      	str	r2, [r3, #52]	; 0x34
 800cf0e:	0752      	lsls	r2, r2, #29
 800cf10:	d507      	bpl.n	800cf22 <GUIDRV_FlexColor_Config+0x2c>
 800cf12:	e893 0006 	ldmia.w	r3, {r1, r2}
 800cf16:	601a      	str	r2, [r3, #0]
 800cf18:	6059      	str	r1, [r3, #4]
 800cf1a:	68da      	ldr	r2, [r3, #12]
 800cf1c:	6899      	ldr	r1, [r3, #8]
 800cf1e:	60d9      	str	r1, [r3, #12]
 800cf20:	609a      	str	r2, [r3, #8]
 800cf22:	89a2      	ldrh	r2, [r4, #12]
 800cf24:	849a      	strh	r2, [r3, #36]	; 0x24
 800cf26:	6922      	ldr	r2, [r4, #16]
 800cf28:	b112      	cbz	r2, 800cf30 <GUIDRV_FlexColor_Config+0x3a>
 800cf2a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800cf2e:	621a      	str	r2, [r3, #32]
 800cf30:	bd38      	pop	{r3, r4, r5, pc}

0800cf32 <GUIDRV_FlexColor_SetFunc>:
 800cf32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf36:	4604      	mov	r4, r0
 800cf38:	461f      	mov	r7, r3
 800cf3a:	4616      	mov	r6, r2
 800cf3c:	4688      	mov	r8, r1
 800cf3e:	f7ff ff39 	bl	800cdb4 <GUIDRV_FlexColor__InitOnce>
 800cf42:	68a5      	ldr	r5, [r4, #8]
 800cf44:	4641      	mov	r1, r8
 800cf46:	2268      	movs	r2, #104	; 0x68
 800cf48:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 800cf4c:	f009 fc94 	bl	8016878 <memcpy>
 800cf50:	4620      	mov	r0, r4
 800cf52:	47b0      	blx	r6
 800cf54:	4620      	mov	r0, r4
 800cf56:	47b8      	blx	r7
 800cf58:	6923      	ldr	r3, [r4, #16]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	4798      	blx	r3
 800cf5e:	62a8      	str	r0, [r5, #40]	; 0x28
 800cf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cf64 <LCD_UpdateColorIndices>:
 800cf64:	b510      	push	{r4, lr}
 800cf66:	4c07      	ldr	r4, [pc, #28]	; (800cf84 <LCD_UpdateColorIndices+0x20>)
 800cf68:	6823      	ldr	r3, [r4, #0]
 800cf6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cf6c:	f000 fca4 	bl	800d8b8 <LCD_Color2Index>
 800cf70:	f000 fcc2 	bl	800d8f8 <LCD_SetColorIndex>
 800cf74:	6823      	ldr	r3, [r4, #0]
 800cf76:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800cf78:	f000 fc9e 	bl	800d8b8 <LCD_Color2Index>
 800cf7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf80:	f000 bcd6 	b.w	800d930 <LCD_SetBkColorIndex>
 800cf84:	200000d8 	.word	0x200000d8

0800cf88 <LCD_SetClipRectEx>:
 800cf88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf8a:	4c09      	ldr	r4, [pc, #36]	; (800cfb0 <LCD_SetClipRectEx+0x28>)
 800cf8c:	6823      	ldr	r3, [r4, #0]
 800cf8e:	7c5a      	ldrb	r2, [r3, #17]
 800cf90:	4b08      	ldr	r3, [pc, #32]	; (800cfb4 <LCD_SetClipRectEx+0x2c>)
 800cf92:	4605      	mov	r5, r0
 800cf94:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cf98:	68c2      	ldr	r2, [r0, #12]
 800cf9a:	4669      	mov	r1, sp
 800cf9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cf9e:	4790      	blx	r2
 800cfa0:	6820      	ldr	r0, [r4, #0]
 800cfa2:	4629      	mov	r1, r5
 800cfa4:	466a      	mov	r2, sp
 800cfa6:	3008      	adds	r0, #8
 800cfa8:	f000 fe14 	bl	800dbd4 <GUI__IntersectRects>
 800cfac:	b003      	add	sp, #12
 800cfae:	bd30      	pop	{r4, r5, pc}
 800cfb0:	200000d8 	.word	0x200000d8
 800cfb4:	2001d510 	.word	0x2001d510

0800cfb8 <LCD_SetVSizeEx>:
 800cfb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfba:	460d      	mov	r5, r1
 800cfbc:	4614      	mov	r4, r2
 800cfbe:	f002 f8b9 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800cfc2:	9001      	str	r0, [sp, #4]
 800cfc4:	b908      	cbnz	r0, 800cfca <LCD_SetVSizeEx+0x12>
 800cfc6:	2001      	movs	r0, #1
 800cfc8:	e00c      	b.n	800cfe4 <LCD_SetVSizeEx+0x2c>
 800cfca:	68c3      	ldr	r3, [r0, #12]
 800cfcc:	210a      	movs	r1, #10
 800cfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd0:	a801      	add	r0, sp, #4
 800cfd2:	4798      	blx	r3
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d0f5      	beq.n	800cfc6 <LCD_SetVSizeEx+0xe>
 800cfda:	9801      	ldr	r0, [sp, #4]
 800cfdc:	4629      	mov	r1, r5
 800cfde:	4622      	mov	r2, r4
 800cfe0:	4798      	blx	r3
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	b003      	add	sp, #12
 800cfe6:	bd30      	pop	{r4, r5, pc}

0800cfe8 <LCD_SetSizeEx>:
 800cfe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfea:	460d      	mov	r5, r1
 800cfec:	4614      	mov	r4, r2
 800cfee:	f002 f8a1 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800cff2:	9001      	str	r0, [sp, #4]
 800cff4:	b908      	cbnz	r0, 800cffa <LCD_SetSizeEx+0x12>
 800cff6:	2001      	movs	r0, #1
 800cff8:	e00c      	b.n	800d014 <LCD_SetSizeEx+0x2c>
 800cffa:	68c3      	ldr	r3, [r0, #12]
 800cffc:	210b      	movs	r1, #11
 800cffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d000:	a801      	add	r0, sp, #4
 800d002:	4798      	blx	r3
 800d004:	4603      	mov	r3, r0
 800d006:	2800      	cmp	r0, #0
 800d008:	d0f5      	beq.n	800cff6 <LCD_SetSizeEx+0xe>
 800d00a:	9801      	ldr	r0, [sp, #4]
 800d00c:	4629      	mov	r1, r5
 800d00e:	4622      	mov	r2, r4
 800d010:	4798      	blx	r3
 800d012:	2000      	movs	r0, #0
 800d014:	b003      	add	sp, #12
 800d016:	bd30      	pop	{r4, r5, pc}

0800d018 <LCD_SetVisEx>:
 800d018:	b513      	push	{r0, r1, r4, lr}
 800d01a:	460c      	mov	r4, r1
 800d01c:	f002 f88a 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800d020:	9001      	str	r0, [sp, #4]
 800d022:	b908      	cbnz	r0, 800d028 <LCD_SetVisEx+0x10>
 800d024:	2001      	movs	r0, #1
 800d026:	e00b      	b.n	800d040 <LCD_SetVisEx+0x28>
 800d028:	68c3      	ldr	r3, [r0, #12]
 800d02a:	2106      	movs	r1, #6
 800d02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02e:	a801      	add	r0, sp, #4
 800d030:	4798      	blx	r3
 800d032:	4603      	mov	r3, r0
 800d034:	2800      	cmp	r0, #0
 800d036:	d0f5      	beq.n	800d024 <LCD_SetVisEx+0xc>
 800d038:	9801      	ldr	r0, [sp, #4]
 800d03a:	4621      	mov	r1, r4
 800d03c:	4798      	blx	r3
 800d03e:	2000      	movs	r0, #0
 800d040:	b002      	add	sp, #8
 800d042:	bd10      	pop	{r4, pc}

0800d044 <LCD_SetPosEx>:
 800d044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d046:	460d      	mov	r5, r1
 800d048:	4614      	mov	r4, r2
 800d04a:	f002 f873 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800d04e:	9001      	str	r0, [sp, #4]
 800d050:	b908      	cbnz	r0, 800d056 <LCD_SetPosEx+0x12>
 800d052:	2001      	movs	r0, #1
 800d054:	e00c      	b.n	800d070 <LCD_SetPosEx+0x2c>
 800d056:	68c3      	ldr	r3, [r0, #12]
 800d058:	2103      	movs	r1, #3
 800d05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05c:	a801      	add	r0, sp, #4
 800d05e:	4798      	blx	r3
 800d060:	4603      	mov	r3, r0
 800d062:	2800      	cmp	r0, #0
 800d064:	d0f5      	beq.n	800d052 <LCD_SetPosEx+0xe>
 800d066:	9801      	ldr	r0, [sp, #4]
 800d068:	4629      	mov	r1, r5
 800d06a:	4622      	mov	r2, r4
 800d06c:	4798      	blx	r3
 800d06e:	2000      	movs	r0, #0
 800d070:	b003      	add	sp, #12
 800d072:	bd30      	pop	{r4, r5, pc}

0800d074 <LCD_SetLUTEntryEx>:
 800d074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d076:	460d      	mov	r5, r1
 800d078:	4614      	mov	r4, r2
 800d07a:	f002 f85b 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800d07e:	9001      	str	r0, [sp, #4]
 800d080:	b908      	cbnz	r0, 800d086 <LCD_SetLUTEntryEx+0x12>
 800d082:	2001      	movs	r0, #1
 800d084:	e00c      	b.n	800d0a0 <LCD_SetLUTEntryEx+0x2c>
 800d086:	68c3      	ldr	r3, [r0, #12]
 800d088:	2110      	movs	r1, #16
 800d08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08c:	a801      	add	r0, sp, #4
 800d08e:	4798      	blx	r3
 800d090:	4603      	mov	r3, r0
 800d092:	2800      	cmp	r0, #0
 800d094:	d0f5      	beq.n	800d082 <LCD_SetLUTEntryEx+0xe>
 800d096:	9801      	ldr	r0, [sp, #4]
 800d098:	4629      	mov	r1, r5
 800d09a:	4622      	mov	r2, r4
 800d09c:	4798      	blx	r3
 800d09e:	2000      	movs	r0, #0
 800d0a0:	b003      	add	sp, #12
 800d0a2:	bd30      	pop	{r4, r5, pc}

0800d0a4 <LCD_GetPosEx>:
 800d0a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0a6:	460d      	mov	r5, r1
 800d0a8:	4614      	mov	r4, r2
 800d0aa:	f002 f843 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800d0ae:	9001      	str	r0, [sp, #4]
 800d0b0:	b908      	cbnz	r0, 800d0b6 <LCD_GetPosEx+0x12>
 800d0b2:	2001      	movs	r0, #1
 800d0b4:	e00c      	b.n	800d0d0 <LCD_GetPosEx+0x2c>
 800d0b6:	68c3      	ldr	r3, [r0, #12]
 800d0b8:	2104      	movs	r1, #4
 800d0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0bc:	a801      	add	r0, sp, #4
 800d0be:	4798      	blx	r3
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	d0f5      	beq.n	800d0b2 <LCD_GetPosEx+0xe>
 800d0c6:	9801      	ldr	r0, [sp, #4]
 800d0c8:	4629      	mov	r1, r5
 800d0ca:	4622      	mov	r2, r4
 800d0cc:	4798      	blx	r3
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	b003      	add	sp, #12
 800d0d2:	bd30      	pop	{r4, r5, pc}

0800d0d4 <_GetDevProp>:
 800d0d4:	2801      	cmp	r0, #1
 800d0d6:	b510      	push	{r4, lr}
 800d0d8:	460c      	mov	r4, r1
 800d0da:	dc08      	bgt.n	800d0ee <_GetDevProp+0x1a>
 800d0dc:	f002 f82a 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800d0e0:	b120      	cbz	r0, 800d0ec <_GetDevProp+0x18>
 800d0e2:	68c3      	ldr	r3, [r0, #12]
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0e8:	4798      	blx	r3
 800d0ea:	bd10      	pop	{r4, pc}
 800d0ec:	bd10      	pop	{r4, pc}
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	bd10      	pop	{r4, pc}

0800d0f2 <_GetMaxValue>:
 800d0f2:	b538      	push	{r3, r4, r5, lr}
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	2001      	movs	r0, #1
 800d0fa:	f7ff ffeb 	bl	800d0d4 <_GetDevProp>
 800d0fe:	4621      	mov	r1, r4
 800d100:	4605      	mov	r5, r0
 800d102:	2000      	movs	r0, #0
 800d104:	f7ff ffe6 	bl	800d0d4 <_GetDevProp>
 800d108:	42a8      	cmp	r0, r5
 800d10a:	bfb8      	it	lt
 800d10c:	4628      	movlt	r0, r5
 800d10e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d112:	bd38      	pop	{r3, r4, r5, pc}

0800d114 <LCD_GetXSizeEx>:
 800d114:	2101      	movs	r1, #1
 800d116:	f7ff bfdd 	b.w	800d0d4 <_GetDevProp>

0800d11a <LCD_GetYSizeEx>:
 800d11a:	2102      	movs	r1, #2
 800d11c:	f7ff bfda 	b.w	800d0d4 <_GetDevProp>

0800d120 <LCD_GetVXSizeEx>:
 800d120:	2103      	movs	r1, #3
 800d122:	f7ff bfd7 	b.w	800d0d4 <_GetDevProp>

0800d126 <LCD_GetVYSizeEx>:
 800d126:	2104      	movs	r1, #4
 800d128:	f7ff bfd4 	b.w	800d0d4 <_GetDevProp>

0800d12c <LCD_GetBitsPerPixelEx>:
 800d12c:	2108      	movs	r1, #8
 800d12e:	f7ff bfd1 	b.w	800d0d4 <_GetDevProp>

0800d132 <LCD_GetNumColorsEx>:
 800d132:	2109      	movs	r1, #9
 800d134:	f7ff bfce 	b.w	800d0d4 <_GetDevProp>

0800d138 <LCD_GetXSize>:
 800d138:	4b02      	ldr	r3, [pc, #8]	; (800d144 <LCD_GetXSize+0xc>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	7c58      	ldrb	r0, [r3, #17]
 800d13e:	f7ff bfe9 	b.w	800d114 <LCD_GetXSizeEx>
 800d142:	bf00      	nop
 800d144:	200000d8 	.word	0x200000d8

0800d148 <LCD_GetYSize>:
 800d148:	4b02      	ldr	r3, [pc, #8]	; (800d154 <LCD_GetYSize+0xc>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	7c58      	ldrb	r0, [r3, #17]
 800d14e:	f7ff bfe4 	b.w	800d11a <LCD_GetYSizeEx>
 800d152:	bf00      	nop
 800d154:	200000d8 	.word	0x200000d8

0800d158 <LCD_GetNumColors>:
 800d158:	4b02      	ldr	r3, [pc, #8]	; (800d164 <LCD_GetNumColors+0xc>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	7c58      	ldrb	r0, [r3, #17]
 800d15e:	f7ff bfe8 	b.w	800d132 <LCD_GetNumColorsEx>
 800d162:	bf00      	nop
 800d164:	200000d8 	.word	0x200000d8

0800d168 <GUI_GetBitsPerPixelEx>:
 800d168:	b508      	push	{r3, lr}
 800d16a:	4b04      	ldr	r3, [pc, #16]	; (800d17c <GUI_GetBitsPerPixelEx+0x14>)
 800d16c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800d170:	68c3      	ldr	r3, [r0, #12]
 800d172:	2108      	movs	r1, #8
 800d174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d176:	4798      	blx	r3
 800d178:	bd08      	pop	{r3, pc}
 800d17a:	bf00      	nop
 800d17c:	2001d510 	.word	0x2001d510

0800d180 <LCD_GetPaletteEx>:
 800d180:	b508      	push	{r3, lr}
 800d182:	f001 ffd7 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800d186:	b120      	cbz	r0, 800d192 <LCD_GetPaletteEx+0x12>
 800d188:	68c3      	ldr	r3, [r0, #12]
 800d18a:	2102      	movs	r1, #2
 800d18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18e:	4798      	blx	r3
 800d190:	bd08      	pop	{r3, pc}
 800d192:	bd08      	pop	{r3, pc}

0800d194 <LCD_GetPalette>:
 800d194:	4b02      	ldr	r3, [pc, #8]	; (800d1a0 <LCD_GetPalette+0xc>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	7c58      	ldrb	r0, [r3, #17]
 800d19a:	f7ff bff1 	b.w	800d180 <LCD_GetPaletteEx>
 800d19e:	bf00      	nop
 800d1a0:	200000d8 	.word	0x200000d8

0800d1a4 <GUI_GetpfIndex2ColorEx>:
 800d1a4:	4b02      	ldr	r3, [pc, #8]	; (800d1b0 <GUI_GetpfIndex2ColorEx+0xc>)
 800d1a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d1aa:	691b      	ldr	r3, [r3, #16]
 800d1ac:	6858      	ldr	r0, [r3, #4]
 800d1ae:	4770      	bx	lr
 800d1b0:	2001d510 	.word	0x2001d510

0800d1b4 <GUI_GetpfColor2IndexEx>:
 800d1b4:	4b02      	ldr	r3, [pc, #8]	; (800d1c0 <GUI_GetpfColor2IndexEx+0xc>)
 800d1b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d1ba:	691b      	ldr	r3, [r3, #16]
 800d1bc:	6818      	ldr	r0, [r3, #0]
 800d1be:	4770      	bx	lr
 800d1c0:	2001d510 	.word	0x2001d510

0800d1c4 <LCD_GetXSizeMax>:
 800d1c4:	2001      	movs	r0, #1
 800d1c6:	f7ff bf94 	b.w	800d0f2 <_GetMaxValue>

0800d1ca <LCD_GetYSizeMax>:
 800d1ca:	2002      	movs	r0, #2
 800d1cc:	f7ff bf91 	b.w	800d0f2 <_GetMaxValue>

0800d1d0 <LCD_GetVXSizeMax>:
 800d1d0:	2003      	movs	r0, #3
 800d1d2:	f7ff bf8e 	b.w	800d0f2 <_GetMaxValue>
	...

0800d1d8 <LCD_SetDisplaySize>:
 800d1d8:	4b02      	ldr	r3, [pc, #8]	; (800d1e4 <LCD_SetDisplaySize+0xc>)
 800d1da:	6018      	str	r0, [r3, #0]
 800d1dc:	4b02      	ldr	r3, [pc, #8]	; (800d1e8 <LCD_SetDisplaySize+0x10>)
 800d1de:	6019      	str	r1, [r3, #0]
 800d1e0:	4770      	bx	lr
 800d1e2:	bf00      	nop
 800d1e4:	2001d084 	.word	0x2001d084
 800d1e8:	2001d080 	.word	0x2001d080

0800d1ec <LCD_GetXSizeDisplay>:
 800d1ec:	4b01      	ldr	r3, [pc, #4]	; (800d1f4 <LCD_GetXSizeDisplay+0x8>)
 800d1ee:	6818      	ldr	r0, [r3, #0]
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	2001d084 	.word	0x2001d084

0800d1f8 <LCD_GetYSizeDisplay>:
 800d1f8:	4b01      	ldr	r3, [pc, #4]	; (800d200 <LCD_GetYSizeDisplay+0x8>)
 800d1fa:	6818      	ldr	r0, [r3, #0]
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	2001d080 	.word	0x2001d080

0800d204 <LCD__GetBPP>:
 800d204:	2800      	cmp	r0, #0
 800d206:	d03b      	beq.n	800d280 <LCD__GetBPP+0x7c>
 800d208:	f030 0301 	bics.w	r3, r0, #1
 800d20c:	d029      	beq.n	800d262 <LCD__GetBPP+0x5e>
 800d20e:	f030 0303 	bics.w	r3, r0, #3
 800d212:	d028      	beq.n	800d266 <LCD__GetBPP+0x62>
 800d214:	f030 0307 	bics.w	r3, r0, #7
 800d218:	d027      	beq.n	800d26a <LCD__GetBPP+0x66>
 800d21a:	f030 030f 	bics.w	r3, r0, #15
 800d21e:	d026      	beq.n	800d26e <LCD__GetBPP+0x6a>
 800d220:	f030 031f 	bics.w	r3, r0, #31
 800d224:	d025      	beq.n	800d272 <LCD__GetBPP+0x6e>
 800d226:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800d22a:	d024      	beq.n	800d276 <LCD__GetBPP+0x72>
 800d22c:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800d230:	f023 0301 	bic.w	r3, r3, #1
 800d234:	b30b      	cbz	r3, 800d27a <LCD__GetBPP+0x76>
 800d236:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800d23a:	f023 030f 	bic.w	r3, r3, #15
 800d23e:	b1e3      	cbz	r3, 800d27a <LCD__GetBPP+0x76>
 800d240:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800d244:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d248:	b1bb      	cbz	r3, 800d27a <LCD__GetBPP+0x76>
 800d24a:	0c03      	lsrs	r3, r0, #16
 800d24c:	041b      	lsls	r3, r3, #16
 800d24e:	b1a3      	cbz	r3, 800d27a <LCD__GetBPP+0x76>
 800d250:	0c83      	lsrs	r3, r0, #18
 800d252:	049b      	lsls	r3, r3, #18
 800d254:	b19b      	cbz	r3, 800d27e <LCD__GetBPP+0x7a>
 800d256:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d25a:	bf0c      	ite	eq
 800d25c:	2018      	moveq	r0, #24
 800d25e:	2020      	movne	r0, #32
 800d260:	4770      	bx	lr
 800d262:	2001      	movs	r0, #1
 800d264:	4770      	bx	lr
 800d266:	2002      	movs	r0, #2
 800d268:	4770      	bx	lr
 800d26a:	2003      	movs	r0, #3
 800d26c:	4770      	bx	lr
 800d26e:	2004      	movs	r0, #4
 800d270:	4770      	bx	lr
 800d272:	2005      	movs	r0, #5
 800d274:	4770      	bx	lr
 800d276:	2008      	movs	r0, #8
 800d278:	4770      	bx	lr
 800d27a:	2010      	movs	r0, #16
 800d27c:	4770      	bx	lr
 800d27e:	2012      	movs	r0, #18
 800d280:	4770      	bx	lr

0800d282 <LCD__GetBPPDevice>:
 800d282:	b508      	push	{r3, lr}
 800d284:	f7ff ffbe 	bl	800d204 <LCD__GetBPP>
 800d288:	2801      	cmp	r0, #1
 800d28a:	d00f      	beq.n	800d2ac <LCD__GetBPPDevice+0x2a>
 800d28c:	1e83      	subs	r3, r0, #2
 800d28e:	2b06      	cmp	r3, #6
 800d290:	d909      	bls.n	800d2a6 <LCD__GetBPPDevice+0x24>
 800d292:	f1a0 0309 	sub.w	r3, r0, #9
 800d296:	2b07      	cmp	r3, #7
 800d298:	d907      	bls.n	800d2aa <LCD__GetBPPDevice+0x28>
 800d29a:	3811      	subs	r0, #17
 800d29c:	2810      	cmp	r0, #16
 800d29e:	bf34      	ite	cc
 800d2a0:	2020      	movcc	r0, #32
 800d2a2:	2000      	movcs	r0, #0
 800d2a4:	bd08      	pop	{r3, pc}
 800d2a6:	2008      	movs	r0, #8
 800d2a8:	bd08      	pop	{r3, pc}
 800d2aa:	2010      	movs	r0, #16
 800d2ac:	bd08      	pop	{r3, pc}
	...

0800d2b0 <_SetDrawMode>:
 800d2b0:	b570      	push	{r4, r5, r6, lr}
 800d2b2:	4b08      	ldr	r3, [pc, #32]	; (800d2d4 <_SetDrawMode+0x24>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	7c1a      	ldrb	r2, [r3, #16]
 800d2b8:	ea80 0102 	eor.w	r1, r0, r2
 800d2bc:	0749      	lsls	r1, r1, #29
 800d2be:	d505      	bpl.n	800d2cc <_SetDrawMode+0x1c>
 800d2c0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800d2c2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d2c4:	6826      	ldr	r6, [r4, #0]
 800d2c6:	680d      	ldr	r5, [r1, #0]
 800d2c8:	6025      	str	r5, [r4, #0]
 800d2ca:	600e      	str	r6, [r1, #0]
 800d2cc:	7418      	strb	r0, [r3, #16]
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	bd70      	pop	{r4, r5, r6, pc}
 800d2d2:	bf00      	nop
 800d2d4:	200000d8 	.word	0x200000d8

0800d2d8 <LCD_SetDrawMode>:
 800d2d8:	b508      	push	{r3, lr}
 800d2da:	4b02      	ldr	r3, [pc, #8]	; (800d2e4 <LCD_SetDrawMode+0xc>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	4798      	blx	r3
 800d2e2:	bd08      	pop	{r3, pc}
 800d2e4:	200000bc 	.word	0x200000bc

0800d2e8 <LCD_DrawPixel>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	4b14      	ldr	r3, [pc, #80]	; (800d33c <LCD_DrawPixel+0x54>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	460a      	mov	r2, r1
 800d2f0:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800d2f4:	428a      	cmp	r2, r1
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	db1e      	blt.n	800d338 <LCD_DrawPixel+0x50>
 800d2fa:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800d2fe:	428a      	cmp	r2, r1
 800d300:	dc1a      	bgt.n	800d338 <LCD_DrawPixel+0x50>
 800d302:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800d306:	4288      	cmp	r0, r1
 800d308:	db16      	blt.n	800d338 <LCD_DrawPixel+0x50>
 800d30a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800d30e:	4288      	cmp	r0, r1
 800d310:	dc12      	bgt.n	800d338 <LCD_DrawPixel+0x50>
 800d312:	7c19      	ldrb	r1, [r3, #16]
 800d314:	7c58      	ldrb	r0, [r3, #17]
 800d316:	f011 0f01 	tst.w	r1, #1
 800d31a:	4909      	ldr	r1, [pc, #36]	; (800d340 <LCD_DrawPixel+0x58>)
 800d31c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800d320:	d004      	beq.n	800d32c <LCD_DrawPixel+0x44>
 800d322:	68c3      	ldr	r3, [r0, #12]
 800d324:	4621      	mov	r1, r4
 800d326:	69db      	ldr	r3, [r3, #28]
 800d328:	4798      	blx	r3
 800d32a:	bd38      	pop	{r3, r4, r5, pc}
 800d32c:	68c1      	ldr	r1, [r0, #12]
 800d32e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d330:	698d      	ldr	r5, [r1, #24]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4621      	mov	r1, r4
 800d336:	47a8      	blx	r5
 800d338:	bd38      	pop	{r3, r4, r5, pc}
 800d33a:	bf00      	nop
 800d33c:	200000d8 	.word	0x200000d8
 800d340:	2001d510 	.word	0x2001d510

0800d344 <LCD_DrawHLine>:
 800d344:	b538      	push	{r3, r4, r5, lr}
 800d346:	4b10      	ldr	r3, [pc, #64]	; (800d388 <LCD_DrawHLine+0x44>)
 800d348:	681c      	ldr	r4, [r3, #0]
 800d34a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800d34e:	4299      	cmp	r1, r3
 800d350:	460d      	mov	r5, r1
 800d352:	db17      	blt.n	800d384 <LCD_DrawHLine+0x40>
 800d354:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800d358:	4299      	cmp	r1, r3
 800d35a:	dc13      	bgt.n	800d384 <LCD_DrawHLine+0x40>
 800d35c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800d360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d364:	4288      	cmp	r0, r1
 800d366:	bfa8      	it	ge
 800d368:	4601      	movge	r1, r0
 800d36a:	429a      	cmp	r2, r3
 800d36c:	bfb8      	it	lt
 800d36e:	4613      	movlt	r3, r2
 800d370:	428b      	cmp	r3, r1
 800d372:	db07      	blt.n	800d384 <LCD_DrawHLine+0x40>
 800d374:	7c60      	ldrb	r0, [r4, #17]
 800d376:	4a05      	ldr	r2, [pc, #20]	; (800d38c <LCD_DrawHLine+0x48>)
 800d378:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800d37c:	68c2      	ldr	r2, [r0, #12]
 800d37e:	6894      	ldr	r4, [r2, #8]
 800d380:	462a      	mov	r2, r5
 800d382:	47a0      	blx	r4
 800d384:	bd38      	pop	{r3, r4, r5, pc}
 800d386:	bf00      	nop
 800d388:	200000d8 	.word	0x200000d8
 800d38c:	2001d510 	.word	0x2001d510

0800d390 <LCD_DrawVLine>:
 800d390:	b538      	push	{r3, r4, r5, lr}
 800d392:	4b10      	ldr	r3, [pc, #64]	; (800d3d4 <LCD_DrawVLine+0x44>)
 800d394:	681c      	ldr	r4, [r3, #0]
 800d396:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800d39a:	4605      	mov	r5, r0
 800d39c:	429d      	cmp	r5, r3
 800d39e:	4610      	mov	r0, r2
 800d3a0:	db17      	blt.n	800d3d2 <LCD_DrawVLine+0x42>
 800d3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3a6:	429d      	cmp	r5, r3
 800d3a8:	dc13      	bgt.n	800d3d2 <LCD_DrawVLine+0x42>
 800d3aa:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800d3ae:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800d3b2:	4291      	cmp	r1, r2
 800d3b4:	bfa8      	it	ge
 800d3b6:	460a      	movge	r2, r1
 800d3b8:	4298      	cmp	r0, r3
 800d3ba:	bfb8      	it	lt
 800d3bc:	4603      	movlt	r3, r0
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	db07      	blt.n	800d3d2 <LCD_DrawVLine+0x42>
 800d3c2:	7c60      	ldrb	r0, [r4, #17]
 800d3c4:	4904      	ldr	r1, [pc, #16]	; (800d3d8 <LCD_DrawVLine+0x48>)
 800d3c6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800d3ca:	68c1      	ldr	r1, [r0, #12]
 800d3cc:	68cc      	ldr	r4, [r1, #12]
 800d3ce:	4629      	mov	r1, r5
 800d3d0:	47a0      	blx	r4
 800d3d2:	bd38      	pop	{r3, r4, r5, pc}
 800d3d4:	200000d8 	.word	0x200000d8
 800d3d8:	2001d510 	.word	0x2001d510

0800d3dc <LCD_FillRect>:
 800d3dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3de:	460e      	mov	r6, r1
 800d3e0:	4912      	ldr	r1, [pc, #72]	; (800d42c <LCD_FillRect+0x50>)
 800d3e2:	680c      	ldr	r4, [r1, #0]
 800d3e4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800d3e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d3ec:	4288      	cmp	r0, r1
 800d3ee:	bfa8      	it	ge
 800d3f0:	4601      	movge	r1, r0
 800d3f2:	42aa      	cmp	r2, r5
 800d3f4:	bfb8      	it	lt
 800d3f6:	4615      	movlt	r5, r2
 800d3f8:	428d      	cmp	r5, r1
 800d3fa:	db14      	blt.n	800d426 <LCD_FillRect+0x4a>
 800d3fc:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800d400:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800d404:	4296      	cmp	r6, r2
 800d406:	bfa8      	it	ge
 800d408:	4632      	movge	r2, r6
 800d40a:	4283      	cmp	r3, r0
 800d40c:	bfa8      	it	ge
 800d40e:	4603      	movge	r3, r0
 800d410:	4293      	cmp	r3, r2
 800d412:	db08      	blt.n	800d426 <LCD_FillRect+0x4a>
 800d414:	7c64      	ldrb	r4, [r4, #17]
 800d416:	4806      	ldr	r0, [pc, #24]	; (800d430 <LCD_FillRect+0x54>)
 800d418:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800d41c:	68c4      	ldr	r4, [r0, #12]
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	6924      	ldr	r4, [r4, #16]
 800d422:	462b      	mov	r3, r5
 800d424:	47a0      	blx	r4
 800d426:	b002      	add	sp, #8
 800d428:	bd70      	pop	{r4, r5, r6, pc}
 800d42a:	bf00      	nop
 800d42c:	200000d8 	.word	0x200000d8
 800d430:	2001d510 	.word	0x2001d510

0800d434 <LCD__DrawBitmap_1bpp>:
 800d434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d438:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800d5e8 <LCD__DrawBitmap_1bpp+0x1b4>
 800d43c:	b08f      	sub	sp, #60	; 0x3c
 800d43e:	f8dc c000 	ldr.w	ip, [ip]
 800d442:	9009      	str	r0, [sp, #36]	; 0x24
 800d444:	460e      	mov	r6, r1
 800d446:	4615      	mov	r5, r2
 800d448:	469b      	mov	fp, r3
 800d44a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d44c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800d450:	f1bc 0f00 	cmp.w	ip, #0
 800d454:	d00d      	beq.n	800d472 <LCD__DrawBitmap_1bpp+0x3e>
 800d456:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800d458:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d45a:	9500      	str	r5, [sp, #0]
 800d45c:	9601      	str	r6, [sp, #4]
 800d45e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d460:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d462:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d464:	9702      	str	r7, [sp, #8]
 800d466:	9503      	str	r5, [sp, #12]
 800d468:	9404      	str	r4, [sp, #16]
 800d46a:	9605      	str	r6, [sp, #20]
 800d46c:	f8dc 4000 	ldr.w	r4, [ip]
 800d470:	e053      	b.n	800d51a <LCD__DrawBitmap_1bpp+0xe6>
 800d472:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800d474:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d476:	ea47 0300 	orr.w	r3, r7, r0
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d14f      	bne.n	800d51e <LCD__DrawBitmap_1bpp+0xea>
 800d47e:	4b58      	ldr	r3, [pc, #352]	; (800d5e0 <LCD__DrawBitmap_1bpp+0x1ac>)
 800d480:	6818      	ldr	r0, [r3, #0]
 800d482:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800d486:	1a51      	subs	r1, r2, r1
 800d488:	2900      	cmp	r1, #0
 800d48a:	dd08      	ble.n	800d49e <LCD__DrawBitmap_1bpp+0x6a>
 800d48c:	ebc1 030b 	rsb	r3, r1, fp
 800d490:	2b00      	cmp	r3, #0
 800d492:	f340 80a2 	ble.w	800d5da <LCD__DrawBitmap_1bpp+0x1a6>
 800d496:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d498:	fb07 4401 	mla	r4, r7, r1, r4
 800d49c:	e001      	b.n	800d4a2 <LCD__DrawBitmap_1bpp+0x6e>
 800d49e:	465b      	mov	r3, fp
 800d4a0:	4632      	mov	r2, r6
 800d4a2:	445e      	add	r6, fp
 800d4a4:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800d4a8:	3e01      	subs	r6, #1
 800d4aa:	1a76      	subs	r6, r6, r1
 800d4ac:	2e00      	cmp	r6, #0
 800d4ae:	dd03      	ble.n	800d4b8 <LCD__DrawBitmap_1bpp+0x84>
 800d4b0:	1b9b      	subs	r3, r3, r6
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f340 8091 	ble.w	800d5da <LCD__DrawBitmap_1bpp+0x1a6>
 800d4b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4ba:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800d4be:	4429      	add	r1, r5
 800d4c0:	3901      	subs	r1, #1
 800d4c2:	1b89      	subs	r1, r1, r6
 800d4c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d4c6:	2900      	cmp	r1, #0
 800d4c8:	bfc8      	it	gt
 800d4ca:	ebc1 0505 	rsbgt	r5, r1, r5
 800d4ce:	ebc8 0106 	rsb	r1, r8, r6
 800d4d2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800d4d6:	42b1      	cmp	r1, r6
 800d4d8:	da0c      	bge.n	800d4f4 <LCD__DrawBitmap_1bpp+0xc0>
 800d4da:	ebc1 0c06 	rsb	ip, r1, r6
 800d4de:	eb08 070c 	add.w	r7, r8, ip
 800d4e2:	1b8e      	subs	r6, r1, r6
 800d4e4:	f02c 0c07 	bic.w	ip, ip, #7
 800d4e8:	4435      	add	r5, r6
 800d4ea:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800d4ee:	4461      	add	r1, ip
 800d4f0:	f007 0807 	and.w	r8, r7, #7
 800d4f4:	2d00      	cmp	r5, #0
 800d4f6:	dd70      	ble.n	800d5da <LCD__DrawBitmap_1bpp+0x1a6>
 800d4f8:	7c46      	ldrb	r6, [r0, #17]
 800d4fa:	483a      	ldr	r0, [pc, #232]	; (800d5e4 <LCD__DrawBitmap_1bpp+0x1b0>)
 800d4fc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d4fe:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800d502:	68c6      	ldr	r6, [r0, #12]
 800d504:	9701      	str	r7, [sp, #4]
 800d506:	9403      	str	r4, [sp, #12]
 800d508:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d50a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	9702      	str	r7, [sp, #8]
 800d510:	f8cd 8010 	str.w	r8, [sp, #16]
 800d514:	9405      	str	r4, [sp, #20]
 800d516:	6874      	ldr	r4, [r6, #4]
 800d518:	462b      	mov	r3, r5
 800d51a:	47a0      	blx	r4
 800d51c:	e05d      	b.n	800d5da <LCD__DrawBitmap_1bpp+0x1a6>
 800d51e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d520:	f1c7 0708 	rsb	r7, r7, #8
 800d524:	970c      	str	r7, [sp, #48]	; 0x30
 800d526:	4667      	mov	r7, ip
 800d528:	45dc      	cmp	ip, fp
 800d52a:	da56      	bge.n	800d5da <LCD__DrawBitmap_1bpp+0x1a6>
 800d52c:	4b2c      	ldr	r3, [pc, #176]	; (800d5e0 <LCD__DrawBitmap_1bpp+0x1ac>)
 800d52e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	4430      	add	r0, r6
 800d534:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800d538:	900a      	str	r0, [sp, #40]	; 0x28
 800d53a:	1e41      	subs	r1, r0, #1
 800d53c:	4291      	cmp	r1, r2
 800d53e:	910b      	str	r1, [sp, #44]	; 0x2c
 800d540:	db45      	blt.n	800d5ce <LCD__DrawBitmap_1bpp+0x19a>
 800d542:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d546:	429e      	cmp	r6, r3
 800d548:	dc41      	bgt.n	800d5ce <LCD__DrawBitmap_1bpp+0x19a>
 800d54a:	f04f 0800 	mov.w	r8, #0
 800d54e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d552:	9408      	str	r4, [sp, #32]
 800d554:	46c2      	mov	sl, r8
 800d556:	45aa      	cmp	sl, r5
 800d558:	da39      	bge.n	800d5ce <LCD__DrawBitmap_1bpp+0x19a>
 800d55a:	f1b8 0f00 	cmp.w	r8, #0
 800d55e:	d105      	bne.n	800d56c <LCD__DrawBitmap_1bpp+0x138>
 800d560:	9a08      	ldr	r2, [sp, #32]
 800d562:	7817      	ldrb	r7, [r2, #0]
 800d564:	3201      	adds	r2, #1
 800d566:	9208      	str	r2, [sp, #32]
 800d568:	f04f 0808 	mov.w	r8, #8
 800d56c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d56e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d570:	4a1b      	ldr	r2, [pc, #108]	; (800d5e0 <LCD__DrawBitmap_1bpp+0x1ac>)
 800d572:	fa47 f300 	asr.w	r3, r7, r0
 800d576:	ebc1 0808 	rsb	r8, r1, r8
 800d57a:	408f      	lsls	r7, r1
 800d57c:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800d580:	b2ff      	uxtb	r7, r7
 800d582:	d103      	bne.n	800d58c <LCD__DrawBitmap_1bpp+0x158>
 800d584:	6810      	ldr	r0, [r2, #0]
 800d586:	7c00      	ldrb	r0, [r0, #16]
 800d588:	0780      	lsls	r0, r0, #30
 800d58a:	d41b      	bmi.n	800d5c4 <LCD__DrawBitmap_1bpp+0x190>
 800d58c:	6812      	ldr	r2, [r2, #0]
 800d58e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d590:	6810      	ldr	r0, [r2, #0]
 800d592:	900d      	str	r0, [sp, #52]	; 0x34
 800d594:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d596:	b110      	cbz	r0, 800d59e <LCD__DrawBitmap_1bpp+0x16a>
 800d598:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800d59c:	e000      	b.n	800d5a0 <LCD__DrawBitmap_1bpp+0x16c>
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d5a2:	6013      	str	r3, [r2, #0]
 800d5a4:	1e4a      	subs	r2, r1, #1
 800d5a6:	444a      	add	r2, r9
 800d5a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5aa:	f8cd c01c 	str.w	ip, [sp, #28]
 800d5ae:	4648      	mov	r0, r9
 800d5b0:	4631      	mov	r1, r6
 800d5b2:	f7ff ff13 	bl	800d3dc <LCD_FillRect>
 800d5b6:	4b0a      	ldr	r3, [pc, #40]	; (800d5e0 <LCD__DrawBitmap_1bpp+0x1ac>)
 800d5b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800d5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5c2:	601a      	str	r2, [r3, #0]
 800d5c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d5c6:	f10a 0a01 	add.w	sl, sl, #1
 800d5ca:	4499      	add	r9, r3
 800d5cc:	e7c3      	b.n	800d556 <LCD__DrawBitmap_1bpp+0x122>
 800d5ce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d5d0:	f10c 0c01 	add.w	ip, ip, #1
 800d5d4:	4434      	add	r4, r6
 800d5d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d5d8:	e7a6      	b.n	800d528 <LCD__DrawBitmap_1bpp+0xf4>
 800d5da:	b00f      	add	sp, #60	; 0x3c
 800d5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e0:	200000d8 	.word	0x200000d8
 800d5e4:	2001d510 	.word	0x2001d510
 800d5e8:	2001d4e4 	.word	0x2001d4e4

0800d5ec <LCD_DrawBitmap>:
 800d5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f0:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800d800 <LCD_DrawBitmap+0x214>
 800d5f4:	b091      	sub	sp, #68	; 0x44
 800d5f6:	f8dc 9000 	ldr.w	r9, [ip]
 800d5fa:	9207      	str	r2, [sp, #28]
 800d5fc:	4605      	mov	r5, r0
 800d5fe:	4688      	mov	r8, r1
 800d600:	469b      	mov	fp, r3
 800d602:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800d604:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d606:	f1b9 0f00 	cmp.w	r9, #0
 800d60a:	d00c      	beq.n	800d626 <LCD_DrawBitmap+0x3a>
 800d60c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800d60e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d610:	9500      	str	r5, [sp, #0]
 800d612:	9701      	str	r7, [sp, #4]
 800d614:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800d616:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800d618:	9602      	str	r6, [sp, #8]
 800d61a:	9503      	str	r5, [sp, #12]
 800d61c:	9404      	str	r4, [sp, #16]
 800d61e:	9705      	str	r7, [sp, #20]
 800d620:	f8d9 4000 	ldr.w	r4, [r9]
 800d624:	e081      	b.n	800d72a <LCD_DrawBitmap+0x13e>
 800d626:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d628:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d62a:	ea47 0300 	orr.w	r3, r7, r0
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d17d      	bne.n	800d72e <LCD_DrawBitmap+0x142>
 800d632:	4b71      	ldr	r3, [pc, #452]	; (800d7f8 <LCD_DrawBitmap+0x20c>)
 800d634:	6818      	ldr	r0, [r3, #0]
 800d636:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800d63a:	1a53      	subs	r3, r2, r1
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	dd08      	ble.n	800d652 <LCD_DrawBitmap+0x66>
 800d640:	ebc3 010b 	rsb	r1, r3, fp
 800d644:	2900      	cmp	r1, #0
 800d646:	f340 80d4 	ble.w	800d7f2 <LCD_DrawBitmap+0x206>
 800d64a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800d64c:	fb07 4403 	mla	r4, r7, r3, r4
 800d650:	e001      	b.n	800d656 <LCD_DrawBitmap+0x6a>
 800d652:	4659      	mov	r1, fp
 800d654:	4642      	mov	r2, r8
 800d656:	44d8      	add	r8, fp
 800d658:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800d65c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d660:	ebc3 0808 	rsb	r8, r3, r8
 800d664:	f1b8 0f00 	cmp.w	r8, #0
 800d668:	dd04      	ble.n	800d674 <LCD_DrawBitmap+0x88>
 800d66a:	ebc8 0101 	rsb	r1, r8, r1
 800d66e:	2900      	cmp	r1, #0
 800d670:	f340 80bf 	ble.w	800d7f2 <LCD_DrawBitmap+0x206>
 800d674:	9b07      	ldr	r3, [sp, #28]
 800d676:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800d67a:	442b      	add	r3, r5
 800d67c:	3b01      	subs	r3, #1
 800d67e:	ebcc 0303 	rsb	r3, ip, r3
 800d682:	2b00      	cmp	r3, #0
 800d684:	dd02      	ble.n	800d68c <LCD_DrawBitmap+0xa0>
 800d686:	9f07      	ldr	r7, [sp, #28]
 800d688:	1aff      	subs	r7, r7, r3
 800d68a:	9707      	str	r7, [sp, #28]
 800d68c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800d690:	4565      	cmp	r5, ip
 800d692:	da33      	bge.n	800d6fc <LCD_DrawBitmap+0x110>
 800d694:	9f07      	ldr	r7, [sp, #28]
 800d696:	ebc5 030c 	rsb	r3, r5, ip
 800d69a:	1aff      	subs	r7, r7, r3
 800d69c:	2e08      	cmp	r6, #8
 800d69e:	9707      	str	r7, [sp, #28]
 800d6a0:	d027      	beq.n	800d6f2 <LCD_DrawBitmap+0x106>
 800d6a2:	dc0d      	bgt.n	800d6c0 <LCD_DrawBitmap+0xd4>
 800d6a4:	2e02      	cmp	r6, #2
 800d6a6:	d014      	beq.n	800d6d2 <LCD_DrawBitmap+0xe6>
 800d6a8:	2e04      	cmp	r6, #4
 800d6aa:	d01a      	beq.n	800d6e2 <LCD_DrawBitmap+0xf6>
 800d6ac:	2e01      	cmp	r6, #1
 800d6ae:	d126      	bne.n	800d6fe <LCD_DrawBitmap+0x112>
 800d6b0:	f023 0c07 	bic.w	ip, r3, #7
 800d6b4:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800d6b8:	4465      	add	r5, ip
 800d6ba:	f003 0307 	and.w	r3, r3, #7
 800d6be:	e01e      	b.n	800d6fe <LCD_DrawBitmap+0x112>
 800d6c0:	2e18      	cmp	r6, #24
 800d6c2:	d018      	beq.n	800d6f6 <LCD_DrawBitmap+0x10a>
 800d6c4:	2e20      	cmp	r6, #32
 800d6c6:	d016      	beq.n	800d6f6 <LCD_DrawBitmap+0x10a>
 800d6c8:	2e10      	cmp	r6, #16
 800d6ca:	d118      	bne.n	800d6fe <LCD_DrawBitmap+0x112>
 800d6cc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800d6d0:	e013      	b.n	800d6fa <LCD_DrawBitmap+0x10e>
 800d6d2:	f023 0c03 	bic.w	ip, r3, #3
 800d6d6:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800d6da:	4465      	add	r5, ip
 800d6dc:	f003 0303 	and.w	r3, r3, #3
 800d6e0:	e00d      	b.n	800d6fe <LCD_DrawBitmap+0x112>
 800d6e2:	f023 0c01 	bic.w	ip, r3, #1
 800d6e6:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800d6ea:	4465      	add	r5, ip
 800d6ec:	f003 0301 	and.w	r3, r3, #1
 800d6f0:	e005      	b.n	800d6fe <LCD_DrawBitmap+0x112>
 800d6f2:	441c      	add	r4, r3
 800d6f4:	e001      	b.n	800d6fa <LCD_DrawBitmap+0x10e>
 800d6f6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800d6fa:	4665      	mov	r5, ip
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	9f07      	ldr	r7, [sp, #28]
 800d700:	2f00      	cmp	r7, #0
 800d702:	dd76      	ble.n	800d7f2 <LCD_DrawBitmap+0x206>
 800d704:	f890 e011 	ldrb.w	lr, [r0, #17]
 800d708:	483c      	ldr	r0, [pc, #240]	; (800d7fc <LCD_DrawBitmap+0x210>)
 800d70a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800d70c:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800d710:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800d714:	9403      	str	r4, [sp, #12]
 800d716:	e88d 0042 	stmia.w	sp, {r1, r6}
 800d71a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800d71c:	9304      	str	r3, [sp, #16]
 800d71e:	9702      	str	r7, [sp, #8]
 800d720:	9405      	str	r4, [sp, #20]
 800d722:	f8de 4004 	ldr.w	r4, [lr, #4]
 800d726:	9b07      	ldr	r3, [sp, #28]
 800d728:	4629      	mov	r1, r5
 800d72a:	47a0      	blx	r4
 800d72c:	e061      	b.n	800d7f2 <LCD_DrawBitmap+0x206>
 800d72e:	f1c6 0708 	rsb	r7, r6, #8
 800d732:	970e      	str	r7, [sp, #56]	; 0x38
 800d734:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800d738:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d73a:	455f      	cmp	r7, fp
 800d73c:	da59      	bge.n	800d7f2 <LCD_DrawBitmap+0x206>
 800d73e:	4b2e      	ldr	r3, [pc, #184]	; (800d7f8 <LCD_DrawBitmap+0x20c>)
 800d740:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4447      	add	r7, r8
 800d746:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800d74a:	970c      	str	r7, [sp, #48]	; 0x30
 800d74c:	3f01      	subs	r7, #1
 800d74e:	4297      	cmp	r7, r2
 800d750:	970d      	str	r7, [sp, #52]	; 0x34
 800d752:	db46      	blt.n	800d7e2 <LCD_DrawBitmap+0x1f6>
 800d754:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d758:	4598      	cmp	r8, r3
 800d75a:	dc42      	bgt.n	800d7e2 <LCD_DrawBitmap+0x1f6>
 800d75c:	f04f 0a00 	mov.w	sl, #0
 800d760:	940b      	str	r4, [sp, #44]	; 0x2c
 800d762:	46ac      	mov	ip, r5
 800d764:	4657      	mov	r7, sl
 800d766:	9807      	ldr	r0, [sp, #28]
 800d768:	4287      	cmp	r7, r0
 800d76a:	da3a      	bge.n	800d7e2 <LCD_DrawBitmap+0x1f6>
 800d76c:	f1ba 0f00 	cmp.w	sl, #0
 800d770:	d106      	bne.n	800d780 <LCD_DrawBitmap+0x194>
 800d772:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d774:	f890 9000 	ldrb.w	r9, [r0]
 800d778:	3001      	adds	r0, #1
 800d77a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d77c:	f04f 0a08 	mov.w	sl, #8
 800d780:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d782:	4a1d      	ldr	r2, [pc, #116]	; (800d7f8 <LCD_DrawBitmap+0x20c>)
 800d784:	fa49 f301 	asr.w	r3, r9, r1
 800d788:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800d78c:	fa09 f906 	lsl.w	r9, r9, r6
 800d790:	fa5f f989 	uxtb.w	r9, r9
 800d794:	ebc6 0a0a 	rsb	sl, r6, sl
 800d798:	d103      	bne.n	800d7a2 <LCD_DrawBitmap+0x1b6>
 800d79a:	6810      	ldr	r0, [r2, #0]
 800d79c:	7c00      	ldrb	r0, [r0, #16]
 800d79e:	0780      	lsls	r0, r0, #30
 800d7a0:	d41b      	bmi.n	800d7da <LCD_DrawBitmap+0x1ee>
 800d7a2:	6812      	ldr	r2, [r2, #0]
 800d7a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d7a6:	6810      	ldr	r0, [r2, #0]
 800d7a8:	900f      	str	r0, [sp, #60]	; 0x3c
 800d7aa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800d7ac:	b110      	cbz	r0, 800d7b4 <LCD_DrawBitmap+0x1c8>
 800d7ae:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800d7b2:	e000      	b.n	800d7b6 <LCD_DrawBitmap+0x1ca>
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d7b8:	6013      	str	r3, [r2, #0]
 800d7ba:	1e4a      	subs	r2, r1, #1
 800d7bc:	4462      	add	r2, ip
 800d7be:	4660      	mov	r0, ip
 800d7c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7c2:	f8cd c020 	str.w	ip, [sp, #32]
 800d7c6:	4641      	mov	r1, r8
 800d7c8:	f7ff fe08 	bl	800d3dc <LCD_FillRect>
 800d7cc:	4b0a      	ldr	r3, [pc, #40]	; (800d7f8 <LCD_DrawBitmap+0x20c>)
 800d7ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7d8:	601a      	str	r2, [r3, #0]
 800d7da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d7dc:	3701      	adds	r7, #1
 800d7de:	449c      	add	ip, r3
 800d7e0:	e7c1      	b.n	800d766 <LCD_DrawBitmap+0x17a>
 800d7e2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d7e4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800d7e8:	3701      	adds	r7, #1
 800d7ea:	970a      	str	r7, [sp, #40]	; 0x28
 800d7ec:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800d7ee:	443c      	add	r4, r7
 800d7f0:	e7a2      	b.n	800d738 <LCD_DrawBitmap+0x14c>
 800d7f2:	b011      	add	sp, #68	; 0x44
 800d7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f8:	200000d8 	.word	0x200000d8
 800d7fc:	2001d510 	.word	0x2001d510
 800d800:	2001d4e4 	.word	0x2001d4e4

0800d804 <LCD_SetClipRectMax>:
 800d804:	b508      	push	{r3, lr}
 800d806:	4b05      	ldr	r3, [pc, #20]	; (800d81c <LCD_SetClipRectMax+0x18>)
 800d808:	6819      	ldr	r1, [r3, #0]
 800d80a:	4b05      	ldr	r3, [pc, #20]	; (800d820 <LCD_SetClipRectMax+0x1c>)
 800d80c:	7c4a      	ldrb	r2, [r1, #17]
 800d80e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d812:	68c3      	ldr	r3, [r0, #12]
 800d814:	3108      	adds	r1, #8
 800d816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d818:	4798      	blx	r3
 800d81a:	bd08      	pop	{r3, pc}
 800d81c:	200000d8 	.word	0x200000d8
 800d820:	2001d510 	.word	0x2001d510

0800d824 <emWin_LCD_Init>:
 800d824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d826:	f7ff ffed 	bl	800d804 <LCD_SetClipRectMax>
 800d82a:	f005 fda3 	bl	8013374 <LCD_InitColors>
 800d82e:	4604      	mov	r4, r0
 800d830:	2800      	cmp	r0, #0
 800d832:	d13d      	bne.n	800d8b0 <emWin_LCD_Init+0x8c>
 800d834:	4605      	mov	r5, r0
 800d836:	4628      	mov	r0, r5
 800d838:	f001 fc7c 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800d83c:	9001      	str	r0, [sp, #4]
 800d83e:	b148      	cbz	r0, 800d854 <emWin_LCD_Init+0x30>
 800d840:	68c3      	ldr	r3, [r0, #12]
 800d842:	210c      	movs	r1, #12
 800d844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d846:	a801      	add	r0, sp, #4
 800d848:	4798      	blx	r3
 800d84a:	4603      	mov	r3, r0
 800d84c:	b370      	cbz	r0, 800d8ac <emWin_LCD_Init+0x88>
 800d84e:	9801      	ldr	r0, [sp, #4]
 800d850:	4798      	blx	r3
 800d852:	4304      	orrs	r4, r0
 800d854:	3501      	adds	r5, #1
 800d856:	2d02      	cmp	r5, #2
 800d858:	d1ed      	bne.n	800d836 <emWin_LCD_Init+0x12>
 800d85a:	bb4c      	cbnz	r4, 800d8b0 <emWin_LCD_Init+0x8c>
 800d85c:	f005 fdd6 	bl	801340c <LCD_InitLUT>
 800d860:	2401      	movs	r4, #1
 800d862:	4620      	mov	r0, r4
 800d864:	f001 fc66 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800d868:	9001      	str	r0, [sp, #4]
 800d86a:	b1d0      	cbz	r0, 800d8a2 <emWin_LCD_Init+0x7e>
 800d86c:	4620      	mov	r0, r4
 800d86e:	f001 f98b 	bl	800eb88 <GUI_SelectLayer>
 800d872:	2004      	movs	r0, #4
 800d874:	f7ff fd30 	bl	800d2d8 <LCD_SetDrawMode>
 800d878:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800d87c:	2000      	movs	r0, #0
 800d87e:	4601      	mov	r1, r0
 800d880:	4613      	mov	r3, r2
 800d882:	f7ff fdab 	bl	800d3dc <LCD_FillRect>
 800d886:	2000      	movs	r0, #0
 800d888:	f7ff fd26 	bl	800d2d8 <LCD_SetDrawMode>
 800d88c:	a802      	add	r0, sp, #8
 800d88e:	210e      	movs	r1, #14
 800d890:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d898:	4798      	blx	r3
 800d89a:	4603      	mov	r3, r0
 800d89c:	b108      	cbz	r0, 800d8a2 <emWin_LCD_Init+0x7e>
 800d89e:	9801      	ldr	r0, [sp, #4]
 800d8a0:	4798      	blx	r3
 800d8a2:	f114 34ff 	adds.w	r4, r4, #4294967295
 800d8a6:	d2dc      	bcs.n	800d862 <emWin_LCD_Init+0x3e>
 800d8a8:	2000      	movs	r0, #0
 800d8aa:	e002      	b.n	800d8b2 <emWin_LCD_Init+0x8e>
 800d8ac:	2001      	movs	r0, #1
 800d8ae:	e000      	b.n	800d8b2 <emWin_LCD_Init+0x8e>
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	b003      	add	sp, #12
 800d8b4:	bd30      	pop	{r4, r5, pc}
	...

0800d8b8 <LCD_Color2Index>:
 800d8b8:	b508      	push	{r3, lr}
 800d8ba:	4b05      	ldr	r3, [pc, #20]	; (800d8d0 <LCD_Color2Index+0x18>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	7c5a      	ldrb	r2, [r3, #17]
 800d8c0:	4b04      	ldr	r3, [pc, #16]	; (800d8d4 <LCD_Color2Index+0x1c>)
 800d8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8c6:	691b      	ldr	r3, [r3, #16]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4798      	blx	r3
 800d8cc:	bd08      	pop	{r3, pc}
 800d8ce:	bf00      	nop
 800d8d0:	200000d8 	.word	0x200000d8
 800d8d4:	2001d510 	.word	0x2001d510

0800d8d8 <LCD_Index2Color>:
 800d8d8:	b508      	push	{r3, lr}
 800d8da:	4b05      	ldr	r3, [pc, #20]	; (800d8f0 <LCD_Index2Color+0x18>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	7c5a      	ldrb	r2, [r3, #17]
 800d8e0:	4b04      	ldr	r3, [pc, #16]	; (800d8f4 <LCD_Index2Color+0x1c>)
 800d8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e6:	691b      	ldr	r3, [r3, #16]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	4798      	blx	r3
 800d8ec:	bd08      	pop	{r3, pc}
 800d8ee:	bf00      	nop
 800d8f0:	200000d8 	.word	0x200000d8
 800d8f4:	2001d510 	.word	0x2001d510

0800d8f8 <LCD_SetColorIndex>:
 800d8f8:	4b04      	ldr	r3, [pc, #16]	; (800d90c <LCD_SetColorIndex+0x14>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	7c1a      	ldrb	r2, [r3, #16]
 800d8fe:	0752      	lsls	r2, r2, #29
 800d900:	bf4c      	ite	mi
 800d902:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800d904:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800d906:	6018      	str	r0, [r3, #0]
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	200000d8 	.word	0x200000d8

0800d910 <_SetColor>:
 800d910:	b508      	push	{r3, lr}
 800d912:	4b06      	ldr	r3, [pc, #24]	; (800d92c <_SetColor+0x1c>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d918:	4281      	cmp	r1, r0
 800d91a:	d006      	beq.n	800d92a <_SetColor+0x1a>
 800d91c:	6318      	str	r0, [r3, #48]	; 0x30
 800d91e:	f7ff ffcb 	bl	800d8b8 <LCD_Color2Index>
 800d922:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d926:	f7ff bfe7 	b.w	800d8f8 <LCD_SetColorIndex>
 800d92a:	bd08      	pop	{r3, pc}
 800d92c:	200000d8 	.word	0x200000d8

0800d930 <LCD_SetBkColorIndex>:
 800d930:	4b04      	ldr	r3, [pc, #16]	; (800d944 <LCD_SetBkColorIndex+0x14>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	7c1a      	ldrb	r2, [r3, #16]
 800d936:	0752      	lsls	r2, r2, #29
 800d938:	bf4c      	ite	mi
 800d93a:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800d93c:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800d93e:	6018      	str	r0, [r3, #0]
 800d940:	4770      	bx	lr
 800d942:	bf00      	nop
 800d944:	200000d8 	.word	0x200000d8

0800d948 <_SetBkColor>:
 800d948:	b508      	push	{r3, lr}
 800d94a:	4b06      	ldr	r3, [pc, #24]	; (800d964 <_SetBkColor+0x1c>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d950:	4281      	cmp	r1, r0
 800d952:	d006      	beq.n	800d962 <_SetBkColor+0x1a>
 800d954:	6358      	str	r0, [r3, #52]	; 0x34
 800d956:	f7ff ffaf 	bl	800d8b8 <LCD_Color2Index>
 800d95a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d95e:	f7ff bfe7 	b.w	800d930 <LCD_SetBkColorIndex>
 800d962:	bd08      	pop	{r3, pc}
 800d964:	200000d8 	.word	0x200000d8

0800d968 <LCD_SetBkColor>:
 800d968:	b508      	push	{r3, lr}
 800d96a:	4b02      	ldr	r3, [pc, #8]	; (800d974 <LCD_SetBkColor+0xc>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	4798      	blx	r3
 800d972:	bd08      	pop	{r3, pc}
 800d974:	200000bc 	.word	0x200000bc

0800d978 <LCD_SetColor>:
 800d978:	b508      	push	{r3, lr}
 800d97a:	4b02      	ldr	r3, [pc, #8]	; (800d984 <LCD_SetColor+0xc>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4798      	blx	r3
 800d982:	bd08      	pop	{r3, pc}
 800d984:	200000bc 	.word	0x200000bc

0800d988 <GUI__strlen>:
 800d988:	f04f 33ff 	mov.w	r3, #4294967295
 800d98c:	b118      	cbz	r0, 800d996 <GUI__strlen+0xe>
 800d98e:	3301      	adds	r3, #1
 800d990:	5cc2      	ldrb	r2, [r0, r3]
 800d992:	2a00      	cmp	r2, #0
 800d994:	d1fb      	bne.n	800d98e <GUI__strlen+0x6>
 800d996:	4618      	mov	r0, r3
 800d998:	4770      	bx	lr

0800d99a <GUI__memset16>:
 800d99a:	b570      	push	{r4, r5, r6, lr}
 800d99c:	0784      	lsls	r4, r0, #30
 800d99e:	d502      	bpl.n	800d9a6 <GUI__memset16+0xc>
 800d9a0:	8001      	strh	r1, [r0, #0]
 800d9a2:	3a01      	subs	r2, #1
 800d9a4:	3002      	adds	r0, #2
 800d9a6:	0855      	lsrs	r5, r2, #1
 800d9a8:	462b      	mov	r3, r5
 800d9aa:	b305      	cbz	r5, 800d9ee <GUI__memset16+0x54>
 800d9ac:	2d03      	cmp	r5, #3
 800d9ae:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 800d9b2:	dc02      	bgt.n	800d9ba <GUI__memset16+0x20>
 800d9b4:	4606      	mov	r6, r0
 800d9b6:	461d      	mov	r5, r3
 800d9b8:	e012      	b.n	800d9e0 <GUI__memset16+0x46>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	462e      	mov	r6, r5
 800d9be:	3e04      	subs	r6, #4
 800d9c0:	2e03      	cmp	r6, #3
 800d9c2:	601c      	str	r4, [r3, #0]
 800d9c4:	605c      	str	r4, [r3, #4]
 800d9c6:	609c      	str	r4, [r3, #8]
 800d9c8:	60dc      	str	r4, [r3, #12]
 800d9ca:	f103 0310 	add.w	r3, r3, #16
 800d9ce:	dcf6      	bgt.n	800d9be <GUI__memset16+0x24>
 800d9d0:	3d04      	subs	r5, #4
 800d9d2:	08ab      	lsrs	r3, r5, #2
 800d9d4:	1c5e      	adds	r6, r3, #1
 800d9d6:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800d9da:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 800d9de:	e7e9      	b.n	800d9b4 <GUI__memset16+0x1a>
 800d9e0:	b11d      	cbz	r5, 800d9ea <GUI__memset16+0x50>
 800d9e2:	f846 4b04 	str.w	r4, [r6], #4
 800d9e6:	3d01      	subs	r5, #1
 800d9e8:	e7fa      	b.n	800d9e0 <GUI__memset16+0x46>
 800d9ea:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d9ee:	07d3      	lsls	r3, r2, #31
 800d9f0:	bf48      	it	mi
 800d9f2:	8001      	strhmi	r1, [r0, #0]
 800d9f4:	bd70      	pop	{r4, r5, r6, pc}

0800d9f6 <GUI__memset>:
 800d9f6:	b570      	push	{r4, r5, r6, lr}
 800d9f8:	b12a      	cbz	r2, 800da06 <GUI__memset+0x10>
 800d9fa:	0783      	lsls	r3, r0, #30
 800d9fc:	d003      	beq.n	800da06 <GUI__memset+0x10>
 800d9fe:	f800 1b01 	strb.w	r1, [r0], #1
 800da02:	3a01      	subs	r2, #1
 800da04:	e7f8      	b.n	800d9f8 <GUI__memset+0x2>
 800da06:	0893      	lsrs	r3, r2, #2
 800da08:	d101      	bne.n	800da0e <GUI__memset+0x18>
 800da0a:	4402      	add	r2, r0
 800da0c:	e017      	b.n	800da3e <GUI__memset+0x48>
 800da0e:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800da12:	f002 0203 	and.w	r2, r2, #3
 800da16:	434c      	muls	r4, r1
 800da18:	2b03      	cmp	r3, #3
 800da1a:	4605      	mov	r5, r0
 800da1c:	dd06      	ble.n	800da2c <GUI__memset+0x36>
 800da1e:	6004      	str	r4, [r0, #0]
 800da20:	6044      	str	r4, [r0, #4]
 800da22:	6084      	str	r4, [r0, #8]
 800da24:	60c4      	str	r4, [r0, #12]
 800da26:	3b04      	subs	r3, #4
 800da28:	3010      	adds	r0, #16
 800da2a:	e7f5      	b.n	800da18 <GUI__memset+0x22>
 800da2c:	461e      	mov	r6, r3
 800da2e:	b11b      	cbz	r3, 800da38 <GUI__memset+0x42>
 800da30:	f845 4b04 	str.w	r4, [r5], #4
 800da34:	3b01      	subs	r3, #1
 800da36:	e7fa      	b.n	800da2e <GUI__memset+0x38>
 800da38:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800da3c:	e7e5      	b.n	800da0a <GUI__memset+0x14>
 800da3e:	4290      	cmp	r0, r2
 800da40:	d002      	beq.n	800da48 <GUI__memset+0x52>
 800da42:	f800 1b01 	strb.w	r1, [r0], #1
 800da46:	e7fa      	b.n	800da3e <GUI__memset+0x48>
 800da48:	bd70      	pop	{r4, r5, r6, pc}

0800da4a <GUI__SetText>:
 800da4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da4c:	6807      	ldr	r7, [r0, #0]
 800da4e:	4605      	mov	r5, r0
 800da50:	4638      	mov	r0, r7
 800da52:	460e      	mov	r6, r1
 800da54:	f005 fd36 	bl	80134c4 <GUI__strcmp_hp>
 800da58:	b908      	cbnz	r0, 800da5e <GUI__SetText+0x14>
 800da5a:	2000      	movs	r0, #0
 800da5c:	e02e      	b.n	800dabc <GUI__SetText+0x72>
 800da5e:	4630      	mov	r0, r6
 800da60:	f7ff ff92 	bl	800d988 <GUI__strlen>
 800da64:	1c44      	adds	r4, r0, #1
 800da66:	4638      	mov	r0, r7
 800da68:	f002 f9a8 	bl	800fdbc <GUI_ALLOC_GetSize>
 800da6c:	4284      	cmp	r4, r0
 800da6e:	d10f      	bne.n	800da90 <GUI__SetText+0x46>
 800da70:	2c00      	cmp	r4, #0
 800da72:	d0f2      	beq.n	800da5a <GUI__SetText+0x10>
 800da74:	4638      	mov	r0, r7
 800da76:	f002 f973 	bl	800fd60 <GUI_ALLOC_LockH>
 800da7a:	ad02      	add	r5, sp, #8
 800da7c:	4631      	mov	r1, r6
 800da7e:	f845 0d04 	str.w	r0, [r5, #-4]!
 800da82:	4622      	mov	r2, r4
 800da84:	f008 fef8 	bl	8016878 <memcpy>
 800da88:	4628      	mov	r0, r5
 800da8a:	f002 f977 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800da8e:	e014      	b.n	800daba <GUI__SetText+0x70>
 800da90:	4620      	mov	r0, r4
 800da92:	f002 fbb9 	bl	8010208 <GUI_ALLOC_AllocNoInit>
 800da96:	4607      	mov	r7, r0
 800da98:	2800      	cmp	r0, #0
 800da9a:	d0de      	beq.n	800da5a <GUI__SetText+0x10>
 800da9c:	f002 f960 	bl	800fd60 <GUI_ALLOC_LockH>
 800daa0:	ac02      	add	r4, sp, #8
 800daa2:	4631      	mov	r1, r6
 800daa4:	f844 0d04 	str.w	r0, [r4, #-4]!
 800daa8:	f008 ff36 	bl	8016918 <strcpy>
 800daac:	4620      	mov	r0, r4
 800daae:	f002 f965 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800dab2:	4628      	mov	r0, r5
 800dab4:	f002 fbac 	bl	8010210 <GUI_ALLOC_FreePtr>
 800dab8:	602f      	str	r7, [r5, #0]
 800daba:	2001      	movs	r0, #1
 800dabc:	b003      	add	sp, #12
 800dabe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dac0 <GUI__ReduceRect>:
 800dac0:	880b      	ldrh	r3, [r1, #0]
 800dac2:	b292      	uxth	r2, r2
 800dac4:	4413      	add	r3, r2
 800dac6:	8003      	strh	r3, [r0, #0]
 800dac8:	888b      	ldrh	r3, [r1, #4]
 800daca:	1a9b      	subs	r3, r3, r2
 800dacc:	8083      	strh	r3, [r0, #4]
 800dace:	884b      	ldrh	r3, [r1, #2]
 800dad0:	4413      	add	r3, r2
 800dad2:	8043      	strh	r3, [r0, #2]
 800dad4:	88cb      	ldrh	r3, [r1, #6]
 800dad6:	1a9a      	subs	r2, r3, r2
 800dad8:	80c2      	strh	r2, [r0, #6]
 800dada:	4770      	bx	lr

0800dadc <GUI__ManageCacheEx>:
 800dadc:	2801      	cmp	r0, #1
 800dade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dae0:	4604      	mov	r4, r0
 800dae2:	460d      	mov	r5, r1
 800dae4:	dc65      	bgt.n	800dbb2 <GUI__ManageCacheEx+0xd6>
 800dae6:	4b34      	ldr	r3, [pc, #208]	; (800dbb8 <GUI__ManageCacheEx+0xdc>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	b103      	cbz	r3, 800daee <GUI__ManageCacheEx+0x12>
 800daec:	4798      	blx	r3
 800daee:	2d01      	cmp	r5, #1
 800daf0:	d004      	beq.n	800dafc <GUI__ManageCacheEx+0x20>
 800daf2:	2d02      	cmp	r5, #2
 800daf4:	d021      	beq.n	800db3a <GUI__ManageCacheEx+0x5e>
 800daf6:	2d00      	cmp	r5, #0
 800daf8:	d15b      	bne.n	800dbb2 <GUI__ManageCacheEx+0xd6>
 800dafa:	e035      	b.n	800db68 <GUI__ManageCacheEx+0x8c>
 800dafc:	4e2f      	ldr	r6, [pc, #188]	; (800dbbc <GUI__ManageCacheEx+0xe0>)
 800dafe:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 800db02:	b9b7      	cbnz	r7, 800db32 <GUI__ManageCacheEx+0x56>
 800db04:	4620      	mov	r0, r4
 800db06:	f001 fb15 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800db0a:	9001      	str	r0, [sp, #4]
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d050      	beq.n	800dbb2 <GUI__ManageCacheEx+0xd6>
 800db10:	68c3      	ldr	r3, [r0, #12]
 800db12:	210d      	movs	r1, #13
 800db14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db16:	a801      	add	r0, sp, #4
 800db18:	4798      	blx	r3
 800db1a:	4603      	mov	r3, r0
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d048      	beq.n	800dbb2 <GUI__ManageCacheEx+0xd6>
 800db20:	9801      	ldr	r0, [sp, #4]
 800db22:	4629      	mov	r1, r5
 800db24:	4798      	blx	r3
 800db26:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800db2a:	3301      	adds	r3, #1
 800db2c:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800db30:	e018      	b.n	800db64 <GUI__ManageCacheEx+0x88>
 800db32:	3701      	adds	r7, #1
 800db34:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800db38:	e03b      	b.n	800dbb2 <GUI__ManageCacheEx+0xd6>
 800db3a:	4620      	mov	r0, r4
 800db3c:	f001 fafa 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800db40:	9001      	str	r0, [sp, #4]
 800db42:	2800      	cmp	r0, #0
 800db44:	d035      	beq.n	800dbb2 <GUI__ManageCacheEx+0xd6>
 800db46:	68c3      	ldr	r3, [r0, #12]
 800db48:	210d      	movs	r1, #13
 800db4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db4c:	a801      	add	r0, sp, #4
 800db4e:	4798      	blx	r3
 800db50:	4604      	mov	r4, r0
 800db52:	2800      	cmp	r0, #0
 800db54:	d02d      	beq.n	800dbb2 <GUI__ManageCacheEx+0xd6>
 800db56:	4b1a      	ldr	r3, [pc, #104]	; (800dbc0 <GUI__ManageCacheEx+0xe4>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	b103      	cbz	r3, 800db5e <GUI__ManageCacheEx+0x82>
 800db5c:	4798      	blx	r3
 800db5e:	9801      	ldr	r0, [sp, #4]
 800db60:	2102      	movs	r1, #2
 800db62:	47a0      	blx	r4
 800db64:	2000      	movs	r0, #0
 800db66:	e025      	b.n	800dbb4 <GUI__ManageCacheEx+0xd8>
 800db68:	4d14      	ldr	r5, [pc, #80]	; (800dbbc <GUI__ManageCacheEx+0xe0>)
 800db6a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d001      	beq.n	800db76 <GUI__ManageCacheEx+0x9a>
 800db72:	2001      	movs	r0, #1
 800db74:	e015      	b.n	800dba2 <GUI__ManageCacheEx+0xc6>
 800db76:	4620      	mov	r0, r4
 800db78:	f001 fadc 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800db7c:	9001      	str	r0, [sp, #4]
 800db7e:	2800      	cmp	r0, #0
 800db80:	d0f7      	beq.n	800db72 <GUI__ManageCacheEx+0x96>
 800db82:	68c3      	ldr	r3, [r0, #12]
 800db84:	210d      	movs	r1, #13
 800db86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db88:	a801      	add	r0, sp, #4
 800db8a:	4798      	blx	r3
 800db8c:	4606      	mov	r6, r0
 800db8e:	2800      	cmp	r0, #0
 800db90:	d0ef      	beq.n	800db72 <GUI__ManageCacheEx+0x96>
 800db92:	4b0b      	ldr	r3, [pc, #44]	; (800dbc0 <GUI__ManageCacheEx+0xe4>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	b103      	cbz	r3, 800db9a <GUI__ManageCacheEx+0xbe>
 800db98:	4798      	blx	r3
 800db9a:	9801      	ldr	r0, [sp, #4]
 800db9c:	2100      	movs	r1, #0
 800db9e:	47b0      	blx	r6
 800dba0:	2000      	movs	r0, #0
 800dba2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	bf18      	it	ne
 800dbaa:	3b01      	subne	r3, #1
 800dbac:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800dbb0:	e000      	b.n	800dbb4 <GUI__ManageCacheEx+0xd8>
 800dbb2:	2001      	movs	r0, #1
 800dbb4:	b003      	add	sp, #12
 800dbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbb8:	2001d094 	.word	0x2001d094
 800dbbc:	2001d08c 	.word	0x2001d08c
 800dbc0:	2001d088 	.word	0x2001d088

0800dbc4 <GUI__ManageCache>:
 800dbc4:	4b02      	ldr	r3, [pc, #8]	; (800dbd0 <GUI__ManageCache+0xc>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4601      	mov	r1, r0
 800dbca:	7c58      	ldrb	r0, [r3, #17]
 800dbcc:	f7ff bf86 	b.w	800dadc <GUI__ManageCacheEx>
 800dbd0:	200000d8 	.word	0x200000d8

0800dbd4 <GUI__IntersectRects>:
 800dbd4:	b570      	push	{r4, r5, r6, lr}
 800dbd6:	f9b2 3000 	ldrsh.w	r3, [r2]
 800dbda:	f9b1 4000 	ldrsh.w	r4, [r1]
 800dbde:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800dbe2:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800dbe6:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800dbea:	429c      	cmp	r4, r3
 800dbec:	bfb8      	it	lt
 800dbee:	461c      	movlt	r4, r3
 800dbf0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800dbf4:	429d      	cmp	r5, r3
 800dbf6:	bfa8      	it	ge
 800dbf8:	462b      	movge	r3, r5
 800dbfa:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800dbfe:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800dc02:	42ae      	cmp	r6, r5
 800dc04:	bfb8      	it	lt
 800dc06:	4635      	movlt	r5, r6
 800dc08:	b2a4      	uxth	r4, r4
 800dc0a:	b2ad      	uxth	r5, r5
 800dc0c:	4291      	cmp	r1, r2
 800dc0e:	bfb8      	it	lt
 800dc10:	460a      	movlt	r2, r1
 800dc12:	8004      	strh	r4, [r0, #0]
 800dc14:	8085      	strh	r5, [r0, #4]
 800dc16:	b224      	sxth	r4, r4
 800dc18:	b22d      	sxth	r5, r5
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	b292      	uxth	r2, r2
 800dc1e:	42a5      	cmp	r5, r4
 800dc20:	8043      	strh	r3, [r0, #2]
 800dc22:	80c2      	strh	r2, [r0, #6]
 800dc24:	db06      	blt.n	800dc34 <GUI__IntersectRects+0x60>
 800dc26:	b210      	sxth	r0, r2
 800dc28:	b21b      	sxth	r3, r3
 800dc2a:	4298      	cmp	r0, r3
 800dc2c:	bfb4      	ite	lt
 800dc2e:	2000      	movlt	r0, #0
 800dc30:	2001      	movge	r0, #1
 800dc32:	bd70      	pop	{r4, r5, r6, pc}
 800dc34:	2000      	movs	r0, #0
 800dc36:	bd70      	pop	{r4, r5, r6, pc}

0800dc38 <GUI__IntersectRect>:
 800dc38:	880b      	ldrh	r3, [r1, #0]
 800dc3a:	b510      	push	{r4, lr}
 800dc3c:	f9b0 4000 	ldrsh.w	r4, [r0]
 800dc40:	b21a      	sxth	r2, r3
 800dc42:	4294      	cmp	r4, r2
 800dc44:	bfb8      	it	lt
 800dc46:	8003      	strhlt	r3, [r0, #0]
 800dc48:	884b      	ldrh	r3, [r1, #2]
 800dc4a:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800dc4e:	b21a      	sxth	r2, r3
 800dc50:	4294      	cmp	r4, r2
 800dc52:	bfb8      	it	lt
 800dc54:	8043      	strhlt	r3, [r0, #2]
 800dc56:	888b      	ldrh	r3, [r1, #4]
 800dc58:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800dc5c:	b21a      	sxth	r2, r3
 800dc5e:	4294      	cmp	r4, r2
 800dc60:	bfc8      	it	gt
 800dc62:	8083      	strhgt	r3, [r0, #4]
 800dc64:	88cb      	ldrh	r3, [r1, #6]
 800dc66:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800dc6a:	b21a      	sxth	r2, r3
 800dc6c:	4291      	cmp	r1, r2
 800dc6e:	bfc8      	it	gt
 800dc70:	80c3      	strhgt	r3, [r0, #6]
 800dc72:	bd10      	pop	{r4, pc}

0800dc74 <GUI__MixColors>:
 800dc74:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 800dc78:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800dc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc7e:	d027      	beq.n	800dcd0 <GUI__MixColors+0x5c>
 800dc80:	43d3      	mvns	r3, r2
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	b2cd      	uxtb	r5, r1
 800dc86:	b2c6      	uxtb	r6, r0
 800dc88:	435d      	muls	r5, r3
 800dc8a:	fb02 5506 	mla	r5, r2, r6, r5
 800dc8e:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 800dc92:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 800dc96:	435e      	muls	r6, r3
 800dc98:	fb02 6604 	mla	r6, r2, r4, r6
 800dc9c:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 800dca0:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 800dca4:	435c      	muls	r4, r3
 800dca6:	0e09      	lsrs	r1, r1, #24
 800dca8:	0e00      	lsrs	r0, r0, #24
 800dcaa:	fb02 4407 	mla	r4, r2, r7, r4
 800dcae:	434b      	muls	r3, r1
 800dcb0:	0a36      	lsrs	r6, r6, #8
 800dcb2:	fb02 3200 	mla	r2, r2, r0, r3
 800dcb6:	0a24      	lsrs	r4, r4, #8
 800dcb8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800dcbc:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 800dcc0:	4318      	orrs	r0, r3
 800dcc2:	0412      	lsls	r2, r2, #16
 800dcc4:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 800dcc8:	4318      	orrs	r0, r3
 800dcca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800dcce:	4310      	orrs	r0, r2
 800dcd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800dcd4 <_OnExit>:
 800dcd4:	b570      	push	{r4, r5, r6, lr}
 800dcd6:	4c0a      	ldr	r4, [pc, #40]	; (800dd00 <_OnExit+0x2c>)
 800dcd8:	4d0a      	ldr	r5, [pc, #40]	; (800dd04 <_OnExit+0x30>)
 800dcda:	6820      	ldr	r0, [r4, #0]
 800dcdc:	4e0a      	ldr	r6, [pc, #40]	; (800dd08 <_OnExit+0x34>)
 800dcde:	f002 f82b 	bl	800fd38 <GUI_ALLOC_FreeFixedBlock>
 800dce2:	6828      	ldr	r0, [r5, #0]
 800dce4:	f002 f828 	bl	800fd38 <GUI_ALLOC_FreeFixedBlock>
 800dce8:	6830      	ldr	r0, [r6, #0]
 800dcea:	f002 f825 	bl	800fd38 <GUI_ALLOC_FreeFixedBlock>
 800dcee:	4a07      	ldr	r2, [pc, #28]	; (800dd0c <_OnExit+0x38>)
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	6013      	str	r3, [r2, #0]
 800dcf4:	4a06      	ldr	r2, [pc, #24]	; (800dd10 <_OnExit+0x3c>)
 800dcf6:	6033      	str	r3, [r6, #0]
 800dcf8:	602b      	str	r3, [r5, #0]
 800dcfa:	6023      	str	r3, [r4, #0]
 800dcfc:	6013      	str	r3, [r2, #0]
 800dcfe:	bd70      	pop	{r4, r5, r6, pc}
 800dd00:	2001d09c 	.word	0x2001d09c
 800dd04:	2001d098 	.word	0x2001d098
 800dd08:	2001d0a0 	.word	0x2001d0a0
 800dd0c:	2001d0a4 	.word	0x2001d0a4
 800dd10:	2001d0b4 	.word	0x2001d0b4

0800dd14 <GUI__GetAlphaBuffer>:
 800dd14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd18:	461c      	mov	r4, r3
 800dd1a:	4b28      	ldr	r3, [pc, #160]	; (800ddbc <GUI__GetAlphaBuffer+0xa8>)
 800dd1c:	4617      	mov	r7, r2
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	4606      	mov	r6, r0
 800dd22:	4688      	mov	r8, r1
 800dd24:	b932      	cbnz	r2, 800dd34 <GUI__GetAlphaBuffer+0x20>
 800dd26:	2201      	movs	r2, #1
 800dd28:	4825      	ldr	r0, [pc, #148]	; (800ddc0 <GUI__GetAlphaBuffer+0xac>)
 800dd2a:	601a      	str	r2, [r3, #0]
 800dd2c:	4b25      	ldr	r3, [pc, #148]	; (800ddc4 <GUI__GetAlphaBuffer+0xb0>)
 800dd2e:	6003      	str	r3, [r0, #0]
 800dd30:	f001 fc02 	bl	800f538 <GUI__RegisterExit>
 800dd34:	4d24      	ldr	r5, [pc, #144]	; (800ddc8 <GUI__GetAlphaBuffer+0xb4>)
 800dd36:	682b      	ldr	r3, [r5, #0]
 800dd38:	b933      	cbnz	r3, 800dd48 <GUI__GetAlphaBuffer+0x34>
 800dd3a:	4b24      	ldr	r3, [pc, #144]	; (800ddcc <GUI__GetAlphaBuffer+0xb8>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	602b      	str	r3, [r5, #0]
 800dd40:	b913      	cbnz	r3, 800dd48 <GUI__GetAlphaBuffer+0x34>
 800dd42:	f7ff fa45 	bl	800d1d0 <LCD_GetVXSizeMax>
 800dd46:	6028      	str	r0, [r5, #0]
 800dd48:	b10c      	cbz	r4, 800dd4e <GUI__GetAlphaBuffer+0x3a>
 800dd4a:	682b      	ldr	r3, [r5, #0]
 800dd4c:	6023      	str	r3, [r4, #0]
 800dd4e:	b196      	cbz	r6, 800dd76 <GUI__GetAlphaBuffer+0x62>
 800dd50:	4b1f      	ldr	r3, [pc, #124]	; (800ddd0 <GUI__GetAlphaBuffer+0xbc>)
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	4699      	mov	r9, r3
 800dd56:	2400      	movs	r4, #0
 800dd58:	b94a      	cbnz	r2, 800dd6e <GUI__GetAlphaBuffer+0x5a>
 800dd5a:	6828      	ldr	r0, [r5, #0]
 800dd5c:	0080      	lsls	r0, r0, #2
 800dd5e:	f002 f957 	bl	8010010 <GUI_ALLOC_GetFixedBlock>
 800dd62:	f1d0 0401 	rsbs	r4, r0, #1
 800dd66:	f8c9 0000 	str.w	r0, [r9]
 800dd6a:	bf38      	it	cc
 800dd6c:	2400      	movcc	r4, #0
 800dd6e:	f8d9 3000 	ldr.w	r3, [r9]
 800dd72:	6033      	str	r3, [r6, #0]
 800dd74:	e000      	b.n	800dd78 <GUI__GetAlphaBuffer+0x64>
 800dd76:	4634      	mov	r4, r6
 800dd78:	f1b8 0f00 	cmp.w	r8, #0
 800dd7c:	d00d      	beq.n	800dd9a <GUI__GetAlphaBuffer+0x86>
 800dd7e:	4e15      	ldr	r6, [pc, #84]	; (800ddd4 <GUI__GetAlphaBuffer+0xc0>)
 800dd80:	6833      	ldr	r3, [r6, #0]
 800dd82:	b93b      	cbnz	r3, 800dd94 <GUI__GetAlphaBuffer+0x80>
 800dd84:	6828      	ldr	r0, [r5, #0]
 800dd86:	0080      	lsls	r0, r0, #2
 800dd88:	f002 f942 	bl	8010010 <GUI_ALLOC_GetFixedBlock>
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	6030      	str	r0, [r6, #0]
 800dd90:	bf08      	it	eq
 800dd92:	2401      	moveq	r4, #1
 800dd94:	6833      	ldr	r3, [r6, #0]
 800dd96:	f8c8 3000 	str.w	r3, [r8]
 800dd9a:	b167      	cbz	r7, 800ddb6 <GUI__GetAlphaBuffer+0xa2>
 800dd9c:	4e0e      	ldr	r6, [pc, #56]	; (800ddd8 <GUI__GetAlphaBuffer+0xc4>)
 800dd9e:	6833      	ldr	r3, [r6, #0]
 800dda0:	b93b      	cbnz	r3, 800ddb2 <GUI__GetAlphaBuffer+0x9e>
 800dda2:	6828      	ldr	r0, [r5, #0]
 800dda4:	0080      	lsls	r0, r0, #2
 800dda6:	f002 f933 	bl	8010010 <GUI_ALLOC_GetFixedBlock>
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	6030      	str	r0, [r6, #0]
 800ddae:	bf08      	it	eq
 800ddb0:	2401      	moveq	r4, #1
 800ddb2:	6833      	ldr	r3, [r6, #0]
 800ddb4:	603b      	str	r3, [r7, #0]
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddbc:	2001d0b4 	.word	0x2001d0b4
 800ddc0:	2001d0ac 	.word	0x2001d0ac
 800ddc4:	0800dcd5 	.word	0x0800dcd5
 800ddc8:	2001d0a4 	.word	0x2001d0a4
 800ddcc:	2001d518 	.word	0x2001d518
 800ddd0:	2001d09c 	.word	0x2001d09c
 800ddd4:	2001d098 	.word	0x2001d098
 800ddd8:	2001d0a0 	.word	0x2001d0a0

0800dddc <GUI__DoAlphaBlending>:
 800dddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde0:	b093      	sub	sp, #76	; 0x4c
 800dde2:	2400      	movs	r4, #0
 800dde4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800dde6:	900b      	str	r0, [sp, #44]	; 0x2c
 800dde8:	910c      	str	r1, [sp, #48]	; 0x30
 800ddea:	4690      	mov	r8, r2
 800ddec:	461f      	mov	r7, r3
 800ddee:	6034      	str	r4, [r6, #0]
 800ddf0:	a80f      	add	r0, sp, #60	; 0x3c
 800ddf2:	a910      	add	r1, sp, #64	; 0x40
 800ddf4:	4622      	mov	r2, r4
 800ddf6:	ab11      	add	r3, sp, #68	; 0x44
 800ddf8:	f7ff ff8c 	bl	800dd14 <GUI__GetAlphaBuffer>
 800ddfc:	4605      	mov	r5, r0
 800ddfe:	2800      	cmp	r0, #0
 800de00:	f040 80c3 	bne.w	800df8a <GUI__DoAlphaBlending+0x1ae>
 800de04:	4c63      	ldr	r4, [pc, #396]	; (800df94 <GUI__DoAlphaBlending+0x1b8>)
 800de06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800de08:	6823      	ldr	r3, [r4, #0]
 800de0a:	7c58      	ldrb	r0, [r3, #17]
 800de0c:	4b62      	ldr	r3, [pc, #392]	; (800df98 <GUI__DoAlphaBlending+0x1bc>)
 800de0e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800de12:	9307      	str	r3, [sp, #28]
 800de14:	4297      	cmp	r7, r2
 800de16:	bfa8      	it	ge
 800de18:	4617      	movge	r7, r2
 800de1a:	691a      	ldr	r2, [r3, #16]
 800de1c:	920d      	str	r2, [sp, #52]	; 0x34
 800de1e:	970a      	str	r7, [sp, #40]	; 0x28
 800de20:	f7ff f9a2 	bl	800d168 <GUI_GetBitsPerPixelEx>
 800de24:	6823      	ldr	r3, [r4, #0]
 800de26:	9008      	str	r0, [sp, #32]
 800de28:	7c58      	ldrb	r0, [r3, #17]
 800de2a:	f7ff f9bb 	bl	800d1a4 <GUI_GetpfIndex2ColorEx>
 800de2e:	4b5b      	ldr	r3, [pc, #364]	; (800df9c <GUI__DoAlphaBlending+0x1c0>)
 800de30:	9004      	str	r0, [sp, #16]
 800de32:	4298      	cmp	r0, r3
 800de34:	d005      	beq.n	800de42 <GUI__DoAlphaBlending+0x66>
 800de36:	4b5a      	ldr	r3, [pc, #360]	; (800dfa0 <GUI__DoAlphaBlending+0x1c4>)
 800de38:	1ac3      	subs	r3, r0, r3
 800de3a:	bf18      	it	ne
 800de3c:	2301      	movne	r3, #1
 800de3e:	9306      	str	r3, [sp, #24]
 800de40:	e000      	b.n	800de44 <GUI__DoAlphaBlending+0x68>
 800de42:	9506      	str	r5, [sp, #24]
 800de44:	2500      	movs	r5, #0
 800de46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800de48:	46ab      	mov	fp, r5
 800de4a:	4643      	mov	r3, r8
 800de4c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800de4e:	f853 0b04 	ldr.w	r0, [r3], #4
 800de52:	9305      	str	r3, [sp, #20]
 800de54:	4790      	blx	r2
 800de56:	0e03      	lsrs	r3, r0, #24
 800de58:	4681      	mov	r9, r0
 800de5a:	9309      	str	r3, [sp, #36]	; 0x24
 800de5c:	f000 8085 	beq.w	800df6a <GUI__DoAlphaBlending+0x18e>
 800de60:	f1bb 0f00 	cmp.w	fp, #0
 800de64:	d13f      	bne.n	800dee6 <GUI__DoAlphaBlending+0x10a>
 800de66:	4b4b      	ldr	r3, [pc, #300]	; (800df94 <GUI__DoAlphaBlending+0x1b8>)
 800de68:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800de72:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800de76:	990c      	ldr	r1, [sp, #48]	; 0x30
 800de78:	442f      	add	r7, r5
 800de7a:	42bb      	cmp	r3, r7
 800de7c:	bfc8      	it	gt
 800de7e:	ebc7 0b03 	rsbgt	fp, r7, r3
 800de82:	eb0b 0a05 	add.w	sl, fp, r5
 800de86:	bfc8      	it	gt
 800de88:	461f      	movgt	r7, r3
 800de8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de8c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800de90:	4453      	add	r3, sl
 800de92:	4494      	add	ip, r2
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	9b07      	ldr	r3, [sp, #28]
 800de98:	9301      	str	r3, [sp, #4]
 800de9a:	f10c 32ff 	add.w	r2, ip, #4294967295
 800de9e:	4638      	mov	r0, r7
 800dea0:	460b      	mov	r3, r1
 800dea2:	f8cd c00c 	str.w	ip, [sp, #12]
 800dea6:	f005 fa2b 	bl	8013300 <GUI_ReadRectEx>
 800deaa:	9a08      	ldr	r2, [sp, #32]
 800deac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800deae:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800deb2:	2a17      	cmp	r2, #23
 800deb4:	dc06      	bgt.n	800dec4 <GUI__DoAlphaBlending+0xe8>
 800deb6:	4450      	add	r0, sl
 800deb8:	ebcb 0104 	rsb	r1, fp, r4
 800debc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800debe:	f005 fbc3 	bl	8013648 <GUI__ExpandPixelIndicesEx>
 800dec2:	e001      	b.n	800dec8 <GUI__DoAlphaBlending+0xec>
 800dec4:	9b06      	ldr	r3, [sp, #24]
 800dec6:	b913      	cbnz	r3, 800dece <GUI__DoAlphaBlending+0xf2>
 800dec8:	f04f 0b01 	mov.w	fp, #1
 800decc:	e00b      	b.n	800dee6 <GUI__DoAlphaBlending+0x10a>
 800dece:	ebc7 070c 	rsb	r7, r7, ip
 800ded2:	4482      	add	sl, r0
 800ded4:	f8da 0000 	ldr.w	r0, [sl]
 800ded8:	9a04      	ldr	r2, [sp, #16]
 800deda:	4790      	blx	r2
 800dedc:	3f01      	subs	r7, #1
 800dede:	f84a 0b04 	str.w	r0, [sl], #4
 800dee2:	d1f7      	bne.n	800ded4 <GUI__DoAlphaBlending+0xf8>
 800dee4:	e7f0      	b.n	800dec8 <GUI__DoAlphaBlending+0xec>
 800dee6:	4b2f      	ldr	r3, [pc, #188]	; (800dfa4 <GUI__DoAlphaBlending+0x1c8>)
 800dee8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800deea:	f8d3 c000 	ldr.w	ip, [r3]
 800deee:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800def0:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800def4:	f1bc 0f00 	cmp.w	ip, #0
 800def8:	d024      	beq.n	800df44 <GUI__DoAlphaBlending+0x168>
 800defa:	eb07 020a 	add.w	r2, r7, sl
 800defe:	4451      	add	r1, sl
 800df00:	9210      	str	r2, [sp, #64]	; 0x40
 800df02:	4623      	mov	r3, r4
 800df04:	910f      	str	r1, [sp, #60]	; 0x3c
 800df06:	4640      	mov	r0, r8
 800df08:	47e0      	blx	ip
 800df0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800df0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df0e:	2300      	movs	r3, #0
 800df10:	f858 1003 	ldr.w	r1, [r8, r3]
 800df14:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 800df18:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800df1c:	58e8      	ldr	r0, [r5, r3]
 800df1e:	d101      	bne.n	800df24 <GUI__DoAlphaBlending+0x148>
 800df20:	50d0      	str	r0, [r2, r3]
 800df22:	e005      	b.n	800df30 <GUI__DoAlphaBlending+0x154>
 800df24:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800df28:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800df2c:	bf08      	it	eq
 800df2e:	50d1      	streq	r1, [r2, r3]
 800df30:	3c01      	subs	r4, #1
 800df32:	f103 0304 	add.w	r3, r3, #4
 800df36:	d1eb      	bne.n	800df10 <GUI__DoAlphaBlending+0x134>
 800df38:	6833      	ldr	r3, [r6, #0]
 800df3a:	9710      	str	r7, [sp, #64]	; 0x40
 800df3c:	f043 0301 	orr.w	r3, r3, #1
 800df40:	6033      	str	r3, [r6, #0]
 800df42:	e020      	b.n	800df86 <GUI__DoAlphaBlending+0x1aa>
 800df44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df46:	2bff      	cmp	r3, #255	; 0xff
 800df48:	d104      	bne.n	800df54 <GUI__DoAlphaBlending+0x178>
 800df4a:	f851 300a 	ldr.w	r3, [r1, sl]
 800df4e:	f847 300a 	str.w	r3, [r7, sl]
 800df52:	e011      	b.n	800df78 <GUI__DoAlphaBlending+0x19c>
 800df54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df56:	f851 100a 	ldr.w	r1, [r1, sl]
 800df5a:	43da      	mvns	r2, r3
 800df5c:	4648      	mov	r0, r9
 800df5e:	b2d2      	uxtb	r2, r2
 800df60:	f7ff fe88 	bl	800dc74 <GUI__MixColors>
 800df64:	f847 000a 	str.w	r0, [r7, sl]
 800df68:	e002      	b.n	800df70 <GUI__DoAlphaBlending+0x194>
 800df6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df6c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800df70:	6833      	ldr	r3, [r6, #0]
 800df72:	f043 0301 	orr.w	r3, r3, #1
 800df76:	6033      	str	r3, [r6, #0]
 800df78:	3c01      	subs	r4, #1
 800df7a:	f105 0501 	add.w	r5, r5, #1
 800df7e:	d002      	beq.n	800df86 <GUI__DoAlphaBlending+0x1aa>
 800df80:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800df84:	e761      	b.n	800de4a <GUI__DoAlphaBlending+0x6e>
 800df86:	9810      	ldr	r0, [sp, #64]	; 0x40
 800df88:	e000      	b.n	800df8c <GUI__DoAlphaBlending+0x1b0>
 800df8a:	4620      	mov	r0, r4
 800df8c:	b013      	add	sp, #76	; 0x4c
 800df8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df92:	bf00      	nop
 800df94:	200000d8 	.word	0x200000d8
 800df98:	2001d510 	.word	0x2001d510
 800df9c:	080103a3 	.word	0x080103a3
 800dfa0:	080103a1 	.word	0x080103a1
 800dfa4:	2001d0a8 	.word	0x2001d0a8

0800dfa8 <GUI__AllocAlphaBuffer>:
 800dfa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfaa:	b108      	cbz	r0, 800dfb0 <GUI__AllocAlphaBuffer+0x8>
 800dfac:	aa03      	add	r2, sp, #12
 800dfae:	e000      	b.n	800dfb2 <GUI__AllocAlphaBuffer+0xa>
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	a801      	add	r0, sp, #4
 800dfb4:	a902      	add	r1, sp, #8
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	f7ff feac 	bl	800dd14 <GUI__GetAlphaBuffer>
 800dfbc:	b005      	add	sp, #20
 800dfbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800dfc4 <GUI_SignalEvent>:
 800dfc4:	b508      	push	{r3, lr}
 800dfc6:	4b02      	ldr	r3, [pc, #8]	; (800dfd0 <GUI_SignalEvent+0xc>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	b103      	cbz	r3, 800dfce <GUI_SignalEvent+0xa>
 800dfcc:	4798      	blx	r3
 800dfce:	bd08      	pop	{r3, pc}
 800dfd0:	2001d0b8 	.word	0x2001d0b8

0800dfd4 <_OnExit>:
 800dfd4:	4a03      	ldr	r2, [pc, #12]	; (800dfe4 <_OnExit+0x10>)
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	6013      	str	r3, [r2, #0]
 800dfda:	4a03      	ldr	r2, [pc, #12]	; (800dfe8 <_OnExit+0x14>)
 800dfdc:	6013      	str	r3, [r2, #0]
 800dfde:	4a03      	ldr	r2, [pc, #12]	; (800dfec <_OnExit+0x18>)
 800dfe0:	6013      	str	r3, [r2, #0]
 800dfe2:	4770      	bx	lr
 800dfe4:	2001d0bc 	.word	0x2001d0bc
 800dfe8:	2001d0c0 	.word	0x2001d0c0
 800dfec:	2001d0cc 	.word	0x2001d0cc

0800dff0 <GUI_TIMER_Exec>:
 800dff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dff4:	4b19      	ldr	r3, [pc, #100]	; (800e05c <GUI_TIMER_Exec+0x6c>)
 800dff6:	681f      	ldr	r7, [r3, #0]
 800dff8:	b085      	sub	sp, #20
 800dffa:	2500      	movs	r5, #0
 800dffc:	4698      	mov	r8, r3
 800dffe:	f8d8 3000 	ldr.w	r3, [r8]
 800e002:	4c16      	ldr	r4, [pc, #88]	; (800e05c <GUI_TIMER_Exec+0x6c>)
 800e004:	b333      	cbz	r3, 800e054 <GUI_TIMER_Exec+0x64>
 800e006:	f000 f991 	bl	800e32c <GUI_GetTime>
 800e00a:	4606      	mov	r6, r0
 800e00c:	6820      	ldr	r0, [r4, #0]
 800e00e:	f001 fea7 	bl	800fd60 <GUI_ALLOC_LockH>
 800e012:	4603      	mov	r3, r0
 800e014:	a804      	add	r0, sp, #16
 800e016:	6959      	ldr	r1, [r3, #20]
 800e018:	f840 3d10 	str.w	r3, [r0, #-16]!
 800e01c:	1b89      	subs	r1, r1, r6
 800e01e:	2900      	cmp	r1, #0
 800e020:	dc13      	bgt.n	800e04a <GUI_TIMER_Exec+0x5a>
 800e022:	6821      	ldr	r1, [r4, #0]
 800e024:	9103      	str	r1, [sp, #12]
 800e026:	9601      	str	r6, [sp, #4]
 800e028:	6919      	ldr	r1, [r3, #16]
 800e02a:	685e      	ldr	r6, [r3, #4]
 800e02c:	9102      	str	r1, [sp, #8]
 800e02e:	4668      	mov	r0, sp
 800e030:	6026      	str	r6, [r4, #0]
 800e032:	f8d3 9000 	ldr.w	r9, [r3]
 800e036:	f001 fea1 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e03a:	a801      	add	r0, sp, #4
 800e03c:	47c8      	blx	r9
 800e03e:	b14e      	cbz	r6, 800e054 <GUI_TIMER_Exec+0x64>
 800e040:	6823      	ldr	r3, [r4, #0]
 800e042:	42bb      	cmp	r3, r7
 800e044:	d005      	beq.n	800e052 <GUI_TIMER_Exec+0x62>
 800e046:	2501      	movs	r5, #1
 800e048:	e7d9      	b.n	800dffe <GUI_TIMER_Exec+0xe>
 800e04a:	4668      	mov	r0, sp
 800e04c:	f001 fe96 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e050:	e000      	b.n	800e054 <GUI_TIMER_Exec+0x64>
 800e052:	2500      	movs	r5, #0
 800e054:	4628      	mov	r0, r5
 800e056:	b005      	add	sp, #20
 800e058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e05c:	2001d0c0 	.word	0x2001d0c0

0800e060 <_Link>:
 800e060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e062:	4c25      	ldr	r4, [pc, #148]	; (800e0f8 <_Link+0x98>)
 800e064:	b085      	sub	sp, #20
 800e066:	4605      	mov	r5, r0
 800e068:	f001 fe7a 	bl	800fd60 <GUI_ALLOC_LockH>
 800e06c:	6823      	ldr	r3, [r4, #0]
 800e06e:	9001      	str	r0, [sp, #4]
 800e070:	b913      	cbnz	r3, 800e078 <_Link+0x18>
 800e072:	6025      	str	r5, [r4, #0]
 800e074:	6043      	str	r3, [r0, #4]
 800e076:	e039      	b.n	800e0ec <_Link+0x8c>
 800e078:	4618      	mov	r0, r3
 800e07a:	f001 fe71 	bl	800fd60 <GUI_ALLOC_LockH>
 800e07e:	ab04      	add	r3, sp, #16
 800e080:	6946      	ldr	r6, [r0, #20]
 800e082:	f843 0d10 	str.w	r0, [r3, #-16]!
 800e086:	4668      	mov	r0, sp
 800e088:	f001 fe78 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e08c:	9b01      	ldr	r3, [sp, #4]
 800e08e:	695a      	ldr	r2, [r3, #20]
 800e090:	1b92      	subs	r2, r2, r6
 800e092:	2a00      	cmp	r2, #0
 800e094:	dc03      	bgt.n	800e09e <_Link+0x3e>
 800e096:	6822      	ldr	r2, [r4, #0]
 800e098:	605a      	str	r2, [r3, #4]
 800e09a:	6025      	str	r5, [r4, #0]
 800e09c:	e026      	b.n	800e0ec <_Link+0x8c>
 800e09e:	6826      	ldr	r6, [r4, #0]
 800e0a0:	4630      	mov	r0, r6
 800e0a2:	f001 fe5d 	bl	800fd60 <GUI_ALLOC_LockH>
 800e0a6:	ac04      	add	r4, sp, #16
 800e0a8:	6846      	ldr	r6, [r0, #4]
 800e0aa:	f844 0d08 	str.w	r0, [r4, #-8]!
 800e0ae:	b1be      	cbz	r6, 800e0e0 <_Link+0x80>
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	f001 fe55 	bl	800fd60 <GUI_ALLOC_LockH>
 800e0b6:	ab04      	add	r3, sp, #16
 800e0b8:	6947      	ldr	r7, [r0, #20]
 800e0ba:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f001 fe5c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e0c4:	9a01      	ldr	r2, [sp, #4]
 800e0c6:	6953      	ldr	r3, [r2, #20]
 800e0c8:	1bdb      	subs	r3, r3, r7
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	9b02      	ldr	r3, [sp, #8]
 800e0ce:	dc02      	bgt.n	800e0d6 <_Link+0x76>
 800e0d0:	6056      	str	r6, [r2, #4]
 800e0d2:	605d      	str	r5, [r3, #4]
 800e0d4:	e007      	b.n	800e0e6 <_Link+0x86>
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	685e      	ldr	r6, [r3, #4]
 800e0da:	f001 fe4f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e0de:	e7df      	b.n	800e0a0 <_Link+0x40>
 800e0e0:	9b01      	ldr	r3, [sp, #4]
 800e0e2:	605e      	str	r6, [r3, #4]
 800e0e4:	6045      	str	r5, [r0, #4]
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f001 fe48 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e0ec:	a801      	add	r0, sp, #4
 800e0ee:	f001 fe45 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e0f2:	b005      	add	sp, #20
 800e0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	2001d0c0 	.word	0x2001d0c0

0800e0fc <_Unlink>:
 800e0fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0fe:	4605      	mov	r5, r0
 800e100:	b1f0      	cbz	r0, 800e140 <_Unlink+0x44>
 800e102:	f001 fe2d 	bl	800fd60 <GUI_ALLOC_LockH>
 800e106:	4b0f      	ldr	r3, [pc, #60]	; (800e144 <_Unlink+0x48>)
 800e108:	9000      	str	r0, [sp, #0]
 800e10a:	681c      	ldr	r4, [r3, #0]
 800e10c:	42ac      	cmp	r4, r5
 800e10e:	d104      	bne.n	800e11a <_Unlink+0x1e>
 800e110:	6842      	ldr	r2, [r0, #4]
 800e112:	601a      	str	r2, [r3, #0]
 800e114:	e011      	b.n	800e13a <_Unlink+0x3e>
 800e116:	f001 fe31 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e11a:	b174      	cbz	r4, 800e13a <_Unlink+0x3e>
 800e11c:	4620      	mov	r0, r4
 800e11e:	f001 fe1f 	bl	800fd60 <GUI_ALLOC_LockH>
 800e122:	4603      	mov	r3, r0
 800e124:	a802      	add	r0, sp, #8
 800e126:	685c      	ldr	r4, [r3, #4]
 800e128:	f840 3d04 	str.w	r3, [r0, #-4]!
 800e12c:	42ac      	cmp	r4, r5
 800e12e:	d1f2      	bne.n	800e116 <_Unlink+0x1a>
 800e130:	9a00      	ldr	r2, [sp, #0]
 800e132:	6852      	ldr	r2, [r2, #4]
 800e134:	605a      	str	r2, [r3, #4]
 800e136:	f001 fe21 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e13a:	4668      	mov	r0, sp
 800e13c:	f001 fe1e 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e140:	b003      	add	sp, #12
 800e142:	bd30      	pop	{r4, r5, pc}
 800e144:	2001d0c0 	.word	0x2001d0c0

0800e148 <GUI_TIMER__GetFirstTimer>:
 800e148:	2300      	movs	r3, #0
 800e14a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e14c:	6003      	str	r3, [r0, #0]
 800e14e:	4b09      	ldr	r3, [pc, #36]	; (800e174 <GUI_TIMER__GetFirstTimer+0x2c>)
 800e150:	681c      	ldr	r4, [r3, #0]
 800e152:	4605      	mov	r5, r0
 800e154:	b154      	cbz	r4, 800e16c <GUI_TIMER__GetFirstTimer+0x24>
 800e156:	4620      	mov	r0, r4
 800e158:	f001 fe02 	bl	800fd60 <GUI_ALLOC_LockH>
 800e15c:	ab02      	add	r3, sp, #8
 800e15e:	6902      	ldr	r2, [r0, #16]
 800e160:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e164:	602a      	str	r2, [r5, #0]
 800e166:	4618      	mov	r0, r3
 800e168:	f001 fe08 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e16c:	4620      	mov	r0, r4
 800e16e:	b003      	add	sp, #12
 800e170:	bd30      	pop	{r4, r5, pc}
 800e172:	bf00      	nop
 800e174:	2001d0bc 	.word	0x2001d0bc

0800e178 <GUI_TIMER__GetNextTimerLin>:
 800e178:	2300      	movs	r3, #0
 800e17a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e17c:	600b      	str	r3, [r1, #0]
 800e17e:	460e      	mov	r6, r1
 800e180:	4604      	mov	r4, r0
 800e182:	b190      	cbz	r0, 800e1aa <GUI_TIMER__GetNextTimerLin+0x32>
 800e184:	f001 fdec 	bl	800fd60 <GUI_ALLOC_LockH>
 800e188:	ad02      	add	r5, sp, #8
 800e18a:	6884      	ldr	r4, [r0, #8]
 800e18c:	f845 0d04 	str.w	r0, [r5, #-4]!
 800e190:	b144      	cbz	r4, 800e1a4 <GUI_TIMER__GetNextTimerLin+0x2c>
 800e192:	4628      	mov	r0, r5
 800e194:	f001 fdf2 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e198:	4620      	mov	r0, r4
 800e19a:	f001 fde1 	bl	800fd60 <GUI_ALLOC_LockH>
 800e19e:	6903      	ldr	r3, [r0, #16]
 800e1a0:	9001      	str	r0, [sp, #4]
 800e1a2:	6033      	str	r3, [r6, #0]
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	f001 fde9 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	b002      	add	sp, #8
 800e1ae:	bd70      	pop	{r4, r5, r6, pc}

0800e1b0 <GUI_TIMER_Create>:
 800e1b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e1b4:	4681      	mov	r9, r0
 800e1b6:	201c      	movs	r0, #28
 800e1b8:	460e      	mov	r6, r1
 800e1ba:	4690      	mov	r8, r2
 800e1bc:	461f      	mov	r7, r3
 800e1be:	f002 f83c 	bl	801023a <GUI_ALLOC_AllocZero>
 800e1c2:	4604      	mov	r4, r0
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	d031      	beq.n	800e22c <GUI_TIMER_Create+0x7c>
 800e1c8:	4b1a      	ldr	r3, [pc, #104]	; (800e234 <GUI_TIMER_Create+0x84>)
 800e1ca:	4a1b      	ldr	r2, [pc, #108]	; (800e238 <GUI_TIMER_Create+0x88>)
 800e1cc:	601a      	str	r2, [r3, #0]
 800e1ce:	f001 fdc7 	bl	800fd60 <GUI_ALLOC_LockH>
 800e1d2:	9000      	str	r0, [sp, #0]
 800e1d4:	b916      	cbnz	r6, 800e1dc <GUI_TIMER_Create+0x2c>
 800e1d6:	f000 f8a9 	bl	800e32c <GUI_GetTime>
 800e1da:	4606      	mov	r6, r0
 800e1dc:	a802      	add	r0, sp, #8
 800e1de:	f850 5d08 	ldr.w	r5, [r0, #-8]!
 800e1e2:	4668      	mov	r0, sp
 800e1e4:	616e      	str	r6, [r5, #20]
 800e1e6:	f8c5 9000 	str.w	r9, [r5]
 800e1ea:	f8c5 8010 	str.w	r8, [r5, #16]
 800e1ee:	81af      	strh	r7, [r5, #12]
 800e1f0:	f001 fdc4 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f7ff ff33 	bl	800e060 <_Link>
 800e1fa:	4b10      	ldr	r3, [pc, #64]	; (800e23c <GUI_TIMER_Create+0x8c>)
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	b932      	cbnz	r2, 800e20e <GUI_TIMER_Create+0x5e>
 800e200:	2201      	movs	r2, #1
 800e202:	480f      	ldr	r0, [pc, #60]	; (800e240 <GUI_TIMER_Create+0x90>)
 800e204:	601a      	str	r2, [r3, #0]
 800e206:	4b0f      	ldr	r3, [pc, #60]	; (800e244 <GUI_TIMER_Create+0x94>)
 800e208:	6003      	str	r3, [r0, #0]
 800e20a:	f001 f995 	bl	800f538 <GUI__RegisterExit>
 800e20e:	4620      	mov	r0, r4
 800e210:	f001 fda6 	bl	800fd60 <GUI_ALLOC_LockH>
 800e214:	4a0c      	ldr	r2, [pc, #48]	; (800e248 <GUI_TIMER_Create+0x98>)
 800e216:	9001      	str	r0, [sp, #4]
 800e218:	6813      	ldr	r3, [r2, #0]
 800e21a:	b913      	cbnz	r3, 800e222 <GUI_TIMER_Create+0x72>
 800e21c:	6014      	str	r4, [r2, #0]
 800e21e:	6083      	str	r3, [r0, #8]
 800e220:	e001      	b.n	800e226 <GUI_TIMER_Create+0x76>
 800e222:	6083      	str	r3, [r0, #8]
 800e224:	6014      	str	r4, [r2, #0]
 800e226:	a801      	add	r0, sp, #4
 800e228:	f001 fda8 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e22c:	4620      	mov	r0, r4
 800e22e:	b003      	add	sp, #12
 800e230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e234:	2001d4f4 	.word	0x2001d4f4
 800e238:	0800dff1 	.word	0x0800dff1
 800e23c:	2001d0cc 	.word	0x2001d0cc
 800e240:	2001d0c4 	.word	0x2001d0c4
 800e244:	0800dfd5 	.word	0x0800dfd5
 800e248:	2001d0bc 	.word	0x2001d0bc

0800e24c <GUI_TIMER_Delete>:
 800e24c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e24e:	4604      	mov	r4, r0
 800e250:	b358      	cbz	r0, 800e2aa <GUI_TIMER_Delete+0x5e>
 800e252:	4d17      	ldr	r5, [pc, #92]	; (800e2b0 <GUI_TIMER_Delete+0x64>)
 800e254:	682e      	ldr	r6, [r5, #0]
 800e256:	4286      	cmp	r6, r0
 800e258:	d10b      	bne.n	800e272 <GUI_TIMER_Delete+0x26>
 800e25a:	f001 fd81 	bl	800fd60 <GUI_ALLOC_LockH>
 800e25e:	ab02      	add	r3, sp, #8
 800e260:	6882      	ldr	r2, [r0, #8]
 800e262:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e266:	602a      	str	r2, [r5, #0]
 800e268:	4618      	mov	r0, r3
 800e26a:	e016      	b.n	800e29a <GUI_TIMER_Delete+0x4e>
 800e26c:	4668      	mov	r0, sp
 800e26e:	f001 fd85 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e272:	4630      	mov	r0, r6
 800e274:	f001 fd74 	bl	800fd60 <GUI_ALLOC_LockH>
 800e278:	6886      	ldr	r6, [r0, #8]
 800e27a:	ad02      	add	r5, sp, #8
 800e27c:	42a6      	cmp	r6, r4
 800e27e:	f845 0d08 	str.w	r0, [r5, #-8]!
 800e282:	d1f3      	bne.n	800e26c <GUI_TIMER_Delete+0x20>
 800e284:	4620      	mov	r0, r4
 800e286:	f001 fd6b 	bl	800fd60 <GUI_ALLOC_LockH>
 800e28a:	9b00      	ldr	r3, [sp, #0]
 800e28c:	6882      	ldr	r2, [r0, #8]
 800e28e:	9001      	str	r0, [sp, #4]
 800e290:	609a      	str	r2, [r3, #8]
 800e292:	a801      	add	r0, sp, #4
 800e294:	f001 fd72 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e298:	4668      	mov	r0, sp
 800e29a:	f001 fd6f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e29e:	4620      	mov	r0, r4
 800e2a0:	f7ff ff2c 	bl	800e0fc <_Unlink>
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f001 fd95 	bl	800fdd4 <GUI_ALLOC_Free>
 800e2aa:	b002      	add	sp, #8
 800e2ac:	bd70      	pop	{r4, r5, r6, pc}
 800e2ae:	bf00      	nop
 800e2b0:	2001d0bc 	.word	0x2001d0bc

0800e2b4 <GUI_TIMER_SetPeriod>:
 800e2b4:	b513      	push	{r0, r1, r4, lr}
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	b140      	cbz	r0, 800e2cc <GUI_TIMER_SetPeriod+0x18>
 800e2ba:	f001 fd51 	bl	800fd60 <GUI_ALLOC_LockH>
 800e2be:	ab02      	add	r3, sp, #8
 800e2c0:	6184      	str	r4, [r0, #24]
 800e2c2:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f001 fd58 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e2cc:	b002      	add	sp, #8
 800e2ce:	bd10      	pop	{r4, pc}

0800e2d0 <GUI_TIMER_Restart>:
 800e2d0:	b513      	push	{r0, r1, r4, lr}
 800e2d2:	4604      	mov	r4, r0
 800e2d4:	b198      	cbz	r0, 800e2fe <GUI_TIMER_Restart+0x2e>
 800e2d6:	f001 fd43 	bl	800fd60 <GUI_ALLOC_LockH>
 800e2da:	9001      	str	r0, [sp, #4]
 800e2dc:	f000 f826 	bl	800e32c <GUI_GetTime>
 800e2e0:	ab02      	add	r3, sp, #8
 800e2e2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e2e6:	6991      	ldr	r1, [r2, #24]
 800e2e8:	4408      	add	r0, r1
 800e2ea:	6150      	str	r0, [r2, #20]
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f001 fd45 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f7ff ff02 	bl	800e0fc <_Unlink>
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	f7ff feb1 	bl	800e060 <_Link>
 800e2fe:	b002      	add	sp, #8
 800e300:	bd10      	pop	{r4, pc}

0800e302 <GUI_TIMER_GetFlag>:
 800e302:	b513      	push	{r0, r1, r4, lr}
 800e304:	460c      	mov	r4, r1
 800e306:	b168      	cbz	r0, 800e324 <GUI_TIMER_GetFlag+0x22>
 800e308:	f001 fd2a 	bl	800fd60 <GUI_ALLOC_LockH>
 800e30c:	ab02      	add	r3, sp, #8
 800e30e:	8982      	ldrh	r2, [r0, #12]
 800e310:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e314:	4214      	tst	r4, r2
 800e316:	4618      	mov	r0, r3
 800e318:	bf0c      	ite	eq
 800e31a:	2400      	moveq	r4, #0
 800e31c:	2401      	movne	r4, #1
 800e31e:	f001 fd2d 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800e322:	e000      	b.n	800e326 <GUI_TIMER_GetFlag+0x24>
 800e324:	2401      	movs	r4, #1
 800e326:	4620      	mov	r0, r4
 800e328:	b002      	add	sp, #8
 800e32a:	bd10      	pop	{r4, pc}

0800e32c <GUI_GetTime>:
 800e32c:	f7f2 bd9a 	b.w	8000e64 <GUI_X_GetTime>

0800e330 <GUI_Delay>:
 800e330:	b538      	push	{r3, r4, r5, lr}
 800e332:	4605      	mov	r5, r0
 800e334:	f7f2 fd96 	bl	8000e64 <GUI_X_GetTime>
 800e338:	4405      	add	r5, r0
 800e33a:	f7f2 fd93 	bl	8000e64 <GUI_X_GetTime>
 800e33e:	1a2c      	subs	r4, r5, r0
 800e340:	2c00      	cmp	r4, #0
 800e342:	dd08      	ble.n	800e356 <GUI_Delay+0x26>
 800e344:	f000 fdf8 	bl	800ef38 <GUI_Exec>
 800e348:	2c05      	cmp	r4, #5
 800e34a:	bfb4      	ite	lt
 800e34c:	4620      	movlt	r0, r4
 800e34e:	2005      	movge	r0, #5
 800e350:	f7f2 fd94 	bl	8000e7c <GUI_X_Delay>
 800e354:	e7f1      	b.n	800e33a <GUI_Delay+0xa>
 800e356:	bd38      	pop	{r3, r4, r5, pc}

0800e358 <GUI_TOUCH_Calibrate>:
 800e358:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e35a:	2801      	cmp	r0, #1
 800e35c:	9c08      	ldr	r4, [sp, #32]
 800e35e:	d845      	bhi.n	800e3ec <GUI_TOUCH_Calibrate+0x94>
 800e360:	4d25      	ldr	r5, [pc, #148]	; (800e3f8 <GUI_TOUCH_Calibrate+0xa0>)
 800e362:	d00c      	beq.n	800e37e <GUI_TOUCH_Calibrate+0x26>
 800e364:	4e25      	ldr	r6, [pc, #148]	; (800e3fc <GUI_TOUCH_Calibrate+0xa4>)
 800e366:	e886 0006 	stmia.w	r6, {r1, r2}
 800e36a:	6829      	ldr	r1, [r5, #0]
 800e36c:	f001 0206 	and.w	r2, r1, #6
 800e370:	2a06      	cmp	r2, #6
 800e372:	4a23      	ldr	r2, [pc, #140]	; (800e400 <GUI_TOUCH_Calibrate+0xa8>)
 800e374:	d010      	beq.n	800e398 <GUI_TOUCH_Calibrate+0x40>
 800e376:	f001 0105 	and.w	r1, r1, #5
 800e37a:	2901      	cmp	r1, #1
 800e37c:	e00b      	b.n	800e396 <GUI_TOUCH_Calibrate+0x3e>
 800e37e:	4e21      	ldr	r6, [pc, #132]	; (800e404 <GUI_TOUCH_Calibrate+0xac>)
 800e380:	e886 0006 	stmia.w	r6, {r1, r2}
 800e384:	6829      	ldr	r1, [r5, #0]
 800e386:	f001 0205 	and.w	r2, r1, #5
 800e38a:	2a05      	cmp	r2, #5
 800e38c:	4a1e      	ldr	r2, [pc, #120]	; (800e408 <GUI_TOUCH_Calibrate+0xb0>)
 800e38e:	d003      	beq.n	800e398 <GUI_TOUCH_Calibrate+0x40>
 800e390:	f001 0106 	and.w	r1, r1, #6
 800e394:	2902      	cmp	r1, #2
 800e396:	d102      	bne.n	800e39e <GUI_TOUCH_Calibrate+0x46>
 800e398:	6014      	str	r4, [r2, #0]
 800e39a:	6053      	str	r3, [r2, #4]
 800e39c:	e001      	b.n	800e3a2 <GUI_TOUCH_Calibrate+0x4a>
 800e39e:	e882 0018 	stmia.w	r2, {r3, r4}
 800e3a2:	4b1a      	ldr	r3, [pc, #104]	; (800e40c <GUI_TOUCH_Calibrate+0xb4>)
 800e3a4:	781a      	ldrb	r2, [r3, #0]
 800e3a6:	4102      	asrs	r2, r0
 800e3a8:	07d2      	lsls	r2, r2, #31
 800e3aa:	bf44      	itt	mi
 800e3ac:	2200      	movmi	r2, #0
 800e3ae:	701a      	strbmi	r2, [r3, #0]
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	fa02 f000 	lsl.w	r0, r2, r0
 800e3b6:	781a      	ldrb	r2, [r3, #0]
 800e3b8:	4310      	orrs	r0, r2
 800e3ba:	b2c0      	uxtb	r0, r0
 800e3bc:	2803      	cmp	r0, #3
 800e3be:	7018      	strb	r0, [r3, #0]
 800e3c0:	d116      	bne.n	800e3f0 <GUI_TOUCH_Calibrate+0x98>
 800e3c2:	4c13      	ldr	r4, [pc, #76]	; (800e410 <GUI_TOUCH_Calibrate+0xb8>)
 800e3c4:	6823      	ldr	r3, [r4, #0]
 800e3c6:	7c58      	ldrb	r0, [r3, #17]
 800e3c8:	f7fe fea4 	bl	800d114 <LCD_GetXSizeEx>
 800e3cc:	6823      	ldr	r3, [r4, #0]
 800e3ce:	4605      	mov	r5, r0
 800e3d0:	7c58      	ldrb	r0, [r3, #17]
 800e3d2:	f7fe fea2 	bl	800d11a <LCD_GetYSizeEx>
 800e3d6:	4b0c      	ldr	r3, [pc, #48]	; (800e408 <GUI_TOUCH_Calibrate+0xb0>)
 800e3d8:	9002      	str	r0, [sp, #8]
 800e3da:	e88d 0028 	stmia.w	sp, {r3, r5}
 800e3de:	4907      	ldr	r1, [pc, #28]	; (800e3fc <GUI_TOUCH_Calibrate+0xa4>)
 800e3e0:	4a08      	ldr	r2, [pc, #32]	; (800e404 <GUI_TOUCH_Calibrate+0xac>)
 800e3e2:	4b07      	ldr	r3, [pc, #28]	; (800e400 <GUI_TOUCH_Calibrate+0xa8>)
 800e3e4:	2002      	movs	r0, #2
 800e3e6:	f000 f8ff 	bl	800e5e8 <GUI_TOUCH_CalcCoefficients>
 800e3ea:	e002      	b.n	800e3f2 <GUI_TOUCH_Calibrate+0x9a>
 800e3ec:	2001      	movs	r0, #1
 800e3ee:	e000      	b.n	800e3f2 <GUI_TOUCH_Calibrate+0x9a>
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	b004      	add	sp, #16
 800e3f4:	bd70      	pop	{r4, r5, r6, pc}
 800e3f6:	bf00      	nop
 800e3f8:	2001d0e4 	.word	0x2001d0e4
 800e3fc:	2001d0d0 	.word	0x2001d0d0
 800e400:	2001d0ec 	.word	0x2001d0ec
 800e404:	2001d0f8 	.word	0x2001d0f8
 800e408:	2001d0d8 	.word	0x2001d0d8
 800e40c:	2001d0e0 	.word	0x2001d0e0
 800e410:	200000d8 	.word	0x200000d8

0800e414 <GUI_TOUCH_Exec>:
 800e414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e416:	4c29      	ldr	r4, [pc, #164]	; (800e4bc <GUI_TOUCH_Exec+0xa8>)
 800e418:	4d29      	ldr	r5, [pc, #164]	; (800e4c0 <GUI_TOUCH_Exec+0xac>)
 800e41a:	7823      	ldrb	r3, [r4, #0]
 800e41c:	b087      	sub	sp, #28
 800e41e:	4626      	mov	r6, r4
 800e420:	b943      	cbnz	r3, 800e434 <GUI_TOUCH_Exec+0x20>
 800e422:	f7f2 fd61 	bl	8000ee8 <GUI_TOUCH_X_MeasureY>
 800e426:	6028      	str	r0, [r5, #0]
 800e428:	f7f2 fd50 	bl	8000ecc <GUI_TOUCH_X_ActivateY>
 800e42c:	7823      	ldrb	r3, [r4, #0]
 800e42e:	3301      	adds	r3, #1
 800e430:	7023      	strb	r3, [r4, #0]
 800e432:	e040      	b.n	800e4b6 <GUI_TOUCH_Exec+0xa2>
 800e434:	f7f2 fd51 	bl	8000eda <GUI_TOUCH_X_MeasureX>
 800e438:	4c22      	ldr	r4, [pc, #136]	; (800e4c4 <GUI_TOUCH_Exec+0xb0>)
 800e43a:	6020      	str	r0, [r4, #0]
 800e43c:	f7f2 fd3f 	bl	8000ebe <GUI_TOUCH_X_ActivateX>
 800e440:	6823      	ldr	r3, [r4, #0]
 800e442:	9301      	str	r3, [sp, #4]
 800e444:	682b      	ldr	r3, [r5, #0]
 800e446:	9302      	str	r3, [sp, #8]
 800e448:	f005 fca4 	bl	8013d94 <GUI_TOUCH_GetLayer>
 800e44c:	a902      	add	r1, sp, #8
 800e44e:	f88d 0015 	strb.w	r0, [sp, #21]
 800e452:	a801      	add	r0, sp, #4
 800e454:	f000 f88a 	bl	800e56c <GUI_TOUCH_CalibratePoint>
 800e458:	4c1b      	ldr	r4, [pc, #108]	; (800e4c8 <GUI_TOUCH_Exec+0xb4>)
 800e45a:	b148      	cbz	r0, 800e470 <GUI_TOUCH_Exec+0x5c>
 800e45c:	7823      	ldrb	r3, [r4, #0]
 800e45e:	b343      	cbz	r3, 800e4b2 <GUI_TOUCH_Exec+0x9e>
 800e460:	4b1a      	ldr	r3, [pc, #104]	; (800e4cc <GUI_TOUCH_Exec+0xb8>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	9303      	str	r3, [sp, #12]
 800e466:	4b1a      	ldr	r3, [pc, #104]	; (800e4d0 <GUI_TOUCH_Exec+0xbc>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	9304      	str	r3, [sp, #16]
 800e46c:	2500      	movs	r5, #0
 800e46e:	e01a      	b.n	800e4a6 <GUI_TOUCH_Exec+0x92>
 800e470:	4816      	ldr	r0, [pc, #88]	; (800e4cc <GUI_TOUCH_Exec+0xb8>)
 800e472:	4917      	ldr	r1, [pc, #92]	; (800e4d0 <GUI_TOUCH_Exec+0xbc>)
 800e474:	f894 c000 	ldrb.w	ip, [r4]
 800e478:	9a01      	ldr	r2, [sp, #4]
 800e47a:	6807      	ldr	r7, [r0, #0]
 800e47c:	9b02      	ldr	r3, [sp, #8]
 800e47e:	680d      	ldr	r5, [r1, #0]
 800e480:	f1bc 0f00 	cmp.w	ip, #0
 800e484:	d00a      	beq.n	800e49c <GUI_TOUCH_Exec+0x88>
 800e486:	1bd7      	subs	r7, r2, r7
 800e488:	1b5d      	subs	r5, r3, r5
 800e48a:	2f00      	cmp	r7, #0
 800e48c:	bfb8      	it	lt
 800e48e:	427f      	neglt	r7, r7
 800e490:	2d00      	cmp	r5, #0
 800e492:	bfb8      	it	lt
 800e494:	426d      	neglt	r5, r5
 800e496:	443d      	add	r5, r7
 800e498:	2d02      	cmp	r5, #2
 800e49a:	dd0a      	ble.n	800e4b2 <GUI_TOUCH_Exec+0x9e>
 800e49c:	6002      	str	r2, [r0, #0]
 800e49e:	9203      	str	r2, [sp, #12]
 800e4a0:	600b      	str	r3, [r1, #0]
 800e4a2:	9304      	str	r3, [sp, #16]
 800e4a4:	2501      	movs	r5, #1
 800e4a6:	a803      	add	r0, sp, #12
 800e4a8:	f88d 5014 	strb.w	r5, [sp, #20]
 800e4ac:	f000 fae8 	bl	800ea80 <GUI_TOUCH_StoreStateEx>
 800e4b0:	7025      	strb	r5, [r4, #0]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	7033      	strb	r3, [r6, #0]
 800e4b6:	b007      	add	sp, #28
 800e4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	2001d0e9 	.word	0x2001d0e9
 800e4c0:	2001d100 	.word	0x2001d100
 800e4c4:	2001d0f4 	.word	0x2001d0f4
 800e4c8:	2001d0e8 	.word	0x2001d0e8
 800e4cc:	200000c4 	.word	0x200000c4
 800e4d0:	200000c0 	.word	0x200000c0

0800e4d4 <GUI_TOUCH_TransformPoint>:
 800e4d4:	b570      	push	{r4, r5, r6, lr}
 800e4d6:	4b22      	ldr	r3, [pc, #136]	; (800e560 <GUI_TOUCH_TransformPoint+0x8c>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	ed2d 8b02 	vpush	{d8}
 800e4de:	4606      	mov	r6, r0
 800e4e0:	460d      	mov	r5, r1
 800e4e2:	b3c3      	cbz	r3, 800e556 <GUI_TOUCH_TransformPoint+0x82>
 800e4e4:	edd0 7a00 	vldr	s15, [r0]
 800e4e8:	4c1e      	ldr	r4, [pc, #120]	; (800e564 <GUI_TOUCH_TransformPoint+0x90>)
 800e4ea:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800e4ee:	edd1 7a00 	vldr	s15, [r1]
 800e4f2:	ed94 7a01 	vldr	s14, [r4, #4]
 800e4f6:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800e4fa:	edd4 7a00 	vldr	s15, [r4]
 800e4fe:	ee28 7a87 	vmul.f32	s14, s17, s14
 800e502:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e506:	edd4 7a02 	vldr	s15, [r4, #8]
 800e50a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e50e:	ee17 0a90 	vmov	r0, s15
 800e512:	f7f2 f839 	bl	8000588 <__aeabi_f2d>
 800e516:	2200      	movs	r2, #0
 800e518:	4b13      	ldr	r3, [pc, #76]	; (800e568 <GUI_TOUCH_TransformPoint+0x94>)
 800e51a:	f7f1 fed7 	bl	80002cc <__adddf3>
 800e51e:	f7f2 fa9d 	bl	8000a5c <__aeabi_d2iz>
 800e522:	edd4 7a04 	vldr	s15, [r4, #16]
 800e526:	ed94 7a03 	vldr	s14, [r4, #12]
 800e52a:	6030      	str	r0, [r6, #0]
 800e52c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800e530:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e534:	ed94 7a05 	vldr	s14, [r4, #20]
 800e538:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e53c:	ee17 0a10 	vmov	r0, s14
 800e540:	f7f2 f822 	bl	8000588 <__aeabi_f2d>
 800e544:	2200      	movs	r2, #0
 800e546:	4b08      	ldr	r3, [pc, #32]	; (800e568 <GUI_TOUCH_TransformPoint+0x94>)
 800e548:	f7f1 fec0 	bl	80002cc <__adddf3>
 800e54c:	f7f2 fa86 	bl	8000a5c <__aeabi_d2iz>
 800e550:	6028      	str	r0, [r5, #0]
 800e552:	2000      	movs	r0, #0
 800e554:	e000      	b.n	800e558 <GUI_TOUCH_TransformPoint+0x84>
 800e556:	2001      	movs	r0, #1
 800e558:	ecbd 8b02 	vpop	{d8}
 800e55c:	bd70      	pop	{r4, r5, r6, pc}
 800e55e:	bf00      	nop
 800e560:	2001d114 	.word	0x2001d114
 800e564:	2001d118 	.word	0x2001d118
 800e568:	3fe00000 	.word	0x3fe00000

0800e56c <GUI_TOUCH_CalibratePoint>:
 800e56c:	4b18      	ldr	r3, [pc, #96]	; (800e5d0 <GUI_TOUCH_CalibratePoint+0x64>)
 800e56e:	6802      	ldr	r2, [r0, #0]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	429a      	cmp	r2, r3
 800e574:	b570      	push	{r4, r5, r6, lr}
 800e576:	4605      	mov	r5, r0
 800e578:	460c      	mov	r4, r1
 800e57a:	db27      	blt.n	800e5cc <GUI_TOUCH_CalibratePoint+0x60>
 800e57c:	4e15      	ldr	r6, [pc, #84]	; (800e5d4 <GUI_TOUCH_CalibratePoint+0x68>)
 800e57e:	680b      	ldr	r3, [r1, #0]
 800e580:	6836      	ldr	r6, [r6, #0]
 800e582:	42b3      	cmp	r3, r6
 800e584:	db22      	blt.n	800e5cc <GUI_TOUCH_CalibratePoint+0x60>
 800e586:	4e14      	ldr	r6, [pc, #80]	; (800e5d8 <GUI_TOUCH_CalibratePoint+0x6c>)
 800e588:	6836      	ldr	r6, [r6, #0]
 800e58a:	42b2      	cmp	r2, r6
 800e58c:	dc1e      	bgt.n	800e5cc <GUI_TOUCH_CalibratePoint+0x60>
 800e58e:	4a13      	ldr	r2, [pc, #76]	; (800e5dc <GUI_TOUCH_CalibratePoint+0x70>)
 800e590:	6812      	ldr	r2, [r2, #0]
 800e592:	4293      	cmp	r3, r2
 800e594:	dc1a      	bgt.n	800e5cc <GUI_TOUCH_CalibratePoint+0x60>
 800e596:	f7ff ff9d 	bl	800e4d4 <GUI_TOUCH_TransformPoint>
 800e59a:	b9c0      	cbnz	r0, 800e5ce <GUI_TOUCH_CalibratePoint+0x62>
 800e59c:	682a      	ldr	r2, [r5, #0]
 800e59e:	2a00      	cmp	r2, #0
 800e5a0:	da01      	bge.n	800e5a6 <GUI_TOUCH_CalibratePoint+0x3a>
 800e5a2:	6028      	str	r0, [r5, #0]
 800e5a4:	e006      	b.n	800e5b4 <GUI_TOUCH_CalibratePoint+0x48>
 800e5a6:	4b0e      	ldr	r3, [pc, #56]	; (800e5e0 <GUI_TOUCH_CalibratePoint+0x74>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	bfa4      	itt	ge
 800e5ae:	f103 33ff 	addge.w	r3, r3, #4294967295
 800e5b2:	602b      	strge	r3, [r5, #0]
 800e5b4:	6822      	ldr	r2, [r4, #0]
 800e5b6:	2a00      	cmp	r2, #0
 800e5b8:	da01      	bge.n	800e5be <GUI_TOUCH_CalibratePoint+0x52>
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	e004      	b.n	800e5c8 <GUI_TOUCH_CalibratePoint+0x5c>
 800e5be:	4b09      	ldr	r3, [pc, #36]	; (800e5e4 <GUI_TOUCH_CalibratePoint+0x78>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	db03      	blt.n	800e5ce <GUI_TOUCH_CalibratePoint+0x62>
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	6023      	str	r3, [r4, #0]
 800e5ca:	bd70      	pop	{r4, r5, r6, pc}
 800e5cc:	2001      	movs	r0, #1
 800e5ce:	bd70      	pop	{r4, r5, r6, pc}
 800e5d0:	2001d104 	.word	0x2001d104
 800e5d4:	2001d108 	.word	0x2001d108
 800e5d8:	2001d134 	.word	0x2001d134
 800e5dc:	2001d130 	.word	0x2001d130
 800e5e0:	2001d10c 	.word	0x2001d10c
 800e5e4:	2001d110 	.word	0x2001d110

0800e5e8 <GUI_TOUCH_CalcCoefficients>:
 800e5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5ec:	ed2d 8b02 	vpush	{d8}
 800e5f0:	f8df c3bc 	ldr.w	ip, [pc, #956]	; 800e9b0 <GUI_TOUCH_CalcCoefficients+0x3c8>
 800e5f4:	b08c      	sub	sp, #48	; 0x30
 800e5f6:	2400      	movs	r4, #0
 800e5f8:	2802      	cmp	r0, #2
 800e5fa:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800e5fc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e5fe:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 800e602:	f8cc 4000 	str.w	r4, [ip]
 800e606:	d135      	bne.n	800e674 <GUI_TOUCH_CalcCoefficients+0x8c>
 800e608:	c912      	ldmia	r1, {r1, r4}
 800e60a:	6818      	ldr	r0, [r3, #0]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	1a61      	subs	r1, r4, r1
 800e610:	1a1b      	subs	r3, r3, r0
 800e612:	ee00 1a10 	vmov	s0, r1
 800e616:	ee07 3a90 	vmov	s15, r3
 800e61a:	eeb8 7ac0 	vcvt.f32.s32	s14, s0
 800e61e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e622:	ee05 0a10 	vmov	s10, r0
 800e626:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800e62a:	6850      	ldr	r0, [r2, #4]
 800e62c:	6812      	ldr	r2, [r2, #0]
 800e62e:	4bdb      	ldr	r3, [pc, #876]	; (800e99c <GUI_TOUCH_CalcCoefficients+0x3b4>)
 800e630:	2100      	movs	r1, #0
 800e632:	1a82      	subs	r2, r0, r2
 800e634:	6059      	str	r1, [r3, #4]
 800e636:	60d9      	str	r1, [r3, #12]
 800e638:	6839      	ldr	r1, [r7, #0]
 800e63a:	eeb8 7ac5 	vcvt.f32.s32	s14, s10
 800e63e:	ee06 2a10 	vmov	s12, r2
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	edc3 7a00 	vstr	s15, [r3]
 800e648:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800e64c:	1a52      	subs	r2, r2, r1
 800e64e:	edc3 7a02 	vstr	s15, [r3, #8]
 800e652:	ee07 2a90 	vmov	s15, r2
 800e656:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 800e65a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e65e:	ee06 1a90 	vmov	s13, r1
 800e662:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800e666:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
 800e66a:	edc3 7a04 	vstr	s15, [r3, #16]
 800e66e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800e672:	e144      	b.n	800e8fe <GUI_TOUCH_CalcCoefficients+0x316>
 800e674:	f340 8148 	ble.w	800e908 <GUI_TOUCH_CalcCoefficients+0x320>
 800e678:	2803      	cmp	r0, #3
 800e67a:	d128      	bne.n	800e6ce <GUI_TOUCH_CalcCoefficients+0xe6>
 800e67c:	4620      	mov	r0, r4
 800e67e:	581d      	ldr	r5, [r3, r0]
 800e680:	ee00 5a10 	vmov	s0, r5
 800e684:	583d      	ldr	r5, [r7, r0]
 800e686:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800e68a:	ac00      	add	r4, sp, #0
 800e68c:	ee00 5a10 	vmov	s0, r5
 800e690:	580d      	ldr	r5, [r1, r0]
 800e692:	4404      	add	r4, r0
 800e694:	edc4 7a00 	vstr	s15, [r4]
 800e698:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800e69c:	ac03      	add	r4, sp, #12
 800e69e:	ee00 5a10 	vmov	s0, r5
 800e6a2:	4404      	add	r4, r0
 800e6a4:	5815      	ldr	r5, [r2, r0]
 800e6a6:	edc4 7a00 	vstr	s15, [r4]
 800e6aa:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800e6ae:	ac0c      	add	r4, sp, #48	; 0x30
 800e6b0:	4404      	add	r4, r0
 800e6b2:	ee00 5a10 	vmov	s0, r5
 800e6b6:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800e6ba:	ac0c      	add	r4, sp, #48	; 0x30
 800e6bc:	4404      	add	r4, r0
 800e6be:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800e6c2:	3004      	adds	r0, #4
 800e6c4:	280c      	cmp	r0, #12
 800e6c6:	ed44 7a03 	vstr	s15, [r4, #-12]
 800e6ca:	d1d8      	bne.n	800e67e <GUI_TOUCH_CalcCoefficients+0x96>
 800e6cc:	e09b      	b.n	800e806 <GUI_TOUCH_CalcCoefficients+0x21e>
 800e6ce:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800e6d2:	44a1      	add	r9, r4
 800e6d4:	f04f 0800 	mov.w	r8, #0
 800e6d8:	f849 8c0c 	str.w	r8, [r9, #-12]
 800e6dc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800e6e0:	44a1      	add	r9, r4
 800e6e2:	f849 8c18 	str.w	r8, [r9, #-24]
 800e6e6:	f10d 090c 	add.w	r9, sp, #12
 800e6ea:	44a1      	add	r9, r4
 800e6ec:	f8c9 8000 	str.w	r8, [r9]
 800e6f0:	f10d 0900 	add.w	r9, sp, #0
 800e6f4:	44a1      	add	r9, r4
 800e6f6:	3404      	adds	r4, #4
 800e6f8:	2c0c      	cmp	r4, #12
 800e6fa:	f8c9 8000 	str.w	r8, [r9]
 800e6fe:	d1e6      	bne.n	800e6ce <GUI_TOUCH_CalcCoefficients+0xe6>
 800e700:	ed9d 7a02 	vldr	s14, [sp, #8]
 800e704:	eddd 7a05 	vldr	s15, [sp, #20]
 800e708:	eddd 3a08 	vldr	s7, [sp, #32]
 800e70c:	ed9d 4a0b 	vldr	s8, [sp, #44]	; 0x2c
 800e710:	eddd 1a00 	vldr	s3, [sp]
 800e714:	eddd 5a01 	vldr	s11, [sp, #4]
 800e718:	ed9d 2a04 	vldr	s4, [sp, #16]
 800e71c:	eddd 2a06 	vldr	s5, [sp, #24]
 800e720:	ed9d 3a07 	vldr	s6, [sp, #28]
 800e724:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 800e728:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 800e72c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800e730:	2400      	movs	r4, #0
 800e732:	591d      	ldr	r5, [r3, r4]
 800e734:	ee00 5a10 	vmov	s0, r5
 800e738:	593d      	ldr	r5, [r7, r4]
 800e73a:	eeb8 6ac0 	vcvt.f32.s32	s12, s0
 800e73e:	ee00 5a10 	vmov	s0, r5
 800e742:	590d      	ldr	r5, [r1, r4]
 800e744:	eef8 6ac0 	vcvt.f32.s32	s13, s0
 800e748:	ee00 5a10 	vmov	s0, r5
 800e74c:	5915      	ldr	r5, [r2, r4]
 800e74e:	eef8 4ac0 	vcvt.f32.s32	s9, s0
 800e752:	ee00 5a10 	vmov	s0, r5
 800e756:	eeb8 5ac0 	vcvt.f32.s32	s10, s0
 800e75a:	eee6 2a24 	vfma.f32	s5, s12, s9
 800e75e:	3404      	adds	r4, #4
 800e760:	4544      	cmp	r4, r8
 800e762:	ee73 3aa4 	vadd.f32	s7, s7, s9
 800e766:	eea6 3aa4 	vfma.f32	s6, s13, s9
 800e76a:	eef0 4a60 	vmov.f32	s9, s1
 800e76e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e772:	eee6 1a06 	vfma.f32	s3, s12, s12
 800e776:	eee6 5a26 	vfma.f32	s11, s12, s13
 800e77a:	eee6 4a05 	vfma.f32	s9, s12, s10
 800e77e:	eeb0 6a41 	vmov.f32	s12, s2
 800e782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e786:	ee34 4a05 	vadd.f32	s8, s8, s10
 800e78a:	eea6 2aa6 	vfma.f32	s4, s13, s13
 800e78e:	eea6 6a85 	vfma.f32	s12, s13, s10
 800e792:	d004      	beq.n	800e79e <GUI_TOUCH_CalcCoefficients+0x1b6>
 800e794:	eef0 0a64 	vmov.f32	s1, s9
 800e798:	eeb0 1a46 	vmov.f32	s2, s12
 800e79c:	e7c9      	b.n	800e732 <GUI_TOUCH_CalcCoefficients+0x14a>
 800e79e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800e7a2:	ee05 0a10 	vmov	s10, r0
 800e7a6:	edcd 6a01 	vstr	s13, [sp, #4]
 800e7aa:	eef8 6ac5 	vcvt.f32.s32	s13, s10
 800e7ae:	eec1 1a87 	vdiv.f32	s3, s3, s14
 800e7b2:	eec5 5a87 	vdiv.f32	s11, s11, s14
 800e7b6:	ee82 2a27 	vdiv.f32	s4, s4, s15
 800e7ba:	eec2 2a87 	vdiv.f32	s5, s5, s14
 800e7be:	ee83 3a27 	vdiv.f32	s6, s6, s15
 800e7c2:	eec4 4a87 	vdiv.f32	s9, s9, s14
 800e7c6:	ee86 6a27 	vdiv.f32	s12, s12, s15
 800e7ca:	ee87 7a26 	vdiv.f32	s14, s14, s13
 800e7ce:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 800e7d2:	eec3 3aa6 	vdiv.f32	s7, s7, s13
 800e7d6:	eec4 6a26 	vdiv.f32	s13, s8, s13
 800e7da:	edcd 1a00 	vstr	s3, [sp]
 800e7de:	edcd 5a03 	vstr	s11, [sp, #12]
 800e7e2:	ed8d 2a04 	vstr	s4, [sp, #16]
 800e7e6:	edcd 2a06 	vstr	s5, [sp, #24]
 800e7ea:	ed8d 3a07 	vstr	s6, [sp, #28]
 800e7ee:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800e7f2:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 800e7f6:	ed8d 7a02 	vstr	s14, [sp, #8]
 800e7fa:	edcd 7a05 	vstr	s15, [sp, #20]
 800e7fe:	edcd 3a08 	vstr	s7, [sp, #32]
 800e802:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 800e806:	ed9d 7a02 	vldr	s14, [sp, #8]
 800e80a:	eddd 4a05 	vldr	s9, [sp, #20]
 800e80e:	ed9d 6a01 	vldr	s12, [sp, #4]
 800e812:	ed9d 3a03 	vldr	s6, [sp, #12]
 800e816:	eddd 5a00 	vldr	s11, [sp]
 800e81a:	eddd 2a04 	vldr	s5, [sp, #16]
 800e81e:	ee76 6a47 	vsub.f32	s13, s12, s14
 800e822:	ee73 1a64 	vsub.f32	s3, s6, s9
 800e826:	ee35 2ac7 	vsub.f32	s4, s11, s14
 800e82a:	ee32 1ae4 	vsub.f32	s2, s5, s9
 800e82e:	ee61 7ae6 	vnmul.f32	s15, s3, s13
 800e832:	eee2 7a01 	vfma.f32	s15, s4, s2
 800e836:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e83e:	d063      	beq.n	800e908 <GUI_TOUCH_CalcCoefficients+0x320>
 800e840:	ed9d 4a08 	vldr	s8, [sp, #32]
 800e844:	eddd 0a07 	vldr	s1, [sp, #28]
 800e848:	eddd 3a06 	vldr	s7, [sp, #24]
 800e84c:	4b53      	ldr	r3, [pc, #332]	; (800e99c <GUI_TOUCH_CalcCoefficients+0x3b4>)
 800e84e:	ee30 8ac4 	vsub.f32	s16, s1, s8
 800e852:	ee33 5ac4 	vsub.f32	s10, s7, s8
 800e856:	ee21 0ac8 	vnmul.f32	s0, s3, s16
 800e85a:	eea5 0a01 	vfma.f32	s0, s10, s2
 800e85e:	ee26 5ac5 	vnmul.f32	s10, s13, s10
 800e862:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800e866:	eea8 5a02 	vfma.f32	s10, s16, s4
 800e86a:	ed83 0a00 	vstr	s0, [r3]
 800e86e:	ee85 5a27 	vdiv.f32	s10, s10, s15
 800e872:	ed83 5a01 	vstr	s10, [r3, #4]
 800e876:	ee23 5ac7 	vnmul.f32	s10, s7, s14
 800e87a:	eea5 5a84 	vfma.f32	s10, s11, s8
 800e87e:	ee24 4a46 	vnmul.f32	s8, s8, s12
 800e882:	ee22 5a85 	vmul.f32	s10, s5, s10
 800e886:	eea7 4a20 	vfma.f32	s8, s14, s1
 800e88a:	eea3 5a04 	vfma.f32	s10, s6, s8
 800e88e:	ee20 4ae5 	vnmul.f32	s8, s1, s11
 800e892:	eea6 4a23 	vfma.f32	s8, s12, s7
 800e896:	eddd 3a0a 	vldr	s7, [sp, #40]	; 0x28
 800e89a:	eea4 5a84 	vfma.f32	s10, s9, s8
 800e89e:	ed9d 4a09 	vldr	s8, [sp, #36]	; 0x24
 800e8a2:	ee85 5a27 	vdiv.f32	s10, s10, s15
 800e8a6:	ed83 5a02 	vstr	s10, [r3, #8]
 800e8aa:	ed9d 5a0b 	vldr	s10, [sp, #44]	; 0x2c
 800e8ae:	ee34 0a45 	vsub.f32	s0, s8, s10
 800e8b2:	ee73 0ac5 	vsub.f32	s1, s7, s10
 800e8b6:	ee66 6ac0 	vnmul.f32	s13, s13, s0
 800e8ba:	ee61 1ae0 	vnmul.f32	s3, s3, s1
 800e8be:	eee0 6a82 	vfma.f32	s13, s1, s4
 800e8c2:	eee0 1a01 	vfma.f32	s3, s0, s2
 800e8c6:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 800e8ca:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 800e8ce:	edc3 6a04 	vstr	s13, [r3, #16]
 800e8d2:	ee64 6a47 	vnmul.f32	s13, s8, s14
 800e8d6:	edc3 1a03 	vstr	s3, [r3, #12]
 800e8da:	eee5 6a85 	vfma.f32	s13, s11, s10
 800e8de:	ee25 5a46 	vnmul.f32	s10, s10, s12
 800e8e2:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800e8e6:	eea7 5a23 	vfma.f32	s10, s14, s7
 800e8ea:	ee63 5ae5 	vnmul.f32	s11, s7, s11
 800e8ee:	eee3 6a05 	vfma.f32	s13, s6, s10
 800e8f2:	eee6 5a04 	vfma.f32	s11, s12, s8
 800e8f6:	eee4 6aa5 	vfma.f32	s13, s9, s11
 800e8fa:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 800e8fe:	edc3 7a05 	vstr	s15, [r3, #20]
 800e902:	2301      	movs	r3, #1
 800e904:	f8cc 3000 	str.w	r3, [ip]
 800e908:	f8dc 0000 	ldr.w	r0, [ip]
 800e90c:	2800      	cmp	r0, #0
 800e90e:	f000 80a7 	beq.w	800ea60 <GUI_TOUCH_CalcCoefficients+0x478>
 800e912:	4b23      	ldr	r3, [pc, #140]	; (800e9a0 <GUI_TOUCH_CalcCoefficients+0x3b8>)
 800e914:	eddf 7a23 	vldr	s15, [pc, #140]	; 800e9a4 <GUI_TOUCH_CalcCoefficients+0x3bc>
 800e918:	601e      	str	r6, [r3, #0]
 800e91a:	4b23      	ldr	r3, [pc, #140]	; (800e9a8 <GUI_TOUCH_CalcCoefficients+0x3c0>)
 800e91c:	f8c3 a000 	str.w	sl, [r3]
 800e920:	4b1e      	ldr	r3, [pc, #120]	; (800e99c <GUI_TOUCH_CalcCoefficients+0x3b4>)
 800e922:	ed93 7a00 	vldr	s14, [r3]
 800e926:	eeb4 7a67 	vcmp.f32	s14, s15
 800e92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e92e:	d012      	beq.n	800e956 <GUI_TOUCH_CalcCoefficients+0x36e>
 800e930:	edd3 6a01 	vldr	s13, [r3, #4]
 800e934:	eee6 7ae7 	vfms.f32	s15, s13, s15
 800e938:	edd3 6a02 	vldr	s13, [r3, #8]
 800e93c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e940:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e944:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e948:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800e94c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e950:	ee17 1a90 	vmov	r1, s15
 800e954:	e001      	b.n	800e95a <GUI_TOUCH_CalcCoefficients+0x372>
 800e956:	f04f 31ff 	mov.w	r1, #4294967295
 800e95a:	edd3 7a04 	vldr	s15, [r3, #16]
 800e95e:	eddf 6a11 	vldr	s13, [pc, #68]	; 800e9a4 <GUI_TOUCH_CalcCoefficients+0x3bc>
 800e962:	4c12      	ldr	r4, [pc, #72]	; (800e9ac <GUI_TOUCH_CalcCoefficients+0x3c4>)
 800e964:	4a0d      	ldr	r2, [pc, #52]	; (800e99c <GUI_TOUCH_CalcCoefficients+0x3b4>)
 800e966:	6021      	str	r1, [r4, #0]
 800e968:	eef4 7a66 	vcmp.f32	s15, s13
 800e96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e970:	4627      	mov	r7, r4
 800e972:	d01f      	beq.n	800e9b4 <GUI_TOUCH_CalcCoefficients+0x3cc>
 800e974:	ed92 6a03 	vldr	s12, [r2, #12]
 800e978:	eee6 6a66 	vfms.f32	s13, s12, s13
 800e97c:	ed92 6a05 	vldr	s12, [r2, #20]
 800e980:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800e984:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e988:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800e98c:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 800e990:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800e994:	ee16 2a90 	vmov	r2, s13
 800e998:	e00e      	b.n	800e9b8 <GUI_TOUCH_CalcCoefficients+0x3d0>
 800e99a:	bf00      	nop
 800e99c:	2001d118 	.word	0x2001d118
 800e9a0:	2001d10c 	.word	0x2001d10c
 800e9a4:	00000000 	.word	0x00000000
 800e9a8:	2001d110 	.word	0x2001d110
 800e9ac:	2001d104 	.word	0x2001d104
 800e9b0:	2001d114 	.word	0x2001d114
 800e9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e9b8:	4c2e      	ldr	r4, [pc, #184]	; (800ea74 <GUI_TOUCH_CalcCoefficients+0x48c>)
 800e9ba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e9be:	3e01      	subs	r6, #1
 800e9c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9c8:	ee05 6a90 	vmov	s11, r6
 800e9cc:	6022      	str	r2, [r4, #0]
 800e9ce:	ee06 aa10 	vmov	s12, sl
 800e9d2:	4626      	mov	r6, r4
 800e9d4:	d016      	beq.n	800ea04 <GUI_TOUCH_CalcCoefficients+0x41c>
 800e9d6:	ed93 5a01 	vldr	s10, [r3, #4]
 800e9da:	eef8 4ac6 	vcvt.f32.s32	s9, s12
 800e9de:	eef8 6ae5 	vcvt.f32.s32	s13, s11
 800e9e2:	eee4 6ac5 	vfms.f32	s13, s9, s10
 800e9e6:	ed93 5a02 	vldr	s10, [r3, #8]
 800e9ea:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800e9ee:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800e9f2:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800e9f6:	ee86 7a87 	vdiv.f32	s14, s13, s14
 800e9fa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800e9fe:	ee17 4a10 	vmov	r4, s14
 800ea02:	e001      	b.n	800ea08 <GUI_TOUCH_CalcCoefficients+0x420>
 800ea04:	f04f 34ff 	mov.w	r4, #4294967295
 800ea08:	4d1b      	ldr	r5, [pc, #108]	; (800ea78 <GUI_TOUCH_CalcCoefficients+0x490>)
 800ea0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ea0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea12:	602c      	str	r4, [r5, #0]
 800ea14:	46ac      	mov	ip, r5
 800ea16:	d016      	beq.n	800ea46 <GUI_TOUCH_CalcCoefficients+0x45e>
 800ea18:	edd3 6a03 	vldr	s13, [r3, #12]
 800ea1c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800ea20:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 800ea24:	eea5 7ae6 	vfms.f32	s14, s11, s13
 800ea28:	edd3 6a05 	vldr	s13, [r3, #20]
 800ea2c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ea30:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ea34:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ea38:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800ea3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea40:	ee17 3a90 	vmov	r3, s15
 800ea44:	e001      	b.n	800ea4a <GUI_TOUCH_CalcCoefficients+0x462>
 800ea46:	f04f 33ff 	mov.w	r3, #4294967295
 800ea4a:	42a1      	cmp	r1, r4
 800ea4c:	4d0b      	ldr	r5, [pc, #44]	; (800ea7c <GUI_TOUCH_CalcCoefficients+0x494>)
 800ea4e:	bfc4      	itt	gt
 800ea50:	603c      	strgt	r4, [r7, #0]
 800ea52:	f8cc 1000 	strgt.w	r1, [ip]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	602b      	str	r3, [r5, #0]
 800ea5a:	bfc4      	itt	gt
 800ea5c:	6033      	strgt	r3, [r6, #0]
 800ea5e:	602a      	strgt	r2, [r5, #0]
 800ea60:	f1d0 0001 	rsbs	r0, r0, #1
 800ea64:	bf38      	it	cc
 800ea66:	2000      	movcc	r0, #0
 800ea68:	b00c      	add	sp, #48	; 0x30
 800ea6a:	ecbd 8b02 	vpop	{d8}
 800ea6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea72:	bf00      	nop
 800ea74:	2001d108 	.word	0x2001d108
 800ea78:	2001d134 	.word	0x2001d134
 800ea7c:	2001d130 	.word	0x2001d130

0800ea80 <GUI_TOUCH_StoreStateEx>:
 800ea80:	b530      	push	{r4, r5, lr}
 800ea82:	4d0f      	ldr	r5, [pc, #60]	; (800eac0 <GUI_TOUCH_StoreStateEx+0x40>)
 800ea84:	b085      	sub	sp, #20
 800ea86:	4629      	mov	r1, r5
 800ea88:	220c      	movs	r2, #12
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	f007 fee6 	bl	801685c <memcmp>
 800ea90:	b1a0      	cbz	r0, 800eabc <GUI_TOUCH_StoreStateEx+0x3c>
 800ea92:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ea96:	4b0b      	ldr	r3, [pc, #44]	; (800eac4 <GUI_TOUCH_StoreStateEx+0x44>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ea9e:	b153      	cbz	r3, 800eab6 <GUI_TOUCH_StoreStateEx+0x36>
 800eaa0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800eaa4:	ad01      	add	r5, sp, #4
 800eaa6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800eaaa:	4628      	mov	r0, r5
 800eaac:	a902      	add	r1, sp, #8
 800eaae:	4798      	blx	r3
 800eab0:	b920      	cbnz	r0, 800eabc <GUI_TOUCH_StoreStateEx+0x3c>
 800eab2:	4628      	mov	r0, r5
 800eab4:	e000      	b.n	800eab8 <GUI_TOUCH_StoreStateEx+0x38>
 800eab6:	4620      	mov	r0, r4
 800eab8:	f000 f91a 	bl	800ecf0 <GUI_PID_StoreState>
 800eabc:	b005      	add	sp, #20
 800eabe:	bd30      	pop	{r4, r5, pc}
 800eac0:	2001d138 	.word	0x2001d138
 800eac4:	2001d144 	.word	0x2001d144

0800eac8 <GUI_SetTextMode>:
 800eac8:	4b03      	ldr	r3, [pc, #12]	; (800ead8 <GUI_SetTextMode+0x10>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800ead0:	8558      	strh	r0, [r3, #42]	; 0x2a
 800ead2:	4610      	mov	r0, r2
 800ead4:	4770      	bx	lr
 800ead6:	bf00      	nop
 800ead8:	200000d8 	.word	0x200000d8

0800eadc <GUI_SetFont>:
 800eadc:	4b03      	ldr	r3, [pc, #12]	; (800eaec <GUI_SetFont+0x10>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	69d9      	ldr	r1, [r3, #28]
 800eae2:	b100      	cbz	r0, 800eae6 <GUI_SetFont+0xa>
 800eae4:	61d8      	str	r0, [r3, #28]
 800eae6:	4608      	mov	r0, r1
 800eae8:	4770      	bx	lr
 800eaea:	bf00      	nop
 800eaec:	200000d8 	.word	0x200000d8

0800eaf0 <GUI_SetDrawMode>:
 800eaf0:	f7fe bbf2 	b.w	800d2d8 <LCD_SetDrawMode>

0800eaf4 <GL_SetDefault>:
 800eaf4:	b508      	push	{r3, lr}
 800eaf6:	2000      	movs	r0, #0
 800eaf8:	f000 f81c 	bl	800eb34 <GUI_SetBkColor>
 800eafc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800eb00:	f000 f81a 	bl	800eb38 <GUI_SetColor>
 800eb04:	2001      	movs	r0, #1
 800eb06:	f000 f8c1 	bl	800ec8c <GUI_SetPenSize>
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	f005 f948 	bl	8013da0 <GUI_SetTextAlign>
 800eb10:	2000      	movs	r0, #0
 800eb12:	f7ff ffd9 	bl	800eac8 <GUI_SetTextMode>
 800eb16:	2000      	movs	r0, #0
 800eb18:	f7ff ffea 	bl	800eaf0 <GUI_SetDrawMode>
 800eb1c:	4b04      	ldr	r3, [pc, #16]	; (800eb30 <GL_SetDefault+0x3c>)
 800eb1e:	6818      	ldr	r0, [r3, #0]
 800eb20:	f7ff ffdc 	bl	800eadc <GUI_SetFont>
 800eb24:	2000      	movs	r0, #0
 800eb26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800eb2a:	f005 b95d 	b.w	8013de8 <GUI_SetLineStyle>
 800eb2e:	bf00      	nop
 800eb30:	200000dc 	.word	0x200000dc

0800eb34 <GUI_SetBkColor>:
 800eb34:	f7fe bf18 	b.w	800d968 <LCD_SetBkColor>

0800eb38 <GUI_SetColor>:
 800eb38:	f7fe bf1e 	b.w	800d978 <LCD_SetColor>

0800eb3c <GUI__AlphaPreserveTrans>:
 800eb3c:	b510      	push	{r4, lr}
 800eb3e:	4b07      	ldr	r3, [pc, #28]	; (800eb5c <GUI__AlphaPreserveTrans+0x20>)
 800eb40:	781c      	ldrb	r4, [r3, #0]
 800eb42:	b120      	cbz	r0, 800eb4e <GUI__AlphaPreserveTrans+0x12>
 800eb44:	2201      	movs	r2, #1
 800eb46:	701a      	strb	r2, [r3, #0]
 800eb48:	f04f 30ff 	mov.w	r0, #4294967295
 800eb4c:	e002      	b.n	800eb54 <GUI__AlphaPreserveTrans+0x18>
 800eb4e:	7018      	strb	r0, [r3, #0]
 800eb50:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800eb54:	f004 fc98 	bl	8013488 <LCD_AA_SetAndMask>
 800eb58:	4620      	mov	r0, r4
 800eb5a:	bd10      	pop	{r4, pc}
 800eb5c:	2001d501 	.word	0x2001d501

0800eb60 <GUI_GetCursorLayer>:
 800eb60:	2801      	cmp	r0, #1
 800eb62:	bf9a      	itte	ls
 800eb64:	4b02      	ldrls	r3, [pc, #8]	; (800eb70 <GUI_GetCursorLayer+0x10>)
 800eb66:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800eb6a:	2000      	movhi	r0, #0
 800eb6c:	4770      	bx	lr
 800eb6e:	bf00      	nop
 800eb70:	2001d148 	.word	0x2001d148

0800eb74 <GUI_GetLayerPosEx>:
 800eb74:	b538      	push	{r3, r4, r5, lr}
 800eb76:	460d      	mov	r5, r1
 800eb78:	4614      	mov	r4, r2
 800eb7a:	f7fe fa93 	bl	800d0a4 <LCD_GetPosEx>
 800eb7e:	b110      	cbz	r0, 800eb86 <GUI_GetLayerPosEx+0x12>
 800eb80:	2300      	movs	r3, #0
 800eb82:	602b      	str	r3, [r5, #0]
 800eb84:	6023      	str	r3, [r4, #0]
 800eb86:	bd38      	pop	{r3, r4, r5, pc}

0800eb88 <GUI_SelectLayer>:
 800eb88:	b570      	push	{r4, r5, r6, lr}
 800eb8a:	4d08      	ldr	r5, [pc, #32]	; (800ebac <GUI_SelectLayer+0x24>)
 800eb8c:	682b      	ldr	r3, [r5, #0]
 800eb8e:	2801      	cmp	r0, #1
 800eb90:	4604      	mov	r4, r0
 800eb92:	7c5e      	ldrb	r6, [r3, #17]
 800eb94:	d808      	bhi.n	800eba8 <GUI_SelectLayer+0x20>
 800eb96:	f000 facd 	bl	800f134 <GUI_DEVICE__GetpDriver>
 800eb9a:	b128      	cbz	r0, 800eba8 <GUI_SelectLayer+0x20>
 800eb9c:	682b      	ldr	r3, [r5, #0]
 800eb9e:	745c      	strb	r4, [r3, #17]
 800eba0:	f000 f80e 	bl	800ebc0 <GUI_SelectLCD>
 800eba4:	4b02      	ldr	r3, [pc, #8]	; (800ebb0 <GUI_SelectLayer+0x28>)
 800eba6:	601c      	str	r4, [r3, #0]
 800eba8:	4630      	mov	r0, r6
 800ebaa:	bd70      	pop	{r4, r5, r6, pc}
 800ebac:	200000d8 	.word	0x200000d8
 800ebb0:	2001d4b4 	.word	0x2001d4b4

0800ebb4 <GUI_SetLayerPosEx>:
 800ebb4:	f7fe ba46 	b.w	800d044 <LCD_SetPosEx>

0800ebb8 <GUI_SetLayerSizeEx>:
 800ebb8:	f7fe ba16 	b.w	800cfe8 <LCD_SetSizeEx>

0800ebbc <GUI_SetLayerVisEx>:
 800ebbc:	f7fe ba2c 	b.w	800d018 <LCD_SetVisEx>

0800ebc0 <GUI_SelectLCD>:
 800ebc0:	b508      	push	{r3, lr}
 800ebc2:	f004 fa89 	bl	80130d8 <LCD_SelectLCD>
 800ebc6:	f7fe f9cd 	bl	800cf64 <LCD_UpdateColorIndices>
 800ebca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ebce:	f7fb bff7 	b.w	800abc0 <WM_Activate>
	...

0800ebd4 <GUI_SaveContext_W>:
 800ebd4:	b508      	push	{r3, lr}
 800ebd6:	4b03      	ldr	r3, [pc, #12]	; (800ebe4 <GUI_SaveContext_W+0x10>)
 800ebd8:	2270      	movs	r2, #112	; 0x70
 800ebda:	6819      	ldr	r1, [r3, #0]
 800ebdc:	f007 fe4c 	bl	8016878 <memcpy>
 800ebe0:	bd08      	pop	{r3, pc}
 800ebe2:	bf00      	nop
 800ebe4:	200000d8 	.word	0x200000d8

0800ebe8 <GUI_RestoreContext>:
 800ebe8:	b508      	push	{r3, lr}
 800ebea:	4b03      	ldr	r3, [pc, #12]	; (800ebf8 <GUI_RestoreContext+0x10>)
 800ebec:	4601      	mov	r1, r0
 800ebee:	2270      	movs	r2, #112	; 0x70
 800ebf0:	6818      	ldr	r0, [r3, #0]
 800ebf2:	f007 fe41 	bl	8016878 <memcpy>
 800ebf6:	bd08      	pop	{r3, pc}
 800ebf8:	200000d8 	.word	0x200000d8

0800ebfc <GUI_RectsIntersect>:
 800ebfc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ec00:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	dc14      	bgt.n	800ec32 <GUI_RectsIntersect+0x36>
 800ec08:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800ec0c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	dc0e      	bgt.n	800ec32 <GUI_RectsIntersect+0x36>
 800ec14:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ec18:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	dc08      	bgt.n	800ec32 <GUI_RectsIntersect+0x36>
 800ec20:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ec24:	f9b1 2000 	ldrsh.w	r2, [r1]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	bfcc      	ite	gt
 800ec2c:	2000      	movgt	r0, #0
 800ec2e:	2001      	movle	r0, #1
 800ec30:	4770      	bx	lr
 800ec32:	2000      	movs	r0, #0
 800ec34:	4770      	bx	lr

0800ec36 <GUI_ALLOC_Realloc>:
 800ec36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec38:	4604      	mov	r4, r0
 800ec3a:	4608      	mov	r0, r1
 800ec3c:	460e      	mov	r6, r1
 800ec3e:	f001 fae3 	bl	8010208 <GUI_ALLOC_AllocNoInit>
 800ec42:	4605      	mov	r5, r0
 800ec44:	b1f8      	cbz	r0, 800ec86 <GUI_ALLOC_Realloc+0x50>
 800ec46:	b1f4      	cbz	r4, 800ec86 <GUI_ALLOC_Realloc+0x50>
 800ec48:	4620      	mov	r0, r4
 800ec4a:	f001 f8b7 	bl	800fdbc <GUI_ALLOC_GetSize>
 800ec4e:	42b0      	cmp	r0, r6
 800ec50:	bfb4      	ite	lt
 800ec52:	4607      	movlt	r7, r0
 800ec54:	4637      	movge	r7, r6
 800ec56:	4628      	mov	r0, r5
 800ec58:	f001 f882 	bl	800fd60 <GUI_ALLOC_LockH>
 800ec5c:	9000      	str	r0, [sp, #0]
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f001 f87e 	bl	800fd60 <GUI_ALLOC_LockH>
 800ec64:	ae02      	add	r6, sp, #8
 800ec66:	4601      	mov	r1, r0
 800ec68:	463a      	mov	r2, r7
 800ec6a:	9001      	str	r0, [sp, #4]
 800ec6c:	f856 0d08 	ldr.w	r0, [r6, #-8]!
 800ec70:	f007 fe02 	bl	8016878 <memcpy>
 800ec74:	4668      	mov	r0, sp
 800ec76:	f001 f881 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800ec7a:	a801      	add	r0, sp, #4
 800ec7c:	f001 f87e 	bl	800fd7c <GUI_ALLOC_UnlockH>
 800ec80:	4620      	mov	r0, r4
 800ec82:	f001 f8a7 	bl	800fdd4 <GUI_ALLOC_Free>
 800ec86:	4628      	mov	r0, r5
 800ec88:	b003      	add	sp, #12
 800ec8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ec8c <GUI_SetPenSize>:
 800ec8c:	4b02      	ldr	r3, [pc, #8]	; (800ec98 <GUI_SetPenSize+0xc>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	7e1a      	ldrb	r2, [r3, #24]
 800ec92:	7618      	strb	r0, [r3, #24]
 800ec94:	4610      	mov	r0, r2
 800ec96:	4770      	bx	lr
 800ec98:	200000d8 	.word	0x200000d8

0800ec9c <GUI_PID_GetState>:
 800ec9c:	4a11      	ldr	r2, [pc, #68]	; (800ece4 <GUI_PID_GetState+0x48>)
 800ec9e:	4912      	ldr	r1, [pc, #72]	; (800ece8 <GUI_PID_GetState+0x4c>)
 800eca0:	6813      	ldr	r3, [r2, #0]
 800eca2:	6809      	ldr	r1, [r1, #0]
 800eca4:	428b      	cmp	r3, r1
 800eca6:	b570      	push	{r4, r5, r6, lr}
 800eca8:	4604      	mov	r4, r0
 800ecaa:	4616      	mov	r6, r2
 800ecac:	4d0f      	ldr	r5, [pc, #60]	; (800ecec <GUI_PID_GetState+0x50>)
 800ecae:	d109      	bne.n	800ecc4 <GUI_PID_GetState+0x28>
 800ecb0:	42ab      	cmp	r3, r5
 800ecb2:	bf06      	itte	eq
 800ecb4:	333c      	addeq	r3, #60	; 0x3c
 800ecb6:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 800ecba:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 800ecbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ecc2:	e00a      	b.n	800ecda <GUI_PID_GetState+0x3e>
 800ecc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ecc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800eccc:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	bf18      	it	ne
 800ecd4:	f103 050c 	addne.w	r5, r3, #12
 800ecd8:	6035      	str	r5, [r6, #0]
 800ecda:	7a20      	ldrb	r0, [r4, #8]
 800ecdc:	3000      	adds	r0, #0
 800ecde:	bf18      	it	ne
 800ece0:	2001      	movne	r0, #1
 800ece2:	bd70      	pop	{r4, r5, r6, pc}
 800ece4:	200000cc 	.word	0x200000cc
 800ece8:	200000c8 	.word	0x200000c8
 800ecec:	2001d154 	.word	0x2001d154

0800ecf0 <GUI_PID_StoreState>:
 800ecf0:	4a21      	ldr	r2, [pc, #132]	; (800ed78 <GUI_PID_StoreState+0x88>)
 800ecf2:	4922      	ldr	r1, [pc, #136]	; (800ed7c <GUI_PID_StoreState+0x8c>)
 800ecf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf8:	6011      	str	r1, [r2, #0]
 800ecfa:	4f21      	ldr	r7, [pc, #132]	; (800ed80 <GUI_PID_StoreState+0x90>)
 800ecfc:	4921      	ldr	r1, [pc, #132]	; (800ed84 <GUI_PID_StoreState+0x94>)
 800ecfe:	683a      	ldr	r2, [r7, #0]
 800ed00:	680c      	ldr	r4, [r1, #0]
 800ed02:	4603      	mov	r3, r0
 800ed04:	4820      	ldr	r0, [pc, #128]	; (800ed88 <GUI_PID_StoreState+0x98>)
 800ed06:	4294      	cmp	r4, r2
 800ed08:	468c      	mov	ip, r1
 800ed0a:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 800ed0e:	d017      	beq.n	800ed40 <GUI_PID_StoreState+0x50>
 800ed10:	4282      	cmp	r2, r0
 800ed12:	bf14      	ite	ne
 800ed14:	f1a2 010c 	subne.w	r1, r2, #12
 800ed18:	4631      	moveq	r1, r6
 800ed1a:	7a1d      	ldrb	r5, [r3, #8]
 800ed1c:	f891 8008 	ldrb.w	r8, [r1, #8]
 800ed20:	45a8      	cmp	r8, r5
 800ed22:	d10d      	bne.n	800ed40 <GUI_PID_StoreState+0x50>
 800ed24:	428c      	cmp	r4, r1
 800ed26:	d00b      	beq.n	800ed40 <GUI_PID_StoreState+0x50>
 800ed28:	4281      	cmp	r1, r0
 800ed2a:	bf14      	ite	ne
 800ed2c:	390c      	subne	r1, #12
 800ed2e:	4917      	ldreq	r1, [pc, #92]	; (800ed8c <GUI_PID_StoreState+0x9c>)
 800ed30:	7a09      	ldrb	r1, [r1, #8]
 800ed32:	42a9      	cmp	r1, r5
 800ed34:	d104      	bne.n	800ed40 <GUI_PID_StoreState+0x50>
 800ed36:	4282      	cmp	r2, r0
 800ed38:	bf14      	ite	ne
 800ed3a:	3a0c      	subne	r2, #12
 800ed3c:	4a13      	ldreq	r2, [pc, #76]	; (800ed8c <GUI_PID_StoreState+0x9c>)
 800ed3e:	603a      	str	r2, [r7, #0]
 800ed40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed44:	683d      	ldr	r5, [r7, #0]
 800ed46:	42b5      	cmp	r5, r6
 800ed48:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ed4c:	bf0c      	ite	eq
 800ed4e:	4d0e      	ldreq	r5, [pc, #56]	; (800ed88 <GUI_PID_StoreState+0x98>)
 800ed50:	350c      	addne	r5, #12
 800ed52:	42ac      	cmp	r4, r5
 800ed54:	603d      	str	r5, [r7, #0]
 800ed56:	d105      	bne.n	800ed64 <GUI_PID_StoreState+0x74>
 800ed58:	42b4      	cmp	r4, r6
 800ed5a:	bf14      	ite	ne
 800ed5c:	340c      	addne	r4, #12
 800ed5e:	4c0a      	ldreq	r4, [pc, #40]	; (800ed88 <GUI_PID_StoreState+0x98>)
 800ed60:	f8cc 4000 	str.w	r4, [ip]
 800ed64:	4a0a      	ldr	r2, [pc, #40]	; (800ed90 <GUI_PID_StoreState+0xa0>)
 800ed66:	6812      	ldr	r2, [r2, #0]
 800ed68:	b10a      	cbz	r2, 800ed6e <GUI_PID_StoreState+0x7e>
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	4790      	blx	r2
 800ed6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed72:	f7ff b927 	b.w	800dfc4 <GUI_SignalEvent>
 800ed76:	bf00      	nop
 800ed78:	2001d51c 	.word	0x2001d51c
 800ed7c:	080113c5 	.word	0x080113c5
 800ed80:	200000c8 	.word	0x200000c8
 800ed84:	200000cc 	.word	0x200000cc
 800ed88:	2001d154 	.word	0x2001d154
 800ed8c:	2001d190 	.word	0x2001d190
 800ed90:	2001d150 	.word	0x2001d150

0800ed94 <GUI_PID_IsEmpty>:
 800ed94:	4b03      	ldr	r3, [pc, #12]	; (800eda4 <GUI_PID_IsEmpty+0x10>)
 800ed96:	6818      	ldr	r0, [r3, #0]
 800ed98:	4b03      	ldr	r3, [pc, #12]	; (800eda8 <GUI_PID_IsEmpty+0x14>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	1ac3      	subs	r3, r0, r3
 800ed9e:	4258      	negs	r0, r3
 800eda0:	4158      	adcs	r0, r3
 800eda2:	4770      	bx	lr
 800eda4:	200000cc 	.word	0x200000cc
 800eda8:	200000c8 	.word	0x200000c8

0800edac <GUI_GetKey>:
 800edac:	4b02      	ldr	r3, [pc, #8]	; (800edb8 <GUI_GetKey+0xc>)
 800edae:	2200      	movs	r2, #0
 800edb0:	6818      	ldr	r0, [r3, #0]
 800edb2:	601a      	str	r2, [r3, #0]
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	2001d19c 	.word	0x2001d19c

0800edbc <GUI_StoreKey>:
 800edbc:	4b02      	ldr	r3, [pc, #8]	; (800edc8 <GUI_StoreKey+0xc>)
 800edbe:	681a      	ldr	r2, [r3, #0]
 800edc0:	b902      	cbnz	r2, 800edc4 <GUI_StoreKey+0x8>
 800edc2:	6018      	str	r0, [r3, #0]
 800edc4:	f7ff b8fe 	b.w	800dfc4 <GUI_SignalEvent>
 800edc8:	2001d19c 	.word	0x2001d19c

0800edcc <GUI_PollKeyMsg>:
 800edcc:	4a0a      	ldr	r2, [pc, #40]	; (800edf8 <GUI_PollKeyMsg+0x2c>)
 800edce:	490b      	ldr	r1, [pc, #44]	; (800edfc <GUI_PollKeyMsg+0x30>)
 800edd0:	6813      	ldr	r3, [r2, #0]
 800edd2:	6809      	ldr	r1, [r1, #0]
 800edd4:	428b      	cmp	r3, r1
 800edd6:	b510      	push	{r4, lr}
 800edd8:	d00b      	beq.n	800edf2 <GUI_PollKeyMsg+0x26>
 800edda:	4c09      	ldr	r4, [pc, #36]	; (800ee00 <GUI_PollKeyMsg+0x34>)
 800eddc:	42a3      	cmp	r3, r4
 800edde:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ede2:	bf14      	ite	ne
 800ede4:	3308      	addne	r3, #8
 800ede6:	3b50      	subeq	r3, #80	; 0x50
 800ede8:	6013      	str	r3, [r2, #0]
 800edea:	f002 fdbf 	bl	801196c <WM_OnKey>
 800edee:	2001      	movs	r0, #1
 800edf0:	bd10      	pop	{r4, pc}
 800edf2:	2000      	movs	r0, #0
 800edf4:	bd10      	pop	{r4, pc}
 800edf6:	bf00      	nop
 800edf8:	200000d4 	.word	0x200000d4
 800edfc:	200000d0 	.word	0x200000d0
 800ee00:	2001d1f0 	.word	0x2001d1f0

0800ee04 <GUI_MoveRect>:
 800ee04:	b168      	cbz	r0, 800ee22 <GUI_MoveRect+0x1e>
 800ee06:	8803      	ldrh	r3, [r0, #0]
 800ee08:	b289      	uxth	r1, r1
 800ee0a:	440b      	add	r3, r1
 800ee0c:	8003      	strh	r3, [r0, #0]
 800ee0e:	8883      	ldrh	r3, [r0, #4]
 800ee10:	4419      	add	r1, r3
 800ee12:	8843      	ldrh	r3, [r0, #2]
 800ee14:	8081      	strh	r1, [r0, #4]
 800ee16:	b292      	uxth	r2, r2
 800ee18:	4413      	add	r3, r2
 800ee1a:	8043      	strh	r3, [r0, #2]
 800ee1c:	88c3      	ldrh	r3, [r0, #6]
 800ee1e:	441a      	add	r2, r3
 800ee20:	80c2      	strh	r2, [r0, #6]
 800ee22:	4770      	bx	lr

0800ee24 <GUI_MergeRect>:
 800ee24:	b510      	push	{r4, lr}
 800ee26:	b338      	cbz	r0, 800ee78 <GUI_MergeRect+0x54>
 800ee28:	b309      	cbz	r1, 800ee6e <GUI_MergeRect+0x4a>
 800ee2a:	b30a      	cbz	r2, 800ee70 <GUI_MergeRect+0x4c>
 800ee2c:	f9b1 4000 	ldrsh.w	r4, [r1]
 800ee30:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ee34:	429c      	cmp	r4, r3
 800ee36:	bfb8      	it	lt
 800ee38:	4623      	movlt	r3, r4
 800ee3a:	8003      	strh	r3, [r0, #0]
 800ee3c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800ee40:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800ee44:	429c      	cmp	r4, r3
 800ee46:	bfb8      	it	lt
 800ee48:	4623      	movlt	r3, r4
 800ee4a:	8043      	strh	r3, [r0, #2]
 800ee4c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800ee50:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800ee54:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800ee58:	429c      	cmp	r4, r3
 800ee5a:	bfa8      	it	ge
 800ee5c:	4623      	movge	r3, r4
 800ee5e:	8083      	strh	r3, [r0, #4]
 800ee60:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800ee64:	4299      	cmp	r1, r3
 800ee66:	bfa8      	it	ge
 800ee68:	460b      	movge	r3, r1
 800ee6a:	80c3      	strh	r3, [r0, #6]
 800ee6c:	bd10      	pop	{r4, pc}
 800ee6e:	4611      	mov	r1, r2
 800ee70:	680b      	ldr	r3, [r1, #0]
 800ee72:	6003      	str	r3, [r0, #0]
 800ee74:	684b      	ldr	r3, [r1, #4]
 800ee76:	6043      	str	r3, [r0, #4]
 800ee78:	bd10      	pop	{r4, pc}
	...

0800ee7c <GUI_GotoXY>:
 800ee7c:	4b02      	ldr	r3, [pc, #8]	; (800ee88 <GUI_GotoXY+0xc>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	8458      	strh	r0, [r3, #34]	; 0x22
 800ee82:	8499      	strh	r1, [r3, #36]	; 0x24
 800ee84:	2000      	movs	r0, #0
 800ee86:	4770      	bx	lr
 800ee88:	200000d8 	.word	0x200000d8

0800ee8c <GUI_GetYDistOfFont>:
 800ee8c:	7e40      	ldrb	r0, [r0, #25]
 800ee8e:	4770      	bx	lr

0800ee90 <GUI_GetStringDistX>:
 800ee90:	b510      	push	{r4, lr}
 800ee92:	4604      	mov	r4, r0
 800ee94:	f004 fbca 	bl	801362c <GUI__GetNumChars>
 800ee98:	4601      	mov	r1, r0
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eea0:	f000 bdbe 	b.w	800fa20 <GUI__GetLineDistX>

0800eea4 <GUI_GetOrg>:
 800eea4:	4b04      	ldr	r3, [pc, #16]	; (800eeb8 <GUI_GetOrg+0x14>)
 800eea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eeaa:	6003      	str	r3, [r0, #0]
 800eeac:	4b03      	ldr	r3, [pc, #12]	; (800eebc <GUI_GetOrg+0x18>)
 800eeae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eeb2:	600b      	str	r3, [r1, #0]
 800eeb4:	4770      	bx	lr
 800eeb6:	bf00      	nop
 800eeb8:	2001d4f8 	.word	0x2001d4f8
 800eebc:	2001d4ec 	.word	0x2001d4ec

0800eec0 <GUI_FillRect>:
 800eec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eec2:	4c0f      	ldr	r4, [pc, #60]	; (800ef00 <GUI_FillRect+0x40>)
 800eec4:	6824      	ldr	r4, [r4, #0]
 800eec6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800eec8:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800eeca:	1947      	adds	r7, r0, r5
 800eecc:	190e      	adds	r6, r1, r4
 800eece:	4415      	add	r5, r2
 800eed0:	441c      	add	r4, r3
 800eed2:	4668      	mov	r0, sp
 800eed4:	f8ad 7000 	strh.w	r7, [sp]
 800eed8:	f8ad 5004 	strh.w	r5, [sp, #4]
 800eedc:	f8ad 6002 	strh.w	r6, [sp, #2]
 800eee0:	f8ad 4006 	strh.w	r4, [sp, #6]
 800eee4:	f7fb fc8a 	bl	800a7fc <WM__InitIVRSearch>
 800eee8:	b140      	cbz	r0, 800eefc <GUI_FillRect+0x3c>
 800eeea:	4638      	mov	r0, r7
 800eeec:	4631      	mov	r1, r6
 800eeee:	462a      	mov	r2, r5
 800eef0:	4623      	mov	r3, r4
 800eef2:	f7fe fa73 	bl	800d3dc <LCD_FillRect>
 800eef6:	f7fb fbbf 	bl	800a678 <WM__GetNextIVR>
 800eefa:	e7f5      	b.n	800eee8 <GUI_FillRect+0x28>
 800eefc:	b003      	add	sp, #12
 800eefe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef00:	200000d8 	.word	0x200000d8

0800ef04 <GUI_Exec1>:
 800ef04:	4b0a      	ldr	r3, [pc, #40]	; (800ef30 <GUI_Exec1+0x2c>)
 800ef06:	b510      	push	{r4, lr}
 800ef08:	681c      	ldr	r4, [r3, #0]
 800ef0a:	b11c      	cbz	r4, 800ef14 <GUI_Exec1+0x10>
 800ef0c:	47a0      	blx	r4
 800ef0e:	1c04      	adds	r4, r0, #0
 800ef10:	bf18      	it	ne
 800ef12:	2401      	movne	r4, #1
 800ef14:	f7fb fda6 	bl	800aa64 <WM_Exec>
 800ef18:	4b06      	ldr	r3, [pc, #24]	; (800ef34 <GUI_Exec1+0x30>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	bf18      	it	ne
 800ef20:	2401      	movne	r4, #1
 800ef22:	b11b      	cbz	r3, 800ef2c <GUI_Exec1+0x28>
 800ef24:	4798      	blx	r3
 800ef26:	2800      	cmp	r0, #0
 800ef28:	bf18      	it	ne
 800ef2a:	2401      	movne	r4, #1
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	bd10      	pop	{r4, pc}
 800ef30:	2001d4f4 	.word	0x2001d4f4
 800ef34:	2001d50c 	.word	0x2001d50c

0800ef38 <GUI_Exec>:
 800ef38:	b510      	push	{r4, lr}
 800ef3a:	2400      	movs	r4, #0
 800ef3c:	f7ff ffe2 	bl	800ef04 <GUI_Exec1>
 800ef40:	b108      	cbz	r0, 800ef46 <GUI_Exec+0xe>
 800ef42:	2401      	movs	r4, #1
 800ef44:	e7fa      	b.n	800ef3c <GUI_Exec+0x4>
 800ef46:	4620      	mov	r0, r4
 800ef48:	bd10      	pop	{r4, pc}
	...

0800ef4c <GUI_DrawVLine>:
 800ef4c:	4b0f      	ldr	r3, [pc, #60]	; (800ef8c <GUI_DrawVLine+0x40>)
 800ef4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800ef54:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 800ef56:	4406      	add	r6, r0
 800ef58:	190d      	adds	r5, r1, r4
 800ef5a:	b2b3      	uxth	r3, r6
 800ef5c:	4414      	add	r4, r2
 800ef5e:	4668      	mov	r0, sp
 800ef60:	f8ad 3000 	strh.w	r3, [sp]
 800ef64:	f8ad 3004 	strh.w	r3, [sp, #4]
 800ef68:	f8ad 5002 	strh.w	r5, [sp, #2]
 800ef6c:	f8ad 4006 	strh.w	r4, [sp, #6]
 800ef70:	f7fb fc44 	bl	800a7fc <WM__InitIVRSearch>
 800ef74:	b138      	cbz	r0, 800ef86 <GUI_DrawVLine+0x3a>
 800ef76:	4630      	mov	r0, r6
 800ef78:	4629      	mov	r1, r5
 800ef7a:	4622      	mov	r2, r4
 800ef7c:	f7fe fa08 	bl	800d390 <LCD_DrawVLine>
 800ef80:	f7fb fb7a 	bl	800a678 <WM__GetNextIVR>
 800ef84:	e7f6      	b.n	800ef74 <GUI_DrawVLine+0x28>
 800ef86:	b002      	add	sp, #8
 800ef88:	bd70      	pop	{r4, r5, r6, pc}
 800ef8a:	bf00      	nop
 800ef8c:	200000d8 	.word	0x200000d8

0800ef90 <GUI_DrawHLine>:
 800ef90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef92:	4f10      	ldr	r7, [pc, #64]	; (800efd4 <GUI_DrawHLine+0x44>)
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800ef98:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ef9a:	4405      	add	r5, r0
 800ef9c:	190e      	adds	r6, r1, r4
 800ef9e:	b2ab      	uxth	r3, r5
 800efa0:	4414      	add	r4, r2
 800efa2:	4668      	mov	r0, sp
 800efa4:	f8ad 6000 	strh.w	r6, [sp]
 800efa8:	f8ad 4004 	strh.w	r4, [sp, #4]
 800efac:	f8ad 3002 	strh.w	r3, [sp, #2]
 800efb0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800efb4:	f7fb fc22 	bl	800a7fc <WM__InitIVRSearch>
 800efb8:	b148      	cbz	r0, 800efce <GUI_DrawHLine+0x3e>
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efbe:	4630      	mov	r0, r6
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	4629      	mov	r1, r5
 800efc4:	4622      	mov	r2, r4
 800efc6:	4798      	blx	r3
 800efc8:	f7fb fb56 	bl	800a678 <WM__GetNextIVR>
 800efcc:	e7f4      	b.n	800efb8 <GUI_DrawHLine+0x28>
 800efce:	b003      	add	sp, #12
 800efd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efd2:	bf00      	nop
 800efd4:	200000d8 	.word	0x200000d8

0800efd8 <GUI_WrapGetNumLines>:
 800efd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efda:	4605      	mov	r5, r0
 800efdc:	460e      	mov	r6, r1
 800efde:	4617      	mov	r7, r2
 800efe0:	2400      	movs	r4, #0
 800efe2:	4628      	mov	r0, r5
 800efe4:	4631      	mov	r1, r6
 800efe6:	463a      	mov	r2, r7
 800efe8:	f004 fb16 	bl	8013618 <GUI__WrapGetNumBytesToNextLine>
 800efec:	b110      	cbz	r0, 800eff4 <GUI_WrapGetNumLines+0x1c>
 800efee:	4405      	add	r5, r0
 800eff0:	3401      	adds	r4, #1
 800eff2:	e7f6      	b.n	800efe2 <GUI_WrapGetNumLines+0xa>
 800eff4:	4620      	mov	r0, r4
 800eff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eff8 <GUI_DispStringInRectWrap>:
 800eff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800effc:	b089      	sub	sp, #36	; 0x24
 800effe:	460c      	mov	r4, r1
 800f000:	9202      	str	r2, [sp, #8]
 800f002:	9303      	str	r3, [sp, #12]
 800f004:	4605      	mov	r5, r0
 800f006:	2800      	cmp	r0, #0
 800f008:	f000 8091 	beq.w	800f12e <GUI_DispStringInRectWrap+0x136>
 800f00c:	f8b1 a000 	ldrh.w	sl, [r1]
 800f010:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 800f014:	884e      	ldrh	r6, [r1, #2]
 800f016:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 800f01a:	fa0f f289 	sxth.w	r2, r9
 800f01e:	fa0f f38a 	sxth.w	r3, sl
 800f022:	1ad3      	subs	r3, r2, r3
 800f024:	3301      	adds	r3, #1
 800f026:	9301      	str	r3, [sp, #4]
 800f028:	f000 fd7e 	bl	800fb28 <GUI_GetFontDistY>
 800f02c:	9902      	ldr	r1, [sp, #8]
 800f02e:	f011 070c 	ands.w	r7, r1, #12
 800f032:	4680      	mov	r8, r0
 800f034:	d01b      	beq.n	800f06e <GUI_DispStringInRectWrap+0x76>
 800f036:	4628      	mov	r0, r5
 800f038:	9901      	ldr	r1, [sp, #4]
 800f03a:	9a03      	ldr	r2, [sp, #12]
 800f03c:	f7ff ffcc 	bl	800efd8 <GUI_WrapGetNumLines>
 800f040:	2f08      	cmp	r7, #8
 800f042:	d003      	beq.n	800f04c <GUI_DispStringInRectWrap+0x54>
 800f044:	2f0c      	cmp	r7, #12
 800f046:	d006      	beq.n	800f056 <GUI_DispStringInRectWrap+0x5e>
 800f048:	2f04      	cmp	r7, #4
 800f04a:	d110      	bne.n	800f06e <GUI_DispStringInRectWrap+0x76>
 800f04c:	f10b 0601 	add.w	r6, fp, #1
 800f050:	fb00 6618 	mls	r6, r0, r8, r6
 800f054:	e00a      	b.n	800f06c <GUI_DispStringInRectWrap+0x74>
 800f056:	b232      	sxth	r2, r6
 800f058:	fa0f f38b 	sxth.w	r3, fp
 800f05c:	1a9b      	subs	r3, r3, r2
 800f05e:	3301      	adds	r3, #1
 800f060:	fb08 3010 	mls	r0, r8, r0, r3
 800f064:	2302      	movs	r3, #2
 800f066:	fb90 f0f3 	sdiv	r0, r0, r3
 800f06a:	4406      	add	r6, r0
 800f06c:	b2b6      	uxth	r6, r6
 800f06e:	4620      	mov	r0, r4
 800f070:	f002 fbfc 	bl	801186c <WM_SetUserClipRect>
 800f074:	4607      	mov	r7, r0
 800f076:	b178      	cbz	r0, 800f098 <GUI_DispStringInRectWrap+0xa0>
 800f078:	a804      	add	r0, sp, #16
 800f07a:	4621      	mov	r1, r4
 800f07c:	463a      	mov	r2, r7
 800f07e:	f8ad a010 	strh.w	sl, [sp, #16]
 800f082:	f8ad 6012 	strh.w	r6, [sp, #18]
 800f086:	f8ad 9014 	strh.w	r9, [sp, #20]
 800f08a:	f8ad b016 	strh.w	fp, [sp, #22]
 800f08e:	f7fe fda1 	bl	800dbd4 <GUI__IntersectRects>
 800f092:	a804      	add	r0, sp, #16
 800f094:	f002 fbea 	bl	801186c <WM_SetUserClipRect>
 800f098:	9901      	ldr	r1, [sp, #4]
 800f09a:	9a03      	ldr	r2, [sp, #12]
 800f09c:	4628      	mov	r0, r5
 800f09e:	f004 fa89 	bl	80135b4 <GUI__WrapGetNumCharsDisp>
 800f0a2:	eb06 0b08 	add.w	fp, r6, r8
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	fa1f fb8b 	uxth.w	fp, fp
 800f0ac:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f0b0:	4611      	mov	r1, r2
 800f0b2:	4628      	mov	r0, r5
 800f0b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f0b8:	9200      	str	r2, [sp, #0]
 800f0ba:	f8ad a018 	strh.w	sl, [sp, #24]
 800f0be:	f8ad 601a 	strh.w	r6, [sp, #26]
 800f0c2:	f8ad 901c 	strh.w	r9, [sp, #28]
 800f0c6:	f000 fcab 	bl	800fa20 <GUI__GetLineDistX>
 800f0ca:	9902      	ldr	r1, [sp, #8]
 800f0cc:	9a00      	ldr	r2, [sp, #0]
 800f0ce:	f001 0303 	and.w	r3, r1, #3
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d013      	beq.n	800f0fe <GUI_DispStringInRectWrap+0x106>
 800f0d6:	2b02      	cmp	r3, #2
 800f0d8:	d004      	beq.n	800f0e4 <GUI_DispStringInRectWrap+0xec>
 800f0da:	b9ab      	cbnz	r3, 800f108 <GUI_DispStringInRectWrap+0x110>
 800f0dc:	8823      	ldrh	r3, [r4, #0]
 800f0de:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f0e2:	e011      	b.n	800f108 <GUI_DispStringInRectWrap+0x110>
 800f0e4:	8821      	ldrh	r1, [r4, #0]
 800f0e6:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 800f0ea:	b20e      	sxth	r6, r1
 800f0ec:	ebc6 060e 	rsb	r6, r6, lr
 800f0f0:	1a30      	subs	r0, r6, r0
 800f0f2:	fb90 f3f3 	sdiv	r3, r0, r3
 800f0f6:	4419      	add	r1, r3
 800f0f8:	f8ad 1018 	strh.w	r1, [sp, #24]
 800f0fc:	e004      	b.n	800f108 <GUI_DispStringInRectWrap+0x110>
 800f0fe:	88a3      	ldrh	r3, [r4, #4]
 800f100:	3301      	adds	r3, #1
 800f102:	1a18      	subs	r0, r3, r0
 800f104:	f8ad 0018 	strh.w	r0, [sp, #24]
 800f108:	4628      	mov	r0, r5
 800f10a:	4611      	mov	r1, r2
 800f10c:	aa06      	add	r2, sp, #24
 800f10e:	f000 fcb7 	bl	800fa80 <GUI__DispLine>
 800f112:	4628      	mov	r0, r5
 800f114:	9901      	ldr	r1, [sp, #4]
 800f116:	9a03      	ldr	r2, [sp, #12]
 800f118:	f004 fa7e 	bl	8013618 <GUI__WrapGetNumBytesToNextLine>
 800f11c:	4405      	add	r5, r0
 800f11e:	fa1f f68b 	uxth.w	r6, fp
 800f122:	782b      	ldrb	r3, [r5, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d1b7      	bne.n	800f098 <GUI_DispStringInRectWrap+0xa0>
 800f128:	4638      	mov	r0, r7
 800f12a:	f002 fb9f 	bl	801186c <WM_SetUserClipRect>
 800f12e:	b009      	add	sp, #36	; 0x24
 800f130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f134 <GUI_DEVICE__GetpDriver>:
 800f134:	2801      	cmp	r0, #1
 800f136:	dc09      	bgt.n	800f14c <GUI_DEVICE__GetpDriver+0x18>
 800f138:	4b05      	ldr	r3, [pc, #20]	; (800f150 <GUI_DEVICE__GetpDriver+0x1c>)
 800f13a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f13e:	b120      	cbz	r0, 800f14a <GUI_DEVICE__GetpDriver+0x16>
 800f140:	68c3      	ldr	r3, [r0, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	b11b      	cbz	r3, 800f14e <GUI_DEVICE__GetpDriver+0x1a>
 800f146:	6800      	ldr	r0, [r0, #0]
 800f148:	e7f9      	b.n	800f13e <GUI_DEVICE__GetpDriver+0xa>
 800f14a:	4770      	bx	lr
 800f14c:	2000      	movs	r0, #0
 800f14e:	4770      	bx	lr
 800f150:	2001d510 	.word	0x2001d510

0800f154 <GUI_DEVICE_Delete>:
 800f154:	f000 bdf0 	b.w	800fd38 <GUI_ALLOC_FreeFixedBlock>

0800f158 <GUI_DEVICE_Create>:
 800f158:	2b01      	cmp	r3, #1
 800f15a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f15c:	4606      	mov	r6, r0
 800f15e:	460d      	mov	r5, r1
 800f160:	4617      	mov	r7, r2
 800f162:	461c      	mov	r4, r3
 800f164:	dd01      	ble.n	800f16a <GUI_DEVICE_Create+0x12>
 800f166:	2000      	movs	r0, #0
 800f168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f16a:	201c      	movs	r0, #28
 800f16c:	f000 ff50 	bl	8010010 <GUI_ALLOC_GetFixedBlock>
 800f170:	2800      	cmp	r0, #0
 800f172:	d0f8      	beq.n	800f166 <GUI_DEVICE_Create+0xe>
 800f174:	b10d      	cbz	r5, 800f17a <GUI_DEVICE_Create+0x22>
 800f176:	6105      	str	r5, [r0, #16]
 800f178:	e009      	b.n	800f18e <GUI_DEVICE_Create+0x36>
 800f17a:	4b09      	ldr	r3, [pc, #36]	; (800f1a0 <GUI_DEVICE_Create+0x48>)
 800f17c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800f180:	b129      	cbz	r1, 800f18e <GUI_DEVICE_Create+0x36>
 800f182:	680b      	ldr	r3, [r1, #0]
 800f184:	b10b      	cbz	r3, 800f18a <GUI_DEVICE_Create+0x32>
 800f186:	4619      	mov	r1, r3
 800f188:	e7fb      	b.n	800f182 <GUI_DEVICE_Create+0x2a>
 800f18a:	690b      	ldr	r3, [r1, #16]
 800f18c:	6103      	str	r3, [r0, #16]
 800f18e:	2300      	movs	r3, #0
 800f190:	6083      	str	r3, [r0, #8]
 800f192:	6184      	str	r4, [r0, #24]
 800f194:	8287      	strh	r7, [r0, #20]
 800f196:	60c6      	str	r6, [r0, #12]
 800f198:	6003      	str	r3, [r0, #0]
 800f19a:	6043      	str	r3, [r0, #4]
 800f19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	2001d510 	.word	0x2001d510

0800f1a4 <GUI_DEVICE_Unlink>:
 800f1a4:	4b09      	ldr	r3, [pc, #36]	; (800f1cc <GUI_DEVICE_Unlink+0x28>)
 800f1a6:	6982      	ldr	r2, [r0, #24]
 800f1a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f1ac:	4281      	cmp	r1, r0
 800f1ae:	bf04      	itt	eq
 800f1b0:	6801      	ldreq	r1, [r0, #0]
 800f1b2:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 800f1b6:	6843      	ldr	r3, [r0, #4]
 800f1b8:	b10b      	cbz	r3, 800f1be <GUI_DEVICE_Unlink+0x1a>
 800f1ba:	6802      	ldr	r2, [r0, #0]
 800f1bc:	601a      	str	r2, [r3, #0]
 800f1be:	6802      	ldr	r2, [r0, #0]
 800f1c0:	b102      	cbz	r2, 800f1c4 <GUI_DEVICE_Unlink+0x20>
 800f1c2:	6053      	str	r3, [r2, #4]
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	6003      	str	r3, [r0, #0]
 800f1c8:	6043      	str	r3, [r0, #4]
 800f1ca:	4770      	bx	lr
 800f1cc:	2001d510 	.word	0x2001d510

0800f1d0 <GUI_DEVICE_Link>:
 800f1d0:	b570      	push	{r4, r5, r6, lr}
 800f1d2:	b338      	cbz	r0, 800f224 <GUI_DEVICE_Link+0x54>
 800f1d4:	6982      	ldr	r2, [r0, #24]
 800f1d6:	2a01      	cmp	r2, #1
 800f1d8:	dc24      	bgt.n	800f224 <GUI_DEVICE_Link+0x54>
 800f1da:	4919      	ldr	r1, [pc, #100]	; (800f240 <GUI_DEVICE_Link+0x70>)
 800f1dc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800f1e0:	460d      	mov	r5, r1
 800f1e2:	b913      	cbnz	r3, 800f1ea <GUI_DEVICE_Link+0x1a>
 800f1e4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800f1e8:	e01a      	b.n	800f220 <GUI_DEVICE_Link+0x50>
 800f1ea:	6859      	ldr	r1, [r3, #4]
 800f1ec:	b109      	cbz	r1, 800f1f2 <GUI_DEVICE_Link+0x22>
 800f1ee:	460b      	mov	r3, r1
 800f1f0:	e7fb      	b.n	800f1ea <GUI_DEVICE_Link+0x1a>
 800f1f2:	68c1      	ldr	r1, [r0, #12]
 800f1f4:	680e      	ldr	r6, [r1, #0]
 800f1f6:	68d9      	ldr	r1, [r3, #12]
 800f1f8:	680c      	ldr	r4, [r1, #0]
 800f1fa:	42b4      	cmp	r4, r6
 800f1fc:	dd03      	ble.n	800f206 <GUI_DEVICE_Link+0x36>
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1f8      	bne.n	800f1f6 <GUI_DEVICE_Link+0x26>
 800f204:	e00e      	b.n	800f224 <GUI_DEVICE_Link+0x54>
 800f206:	d102      	bne.n	800f20e <GUI_DEVICE_Link+0x3e>
 800f208:	8a81      	ldrh	r1, [r0, #20]
 800f20a:	2901      	cmp	r1, #1
 800f20c:	d011      	beq.n	800f232 <GUI_DEVICE_Link+0x62>
 800f20e:	6859      	ldr	r1, [r3, #4]
 800f210:	b199      	cbz	r1, 800f23a <GUI_DEVICE_Link+0x6a>
 800f212:	6008      	str	r0, [r1, #0]
 800f214:	6041      	str	r1, [r0, #4]
 800f216:	6058      	str	r0, [r3, #4]
 800f218:	4298      	cmp	r0, r3
 800f21a:	bf08      	it	eq
 800f21c:	2300      	moveq	r3, #0
 800f21e:	6003      	str	r3, [r0, #0]
 800f220:	2000      	movs	r0, #0
 800f222:	bd70      	pop	{r4, r5, r6, pc}
 800f224:	2001      	movs	r0, #1
 800f226:	bd70      	pop	{r4, r5, r6, pc}
 800f228:	68cb      	ldr	r3, [r1, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	42a3      	cmp	r3, r4
 800f22e:	460b      	mov	r3, r1
 800f230:	dbed      	blt.n	800f20e <GUI_DEVICE_Link+0x3e>
 800f232:	6819      	ldr	r1, [r3, #0]
 800f234:	2900      	cmp	r1, #0
 800f236:	d1f7      	bne.n	800f228 <GUI_DEVICE_Link+0x58>
 800f238:	e7e9      	b.n	800f20e <GUI_DEVICE_Link+0x3e>
 800f23a:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 800f23e:	e7ea      	b.n	800f216 <GUI_DEVICE_Link+0x46>
 800f240:	2001d510 	.word	0x2001d510

0800f244 <GUI_DEVICE_CreateAndLink>:
 800f244:	b538      	push	{r3, r4, r5, lr}
 800f246:	461d      	mov	r5, r3
 800f248:	f7ff ff86 	bl	800f158 <GUI_DEVICE_Create>
 800f24c:	4604      	mov	r4, r0
 800f24e:	b148      	cbz	r0, 800f264 <GUI_DEVICE_CreateAndLink+0x20>
 800f250:	f7ff ffbe 	bl	800f1d0 <GUI_DEVICE_Link>
 800f254:	68e3      	ldr	r3, [r4, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	b923      	cbnz	r3, 800f264 <GUI_DEVICE_CreateAndLink+0x20>
 800f25a:	4b03      	ldr	r3, [pc, #12]	; (800f268 <GUI_DEVICE_CreateAndLink+0x24>)
 800f25c:	3516      	adds	r5, #22
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800f264:	4620      	mov	r0, r4
 800f266:	bd38      	pop	{r3, r4, r5, pc}
 800f268:	200000d8 	.word	0x200000d8

0800f26c <_OnExit>:
 800f26c:	4b03      	ldr	r3, [pc, #12]	; (800f27c <_OnExit+0x10>)
 800f26e:	4804      	ldr	r0, [pc, #16]	; (800f280 <_OnExit+0x14>)
 800f270:	2100      	movs	r1, #0
 800f272:	2228      	movs	r2, #40	; 0x28
 800f274:	6019      	str	r1, [r3, #0]
 800f276:	f7fe bbbe 	b.w	800d9f6 <GUI__memset>
 800f27a:	bf00      	nop
 800f27c:	2001d228 	.word	0x2001d228
 800f280:	2001d200 	.word	0x2001d200

0800f284 <_Show>:
 800f284:	b510      	push	{r4, lr}
 800f286:	4604      	mov	r4, r0
 800f288:	f7ff fc6a 	bl	800eb60 <GUI_GetCursorLayer>
 800f28c:	b120      	cbz	r0, 800f298 <_Show+0x14>
 800f28e:	2101      	movs	r1, #1
 800f290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f294:	f7ff bc92 	b.w	800ebbc <GUI_SetLayerVisEx>
 800f298:	4b06      	ldr	r3, [pc, #24]	; (800f2b4 <_Show+0x30>)
 800f29a:	2014      	movs	r0, #20
 800f29c:	fb00 3004 	mla	r0, r0, r4, r3
 800f2a0:	7943      	ldrb	r3, [r0, #5]
 800f2a2:	b133      	cbz	r3, 800f2b2 <_Show+0x2e>
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	7103      	strb	r3, [r0, #4]
 800f2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2ac:	6900      	ldr	r0, [r0, #16]
 800f2ae:	f006 baf1 	b.w	8015894 <GUI_SPRITE_Show>
 800f2b2:	bd10      	pop	{r4, pc}
 800f2b4:	2001d200 	.word	0x2001d200

0800f2b8 <GUI_CURSOR_SelectEx>:
 800f2b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f2bc:	4605      	mov	r5, r0
 800f2be:	4608      	mov	r0, r1
 800f2c0:	460c      	mov	r4, r1
 800f2c2:	f7ff fc4d 	bl	800eb60 <GUI_GetCursorLayer>
 800f2c6:	2314      	movs	r3, #20
 800f2c8:	4363      	muls	r3, r4
 800f2ca:	4e2a      	ldr	r6, [pc, #168]	; (800f374 <GUI_CURSOR_SelectEx+0xbc>)
 800f2cc:	f856 9003 	ldr.w	r9, [r6, r3]
 800f2d0:	4b29      	ldr	r3, [pc, #164]	; (800f378 <GUI_CURSOR_SelectEx+0xc0>)
 800f2d2:	681a      	ldr	r2, [r3, #0]
 800f2d4:	4607      	mov	r7, r0
 800f2d6:	b932      	cbnz	r2, 800f2e6 <GUI_CURSOR_SelectEx+0x2e>
 800f2d8:	2201      	movs	r2, #1
 800f2da:	4828      	ldr	r0, [pc, #160]	; (800f37c <GUI_CURSOR_SelectEx+0xc4>)
 800f2dc:	601a      	str	r2, [r3, #0]
 800f2de:	4b28      	ldr	r3, [pc, #160]	; (800f380 <GUI_CURSOR_SelectEx+0xc8>)
 800f2e0:	6003      	str	r3, [r0, #0]
 800f2e2:	f000 f929 	bl	800f538 <GUI__RegisterExit>
 800f2e6:	b1f7      	cbz	r7, 800f326 <GUI_CURSOR_SelectEx+0x6e>
 800f2e8:	4638      	mov	r0, r7
 800f2ea:	f7ff fc4d 	bl	800eb88 <GUI_SelectLayer>
 800f2ee:	4680      	mov	r8, r0
 800f2f0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800f2f4:	f7ff fc1e 	bl	800eb34 <GUI_SetBkColor>
 800f2f8:	f000 f90e 	bl	800f518 <GUI_Clear>
 800f2fc:	2100      	movs	r1, #0
 800f2fe:	6828      	ldr	r0, [r5, #0]
 800f300:	460a      	mov	r2, r1
 800f302:	f006 fceb 	bl	8015cdc <GUI_DrawBitmap>
 800f306:	682b      	ldr	r3, [r5, #0]
 800f308:	4638      	mov	r0, r7
 800f30a:	8819      	ldrh	r1, [r3, #0]
 800f30c:	885a      	ldrh	r2, [r3, #2]
 800f30e:	f7ff fc53 	bl	800ebb8 <GUI_SetLayerSizeEx>
 800f312:	2314      	movs	r3, #20
 800f314:	4363      	muls	r3, r4
 800f316:	18f2      	adds	r2, r6, r3
 800f318:	50f5      	str	r5, [r6, r3]
 800f31a:	2301      	movs	r3, #1
 800f31c:	7153      	strb	r3, [r2, #5]
 800f31e:	4640      	mov	r0, r8
 800f320:	f7ff fc32 	bl	800eb88 <GUI_SelectLayer>
 800f324:	e01f      	b.n	800f366 <GUI_CURSOR_SelectEx+0xae>
 800f326:	2314      	movs	r3, #20
 800f328:	4363      	muls	r3, r4
 800f32a:	eb06 0803 	add.w	r8, r6, r3
 800f32e:	50f5      	str	r5, [r6, r3]
 800f330:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800f334:	2301      	movs	r3, #1
 800f336:	f888 3005 	strb.w	r3, [r8, #5]
 800f33a:	b118      	cbz	r0, 800f344 <GUI_CURSOR_SelectEx+0x8c>
 800f33c:	f006 f804 	bl	8015348 <GUI_SPRITE_Delete>
 800f340:	f8c8 7010 	str.w	r7, [r8, #16]
 800f344:	b195      	cbz	r5, 800f36c <GUI_CURSOR_SelectEx+0xb4>
 800f346:	2314      	movs	r3, #20
 800f348:	fb03 6604 	mla	r6, r3, r4, r6
 800f34c:	686f      	ldr	r7, [r5, #4]
 800f34e:	68f3      	ldr	r3, [r6, #12]
 800f350:	68b1      	ldr	r1, [r6, #8]
 800f352:	68aa      	ldr	r2, [r5, #8]
 800f354:	2001      	movs	r0, #1
 800f356:	9000      	str	r0, [sp, #0]
 800f358:	1a9a      	subs	r2, r3, r2
 800f35a:	6828      	ldr	r0, [r5, #0]
 800f35c:	1bc9      	subs	r1, r1, r7
 800f35e:	4623      	mov	r3, r4
 800f360:	f005 ff92 	bl	8015288 <GUI_SPRITE__CreateEx>
 800f364:	6130      	str	r0, [r6, #16]
 800f366:	4620      	mov	r0, r4
 800f368:	f7ff ff8c 	bl	800f284 <_Show>
 800f36c:	4648      	mov	r0, r9
 800f36e:	b003      	add	sp, #12
 800f370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f374:	2001d200 	.word	0x2001d200
 800f378:	2001d228 	.word	0x2001d228
 800f37c:	2001d1f8 	.word	0x2001d1f8
 800f380:	0800f26d 	.word	0x0800f26d

0800f384 <GUI_CURSOR_GetStateEx>:
 800f384:	4b02      	ldr	r3, [pc, #8]	; (800f390 <GUI_CURSOR_GetStateEx+0xc>)
 800f386:	2214      	movs	r2, #20
 800f388:	fb02 3000 	mla	r0, r2, r0, r3
 800f38c:	7940      	ldrb	r0, [r0, #5]
 800f38e:	4770      	bx	lr
 800f390:	2001d200 	.word	0x2001d200

0800f394 <GUI_CURSOR_SetPositionEx>:
 800f394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f396:	4606      	mov	r6, r0
 800f398:	4610      	mov	r0, r2
 800f39a:	460d      	mov	r5, r1
 800f39c:	4614      	mov	r4, r2
 800f39e:	f7ff fbdf 	bl	800eb60 <GUI_GetCursorLayer>
 800f3a2:	4f15      	ldr	r7, [pc, #84]	; (800f3f8 <GUI_CURSOR_SetPositionEx+0x64>)
 800f3a4:	2314      	movs	r3, #20
 800f3a6:	b148      	cbz	r0, 800f3bc <GUI_CURSOR_SetPositionEx+0x28>
 800f3a8:	435c      	muls	r4, r3
 800f3aa:	593b      	ldr	r3, [r7, r4]
 800f3ac:	6859      	ldr	r1, [r3, #4]
 800f3ae:	689a      	ldr	r2, [r3, #8]
 800f3b0:	1a71      	subs	r1, r6, r1
 800f3b2:	1aaa      	subs	r2, r5, r2
 800f3b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f3b8:	f7ff bbfc 	b.w	800ebb4 <GUI_SetLayerPosEx>
 800f3bc:	fb03 7304 	mla	r3, r3, r4, r7
 800f3c0:	f103 0208 	add.w	r2, r3, #8
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	42b3      	cmp	r3, r6
 800f3c8:	d102      	bne.n	800f3d0 <GUI_CURSOR_SetPositionEx+0x3c>
 800f3ca:	6853      	ldr	r3, [r2, #4]
 800f3cc:	42ab      	cmp	r3, r5
 800f3ce:	d011      	beq.n	800f3f4 <GUI_CURSOR_SetPositionEx+0x60>
 800f3d0:	2314      	movs	r3, #20
 800f3d2:	4363      	muls	r3, r4
 800f3d4:	18fa      	adds	r2, r7, r3
 800f3d6:	6910      	ldr	r0, [r2, #16]
 800f3d8:	b138      	cbz	r0, 800f3ea <GUI_CURSOR_SetPositionEx+0x56>
 800f3da:	4a07      	ldr	r2, [pc, #28]	; (800f3f8 <GUI_CURSOR_SetPositionEx+0x64>)
 800f3dc:	58d3      	ldr	r3, [r2, r3]
 800f3de:	6859      	ldr	r1, [r3, #4]
 800f3e0:	689a      	ldr	r2, [r3, #8]
 800f3e2:	1a71      	subs	r1, r6, r1
 800f3e4:	1aaa      	subs	r2, r5, r2
 800f3e6:	f005 ffd1 	bl	801538c <GUI_SPRITE_SetPosition>
 800f3ea:	2314      	movs	r3, #20
 800f3ec:	fb03 7404 	mla	r4, r3, r4, r7
 800f3f0:	60a6      	str	r6, [r4, #8]
 800f3f2:	60e5      	str	r5, [r4, #12]
 800f3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	2001d200 	.word	0x2001d200

0800f3fc <_OnExit>:
 800f3fc:	b510      	push	{r4, lr}
 800f3fe:	4b07      	ldr	r3, [pc, #28]	; (800f41c <_OnExit+0x20>)
 800f400:	4807      	ldr	r0, [pc, #28]	; (800f420 <_OnExit+0x24>)
 800f402:	2400      	movs	r4, #0
 800f404:	4621      	mov	r1, r4
 800f406:	2270      	movs	r2, #112	; 0x70
 800f408:	601c      	str	r4, [r3, #0]
 800f40a:	f7fe faf4 	bl	800d9f6 <GUI__memset>
 800f40e:	4621      	mov	r1, r4
 800f410:	4804      	ldr	r0, [pc, #16]	; (800f424 <_OnExit+0x28>)
 800f412:	2208      	movs	r2, #8
 800f414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f418:	f7fe baed 	b.w	800d9f6 <GUI__memset>
 800f41c:	2001d2a8 	.word	0x2001d2a8
 800f420:	2001d230 	.word	0x2001d230
 800f424:	2001d510 	.word	0x2001d510

0800f428 <_InitContext>:
 800f428:	b538      	push	{r3, r4, r5, lr}
 800f42a:	4d19      	ldr	r5, [pc, #100]	; (800f490 <_InitContext+0x68>)
 800f42c:	682b      	ldr	r3, [r5, #0]
 800f42e:	1d1a      	adds	r2, r3, #4
 800f430:	63da      	str	r2, [r3, #60]	; 0x3c
 800f432:	f103 0208 	add.w	r2, r3, #8
 800f436:	639b      	str	r3, [r3, #56]	; 0x38
 800f438:	641b      	str	r3, [r3, #64]	; 0x40
 800f43a:	6142      	str	r2, [r0, #20]
 800f43c:	7c5a      	ldrb	r2, [r3, #17]
 800f43e:	4b15      	ldr	r3, [pc, #84]	; (800f494 <_InitContext+0x6c>)
 800f440:	4604      	mov	r4, r0
 800f442:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f446:	68c3      	ldr	r3, [r0, #12]
 800f448:	f104 0108 	add.w	r1, r4, #8
 800f44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f44e:	4798      	blx	r3
 800f450:	4b11      	ldr	r3, [pc, #68]	; (800f498 <_InitContext+0x70>)
 800f452:	6663      	str	r3, [r4, #100]	; 0x64
 800f454:	4b11      	ldr	r3, [pc, #68]	; (800f49c <_InitContext+0x74>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	61e3      	str	r3, [r4, #28]
 800f45a:	682b      	ldr	r3, [r5, #0]
 800f45c:	3308      	adds	r3, #8
 800f45e:	6163      	str	r3, [r4, #20]
 800f460:	2301      	movs	r3, #1
 800f462:	7623      	strb	r3, [r4, #24]
 800f464:	f7fa fa46 	bl	80098f4 <WM_GetDesktopWindow>
 800f468:	2303      	movs	r3, #3
 800f46a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800f46e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800f472:	6323      	str	r3, [r4, #48]	; 0x30
 800f474:	6363      	str	r3, [r4, #52]	; 0x34
 800f476:	64a0      	str	r0, [r4, #72]	; 0x48
 800f478:	2000      	movs	r0, #0
 800f47a:	f7fe fa75 	bl	800d968 <LCD_SetBkColor>
 800f47e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800f482:	f7fe fa79 	bl	800d978 <LCD_SetColor>
 800f486:	4b06      	ldr	r3, [pc, #24]	; (800f4a0 <_InitContext+0x78>)
 800f488:	4a06      	ldr	r2, [pc, #24]	; (800f4a4 <_InitContext+0x7c>)
 800f48a:	601a      	str	r2, [r3, #0]
 800f48c:	bd38      	pop	{r3, r4, r5, pc}
 800f48e:	bf00      	nop
 800f490:	200000d8 	.word	0x200000d8
 800f494:	2001d510 	.word	0x2001d510
 800f498:	0801a910 	.word	0x0801a910
 800f49c:	200000dc 	.word	0x200000dc
 800f4a0:	2001d508 	.word	0x2001d508
 800f4a4:	0801d6a4 	.word	0x0801d6a4

0800f4a8 <GUI_SetDefaultFont>:
 800f4a8:	4b01      	ldr	r3, [pc, #4]	; (800f4b0 <GUI_SetDefaultFont+0x8>)
 800f4aa:	6018      	str	r0, [r3, #0]
 800f4ac:	4770      	bx	lr
 800f4ae:	bf00      	nop
 800f4b0:	200000dc 	.word	0x200000dc

0800f4b4 <GUI_ClearRect>:
 800f4b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4b8:	4607      	mov	r7, r0
 800f4ba:	2004      	movs	r0, #4
 800f4bc:	469a      	mov	sl, r3
 800f4be:	460e      	mov	r6, r1
 800f4c0:	4691      	mov	r9, r2
 800f4c2:	f7fd ff09 	bl	800d2d8 <LCD_SetDrawMode>
 800f4c6:	4b13      	ldr	r3, [pc, #76]	; (800f514 <GUI_ClearRect+0x60>)
 800f4c8:	681c      	ldr	r4, [r3, #0]
 800f4ca:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800f4cc:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800f4ce:	442f      	add	r7, r5
 800f4d0:	4426      	add	r6, r4
 800f4d2:	4680      	mov	r8, r0
 800f4d4:	444d      	add	r5, r9
 800f4d6:	4454      	add	r4, sl
 800f4d8:	4668      	mov	r0, sp
 800f4da:	f8ad 7000 	strh.w	r7, [sp]
 800f4de:	f8ad 5004 	strh.w	r5, [sp, #4]
 800f4e2:	f8ad 6002 	strh.w	r6, [sp, #2]
 800f4e6:	f8ad 4006 	strh.w	r4, [sp, #6]
 800f4ea:	f7fb f987 	bl	800a7fc <WM__InitIVRSearch>
 800f4ee:	b928      	cbnz	r0, 800f4fc <GUI_ClearRect+0x48>
 800f4f0:	4640      	mov	r0, r8
 800f4f2:	f7fd fef1 	bl	800d2d8 <LCD_SetDrawMode>
 800f4f6:	b002      	add	sp, #8
 800f4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4fc:	4638      	mov	r0, r7
 800f4fe:	4631      	mov	r1, r6
 800f500:	462a      	mov	r2, r5
 800f502:	4623      	mov	r3, r4
 800f504:	f7fd ff6a 	bl	800d3dc <LCD_FillRect>
 800f508:	f7fb f8b6 	bl	800a678 <WM__GetNextIVR>
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d1f5      	bne.n	800f4fc <GUI_ClearRect+0x48>
 800f510:	e7ee      	b.n	800f4f0 <GUI_ClearRect+0x3c>
 800f512:	bf00      	nop
 800f514:	200000d8 	.word	0x200000d8

0800f518 <GUI_Clear>:
 800f518:	b510      	push	{r4, lr}
 800f51a:	2000      	movs	r0, #0
 800f51c:	4601      	mov	r1, r0
 800f51e:	f7ff fcad 	bl	800ee7c <GUI_GotoXY>
 800f522:	4804      	ldr	r0, [pc, #16]	; (800f534 <GUI_Clear+0x1c>)
 800f524:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800f528:	4601      	mov	r1, r0
 800f52a:	4613      	mov	r3, r2
 800f52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f530:	f7ff bfc0 	b.w	800f4b4 <GUI_ClearRect>
 800f534:	ffffc001 	.word	0xffffc001

0800f538 <GUI__RegisterExit>:
 800f538:	b480      	push	{r7}
 800f53a:	b083      	sub	sp, #12
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	4b05      	ldr	r3, [pc, #20]	; (800f558 <GUI__RegisterExit+0x20>)
 800f542:	681a      	ldr	r2, [r3, #0]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	605a      	str	r2, [r3, #4]
 800f548:	4b03      	ldr	r3, [pc, #12]	; (800f558 <GUI__RegisterExit+0x20>)
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	601a      	str	r2, [r3, #0]
 800f54e:	370c      	adds	r7, #12
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr
 800f558:	2001d22c 	.word	0x2001d22c

0800f55c <GUI__Config>:
 800f55c:	b508      	push	{r3, lr}
 800f55e:	4b08      	ldr	r3, [pc, #32]	; (800f580 <GUI__Config+0x24>)
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	b962      	cbnz	r2, 800f57e <GUI__Config+0x22>
 800f564:	2201      	movs	r2, #1
 800f566:	601a      	str	r2, [r3, #0]
 800f568:	f7f1 fc6c 	bl	8000e44 <GUI_X_Config>
 800f56c:	f7f1 fcc4 	bl	8000ef8 <LCD_X_Config>
 800f570:	4804      	ldr	r0, [pc, #16]	; (800f584 <GUI__Config+0x28>)
 800f572:	4b05      	ldr	r3, [pc, #20]	; (800f588 <GUI__Config+0x2c>)
 800f574:	6003      	str	r3, [r0, #0]
 800f576:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f57a:	f7ff bfdd 	b.w	800f538 <GUI__RegisterExit>
 800f57e:	bd08      	pop	{r3, pc}
 800f580:	2001d2a8 	.word	0x2001d2a8
 800f584:	2001d2a0 	.word	0x2001d2a0
 800f588:	0800f3fd 	.word	0x0800f3fd

0800f58c <GUI_Init>:
 800f58c:	b590      	push	{r4, r7, lr}
 800f58e:	b083      	sub	sp, #12
 800f590:	af00      	add	r7, sp, #0
 800f592:	4b20      	ldr	r3, [pc, #128]	; (800f614 <GUI_Init+0x88>)
 800f594:	4a1f      	ldr	r2, [pc, #124]	; (800f614 <GUI_Init+0x88>)
 800f596:	6812      	ldr	r2, [r2, #0]
 800f598:	f022 0201 	bic.w	r2, r2, #1
 800f59c:	601a      	str	r2, [r3, #0]
 800f59e:	4b1e      	ldr	r3, [pc, #120]	; (800f618 <GUI_Init+0x8c>)
 800f5a0:	2201      	movs	r2, #1
 800f5a2:	601a      	str	r2, [r3, #0]
 800f5a4:	4b1d      	ldr	r3, [pc, #116]	; (800f61c <GUI_Init+0x90>)
 800f5a6:	4a1e      	ldr	r2, [pc, #120]	; (800f620 <GUI_Init+0x94>)
 800f5a8:	601a      	str	r2, [r3, #0]
 800f5aa:	4b1c      	ldr	r3, [pc, #112]	; (800f61c <GUI_Init+0x90>)
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	4b1d      	ldr	r3, [pc, #116]	; (800f624 <GUI_Init+0x98>)
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d000      	beq.n	800f5b6 <GUI_Init+0x2a>
 800f5b4:	e7fe      	b.n	800f5b4 <GUI_Init+0x28>
 800f5b6:	f7ff ffd1 	bl	800f55c <GUI__Config>
 800f5ba:	4b1b      	ldr	r3, [pc, #108]	; (800f628 <GUI_Init+0x9c>)
 800f5bc:	222e      	movs	r2, #46	; 0x2e
 800f5be:	701a      	strb	r2, [r3, #0]
 800f5c0:	f7f1 fc76 	bl	8000eb0 <GUI_X_Init>
 800f5c4:	4819      	ldr	r0, [pc, #100]	; (800f62c <GUI_Init+0xa0>)
 800f5c6:	f7ff ff2f 	bl	800f428 <_InitContext>
 800f5ca:	f7fe f92b 	bl	800d824 <emWin_LCD_Init>
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	f7fd fe0c 	bl	800d1ec <LCD_GetXSizeDisplay>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d004      	beq.n	800f5e4 <GUI_Init+0x58>
 800f5da:	f7fd fe0d 	bl	800d1f8 <LCD_GetYSizeDisplay>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d109      	bne.n	800f5f8 <GUI_Init+0x6c>
 800f5e4:	f7fd fdee 	bl	800d1c4 <LCD_GetXSizeMax>
 800f5e8:	4604      	mov	r4, r0
 800f5ea:	f7fd fdee 	bl	800d1ca <LCD_GetYSizeMax>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	f7fd fdf0 	bl	800d1d8 <LCD_SetDisplaySize>
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	2100      	movs	r1, #0
 800f5fc:	f004 fbda 	bl	8013db4 <GUI_SetOrg>
 800f600:	f7fb fb48 	bl	800ac94 <WM_Init>
 800f604:	4b0a      	ldr	r3, [pc, #40]	; (800f630 <GUI_Init+0xa4>)
 800f606:	2201      	movs	r2, #1
 800f608:	701a      	strb	r2, [r3, #0]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4618      	mov	r0, r3
 800f60e:	370c      	adds	r7, #12
 800f610:	46bd      	mov	sp, r7
 800f612:	bd90      	pop	{r4, r7, pc}
 800f614:	e0002000 	.word	0xe0002000
 800f618:	40023008 	.word	0x40023008
 800f61c:	40023000 	.word	0x40023000
 800f620:	f407a5c2 	.word	0xf407a5c2
 800f624:	b5e8b5cd 	.word	0xb5e8b5cd
 800f628:	2001d4e2 	.word	0x2001d4e2
 800f62c:	2001d230 	.word	0x2001d230
 800f630:	2001d500 	.word	0x2001d500

0800f634 <GUI_ClearRectEx>:
 800f634:	4603      	mov	r3, r0
 800f636:	f9b0 0000 	ldrsh.w	r0, [r0]
 800f63a:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800f63e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800f642:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f646:	f7ff bf35 	b.w	800f4b4 <GUI_ClearRect>

0800f64a <GUIPROP__FindChar>:
 800f64a:	b138      	cbz	r0, 800f65c <GUIPROP__FindChar+0x12>
 800f64c:	8803      	ldrh	r3, [r0, #0]
 800f64e:	428b      	cmp	r3, r1
 800f650:	d802      	bhi.n	800f658 <GUIPROP__FindChar+0xe>
 800f652:	8843      	ldrh	r3, [r0, #2]
 800f654:	428b      	cmp	r3, r1
 800f656:	d201      	bcs.n	800f65c <GUIPROP__FindChar+0x12>
 800f658:	6880      	ldr	r0, [r0, #8]
 800f65a:	e7f6      	b.n	800f64a <GUIPROP__FindChar>
 800f65c:	4770      	bx	lr
	...

0800f660 <GUIPROP_DispChar>:
 800f660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f664:	4c38      	ldr	r4, [pc, #224]	; (800f748 <GUIPROP_DispChar+0xe8>)
 800f666:	6823      	ldr	r3, [r4, #0]
 800f668:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 800f66c:	69db      	ldr	r3, [r3, #28]
 800f66e:	4605      	mov	r5, r0
 800f670:	b089      	sub	sp, #36	; 0x24
 800f672:	69d8      	ldr	r0, [r3, #28]
 800f674:	4629      	mov	r1, r5
 800f676:	f7ff ffe8 	bl	800f64a <GUIPROP__FindChar>
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d061      	beq.n	800f742 <GUIPROP_DispChar+0xe2>
 800f67e:	f8b0 8000 	ldrh.w	r8, [r0]
 800f682:	6847      	ldr	r7, [r0, #4]
 800f684:	ebc8 0805 	rsb	r8, r8, r5
 800f688:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 800f68c:	4648      	mov	r0, r9
 800f68e:	f896 b002 	ldrb.w	fp, [r6, #2]
 800f692:	f7fd fe21 	bl	800d2d8 <LCD_SetDrawMode>
 800f696:	6825      	ldr	r5, [r4, #0]
 800f698:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 800f69c:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 800f6a0:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 800f6a4:	f89e c01a 	ldrb.w	ip, [lr, #26]
 800f6a8:	f89e 3018 	ldrb.w	r3, [lr, #24]
 800f6ac:	9306      	str	r3, [sp, #24]
 800f6ae:	4682      	mov	sl, r0
 800f6b0:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 800f6b4:	f8cd c000 	str.w	ip, [sp]
 800f6b8:	f89e e01b 	ldrb.w	lr, [lr, #27]
 800f6bc:	f8cd e004 	str.w	lr, [sp, #4]
 800f6c0:	f04f 0e01 	mov.w	lr, #1
 800f6c4:	f8cd b00c 	str.w	fp, [sp, #12]
 800f6c8:	f8cd e008 	str.w	lr, [sp, #8]
 800f6cc:	6873      	ldr	r3, [r6, #4]
 800f6ce:	9304      	str	r3, [sp, #16]
 800f6d0:	6bad      	ldr	r5, [r5, #56]	; 0x38
 800f6d2:	9b06      	ldr	r3, [sp, #24]
 800f6d4:	9505      	str	r5, [sp, #20]
 800f6d6:	f7fd ff89 	bl	800d5ec <LCD_DrawBitmap>
 800f6da:	6823      	ldr	r3, [r4, #0]
 800f6dc:	69da      	ldr	r2, [r3, #28]
 800f6de:	f892 b019 	ldrb.w	fp, [r2, #25]
 800f6e2:	7e11      	ldrb	r1, [r2, #24]
 800f6e4:	458b      	cmp	fp, r1
 800f6e6:	d920      	bls.n	800f72a <GUIPROP_DispChar+0xca>
 800f6e8:	f1b9 0f02 	cmp.w	r9, #2
 800f6ec:	7ed5      	ldrb	r5, [r2, #27]
 800f6ee:	d01c      	beq.n	800f72a <GUIPROP_DispChar+0xca>
 800f6f0:	9107      	str	r1, [sp, #28]
 800f6f2:	f006 f8f7 	bl	80158e4 <GUI_GetColor>
 800f6f6:	4681      	mov	r9, r0
 800f6f8:	f006 f8ed 	bl	80158d6 <GUI_GetBkColor>
 800f6fc:	f7ff fa1c 	bl	800eb38 <GUI_SetColor>
 800f700:	6824      	ldr	r4, [r4, #0]
 800f702:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 800f706:	69e2      	ldr	r2, [r4, #28]
 800f708:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800f70c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800f710:	7ed2      	ldrb	r2, [r2, #27]
 800f712:	9907      	ldr	r1, [sp, #28]
 800f714:	fb07 0202 	mla	r2, r7, r2, r0
 800f718:	fb01 3105 	mla	r1, r1, r5, r3
 800f71c:	fb0b 3305 	mla	r3, fp, r5, r3
 800f720:	f7fd fe5c 	bl	800d3dc <LCD_FillRect>
 800f724:	4648      	mov	r0, r9
 800f726:	f7ff fa07 	bl	800eb38 <GUI_SetColor>
 800f72a:	4650      	mov	r0, sl
 800f72c:	f7fd fdd4 	bl	800d2d8 <LCD_SetDrawMode>
 800f730:	4b05      	ldr	r3, [pc, #20]	; (800f748 <GUIPROP_DispChar+0xe8>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	69da      	ldr	r2, [r3, #28]
 800f736:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800f738:	7e90      	ldrb	r0, [r2, #26]
 800f73a:	7872      	ldrb	r2, [r6, #1]
 800f73c:	fb00 1202 	mla	r2, r0, r2, r1
 800f740:	845a      	strh	r2, [r3, #34]	; 0x22
 800f742:	b009      	add	sp, #36	; 0x24
 800f744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f748:	200000d8 	.word	0x200000d8

0800f74c <GUIPROP_GetCharDistX>:
 800f74c:	4b0d      	ldr	r3, [pc, #52]	; (800f784 <GUIPROP_GetCharDistX+0x38>)
 800f74e:	b570      	push	{r4, r5, r6, lr}
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	69dd      	ldr	r5, [r3, #28]
 800f754:	4606      	mov	r6, r0
 800f756:	460c      	mov	r4, r1
 800f758:	69e8      	ldr	r0, [r5, #28]
 800f75a:	4631      	mov	r1, r6
 800f75c:	f7ff ff75 	bl	800f64a <GUIPROP__FindChar>
 800f760:	b170      	cbz	r0, 800f780 <GUIPROP_GetCharDistX+0x34>
 800f762:	8803      	ldrh	r3, [r0, #0]
 800f764:	6842      	ldr	r2, [r0, #4]
 800f766:	1af6      	subs	r6, r6, r3
 800f768:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800f76c:	7858      	ldrb	r0, [r3, #1]
 800f76e:	7eab      	ldrb	r3, [r5, #26]
 800f770:	fb10 f003 	smulbb	r0, r0, r3
 800f774:	b124      	cbz	r4, 800f780 <GUIPROP_GetCharDistX+0x34>
 800f776:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 800f77a:	fb12 f303 	smulbb	r3, r2, r3
 800f77e:	6023      	str	r3, [r4, #0]
 800f780:	bd70      	pop	{r4, r5, r6, pc}
 800f782:	bf00      	nop
 800f784:	200000d8 	.word	0x200000d8

0800f788 <GUIPROP_GetFontInfo>:
 800f788:	2301      	movs	r3, #1
 800f78a:	800b      	strh	r3, [r1, #0]
 800f78c:	4770      	bx	lr

0800f78e <GUIPROP_IsInFont>:
 800f78e:	b508      	push	{r3, lr}
 800f790:	69c0      	ldr	r0, [r0, #28]
 800f792:	f7ff ff5a 	bl	800f64a <GUIPROP__FindChar>
 800f796:	3000      	adds	r0, #0
 800f798:	bf18      	it	ne
 800f79a:	2001      	movne	r0, #1
 800f79c:	bd08      	pop	{r3, pc}
	...

0800f7a0 <GUIMONO_DispChar>:
 800f7a0:	4b52      	ldr	r3, [pc, #328]	; (800f8ec <GUIMONO_DispChar+0x14c>)
 800f7a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	69d9      	ldr	r1, [r3, #28]
 800f7aa:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 800f7ac:	69cc      	ldr	r4, [r1, #28]
 800f7ae:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 800f7b0:	89a2      	ldrh	r2, [r4, #12]
 800f7b2:	4290      	cmp	r0, r2
 800f7b4:	b08b      	sub	sp, #44	; 0x2c
 800f7b6:	d308      	bcc.n	800f7ca <GUIMONO_DispChar+0x2a>
 800f7b8:	89e6      	ldrh	r6, [r4, #14]
 800f7ba:	4286      	cmp	r6, r0
 800f7bc:	d305      	bcc.n	800f7ca <GUIMONO_DispChar+0x2a>
 800f7be:	f8d4 9000 	ldr.w	r9, [r4]
 800f7c2:	1a82      	subs	r2, r0, r2
 800f7c4:	f04f 3bff 	mov.w	fp, #4294967295
 800f7c8:	e015      	b.n	800f7f6 <GUIMONO_DispChar+0x56>
 800f7ca:	68a2      	ldr	r2, [r4, #8]
 800f7cc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f7d0:	2a00      	cmp	r2, #0
 800f7d2:	f000 8081 	beq.w	800f8d8 <GUIMONO_DispChar+0x138>
 800f7d6:	8816      	ldrh	r6, [r2, #0]
 800f7d8:	42b0      	cmp	r0, r6
 800f7da:	d37d      	bcc.n	800f8d8 <GUIMONO_DispChar+0x138>
 800f7dc:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800f7e0:	4584      	cmp	ip, r0
 800f7e2:	d379      	bcc.n	800f8d8 <GUIMONO_DispChar+0x138>
 800f7e4:	6852      	ldr	r2, [r2, #4]
 800f7e6:	1b80      	subs	r0, r0, r6
 800f7e8:	b280      	uxth	r0, r0
 800f7ea:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800f7ee:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 800f7f2:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 800f7f6:	1c50      	adds	r0, r2, #1
 800f7f8:	d06e      	beq.n	800f8d8 <GUIMONO_DispChar+0x138>
 800f7fa:	f891 8018 	ldrb.w	r8, [r1, #24]
 800f7fe:	7ca1      	ldrb	r1, [r4, #18]
 800f800:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 800f804:	7c26      	ldrb	r6, [r4, #16]
 800f806:	9206      	str	r2, [sp, #24]
 800f808:	fb18 f101 	smulbb	r1, r8, r1
 800f80c:	9107      	str	r1, [sp, #28]
 800f80e:	fa0f f18a 	sxth.w	r1, sl
 800f812:	4608      	mov	r0, r1
 800f814:	9108      	str	r1, [sp, #32]
 800f816:	f7fd fd5f 	bl	800d2d8 <LCD_SetDrawMode>
 800f81a:	4934      	ldr	r1, [pc, #208]	; (800f8ec <GUIMONO_DispChar+0x14c>)
 800f81c:	9009      	str	r0, [sp, #36]	; 0x24
 800f81e:	680b      	ldr	r3, [r1, #0]
 800f820:	9a06      	ldr	r2, [sp, #24]
 800f822:	69d9      	ldr	r1, [r3, #28]
 800f824:	7e88      	ldrb	r0, [r1, #26]
 800f826:	9000      	str	r0, [sp, #0]
 800f828:	7ec9      	ldrb	r1, [r1, #27]
 800f82a:	9101      	str	r1, [sp, #4]
 800f82c:	2101      	movs	r1, #1
 800f82e:	9102      	str	r1, [sp, #8]
 800f830:	7ca1      	ldrb	r1, [r4, #18]
 800f832:	9103      	str	r1, [sp, #12]
 800f834:	9907      	ldr	r1, [sp, #28]
 800f836:	fb01 9202 	mla	r2, r1, r2, r9
 800f83a:	9204      	str	r2, [sp, #16]
 800f83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f83e:	9305      	str	r3, [sp, #20]
 800f840:	b23f      	sxth	r7, r7
 800f842:	b22d      	sxth	r5, r5
 800f844:	4638      	mov	r0, r7
 800f846:	4629      	mov	r1, r5
 800f848:	4632      	mov	r2, r6
 800f84a:	4643      	mov	r3, r8
 800f84c:	f7fd fece 	bl	800d5ec <LCD_DrawBitmap>
 800f850:	f1bb 3fff 	cmp.w	fp, #4294967295
 800f854:	d01b      	beq.n	800f88e <GUIMONO_DispChar+0xee>
 800f856:	f04a 0002 	orr.w	r0, sl, #2
 800f85a:	b200      	sxth	r0, r0
 800f85c:	f7fd fd3c 	bl	800d2d8 <LCD_SetDrawMode>
 800f860:	4a22      	ldr	r2, [pc, #136]	; (800f8ec <GUIMONO_DispChar+0x14c>)
 800f862:	6813      	ldr	r3, [r2, #0]
 800f864:	69da      	ldr	r2, [r3, #28]
 800f866:	7e91      	ldrb	r1, [r2, #26]
 800f868:	9100      	str	r1, [sp, #0]
 800f86a:	7ed2      	ldrb	r2, [r2, #27]
 800f86c:	9201      	str	r2, [sp, #4]
 800f86e:	2101      	movs	r1, #1
 800f870:	9102      	str	r1, [sp, #8]
 800f872:	9907      	ldr	r1, [sp, #28]
 800f874:	7ca2      	ldrb	r2, [r4, #18]
 800f876:	9203      	str	r2, [sp, #12]
 800f878:	fb01 920b 	mla	r2, r1, fp, r9
 800f87c:	9204      	str	r2, [sp, #16]
 800f87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f880:	9305      	str	r3, [sp, #20]
 800f882:	4638      	mov	r0, r7
 800f884:	4629      	mov	r1, r5
 800f886:	4632      	mov	r2, r6
 800f888:	4643      	mov	r3, r8
 800f88a:	f7fd feaf 	bl	800d5ec <LCD_DrawBitmap>
 800f88e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800f8ec <GUIMONO_DispChar+0x14c>
 800f892:	f8d8 3000 	ldr.w	r3, [r8]
 800f896:	69db      	ldr	r3, [r3, #28]
 800f898:	7e5a      	ldrb	r2, [r3, #25]
 800f89a:	7e1b      	ldrb	r3, [r3, #24]
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d917      	bls.n	800f8d0 <GUIMONO_DispChar+0x130>
 800f8a0:	9a08      	ldr	r2, [sp, #32]
 800f8a2:	2a02      	cmp	r2, #2
 800f8a4:	d014      	beq.n	800f8d0 <GUIMONO_DispChar+0x130>
 800f8a6:	f08a 0004 	eor.w	r0, sl, #4
 800f8aa:	b200      	sxth	r0, r0
 800f8ac:	f7fd fd14 	bl	800d2d8 <LCD_SetDrawMode>
 800f8b0:	f8d8 3000 	ldr.w	r3, [r8]
 800f8b4:	69db      	ldr	r3, [r3, #28]
 800f8b6:	f893 e018 	ldrb.w	lr, [r3, #24]
 800f8ba:	7ed9      	ldrb	r1, [r3, #27]
 800f8bc:	7e9a      	ldrb	r2, [r3, #26]
 800f8be:	7e5b      	ldrb	r3, [r3, #25]
 800f8c0:	4638      	mov	r0, r7
 800f8c2:	fb0e 5101 	mla	r1, lr, r1, r5
 800f8c6:	fb06 7202 	mla	r2, r6, r2, r7
 800f8ca:	442b      	add	r3, r5
 800f8cc:	f7fd fd86 	bl	800d3dc <LCD_FillRect>
 800f8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8d2:	b2d8      	uxtb	r0, r3
 800f8d4:	f7fd fd00 	bl	800d2d8 <LCD_SetDrawMode>
 800f8d8:	4b04      	ldr	r3, [pc, #16]	; (800f8ec <GUIMONO_DispChar+0x14c>)
 800f8da:	7c61      	ldrb	r1, [r4, #17]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800f8e0:	440a      	add	r2, r1
 800f8e2:	845a      	strh	r2, [r3, #34]	; 0x22
 800f8e4:	b00b      	add	sp, #44	; 0x2c
 800f8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ea:	bf00      	nop
 800f8ec:	200000d8 	.word	0x200000d8

0800f8f0 <GUIMONO_GetCharDistX>:
 800f8f0:	4b04      	ldr	r3, [pc, #16]	; (800f904 <GUIMONO_GetCharDistX+0x14>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	69db      	ldr	r3, [r3, #28]
 800f8f6:	69db      	ldr	r3, [r3, #28]
 800f8f8:	b109      	cbz	r1, 800f8fe <GUIMONO_GetCharDistX+0xe>
 800f8fa:	7c1a      	ldrb	r2, [r3, #16]
 800f8fc:	600a      	str	r2, [r1, #0]
 800f8fe:	7c58      	ldrb	r0, [r3, #17]
 800f900:	4770      	bx	lr
 800f902:	bf00      	nop
 800f904:	200000d8 	.word	0x200000d8

0800f908 <GUIMONO_GetFontInfo>:
 800f908:	2302      	movs	r3, #2
 800f90a:	800b      	strh	r3, [r1, #0]
 800f90c:	4770      	bx	lr

0800f90e <GUIMONO_IsInFont>:
 800f90e:	69c3      	ldr	r3, [r0, #28]
 800f910:	899a      	ldrh	r2, [r3, #12]
 800f912:	428a      	cmp	r2, r1
 800f914:	d802      	bhi.n	800f91c <GUIMONO_IsInFont+0xe>
 800f916:	89da      	ldrh	r2, [r3, #14]
 800f918:	428a      	cmp	r2, r1
 800f91a:	d20f      	bcs.n	800f93c <GUIMONO_IsInFont+0x2e>
 800f91c:	6898      	ldr	r0, [r3, #8]
 800f91e:	b180      	cbz	r0, 800f942 <GUIMONO_IsInFont+0x34>
 800f920:	8803      	ldrh	r3, [r0, #0]
 800f922:	4299      	cmp	r1, r3
 800f924:	d30c      	bcc.n	800f940 <GUIMONO_IsInFont+0x32>
 800f926:	8842      	ldrh	r2, [r0, #2]
 800f928:	428a      	cmp	r2, r1
 800f92a:	d309      	bcc.n	800f940 <GUIMONO_IsInFont+0x32>
 800f92c:	1ac9      	subs	r1, r1, r3
 800f92e:	6842      	ldr	r2, [r0, #4]
 800f930:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 800f934:	43c0      	mvns	r0, r0
 800f936:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800f93a:	4770      	bx	lr
 800f93c:	2001      	movs	r0, #1
 800f93e:	4770      	bx	lr
 800f940:	2000      	movs	r0, #0
 800f942:	4770      	bx	lr

0800f944 <_Log2VisBuffered>:
 800f944:	4770      	bx	lr
	...

0800f948 <_DispLine>:
 800f948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f94a:	4615      	mov	r5, r2
 800f94c:	ab02      	add	r3, sp, #8
 800f94e:	4a1a      	ldr	r2, [pc, #104]	; (800f9b8 <_DispLine+0x70>)
 800f950:	f843 1d08 	str.w	r1, [r3, #-8]!
 800f954:	9001      	str	r0, [sp, #4]
 800f956:	6812      	ldr	r2, [r2, #0]
 800f958:	4c18      	ldr	r4, [pc, #96]	; (800f9bc <_DispLine+0x74>)
 800f95a:	4669      	mov	r1, sp
 800f95c:	4790      	blx	r2
 800f95e:	6823      	ldr	r3, [r4, #0]
 800f960:	9001      	str	r0, [sp, #4]
 800f962:	6958      	ldr	r0, [r3, #20]
 800f964:	b958      	cbnz	r0, 800f97e <_DispLine+0x36>
 800f966:	2001      	movs	r0, #1
 800f968:	f7fe f92c 	bl	800dbc4 <GUI__ManageCache>
 800f96c:	6823      	ldr	r3, [r4, #0]
 800f96e:	69db      	ldr	r3, [r3, #28]
 800f970:	695b      	ldr	r3, [r3, #20]
 800f972:	b1bb      	cbz	r3, 800f9a4 <_DispLine+0x5c>
 800f974:	689b      	ldr	r3, [r3, #8]
 800f976:	9801      	ldr	r0, [sp, #4]
 800f978:	9900      	ldr	r1, [sp, #0]
 800f97a:	4798      	blx	r3
 800f97c:	e017      	b.n	800f9ae <_DispLine+0x66>
 800f97e:	4629      	mov	r1, r5
 800f980:	f7ff f93c 	bl	800ebfc <GUI_RectsIntersect>
 800f984:	2800      	cmp	r0, #0
 800f986:	d1ee      	bne.n	800f966 <_DispLine+0x1e>
 800f988:	e014      	b.n	800f9b4 <_DispLine+0x6c>
 800f98a:	a801      	add	r0, sp, #4
 800f98c:	f004 f9dc 	bl	8013d48 <GUI_UC__GetCharCodeInc>
 800f990:	6823      	ldr	r3, [r4, #0]
 800f992:	69db      	ldr	r3, [r3, #28]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	4605      	mov	r5, r0
 800f998:	4798      	blx	r3
 800f99a:	4b09      	ldr	r3, [pc, #36]	; (800f9c0 <_DispLine+0x78>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	b10b      	cbz	r3, 800f9a4 <_DispLine+0x5c>
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	4798      	blx	r3
 800f9a4:	9b00      	ldr	r3, [sp, #0]
 800f9a6:	3b01      	subs	r3, #1
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	daed      	bge.n	800f98a <_DispLine+0x42>
 800f9ae:	2000      	movs	r0, #0
 800f9b0:	f7fe f908 	bl	800dbc4 <GUI__ManageCache>
 800f9b4:	b003      	add	sp, #12
 800f9b6:	bd30      	pop	{r4, r5, pc}
 800f9b8:	200000e4 	.word	0x200000e4
 800f9bc:	200000d8 	.word	0x200000d8
 800f9c0:	2001d4fc 	.word	0x2001d4fc

0800f9c4 <GUI__GetLineNumChars>:
 800f9c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9c6:	460d      	mov	r5, r1
 800f9c8:	9001      	str	r0, [sp, #4]
 800f9ca:	4604      	mov	r4, r0
 800f9cc:	b198      	cbz	r0, 800f9f6 <GUI__GetLineNumChars+0x32>
 800f9ce:	4b0b      	ldr	r3, [pc, #44]	; (800f9fc <GUI__GetLineNumChars+0x38>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	69db      	ldr	r3, [r3, #28]
 800f9d4:	695b      	ldr	r3, [r3, #20]
 800f9d6:	b10b      	cbz	r3, 800f9dc <GUI__GetLineNumChars+0x18>
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	b90b      	cbnz	r3, 800f9e0 <GUI__GetLineNumChars+0x1c>
 800f9dc:	2400      	movs	r4, #0
 800f9de:	e008      	b.n	800f9f2 <GUI__GetLineNumChars+0x2e>
 800f9e0:	4798      	blx	r3
 800f9e2:	e009      	b.n	800f9f8 <GUI__GetLineNumChars+0x34>
 800f9e4:	a801      	add	r0, sp, #4
 800f9e6:	f004 f9af 	bl	8013d48 <GUI_UC__GetCharCodeInc>
 800f9ea:	b120      	cbz	r0, 800f9f6 <GUI__GetLineNumChars+0x32>
 800f9ec:	280a      	cmp	r0, #10
 800f9ee:	d002      	beq.n	800f9f6 <GUI__GetLineNumChars+0x32>
 800f9f0:	3401      	adds	r4, #1
 800f9f2:	42ac      	cmp	r4, r5
 800f9f4:	dbf6      	blt.n	800f9e4 <GUI__GetLineNumChars+0x20>
 800f9f6:	4620      	mov	r0, r4
 800f9f8:	b003      	add	sp, #12
 800f9fa:	bd30      	pop	{r4, r5, pc}
 800f9fc:	200000d8 	.word	0x200000d8

0800fa00 <GUI__GetOverlap>:
 800fa00:	b513      	push	{r0, r1, r4, lr}
 800fa02:	a902      	add	r1, sp, #8
 800fa04:	2400      	movs	r4, #0
 800fa06:	f841 4d04 	str.w	r4, [r1, #-4]!
 800fa0a:	f000 f89f 	bl	800fb4c <GUI_GetCharDistXEx>
 800fa0e:	9b01      	ldr	r3, [sp, #4]
 800fa10:	4283      	cmp	r3, r0
 800fa12:	bfcc      	ite	gt
 800fa14:	ebc0 0003 	rsbgt	r0, r0, r3
 800fa18:	4620      	movle	r0, r4
 800fa1a:	b002      	add	sp, #8
 800fa1c:	bd10      	pop	{r4, pc}
	...

0800fa20 <GUI__GetLineDistX>:
 800fa20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa22:	4a15      	ldr	r2, [pc, #84]	; (800fa78 <GUI__GetLineDistX+0x58>)
 800fa24:	9001      	str	r0, [sp, #4]
 800fa26:	ab02      	add	r3, sp, #8
 800fa28:	6812      	ldr	r2, [r2, #0]
 800fa2a:	f843 1d08 	str.w	r1, [r3, #-8]!
 800fa2e:	4669      	mov	r1, sp
 800fa30:	4790      	blx	r2
 800fa32:	9001      	str	r0, [sp, #4]
 800fa34:	b1f0      	cbz	r0, 800fa74 <GUI__GetLineDistX+0x54>
 800fa36:	4b11      	ldr	r3, [pc, #68]	; (800fa7c <GUI__GetLineDistX+0x5c>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	69db      	ldr	r3, [r3, #28]
 800fa3c:	695b      	ldr	r3, [r3, #20]
 800fa3e:	b10b      	cbz	r3, 800fa44 <GUI__GetLineDistX+0x24>
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	b913      	cbnz	r3, 800fa4a <GUI__GetLineDistX+0x2a>
 800fa44:	2500      	movs	r5, #0
 800fa46:	462c      	mov	r4, r5
 800fa48:	e002      	b.n	800fa50 <GUI__GetLineDistX+0x30>
 800fa4a:	9900      	ldr	r1, [sp, #0]
 800fa4c:	4798      	blx	r3
 800fa4e:	e011      	b.n	800fa74 <GUI__GetLineDistX+0x54>
 800fa50:	9b00      	ldr	r3, [sp, #0]
 800fa52:	3b01      	subs	r3, #1
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	9300      	str	r3, [sp, #0]
 800fa58:	db07      	blt.n	800fa6a <GUI__GetLineDistX+0x4a>
 800fa5a:	a801      	add	r0, sp, #4
 800fa5c:	f004 f974 	bl	8013d48 <GUI_UC__GetCharCodeInc>
 800fa60:	4605      	mov	r5, r0
 800fa62:	f000 f869 	bl	800fb38 <GUI_GetCharDistX>
 800fa66:	4404      	add	r4, r0
 800fa68:	e7f2      	b.n	800fa50 <GUI__GetLineDistX+0x30>
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	f7ff ffc8 	bl	800fa00 <GUI__GetOverlap>
 800fa70:	4420      	add	r0, r4
 800fa72:	e7ff      	b.n	800fa74 <GUI__GetLineDistX+0x54>
 800fa74:	b003      	add	sp, #12
 800fa76:	bd30      	pop	{r4, r5, pc}
 800fa78:	200000e4 	.word	0x200000e4
 800fa7c:	200000d8 	.word	0x200000d8

0800fa80 <GUI__DispLine>:
 800fa80:	4b27      	ldr	r3, [pc, #156]	; (800fb20 <GUI__DispLine+0xa0>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa86:	4605      	mov	r5, r0
 800fa88:	460c      	mov	r4, r1
 800fa8a:	b163      	cbz	r3, 800faa6 <GUI__DispLine+0x26>
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	f7fa feb5 	bl	800a7fc <WM__InitIVRSearch>
 800fa92:	2800      	cmp	r0, #0
 800fa94:	d041      	beq.n	800fb1a <GUI__DispLine+0x9a>
 800fa96:	4628      	mov	r0, r5
 800fa98:	4621      	mov	r1, r4
 800fa9a:	466a      	mov	r2, sp
 800fa9c:	f7ff ff54 	bl	800f948 <_DispLine>
 800faa0:	f7fa fdea 	bl	800a678 <WM__GetNextIVR>
 800faa4:	e7f5      	b.n	800fa92 <GUI__DispLine+0x12>
 800faa6:	6810      	ldr	r0, [r2, #0]
 800faa8:	6851      	ldr	r1, [r2, #4]
 800faaa:	4e1e      	ldr	r6, [pc, #120]	; (800fb24 <GUI__DispLine+0xa4>)
 800faac:	466b      	mov	r3, sp
 800faae:	c303      	stmia	r3!, {r0, r1}
 800fab0:	6833      	ldr	r3, [r6, #0]
 800fab2:	f8bd 1000 	ldrh.w	r1, [sp]
 800fab6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800faba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fabe:	4411      	add	r1, r2
 800fac0:	f8ad 1000 	strh.w	r1, [sp]
 800fac4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800fac8:	4419      	add	r1, r3
 800faca:	f8ad 1002 	strh.w	r1, [sp, #2]
 800face:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800fad2:	440a      	add	r2, r1
 800fad4:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fad8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fadc:	4668      	mov	r0, sp
 800fade:	4413      	add	r3, r2
 800fae0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fae4:	f7fa fe8a 	bl	800a7fc <WM__InitIVRSearch>
 800fae8:	6833      	ldr	r3, [r6, #0]
 800faea:	b940      	cbnz	r0, 800fafe <GUI__DispLine+0x7e>
 800faec:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800faee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800faf0:	1a8a      	subs	r2, r1, r2
 800faf2:	845a      	strh	r2, [r3, #34]	; 0x22
 800faf4:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800faf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800faf8:	1a8a      	subs	r2, r1, r2
 800fafa:	849a      	strh	r2, [r3, #36]	; 0x24
 800fafc:	e00d      	b.n	800fb1a <GUI__DispLine+0x9a>
 800fafe:	f8bd 2000 	ldrh.w	r2, [sp]
 800fb02:	845a      	strh	r2, [r3, #34]	; 0x22
 800fb04:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800fb08:	849a      	strh	r2, [r3, #36]	; 0x24
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	4621      	mov	r1, r4
 800fb0e:	466a      	mov	r2, sp
 800fb10:	f7ff ff1a 	bl	800f948 <_DispLine>
 800fb14:	f7fa fdb0 	bl	800a678 <WM__GetNextIVR>
 800fb18:	e7e6      	b.n	800fae8 <GUI__DispLine+0x68>
 800fb1a:	b002      	add	sp, #8
 800fb1c:	bd70      	pop	{r4, r5, r6, pc}
 800fb1e:	bf00      	nop
 800fb20:	2001d4e4 	.word	0x2001d4e4
 800fb24:	200000d8 	.word	0x200000d8

0800fb28 <GUI_GetFontDistY>:
 800fb28:	4b02      	ldr	r3, [pc, #8]	; (800fb34 <GUI_GetFontDistY+0xc>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	69db      	ldr	r3, [r3, #28]
 800fb2e:	7e58      	ldrb	r0, [r3, #25]
 800fb30:	4770      	bx	lr
 800fb32:	bf00      	nop
 800fb34:	200000d8 	.word	0x200000d8

0800fb38 <GUI_GetCharDistX>:
 800fb38:	b508      	push	{r3, lr}
 800fb3a:	4b03      	ldr	r3, [pc, #12]	; (800fb48 <GUI_GetCharDistX+0x10>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	69db      	ldr	r3, [r3, #28]
 800fb40:	2100      	movs	r1, #0
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	4798      	blx	r3
 800fb46:	bd08      	pop	{r3, pc}
 800fb48:	200000d8 	.word	0x200000d8

0800fb4c <GUI_GetCharDistXEx>:
 800fb4c:	b508      	push	{r3, lr}
 800fb4e:	4b03      	ldr	r3, [pc, #12]	; (800fb5c <GUI_GetCharDistXEx+0x10>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	69db      	ldr	r3, [r3, #28]
 800fb54:	685b      	ldr	r3, [r3, #4]
 800fb56:	4798      	blx	r3
 800fb58:	bd08      	pop	{r3, pc}
 800fb5a:	bf00      	nop
 800fb5c:	200000d8 	.word	0x200000d8

0800fb60 <_PushFreeBlock>:
 800fb60:	4b07      	ldr	r3, [pc, #28]	; (800fb80 <_PushFreeBlock+0x20>)
 800fb62:	685a      	ldr	r2, [r3, #4]
 800fb64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800fb66:	3201      	adds	r2, #1
 800fb68:	b510      	push	{r4, lr}
 800fb6a:	605a      	str	r2, [r3, #4]
 800fb6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb6e:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 800fb72:	6061      	str	r1, [r4, #4]
 800fb74:	2100      	movs	r1, #0
 800fb76:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800fb7a:	6258      	str	r0, [r3, #36]	; 0x24
 800fb7c:	bd10      	pop	{r4, pc}
 800fb7e:	bf00      	nop
 800fb80:	2001d520 	.word	0x2001d520

0800fb84 <_OnExit>:
 800fb84:	b538      	push	{r3, r4, r5, lr}
 800fb86:	4d0b      	ldr	r5, [pc, #44]	; (800fbb4 <_OnExit+0x30>)
 800fb88:	2400      	movs	r4, #0
 800fb8a:	f105 0040 	add.w	r0, r5, #64	; 0x40
 800fb8e:	4621      	mov	r1, r4
 800fb90:	2280      	movs	r2, #128	; 0x80
 800fb92:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 800fb96:	f7fd ff2e 	bl	800d9f6 <GUI__memset>
 800fb9a:	4628      	mov	r0, r5
 800fb9c:	4621      	mov	r1, r4
 800fb9e:	22c0      	movs	r2, #192	; 0xc0
 800fba0:	f7fd ff29 	bl	800d9f6 <GUI__memset>
 800fba4:	4621      	mov	r1, r4
 800fba6:	4804      	ldr	r0, [pc, #16]	; (800fbb8 <_OnExit+0x34>)
 800fba8:	220c      	movs	r2, #12
 800fbaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbae:	f7fd bf22 	b.w	800d9f6 <GUI__memset>
 800fbb2:	bf00      	nop
 800fbb4:	2001d520 	.word	0x2001d520
 800fbb8:	2001d2ac 	.word	0x2001d2ac

0800fbbc <_RemoveFreeBlock>:
 800fbbc:	b510      	push	{r4, lr}
 800fbbe:	6842      	ldr	r2, [r0, #4]
 800fbc0:	230f      	movs	r3, #15
 800fbc2:	490d      	ldr	r1, [pc, #52]	; (800fbf8 <_RemoveFreeBlock+0x3c>)
 800fbc4:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800fbc8:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800fbca:	42a2      	cmp	r2, r4
 800fbcc:	d203      	bcs.n	800fbd6 <_RemoveFreeBlock+0x1a>
 800fbce:	f113 33ff 	adds.w	r3, r3, #4294967295
 800fbd2:	d2f6      	bcs.n	800fbc2 <_RemoveFreeBlock+0x6>
 800fbd4:	bd10      	pop	{r4, pc}
 800fbd6:	2b0f      	cmp	r3, #15
 800fbd8:	d80c      	bhi.n	800fbf4 <_RemoveFreeBlock+0x38>
 800fbda:	680c      	ldr	r4, [r1, #0]
 800fbdc:	1aa2      	subs	r2, r4, r2
 800fbde:	600a      	str	r2, [r1, #0]
 800fbe0:	6882      	ldr	r2, [r0, #8]
 800fbe2:	68c0      	ldr	r0, [r0, #12]
 800fbe4:	b102      	cbz	r2, 800fbe8 <_RemoveFreeBlock+0x2c>
 800fbe6:	6050      	str	r0, [r2, #4]
 800fbe8:	b108      	cbz	r0, 800fbee <_RemoveFreeBlock+0x32>
 800fbea:	6002      	str	r2, [r0, #0]
 800fbec:	bd10      	pop	{r4, pc}
 800fbee:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800fbf2:	645a      	str	r2, [r3, #68]	; 0x44
 800fbf4:	bd10      	pop	{r4, pc}
 800fbf6:	bf00      	nop
 800fbf8:	2001d520 	.word	0x2001d520

0800fbfc <_AddFreeMemory>:
 800fbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbfe:	4e26      	ldr	r6, [pc, #152]	; (800fc98 <_AddFreeMemory+0x9c>)
 800fc00:	68f3      	ldr	r3, [r6, #12]
 800fc02:	1e5a      	subs	r2, r3, #1
 800fc04:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800fc06:	4605      	mov	r5, r0
 800fc08:	4413      	add	r3, r2
 800fc0a:	1808      	adds	r0, r1, r0
 800fc0c:	4298      	cmp	r0, r3
 800fc0e:	460c      	mov	r4, r1
 800fc10:	d805      	bhi.n	800fc1e <_AddFreeMemory+0x22>
 800fc12:	594b      	ldr	r3, [r1, r5]
 800fc14:	b91b      	cbnz	r3, 800fc1e <_AddFreeMemory+0x22>
 800fc16:	6843      	ldr	r3, [r0, #4]
 800fc18:	441d      	add	r5, r3
 800fc1a:	f7ff ffcf 	bl	800fbbc <_RemoveFreeBlock>
 800fc1e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800fc20:	429c      	cmp	r4, r3
 800fc22:	d90a      	bls.n	800fc3a <_AddFreeMemory+0x3e>
 800fc24:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800fc28:	1be7      	subs	r7, r4, r7
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	b92b      	cbnz	r3, 800fc3a <_AddFreeMemory+0x3e>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	4638      	mov	r0, r7
 800fc32:	441d      	add	r5, r3
 800fc34:	f7ff ffc2 	bl	800fbbc <_RemoveFreeBlock>
 800fc38:	463c      	mov	r4, r7
 800fc3a:	230f      	movs	r3, #15
 800fc3c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800fc40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800fc42:	4295      	cmp	r5, r2
 800fc44:	d203      	bcs.n	800fc4e <_AddFreeMemory+0x52>
 800fc46:	f113 33ff 	adds.w	r3, r3, #4294967295
 800fc4a:	d2f7      	bcs.n	800fc3c <_AddFreeMemory+0x40>
 800fc4c:	e022      	b.n	800fc94 <_AddFreeMemory+0x98>
 800fc4e:	2b0f      	cmp	r3, #15
 800fc50:	d820      	bhi.n	800fc94 <_AddFreeMemory+0x98>
 800fc52:	3308      	adds	r3, #8
 800fc54:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800fc58:	1961      	adds	r1, r4, r5
 800fc5a:	6852      	ldr	r2, [r2, #4]
 800fc5c:	60a2      	str	r2, [r4, #8]
 800fc5e:	2000      	movs	r0, #0
 800fc60:	e884 0021 	stmia.w	r4, {r0, r5}
 800fc64:	6124      	str	r4, [r4, #16]
 800fc66:	f841 5c04 	str.w	r5, [r1, #-4]
 800fc6a:	f104 0108 	add.w	r1, r4, #8
 800fc6e:	b102      	cbz	r2, 800fc72 <_AddFreeMemory+0x76>
 800fc70:	6051      	str	r1, [r2, #4]
 800fc72:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800fc76:	60e0      	str	r0, [r4, #12]
 800fc78:	6059      	str	r1, [r3, #4]
 800fc7a:	6833      	ldr	r3, [r6, #0]
 800fc7c:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 800fc80:	4a05      	ldr	r2, [pc, #20]	; (800fc98 <_AddFreeMemory+0x9c>)
 800fc82:	442b      	add	r3, r5
 800fc84:	6033      	str	r3, [r6, #0]
 800fc86:	b929      	cbnz	r1, 800fc94 <_AddFreeMemory+0x98>
 800fc88:	68d1      	ldr	r1, [r2, #12]
 800fc8a:	1acb      	subs	r3, r1, r3
 800fc8c:	6891      	ldr	r1, [r2, #8]
 800fc8e:	4299      	cmp	r1, r3
 800fc90:	bf38      	it	cc
 800fc92:	6093      	strcc	r3, [r2, #8]
 800fc94:	4628      	mov	r0, r5
 800fc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc98:	2001d520 	.word	0x2001d520

0800fc9c <_RemoveHoles>:
 800fc9c:	4b25      	ldr	r3, [pc, #148]	; (800fd34 <_RemoveHoles+0x98>)
 800fc9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca2:	68da      	ldr	r2, [r3, #12]
 800fca4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800fca6:	3a01      	subs	r2, #1
 800fca8:	4682      	mov	sl, r0
 800fcaa:	eb02 0904 	add.w	r9, r2, r4
 800fcae:	469b      	mov	fp, r3
 800fcb0:	e894 0028 	ldmia.w	r4, {r3, r5}
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d133      	bne.n	800fd20 <_RemoveHoles+0x84>
 800fcb8:	eb04 0805 	add.w	r8, r4, r5
 800fcbc:	45c8      	cmp	r8, r9
 800fcbe:	d22f      	bcs.n	800fd20 <_RemoveHoles+0x84>
 800fcc0:	f854 c005 	ldr.w	ip, [r4, r5]
 800fcc4:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800fcc8:	f1bc 0f00 	cmp.w	ip, #0
 800fccc:	d028      	beq.n	800fd20 <_RemoveHoles+0x84>
 800fcce:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800fcd2:	4f18      	ldr	r7, [pc, #96]	; (800fd34 <_RemoveHoles+0x98>)
 800fcd4:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d121      	bne.n	800fd20 <_RemoveHoles+0x84>
 800fcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcde:	4620      	mov	r0, r4
 800fce0:	e88d 1008 	stmia.w	sp, {r3, ip}
 800fce4:	f7ff ff6a 	bl	800fbbc <_RemoveFreeBlock>
 800fce8:	f8d8 1000 	ldr.w	r1, [r8]
 800fcec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fcee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	6054      	str	r4, [r2, #4]
 800fcf6:	4641      	mov	r1, r8
 800fcf8:	4632      	mov	r2, r6
 800fcfa:	f006 fdcb 	bl	8016894 <memmove>
 800fcfe:	e89d 1008 	ldmia.w	sp, {r3, ip}
 800fd02:	459c      	cmp	ip, r3
 800fd04:	d102      	bne.n	800fd0c <_RemoveHoles+0x70>
 800fd06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd08:	1b5b      	subs	r3, r3, r5
 800fd0a:	637b      	str	r3, [r7, #52]	; 0x34
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	19a1      	adds	r1, r4, r6
 800fd10:	f7ff ff74 	bl	800fbfc <_AddFreeMemory>
 800fd14:	f1ba 0f00 	cmp.w	sl, #0
 800fd18:	d001      	beq.n	800fd1e <_RemoveHoles+0x82>
 800fd1a:	4582      	cmp	sl, r0
 800fd1c:	d905      	bls.n	800fd2a <_RemoveHoles+0x8e>
 800fd1e:	4635      	mov	r5, r6
 800fd20:	442c      	add	r4, r5
 800fd22:	454c      	cmp	r4, r9
 800fd24:	d3c4      	bcc.n	800fcb0 <_RemoveHoles+0x14>
 800fd26:	2001      	movs	r0, #1
 800fd28:	e000      	b.n	800fd2c <_RemoveHoles+0x90>
 800fd2a:	2000      	movs	r0, #0
 800fd2c:	b003      	add	sp, #12
 800fd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd32:	bf00      	nop
 800fd34:	2001d520 	.word	0x2001d520

0800fd38 <GUI_ALLOC_FreeFixedBlock>:
 800fd38:	b128      	cbz	r0, 800fd46 <GUI_ALLOC_FreeFixedBlock+0xe>
 800fd3a:	4a03      	ldr	r2, [pc, #12]	; (800fd48 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800fd3c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800fd3e:	6003      	str	r3, [r0, #0]
 800fd40:	b103      	cbz	r3, 800fd44 <GUI_ALLOC_FreeFixedBlock+0xc>
 800fd42:	6058      	str	r0, [r3, #4]
 800fd44:	63d0      	str	r0, [r2, #60]	; 0x3c
 800fd46:	4770      	bx	lr
 800fd48:	2001d520 	.word	0x2001d520

0800fd4c <GUI_ALLOC_h2p>:
 800fd4c:	b128      	cbz	r0, 800fd5a <GUI_ALLOC_h2p+0xe>
 800fd4e:	4b03      	ldr	r3, [pc, #12]	; (800fd5c <GUI_ALLOC_h2p+0x10>)
 800fd50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd52:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800fd56:	6840      	ldr	r0, [r0, #4]
 800fd58:	3008      	adds	r0, #8
 800fd5a:	4770      	bx	lr
 800fd5c:	2001d520 	.word	0x2001d520

0800fd60 <GUI_ALLOC_LockH>:
 800fd60:	4b05      	ldr	r3, [pc, #20]	; (800fd78 <GUI_ALLOC_LockH+0x18>)
 800fd62:	69d9      	ldr	r1, [r3, #28]
 800fd64:	3101      	adds	r1, #1
 800fd66:	61d9      	str	r1, [r3, #28]
 800fd68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd6a:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 800fd6e:	3101      	adds	r1, #1
 800fd70:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 800fd74:	f7ff bfea 	b.w	800fd4c <GUI_ALLOC_h2p>
 800fd78:	2001d520 	.word	0x2001d520

0800fd7c <GUI_ALLOC_UnlockH>:
 800fd7c:	b530      	push	{r4, r5, lr}
 800fd7e:	6802      	ldr	r2, [r0, #0]
 800fd80:	4b09      	ldr	r3, [pc, #36]	; (800fda8 <GUI_ALLOC_UnlockH+0x2c>)
 800fd82:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800fd86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd88:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 800fd8c:	2c01      	cmp	r4, #1
 800fd8e:	d903      	bls.n	800fd98 <GUI_ALLOC_UnlockH+0x1c>
 800fd90:	69dd      	ldr	r5, [r3, #28]
 800fd92:	b10d      	cbz	r5, 800fd98 <GUI_ALLOC_UnlockH+0x1c>
 800fd94:	3d01      	subs	r5, #1
 800fd96:	61dd      	str	r5, [r3, #28]
 800fd98:	3c01      	subs	r4, #1
 800fd9a:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 800fd9e:	2300      	movs	r3, #0
 800fda0:	6003      	str	r3, [r0, #0]
 800fda2:	4618      	mov	r0, r3
 800fda4:	bd30      	pop	{r4, r5, pc}
 800fda6:	bf00      	nop
 800fda8:	2001d520 	.word	0x2001d520

0800fdac <GUI_ALLOC_AssignMemory>:
 800fdac:	4b02      	ldr	r3, [pc, #8]	; (800fdb8 <GUI_ALLOC_AssignMemory+0xc>)
 800fdae:	f021 0103 	bic.w	r1, r1, #3
 800fdb2:	6018      	str	r0, [r3, #0]
 800fdb4:	6059      	str	r1, [r3, #4]
 800fdb6:	4770      	bx	lr
 800fdb8:	2001d2ac 	.word	0x2001d2ac

0800fdbc <GUI_ALLOC_GetSize>:
 800fdbc:	b130      	cbz	r0, 800fdcc <GUI_ALLOC_GetSize+0x10>
 800fdbe:	4b04      	ldr	r3, [pc, #16]	; (800fdd0 <GUI_ALLOC_GetSize+0x14>)
 800fdc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdc2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800fdc6:	6843      	ldr	r3, [r0, #4]
 800fdc8:	6858      	ldr	r0, [r3, #4]
 800fdca:	380c      	subs	r0, #12
 800fdcc:	4770      	bx	lr
 800fdce:	bf00      	nop
 800fdd0:	2001d520 	.word	0x2001d520

0800fdd4 <GUI_ALLOC_Free>:
 800fdd4:	b510      	push	{r4, lr}
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	b180      	cbz	r0, 800fdfc <GUI_ALLOC_Free+0x28>
 800fdda:	4b09      	ldr	r3, [pc, #36]	; (800fe00 <GUI_ALLOC_Free+0x2c>)
 800fddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdde:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 800fde2:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	d108      	bne.n	800fdfc <GUI_ALLOC_Free+0x28>
 800fdea:	6851      	ldr	r1, [r2, #4]
 800fdec:	6848      	ldr	r0, [r1, #4]
 800fdee:	f7ff ff05 	bl	800fbfc <_AddFreeMemory>
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdf8:	f7ff beb2 	b.w	800fb60 <_PushFreeBlock>
 800fdfc:	bd10      	pop	{r4, pc}
 800fdfe:	bf00      	nop
 800fe00:	2001d520 	.word	0x2001d520

0800fe04 <_EnlargeBlocks>:
 800fe04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe08:	4c22      	ldr	r4, [pc, #136]	; (800fe94 <_EnlargeBlocks+0x90>)
 800fe0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fe0c:	b93b      	cbnz	r3, 800fe1e <_EnlargeBlocks+0x1a>
 800fe0e:	4b22      	ldr	r3, [pc, #136]	; (800fe98 <_EnlargeBlocks+0x94>)
 800fe10:	689d      	ldr	r5, [r3, #8]
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	3508      	adds	r5, #8
 800fe16:	fbb3 f5f5 	udiv	r5, r3, r5
 800fe1a:	3502      	adds	r5, #2
 800fe1c:	e003      	b.n	800fe26 <_EnlargeBlocks+0x22>
 800fe1e:	6923      	ldr	r3, [r4, #16]
 800fe20:	1d1d      	adds	r5, r3, #4
 800fe22:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800fe26:	00e8      	lsls	r0, r5, #3
 800fe28:	f000 f978 	bl	801011c <_Alloc>
 800fe2c:	4680      	mov	r8, r0
 800fe2e:	b360      	cbz	r0, 800fe8a <_EnlargeBlocks+0x86>
 800fe30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe32:	6922      	ldr	r2, [r4, #16]
 800fe34:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800fe36:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800fe3a:	00d2      	lsls	r2, r2, #3
 800fe3c:	685e      	ldr	r6, [r3, #4]
 800fe3e:	3608      	adds	r6, #8
 800fe40:	4630      	mov	r0, r6
 800fe42:	f006 fd19 	bl	8016878 <memcpy>
 800fe46:	6922      	ldr	r2, [r4, #16]
 800fe48:	6366      	str	r6, [r4, #52]	; 0x34
 800fe4a:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 800fe4e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800fe52:	3104      	adds	r1, #4
 800fe54:	4613      	mov	r3, r2
 800fe56:	1e68      	subs	r0, r5, #1
 800fe58:	4283      	cmp	r3, r0
 800fe5a:	f101 0108 	add.w	r1, r1, #8
 800fe5e:	d203      	bcs.n	800fe68 <_EnlargeBlocks+0x64>
 800fe60:	3301      	adds	r3, #1
 800fe62:	f841 3c08 	str.w	r3, [r1, #-8]
 800fe66:	e7f6      	b.n	800fe56 <_EnlargeBlocks+0x52>
 800fe68:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800fe6c:	2600      	movs	r6, #0
 800fe6e:	605e      	str	r6, [r3, #4]
 800fe70:	6863      	ldr	r3, [r4, #4]
 800fe72:	6262      	str	r2, [r4, #36]	; 0x24
 800fe74:	1a9b      	subs	r3, r3, r2
 800fe76:	442b      	add	r3, r5
 800fe78:	6063      	str	r3, [r4, #4]
 800fe7a:	6125      	str	r5, [r4, #16]
 800fe7c:	4638      	mov	r0, r7
 800fe7e:	b13f      	cbz	r7, 800fe90 <_EnlargeBlocks+0x8c>
 800fe80:	f7ff ffa8 	bl	800fdd4 <GUI_ALLOC_Free>
 800fe84:	4630      	mov	r0, r6
 800fe86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe8a:	2001      	movs	r0, #1
 800fe8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe94:	2001d520 	.word	0x2001d520
 800fe98:	2001d2ac 	.word	0x2001d2ac

0800fe9c <_InitOnce>:
 800fe9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe9e:	4e58      	ldr	r6, [pc, #352]	; (8010000 <_InitOnce+0x164>)
 800fea0:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800fea4:	2900      	cmp	r1, #0
 800fea6:	f040 80aa 	bne.w	800fffe <_InitOnce+0x162>
 800feaa:	4d56      	ldr	r5, [pc, #344]	; (8010004 <_InitOnce+0x168>)
 800feac:	686a      	ldr	r2, [r5, #4]
 800feae:	2301      	movs	r3, #1
 800feb0:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 800feb4:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800feb8:	bf28      	it	cs
 800feba:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 800febe:	682b      	ldr	r3, [r5, #0]
 800fec0:	0894      	lsrs	r4, r2, #2
 800fec2:	2000      	movs	r0, #0
 800fec4:	42a0      	cmp	r0, r4
 800fec6:	d00c      	beq.n	800fee2 <_InitOnce+0x46>
 800fec8:	1847      	adds	r7, r0, r1
 800feca:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800fece:	fbb7 fefe 	udiv	lr, r7, lr
 800fed2:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800fed6:	ebce 0707 	rsb	r7, lr, r7
 800feda:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 800fede:	3001      	adds	r0, #1
 800fee0:	e7f0      	b.n	800fec4 <_InitOnce+0x28>
 800fee2:	2000      	movs	r0, #0
 800fee4:	42a0      	cmp	r0, r4
 800fee6:	d016      	beq.n	800ff16 <_InitOnce+0x7a>
 800fee8:	1847      	adds	r7, r0, r1
 800feea:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800feee:	fbb7 fefe 	udiv	lr, r7, lr
 800fef2:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800fef6:	ebce 0e07 	rsb	lr, lr, r7
 800fefa:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800fefe:	4577      	cmp	r7, lr
 800ff00:	d007      	beq.n	800ff12 <_InitOnce+0x76>
 800ff02:	68aa      	ldr	r2, [r5, #8]
 800ff04:	4b3f      	ldr	r3, [pc, #252]	; (8010004 <_InitOnce+0x168>)
 800ff06:	2a00      	cmp	r2, #0
 800ff08:	d155      	bne.n	800ffb6 <_InitOnce+0x11a>
 800ff0a:	685a      	ldr	r2, [r3, #4]
 800ff0c:	0892      	lsrs	r2, r2, #2
 800ff0e:	609a      	str	r2, [r3, #8]
 800ff10:	e051      	b.n	800ffb6 <_InitOnce+0x11a>
 800ff12:	3001      	adds	r0, #1
 800ff14:	e7e6      	b.n	800fee4 <_InitOnce+0x48>
 800ff16:	3101      	adds	r1, #1
 800ff18:	2902      	cmp	r1, #2
 800ff1a:	d1d2      	bne.n	800fec2 <_InitOnce+0x26>
 800ff1c:	0854      	lsrs	r4, r2, #1
 800ff1e:	2100      	movs	r1, #0
 800ff20:	2000      	movs	r0, #0
 800ff22:	42a0      	cmp	r0, r4
 800ff24:	d00c      	beq.n	800ff40 <_InitOnce+0xa4>
 800ff26:	1847      	adds	r7, r0, r1
 800ff28:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800ff2c:	fbb7 fefe 	udiv	lr, r7, lr
 800ff30:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800ff34:	ebce 0707 	rsb	r7, lr, r7
 800ff38:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 800ff3c:	3001      	adds	r0, #1
 800ff3e:	e7f0      	b.n	800ff22 <_InitOnce+0x86>
 800ff40:	2000      	movs	r0, #0
 800ff42:	42a0      	cmp	r0, r4
 800ff44:	d00f      	beq.n	800ff66 <_InitOnce+0xca>
 800ff46:	1847      	adds	r7, r0, r1
 800ff48:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800ff4c:	fbb7 fefe 	udiv	lr, r7, lr
 800ff50:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800ff54:	ebce 0707 	rsb	r7, lr, r7
 800ff58:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 800ff5c:	b2bf      	uxth	r7, r7
 800ff5e:	45bc      	cmp	ip, r7
 800ff60:	d1cf      	bne.n	800ff02 <_InitOnce+0x66>
 800ff62:	3001      	adds	r0, #1
 800ff64:	e7ed      	b.n	800ff42 <_InitOnce+0xa6>
 800ff66:	3101      	adds	r1, #1
 800ff68:	2902      	cmp	r1, #2
 800ff6a:	d1d9      	bne.n	800ff20 <_InitOnce+0x84>
 800ff6c:	2100      	movs	r1, #0
 800ff6e:	2000      	movs	r0, #0
 800ff70:	4290      	cmp	r0, r2
 800ff72:	d007      	beq.n	800ff84 <_InitOnce+0xe8>
 800ff74:	1844      	adds	r4, r0, r1
 800ff76:	27ff      	movs	r7, #255	; 0xff
 800ff78:	fbb4 f7f7 	udiv	r7, r4, r7
 800ff7c:	443c      	add	r4, r7
 800ff7e:	541c      	strb	r4, [r3, r0]
 800ff80:	3001      	adds	r0, #1
 800ff82:	e7f5      	b.n	800ff70 <_InitOnce+0xd4>
 800ff84:	2000      	movs	r0, #0
 800ff86:	4290      	cmp	r0, r2
 800ff88:	d00b      	beq.n	800ffa2 <_InitOnce+0x106>
 800ff8a:	1844      	adds	r4, r0, r1
 800ff8c:	27ff      	movs	r7, #255	; 0xff
 800ff8e:	fbb4 f7f7 	udiv	r7, r4, r7
 800ff92:	443c      	add	r4, r7
 800ff94:	5c1f      	ldrb	r7, [r3, r0]
 800ff96:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 800ff9a:	42a7      	cmp	r7, r4
 800ff9c:	d1b1      	bne.n	800ff02 <_InitOnce+0x66>
 800ff9e:	3001      	adds	r0, #1
 800ffa0:	e7f1      	b.n	800ff86 <_InitOnce+0xea>
 800ffa2:	3101      	adds	r1, #1
 800ffa4:	2902      	cmp	r1, #2
 800ffa6:	d1e2      	bne.n	800ff6e <_InitOnce+0xd2>
 800ffa8:	2100      	movs	r1, #0
 800ffaa:	4291      	cmp	r1, r2
 800ffac:	d0a9      	beq.n	800ff02 <_InitOnce+0x66>
 800ffae:	2000      	movs	r0, #0
 800ffb0:	5458      	strb	r0, [r3, r1]
 800ffb2:	3101      	adds	r1, #1
 800ffb4:	e7f9      	b.n	800ffaa <_InitOnce+0x10e>
 800ffb6:	4814      	ldr	r0, [pc, #80]	; (8010008 <_InitOnce+0x16c>)
 800ffb8:	4b14      	ldr	r3, [pc, #80]	; (801000c <_InitOnce+0x170>)
 800ffba:	6003      	str	r3, [r0, #0]
 800ffbc:	f7ff fabc 	bl	800f538 <GUI__RegisterExit>
 800ffc0:	235a      	movs	r3, #90	; 0x5a
 800ffc2:	6233      	str	r3, [r6, #32]
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	2110      	movs	r1, #16
 800ffc8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800ffcc:	4099      	lsls	r1, r3
 800ffce:	3301      	adds	r3, #1
 800ffd0:	2b10      	cmp	r3, #16
 800ffd2:	4c0b      	ldr	r4, [pc, #44]	; (8010000 <_InitOnce+0x164>)
 800ffd4:	6411      	str	r1, [r2, #64]	; 0x40
 800ffd6:	d1f6      	bne.n	800ffc6 <_InitOnce+0x12a>
 800ffd8:	6868      	ldr	r0, [r5, #4]
 800ffda:	6829      	ldr	r1, [r5, #0]
 800ffdc:	63a1      	str	r1, [r4, #56]	; 0x38
 800ffde:	2302      	movs	r3, #2
 800ffe0:	6123      	str	r3, [r4, #16]
 800ffe2:	f1a0 0314 	sub.w	r3, r0, #20
 800ffe6:	440b      	add	r3, r1
 800ffe8:	2501      	movs	r5, #1
 800ffea:	6363      	str	r3, [r4, #52]	; 0x34
 800ffec:	60e0      	str	r0, [r4, #12]
 800ffee:	605d      	str	r5, [r3, #4]
 800fff0:	6265      	str	r5, [r4, #36]	; 0x24
 800fff2:	6065      	str	r5, [r4, #4]
 800fff4:	f7ff fe02 	bl	800fbfc <_AddFreeMemory>
 800fff8:	f7ff ff04 	bl	800fe04 <_EnlargeBlocks>
 800fffc:	6325      	str	r5, [r4, #48]	; 0x30
 800fffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010000:	2001d520 	.word	0x2001d520
 8010004:	2001d2ac 	.word	0x2001d2ac
 8010008:	2001d2b8 	.word	0x2001d2b8
 801000c:	0800fb85 	.word	0x0800fb85

08010010 <GUI_ALLOC_GetFixedBlock>:
 8010010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010014:	4605      	mov	r5, r0
 8010016:	4e26      	ldr	r6, [pc, #152]	; (80100b0 <GUI_ALLOC_GetFixedBlock+0xa0>)
 8010018:	3503      	adds	r5, #3
 801001a:	f7ff ff3f 	bl	800fe9c <_InitOnce>
 801001e:	f025 0503 	bic.w	r5, r5, #3
 8010022:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8010024:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8010026:	3504      	adds	r5, #4
 8010028:	429d      	cmp	r5, r3
 801002a:	bf38      	it	cc
 801002c:	461d      	movcc	r5, r3
 801002e:	4614      	mov	r4, r2
 8010030:	b12c      	cbz	r4, 801003e <GUI_ALLOC_GetFixedBlock+0x2e>
 8010032:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010036:	42ab      	cmp	r3, r5
 8010038:	d02c      	beq.n	8010094 <GUI_ALLOC_GetFixedBlock+0x84>
 801003a:	6824      	ldr	r4, [r4, #0]
 801003c:	e7f8      	b.n	8010030 <GUI_ALLOC_GetFixedBlock+0x20>
 801003e:	68f3      	ldr	r3, [r6, #12]
 8010040:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8010042:	eb02 0803 	add.w	r8, r2, r3
 8010046:	f858 7c04 	ldr.w	r7, [r8, #-4]
 801004a:	ebc7 0708 	rsb	r7, r7, r8
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	b133      	cbz	r3, 8010060 <GUI_ALLOC_GetFixedBlock+0x50>
 8010052:	4620      	mov	r0, r4
 8010054:	f7ff fe22 	bl	800fc9c <_RemoveHoles>
 8010058:	f858 7c04 	ldr.w	r7, [r8, #-4]
 801005c:	ebc7 0708 	rsb	r7, r7, r8
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	bb13      	cbnz	r3, 80100aa <GUI_ALLOC_GetFixedBlock+0x9a>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	42ab      	cmp	r3, r5
 8010068:	db1f      	blt.n	80100aa <GUI_ALLOC_GetFixedBlock+0x9a>
 801006a:	4638      	mov	r0, r7
 801006c:	1d1c      	adds	r4, r3, #4
 801006e:	f7ff fda5 	bl	800fbbc <_RemoveFreeBlock>
 8010072:	68f3      	ldr	r3, [r6, #12]
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	1b5b      	subs	r3, r3, r5
 8010078:	60f3      	str	r3, [r6, #12]
 801007a:	6973      	ldr	r3, [r6, #20]
 801007c:	1b64      	subs	r4, r4, r5
 801007e:	442b      	add	r3, r5
 8010080:	1b40      	subs	r0, r0, r5
 8010082:	443c      	add	r4, r7
 8010084:	6173      	str	r3, [r6, #20]
 8010086:	d002      	beq.n	801008e <GUI_ALLOC_GetFixedBlock+0x7e>
 8010088:	4639      	mov	r1, r7
 801008a:	f7ff fdb7 	bl	800fbfc <_AddFreeMemory>
 801008e:	f844 5c04 	str.w	r5, [r4, #-4]
 8010092:	e00a      	b.n	80100aa <GUI_ALLOC_GetFixedBlock+0x9a>
 8010094:	6823      	ldr	r3, [r4, #0]
 8010096:	b10b      	cbz	r3, 801009c <GUI_ALLOC_GetFixedBlock+0x8c>
 8010098:	6861      	ldr	r1, [r4, #4]
 801009a:	6059      	str	r1, [r3, #4]
 801009c:	6861      	ldr	r1, [r4, #4]
 801009e:	b101      	cbz	r1, 80100a2 <GUI_ALLOC_GetFixedBlock+0x92>
 80100a0:	600b      	str	r3, [r1, #0]
 80100a2:	42a2      	cmp	r2, r4
 80100a4:	d101      	bne.n	80100aa <GUI_ALLOC_GetFixedBlock+0x9a>
 80100a6:	6823      	ldr	r3, [r4, #0]
 80100a8:	63f3      	str	r3, [r6, #60]	; 0x3c
 80100aa:	4620      	mov	r0, r4
 80100ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b0:	2001d520 	.word	0x2001d520

080100b4 <GUI_ALLOC_GetMaxSize>:
 80100b4:	b508      	push	{r3, lr}
 80100b6:	f7ff fef1 	bl	800fe9c <_InitOnce>
 80100ba:	2200      	movs	r2, #0
 80100bc:	4b0b      	ldr	r3, [pc, #44]	; (80100ec <GUI_ALLOC_GetMaxSize+0x38>)
 80100be:	4413      	add	r3, r2
 80100c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80100c4:	b113      	cbz	r3, 80100cc <GUI_ALLOC_GetMaxSize+0x18>
 80100c6:	689b      	ldr	r3, [r3, #8]
 80100c8:	2000      	movs	r0, #0
 80100ca:	e00b      	b.n	80100e4 <GUI_ALLOC_GetMaxSize+0x30>
 80100cc:	3a08      	subs	r2, #8
 80100ce:	f112 0f80 	cmn.w	r2, #128	; 0x80
 80100d2:	d1f3      	bne.n	80100bc <GUI_ALLOC_GetMaxSize+0x8>
 80100d4:	e7f8      	b.n	80100c8 <GUI_ALLOC_GetMaxSize+0x14>
 80100d6:	685a      	ldr	r2, [r3, #4]
 80100d8:	689b      	ldr	r3, [r3, #8]
 80100da:	4290      	cmp	r0, r2
 80100dc:	bf38      	it	cc
 80100de:	4610      	movcc	r0, r2
 80100e0:	b113      	cbz	r3, 80100e8 <GUI_ALLOC_GetMaxSize+0x34>
 80100e2:	689b      	ldr	r3, [r3, #8]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d1f6      	bne.n	80100d6 <GUI_ALLOC_GetMaxSize+0x22>
 80100e8:	380c      	subs	r0, #12
 80100ea:	bd08      	pop	{r3, pc}
 80100ec:	2001d520 	.word	0x2001d520

080100f0 <GUI_ALLOC_RequestSize>:
 80100f0:	b508      	push	{r3, lr}
 80100f2:	f7ff ffdf 	bl	80100b4 <GUI_ALLOC_GetMaxSize>
 80100f6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 80100fa:	f04f 0364 	mov.w	r3, #100	; 0x64
 80100fe:	4a06      	ldr	r2, [pc, #24]	; (8010118 <GUI_ALLOC_RequestSize+0x28>)
 8010100:	d904      	bls.n	801010c <GUI_ALLOC_RequestSize+0x1c>
 8010102:	fb90 f0f3 	sdiv	r0, r0, r3
 8010106:	6a13      	ldr	r3, [r2, #32]
 8010108:	4358      	muls	r0, r3
 801010a:	bd08      	pop	{r3, pc}
 801010c:	6a12      	ldr	r2, [r2, #32]
 801010e:	4350      	muls	r0, r2
 8010110:	fbb0 f0f3 	udiv	r0, r0, r3
 8010114:	bd08      	pop	{r3, pc}
 8010116:	bf00      	nop
 8010118:	2001d520 	.word	0x2001d520

0801011c <_Alloc>:
 801011c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010120:	4d38      	ldr	r5, [pc, #224]	; (8010204 <_Alloc+0xe8>)
 8010122:	4604      	mov	r4, r0
 8010124:	f7ff feba 	bl	800fe9c <_InitOnce>
 8010128:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 801012a:	682b      	ldr	r3, [r5, #0]
 801012c:	42bc      	cmp	r4, r7
 801012e:	bf24      	itt	cs
 8010130:	1ce7      	addcs	r7, r4, #3
 8010132:	f027 0703 	biccs.w	r7, r7, #3
 8010136:	370c      	adds	r7, #12
 8010138:	429f      	cmp	r7, r3
 801013a:	4c32      	ldr	r4, [pc, #200]	; (8010204 <_Alloc+0xe8>)
 801013c:	d83e      	bhi.n	80101bc <_Alloc+0xa0>
 801013e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010140:	6862      	ldr	r2, [r4, #4]
 8010142:	429a      	cmp	r2, r3
 8010144:	d90f      	bls.n	8010166 <_Alloc+0x4a>
 8010146:	686b      	ldr	r3, [r5, #4]
 8010148:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 801014a:	3b01      	subs	r3, #1
 801014c:	606b      	str	r3, [r5, #4]
 801014e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010150:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8010154:	eb03 0209 	add.w	r2, r3, r9
 8010158:	6852      	ldr	r2, [r2, #4]
 801015a:	626a      	str	r2, [r5, #36]	; 0x24
 801015c:	2201      	movs	r2, #1
 801015e:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 8010162:	b956      	cbnz	r6, 801017a <_Alloc+0x5e>
 8010164:	e02a      	b.n	80101bc <_Alloc+0xa0>
 8010166:	3b01      	subs	r3, #1
 8010168:	6323      	str	r3, [r4, #48]	; 0x30
 801016a:	f7ff fe4b 	bl	800fe04 <_EnlargeBlocks>
 801016e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010170:	3301      	adds	r3, #1
 8010172:	6323      	str	r3, [r4, #48]	; 0x30
 8010174:	2800      	cmp	r0, #0
 8010176:	d0e6      	beq.n	8010146 <_Alloc+0x2a>
 8010178:	e020      	b.n	80101bc <_Alloc+0xa0>
 801017a:	230f      	movs	r3, #15
 801017c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8010180:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8010182:	4297      	cmp	r7, r2
 8010184:	d20c      	bcs.n	80101a0 <_Alloc+0x84>
 8010186:	f113 33ff 	adds.w	r3, r3, #4294967295
 801018a:	d2f7      	bcs.n	801017c <_Alloc+0x60>
 801018c:	e008      	b.n	80101a0 <_Alloc+0x84>
 801018e:	6894      	ldr	r4, [r2, #8]
 8010190:	b12c      	cbz	r4, 801019e <_Alloc+0x82>
 8010192:	6862      	ldr	r2, [r4, #4]
 8010194:	4297      	cmp	r7, r2
 8010196:	d914      	bls.n	80101c2 <_Alloc+0xa6>
 8010198:	68a2      	ldr	r2, [r4, #8]
 801019a:	2a00      	cmp	r2, #0
 801019c:	d1f7      	bne.n	801018e <_Alloc+0x72>
 801019e:	3301      	adds	r3, #1
 80101a0:	2b0f      	cmp	r3, #15
 80101a2:	d803      	bhi.n	80101ac <_Alloc+0x90>
 80101a4:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80101a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80101aa:	e7f6      	b.n	801019a <_Alloc+0x7e>
 80101ac:	4638      	mov	r0, r7
 80101ae:	f7ff fd75 	bl	800fc9c <_RemoveHoles>
 80101b2:	2800      	cmp	r0, #0
 80101b4:	d0e1      	beq.n	801017a <_Alloc+0x5e>
 80101b6:	4630      	mov	r0, r6
 80101b8:	f7ff fcd2 	bl	800fb60 <_PushFreeBlock>
 80101bc:	2000      	movs	r0, #0
 80101be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101c2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80101c6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80101c8:	ebc7 0208 	rsb	r2, r7, r8
 80101cc:	330c      	adds	r3, #12
 80101ce:	4620      	mov	r0, r4
 80101d0:	429a      	cmp	r2, r3
 80101d2:	bf38      	it	cc
 80101d4:	4647      	movcc	r7, r8
 80101d6:	f7ff fcf1 	bl	800fbbc <_RemoveFreeBlock>
 80101da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80101dc:	444b      	add	r3, r9
 80101de:	19e1      	adds	r1, r4, r7
 80101e0:	605c      	str	r4, [r3, #4]
 80101e2:	45b8      	cmp	r8, r7
 80101e4:	f04f 0300 	mov.w	r3, #0
 80101e8:	e884 00c0 	stmia.w	r4, {r6, r7}
 80101ec:	60a3      	str	r3, [r4, #8]
 80101ee:	6124      	str	r4, [r4, #16]
 80101f0:	f841 7c04 	str.w	r7, [r1, #-4]
 80101f4:	dd03      	ble.n	80101fe <_Alloc+0xe2>
 80101f6:	ebc7 0008 	rsb	r0, r7, r8
 80101fa:	f7ff fcff 	bl	800fbfc <_AddFreeMemory>
 80101fe:	4630      	mov	r0, r6
 8010200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010204:	2001d520 	.word	0x2001d520

08010208 <GUI_ALLOC_AllocNoInit>:
 8010208:	b108      	cbz	r0, 801020e <GUI_ALLOC_AllocNoInit+0x6>
 801020a:	f7ff bf87 	b.w	801011c <_Alloc>
 801020e:	4770      	bx	lr

08010210 <GUI_ALLOC_FreePtr>:
 8010210:	b510      	push	{r4, lr}
 8010212:	4604      	mov	r4, r0
 8010214:	6800      	ldr	r0, [r0, #0]
 8010216:	f7ff fddd 	bl	800fdd4 <GUI_ALLOC_Free>
 801021a:	2300      	movs	r3, #0
 801021c:	6023      	str	r3, [r4, #0]
 801021e:	bd10      	pop	{r4, pc}

08010220 <GUI_ALLOC_FreePtrArray>:
 8010220:	b570      	push	{r4, r5, r6, lr}
 8010222:	4605      	mov	r5, r0
 8010224:	460e      	mov	r6, r1
 8010226:	2400      	movs	r4, #0
 8010228:	42b4      	cmp	r4, r6
 801022a:	da05      	bge.n	8010238 <GUI_ALLOC_FreePtrArray+0x18>
 801022c:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8010230:	f7ff ffee 	bl	8010210 <GUI_ALLOC_FreePtr>
 8010234:	3401      	adds	r4, #1
 8010236:	e7f7      	b.n	8010228 <GUI_ALLOC_FreePtrArray+0x8>
 8010238:	bd70      	pop	{r4, r5, r6, pc}

0801023a <GUI_ALLOC_AllocZero>:
 801023a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801023c:	4605      	mov	r5, r0
 801023e:	f7ff ffe3 	bl	8010208 <GUI_ALLOC_AllocNoInit>
 8010242:	4606      	mov	r6, r0
 8010244:	b158      	cbz	r0, 801025e <GUI_ALLOC_AllocZero+0x24>
 8010246:	f7ff fd8b 	bl	800fd60 <GUI_ALLOC_LockH>
 801024a:	ac02      	add	r4, sp, #8
 801024c:	2100      	movs	r1, #0
 801024e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010252:	462a      	mov	r2, r5
 8010254:	f7fd fbcf 	bl	800d9f6 <GUI__memset>
 8010258:	4620      	mov	r0, r4
 801025a:	f7ff fd8f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 801025e:	4630      	mov	r0, r6
 8010260:	b002      	add	sp, #8
 8010262:	bd70      	pop	{r4, r5, r6, pc}

08010264 <GUI_ALLOC_AllocInit>:
 8010264:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010266:	4605      	mov	r5, r0
 8010268:	460c      	mov	r4, r1
 801026a:	b909      	cbnz	r1, 8010270 <GUI_ALLOC_AllocInit+0xc>
 801026c:	2000      	movs	r0, #0
 801026e:	e014      	b.n	801029a <GUI_ALLOC_AllocInit+0x36>
 8010270:	4608      	mov	r0, r1
 8010272:	f7ff ffc9 	bl	8010208 <GUI_ALLOC_AllocNoInit>
 8010276:	4606      	mov	r6, r0
 8010278:	2800      	cmp	r0, #0
 801027a:	d0f7      	beq.n	801026c <GUI_ALLOC_AllocInit+0x8>
 801027c:	f7ff fd70 	bl	800fd60 <GUI_ALLOC_LockH>
 8010280:	4629      	mov	r1, r5
 8010282:	9001      	str	r0, [sp, #4]
 8010284:	4622      	mov	r2, r4
 8010286:	b115      	cbz	r5, 801028e <GUI_ALLOC_AllocInit+0x2a>
 8010288:	f006 faf6 	bl	8016878 <memcpy>
 801028c:	e001      	b.n	8010292 <GUI_ALLOC_AllocInit+0x2e>
 801028e:	f7fd fbb2 	bl	800d9f6 <GUI__memset>
 8010292:	a801      	add	r0, sp, #4
 8010294:	f7ff fd72 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010298:	4630      	mov	r0, r6
 801029a:	b002      	add	sp, #8
 801029c:	bd70      	pop	{r4, r5, r6, pc}
	...

080102a0 <LCD_Index2Color_M565>:
 80102a0:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 80102a4:	4b06      	ldr	r3, [pc, #24]	; (80102c0 <LCD_Index2Color_M565+0x20>)
 80102a6:	f000 021f 	and.w	r2, r0, #31
 80102aa:	f3c0 1045 	ubfx	r0, r0, #5, #6
 80102ae:	5c9a      	ldrb	r2, [r3, r2]
 80102b0:	5c5b      	ldrb	r3, [r3, r1]
 80102b2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80102b6:	4a03      	ldr	r2, [pc, #12]	; (80102c4 <LCD_Index2Color_M565+0x24>)
 80102b8:	5c10      	ldrb	r0, [r2, r0]
 80102ba:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80102be:	4770      	bx	lr
 80102c0:	0801d482 	.word	0x0801d482
 80102c4:	0801d442 	.word	0x0801d442

080102c8 <_Color2Index_M565>:
 80102c8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80102cc:	4b06      	ldr	r3, [pc, #24]	; (80102e8 <_Color2Index_M565+0x20>)
 80102ce:	b2c2      	uxtb	r2, r0
 80102d0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80102d4:	5c9a      	ldrb	r2, [r3, r2]
 80102d6:	5c5b      	ldrb	r3, [r3, r1]
 80102d8:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 80102dc:	4a03      	ldr	r2, [pc, #12]	; (80102ec <_Color2Index_M565+0x24>)
 80102de:	5c10      	ldrb	r0, [r2, r0]
 80102e0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 80102e4:	4770      	bx	lr
 80102e6:	bf00      	nop
 80102e8:	0801d5a2 	.word	0x0801d5a2
 80102ec:	0801d4a2 	.word	0x0801d4a2

080102f0 <_GetIndexMask_M565>:
 80102f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80102f4:	4770      	bx	lr
	...

080102f8 <_Color2IndexBulk>:
 80102f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102fa:	4f0f      	ldr	r7, [pc, #60]	; (8010338 <_Color2IndexBulk+0x40>)
 80102fc:	683f      	ldr	r7, [r7, #0]
 80102fe:	4606      	mov	r6, r0
 8010300:	460d      	mov	r5, r1
 8010302:	4614      	mov	r4, r2
 8010304:	469c      	mov	ip, r3
 8010306:	b10f      	cbz	r7, 801030c <_Color2IndexBulk+0x14>
 8010308:	47b8      	blx	r7
 801030a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801030c:	f856 2b04 	ldr.w	r2, [r6], #4
 8010310:	490a      	ldr	r1, [pc, #40]	; (801033c <_Color2IndexBulk+0x44>)
 8010312:	b2d3      	uxtb	r3, r2
 8010314:	3c01      	subs	r4, #1
 8010316:	5cc8      	ldrb	r0, [r1, r3]
 8010318:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801031c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8010320:	5ccb      	ldrb	r3, [r1, r3]
 8010322:	4907      	ldr	r1, [pc, #28]	; (8010340 <_Color2IndexBulk+0x48>)
 8010324:	5c8a      	ldrb	r2, [r1, r2]
 8010326:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
 801032a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801032e:	802b      	strh	r3, [r5, #0]
 8010330:	4465      	add	r5, ip
 8010332:	d1eb      	bne.n	801030c <_Color2IndexBulk+0x14>
 8010334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010336:	bf00      	nop
 8010338:	2001d2c4 	.word	0x2001d2c4
 801033c:	0801d5a2 	.word	0x0801d5a2
 8010340:	0801d4a2 	.word	0x0801d4a2

08010344 <_Index2ColorBulk>:
 8010344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010346:	4e13      	ldr	r6, [pc, #76]	; (8010394 <_Index2ColorBulk+0x50>)
 8010348:	6836      	ldr	r6, [r6, #0]
 801034a:	4684      	mov	ip, r0
 801034c:	4614      	mov	r4, r2
 801034e:	461d      	mov	r5, r3
 8010350:	b10e      	cbz	r6, 8010356 <_Index2ColorBulk+0x12>
 8010352:	47b0      	blx	r6
 8010354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010356:	1e50      	subs	r0, r2, #1
 8010358:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801035c:	3a01      	subs	r2, #1
 801035e:	fb03 c000 	mla	r0, r3, r0, ip
 8010362:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010366:	8802      	ldrh	r2, [r0, #0]
 8010368:	4b0b      	ldr	r3, [pc, #44]	; (8010398 <_Index2ColorBulk+0x54>)
 801036a:	f002 061f 	and.w	r6, r2, #31
 801036e:	0ad7      	lsrs	r7, r2, #11
 8010370:	5d9e      	ldrb	r6, [r3, r6]
 8010372:	5ddb      	ldrb	r3, [r3, r7]
 8010374:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8010378:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 801037c:	4e07      	ldr	r6, [pc, #28]	; (801039c <_Index2ColorBulk+0x58>)
 801037e:	5cb2      	ldrb	r2, [r6, r2]
 8010380:	3c01      	subs	r4, #1
 8010382:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010386:	f841 3904 	str.w	r3, [r1], #-4
 801038a:	ebc5 0000 	rsb	r0, r5, r0
 801038e:	d1ea      	bne.n	8010366 <_Index2ColorBulk+0x22>
 8010390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010392:	bf00      	nop
 8010394:	2001d2c0 	.word	0x2001d2c0
 8010398:	0801d482 	.word	0x0801d482
 801039c:	0801d442 	.word	0x0801d442

080103a0 <LCD_Index2Color_888>:
 80103a0:	4770      	bx	lr

080103a2 <LCD_Index2Color_8888>:
 80103a2:	4770      	bx	lr

080103a4 <_Color2Index_8888>:
 80103a4:	4770      	bx	lr

080103a6 <_GetIndexMask_8888>:
 80103a6:	f04f 30ff 	mov.w	r0, #4294967295
 80103aa:	4770      	bx	lr

080103ac <_Color2IndexBulk>:
 80103ac:	b510      	push	{r4, lr}
 80103ae:	f850 4b04 	ldr.w	r4, [r0], #4
 80103b2:	600c      	str	r4, [r1, #0]
 80103b4:	3a01      	subs	r2, #1
 80103b6:	4419      	add	r1, r3
 80103b8:	d1f9      	bne.n	80103ae <_Color2IndexBulk+0x2>
 80103ba:	bd10      	pop	{r4, pc}

080103bc <_Index2ColorBulk>:
 80103bc:	b510      	push	{r4, lr}
 80103be:	6804      	ldr	r4, [r0, #0]
 80103c0:	f841 4b04 	str.w	r4, [r1], #4
 80103c4:	3a01      	subs	r2, #1
 80103c6:	4418      	add	r0, r3
 80103c8:	d1f9      	bne.n	80103be <_Index2ColorBulk+0x2>
 80103ca:	bd10      	pop	{r4, pc}

080103cc <_DrawDownRect>:
 80103cc:	b510      	push	{r4, lr}
 80103ce:	b09c      	sub	sp, #112	; 0x70
 80103d0:	4604      	mov	r4, r0
 80103d2:	4668      	mov	r0, sp
 80103d4:	f7fe fbfe 	bl	800ebd4 <GUI_SaveContext_W>
 80103d8:	4b09      	ldr	r3, [pc, #36]	; (8010400 <_DrawDownRect+0x34>)
 80103da:	6818      	ldr	r0, [r3, #0]
 80103dc:	f7fd facc 	bl	800d978 <LCD_SetColor>
 80103e0:	f9b4 0000 	ldrsh.w	r0, [r4]
 80103e4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80103e8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80103ec:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80103f0:	f005 fd68 	bl	8015ec4 <GUI_DrawRect>
 80103f4:	4668      	mov	r0, sp
 80103f6:	f7fe fbf7 	bl	800ebe8 <GUI_RestoreContext>
 80103fa:	b01c      	add	sp, #112	; 0x70
 80103fc:	bd10      	pop	{r4, pc}
 80103fe:	bf00      	nop
 8010400:	2001d2c8 	.word	0x2001d2c8

08010404 <_DrawUpRect>:
 8010404:	b510      	push	{r4, lr}
 8010406:	b09c      	sub	sp, #112	; 0x70
 8010408:	4604      	mov	r4, r0
 801040a:	4668      	mov	r0, sp
 801040c:	f7fe fbe2 	bl	800ebd4 <GUI_SaveContext_W>
 8010410:	4b09      	ldr	r3, [pc, #36]	; (8010438 <_DrawUpRect+0x34>)
 8010412:	6818      	ldr	r0, [r3, #0]
 8010414:	f7fd fab0 	bl	800d978 <LCD_SetColor>
 8010418:	f9b4 0000 	ldrsh.w	r0, [r4]
 801041c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8010420:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010424:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8010428:	f005 fd4c 	bl	8015ec4 <GUI_DrawRect>
 801042c:	4668      	mov	r0, sp
 801042e:	f7fe fbdb 	bl	800ebe8 <GUI_RestoreContext>
 8010432:	b01c      	add	sp, #112	; 0x70
 8010434:	bd10      	pop	{r4, pc}
 8010436:	bf00      	nop
 8010438:	2001d2c8 	.word	0x2001d2c8

0801043c <_DrawDown>:
 801043c:	b507      	push	{r0, r1, r2, lr}
 801043e:	4668      	mov	r0, sp
 8010440:	f7f9 fa86 	bl	8009950 <WM_GetClientRect>
 8010444:	4668      	mov	r0, sp
 8010446:	f7ff ffc1 	bl	80103cc <_DrawDownRect>
 801044a:	b003      	add	sp, #12
 801044c:	f85d fb04 	ldr.w	pc, [sp], #4

08010450 <_DrawUp>:
 8010450:	b507      	push	{r0, r1, r2, lr}
 8010452:	4668      	mov	r0, sp
 8010454:	f7f9 fa7c 	bl	8009950 <WM_GetClientRect>
 8010458:	4668      	mov	r0, sp
 801045a:	f7ff ffd3 	bl	8010404 <_DrawUpRect>
 801045e:	b003      	add	sp, #12
 8010460:	f85d fb04 	ldr.w	pc, [sp], #4

08010464 <SCROLLBAR_CreateAttached>:
 8010464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010466:	f001 0308 	and.w	r3, r1, #8
 801046a:	2b00      	cmp	r3, #0
 801046c:	f240 348a 	movw	r4, #906	; 0x38a
 8010470:	f240 528a 	movw	r2, #1418	; 0x58a
 8010474:	bf08      	it	eq
 8010476:	4622      	moveq	r2, r4
 8010478:	bf0c      	ite	eq
 801047a:	23ff      	moveq	r3, #255	; 0xff
 801047c:	23fe      	movne	r3, #254	; 0xfe
 801047e:	e88d 0005 	stmia.w	sp, {r0, r2}
 8010482:	2000      	movs	r0, #0
 8010484:	9102      	str	r1, [sp, #8]
 8010486:	9303      	str	r3, [sp, #12]
 8010488:	4602      	mov	r2, r0
 801048a:	4603      	mov	r3, r0
 801048c:	4601      	mov	r1, r0
 801048e:	f000 f8ad 	bl	80105ec <SCROLLBAR_CreateEx>
 8010492:	2106      	movs	r1, #6
 8010494:	4604      	mov	r4, r0
 8010496:	f7f9 f846 	bl	8009526 <WM_NotifyParent>
 801049a:	4620      	mov	r0, r4
 801049c:	b004      	add	sp, #16
 801049e:	bd10      	pop	{r4, pc}

080104a0 <_DeleteTimer>:
 80104a0:	b507      	push	{r0, r1, r2, lr}
 80104a2:	f7ff fc5d 	bl	800fd60 <GUI_ALLOC_LockH>
 80104a6:	9001      	str	r0, [sp, #4]
 80104a8:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80104aa:	f001 f961 	bl	8011770 <WM_DeleteTimer>
 80104ae:	a802      	add	r0, sp, #8
 80104b0:	2200      	movs	r2, #0
 80104b2:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80104b6:	665a      	str	r2, [r3, #100]	; 0x64
 80104b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80104ba:	f7ff fc5f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80104be:	b003      	add	sp, #12
 80104c0:	f85d fb04 	ldr.w	pc, [sp], #4

080104c4 <SCROLLBAR__Rect2VRect>:
 80104c4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80104c6:	071b      	lsls	r3, r3, #28
 80104c8:	b510      	push	{r4, lr}
 80104ca:	d512      	bpl.n	80104f2 <SCROLLBAR__Rect2VRect+0x2e>
 80104cc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80104d0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80104d4:	8808      	ldrh	r0, [r1, #0]
 80104d6:	884c      	ldrh	r4, [r1, #2]
 80104d8:	800c      	strh	r4, [r1, #0]
 80104da:	1ad3      	subs	r3, r2, r3
 80104dc:	888a      	ldrh	r2, [r1, #4]
 80104de:	88cc      	ldrh	r4, [r1, #6]
 80104e0:	808c      	strh	r4, [r1, #4]
 80104e2:	3301      	adds	r3, #1
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	43c0      	mvns	r0, r0
 80104e8:	43d2      	mvns	r2, r2
 80104ea:	4418      	add	r0, r3
 80104ec:	4413      	add	r3, r2
 80104ee:	80c8      	strh	r0, [r1, #6]
 80104f0:	804b      	strh	r3, [r1, #2]
 80104f2:	bd10      	pop	{r4, pc}

080104f4 <SCROLLBAR__InvalidatePartner>:
 80104f4:	b510      	push	{r4, lr}
 80104f6:	4604      	mov	r4, r0
 80104f8:	f001 fa5d 	bl	80119b6 <WM_GetScrollPartner>
 80104fc:	f7f9 ff41 	bl	800a382 <WM_InvalidateWindow>
 8010500:	4620      	mov	r0, r4
 8010502:	f7f9 f945 	bl	8009790 <WM_GetParent>
 8010506:	2125      	movs	r1, #37	; 0x25
 8010508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801050c:	f7f8 bf8e 	b.w	800942c <WM_SendMessageNoPara>

08010510 <SCROLLBAR_CreateUser>:
 8010510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010512:	b089      	sub	sp, #36	; 0x24
 8010514:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8010516:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8010518:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801051a:	b9fa      	cbnz	r2, 801055c <SCROLLBAR_CreateUser+0x4c>
 801051c:	b9f3      	cbnz	r3, 801055c <SCROLLBAR_CreateUser+0x4c>
 801051e:	4630      	mov	r0, r6
 8010520:	a906      	add	r1, sp, #24
 8010522:	f7f9 f991 	bl	8009848 <WM_GetInsideRectEx>
 8010526:	f014 0f08 	tst.w	r4, #8
 801052a:	4b2c      	ldr	r3, [pc, #176]	; (80105dc <SCROLLBAR_CreateUser+0xcc>)
 801052c:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8010530:	f9bd e01e 	ldrsh.w	lr, [sp, #30]
 8010534:	d009      	beq.n	801054a <SCROLLBAR_CreateUser+0x3a>
 8010536:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 801053a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801053e:	1c78      	adds	r0, r7, #1
 8010540:	ebc1 030e 	rsb	r3, r1, lr
 8010544:	1a80      	subs	r0, r0, r2
 8010546:	3301      	adds	r3, #1
 8010548:	e008      	b.n	801055c <SCROLLBAR_CreateUser+0x4c>
 801054a:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 801054e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010552:	f10e 0101 	add.w	r1, lr, #1
 8010556:	1a3a      	subs	r2, r7, r0
 8010558:	1ac9      	subs	r1, r1, r3
 801055a:	3201      	adds	r2, #1
 801055c:	9600      	str	r6, [sp, #0]
 801055e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8010560:	9601      	str	r6, [sp, #4]
 8010562:	4e1f      	ldr	r6, [pc, #124]	; (80105e0 <SCROLLBAR_CreateUser+0xd0>)
 8010564:	9602      	str	r6, [sp, #8]
 8010566:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010568:	363c      	adds	r6, #60	; 0x3c
 801056a:	9603      	str	r6, [sp, #12]
 801056c:	f7f9 ff4a 	bl	800a404 <WM_CreateWindowAsChild>
 8010570:	4606      	mov	r6, r0
 8010572:	2800      	cmp	r0, #0
 8010574:	d02f      	beq.n	80105d6 <SCROLLBAR_CreateUser+0xc6>
 8010576:	f7ff fbf3 	bl	800fd60 <GUI_ALLOC_LockH>
 801057a:	f004 0208 	and.w	r2, r4, #8
 801057e:	06e3      	lsls	r3, r4, #27
 8010580:	bf48      	it	mi
 8010582:	f042 0210 	orrmi.w	r2, r2, #16
 8010586:	f1a5 03fe 	sub.w	r3, r5, #254	; 0xfe
 801058a:	bf48      	it	mi
 801058c:	b292      	uxthmi	r2, r2
 801058e:	2b01      	cmp	r3, #1
 8010590:	bf88      	it	hi
 8010592:	f042 0210 	orrhi.w	r2, r2, #16
 8010596:	4629      	mov	r1, r5
 8010598:	9005      	str	r0, [sp, #20]
 801059a:	f7f6 fa95 	bl	8006ac8 <WIDGET__Init>
 801059e:	4b11      	ldr	r3, [pc, #68]	; (80105e4 <SCROLLBAR_CreateUser+0xd4>)
 80105a0:	af08      	add	r7, sp, #32
 80105a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80105a4:	f857 4d0c 	ldr.w	r4, [r7, #-12]!
 80105a8:	f104 0534 	add.w	r5, r4, #52	; 0x34
 80105ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80105b0:	2364      	movs	r3, #100	; 0x64
 80105b2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80105b4:	4d0c      	ldr	r5, [pc, #48]	; (80105e8 <SCROLLBAR_CreateUser+0xd8>)
 80105b6:	230a      	movs	r3, #10
 80105b8:	6563      	str	r3, [r4, #84]	; 0x54
 80105ba:	2300      	movs	r3, #0
 80105bc:	6523      	str	r3, [r4, #80]	; 0x50
 80105be:	682b      	ldr	r3, [r5, #0]
 80105c0:	6463      	str	r3, [r4, #68]	; 0x44
 80105c2:	4638      	mov	r0, r7
 80105c4:	f7ff fbda 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80105c8:	682b      	ldr	r3, [r5, #0]
 80105ca:	4630      	mov	r0, r6
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	4798      	blx	r3
 80105d0:	4630      	mov	r0, r6
 80105d2:	f7ff ff8f 	bl	80104f4 <SCROLLBAR__InvalidatePartner>
 80105d6:	4630      	mov	r0, r6
 80105d8:	b009      	add	sp, #36	; 0x24
 80105da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105dc:	200000fc 	.word	0x200000fc
 80105e0:	0801068f 	.word	0x0801068f
 80105e4:	200000e8 	.word	0x200000e8
 80105e8:	200000f8 	.word	0x200000f8

080105ec <SCROLLBAR_CreateEx>:
 80105ec:	b510      	push	{r4, lr}
 80105ee:	b086      	sub	sp, #24
 80105f0:	9c08      	ldr	r4, [sp, #32]
 80105f2:	9400      	str	r4, [sp, #0]
 80105f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80105f6:	9401      	str	r4, [sp, #4]
 80105f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80105fa:	9402      	str	r4, [sp, #8]
 80105fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80105fe:	9403      	str	r4, [sp, #12]
 8010600:	2400      	movs	r4, #0
 8010602:	9404      	str	r4, [sp, #16]
 8010604:	f7ff ff84 	bl	8010510 <SCROLLBAR_CreateUser>
 8010608:	b006      	add	sp, #24
 801060a:	bd10      	pop	{r4, pc}

0801060c <SCROLLBAR_SetValue>:
 801060c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801060e:	460c      	mov	r4, r1
 8010610:	4605      	mov	r5, r0
 8010612:	b300      	cbz	r0, 8010656 <SCROLLBAR_SetValue+0x4a>
 8010614:	f7ff fba4 	bl	800fd60 <GUI_ALLOC_LockH>
 8010618:	2c00      	cmp	r4, #0
 801061a:	9001      	str	r0, [sp, #4]
 801061c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801061e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8010620:	db05      	blt.n	801062e <SCROLLBAR_SetValue+0x22>
 8010622:	1a8a      	subs	r2, r1, r2
 8010624:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8010628:	4294      	cmp	r4, r2
 801062a:	dc02      	bgt.n	8010632 <SCROLLBAR_SetValue+0x26>
 801062c:	e000      	b.n	8010630 <SCROLLBAR_SetValue+0x24>
 801062e:	2400      	movs	r4, #0
 8010630:	4622      	mov	r2, r4
 8010632:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8010634:	4291      	cmp	r1, r2
 8010636:	d00b      	beq.n	8010650 <SCROLLBAR_SetValue+0x44>
 8010638:	6502      	str	r2, [r0, #80]	; 0x50
 801063a:	4628      	mov	r0, r5
 801063c:	f7f9 fea1 	bl	800a382 <WM_InvalidateWindow>
 8010640:	a801      	add	r0, sp, #4
 8010642:	f7ff fb9b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010646:	4628      	mov	r0, r5
 8010648:	2105      	movs	r1, #5
 801064a:	f7f8 ff6c 	bl	8009526 <WM_NotifyParent>
 801064e:	e002      	b.n	8010656 <SCROLLBAR_SetValue+0x4a>
 8010650:	a801      	add	r0, sp, #4
 8010652:	f7ff fb93 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010656:	b003      	add	sp, #12
 8010658:	bd30      	pop	{r4, r5, pc}

0801065a <SCROLLBAR_AddValue>:
 801065a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801065c:	460d      	mov	r5, r1
 801065e:	4606      	mov	r6, r0
 8010660:	b160      	cbz	r0, 801067c <SCROLLBAR_AddValue+0x22>
 8010662:	f7ff fb7d 	bl	800fd60 <GUI_ALLOC_LockH>
 8010666:	4602      	mov	r2, r0
 8010668:	a802      	add	r0, sp, #8
 801066a:	6d14      	ldr	r4, [r2, #80]	; 0x50
 801066c:	f840 2d04 	str.w	r2, [r0, #-4]!
 8010670:	f7ff fb84 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010674:	4630      	mov	r0, r6
 8010676:	1961      	adds	r1, r4, r5
 8010678:	f7ff ffc8 	bl	801060c <SCROLLBAR_SetValue>
 801067c:	b002      	add	sp, #8
 801067e:	bd70      	pop	{r4, r5, r6, pc}

08010680 <SCROLLBAR_Dec>:
 8010680:	f04f 31ff 	mov.w	r1, #4294967295
 8010684:	f7ff bfe9 	b.w	801065a <SCROLLBAR_AddValue>

08010688 <SCROLLBAR_Inc>:
 8010688:	2101      	movs	r1, #1
 801068a:	f7ff bfe6 	b.w	801065a <SCROLLBAR_AddValue>

0801068e <SCROLLBAR_Callback>:
 801068e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010692:	6844      	ldr	r4, [r0, #4]
 8010694:	4680      	mov	r8, r0
 8010696:	b08f      	sub	sp, #60	; 0x3c
 8010698:	4620      	mov	r0, r4
 801069a:	4641      	mov	r1, r8
 801069c:	f7f6 fa1c 	bl	8006ad8 <WIDGET_HandleActive>
 80106a0:	2800      	cmp	r0, #0
 80106a2:	f000 81c0 	beq.w	8010a26 <SCROLLBAR_Callback+0x398>
 80106a6:	f8d8 3000 	ldr.w	r3, [r8]
 80106aa:	2b23      	cmp	r3, #35	; 0x23
 80106ac:	f000 8182 	beq.w	80109b4 <SCROLLBAR_Callback+0x326>
 80106b0:	dc0b      	bgt.n	80106ca <SCROLLBAR_Callback+0x3c>
 80106b2:	2b0e      	cmp	r3, #14
 80106b4:	f000 812a 	beq.w	801090c <SCROLLBAR_Callback+0x27e>
 80106b8:	2b0f      	cmp	r3, #15
 80106ba:	d012      	beq.n	80106e2 <SCROLLBAR_Callback+0x54>
 80106bc:	2b0b      	cmp	r3, #11
 80106be:	f040 81af 	bne.w	8010a20 <SCROLLBAR_Callback+0x392>
 80106c2:	4620      	mov	r0, r4
 80106c4:	f7ff ff16 	bl	80104f4 <SCROLLBAR__InvalidatePartner>
 80106c8:	e1aa      	b.n	8010a20 <SCROLLBAR_Callback+0x392>
 80106ca:	f240 1213 	movw	r2, #275	; 0x113
 80106ce:	4293      	cmp	r3, r2
 80106d0:	f000 817f 	beq.w	80109d2 <SCROLLBAR_Callback+0x344>
 80106d4:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80106d8:	d012      	beq.n	8010700 <SCROLLBAR_Callback+0x72>
 80106da:	2b24      	cmp	r3, #36	; 0x24
 80106dc:	f040 81a0 	bne.w	8010a20 <SCROLLBAR_Callback+0x392>
 80106e0:	e143      	b.n	801096a <SCROLLBAR_Callback+0x2dc>
 80106e2:	4620      	mov	r0, r4
 80106e4:	f7ff fb3c 	bl	800fd60 <GUI_ALLOC_LockH>
 80106e8:	9005      	str	r0, [sp, #20]
 80106ea:	2800      	cmp	r0, #0
 80106ec:	f000 819b 	beq.w	8010a26 <SCROLLBAR_Callback+0x398>
 80106f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80106f2:	a805      	add	r0, sp, #20
 80106f4:	681d      	ldr	r5, [r3, #0]
 80106f6:	f7ff fb41 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80106fa:	4620      	mov	r0, r4
 80106fc:	47a8      	blx	r5
 80106fe:	e192      	b.n	8010a26 <SCROLLBAR_Callback+0x398>
 8010700:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8010704:	2f00      	cmp	r7, #0
 8010706:	f000 818b 	beq.w	8010a20 <SCROLLBAR_Callback+0x392>
 801070a:	7a3b      	ldrb	r3, [r7, #8]
 801070c:	4620      	mov	r0, r4
 801070e:	2b00      	cmp	r3, #0
 8010710:	f000 80d6 	beq.w	80108c0 <SCROLLBAR_Callback+0x232>
 8010714:	f7ff fb24 	bl	800fd60 <GUI_ALLOC_LockH>
 8010718:	a905      	add	r1, sp, #20
 801071a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801071c:	9003      	str	r0, [sp, #12]
 801071e:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8010720:	4620      	mov	r0, r4
 8010722:	4798      	blx	r3
 8010724:	9b03      	ldr	r3, [sp, #12]
 8010726:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
 801072a:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801072c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801072e:	f01a 0f08 	tst.w	sl, #8
 8010732:	ebc5 0902 	rsb	r9, r5, r2
 8010736:	d003      	beq.n	8010740 <SCROLLBAR_Callback+0xb2>
 8010738:	e897 0006 	ldmia.w	r7, {r1, r2}
 801073c:	603a      	str	r2, [r7, #0]
 801073e:	6079      	str	r1, [r7, #4]
 8010740:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010742:	683f      	ldr	r7, [r7, #0]
 8010744:	2a03      	cmp	r2, #3
 8010746:	d114      	bne.n	8010772 <SCROLLBAR_Callback+0xe4>
 8010748:	4620      	mov	r0, r4
 801074a:	f7ff fea9 	bl	80104a0 <_DeleteTimer>
 801074e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010750:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010752:	2002      	movs	r0, #2
 8010754:	fb93 f3f0 	sdiv	r3, r3, r0
 8010758:	1aff      	subs	r7, r7, r3
 801075a:	9b06      	ldr	r3, [sp, #24]
 801075c:	1afb      	subs	r3, r7, r3
 801075e:	1e58      	subs	r0, r3, #1
 8010760:	fb00 f009 	mul.w	r0, r0, r9
 8010764:	f003 f948 	bl	80139f8 <GUI__DivideRound32>
 8010768:	9b03      	ldr	r3, [sp, #12]
 801076a:	4606      	mov	r6, r0
 801076c:	6618      	str	r0, [r3, #96]	; 0x60
 801076e:	a803      	add	r0, sp, #12
 8010770:	e07e      	b.n	8010870 <SCROLLBAR_Callback+0x1e2>
 8010772:	9806      	ldr	r0, [sp, #24]
 8010774:	4287      	cmp	r7, r0
 8010776:	dc0b      	bgt.n	8010790 <SCROLLBAR_Callback+0x102>
 8010778:	2a02      	cmp	r2, #2
 801077a:	d039      	beq.n	80107f0 <SCROLLBAR_Callback+0x162>
 801077c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801077e:	b113      	cbz	r3, 8010786 <SCROLLBAR_Callback+0xf8>
 8010780:	4620      	mov	r0, r4
 8010782:	f7ff fe8d 	bl	80104a0 <_DeleteTimer>
 8010786:	9b03      	ldr	r3, [sp, #12]
 8010788:	2202      	movs	r2, #2
 801078a:	3e01      	subs	r6, #1
 801078c:	659a      	str	r2, [r3, #88]	; 0x58
 801078e:	e02f      	b.n	80107f0 <SCROLLBAR_Callback+0x162>
 8010790:	9907      	ldr	r1, [sp, #28]
 8010792:	428f      	cmp	r7, r1
 8010794:	da02      	bge.n	801079c <SCROLLBAR_Callback+0x10e>
 8010796:	1b76      	subs	r6, r6, r5
 8010798:	426d      	negs	r5, r5
 801079a:	e02f      	b.n	80107fc <SCROLLBAR_Callback+0x16e>
 801079c:	9908      	ldr	r1, [sp, #32]
 801079e:	428f      	cmp	r7, r1
 80107a0:	dc12      	bgt.n	80107c8 <SCROLLBAR_Callback+0x13a>
 80107a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80107a4:	2900      	cmp	r1, #0
 80107a6:	dd0b      	ble.n	80107c0 <SCROLLBAR_Callback+0x132>
 80107a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107aa:	2202      	movs	r2, #2
 80107ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80107b0:	1aff      	subs	r7, r7, r3
 80107b2:	1a3f      	subs	r7, r7, r0
 80107b4:	3f01      	subs	r7, #1
 80107b6:	fb07 f009 	mul.w	r0, r7, r9
 80107ba:	f003 f91d 	bl	80139f8 <GUI__DivideRound32>
 80107be:	4606      	mov	r6, r0
 80107c0:	9b03      	ldr	r3, [sp, #12]
 80107c2:	2203      	movs	r2, #3
 80107c4:	659a      	str	r2, [r3, #88]	; 0x58
 80107c6:	e016      	b.n	80107f6 <SCROLLBAR_Callback+0x168>
 80107c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107ca:	428f      	cmp	r7, r1
 80107cc:	da01      	bge.n	80107d2 <SCROLLBAR_Callback+0x144>
 80107ce:	442e      	add	r6, r5
 80107d0:	e014      	b.n	80107fc <SCROLLBAR_Callback+0x16e>
 80107d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80107d4:	428f      	cmp	r7, r1
 80107d6:	dc0e      	bgt.n	80107f6 <SCROLLBAR_Callback+0x168>
 80107d8:	2a01      	cmp	r2, #1
 80107da:	d00e      	beq.n	80107fa <SCROLLBAR_Callback+0x16c>
 80107dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107de:	b113      	cbz	r3, 80107e6 <SCROLLBAR_Callback+0x158>
 80107e0:	4620      	mov	r0, r4
 80107e2:	f7ff fe5d 	bl	80104a0 <_DeleteTimer>
 80107e6:	9b03      	ldr	r3, [sp, #12]
 80107e8:	2501      	movs	r5, #1
 80107ea:	3601      	adds	r6, #1
 80107ec:	659d      	str	r5, [r3, #88]	; 0x58
 80107ee:	e005      	b.n	80107fc <SCROLLBAR_Callback+0x16e>
 80107f0:	f04f 35ff 	mov.w	r5, #4294967295
 80107f4:	e002      	b.n	80107fc <SCROLLBAR_Callback+0x16e>
 80107f6:	2500      	movs	r5, #0
 80107f8:	e000      	b.n	80107fc <SCROLLBAR_Callback+0x16e>
 80107fa:	4615      	mov	r5, r2
 80107fc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010800:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010802:	f8db 305c 	ldr.w	r3, [fp, #92]	; 0x5c
 8010806:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 801080a:	9a06      	ldr	r2, [sp, #24]
 801080c:	b171      	cbz	r1, 801082c <SCROLLBAR_Callback+0x19e>
 801080e:	2002      	movs	r0, #2
 8010810:	fb9e f0f0 	sdiv	r0, lr, r0
 8010814:	1a38      	subs	r0, r7, r0
 8010816:	1a80      	subs	r0, r0, r2
 8010818:	3801      	subs	r0, #1
 801081a:	fb00 f009 	mul.w	r0, r0, r9
 801081e:	9301      	str	r3, [sp, #4]
 8010820:	f003 f8ea 	bl	80139f8 <GUI__DivideRound32>
 8010824:	9b01      	ldr	r3, [sp, #4]
 8010826:	f8cb 0060 	str.w	r0, [fp, #96]	; 0x60
 801082a:	e009      	b.n	8010840 <SCROLLBAR_Callback+0x1b2>
 801082c:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 8010830:	2a01      	cmp	r2, #1
 8010832:	bf04      	itt	eq
 8010834:	f8db 104c 	ldreq.w	r1, [fp, #76]	; 0x4c
 8010838:	f101 31ff 	addeq.w	r1, r1, #4294967295
 801083c:	f8cb 1060 	str.w	r1, [fp, #96]	; 0x60
 8010840:	a803      	add	r0, sp, #12
 8010842:	9301      	str	r3, [sp, #4]
 8010844:	f7ff fa9a 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010848:	9b01      	ldr	r3, [sp, #4]
 801084a:	b1a5      	cbz	r5, 8010876 <SCROLLBAR_Callback+0x1e8>
 801084c:	b9bb      	cbnz	r3, 801087e <SCROLLBAR_Callback+0x1f0>
 801084e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010852:	f240 41d2 	movw	r1, #1234	; 0x4d2
 8010856:	4620      	mov	r0, r4
 8010858:	f000 ffc2 	bl	80117e0 <WM_CreateTimer>
 801085c:	4607      	mov	r7, r0
 801085e:	4620      	mov	r0, r4
 8010860:	f7ff fa7e 	bl	800fd60 <GUI_ALLOC_LockH>
 8010864:	4602      	mov	r2, r0
 8010866:	a80e      	add	r0, sp, #56	; 0x38
 8010868:	f840 2d28 	str.w	r2, [r0, #-40]!
 801086c:	6657      	str	r7, [r2, #100]	; 0x64
 801086e:	65d5      	str	r5, [r2, #92]	; 0x5c
 8010870:	f7ff fa84 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010874:	e003      	b.n	801087e <SCROLLBAR_Callback+0x1f0>
 8010876:	b113      	cbz	r3, 801087e <SCROLLBAR_Callback+0x1f0>
 8010878:	4620      	mov	r0, r4
 801087a:	f7ff fe11 	bl	80104a0 <_DeleteTimer>
 801087e:	4620      	mov	r0, r4
 8010880:	2101      	movs	r1, #1
 8010882:	f7f8 fdb7 	bl	80093f4 <WM_SetCapture>
 8010886:	4620      	mov	r0, r4
 8010888:	4631      	mov	r1, r6
 801088a:	f7ff febf 	bl	801060c <SCROLLBAR_SetValue>
 801088e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010892:	f040 80c5 	bne.w	8010a20 <SCROLLBAR_Callback+0x392>
 8010896:	4620      	mov	r0, r4
 8010898:	f7ff fa62 	bl	800fd60 <GUI_ALLOC_LockH>
 801089c:	ab0e      	add	r3, sp, #56	; 0x38
 801089e:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80108a0:	f843 0d28 	str.w	r0, [r3, #-40]!
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7ff fa69 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80108aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80108ae:	4620      	mov	r0, r4
 80108b0:	f7f6 f8de 	bl	8006a70 <WIDGET_OrState>
 80108b4:	07a9      	lsls	r1, r5, #30
 80108b6:	f140 80b3 	bpl.w	8010a20 <SCROLLBAR_Callback+0x392>
 80108ba:	4620      	mov	r0, r4
 80108bc:	2101      	movs	r1, #1
 80108be:	e074      	b.n	80109aa <SCROLLBAR_Callback+0x31c>
 80108c0:	f7ff fa4e 	bl	800fd60 <GUI_ALLOC_LockH>
 80108c4:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 80108c6:	9003      	str	r0, [sp, #12]
 80108c8:	a803      	add	r0, sp, #12
 80108ca:	f7ff fa57 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80108ce:	05ea      	lsls	r2, r5, #23
 80108d0:	f140 80a6 	bpl.w	8010a20 <SCROLLBAR_Callback+0x392>
 80108d4:	4620      	mov	r0, r4
 80108d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80108da:	f7f6 f8df 	bl	8006a9c <WIDGET_AndState>
 80108de:	4620      	mov	r0, r4
 80108e0:	f7ff fa3e 	bl	800fd60 <GUI_ALLOC_LockH>
 80108e4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80108e6:	9005      	str	r0, [sp, #20]
 80108e8:	b113      	cbz	r3, 80108f0 <SCROLLBAR_Callback+0x262>
 80108ea:	4620      	mov	r0, r4
 80108ec:	f7ff fdd8 	bl	80104a0 <_DeleteTimer>
 80108f0:	a80e      	add	r0, sp, #56	; 0x38
 80108f2:	2200      	movs	r2, #0
 80108f4:	f850 3d24 	ldr.w	r3, [r0, #-36]!
 80108f8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80108fa:	659a      	str	r2, [r3, #88]	; 0x58
 80108fc:	f7ff fa3e 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010900:	07ab      	lsls	r3, r5, #30
 8010902:	f140 808d 	bpl.w	8010a20 <SCROLLBAR_Callback+0x392>
 8010906:	4620      	mov	r0, r4
 8010908:	2102      	movs	r1, #2
 801090a:	e04e      	b.n	80109aa <SCROLLBAR_Callback+0x31c>
 801090c:	4620      	mov	r0, r4
 801090e:	f7ff fa27 	bl	800fd60 <GUI_ALLOC_LockH>
 8010912:	ab0e      	add	r3, sp, #56	; 0x38
 8010914:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8010916:	f843 0d24 	str.w	r0, [r3, #-36]!
 801091a:	4618      	mov	r0, r3
 801091c:	f7ff fa2e 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010920:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8010924:	6813      	ldr	r3, [r2, #0]
 8010926:	6852      	ldr	r2, [r2, #4]
 8010928:	2a00      	cmp	r2, #0
 801092a:	dd79      	ble.n	8010a20 <SCROLLBAR_Callback+0x392>
 801092c:	3b10      	subs	r3, #16
 801092e:	2b12      	cmp	r3, #18
 8010930:	d876      	bhi.n	8010a20 <SCROLLBAR_Callback+0x392>
 8010932:	e8df f003 	tbb	[pc, r3]
 8010936:	1616      	.short	0x1616
 8010938:	75751212 	.word	0x75751212
 801093c:	75757575 	.word	0x75757575
 8010940:	75757575 	.word	0x75757575
 8010944:	0a757575 	.word	0x0a757575
 8010948:	0d          	.byte	0x0d
 8010949:	00          	.byte	0x00
 801094a:	4620      	mov	r0, r4
 801094c:	4629      	mov	r1, r5
 801094e:	e001      	b.n	8010954 <SCROLLBAR_Callback+0x2c6>
 8010950:	4620      	mov	r0, r4
 8010952:	4269      	negs	r1, r5
 8010954:	f7ff fe81 	bl	801065a <SCROLLBAR_AddValue>
 8010958:	e062      	b.n	8010a20 <SCROLLBAR_Callback+0x392>
 801095a:	4620      	mov	r0, r4
 801095c:	f7ff fe94 	bl	8010688 <SCROLLBAR_Inc>
 8010960:	e05e      	b.n	8010a20 <SCROLLBAR_Callback+0x392>
 8010962:	4620      	mov	r0, r4
 8010964:	f7ff fe8c 	bl	8010680 <SCROLLBAR_Dec>
 8010968:	e05a      	b.n	8010a20 <SCROLLBAR_Callback+0x392>
 801096a:	4620      	mov	r0, r4
 801096c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010970:	f7ff f9f6 	bl	800fd60 <GUI_ALLOC_LockH>
 8010974:	ad0e      	add	r5, sp, #56	; 0x38
 8010976:	4603      	mov	r3, r0
 8010978:	f845 0d24 	str.w	r0, [r5, #-36]!
 801097c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801097e:	6830      	ldr	r0, [r6, #0]
 8010980:	68b1      	ldr	r1, [r6, #8]
 8010982:	4290      	cmp	r0, r2
 8010984:	6872      	ldr	r2, [r6, #4]
 8010986:	d105      	bne.n	8010994 <SCROLLBAR_Callback+0x306>
 8010988:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 801098a:	428e      	cmp	r6, r1
 801098c:	d102      	bne.n	8010994 <SCROLLBAR_Callback+0x306>
 801098e:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8010990:	4296      	cmp	r6, r2
 8010992:	d00d      	beq.n	80109b0 <SCROLLBAR_Callback+0x322>
 8010994:	64d8      	str	r0, [r3, #76]	; 0x4c
 8010996:	6559      	str	r1, [r3, #84]	; 0x54
 8010998:	651a      	str	r2, [r3, #80]	; 0x50
 801099a:	4620      	mov	r0, r4
 801099c:	f7f9 fcf1 	bl	800a382 <WM_InvalidateWindow>
 80109a0:	4628      	mov	r0, r5
 80109a2:	f7ff f9eb 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80109a6:	4620      	mov	r0, r4
 80109a8:	2105      	movs	r1, #5
 80109aa:	f7f8 fdbc 	bl	8009526 <WM_NotifyParent>
 80109ae:	e037      	b.n	8010a20 <SCROLLBAR_Callback+0x392>
 80109b0:	4628      	mov	r0, r5
 80109b2:	e033      	b.n	8010a1c <SCROLLBAR_Callback+0x38e>
 80109b4:	4620      	mov	r0, r4
 80109b6:	f7ff f9d3 	bl	800fd60 <GUI_ALLOC_LockH>
 80109ba:	9005      	str	r0, [sp, #20]
 80109bc:	2800      	cmp	r0, #0
 80109be:	d02f      	beq.n	8010a20 <SCROLLBAR_Callback+0x392>
 80109c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80109c4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80109c6:	601a      	str	r2, [r3, #0]
 80109c8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80109ca:	609a      	str	r2, [r3, #8]
 80109cc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80109ce:	605a      	str	r2, [r3, #4]
 80109d0:	e023      	b.n	8010a1a <SCROLLBAR_Callback+0x38c>
 80109d2:	4620      	mov	r0, r4
 80109d4:	f7ff f9c4 	bl	800fd60 <GUI_ALLOC_LockH>
 80109d8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80109da:	9005      	str	r0, [sp, #20]
 80109dc:	b111      	cbz	r1, 80109e4 <SCROLLBAR_Callback+0x356>
 80109de:	4620      	mov	r0, r4
 80109e0:	f7ff fe3b 	bl	801065a <SCROLLBAR_AddValue>
 80109e4:	9b05      	ldr	r3, [sp, #20]
 80109e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80109e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80109ea:	2a00      	cmp	r2, #0
 80109ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80109ee:	dd05      	ble.n	80109fc <SCROLLBAR_Callback+0x36e>
 80109f0:	4291      	cmp	r1, r2
 80109f2:	bfb4      	ite	lt
 80109f4:	2100      	movlt	r1, #0
 80109f6:	2101      	movge	r1, #1
 80109f8:	dd06      	ble.n	8010a08 <SCROLLBAR_Callback+0x37a>
 80109fa:	e004      	b.n	8010a06 <SCROLLBAR_Callback+0x378>
 80109fc:	4291      	cmp	r1, r2
 80109fe:	bfcc      	ite	gt
 8010a00:	2100      	movgt	r1, #0
 8010a02:	2101      	movle	r1, #1
 8010a04:	da00      	bge.n	8010a08 <SCROLLBAR_Callback+0x37a>
 8010a06:	651a      	str	r2, [r3, #80]	; 0x50
 8010a08:	b119      	cbz	r1, 8010a12 <SCROLLBAR_Callback+0x384>
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	f7ff fd48 	bl	80104a0 <_DeleteTimer>
 8010a10:	e003      	b.n	8010a1a <SCROLLBAR_Callback+0x38c>
 8010a12:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8010a14:	2132      	movs	r1, #50	; 0x32
 8010a16:	f000 ff13 	bl	8011840 <WM_RestartTimer>
 8010a1a:	a805      	add	r0, sp, #20
 8010a1c:	f7ff f9ae 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010a20:	4640      	mov	r0, r8
 8010a22:	f7fa f8df 	bl	800abe4 <WM_DefaultProc>
 8010a26:	b00f      	add	sp, #60	; 0x3c
 8010a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a2c <LISTVIEW_GetRBorder>:
 8010a2c:	b513      	push	{r0, r1, r4, lr}
 8010a2e:	4604      	mov	r4, r0
 8010a30:	b148      	cbz	r0, 8010a46 <LISTVIEW_GetRBorder+0x1a>
 8010a32:	f7ff f995 	bl	800fd60 <GUI_ALLOC_LockH>
 8010a36:	ab02      	add	r3, sp, #8
 8010a38:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
 8010a3c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7ff f99b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010a46:	4620      	mov	r0, r4
 8010a48:	b002      	add	sp, #8
 8010a4a:	bd10      	pop	{r4, pc}

08010a4c <LISTVIEW_GetLBorder>:
 8010a4c:	b513      	push	{r0, r1, r4, lr}
 8010a4e:	4604      	mov	r4, r0
 8010a50:	b148      	cbz	r0, 8010a66 <LISTVIEW_GetLBorder+0x1a>
 8010a52:	f7ff f985 	bl	800fd60 <GUI_ALLOC_LockH>
 8010a56:	ab02      	add	r3, sp, #8
 8010a58:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8010a5c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010a60:	4618      	mov	r0, r3
 8010a62:	f7ff f98b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010a66:	4620      	mov	r0, r4
 8010a68:	b002      	add	sp, #8
 8010a6a:	bd10      	pop	{r4, pc}

08010a6c <LISTVIEW_GetWrapMode>:
 8010a6c:	b513      	push	{r0, r1, r4, lr}
 8010a6e:	b150      	cbz	r0, 8010a86 <LISTVIEW_GetWrapMode+0x1a>
 8010a70:	f7ff f976 	bl	800fd60 <GUI_ALLOC_LockH>
 8010a74:	ab02      	add	r3, sp, #8
 8010a76:	f890 406e 	ldrb.w	r4, [r0, #110]	; 0x6e
 8010a7a:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7ff f97c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010a84:	e000      	b.n	8010a88 <LISTVIEW_GetWrapMode+0x1c>
 8010a86:	24ff      	movs	r4, #255	; 0xff
 8010a88:	4620      	mov	r0, r4
 8010a8a:	b002      	add	sp, #8
 8010a8c:	bd10      	pop	{r4, pc}

08010a8e <LISTVIEW_GetSel>:
 8010a8e:	b513      	push	{r0, r1, r4, lr}
 8010a90:	b148      	cbz	r0, 8010aa6 <LISTVIEW_GetSel+0x18>
 8010a92:	f7ff f965 	bl	800fd60 <GUI_ALLOC_LockH>
 8010a96:	ab02      	add	r3, sp, #8
 8010a98:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8010a9a:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7ff f96c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010aa4:	e001      	b.n	8010aaa <LISTVIEW_GetSel+0x1c>
 8010aa6:	f04f 34ff 	mov.w	r4, #4294967295
 8010aaa:	4620      	mov	r0, r4
 8010aac:	b002      	add	sp, #8
 8010aae:	bd10      	pop	{r4, pc}

08010ab0 <LISTVIEW_RowIsDisabled>:
 8010ab0:	b513      	push	{r0, r1, r4, lr}
 8010ab2:	f7f6 fb62 	bl	800717a <LISTVIEW__GetpRow>
 8010ab6:	9001      	str	r0, [sp, #4]
 8010ab8:	b120      	cbz	r0, 8010ac4 <LISTVIEW_RowIsDisabled+0x14>
 8010aba:	7904      	ldrb	r4, [r0, #4]
 8010abc:	a801      	add	r0, sp, #4
 8010abe:	f7ff f95d 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010ac2:	e000      	b.n	8010ac6 <LISTVIEW_RowIsDisabled+0x16>
 8010ac4:	4604      	mov	r4, r0
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	b002      	add	sp, #8
 8010aca:	bd10      	pop	{r4, pc}

08010acc <HEADER_DrawSkinFlex>:
 8010acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ad0:	6843      	ldr	r3, [r0, #4]
 8010ad2:	2b06      	cmp	r3, #6
 8010ad4:	b086      	sub	sp, #24
 8010ad6:	4604      	mov	r4, r0
 8010ad8:	d03f      	beq.n	8010b5a <HEADER_DrawSkinFlex+0x8e>
 8010ada:	dc38      	bgt.n	8010b4e <HEADER_DrawSkinFlex+0x82>
 8010adc:	2b02      	cmp	r3, #2
 8010ade:	f000 80da 	beq.w	8010c96 <HEADER_DrawSkinFlex+0x1ca>
 8010ae2:	2b05      	cmp	r3, #5
 8010ae4:	f040 8137 	bne.w	8010d56 <HEADER_DrawSkinFlex+0x28a>
 8010ae8:	4d9d      	ldr	r5, [pc, #628]	; (8010d60 <HEADER_DrawSkinFlex+0x294>)
 8010aea:	6943      	ldr	r3, [r0, #20]
 8010aec:	69c6      	ldr	r6, [r0, #28]
 8010aee:	6828      	ldr	r0, [r5, #0]
 8010af0:	441e      	add	r6, r3
 8010af2:	f7fe f821 	bl	800eb38 <GUI_SetColor>
 8010af6:	69e2      	ldr	r2, [r4, #28]
 8010af8:	69a0      	ldr	r0, [r4, #24]
 8010afa:	6961      	ldr	r1, [r4, #20]
 8010afc:	3a01      	subs	r2, #1
 8010afe:	f7fe fa25 	bl	800ef4c <GUI_DrawVLine>
 8010b02:	6921      	ldr	r1, [r4, #16]
 8010b04:	69a2      	ldr	r2, [r4, #24]
 8010b06:	69e0      	ldr	r0, [r4, #28]
 8010b08:	f7fe fa42 	bl	800ef90 <GUI_DrawHLine>
 8010b0c:	6868      	ldr	r0, [r5, #4]
 8010b0e:	f7fe f813 	bl	800eb38 <GUI_SetColor>
 8010b12:	69e2      	ldr	r2, [r4, #28]
 8010b14:	6920      	ldr	r0, [r4, #16]
 8010b16:	6961      	ldr	r1, [r4, #20]
 8010b18:	3a01      	subs	r2, #1
 8010b1a:	f7fe fa17 	bl	800ef4c <GUI_DrawVLine>
 8010b1e:	68ab      	ldr	r3, [r5, #8]
 8010b20:	6920      	ldr	r0, [r4, #16]
 8010b22:	69a2      	ldr	r2, [r4, #24]
 8010b24:	9300      	str	r3, [sp, #0]
 8010b26:	68eb      	ldr	r3, [r5, #12]
 8010b28:	9301      	str	r3, [sp, #4]
 8010b2a:	1076      	asrs	r6, r6, #1
 8010b2c:	3001      	adds	r0, #1
 8010b2e:	6961      	ldr	r1, [r4, #20]
 8010b30:	3a01      	subs	r2, #1
 8010b32:	1e73      	subs	r3, r6, #1
 8010b34:	f005 f81e 	bl	8015b74 <GUI_DrawGradientV>
 8010b38:	6929      	ldr	r1, [r5, #16]
 8010b3a:	6920      	ldr	r0, [r4, #16]
 8010b3c:	69a2      	ldr	r2, [r4, #24]
 8010b3e:	69e3      	ldr	r3, [r4, #28]
 8010b40:	9100      	str	r1, [sp, #0]
 8010b42:	6969      	ldr	r1, [r5, #20]
 8010b44:	9101      	str	r1, [sp, #4]
 8010b46:	3001      	adds	r0, #1
 8010b48:	4631      	mov	r1, r6
 8010b4a:	3a01      	subs	r2, #1
 8010b4c:	e100      	b.n	8010d50 <HEADER_DrawSkinFlex+0x284>
 8010b4e:	2b0c      	cmp	r3, #12
 8010b50:	f000 80d4 	beq.w	8010cfc <HEADER_DrawSkinFlex+0x230>
 8010b54:	2b12      	cmp	r3, #18
 8010b56:	d04c      	beq.n	8010bf2 <HEADER_DrawSkinFlex+0x126>
 8010b58:	e0fd      	b.n	8010d56 <HEADER_DrawSkinFlex+0x28a>
 8010b5a:	6800      	ldr	r0, [r0, #0]
 8010b5c:	f7ff f900 	bl	800fd60 <GUI_ALLOC_LockH>
 8010b60:	ab06      	add	r3, sp, #24
 8010b62:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8010b64:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7ff f907 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010b6e:	4628      	mov	r0, r5
 8010b70:	68a1      	ldr	r1, [r4, #8]
 8010b72:	f7f8 f83e 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 8010b76:	9004      	str	r0, [sp, #16]
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	f000 80ec 	beq.w	8010d56 <HEADER_DrawSkinFlex+0x28a>
 8010b7e:	6885      	ldr	r5, [r0, #8]
 8010b80:	8886      	ldrh	r6, [r0, #4]
 8010b82:	f8d0 8000 	ldr.w	r8, [r0]
 8010b86:	a804      	add	r0, sp, #16
 8010b88:	f7ff f8f8 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010b8c:	4628      	mov	r0, r5
 8010b8e:	f000 f9a3 	bl	8010ed8 <GUI_DRAW__GetXSize>
 8010b92:	4607      	mov	r7, r0
 8010b94:	4628      	mov	r0, r5
 8010b96:	f000 f9b1 	bl	8010efc <GUI_DRAW__GetYSize>
 8010b9a:	f006 0103 	and.w	r1, r6, #3
 8010b9e:	2901      	cmp	r1, #1
 8010ba0:	d006      	beq.n	8010bb0 <HEADER_DrawSkinFlex+0xe4>
 8010ba2:	2902      	cmp	r1, #2
 8010ba4:	d107      	bne.n	8010bb6 <HEADER_DrawSkinFlex+0xea>
 8010ba6:	ebc7 0208 	rsb	r2, r7, r8
 8010baa:	fb92 f2f1 	sdiv	r2, r2, r1
 8010bae:	e003      	b.n	8010bb8 <HEADER_DrawSkinFlex+0xec>
 8010bb0:	ebc7 0208 	rsb	r2, r7, r8
 8010bb4:	e000      	b.n	8010bb8 <HEADER_DrawSkinFlex+0xec>
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f006 030c 	and.w	r3, r6, #12
 8010bbc:	2b04      	cmp	r3, #4
 8010bbe:	6966      	ldr	r6, [r4, #20]
 8010bc0:	d009      	beq.n	8010bd6 <HEADER_DrawSkinFlex+0x10a>
 8010bc2:	2b0c      	cmp	r3, #12
 8010bc4:	d10c      	bne.n	8010be0 <HEADER_DrawSkinFlex+0x114>
 8010bc6:	69e3      	ldr	r3, [r4, #28]
 8010bc8:	1b9b      	subs	r3, r3, r6
 8010bca:	3301      	adds	r3, #1
 8010bcc:	1a1b      	subs	r3, r3, r0
 8010bce:	2102      	movs	r1, #2
 8010bd0:	fb93 f3f1 	sdiv	r3, r3, r1
 8010bd4:	e005      	b.n	8010be2 <HEADER_DrawSkinFlex+0x116>
 8010bd6:	69e3      	ldr	r3, [r4, #28]
 8010bd8:	1b9b      	subs	r3, r3, r6
 8010bda:	3301      	adds	r3, #1
 8010bdc:	1a1b      	subs	r3, r3, r0
 8010bde:	e000      	b.n	8010be2 <HEADER_DrawSkinFlex+0x116>
 8010be0:	2300      	movs	r3, #0
 8010be2:	6927      	ldr	r7, [r4, #16]
 8010be4:	6821      	ldr	r1, [r4, #0]
 8010be6:	4628      	mov	r0, r5
 8010be8:	443a      	add	r2, r7
 8010bea:	4433      	add	r3, r6
 8010bec:	f000 f95b 	bl	8010ea6 <GUI_DRAW__Draw>
 8010bf0:	e0b1      	b.n	8010d56 <HEADER_DrawSkinFlex+0x28a>
 8010bf2:	6800      	ldr	r0, [r0, #0]
 8010bf4:	f7ff f8b4 	bl	800fd60 <GUI_ALLOC_LockH>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	a806      	add	r0, sp, #24
 8010bfc:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8010bfe:	f840 3d10 	str.w	r3, [r0, #-16]!
 8010c02:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8010c04:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8010c06:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8010c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c0c:	f8d3 9000 	ldr.w	r9, [r3]
 8010c10:	f7ff f8b4 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010c14:	4628      	mov	r0, r5
 8010c16:	68a1      	ldr	r1, [r4, #8]
 8010c18:	f7f7 ffeb 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 8010c1c:	9003      	str	r0, [sp, #12]
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	f000 8099 	beq.w	8010d56 <HEADER_DrawSkinFlex+0x28a>
 8010c24:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8010c28:	f100 0a0c 	add.w	sl, r0, #12
 8010c2c:	a803      	add	r0, sp, #12
 8010c2e:	f7ff f8a5 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010c32:	6923      	ldr	r3, [r4, #16]
 8010c34:	f8ad 3010 	strh.w	r3, [sp, #16]
 8010c38:	6963      	ldr	r3, [r4, #20]
 8010c3a:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010c3e:	a804      	add	r0, sp, #16
 8010c40:	69a3      	ldr	r3, [r4, #24]
 8010c42:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010c46:	4601      	mov	r1, r0
 8010c48:	69e3      	ldr	r3, [r4, #28]
 8010c4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010c4e:	464a      	mov	r2, r9
 8010c50:	f7fc ff36 	bl	800dac0 <GUI__ReduceRect>
 8010c54:	68a3      	ldr	r3, [r4, #8]
 8010c56:	4598      	cmp	r8, r3
 8010c58:	d10e      	bne.n	8010c78 <HEADER_DrawSkinFlex+0x1ac>
 8010c5a:	69e1      	ldr	r1, [r4, #28]
 8010c5c:	6963      	ldr	r3, [r4, #20]
 8010c5e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010c62:	1acb      	subs	r3, r1, r3
 8010c64:	3b04      	subs	r3, #4
 8010c66:	2103      	movs	r1, #3
 8010c68:	fb93 f3f1 	sdiv	r3, r3, r1
 8010c6c:	3a01      	subs	r2, #1
 8010c6e:	3b01      	subs	r3, #1
 8010c70:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8010c74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010c78:	4638      	mov	r0, r7
 8010c7a:	f7fd ff5d 	bl	800eb38 <GUI_SetColor>
 8010c7e:	2002      	movs	r0, #2
 8010c80:	f7fd ff22 	bl	800eac8 <GUI_SetTextMode>
 8010c84:	4630      	mov	r0, r6
 8010c86:	f7fd ff29 	bl	800eadc <GUI_SetFont>
 8010c8a:	4650      	mov	r0, sl
 8010c8c:	a904      	add	r1, sp, #16
 8010c8e:	462a      	mov	r2, r5
 8010c90:	f005 f913 	bl	8015eba <GUI_DispStringInRect>
 8010c94:	e05f      	b.n	8010d56 <HEADER_DrawSkinFlex+0x28a>
 8010c96:	6800      	ldr	r0, [r0, #0]
 8010c98:	f7ff f862 	bl	800fd60 <GUI_ALLOC_LockH>
 8010c9c:	ab06      	add	r3, sp, #24
 8010c9e:	6e47      	ldr	r7, [r0, #100]	; 0x64
 8010ca0:	f843 0d08 	str.w	r0, [r3, #-8]!
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7ff f869 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010caa:	6963      	ldr	r3, [r4, #20]
 8010cac:	69e2      	ldr	r2, [r4, #28]
 8010cae:	69a6      	ldr	r6, [r4, #24]
 8010cb0:	ebc3 0802 	rsb	r8, r3, r2
 8010cb4:	4b2a      	ldr	r3, [pc, #168]	; (8010d60 <HEADER_DrawSkinFlex+0x294>)
 8010cb6:	2103      	movs	r1, #3
 8010cb8:	f1a8 0804 	sub.w	r8, r8, #4
 8010cbc:	fb98 f8f1 	sdiv	r8, r8, r1
 8010cc0:	6998      	ldr	r0, [r3, #24]
 8010cc2:	f108 39ff 	add.w	r9, r8, #4294967295
 8010cc6:	f7fd ff37 	bl	800eb38 <GUI_SetColor>
 8010cca:	3e04      	subs	r6, #4
 8010ccc:	69e5      	ldr	r5, [r4, #28]
 8010cce:	6963      	ldr	r3, [r4, #20]
 8010cd0:	007f      	lsls	r7, r7, #1
 8010cd2:	ebc9 0606 	rsb	r6, r9, r6
 8010cd6:	f1c7 0701 	rsb	r7, r7, #1
 8010cda:	ea4f 0969 	mov.w	r9, r9, asr #1
 8010cde:	1aed      	subs	r5, r5, r3
 8010ce0:	fb07 f909 	mul.w	r9, r7, r9
 8010ce4:	ebc9 0565 	rsb	r5, r9, r5, asr #1
 8010ce8:	4644      	mov	r4, r8
 8010cea:	3c01      	subs	r4, #1
 8010cec:	d433      	bmi.n	8010d56 <HEADER_DrawSkinFlex+0x28a>
 8010cee:	4628      	mov	r0, r5
 8010cf0:	1b31      	subs	r1, r6, r4
 8010cf2:	1932      	adds	r2, r6, r4
 8010cf4:	f7fe f94c 	bl	800ef90 <GUI_DrawHLine>
 8010cf8:	443d      	add	r5, r7
 8010cfa:	e7f6      	b.n	8010cea <HEADER_DrawSkinFlex+0x21e>
 8010cfc:	4d18      	ldr	r5, [pc, #96]	; (8010d60 <HEADER_DrawSkinFlex+0x294>)
 8010cfe:	6943      	ldr	r3, [r0, #20]
 8010d00:	69c6      	ldr	r6, [r0, #28]
 8010d02:	6828      	ldr	r0, [r5, #0]
 8010d04:	441e      	add	r6, r3
 8010d06:	f7fd ff17 	bl	800eb38 <GUI_SetColor>
 8010d0a:	6921      	ldr	r1, [r4, #16]
 8010d0c:	69a2      	ldr	r2, [r4, #24]
 8010d0e:	69e0      	ldr	r0, [r4, #28]
 8010d10:	f7fe f93e 	bl	800ef90 <GUI_DrawHLine>
 8010d14:	6868      	ldr	r0, [r5, #4]
 8010d16:	f7fd ff0f 	bl	800eb38 <GUI_SetColor>
 8010d1a:	69e2      	ldr	r2, [r4, #28]
 8010d1c:	6920      	ldr	r0, [r4, #16]
 8010d1e:	6961      	ldr	r1, [r4, #20]
 8010d20:	3a01      	subs	r2, #1
 8010d22:	f7fe f913 	bl	800ef4c <GUI_DrawVLine>
 8010d26:	68ab      	ldr	r3, [r5, #8]
 8010d28:	6920      	ldr	r0, [r4, #16]
 8010d2a:	9300      	str	r3, [sp, #0]
 8010d2c:	68eb      	ldr	r3, [r5, #12]
 8010d2e:	9301      	str	r3, [sp, #4]
 8010d30:	1076      	asrs	r6, r6, #1
 8010d32:	3001      	adds	r0, #1
 8010d34:	6961      	ldr	r1, [r4, #20]
 8010d36:	69a2      	ldr	r2, [r4, #24]
 8010d38:	1e73      	subs	r3, r6, #1
 8010d3a:	f004 ff1b 	bl	8015b74 <GUI_DrawGradientV>
 8010d3e:	692a      	ldr	r2, [r5, #16]
 8010d40:	6920      	ldr	r0, [r4, #16]
 8010d42:	69e3      	ldr	r3, [r4, #28]
 8010d44:	9200      	str	r2, [sp, #0]
 8010d46:	696a      	ldr	r2, [r5, #20]
 8010d48:	9201      	str	r2, [sp, #4]
 8010d4a:	69a2      	ldr	r2, [r4, #24]
 8010d4c:	3001      	adds	r0, #1
 8010d4e:	4631      	mov	r1, r6
 8010d50:	3b01      	subs	r3, #1
 8010d52:	f004 ff0f 	bl	8015b74 <GUI_DrawGradientV>
 8010d56:	2000      	movs	r0, #0
 8010d58:	b006      	add	sp, #24
 8010d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d5e:	bf00      	nop
 8010d60:	20000100 	.word	0x20000100

08010d64 <_Create>:
 8010d64:	b530      	push	{r4, r5, lr}
 8010d66:	b08b      	sub	sp, #44	; 0x2c
 8010d68:	4605      	mov	r5, r0
 8010d6a:	f7fe fff9 	bl	800fd60 <GUI_ALLOC_LockH>
 8010d6e:	ab0a      	add	r3, sp, #40	; 0x28
 8010d70:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8010d72:	f843 0d28 	str.w	r0, [r3, #-40]!
 8010d76:	4668      	mov	r0, sp
 8010d78:	6894      	ldr	r4, [r2, #8]
 8010d7a:	f7fe ffff 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010d7e:	a80a      	add	r0, sp, #40	; 0x28
 8010d80:	2300      	movs	r3, #0
 8010d82:	9302      	str	r3, [sp, #8]
 8010d84:	f840 5d24 	str.w	r5, [r0, #-36]!
 8010d88:	6823      	ldr	r3, [r4, #0]
 8010d8a:	4798      	blx	r3
 8010d8c:	b00b      	add	sp, #44	; 0x2c
 8010d8e:	bd30      	pop	{r4, r5, pc}

08010d90 <_Paint>:
 8010d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d94:	b093      	sub	sp, #76	; 0x4c
 8010d96:	4683      	mov	fp, r0
 8010d98:	f7fe ffe2 	bl	800fd60 <GUI_ALLOC_LockH>
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	a812      	add	r0, sp, #72	; 0x48
 8010da0:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8010da2:	f840 4d3c 	str.w	r4, [r0, #-60]!
 8010da6:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8010da8:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8010daa:	f8d4 9068 	ldr.w	r9, [r4, #104]	; 0x68
 8010dae:	f8d4 a060 	ldr.w	sl, [r4, #96]	; 0x60
 8010db2:	f7fe ffe3 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010db6:	4630      	mov	r0, r6
 8010db8:	f7f7 fe99 	bl	8008aee <GUI_ARRAY_GetNumItems>
 8010dbc:	a907      	add	r1, sp, #28
 8010dbe:	4680      	mov	r8, r0
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	f7f5 fe1c 	bl	80069fe <WIDGET__GetClientRect>
 8010dc6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010dca:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010dce:	b21a      	sxth	r2, r3
 8010dd0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8010dd4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010dd8:	920e      	str	r2, [sp, #56]	; 0x38
 8010dda:	f1c7 0b00 	rsb	fp, r7, #0
 8010dde:	b21a      	sxth	r2, r3
 8010de0:	9210      	str	r2, [sp, #64]	; 0x40
 8010de2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010de6:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8010dea:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8010dee:	2400      	movs	r4, #0
 8010df0:	4544      	cmp	r4, r8
 8010df2:	da3e      	bge.n	8010e72 <_Paint+0xe2>
 8010df4:	4621      	mov	r1, r4
 8010df6:	4630      	mov	r0, r6
 8010df8:	f7f7 fefb 	bl	8008bf2 <GUI_ARRAY_GetpItemLocked>
 8010dfc:	a912      	add	r1, sp, #72	; 0x48
 8010dfe:	6883      	ldr	r3, [r0, #8]
 8010e00:	f841 0d38 	str.w	r0, [r1, #-56]!
 8010e04:	6802      	ldr	r2, [r0, #0]
 8010e06:	9201      	str	r2, [sp, #4]
 8010e08:	4608      	mov	r0, r1
 8010e0a:	9300      	str	r3, [sp, #0]
 8010e0c:	f7fe ffb6 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010e10:	454c      	cmp	r4, r9
 8010e12:	bfb4      	ite	lt
 8010e14:	4639      	movlt	r1, r7
 8010e16:	2100      	movge	r1, #0
 8010e18:	9a01      	ldr	r2, [sp, #4]
 8010e1a:	448b      	add	fp, r1
 8010e1c:	445a      	add	r2, fp
 8010e1e:	3a01      	subs	r2, #1
 8010e20:	a805      	add	r0, sp, #20
 8010e22:	920f      	str	r2, [sp, #60]	; 0x3c
 8010e24:	f8ad 2018 	strh.w	r2, [sp, #24]
 8010e28:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8010e2c:	f8ad b014 	strh.w	fp, [sp, #20]
 8010e30:	f000 fd1c 	bl	801186c <WM_SetUserClipRect>
 8010e34:	2205      	movs	r2, #5
 8010e36:	940b      	str	r4, [sp, #44]	; 0x2c
 8010e38:	920a      	str	r2, [sp, #40]	; 0x28
 8010e3a:	a809      	add	r0, sp, #36	; 0x24
 8010e3c:	47a8      	blx	r5
 8010e3e:	9b00      	ldr	r3, [sp, #0]
 8010e40:	b11b      	cbz	r3, 8010e4a <_Paint+0xba>
 8010e42:	2306      	movs	r3, #6
 8010e44:	930a      	str	r3, [sp, #40]	; 0x28
 8010e46:	a809      	add	r0, sp, #36	; 0x24
 8010e48:	47a8      	blx	r5
 8010e4a:	2312      	movs	r3, #18
 8010e4c:	930a      	str	r3, [sp, #40]	; 0x28
 8010e4e:	a809      	add	r0, sp, #36	; 0x24
 8010e50:	47a8      	blx	r5
 8010e52:	45a2      	cmp	sl, r4
 8010e54:	d103      	bne.n	8010e5e <_Paint+0xce>
 8010e56:	2302      	movs	r3, #2
 8010e58:	930a      	str	r3, [sp, #40]	; 0x28
 8010e5a:	a809      	add	r0, sp, #36	; 0x24
 8010e5c:	47a8      	blx	r5
 8010e5e:	2000      	movs	r0, #0
 8010e60:	f000 fd04 	bl	801186c <WM_SetUserClipRect>
 8010e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010e68:	1ad3      	subs	r3, r2, r3
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	449b      	add	fp, r3
 8010e6e:	3401      	adds	r4, #1
 8010e70:	e7be      	b.n	8010df0 <_Paint+0x60>
 8010e72:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010e76:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010e78:	b21a      	sxth	r2, r3
 8010e7a:	4291      	cmp	r1, r2
 8010e7c:	da10      	bge.n	8010ea0 <_Paint+0x110>
 8010e7e:	a805      	add	r0, sp, #20
 8010e80:	920f      	str	r2, [sp, #60]	; 0x3c
 8010e82:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010e86:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8010e8a:	f8ad b014 	strh.w	fp, [sp, #20]
 8010e8e:	f000 fced 	bl	801186c <WM_SetUserClipRect>
 8010e92:	230c      	movs	r3, #12
 8010e94:	930a      	str	r3, [sp, #40]	; 0x28
 8010e96:	a809      	add	r0, sp, #36	; 0x24
 8010e98:	47a8      	blx	r5
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	f000 fce6 	bl	801186c <WM_SetUserClipRect>
 8010ea0:	b013      	add	sp, #76	; 0x4c
 8010ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ea6 <GUI_DRAW__Draw>:
 8010ea6:	e92d 43e3 	stmdb	sp!, {r0, r1, r5, r6, r7, r8, r9, lr}
 8010eaa:	4688      	mov	r8, r1
 8010eac:	4617      	mov	r7, r2
 8010eae:	461e      	mov	r6, r3
 8010eb0:	4681      	mov	r9, r0
 8010eb2:	b170      	cbz	r0, 8010ed2 <GUI_DRAW__Draw+0x2c>
 8010eb4:	f7fe ff54 	bl	800fd60 <GUI_ALLOC_LockH>
 8010eb8:	4605      	mov	r5, r0
 8010eba:	a802      	add	r0, sp, #8
 8010ebc:	682b      	ldr	r3, [r5, #0]
 8010ebe:	f840 5d04 	str.w	r5, [r0, #-4]!
 8010ec2:	681d      	ldr	r5, [r3, #0]
 8010ec4:	f7fe ff5a 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010ec8:	4648      	mov	r0, r9
 8010eca:	4641      	mov	r1, r8
 8010ecc:	463a      	mov	r2, r7
 8010ece:	4633      	mov	r3, r6
 8010ed0:	47a8      	blx	r5
 8010ed2:	b002      	add	sp, #8
 8010ed4:	e8bd 83e0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, pc}

08010ed8 <GUI_DRAW__GetXSize>:
 8010ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010eda:	4604      	mov	r4, r0
 8010edc:	b160      	cbz	r0, 8010ef8 <GUI_DRAW__GetXSize+0x20>
 8010ede:	f7fe ff3f 	bl	800fd60 <GUI_ALLOC_LockH>
 8010ee2:	ab02      	add	r3, sp, #8
 8010ee4:	6802      	ldr	r2, [r0, #0]
 8010ee6:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010eea:	4618      	mov	r0, r3
 8010eec:	6855      	ldr	r5, [r2, #4]
 8010eee:	f7fe ff45 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	47a8      	blx	r5
 8010ef6:	e7ff      	b.n	8010ef8 <GUI_DRAW__GetXSize+0x20>
 8010ef8:	b003      	add	sp, #12
 8010efa:	bd30      	pop	{r4, r5, pc}

08010efc <GUI_DRAW__GetYSize>:
 8010efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010efe:	4604      	mov	r4, r0
 8010f00:	b160      	cbz	r0, 8010f1c <GUI_DRAW__GetYSize+0x20>
 8010f02:	f7fe ff2d 	bl	800fd60 <GUI_ALLOC_LockH>
 8010f06:	ab02      	add	r3, sp, #8
 8010f08:	6802      	ldr	r2, [r0, #0]
 8010f0a:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010f0e:	4618      	mov	r0, r3
 8010f10:	6895      	ldr	r5, [r2, #8]
 8010f12:	f7fe ff33 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8010f16:	4620      	mov	r0, r4
 8010f18:	47a8      	blx	r5
 8010f1a:	e7ff      	b.n	8010f1c <GUI_DRAW__GetYSize+0x20>
 8010f1c:	b003      	add	sp, #12
 8010f1e:	bd30      	pop	{r4, r5, pc}

08010f20 <BUTTON_DrawSkinFlex>:
 8010f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f24:	6883      	ldr	r3, [r0, #8]
 8010f26:	4a8a      	ldr	r2, [pc, #552]	; (8011150 <BUTTON_DrawSkinFlex+0x230>)
 8010f28:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8010f2c:	6843      	ldr	r3, [r0, #4]
 8010f2e:	2b05      	cmp	r3, #5
 8010f30:	b088      	sub	sp, #32
 8010f32:	4604      	mov	r4, r0
 8010f34:	d00e      	beq.n	8010f54 <BUTTON_DrawSkinFlex+0x34>
 8010f36:	dc06      	bgt.n	8010f46 <BUTTON_DrawSkinFlex+0x26>
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f040 8104 	bne.w	8011146 <BUTTON_DrawSkinFlex+0x226>
 8010f3e:	6800      	ldr	r0, [r0, #0]
 8010f40:	f7f8 f8ea 	bl	8009118 <WM_SetHasTrans>
 8010f44:	e0ff      	b.n	8011146 <BUTTON_DrawSkinFlex+0x226>
 8010f46:	2b06      	cmp	r3, #6
 8010f48:	f000 8088 	beq.w	801105c <BUTTON_DrawSkinFlex+0x13c>
 8010f4c:	2b12      	cmp	r3, #18
 8010f4e:	f000 80a9 	beq.w	80110a4 <BUTTON_DrawSkinFlex+0x184>
 8010f52:	e0f8      	b.n	8011146 <BUTTON_DrawSkinFlex+0x226>
 8010f54:	69ee      	ldr	r6, [r5, #28]
 8010f56:	2e00      	cmp	r6, #0
 8010f58:	d051      	beq.n	8010ffe <BUTTON_DrawSkinFlex+0xde>
 8010f5a:	9600      	str	r6, [sp, #0]
 8010f5c:	682b      	ldr	r3, [r5, #0]
 8010f5e:	9301      	str	r3, [sp, #4]
 8010f60:	686b      	ldr	r3, [r5, #4]
 8010f62:	9302      	str	r3, [sp, #8]
 8010f64:	68ab      	ldr	r3, [r5, #8]
 8010f66:	9303      	str	r3, [sp, #12]
 8010f68:	3010      	adds	r0, #16
 8010f6a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8010f6c:	f002 fc52 	bl	8013814 <GUI__DrawTwinArc4>
 8010f70:	2600      	movs	r6, #0
 8010f72:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8010f76:	f7fd fddf 	bl	800eb38 <GUI_SetColor>
 8010f7a:	69eb      	ldr	r3, [r5, #28]
 8010f7c:	6960      	ldr	r0, [r4, #20]
 8010f7e:	6921      	ldr	r1, [r4, #16]
 8010f80:	69a2      	ldr	r2, [r4, #24]
 8010f82:	4430      	add	r0, r6
 8010f84:	4419      	add	r1, r3
 8010f86:	1ad2      	subs	r2, r2, r3
 8010f88:	f7fe f802 	bl	800ef90 <GUI_DrawHLine>
 8010f8c:	69eb      	ldr	r3, [r5, #28]
 8010f8e:	69e0      	ldr	r0, [r4, #28]
 8010f90:	6921      	ldr	r1, [r4, #16]
 8010f92:	69a2      	ldr	r2, [r4, #24]
 8010f94:	1b80      	subs	r0, r0, r6
 8010f96:	4419      	add	r1, r3
 8010f98:	1ad2      	subs	r2, r2, r3
 8010f9a:	f7fd fff9 	bl	800ef90 <GUI_DrawHLine>
 8010f9e:	69eb      	ldr	r3, [r5, #28]
 8010fa0:	6920      	ldr	r0, [r4, #16]
 8010fa2:	6961      	ldr	r1, [r4, #20]
 8010fa4:	69e2      	ldr	r2, [r4, #28]
 8010fa6:	4430      	add	r0, r6
 8010fa8:	4419      	add	r1, r3
 8010faa:	1ad2      	subs	r2, r2, r3
 8010fac:	f7fd ffce 	bl	800ef4c <GUI_DrawVLine>
 8010fb0:	69eb      	ldr	r3, [r5, #28]
 8010fb2:	69a0      	ldr	r0, [r4, #24]
 8010fb4:	6961      	ldr	r1, [r4, #20]
 8010fb6:	69e2      	ldr	r2, [r4, #28]
 8010fb8:	1b80      	subs	r0, r0, r6
 8010fba:	4419      	add	r1, r3
 8010fbc:	1ad2      	subs	r2, r2, r3
 8010fbe:	3601      	adds	r6, #1
 8010fc0:	f7fd ffc4 	bl	800ef4c <GUI_DrawVLine>
 8010fc4:	2e02      	cmp	r6, #2
 8010fc6:	d1d4      	bne.n	8010f72 <BUTTON_DrawSkinFlex+0x52>
 8010fc8:	68a8      	ldr	r0, [r5, #8]
 8010fca:	f7fd fdb5 	bl	800eb38 <GUI_SetColor>
 8010fce:	69eb      	ldr	r3, [r5, #28]
 8010fd0:	6920      	ldr	r0, [r4, #16]
 8010fd2:	69e6      	ldr	r6, [r4, #28]
 8010fd4:	6961      	ldr	r1, [r4, #20]
 8010fd6:	18c2      	adds	r2, r0, r3
 8010fd8:	4419      	add	r1, r3
 8010fda:	3002      	adds	r0, #2
 8010fdc:	1af3      	subs	r3, r6, r3
 8010fde:	3a01      	subs	r2, #1
 8010fe0:	f7fd ff6e 	bl	800eec0 <GUI_FillRect>
 8010fe4:	69eb      	ldr	r3, [r5, #28]
 8010fe6:	69a2      	ldr	r2, [r4, #24]
 8010fe8:	69e6      	ldr	r6, [r4, #28]
 8010fea:	6961      	ldr	r1, [r4, #20]
 8010fec:	1ad0      	subs	r0, r2, r3
 8010fee:	4419      	add	r1, r3
 8010ff0:	3001      	adds	r0, #1
 8010ff2:	1af3      	subs	r3, r6, r3
 8010ff4:	3a02      	subs	r2, #2
 8010ff6:	f7fd ff63 	bl	800eec0 <GUI_FillRect>
 8010ffa:	69ee      	ldr	r6, [r5, #28]
 8010ffc:	e00f      	b.n	801101e <BUTTON_DrawSkinFlex+0xfe>
 8010ffe:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8011002:	f7fd fd99 	bl	800eb38 <GUI_SetColor>
 8011006:	f104 0010 	add.w	r0, r4, #16
 801100a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801100c:	4430      	add	r0, r6
 801100e:	4431      	add	r1, r6
 8011010:	1b92      	subs	r2, r2, r6
 8011012:	1b9b      	subs	r3, r3, r6
 8011014:	3601      	adds	r6, #1
 8011016:	f004 ff55 	bl	8015ec4 <GUI_DrawRect>
 801101a:	2e02      	cmp	r6, #2
 801101c:	d1ef      	bne.n	8010ffe <BUTTON_DrawSkinFlex+0xde>
 801101e:	f104 0010 	add.w	r0, r4, #16
 8011022:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8011024:	68ef      	ldr	r7, [r5, #12]
 8011026:	9700      	str	r7, [sp, #0]
 8011028:	692f      	ldr	r7, [r5, #16]
 801102a:	9701      	str	r7, [sp, #4]
 801102c:	440b      	add	r3, r1
 801102e:	4430      	add	r0, r6
 8011030:	1b92      	subs	r2, r2, r6
 8011032:	3102      	adds	r1, #2
 8011034:	105b      	asrs	r3, r3, #1
 8011036:	f004 fd9d 	bl	8015b74 <GUI_DrawGradientV>
 801103a:	69e3      	ldr	r3, [r4, #28]
 801103c:	6962      	ldr	r2, [r4, #20]
 801103e:	6920      	ldr	r0, [r4, #16]
 8011040:	441a      	add	r2, r3
 8011042:	1051      	asrs	r1, r2, #1
 8011044:	69a2      	ldr	r2, [r4, #24]
 8011046:	696c      	ldr	r4, [r5, #20]
 8011048:	9400      	str	r4, [sp, #0]
 801104a:	69ac      	ldr	r4, [r5, #24]
 801104c:	9401      	str	r4, [sp, #4]
 801104e:	4430      	add	r0, r6
 8011050:	3101      	adds	r1, #1
 8011052:	1b92      	subs	r2, r2, r6
 8011054:	3b02      	subs	r3, #2
 8011056:	f004 fd8d 	bl	8015b74 <GUI_DrawGradientV>
 801105a:	e074      	b.n	8011146 <BUTTON_DrawSkinFlex+0x226>
 801105c:	6800      	ldr	r0, [r0, #0]
 801105e:	f7fe fe7f 	bl	800fd60 <GUI_ALLOC_LockH>
 8011062:	9004      	str	r0, [sp, #16]
 8011064:	6820      	ldr	r0, [r4, #0]
 8011066:	f000 f8e5 	bl	8011234 <WM__IsEnabled>
 801106a:	9b04      	ldr	r3, [sp, #16]
 801106c:	b130      	cbz	r0, 801107c <BUTTON_DrawSkinFlex+0x15c>
 801106e:	68a2      	ldr	r2, [r4, #8]
 8011070:	b952      	cbnz	r2, 8011088 <BUTTON_DrawSkinFlex+0x168>
 8011072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011074:	3200      	adds	r2, #0
 8011076:	bf18      	it	ne
 8011078:	2201      	movne	r2, #1
 801107a:	e006      	b.n	801108a <BUTTON_DrawSkinFlex+0x16a>
 801107c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801107e:	2a00      	cmp	r2, #0
 8011080:	bf0c      	ite	eq
 8011082:	2200      	moveq	r2, #0
 8011084:	2202      	movne	r2, #2
 8011086:	e000      	b.n	801108a <BUTTON_DrawSkinFlex+0x16a>
 8011088:	2200      	movs	r2, #0
 801108a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801108e:	a804      	add	r0, sp, #16
 8011090:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8011092:	f7fe fe73 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011096:	2200      	movs	r2, #0
 8011098:	4628      	mov	r0, r5
 801109a:	6821      	ldr	r1, [r4, #0]
 801109c:	4613      	mov	r3, r2
 801109e:	f7ff ff02 	bl	8010ea6 <GUI_DRAW__Draw>
 80110a2:	e050      	b.n	8011146 <BUTTON_DrawSkinFlex+0x226>
 80110a4:	6800      	ldr	r0, [r0, #0]
 80110a6:	f7fe fe5b 	bl	800fd60 <GUI_ALLOC_LockH>
 80110aa:	ae08      	add	r6, sp, #32
 80110ac:	6e87      	ldr	r7, [r0, #104]	; 0x68
 80110ae:	f846 0d10 	str.w	r0, [r6, #-16]!
 80110b2:	2f00      	cmp	r7, #0
 80110b4:	d044      	beq.n	8011140 <BUTTON_DrawSkinFlex+0x220>
 80110b6:	68a2      	ldr	r2, [r4, #8]
 80110b8:	f9b0 805c 	ldrsh.w	r8, [r0, #92]	; 0x5c
 80110bc:	b122      	cbz	r2, 80110c8 <BUTTON_DrawSkinFlex+0x1a8>
 80110be:	2a03      	cmp	r2, #3
 80110c0:	bf14      	ite	ne
 80110c2:	2100      	movne	r1, #0
 80110c4:	2102      	moveq	r1, #2
 80110c6:	e000      	b.n	80110ca <BUTTON_DrawSkinFlex+0x1aa>
 80110c8:	2101      	movs	r1, #1
 80110ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80110ce:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80110d0:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 80110d2:	f7fd fd03 	bl	800eadc <GUI_SetFont>
 80110d6:	4620      	mov	r0, r4
 80110d8:	f7fd fd2e 	bl	800eb38 <GUI_SetColor>
 80110dc:	a806      	add	r0, sp, #24
 80110de:	f004 fc08 	bl	80158f2 <GUI_GetClientRect>
 80110e2:	8bab      	ldrh	r3, [r5, #28]
 80110e4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80110e8:	441a      	add	r2, r3
 80110ea:	f8ad 2018 	strh.w	r2, [sp, #24]
 80110ee:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80110f2:	1ad3      	subs	r3, r2, r3
 80110f4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80110f8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80110fc:	3302      	adds	r3, #2
 80110fe:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011102:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011106:	3b02      	subs	r3, #2
 8011108:	f8ad 301e 	strh.w	r3, [sp, #30]
 801110c:	9b04      	ldr	r3, [sp, #16]
 801110e:	a806      	add	r0, sp, #24
 8011110:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 8011114:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 8011118:	f7fd fe74 	bl	800ee04 <GUI_MoveRect>
 801111c:	4630      	mov	r0, r6
 801111e:	f7fe fe2d 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011122:	2002      	movs	r0, #2
 8011124:	f7fd fcd0 	bl	800eac8 <GUI_SetTextMode>
 8011128:	4638      	mov	r0, r7
 801112a:	f7fe fe19 	bl	800fd60 <GUI_ALLOC_LockH>
 801112e:	ac08      	add	r4, sp, #32
 8011130:	a906      	add	r1, sp, #24
 8011132:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8011136:	4642      	mov	r2, r8
 8011138:	f004 febf 	bl	8015eba <GUI_DispStringInRect>
 801113c:	4620      	mov	r0, r4
 801113e:	e000      	b.n	8011142 <BUTTON_DrawSkinFlex+0x222>
 8011140:	4630      	mov	r0, r6
 8011142:	f7fe fe1b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011146:	2000      	movs	r0, #0
 8011148:	b008      	add	sp, #32
 801114a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801114e:	bf00      	nop
 8011150:	0801a964 	.word	0x0801a964

08011154 <_Create>:
 8011154:	b530      	push	{r4, r5, lr}
 8011156:	b08b      	sub	sp, #44	; 0x2c
 8011158:	2100      	movs	r1, #0
 801115a:	4604      	mov	r4, r0
 801115c:	2224      	movs	r2, #36	; 0x24
 801115e:	a801      	add	r0, sp, #4
 8011160:	f005 fbb2 	bl	80168c8 <memset>
 8011164:	4620      	mov	r0, r4
 8011166:	f7fe fdfb 	bl	800fd60 <GUI_ALLOC_LockH>
 801116a:	ab0a      	add	r3, sp, #40	; 0x28
 801116c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 801116e:	f843 0d28 	str.w	r0, [r3, #-40]!
 8011172:	6895      	ldr	r5, [r2, #8]
 8011174:	4668      	mov	r0, sp
 8011176:	f7fe fe01 	bl	800fd7c <GUI_ALLOC_UnlockH>
 801117a:	2300      	movs	r3, #0
 801117c:	9302      	str	r3, [sp, #8]
 801117e:	9401      	str	r4, [sp, #4]
 8011180:	682b      	ldr	r3, [r5, #0]
 8011182:	a801      	add	r0, sp, #4
 8011184:	4798      	blx	r3
 8011186:	b00b      	add	sp, #44	; 0x2c
 8011188:	bd30      	pop	{r4, r5, pc}

0801118a <_Paint>:
 801118a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801118e:	b08a      	sub	sp, #40	; 0x28
 8011190:	4605      	mov	r5, r0
 8011192:	f7fe fde5 	bl	800fd60 <GUI_ALLOC_LockH>
 8011196:	4603      	mov	r3, r0
 8011198:	a80a      	add	r0, sp, #40	; 0x28
 801119a:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 801119c:	f840 3d28 	str.w	r3, [r0, #-40]!
 80111a0:	4668      	mov	r0, sp
 80111a2:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 80111a4:	8e5f      	ldrh	r7, [r3, #50]	; 0x32
 80111a6:	f7fe fde9 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80111aa:	4628      	mov	r0, r5
 80111ac:	f7f8 fa90 	bl	80096d0 <WM_GetWindowSizeX>
 80111b0:	4680      	mov	r8, r0
 80111b2:	4628      	mov	r0, r5
 80111b4:	f7f8 faa1 	bl	80096fa <WM_GetWindowSizeY>
 80111b8:	2300      	movs	r3, #0
 80111ba:	9306      	str	r3, [sp, #24]
 80111bc:	9305      	str	r3, [sp, #20]
 80111be:	3801      	subs	r0, #1
 80111c0:	f108 33ff 	add.w	r3, r8, #4294967295
 80111c4:	f016 0610 	ands.w	r6, r6, #16
 80111c8:	9501      	str	r5, [sp, #4]
 80111ca:	9307      	str	r3, [sp, #28]
 80111cc:	9008      	str	r0, [sp, #32]
 80111ce:	d001      	beq.n	80111d4 <_Paint+0x4a>
 80111d0:	2303      	movs	r3, #3
 80111d2:	e007      	b.n	80111e4 <_Paint+0x5a>
 80111d4:	05fa      	lsls	r2, r7, #23
 80111d6:	d501      	bpl.n	80111dc <_Paint+0x52>
 80111d8:	9603      	str	r6, [sp, #12]
 80111da:	e004      	b.n	80111e6 <_Paint+0x5c>
 80111dc:	07fb      	lsls	r3, r7, #31
 80111de:	bf4c      	ite	mi
 80111e0:	2301      	movmi	r3, #1
 80111e2:	2302      	movpl	r3, #2
 80111e4:	9303      	str	r3, [sp, #12]
 80111e6:	2305      	movs	r3, #5
 80111e8:	9302      	str	r3, [sp, #8]
 80111ea:	a801      	add	r0, sp, #4
 80111ec:	47a0      	blx	r4
 80111ee:	2306      	movs	r3, #6
 80111f0:	9302      	str	r3, [sp, #8]
 80111f2:	a801      	add	r0, sp, #4
 80111f4:	47a0      	blx	r4
 80111f6:	2312      	movs	r3, #18
 80111f8:	9302      	str	r3, [sp, #8]
 80111fa:	a801      	add	r0, sp, #4
 80111fc:	47a0      	blx	r4
 80111fe:	230a      	movs	r3, #10
 8011200:	9302      	str	r3, [sp, #8]
 8011202:	a801      	add	r0, sp, #4
 8011204:	47a0      	blx	r4
 8011206:	b00a      	add	sp, #40	; 0x28
 8011208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801120c <WM__SendMessageNoPara>:
 801120c:	b530      	push	{r4, r5, lr}
 801120e:	b085      	sub	sp, #20
 8011210:	4604      	mov	r4, r0
 8011212:	2210      	movs	r2, #16
 8011214:	460d      	mov	r5, r1
 8011216:	4668      	mov	r0, sp
 8011218:	2100      	movs	r1, #0
 801121a:	f005 fb55 	bl	80168c8 <memset>
 801121e:	4620      	mov	r0, r4
 8011220:	f7fe fd94 	bl	800fd4c <GUI_ALLOC_h2p>
 8011224:	6903      	ldr	r3, [r0, #16]
 8011226:	b11b      	cbz	r3, 8011230 <WM__SendMessageNoPara+0x24>
 8011228:	9401      	str	r4, [sp, #4]
 801122a:	9500      	str	r5, [sp, #0]
 801122c:	4668      	mov	r0, sp
 801122e:	4798      	blx	r3
 8011230:	b005      	add	sp, #20
 8011232:	bd30      	pop	{r4, r5, pc}

08011234 <WM__IsEnabled>:
 8011234:	b508      	push	{r3, lr}
 8011236:	f7fe fd89 	bl	800fd4c <GUI_ALLOC_h2p>
 801123a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801123c:	f080 0010 	eor.w	r0, r0, #16
 8011240:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8011244:	bd08      	pop	{r3, pc}

08011246 <WM__GetPrevSibling>:
 8011246:	b538      	push	{r3, r4, r5, lr}
 8011248:	4605      	mov	r5, r0
 801124a:	f000 f82d 	bl	80112a8 <WM__GetFirstSibling>
 801124e:	4604      	mov	r4, r0
 8011250:	b154      	cbz	r4, 8011268 <WM__GetPrevSibling+0x22>
 8011252:	42ac      	cmp	r4, r5
 8011254:	d007      	beq.n	8011266 <WM__GetPrevSibling+0x20>
 8011256:	4620      	mov	r0, r4
 8011258:	f7fe fd78 	bl	800fd4c <GUI_ALLOC_h2p>
 801125c:	6a03      	ldr	r3, [r0, #32]
 801125e:	42ab      	cmp	r3, r5
 8011260:	d002      	beq.n	8011268 <WM__GetPrevSibling+0x22>
 8011262:	461c      	mov	r4, r3
 8011264:	e7f4      	b.n	8011250 <WM__GetPrevSibling+0xa>
 8011266:	2400      	movs	r4, #0
 8011268:	4620      	mov	r0, r4
 801126a:	bd38      	pop	{r3, r4, r5, pc}

0801126c <WM__GetLastSibling>:
 801126c:	b510      	push	{r4, lr}
 801126e:	4604      	mov	r4, r0
 8011270:	b130      	cbz	r0, 8011280 <WM__GetLastSibling+0x14>
 8011272:	4620      	mov	r0, r4
 8011274:	f7fe fd6a 	bl	800fd4c <GUI_ALLOC_h2p>
 8011278:	6a03      	ldr	r3, [r0, #32]
 801127a:	b10b      	cbz	r3, 8011280 <WM__GetLastSibling+0x14>
 801127c:	461c      	mov	r4, r3
 801127e:	e7f8      	b.n	8011272 <WM__GetLastSibling+0x6>
 8011280:	4620      	mov	r0, r4
 8011282:	bd10      	pop	{r4, pc}

08011284 <WM__GetFocussedChild>:
 8011284:	b538      	push	{r3, r4, r5, lr}
 8011286:	4d06      	ldr	r5, [pc, #24]	; (80112a0 <WM__GetFocussedChild+0x1c>)
 8011288:	4c06      	ldr	r4, [pc, #24]	; (80112a4 <WM__GetFocussedChild+0x20>)
 801128a:	682b      	ldr	r3, [r5, #0]
 801128c:	4601      	mov	r1, r0
 801128e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8011292:	f005 fa07 	bl	80166a4 <WM__IsChild>
 8011296:	b110      	cbz	r0, 801129e <WM__GetFocussedChild+0x1a>
 8011298:	682b      	ldr	r3, [r5, #0]
 801129a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801129e:	bd38      	pop	{r3, r4, r5, pc}
 80112a0:	2001d4b4 	.word	0x2001d4b4
 80112a4:	2001d4a4 	.word	0x2001d4a4

080112a8 <WM__GetFirstSibling>:
 80112a8:	b508      	push	{r3, lr}
 80112aa:	f7f8 fa71 	bl	8009790 <WM_GetParent>
 80112ae:	b118      	cbz	r0, 80112b8 <WM__GetFirstSibling+0x10>
 80112b0:	f7fe fd4c 	bl	800fd4c <GUI_ALLOC_h2p>
 80112b4:	69c0      	ldr	r0, [r0, #28]
 80112b6:	bd08      	pop	{r3, pc}
 80112b8:	bd08      	pop	{r3, pc}
	...

080112bc <WM_ValidateWindow>:
 80112bc:	b507      	push	{r0, r1, r2, lr}
 80112be:	b178      	cbz	r0, 80112e0 <WM_ValidateWindow+0x24>
 80112c0:	f7fe fd4e 	bl	800fd60 <GUI_ALLOC_LockH>
 80112c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80112c6:	9001      	str	r0, [sp, #4]
 80112c8:	069a      	lsls	r2, r3, #26
 80112ca:	d506      	bpl.n	80112da <WM_ValidateWindow+0x1e>
 80112cc:	f023 0320 	bic.w	r3, r3, #32
 80112d0:	6283      	str	r3, [r0, #40]	; 0x28
 80112d2:	4b05      	ldr	r3, [pc, #20]	; (80112e8 <WM_ValidateWindow+0x2c>)
 80112d4:	881a      	ldrh	r2, [r3, #0]
 80112d6:	3a01      	subs	r2, #1
 80112d8:	801a      	strh	r2, [r3, #0]
 80112da:	a801      	add	r0, sp, #4
 80112dc:	f7fe fd4e 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80112e0:	b003      	add	sp, #12
 80112e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80112e6:	bf00      	nop
 80112e8:	2001d4ac 	.word	0x2001d4ac

080112ec <WM__IsInModalArea>:
 80112ec:	4b12      	ldr	r3, [pc, #72]	; (8011338 <WM__IsInModalArea+0x4c>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	b570      	push	{r4, r5, r6, lr}
 80112f4:	4604      	mov	r4, r0
 80112f6:	da0f      	bge.n	8011318 <WM__IsInModalArea+0x2c>
 80112f8:	4e10      	ldr	r6, [pc, #64]	; (801133c <WM__IsInModalArea+0x50>)
 80112fa:	4d11      	ldr	r5, [pc, #68]	; (8011340 <WM__IsInModalArea+0x54>)
 80112fc:	6833      	ldr	r3, [r6, #0]
 80112fe:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8011302:	4620      	mov	r0, r4
 8011304:	6859      	ldr	r1, [r3, #4]
 8011306:	f7f7 fec8 	bl	800909a <WM__IsAncestor>
 801130a:	6833      	ldr	r3, [r6, #0]
 801130c:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011310:	686a      	ldr	r2, [r5, #4]
 8011312:	686b      	ldr	r3, [r5, #4]
 8011314:	b942      	cbnz	r2, 8011328 <WM__IsInModalArea+0x3c>
 8011316:	e00c      	b.n	8011332 <WM__IsInModalArea+0x46>
 8011318:	4a0a      	ldr	r2, [pc, #40]	; (8011344 <WM__IsInModalArea+0x58>)
 801131a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801131e:	f7f7 febc 	bl	800909a <WM__IsAncestor>
 8011322:	2800      	cmp	r0, #0
 8011324:	d1e8      	bne.n	80112f8 <WM__IsInModalArea+0xc>
 8011326:	bd70      	pop	{r4, r5, r6, pc}
 8011328:	b918      	cbnz	r0, 8011332 <WM__IsInModalArea+0x46>
 801132a:	1ae3      	subs	r3, r4, r3
 801132c:	4258      	negs	r0, r3
 801132e:	4158      	adcs	r0, r3
 8011330:	bd70      	pop	{r4, r5, r6, pc}
 8011332:	2001      	movs	r0, #1
 8011334:	bd70      	pop	{r4, r5, r6, pc}
 8011336:	bf00      	nop
 8011338:	200001b4 	.word	0x200001b4
 801133c:	2001d4b4 	.word	0x2001d4b4
 8011340:	2001d600 	.word	0x2001d600
 8011344:	2001d494 	.word	0x2001d494

08011348 <WM__SendPIDMessage>:
 8011348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801134a:	4606      	mov	r6, r0
 801134c:	460c      	mov	r4, r1
 801134e:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8011350:	b085      	sub	sp, #20
 8011352:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011356:	230d      	movs	r3, #13
 8011358:	9602      	str	r6, [sp, #8]
 801135a:	9300      	str	r3, [sp, #0]
 801135c:	4637      	mov	r7, r6
 801135e:	4638      	mov	r0, r7
 8011360:	f7f8 f977 	bl	8009652 <WM_IsWindow>
 8011364:	b150      	cbz	r0, 801137c <WM__SendPIDMessage+0x34>
 8011366:	4638      	mov	r0, r7
 8011368:	f7f8 fa12 	bl	8009790 <WM_GetParent>
 801136c:	4607      	mov	r7, r0
 801136e:	2800      	cmp	r0, #0
 8011370:	d0f5      	beq.n	801135e <WM__SendPIDMessage+0x16>
 8011372:	4669      	mov	r1, sp
 8011374:	9403      	str	r4, [sp, #12]
 8011376:	f005 f988 	bl	801668a <WM__SendMessageIfEnabled>
 801137a:	e7f0      	b.n	801135e <WM__SendPIDMessage+0x16>
 801137c:	4630      	mov	r0, r6
 801137e:	4621      	mov	r1, r4
 8011380:	f005 f983 	bl	801668a <WM__SendMessageIfEnabled>
 8011384:	b005      	add	sp, #20
 8011386:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011388 <WM__SendTouchMessage>:
 8011388:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801138a:	68cc      	ldr	r4, [r1, #12]
 801138c:	4606      	mov	r6, r0
 801138e:	460d      	mov	r5, r1
 8011390:	b194      	cbz	r4, 80113b8 <WM__SendTouchMessage+0x30>
 8011392:	f7fe fce5 	bl	800fd60 <GUI_ALLOC_LockH>
 8011396:	ab02      	add	r3, sp, #8
 8011398:	4602      	mov	r2, r0
 801139a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801139e:	6821      	ldr	r1, [r4, #0]
 80113a0:	f9b0 0000 	ldrsh.w	r0, [r0]
 80113a4:	1a09      	subs	r1, r1, r0
 80113a6:	6021      	str	r1, [r4, #0]
 80113a8:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80113ac:	6862      	ldr	r2, [r4, #4]
 80113ae:	1a52      	subs	r2, r2, r1
 80113b0:	6062      	str	r2, [r4, #4]
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7fe fce2 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80113b8:	4630      	mov	r0, r6
 80113ba:	4629      	mov	r1, r5
 80113bc:	f7ff ffc4 	bl	8011348 <WM__SendPIDMessage>
 80113c0:	b002      	add	sp, #8
 80113c2:	bd70      	pop	{r4, r5, r6, pc}

080113c4 <WM_HandlePID>:
 80113c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c8:	b097      	sub	sp, #92	; 0x5c
 80113ca:	ae06      	add	r6, sp, #24
 80113cc:	f04f 080c 	mov.w	r8, #12
 80113d0:	2100      	movs	r1, #0
 80113d2:	4642      	mov	r2, r8
 80113d4:	4630      	mov	r0, r6
 80113d6:	f005 fa77 	bl	80168c8 <memset>
 80113da:	f7fd fcdb 	bl	800ed94 <GUI_PID_IsEmpty>
 80113de:	b108      	cbz	r0, 80113e4 <WM_HandlePID+0x20>
 80113e0:	2000      	movs	r0, #0
 80113e2:	e1aa      	b.n	801173a <WM_HandlePID+0x376>
 80113e4:	ac09      	add	r4, sp, #36	; 0x24
 80113e6:	4620      	mov	r0, r4
 80113e8:	f7fd fc58 	bl	800ec9c <GUI_PID_GetState>
 80113ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113ee:	4dad      	ldr	r5, [pc, #692]	; (80116a4 <WM_HandlePID+0x2e0>)
 80113f0:	4fad      	ldr	r7, [pc, #692]	; (80116a8 <WM_HandlePID+0x2e4>)
 80113f2:	1c5a      	adds	r2, r3, #1
 80113f4:	d112      	bne.n	801141c <WM_HandlePID+0x58>
 80113f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113f8:	3301      	adds	r3, #1
 80113fa:	d11e      	bne.n	801143a <WM_HandlePID+0x76>
 80113fc:	682b      	ldr	r3, [r5, #0]
 80113fe:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8011402:	fb08 f803 	mul.w	r8, r8, r3
 8011406:	eb07 0308 	add.w	r3, r7, r8
 801140a:	7a19      	ldrb	r1, [r3, #8]
 801140c:	4291      	cmp	r1, r2
 801140e:	d0e7      	beq.n	80113e0 <WM_HandlePID+0x1c>
 8011410:	f857 2008 	ldr.w	r2, [r7, r8]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	9209      	str	r2, [sp, #36]	; 0x24
 8011418:	930a      	str	r3, [sp, #40]	; 0x28
 801141a:	e00e      	b.n	801143a <WM_HandlePID+0x76>
 801141c:	2b00      	cmp	r3, #0
 801141e:	db0c      	blt.n	801143a <WM_HandlePID+0x76>
 8011420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011422:	2a00      	cmp	r2, #0
 8011424:	db09      	blt.n	801143a <WM_HandlePID+0x76>
 8011426:	49a1      	ldr	r1, [pc, #644]	; (80116ac <WM_HandlePID+0x2e8>)
 8011428:	f9b1 1000 	ldrsh.w	r1, [r1]
 801142c:	440b      	add	r3, r1
 801142e:	9309      	str	r3, [sp, #36]	; 0x24
 8011430:	4b9f      	ldr	r3, [pc, #636]	; (80116b0 <WM_HandlePID+0x2ec>)
 8011432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011436:	441a      	add	r2, r3
 8011438:	920a      	str	r2, [sp, #40]	; 0x28
 801143a:	a804      	add	r0, sp, #16
 801143c:	f000 fae4 	bl	8011a08 <WM__AddCriticalHandle>
 8011440:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8011444:	2b01      	cmp	r3, #1
 8011446:	bf98      	it	ls
 8011448:	602b      	strls	r3, [r5, #0]
 801144a:	6828      	ldr	r0, [r5, #0]
 801144c:	a901      	add	r1, sp, #4
 801144e:	aa02      	add	r2, sp, #8
 8011450:	f7fd fb90 	bl	800eb74 <GUI_GetLayerPosEx>
 8011454:	9b01      	ldr	r3, [sp, #4]
 8011456:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011458:	990a      	ldr	r1, [sp, #40]	; 0x28
 801145a:	1ac0      	subs	r0, r0, r3
 801145c:	9b02      	ldr	r3, [sp, #8]
 801145e:	9009      	str	r0, [sp, #36]	; 0x24
 8011460:	1ac9      	subs	r1, r1, r3
 8011462:	682b      	ldr	r3, [r5, #0]
 8011464:	910a      	str	r1, [sp, #40]	; 0x28
 8011466:	220c      	movs	r2, #12
 8011468:	435a      	muls	r2, r3
 801146a:	18bb      	adds	r3, r7, r2
 801146c:	58ba      	ldr	r2, [r7, r2]
 801146e:	4282      	cmp	r2, r0
 8011470:	d108      	bne.n	8011484 <WM_HandlePID+0xc0>
 8011472:	685a      	ldr	r2, [r3, #4]
 8011474:	428a      	cmp	r2, r1
 8011476:	d105      	bne.n	8011484 <WM_HandlePID+0xc0>
 8011478:	7a1a      	ldrb	r2, [r3, #8]
 801147a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801147e:	429a      	cmp	r2, r3
 8011480:	f000 8156 	beq.w	8011730 <WM_HandlePID+0x36c>
 8011484:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8011488:	f7fd ff84 	bl	800f394 <GUI_CURSOR_SetPositionEx>
 801148c:	4b89      	ldr	r3, [pc, #548]	; (80116b4 <WM_HandlePID+0x2f0>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	b113      	cbz	r3, 8011498 <WM_HandlePID+0xd4>
 8011492:	4620      	mov	r0, r4
 8011494:	2100      	movs	r1, #0
 8011496:	4798      	blx	r3
 8011498:	682b      	ldr	r3, [r5, #0]
 801149a:	4a87      	ldr	r2, [pc, #540]	; (80116b8 <WM_HandlePID+0x2f4>)
 801149c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80114a0:	b918      	cbnz	r0, 80114aa <WM_HandlePID+0xe6>
 80114a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80114a6:	f000 fa47 	bl	8011938 <WM_Screen2hWin>
 80114aa:	4b84      	ldr	r3, [pc, #528]	; (80116bc <WM_HandlePID+0x2f8>)
 80114ac:	9005      	str	r0, [sp, #20]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	b113      	cbz	r3, 80114b8 <WM_HandlePID+0xf4>
 80114b2:	9905      	ldr	r1, [sp, #20]
 80114b4:	4620      	mov	r0, r4
 80114b6:	4798      	blx	r3
 80114b8:	4981      	ldr	r1, [pc, #516]	; (80116c0 <WM_HandlePID+0x2fc>)
 80114ba:	682b      	ldr	r3, [r5, #0]
 80114bc:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 80116a4 <WM_HandlePID+0x2e0>
 80114c0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80114c4:	4688      	mov	r8, r1
 80114c6:	685a      	ldr	r2, [r3, #4]
 80114c8:	9805      	ldr	r0, [sp, #20]
 80114ca:	b312      	cbz	r2, 8011512 <WM_HandlePID+0x14e>
 80114cc:	4282      	cmp	r2, r0
 80114ce:	d020      	beq.n	8011512 <WM_HandlePID+0x14e>
 80114d0:	6858      	ldr	r0, [r3, #4]
 80114d2:	f7ff ff0b 	bl	80112ec <WM__IsInModalArea>
 80114d6:	b1e0      	cbz	r0, 8011512 <WM_HandlePID+0x14e>
 80114d8:	f8d9 3000 	ldr.w	r3, [r9]
 80114dc:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80114e0:	6858      	ldr	r0, [r3, #4]
 80114e2:	f7ff fea7 	bl	8011234 <WM__IsEnabled>
 80114e6:	b1a0      	cbz	r0, 8011512 <WM_HandlePID+0x14e>
 80114e8:	2312      	movs	r3, #18
 80114ea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80114ee:	9312      	str	r3, [sp, #72]	; 0x48
 80114f0:	f8d9 3000 	ldr.w	r3, [r9]
 80114f4:	9615      	str	r6, [sp, #84]	; 0x54
 80114f6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80114fa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80114fe:	6858      	ldr	r0, [r3, #4]
 8011500:	a912      	add	r1, sp, #72	; 0x48
 8011502:	f7ff ff41 	bl	8011388 <WM__SendTouchMessage>
 8011506:	f8d9 3000 	ldr.w	r3, [r9]
 801150a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801150e:	2200      	movs	r2, #0
 8011510:	605a      	str	r2, [r3, #4]
 8011512:	9805      	ldr	r0, [sp, #20]
 8011514:	f7ff feea 	bl	80112ec <WM__IsInModalArea>
 8011518:	b908      	cbnz	r0, 801151e <WM_HandlePID+0x15a>
 801151a:	2600      	movs	r6, #0
 801151c:	e0fb      	b.n	8011716 <WM_HandlePID+0x352>
 801151e:	682b      	ldr	r3, [r5, #0]
 8011520:	9905      	ldr	r1, [sp, #20]
 8011522:	f8df a180 	ldr.w	sl, [pc, #384]	; 80116a4 <WM_HandlePID+0x2e0>
 8011526:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80116a8 <WM_HandlePID+0x2e4>
 801152a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801152e:	f04f 080c 	mov.w	r8, #12
 8011532:	fb08 7303 	mla	r3, r8, r3, r7
 8011536:	6051      	str	r1, [r2, #4]
 8011538:	7a1a      	ldrb	r2, [r3, #8]
 801153a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801153e:	429a      	cmp	r2, r3
 8011540:	d062      	beq.n	8011608 <WM_HandlePID+0x244>
 8011542:	9b05      	ldr	r3, [sp, #20]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d05f      	beq.n	8011608 <WM_HandlePID+0x244>
 8011548:	9805      	ldr	r0, [sp, #20]
 801154a:	f7fe fc09 	bl	800fd60 <GUI_ALLOC_LockH>
 801154e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8011552:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 8011556:	f8da 3000 	ldr.w	r3, [sl]
 801155a:	9003      	str	r0, [sp, #12]
 801155c:	fb08 9303 	mla	r3, r8, r3, r9
 8011560:	7a1b      	ldrb	r3, [r3, #8]
 8011562:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 8011566:	f9b0 2000 	ldrsh.w	r2, [r0]
 801156a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801156c:	1a9b      	subs	r3, r3, r2
 801156e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011570:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011576:	eb0d 0008 	add.w	r0, sp, r8
 801157a:	1a9b      	subs	r3, r3, r2
 801157c:	9310      	str	r3, [sp, #64]	; 0x40
 801157e:	f7fe fbfd 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011582:	f8da e000 	ldr.w	lr, [sl]
 8011586:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80116c4 <WM_HandlePID+0x300>
 801158a:	ab0f      	add	r3, sp, #60	; 0x3c
 801158c:	9315      	str	r3, [sp, #84]	; 0x54
 801158e:	2311      	movs	r3, #17
 8011590:	9312      	str	r3, [sp, #72]	; 0x48
 8011592:	fb08 930e 	mla	r3, r8, lr, r9
 8011596:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801159a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801159e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80115a2:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80115a6:	721a      	strb	r2, [r3, #8]
 80115a8:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80115ac:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80115b0:	b133      	cbz	r3, 80115c0 <WM_HandlePID+0x1fc>
 80115b2:	eb0a 030e 	add.w	r3, sl, lr
 80115b6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80115ba:	9a05      	ldr	r2, [sp, #20]
 80115bc:	605a      	str	r2, [r3, #4]
 80115be:	e000      	b.n	80115c2 <WM_HandlePID+0x1fe>
 80115c0:	4699      	mov	r9, r3
 80115c2:	eb0a 030e 	add.w	r3, sl, lr
 80115c6:	a912      	add	r1, sp, #72	; 0x48
 80115c8:	f8d3 b004 	ldr.w	fp, [r3, #4]
 80115cc:	9805      	ldr	r0, [sp, #20]
 80115ce:	f005 f85c 	bl	801668a <WM__SendMessageIfEnabled>
 80115d2:	682b      	ldr	r3, [r5, #0]
 80115d4:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 80115d8:	6851      	ldr	r1, [r2, #4]
 80115da:	458b      	cmp	fp, r1
 80115dc:	bf1c      	itt	ne
 80115de:	6852      	ldrne	r2, [r2, #4]
 80115e0:	9205      	strne	r2, [sp, #20]
 80115e2:	220c      	movs	r2, #12
 80115e4:	fb02 7303 	mla	r3, r2, r3, r7
 80115e8:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80115ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80115f0:	f1b9 0f00 	cmp.w	r9, #0
 80115f4:	d008      	beq.n	8011608 <WM_HandlePID+0x244>
 80115f6:	4648      	mov	r0, r9
 80115f8:	f7f8 f82b 	bl	8009652 <WM_IsWindow>
 80115fc:	b120      	cbz	r0, 8011608 <WM_HandlePID+0x244>
 80115fe:	682b      	ldr	r3, [r5, #0]
 8011600:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8011604:	f8c3 9004 	str.w	r9, [r3, #4]
 8011608:	682a      	ldr	r2, [r5, #0]
 801160a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801160e:	210c      	movs	r1, #12
 8011610:	4351      	muls	r1, r2
 8011612:	1878      	adds	r0, r7, r1
 8011614:	f890 8008 	ldrb.w	r8, [r0, #8]
 8011618:	ea53 0808 	orrs.w	r8, r3, r8
 801161c:	d064      	beq.n	80116e8 <WM_HandlePID+0x324>
 801161e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80116c4 <WM_HandlePID+0x300>
 8011622:	f44f 7e10 	mov.w	lr, #576	; 0x240
 8011626:	00d2      	lsls	r2, r2, #3
 8011628:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 801162c:	eb08 0e02 	add.w	lr, r8, r2
 8011630:	f8de 9004 	ldr.w	r9, [lr, #4]
 8011634:	f8dd c014 	ldr.w	ip, [sp, #20]
 8011638:	45e1      	cmp	r9, ip
 801163a:	d01c      	beq.n	8011676 <WM_HandlePID+0x2b2>
 801163c:	f8de e004 	ldr.w	lr, [lr, #4]
 8011640:	f1be 0f00 	cmp.w	lr, #0
 8011644:	d017      	beq.n	8011676 <WM_HandlePID+0x2b2>
 8011646:	b113      	cbz	r3, 801164e <WM_HandlePID+0x28a>
 8011648:	2300      	movs	r3, #0
 801164a:	9315      	str	r3, [sp, #84]	; 0x54
 801164c:	e009      	b.n	8011662 <WM_HandlePID+0x29e>
 801164e:	f8df e058 	ldr.w	lr, [pc, #88]	; 80116a8 <WM_HandlePID+0x2e4>
 8011652:	f88d 3020 	strb.w	r3, [sp, #32]
 8011656:	f85e 1001 	ldr.w	r1, [lr, r1]
 801165a:	9106      	str	r1, [sp, #24]
 801165c:	6841      	ldr	r1, [r0, #4]
 801165e:	9107      	str	r1, [sp, #28]
 8011660:	9615      	str	r6, [sp, #84]	; 0x54
 8011662:	4442      	add	r2, r8
 8011664:	a912      	add	r1, sp, #72	; 0x48
 8011666:	6850      	ldr	r0, [r2, #4]
 8011668:	f7ff fe8e 	bl	8011388 <WM__SendTouchMessage>
 801166c:	682b      	ldr	r3, [r5, #0]
 801166e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8011672:	2200      	movs	r2, #0
 8011674:	605a      	str	r2, [r3, #4]
 8011676:	682b      	ldr	r3, [r5, #0]
 8011678:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
 801167c:	220c      	movs	r2, #12
 801167e:	fb02 7203 	mla	r2, r2, r3, r7
 8011682:	f882 e008 	strb.w	lr, [r2, #8]
 8011686:	9a05      	ldr	r2, [sp, #20]
 8011688:	2a00      	cmp	r2, #0
 801168a:	d043      	beq.n	8011714 <WM_HandlePID+0x350>
 801168c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011690:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8011694:	f1be 0f00 	cmp.w	lr, #0
 8011698:	d016      	beq.n	80116c8 <WM_HandlePID+0x304>
 801169a:	9a05      	ldr	r2, [sp, #20]
 801169c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80116a0:	e01b      	b.n	80116da <WM_HandlePID+0x316>
 80116a2:	bf00      	nop
 80116a4:	2001d4b4 	.word	0x2001d4b4
 80116a8:	2001d2d4 	.word	0x2001d2d4
 80116ac:	2001d4f8 	.word	0x2001d4f8
 80116b0:	2001d4ec 	.word	0x2001d4ec
 80116b4:	2001d2cc 	.word	0x2001d2cc
 80116b8:	2001d4d0 	.word	0x2001d4d0
 80116bc:	2001d2d0 	.word	0x2001d2d0
 80116c0:	2001d5e0 	.word	0x2001d5e0
 80116c4:	2001d5f0 	.word	0x2001d5f0
 80116c8:	4b1d      	ldr	r3, [pc, #116]	; (8011740 <WM_HandlePID+0x37c>)
 80116ca:	781b      	ldrb	r3, [r3, #0]
 80116cc:	b10b      	cbz	r3, 80116d2 <WM_HandlePID+0x30e>
 80116ce:	f7f7 feab 	bl	8009428 <WM_ReleaseCapture>
 80116d2:	682b      	ldr	r3, [r5, #0]
 80116d4:	2200      	movs	r2, #0
 80116d6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80116da:	605a      	str	r2, [r3, #4]
 80116dc:	9805      	ldr	r0, [sp, #20]
 80116de:	9615      	str	r6, [sp, #84]	; 0x54
 80116e0:	a912      	add	r1, sp, #72	; 0x48
 80116e2:	f7ff fe51 	bl	8011388 <WM__SendTouchMessage>
 80116e6:	e015      	b.n	8011714 <WM_HandlePID+0x350>
 80116e8:	9b05      	ldr	r3, [sp, #20]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f43f af15 	beq.w	801151a <WM_HandlePID+0x156>
 80116f0:	9805      	ldr	r0, [sp, #20]
 80116f2:	f7ff fd9f 	bl	8011234 <WM__IsEnabled>
 80116f6:	2800      	cmp	r0, #0
 80116f8:	f43f af0f 	beq.w	801151a <WM_HandlePID+0x156>
 80116fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011700:	2310      	movs	r3, #16
 8011702:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8011706:	9805      	ldr	r0, [sp, #20]
 8011708:	9312      	str	r3, [sp, #72]	; 0x48
 801170a:	a912      	add	r1, sp, #72	; 0x48
 801170c:	9615      	str	r6, [sp, #84]	; 0x54
 801170e:	f7ff fe3b 	bl	8011388 <WM__SendTouchMessage>
 8011712:	e702      	b.n	801151a <WM_HandlePID+0x156>
 8011714:	2601      	movs	r6, #1
 8011716:	682b      	ldr	r3, [r5, #0]
 8011718:	220c      	movs	r2, #12
 801171a:	fb02 7703 	mla	r7, r2, r3, r7
 801171e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011722:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8011726:	4620      	mov	r0, r4
 8011728:	4619      	mov	r1, r3
 801172a:	f000 f915 	bl	8011958 <WM_PID__SetPrevState>
 801172e:	e000      	b.n	8011732 <WM_HandlePID+0x36e>
 8011730:	2600      	movs	r6, #0
 8011732:	a804      	add	r0, sp, #16
 8011734:	f000 f970 	bl	8011a18 <WM__RemoveCriticalHandle>
 8011738:	4630      	mov	r0, r6
 801173a:	b017      	add	sp, #92	; 0x5c
 801173c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011740:	2001d4b8 	.word	0x2001d4b8

08011744 <_cbTimer>:
 8011744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011746:	4604      	mov	r4, r0
 8011748:	2100      	movs	r1, #0
 801174a:	4668      	mov	r0, sp
 801174c:	2210      	movs	r2, #16
 801174e:	f005 f8bb 	bl	80168c8 <memset>
 8011752:	6860      	ldr	r0, [r4, #4]
 8011754:	b150      	cbz	r0, 801176c <_cbTimer+0x28>
 8011756:	f7fe faf9 	bl	800fd4c <GUI_ALLOC_h2p>
 801175a:	f240 1313 	movw	r3, #275	; 0x113
 801175e:	6840      	ldr	r0, [r0, #4]
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	4669      	mov	r1, sp
 8011764:	6863      	ldr	r3, [r4, #4]
 8011766:	9303      	str	r3, [sp, #12]
 8011768:	f7f8 fdb4 	bl	800a2d4 <WM_SendMessage>
 801176c:	b004      	add	sp, #16
 801176e:	bd10      	pop	{r4, pc}

08011770 <WM_DeleteTimer>:
 8011770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011772:	4605      	mov	r5, r0
 8011774:	b168      	cbz	r0, 8011792 <WM_DeleteTimer+0x22>
 8011776:	f7fe faf3 	bl	800fd60 <GUI_ALLOC_LockH>
 801177a:	ac02      	add	r4, sp, #8
 801177c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8011780:	6800      	ldr	r0, [r0, #0]
 8011782:	f7fc fd63 	bl	800e24c <GUI_TIMER_Delete>
 8011786:	4620      	mov	r0, r4
 8011788:	f7fe faf8 	bl	800fd7c <GUI_ALLOC_UnlockH>
 801178c:	4628      	mov	r0, r5
 801178e:	f7fe fb21 	bl	800fdd4 <GUI_ALLOC_Free>
 8011792:	b003      	add	sp, #12
 8011794:	bd30      	pop	{r4, r5, pc}

08011796 <WM__DeleteAssocTimer>:
 8011796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011798:	4605      	mov	r5, r0
 801179a:	a801      	add	r0, sp, #4
 801179c:	f7fc fcd4 	bl	800e148 <GUI_TIMER__GetFirstTimer>
 80117a0:	4604      	mov	r4, r0
 80117a2:	b1dc      	cbz	r4, 80117dc <WM__DeleteAssocTimer+0x46>
 80117a4:	4620      	mov	r0, r4
 80117a6:	2101      	movs	r1, #1
 80117a8:	f7fc fdab 	bl	800e302 <GUI_TIMER_GetFlag>
 80117ac:	9b01      	ldr	r3, [sp, #4]
 80117ae:	b183      	cbz	r3, 80117d2 <WM__DeleteAssocTimer+0x3c>
 80117b0:	b178      	cbz	r0, 80117d2 <WM__DeleteAssocTimer+0x3c>
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7fe faca 	bl	800fd4c <GUI_ALLOC_h2p>
 80117b8:	6843      	ldr	r3, [r0, #4]
 80117ba:	42ab      	cmp	r3, r5
 80117bc:	d109      	bne.n	80117d2 <WM__DeleteAssocTimer+0x3c>
 80117be:	4620      	mov	r0, r4
 80117c0:	a901      	add	r1, sp, #4
 80117c2:	9e01      	ldr	r6, [sp, #4]
 80117c4:	f7fc fcd8 	bl	800e178 <GUI_TIMER__GetNextTimerLin>
 80117c8:	4604      	mov	r4, r0
 80117ca:	4630      	mov	r0, r6
 80117cc:	f7ff ffd0 	bl	8011770 <WM_DeleteTimer>
 80117d0:	e7e7      	b.n	80117a2 <WM__DeleteAssocTimer+0xc>
 80117d2:	4620      	mov	r0, r4
 80117d4:	a901      	add	r1, sp, #4
 80117d6:	f7fc fccf 	bl	800e178 <GUI_TIMER__GetNextTimerLin>
 80117da:	e7e1      	b.n	80117a0 <WM__DeleteAssocTimer+0xa>
 80117dc:	b002      	add	sp, #8
 80117de:	bd70      	pop	{r4, r5, r6, pc}

080117e0 <WM_CreateTimer>:
 80117e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80117e4:	4680      	mov	r8, r0
 80117e6:	200c      	movs	r0, #12
 80117e8:	460f      	mov	r7, r1
 80117ea:	4616      	mov	r6, r2
 80117ec:	f7fe fd25 	bl	801023a <GUI_ALLOC_AllocZero>
 80117f0:	4604      	mov	r4, r0
 80117f2:	b1f0      	cbz	r0, 8011832 <WM_CreateTimer+0x52>
 80117f4:	f7fc fd9a 	bl	800e32c <GUI_GetTime>
 80117f8:	4622      	mov	r2, r4
 80117fa:	1981      	adds	r1, r0, r6
 80117fc:	2301      	movs	r3, #1
 80117fe:	480f      	ldr	r0, [pc, #60]	; (801183c <WM_CreateTimer+0x5c>)
 8011800:	f7fc fcd6 	bl	800e1b0 <GUI_TIMER_Create>
 8011804:	4605      	mov	r5, r0
 8011806:	4620      	mov	r0, r4
 8011808:	b185      	cbz	r5, 801182c <WM_CreateTimer+0x4c>
 801180a:	f7fe faa9 	bl	800fd60 <GUI_ALLOC_LockH>
 801180e:	4603      	mov	r3, r0
 8011810:	a802      	add	r0, sp, #8
 8011812:	f8c3 8004 	str.w	r8, [r3, #4]
 8011816:	f840 3d04 	str.w	r3, [r0, #-4]!
 801181a:	609f      	str	r7, [r3, #8]
 801181c:	601d      	str	r5, [r3, #0]
 801181e:	f7fe faad 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011822:	4628      	mov	r0, r5
 8011824:	4631      	mov	r1, r6
 8011826:	f7fc fd45 	bl	800e2b4 <GUI_TIMER_SetPeriod>
 801182a:	e002      	b.n	8011832 <WM_CreateTimer+0x52>
 801182c:	f7fe fad2 	bl	800fdd4 <GUI_ALLOC_Free>
 8011830:	462c      	mov	r4, r5
 8011832:	4620      	mov	r0, r4
 8011834:	b002      	add	sp, #8
 8011836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801183a:	bf00      	nop
 801183c:	08011745 	.word	0x08011745

08011840 <WM_RestartTimer>:
 8011840:	b513      	push	{r0, r1, r4, lr}
 8011842:	460c      	mov	r4, r1
 8011844:	b180      	cbz	r0, 8011868 <WM_RestartTimer+0x28>
 8011846:	f7fe fa8b 	bl	800fd60 <GUI_ALLOC_LockH>
 801184a:	9001      	str	r0, [sp, #4]
 801184c:	b11c      	cbz	r4, 8011856 <WM_RestartTimer+0x16>
 801184e:	6800      	ldr	r0, [r0, #0]
 8011850:	4621      	mov	r1, r4
 8011852:	f7fc fd2f 	bl	800e2b4 <GUI_TIMER_SetPeriod>
 8011856:	ac02      	add	r4, sp, #8
 8011858:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 801185c:	6818      	ldr	r0, [r3, #0]
 801185e:	f7fc fd37 	bl	800e2d0 <GUI_TIMER_Restart>
 8011862:	4620      	mov	r0, r4
 8011864:	f7fe fa8a 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011868:	b002      	add	sp, #8
 801186a:	bd10      	pop	{r4, pc}

0801186c <WM_SetUserClipRect>:
 801186c:	4b04      	ldr	r3, [pc, #16]	; (8011880 <WM_SetUserClipRect+0x14>)
 801186e:	b510      	push	{r4, lr}
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8011874:	6458      	str	r0, [r3, #68]	; 0x44
 8011876:	f7f8 fbdd 	bl	800a034 <WM__ActivateClipRect>
 801187a:	4620      	mov	r0, r4
 801187c:	bd10      	pop	{r4, pc}
 801187e:	bf00      	nop
 8011880:	200000d8 	.word	0x200000d8

08011884 <WM_SendToParent>:
 8011884:	b538      	push	{r3, r4, r5, lr}
 8011886:	4605      	mov	r5, r0
 8011888:	460c      	mov	r4, r1
 801188a:	b141      	cbz	r1, 801189e <WM_SendToParent+0x1a>
 801188c:	f7f7 ff80 	bl	8009790 <WM_GetParent>
 8011890:	b128      	cbz	r0, 801189e <WM_SendToParent+0x1a>
 8011892:	60a5      	str	r5, [r4, #8]
 8011894:	4621      	mov	r1, r4
 8011896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801189a:	f7f7 bbd7 	b.w	800904c <WM__SendMessage>
 801189e:	bd38      	pop	{r3, r4, r5, pc}

080118a0 <WM__IsInWindow>:
 80118a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80118a2:	f013 0302 	ands.w	r3, r3, #2
 80118a6:	d012      	beq.n	80118ce <WM__IsInWindow+0x2e>
 80118a8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80118ac:	4299      	cmp	r1, r3
 80118ae:	db10      	blt.n	80118d2 <WM__IsInWindow+0x32>
 80118b0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80118b4:	4299      	cmp	r1, r3
 80118b6:	dc0c      	bgt.n	80118d2 <WM__IsInWindow+0x32>
 80118b8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80118bc:	429a      	cmp	r2, r3
 80118be:	db08      	blt.n	80118d2 <WM__IsInWindow+0x32>
 80118c0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80118c4:	4282      	cmp	r2, r0
 80118c6:	bfcc      	ite	gt
 80118c8:	2000      	movgt	r0, #0
 80118ca:	2001      	movle	r0, #1
 80118cc:	4770      	bx	lr
 80118ce:	4618      	mov	r0, r3
 80118d0:	4770      	bx	lr
 80118d2:	2000      	movs	r0, #0
 80118d4:	4770      	bx	lr

080118d6 <_Screen2hWin>:
 80118d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80118da:	460e      	mov	r6, r1
 80118dc:	4617      	mov	r7, r2
 80118de:	4698      	mov	r8, r3
 80118e0:	4605      	mov	r5, r0
 80118e2:	b320      	cbz	r0, 801192e <_Screen2hWin+0x58>
 80118e4:	f7fe fa3c 	bl	800fd60 <GUI_ALLOC_LockH>
 80118e8:	4639      	mov	r1, r7
 80118ea:	4642      	mov	r2, r8
 80118ec:	4604      	mov	r4, r0
 80118ee:	9001      	str	r0, [sp, #4]
 80118f0:	f7ff ffd6 	bl	80118a0 <WM__IsInWindow>
 80118f4:	4681      	mov	r9, r0
 80118f6:	b920      	cbnz	r0, 8011902 <_Screen2hWin+0x2c>
 80118f8:	a801      	add	r0, sp, #4
 80118fa:	f7fe fa3f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80118fe:	4648      	mov	r0, r9
 8011900:	e016      	b.n	8011930 <_Screen2hWin+0x5a>
 8011902:	69e4      	ldr	r4, [r4, #28]
 8011904:	b91c      	cbnz	r4, 801190e <_Screen2hWin+0x38>
 8011906:	a801      	add	r0, sp, #4
 8011908:	f7fe fa38 	bl	800fd7c <GUI_ALLOC_UnlockH>
 801190c:	e00f      	b.n	801192e <_Screen2hWin+0x58>
 801190e:	42b4      	cmp	r4, r6
 8011910:	d0f9      	beq.n	8011906 <_Screen2hWin+0x30>
 8011912:	4620      	mov	r0, r4
 8011914:	4631      	mov	r1, r6
 8011916:	463a      	mov	r2, r7
 8011918:	4643      	mov	r3, r8
 801191a:	f7ff ffdc 	bl	80118d6 <_Screen2hWin>
 801191e:	2800      	cmp	r0, #0
 8011920:	bf18      	it	ne
 8011922:	4605      	movne	r5, r0
 8011924:	4620      	mov	r0, r4
 8011926:	f7fe fa11 	bl	800fd4c <GUI_ALLOC_h2p>
 801192a:	6a04      	ldr	r4, [r0, #32]
 801192c:	e7ea      	b.n	8011904 <_Screen2hWin+0x2e>
 801192e:	4628      	mov	r0, r5
 8011930:	b003      	add	sp, #12
 8011932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08011938 <WM_Screen2hWin>:
 8011938:	b570      	push	{r4, r5, r6, lr}
 801193a:	4b06      	ldr	r3, [pc, #24]	; (8011954 <WM_Screen2hWin+0x1c>)
 801193c:	460c      	mov	r4, r1
 801193e:	4605      	mov	r5, r0
 8011940:	6818      	ldr	r0, [r3, #0]
 8011942:	f000 f855 	bl	80119f0 <WM_GetDesktopWindowEx>
 8011946:	462a      	mov	r2, r5
 8011948:	4623      	mov	r3, r4
 801194a:	2100      	movs	r1, #0
 801194c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011950:	f7ff bfc1 	b.w	80118d6 <_Screen2hWin>
 8011954:	2001d4b4 	.word	0x2001d4b4

08011958 <WM_PID__SetPrevState>:
 8011958:	4b03      	ldr	r3, [pc, #12]	; (8011968 <WM_PID__SetPrevState+0x10>)
 801195a:	220c      	movs	r2, #12
 801195c:	fb02 3301 	mla	r3, r2, r1, r3
 8011960:	c807      	ldmia	r0, {r0, r1, r2}
 8011962:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011966:	4770      	bx	lr
 8011968:	2001d2ec 	.word	0x2001d2ec

0801196c <WM_OnKey>:
 801196c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801196e:	4a0a      	ldr	r2, [pc, #40]	; (8011998 <WM_OnKey+0x2c>)
 8011970:	4603      	mov	r3, r0
 8011972:	6810      	ldr	r0, [r2, #0]
 8011974:	4a09      	ldr	r2, [pc, #36]	; (801199c <WM_OnKey+0x30>)
 8011976:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 801197a:	b148      	cbz	r0, 8011990 <WM_OnKey+0x24>
 801197c:	9300      	str	r3, [sp, #0]
 801197e:	230e      	movs	r3, #14
 8011980:	9101      	str	r1, [sp, #4]
 8011982:	9302      	str	r3, [sp, #8]
 8011984:	a902      	add	r1, sp, #8
 8011986:	ab00      	add	r3, sp, #0
 8011988:	9305      	str	r3, [sp, #20]
 801198a:	f7f7 fb5f 	bl	800904c <WM__SendMessage>
 801198e:	2001      	movs	r0, #1
 8011990:	b007      	add	sp, #28
 8011992:	f85d fb04 	ldr.w	pc, [sp], #4
 8011996:	bf00      	nop
 8011998:	2001d4b4 	.word	0x2001d4b4
 801199c:	2001d4a4 	.word	0x2001d4a4

080119a0 <WM_GetWindowRectEx>:
 80119a0:	b510      	push	{r4, lr}
 80119a2:	460c      	mov	r4, r1
 80119a4:	b130      	cbz	r0, 80119b4 <WM_GetWindowRectEx+0x14>
 80119a6:	b129      	cbz	r1, 80119b4 <WM_GetWindowRectEx+0x14>
 80119a8:	f7fe f9d0 	bl	800fd4c <GUI_ALLOC_h2p>
 80119ac:	4603      	mov	r3, r0
 80119ae:	cb03      	ldmia	r3!, {r0, r1}
 80119b0:	6020      	str	r0, [r4, #0]
 80119b2:	6061      	str	r1, [r4, #4]
 80119b4:	bd10      	pop	{r4, pc}

080119b6 <WM_GetScrollPartner>:
 80119b6:	b538      	push	{r3, r4, r5, lr}
 80119b8:	4605      	mov	r5, r0
 80119ba:	f7f7 ff51 	bl	8009860 <WM_GetId>
 80119be:	28ff      	cmp	r0, #255	; 0xff
 80119c0:	4604      	mov	r4, r0
 80119c2:	d003      	beq.n	80119cc <WM_GetScrollPartner+0x16>
 80119c4:	28fe      	cmp	r0, #254	; 0xfe
 80119c6:	bf08      	it	eq
 80119c8:	24ff      	moveq	r4, #255	; 0xff
 80119ca:	e000      	b.n	80119ce <WM_GetScrollPartner+0x18>
 80119cc:	24fe      	movs	r4, #254	; 0xfe
 80119ce:	4628      	mov	r0, r5
 80119d0:	f7f7 fede 	bl	8009790 <WM_GetParent>
 80119d4:	4621      	mov	r1, r4
 80119d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119da:	f7f7 bf87 	b.w	80098ec <WM_GetDialogItem>

080119de <WM_GetWindowOrgX>:
 80119de:	b508      	push	{r3, lr}
 80119e0:	b120      	cbz	r0, 80119ec <WM_GetWindowOrgX+0xe>
 80119e2:	f7fe f9b3 	bl	800fd4c <GUI_ALLOC_h2p>
 80119e6:	f9b0 0000 	ldrsh.w	r0, [r0]
 80119ea:	bd08      	pop	{r3, pc}
 80119ec:	bd08      	pop	{r3, pc}
	...

080119f0 <WM_GetDesktopWindowEx>:
 80119f0:	2801      	cmp	r0, #1
 80119f2:	bf9a      	itte	ls
 80119f4:	4b02      	ldrls	r3, [pc, #8]	; (8011a00 <WM_GetDesktopWindowEx+0x10>)
 80119f6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80119fa:	2000      	movhi	r0, #0
 80119fc:	4770      	bx	lr
 80119fe:	bf00      	nop
 8011a00:	2001d494 	.word	0x2001d494

08011a04 <WM_ForEachDesc>:
 8011a04:	f004 be62 	b.w	80166cc <WM__ForEachDesc>

08011a08 <WM__AddCriticalHandle>:
 8011a08:	4b02      	ldr	r3, [pc, #8]	; (8011a14 <WM__AddCriticalHandle+0xc>)
 8011a0a:	681a      	ldr	r2, [r3, #0]
 8011a0c:	6002      	str	r2, [r0, #0]
 8011a0e:	6018      	str	r0, [r3, #0]
 8011a10:	4770      	bx	lr
 8011a12:	bf00      	nop
 8011a14:	2001d4c8 	.word	0x2001d4c8

08011a18 <WM__RemoveCriticalHandle>:
 8011a18:	4a09      	ldr	r2, [pc, #36]	; (8011a40 <WM__RemoveCriticalHandle+0x28>)
 8011a1a:	6813      	ldr	r3, [r2, #0]
 8011a1c:	b510      	push	{r4, lr}
 8011a1e:	4614      	mov	r4, r2
 8011a20:	b16b      	cbz	r3, 8011a3e <WM__RemoveCriticalHandle+0x26>
 8011a22:	2200      	movs	r2, #0
 8011a24:	4283      	cmp	r3, r0
 8011a26:	d105      	bne.n	8011a34 <WM__RemoveCriticalHandle+0x1c>
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	b10a      	cbz	r2, 8011a30 <WM__RemoveCriticalHandle+0x18>
 8011a2c:	6013      	str	r3, [r2, #0]
 8011a2e:	bd10      	pop	{r4, pc}
 8011a30:	6023      	str	r3, [r4, #0]
 8011a32:	bd10      	pop	{r4, pc}
 8011a34:	6819      	ldr	r1, [r3, #0]
 8011a36:	b111      	cbz	r1, 8011a3e <WM__RemoveCriticalHandle+0x26>
 8011a38:	461a      	mov	r2, r3
 8011a3a:	460b      	mov	r3, r1
 8011a3c:	e7f2      	b.n	8011a24 <WM__RemoveCriticalHandle+0xc>
 8011a3e:	bd10      	pop	{r4, pc}
 8011a40:	2001d4c8 	.word	0x2001d4c8

08011a44 <WM_BringToBottom>:
 8011a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a48:	4604      	mov	r4, r0
 8011a4a:	b087      	sub	sp, #28
 8011a4c:	2800      	cmp	r0, #0
 8011a4e:	d039      	beq.n	8011ac4 <WM_BringToBottom+0x80>
 8011a50:	f7fe f986 	bl	800fd60 <GUI_ALLOC_LockH>
 8011a54:	4603      	mov	r3, r0
 8011a56:	9001      	str	r0, [sp, #4]
 8011a58:	c803      	ldmia	r0, {r0, r1}
 8011a5a:	ad04      	add	r5, sp, #16
 8011a5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8011a60:	a801      	add	r0, sp, #4
 8011a62:	6a1e      	ldr	r6, [r3, #32]
 8011a64:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8011a68:	f7fe f988 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	f7ff fbea 	bl	8011246 <WM__GetPrevSibling>
 8011a72:	4607      	mov	r7, r0
 8011a74:	b330      	cbz	r0, 8011ac4 <WM_BringToBottom+0x80>
 8011a76:	4620      	mov	r0, r4
 8011a78:	f7f7 fe8a 	bl	8009790 <WM_GetParent>
 8011a7c:	f019 0f02 	tst.w	r9, #2
 8011a80:	4680      	mov	r8, r0
 8011a82:	d004      	beq.n	8011a8e <WM_BringToBottom+0x4a>
 8011a84:	4628      	mov	r0, r5
 8011a86:	4641      	mov	r1, r8
 8011a88:	4632      	mov	r2, r6
 8011a8a:	f7f8 fc0b 	bl	800a2a4 <WM__InvalidateRectEx>
 8011a8e:	4620      	mov	r0, r4
 8011a90:	f7fe f966 	bl	800fd60 <GUI_ALLOC_LockH>
 8011a94:	9001      	str	r0, [sp, #4]
 8011a96:	4640      	mov	r0, r8
 8011a98:	f7fe f962 	bl	800fd60 <GUI_ALLOC_LockH>
 8011a9c:	9003      	str	r0, [sp, #12]
 8011a9e:	4638      	mov	r0, r7
 8011aa0:	f7fe f95e 	bl	800fd60 <GUI_ALLOC_LockH>
 8011aa4:	9b03      	ldr	r3, [sp, #12]
 8011aa6:	9a01      	ldr	r2, [sp, #4]
 8011aa8:	69d9      	ldr	r1, [r3, #28]
 8011aaa:	6206      	str	r6, [r0, #32]
 8011aac:	9002      	str	r0, [sp, #8]
 8011aae:	6211      	str	r1, [r2, #32]
 8011ab0:	a801      	add	r0, sp, #4
 8011ab2:	61dc      	str	r4, [r3, #28]
 8011ab4:	f7fe f962 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011ab8:	a803      	add	r0, sp, #12
 8011aba:	f7fe f95f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011abe:	a802      	add	r0, sp, #8
 8011ac0:	f7fe f95c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011ac4:	b007      	add	sp, #28
 8011ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011aca <_Convert16>:
 8011aca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ace:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8011ad2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8011ad6:	4605      	mov	r5, r0
 8011ad8:	460e      	mov	r6, r1
 8011ada:	4690      	mov	r8, r2
 8011adc:	461f      	mov	r7, r3
 8011ade:	4614      	mov	r4, r2
 8011ae0:	4689      	mov	r9, r1
 8011ae2:	f835 0b02 	ldrh.w	r0, [r5], #2
 8011ae6:	47d8      	blx	fp
 8011ae8:	47d0      	blx	sl
 8011aea:	3c01      	subs	r4, #1
 8011aec:	f849 0b04 	str.w	r0, [r9], #4
 8011af0:	d1f7      	bne.n	8011ae2 <_Convert16+0x18>
 8011af2:	2f1f      	cmp	r7, #31
 8011af4:	d806      	bhi.n	8011b04 <_Convert16+0x3a>
 8011af6:	4630      	mov	r0, r6
 8011af8:	4641      	mov	r1, r8
 8011afa:	463a      	mov	r2, r7
 8011afc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b00:	f001 bf87 	b.w	8013a12 <GUI__CompactPixelIndices>
 8011b04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b08 <_Convert8>:
 8011b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b0c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8011b10:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8011b14:	4605      	mov	r5, r0
 8011b16:	460e      	mov	r6, r1
 8011b18:	4690      	mov	r8, r2
 8011b1a:	461f      	mov	r7, r3
 8011b1c:	4689      	mov	r9, r1
 8011b1e:	4604      	mov	r4, r0
 8011b20:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011b24:	47d8      	blx	fp
 8011b26:	47d0      	blx	sl
 8011b28:	1b2b      	subs	r3, r5, r4
 8011b2a:	4443      	add	r3, r8
 8011b2c:	f849 0b04 	str.w	r0, [r9], #4
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d1f5      	bne.n	8011b20 <_Convert8+0x18>
 8011b34:	2f1f      	cmp	r7, #31
 8011b36:	d806      	bhi.n	8011b46 <_Convert8+0x3e>
 8011b38:	4630      	mov	r0, r6
 8011b3a:	4641      	mov	r1, r8
 8011b3c:	463a      	mov	r2, r7
 8011b3e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b42:	f001 bf66 	b.w	8013a12 <GUI__CompactPixelIndices>
 8011b46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08011b4c <GUI_MEMDEV__WriteToActiveOpaque>:
 8011b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b50:	b09d      	sub	sp, #116	; 0x74
 8011b52:	4606      	mov	r6, r0
 8011b54:	910f      	str	r1, [sp, #60]	; 0x3c
 8011b56:	920d      	str	r2, [sp, #52]	; 0x34
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	f000 8386 	beq.w	801226a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8011b5e:	f7fe f8ff 	bl	800fd60 <GUI_ALLOC_LockH>
 8011b62:	ab1c      	add	r3, sp, #112	; 0x70
 8011b64:	6944      	ldr	r4, [r0, #20]
 8011b66:	f843 0d1c 	str.w	r0, [r3, #-28]!
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7fe f906 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011b70:	4630      	mov	r0, r6
 8011b72:	f7fa f873 	bl	800bc5c <GUI_MEMDEV_GetBitsPerPixel>
 8011b76:	2808      	cmp	r0, #8
 8011b78:	4601      	mov	r1, r0
 8011b7a:	dd02      	ble.n	8011b82 <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 8011b7c:	2c00      	cmp	r4, #0
 8011b7e:	f000 81c3 	beq.w	8011f08 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 8011b82:	2201      	movs	r2, #1
 8011b84:	f04f 0800 	mov.w	r8, #0
 8011b88:	4630      	mov	r0, r6
 8011b8a:	921b      	str	r2, [sp, #108]	; 0x6c
 8011b8c:	920b      	str	r2, [sp, #44]	; 0x2c
 8011b8e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011b92:	f7fe f8e5 	bl	800fd60 <GUI_ALLOC_LockH>
 8011b96:	6803      	ldr	r3, [r0, #0]
 8011b98:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 80121a8 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 8011b9c:	691b      	ldr	r3, [r3, #16]
 8011b9e:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 8011ba2:	685b      	ldr	r3, [r3, #4]
 8011ba4:	930e      	str	r3, [sp, #56]	; 0x38
 8011ba6:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8011baa:	f8da 3000 	ldr.w	r3, [sl]
 8011bae:	f84b 0d14 	str.w	r0, [fp, #-20]!
 8011bb2:	6904      	ldr	r4, [r0, #16]
 8011bb4:	6945      	ldr	r5, [r0, #20]
 8011bb6:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8011bba:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8011bbe:	7c58      	ldrb	r0, [r3, #17]
 8011bc0:	9112      	str	r1, [sp, #72]	; 0x48
 8011bc2:	f7fb fad1 	bl	800d168 <GUI_GetBitsPerPixelEx>
 8011bc6:	f8da 3000 	ldr.w	r3, [sl]
 8011bca:	9010      	str	r0, [sp, #64]	; 0x40
 8011bcc:	7c58      	ldrb	r0, [r3, #17]
 8011bce:	f7fb fae9 	bl	800d1a4 <GUI_GetpfIndex2ColorEx>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	4658      	mov	r0, fp
 8011bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8011bd8:	f7fe f8d0 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011bdc:	2c08      	cmp	r4, #8
 8011bde:	4651      	mov	r1, sl
 8011be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011be4:	d904      	bls.n	8011bf0 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8011be6:	2c10      	cmp	r4, #16
 8011be8:	bf8c      	ite	hi
 8011bea:	2204      	movhi	r2, #4
 8011bec:	2202      	movls	r2, #2
 8011bee:	e005      	b.n	8011bfc <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 8011bf0:	2c01      	cmp	r4, #1
 8011bf2:	d103      	bne.n	8011bfc <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 8011bf4:	9411      	str	r4, [sp, #68]	; 0x44
 8011bf6:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 8011bfa:	e000      	b.n	8011bfe <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 8011bfc:	9211      	str	r2, [sp, #68]	; 0x44
 8011bfe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011c00:	4298      	cmp	r0, r3
 8011c02:	f000 80e2 	beq.w	8011dca <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 8011c06:	680b      	ldr	r3, [r1, #0]
 8011c08:	7c58      	ldrb	r0, [r3, #17]
 8011c0a:	f7fb fad3 	bl	800d1b4 <GUI_GetpfColor2IndexEx>
 8011c0e:	9013      	str	r0, [sp, #76]	; 0x4c
 8011c10:	00b8      	lsls	r0, r7, #2
 8011c12:	f7fe faf9 	bl	8010208 <GUI_ALLOC_AllocNoInit>
 8011c16:	900c      	str	r0, [sp, #48]	; 0x30
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	f000 8326 	beq.w	801226a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8011c1e:	4630      	mov	r0, r6
 8011c20:	f7f9 f9b8 	bl	800af94 <GUI_MEMDEV_GetDataPtr>
 8011c24:	4606      	mov	r6, r0
 8011c26:	2d00      	cmp	r5, #0
 8011c28:	f000 80be 	beq.w	8011da8 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 8011c2c:	4628      	mov	r0, r5
 8011c2e:	f7fe f897 	bl	800fd60 <GUI_ALLOC_LockH>
 8011c32:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8011c36:	9018      	str	r0, [sp, #96]	; 0x60
 8011c38:	f04f 0a00 	mov.w	sl, #0
 8011c3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011c3e:	4592      	cmp	sl, r2
 8011c40:	f280 80ae 	bge.w	8011da0 <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 8011c44:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011c46:	2300      	movs	r3, #0
 8011c48:	9319      	str	r3, [sp, #100]	; 0x64
 8011c4a:	6883      	ldr	r3, [r0, #8]
 8011c4c:	a919      	add	r1, sp, #100	; 0x64
 8011c4e:	695b      	ldr	r3, [r3, #20]
 8011c50:	4652      	mov	r2, sl
 8011c52:	4798      	blx	r3
 8011c54:	42b8      	cmp	r0, r7
 8011c56:	4605      	mov	r5, r0
 8011c58:	d12f      	bne.n	8011cba <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 8011c5a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011c5c:	f7fe f880 	bl	800fd60 <GUI_ALLOC_LockH>
 8011c60:	2c08      	cmp	r4, #8
 8011c62:	4601      	mov	r1, r0
 8011c64:	9016      	str	r0, [sp, #88]	; 0x58
 8011c66:	d909      	bls.n	8011c7c <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 8011c68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011c6c:	9200      	str	r2, [sp, #0]
 8011c6e:	9301      	str	r3, [sp, #4]
 8011c70:	4630      	mov	r0, r6
 8011c72:	463a      	mov	r2, r7
 8011c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c76:	f7ff ff28 	bl	8011aca <_Convert16>
 8011c7a:	e008      	b.n	8011c8e <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 8011c7c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011c7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011c80:	9000      	str	r0, [sp, #0]
 8011c82:	9201      	str	r2, [sp, #4]
 8011c84:	4630      	mov	r0, r6
 8011c86:	463a      	mov	r2, r7
 8011c88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c8a:	f7ff ff3d 	bl	8011b08 <_Convert8>
 8011c8e:	2301      	movs	r3, #1
 8011c90:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011c92:	9002      	str	r0, [sp, #8]
 8011c94:	ad1c      	add	r5, sp, #112	; 0x70
 8011c96:	2200      	movs	r2, #0
 8011c98:	9300      	str	r3, [sp, #0]
 8011c9a:	9301      	str	r3, [sp, #4]
 8011c9c:	9203      	str	r2, [sp, #12]
 8011c9e:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 8011ca2:	9204      	str	r2, [sp, #16]
 8011ca4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011ca6:	f8cd 8014 	str.w	r8, [sp, #20]
 8011caa:	4659      	mov	r1, fp
 8011cac:	463a      	mov	r2, r7
 8011cae:	f7fb fc9d 	bl	800d5ec <LCD_DrawBitmap>
 8011cb2:	4628      	mov	r0, r5
 8011cb4:	f7fe f862 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011cb8:	e060      	b.n	8011d7c <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 8011cba:	2c01      	cmp	r4, #1
 8011cbc:	d15c      	bne.n	8011d78 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 8011cbe:	2d00      	cmp	r5, #0
 8011cc0:	d05c      	beq.n	8011d7c <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 8011cc2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011cc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011cc6:	f8cd 900c 	str.w	r9, [sp, #12]
 8011cca:	2208      	movs	r2, #8
 8011ccc:	fb90 f2f2 	sdiv	r2, r0, r2
 8011cd0:	4432      	add	r2, r6
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	9204      	str	r2, [sp, #16]
 8011cd6:	f000 0207 	and.w	r2, r0, #7
 8011cda:	9300      	str	r3, [sp, #0]
 8011cdc:	4408      	add	r0, r1
 8011cde:	9301      	str	r3, [sp, #4]
 8011ce0:	9302      	str	r3, [sp, #8]
 8011ce2:	9206      	str	r2, [sp, #24]
 8011ce4:	4659      	mov	r1, fp
 8011ce6:	462a      	mov	r2, r5
 8011ce8:	f8cd 8014 	str.w	r8, [sp, #20]
 8011cec:	f7fb fba2 	bl	800d434 <LCD__DrawBitmap_1bpp>
 8011cf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011cf2:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011cf4:	441d      	add	r5, r3
 8011cf6:	6883      	ldr	r3, [r0, #8]
 8011cf8:	9519      	str	r5, [sp, #100]	; 0x64
 8011cfa:	695b      	ldr	r3, [r3, #20]
 8011cfc:	a919      	add	r1, sp, #100	; 0x64
 8011cfe:	4652      	mov	r2, sl
 8011d00:	4798      	blx	r3
 8011d02:	4605      	mov	r5, r0
 8011d04:	e7db      	b.n	8011cbe <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 8011d06:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011d08:	f7fe f82a 	bl	800fd60 <GUI_ALLOC_LockH>
 8011d0c:	2c08      	cmp	r4, #8
 8011d0e:	4601      	mov	r1, r0
 8011d10:	9016      	str	r0, [sp, #88]	; 0x58
 8011d12:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011d14:	d938      	bls.n	8011d88 <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 8011d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011d18:	9200      	str	r2, [sp, #0]
 8011d1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011d1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d1e:	9301      	str	r3, [sp, #4]
 8011d20:	fb00 6002 	mla	r0, r0, r2, r6
 8011d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d26:	462a      	mov	r2, r5
 8011d28:	f7ff fecf 	bl	8011aca <_Convert16>
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 8011d32:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011d34:	9300      	str	r3, [sp, #0]
 8011d36:	2200      	movs	r2, #0
 8011d38:	9301      	str	r3, [sp, #4]
 8011d3a:	9002      	str	r0, [sp, #8]
 8011d3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011d3e:	9203      	str	r2, [sp, #12]
 8011d40:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011d42:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 8011d46:	9204      	str	r2, [sp, #16]
 8011d48:	4408      	add	r0, r1
 8011d4a:	462a      	mov	r2, r5
 8011d4c:	4659      	mov	r1, fp
 8011d4e:	f8cd 8014 	str.w	r8, [sp, #20]
 8011d52:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8011d56:	f7fb fc49 	bl	800d5ec <LCD_DrawBitmap>
 8011d5a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8011d5e:	4660      	mov	r0, ip
 8011d60:	f7fe f80c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011d64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011d66:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011d68:	441d      	add	r5, r3
 8011d6a:	6883      	ldr	r3, [r0, #8]
 8011d6c:	9519      	str	r5, [sp, #100]	; 0x64
 8011d6e:	695b      	ldr	r3, [r3, #20]
 8011d70:	a919      	add	r1, sp, #100	; 0x64
 8011d72:	4652      	mov	r2, sl
 8011d74:	4798      	blx	r3
 8011d76:	4605      	mov	r5, r0
 8011d78:	2d00      	cmp	r5, #0
 8011d7a:	d1c4      	bne.n	8011d06 <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 8011d7c:	444e      	add	r6, r9
 8011d7e:	f10a 0a01 	add.w	sl, sl, #1
 8011d82:	f10b 0b01 	add.w	fp, fp, #1
 8011d86:	e759      	b.n	8011c3c <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 8011d88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d8a:	9300      	str	r3, [sp, #0]
 8011d8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011d90:	9201      	str	r2, [sp, #4]
 8011d92:	fb00 6003 	mla	r0, r0, r3, r6
 8011d96:	462a      	mov	r2, r5
 8011d98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d9a:	f7ff feb5 	bl	8011b08 <_Convert8>
 8011d9e:	e7c5      	b.n	8011d2c <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 8011da0:	a818      	add	r0, sp, #96	; 0x60
 8011da2:	f7fd ffeb 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011da6:	e00e      	b.n	8011dc6 <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 8011da8:	2301      	movs	r3, #1
 8011daa:	9300      	str	r3, [sp, #0]
 8011dac:	9301      	str	r3, [sp, #4]
 8011dae:	9004      	str	r0, [sp, #16]
 8011db0:	9402      	str	r4, [sp, #8]
 8011db2:	f8cd 900c 	str.w	r9, [sp, #12]
 8011db6:	f8cd 8014 	str.w	r8, [sp, #20]
 8011dba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011dbc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011dbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011dc0:	463a      	mov	r2, r7
 8011dc2:	f7fb fc13 	bl	800d5ec <LCD_DrawBitmap>
 8011dc6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011dc8:	e24d      	b.n	8012266 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8011dca:	4630      	mov	r0, r6
 8011dcc:	f7f9 f8e2 	bl	800af94 <GUI_MEMDEV_GetDataPtr>
 8011dd0:	4606      	mov	r6, r0
 8011dd2:	2d00      	cmp	r5, #0
 8011dd4:	f000 808a 	beq.w	8011eec <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 8011dd8:	4628      	mov	r0, r5
 8011dda:	f7fd ffc1 	bl	800fd60 <GUI_ALLOC_LockH>
 8011dde:	2500      	movs	r5, #0
 8011de0:	9018      	str	r0, [sp, #96]	; 0x60
 8011de2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011de4:	429d      	cmp	r5, r3
 8011de6:	da7d      	bge.n	8011ee4 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 8011de8:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011dea:	2300      	movs	r3, #0
 8011dec:	9319      	str	r3, [sp, #100]	; 0x64
 8011dee:	6883      	ldr	r3, [r0, #8]
 8011df0:	a919      	add	r1, sp, #100	; 0x64
 8011df2:	695b      	ldr	r3, [r3, #20]
 8011df4:	462a      	mov	r2, r5
 8011df6:	4798      	blx	r3
 8011df8:	42b8      	cmp	r0, r7
 8011dfa:	4682      	mov	sl, r0
 8011dfc:	d124      	bne.n	8011e48 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 8011dfe:	46aa      	mov	sl, r5
 8011e00:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011e02:	6883      	ldr	r3, [r0, #8]
 8011e04:	f10a 0b01 	add.w	fp, sl, #1
 8011e08:	695b      	ldr	r3, [r3, #20]
 8011e0a:	a919      	add	r1, sp, #100	; 0x64
 8011e0c:	465a      	mov	r2, fp
 8011e0e:	4798      	blx	r3
 8011e10:	42b8      	cmp	r0, r7
 8011e12:	d101      	bne.n	8011e18 <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 8011e14:	46da      	mov	sl, fp
 8011e16:	e7f3      	b.n	8011e00 <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 8011e18:	ebc5 0b0a 	rsb	fp, r5, sl
 8011e1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011e1e:	9604      	str	r6, [sp, #16]
 8011e20:	2301      	movs	r3, #1
 8011e22:	f10b 0b01 	add.w	fp, fp, #1
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	9301      	str	r3, [sp, #4]
 8011e2a:	4429      	add	r1, r5
 8011e2c:	9402      	str	r4, [sp, #8]
 8011e2e:	f8cd 900c 	str.w	r9, [sp, #12]
 8011e32:	f8cd 8014 	str.w	r8, [sp, #20]
 8011e36:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011e38:	463a      	mov	r2, r7
 8011e3a:	465b      	mov	r3, fp
 8011e3c:	f7fb fbd6 	bl	800d5ec <LCD_DrawBitmap>
 8011e40:	fb09 660b 	mla	r6, r9, fp, r6
 8011e44:	4655      	mov	r5, sl
 8011e46:	e04b      	b.n	8011ee0 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 8011e48:	2c01      	cmp	r4, #1
 8011e4a:	d127      	bne.n	8011e9c <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 8011e4c:	f1ba 0f00 	cmp.w	sl, #0
 8011e50:	d022      	beq.n	8011e98 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 8011e52:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011e54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011e56:	f8cd 900c 	str.w	r9, [sp, #12]
 8011e5a:	2208      	movs	r2, #8
 8011e5c:	fb90 f2f2 	sdiv	r2, r0, r2
 8011e60:	4432      	add	r2, r6
 8011e62:	9204      	str	r2, [sp, #16]
 8011e64:	f000 0207 	and.w	r2, r0, #7
 8011e68:	4408      	add	r0, r1
 8011e6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011e6c:	9206      	str	r2, [sp, #24]
 8011e6e:	2301      	movs	r3, #1
 8011e70:	4652      	mov	r2, sl
 8011e72:	9300      	str	r3, [sp, #0]
 8011e74:	9301      	str	r3, [sp, #4]
 8011e76:	9302      	str	r3, [sp, #8]
 8011e78:	4429      	add	r1, r5
 8011e7a:	f8cd 8014 	str.w	r8, [sp, #20]
 8011e7e:	f7fb fad9 	bl	800d434 <LCD__DrawBitmap_1bpp>
 8011e82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011e84:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011e86:	4453      	add	r3, sl
 8011e88:	9319      	str	r3, [sp, #100]	; 0x64
 8011e8a:	6883      	ldr	r3, [r0, #8]
 8011e8c:	a919      	add	r1, sp, #100	; 0x64
 8011e8e:	695b      	ldr	r3, [r3, #20]
 8011e90:	462a      	mov	r2, r5
 8011e92:	4798      	blx	r3
 8011e94:	4682      	mov	sl, r0
 8011e96:	e7d9      	b.n	8011e4c <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 8011e98:	444e      	add	r6, r9
 8011e9a:	e021      	b.n	8011ee0 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 8011e9c:	f1ba 0f00 	cmp.w	sl, #0
 8011ea0:	d0fa      	beq.n	8011e98 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 8011ea2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011ea4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011ea6:	9402      	str	r4, [sp, #8]
 8011ea8:	fb00 6201 	mla	r2, r0, r1, r6
 8011eac:	9204      	str	r2, [sp, #16]
 8011eae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011eb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011eb2:	f8cd 900c 	str.w	r9, [sp, #12]
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	4410      	add	r0, r2
 8011eba:	9300      	str	r3, [sp, #0]
 8011ebc:	4652      	mov	r2, sl
 8011ebe:	9301      	str	r3, [sp, #4]
 8011ec0:	4429      	add	r1, r5
 8011ec2:	f8cd 8014 	str.w	r8, [sp, #20]
 8011ec6:	f7fb fb91 	bl	800d5ec <LCD_DrawBitmap>
 8011eca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011ecc:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011ece:	4453      	add	r3, sl
 8011ed0:	9319      	str	r3, [sp, #100]	; 0x64
 8011ed2:	6883      	ldr	r3, [r0, #8]
 8011ed4:	a919      	add	r1, sp, #100	; 0x64
 8011ed6:	695b      	ldr	r3, [r3, #20]
 8011ed8:	462a      	mov	r2, r5
 8011eda:	4798      	blx	r3
 8011edc:	4682      	mov	sl, r0
 8011ede:	e7dd      	b.n	8011e9c <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 8011ee0:	3501      	adds	r5, #1
 8011ee2:	e77e      	b.n	8011de2 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 8011ee4:	a818      	add	r0, sp, #96	; 0x60
 8011ee6:	f7fd ff49 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011eea:	e1be      	b.n	801226a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8011eec:	2301      	movs	r3, #1
 8011eee:	9300      	str	r3, [sp, #0]
 8011ef0:	9301      	str	r3, [sp, #4]
 8011ef2:	9004      	str	r0, [sp, #16]
 8011ef4:	9402      	str	r4, [sp, #8]
 8011ef6:	f8cd 900c 	str.w	r9, [sp, #12]
 8011efa:	f8cd 8014 	str.w	r8, [sp, #20]
 8011efe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011f00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011f02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011f04:	463a      	mov	r2, r7
 8011f06:	e041      	b.n	8011f8c <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 8011f08:	4630      	mov	r0, r6
 8011f0a:	910a      	str	r1, [sp, #40]	; 0x28
 8011f0c:	f7fd ff28 	bl	800fd60 <GUI_ALLOC_LockH>
 8011f10:	4682      	mov	sl, r0
 8011f12:	a81c      	add	r0, sp, #112	; 0x70
 8011f14:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8011f18:	f840 ad10 	str.w	sl, [r0, #-16]!
 8011f1c:	f8da 4000 	ldr.w	r4, [sl]
 8011f20:	9210      	str	r2, [sp, #64]	; 0x40
 8011f22:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011f26:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 8011f2a:	4c9e      	ldr	r4, [pc, #632]	; (80121a4 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 8011f2c:	b213      	sxth	r3, r2
 8011f2e:	f8da 200c 	ldr.w	r2, [sl, #12]
 8011f32:	920b      	str	r2, [sp, #44]	; 0x2c
 8011f34:	9309      	str	r3, [sp, #36]	; 0x24
 8011f36:	f7fd ff21 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8011f3a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8011f3e:	900e      	str	r0, [sp, #56]	; 0x38
 8011f40:	4899      	ldr	r0, [pc, #612]	; (80121a8 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 8011f42:	6800      	ldr	r0, [r0, #0]
 8011f44:	7c40      	ldrb	r0, [r0, #17]
 8011f46:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8011f4a:	6925      	ldr	r5, [r4, #16]
 8011f4c:	f8d5 8000 	ldr.w	r8, [r5]
 8011f50:	f7fb f90a 	bl	800d168 <GUI_GetBitsPerPixelEx>
 8011f54:	2808      	cmp	r0, #8
 8011f56:	fa0f fb87 	sxth.w	fp, r7
 8011f5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f60:	d904      	bls.n	8011f6c <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 8011f62:	2810      	cmp	r0, #16
 8011f64:	bf8c      	ite	hi
 8011f66:	2404      	movhi	r4, #4
 8011f68:	2402      	movls	r4, #2
 8011f6a:	e000      	b.n	8011f6e <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 8011f6c:	2401      	movs	r4, #1
 8011f6e:	45a9      	cmp	r9, r5
 8011f70:	d10f      	bne.n	8011f92 <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 8011f72:	2001      	movs	r0, #1
 8011f74:	9203      	str	r2, [sp, #12]
 8011f76:	f10a 0218 	add.w	r2, sl, #24
 8011f7a:	9000      	str	r0, [sp, #0]
 8011f7c:	9001      	str	r0, [sp, #4]
 8011f7e:	9102      	str	r1, [sp, #8]
 8011f80:	9204      	str	r2, [sp, #16]
 8011f82:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011f84:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011f86:	2200      	movs	r2, #0
 8011f88:	9205      	str	r2, [sp, #20]
 8011f8a:	465a      	mov	r2, fp
 8011f8c:	f7fb fb2e 	bl	800d5ec <LCD_DrawBitmap>
 8011f90:	e16b      	b.n	801226a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8011f92:	2920      	cmp	r1, #32
 8011f94:	f040 808e 	bne.w	80120b4 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 8011f98:	fb0b f004 	mul.w	r0, fp, r4
 8011f9c:	f7fe f934 	bl	8010208 <GUI_ALLOC_AllocNoInit>
 8011fa0:	900e      	str	r0, [sp, #56]	; 0x38
 8011fa2:	2800      	cmp	r0, #0
 8011fa4:	f000 8161 	beq.w	801226a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8011fa8:	f7fd feda 	bl	800fd60 <GUI_ALLOC_LockH>
 8011fac:	901a      	str	r0, [sp, #104]	; 0x68
 8011fae:	4630      	mov	r0, r6
 8011fb0:	f7fd fed6 	bl	800fd60 <GUI_ALLOC_LockH>
 8011fb4:	9018      	str	r0, [sp, #96]	; 0x60
 8011fb6:	692b      	ldr	r3, [r5, #16]
 8011fb8:	f100 0a18 	add.w	sl, r0, #24
 8011fbc:	ea4f 068b 	mov.w	r6, fp, lsl #2
 8011fc0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d02f      	beq.n	8012028 <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 8011fc8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8011fcc:	2c02      	cmp	r4, #2
 8011fce:	d003      	beq.n	8011fd8 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 8011fd0:	2c04      	cmp	r4, #4
 8011fd2:	d001      	beq.n	8011fd8 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 8011fd4:	2c01      	cmp	r4, #1
 8011fd6:	d106      	bne.n	8011fe6 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 8011fd8:	4650      	mov	r0, sl
 8011fda:	692f      	ldr	r7, [r5, #16]
 8011fdc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011fde:	465a      	mov	r2, fp
 8011fe0:	4623      	mov	r3, r4
 8011fe2:	47b8      	blx	r7
 8011fe4:	44b2      	add	sl, r6
 8011fe6:	2301      	movs	r3, #1
 8011fe8:	2200      	movs	r2, #0
 8011fea:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011fec:	9300      	str	r3, [sp, #0]
 8011fee:	9301      	str	r3, [sp, #4]
 8011ff0:	9203      	str	r2, [sp, #12]
 8011ff2:	9104      	str	r1, [sp, #16]
 8011ff4:	9205      	str	r2, [sp, #20]
 8011ff6:	4641      	mov	r1, r8
 8011ff8:	465a      	mov	r2, fp
 8011ffa:	f8cd 9008 	str.w	r9, [sp, #8]
 8011ffe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012000:	f7fb faf4 	bl	800d5ec <LCD_DrawBitmap>
 8012004:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012006:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012008:	f108 0701 	add.w	r7, r8, #1
 801200c:	fa02 f381 	sxtah	r3, r2, r1
 8012010:	42bb      	cmp	r3, r7
 8012012:	d107      	bne.n	8012024 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 8012014:	a818      	add	r0, sp, #96	; 0x60
 8012016:	f7fd feb1 	bl	800fd7c <GUI_ALLOC_UnlockH>
 801201a:	a81a      	add	r0, sp, #104	; 0x68
 801201c:	f7fd feae 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8012020:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012022:	e120      	b.n	8012266 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8012024:	46b8      	mov	r8, r7
 8012026:	e7d1      	b.n	8011fcc <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 8012028:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801202a:	2c02      	cmp	r4, #2
 801202c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801202e:	d00e      	beq.n	801204e <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 8012030:	2c04      	cmp	r4, #4
 8012032:	d018      	beq.n	8012066 <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 8012034:	2c01      	cmp	r4, #1
 8012036:	d125      	bne.n	8012084 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 8012038:	2300      	movs	r3, #0
 801203a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 801203e:	9309      	str	r3, [sp, #36]	; 0x24
 8012040:	47c0      	blx	r8
 8012042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012044:	54f8      	strb	r0, [r7, r3]
 8012046:	3301      	adds	r3, #1
 8012048:	459b      	cmp	fp, r3
 801204a:	d1f6      	bne.n	801203a <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 801204c:	e019      	b.n	8012082 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 801204e:	2300      	movs	r3, #0
 8012050:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8012054:	9309      	str	r3, [sp, #36]	; 0x24
 8012056:	47c0      	blx	r8
 8012058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801205a:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 801205e:	3301      	adds	r3, #1
 8012060:	459b      	cmp	fp, r3
 8012062:	d1f5      	bne.n	8012050 <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 8012064:	e00d      	b.n	8012082 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 8012066:	465a      	mov	r2, fp
 8012068:	2300      	movs	r3, #0
 801206a:	f85a 0003 	ldr.w	r0, [sl, r3]
 801206e:	920b      	str	r2, [sp, #44]	; 0x2c
 8012070:	9309      	str	r3, [sp, #36]	; 0x24
 8012072:	47c0      	blx	r8
 8012074:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012078:	3a01      	subs	r2, #1
 801207a:	50f8      	str	r0, [r7, r3]
 801207c:	f103 0304 	add.w	r3, r3, #4
 8012080:	d1f3      	bne.n	801206a <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 8012082:	44b2      	add	sl, r6
 8012084:	2301      	movs	r3, #1
 8012086:	2200      	movs	r2, #0
 8012088:	991a      	ldr	r1, [sp, #104]	; 0x68
 801208a:	9300      	str	r3, [sp, #0]
 801208c:	9301      	str	r3, [sp, #4]
 801208e:	9203      	str	r2, [sp, #12]
 8012090:	9104      	str	r1, [sp, #16]
 8012092:	9205      	str	r2, [sp, #20]
 8012094:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012096:	f8cd 9008 	str.w	r9, [sp, #8]
 801209a:	4629      	mov	r1, r5
 801209c:	465a      	mov	r2, fp
 801209e:	f7fb faa5 	bl	800d5ec <LCD_DrawBitmap>
 80120a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80120a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80120a6:	1c6f      	adds	r7, r5, #1
 80120a8:	fa01 f380 	sxtah	r3, r1, r0
 80120ac:	42bb      	cmp	r3, r7
 80120ae:	d0b1      	beq.n	8012014 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 80120b0:	463d      	mov	r5, r7
 80120b2:	e7ba      	b.n	801202a <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 80120b4:	2910      	cmp	r1, #16
 80120b6:	f040 80d8 	bne.w	801226a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 80120ba:	fa0f fa87 	sxth.w	sl, r7
 80120be:	fb0a f004 	mul.w	r0, sl, r4
 80120c2:	f7fe f8a1 	bl	8010208 <GUI_ALLOC_AllocNoInit>
 80120c6:	9012      	str	r0, [sp, #72]	; 0x48
 80120c8:	2800      	cmp	r0, #0
 80120ca:	f000 80ce 	beq.w	801226a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 80120ce:	f7fd fe47 	bl	800fd60 <GUI_ALLOC_LockH>
 80120d2:	901a      	str	r0, [sp, #104]	; 0x68
 80120d4:	4630      	mov	r0, r6
 80120d6:	f7fd fe43 	bl	800fd60 <GUI_ALLOC_LockH>
 80120da:	9018      	str	r0, [sp, #96]	; 0x60
 80120dc:	692b      	ldr	r3, [r5, #16]
 80120de:	f100 0618 	add.w	r6, r0, #24
 80120e2:	b113      	cbz	r3, 80120ea <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 80120e4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80120e8:	b92b      	cbnz	r3, 80120f6 <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 80120ea:	00e2      	lsls	r2, r4, #3
 80120ec:	b23f      	sxth	r7, r7
 80120ee:	9211      	str	r2, [sp, #68]	; 0x44
 80120f0:	007f      	lsls	r7, r7, #1
 80120f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80120f4:	e088      	b.n	8012208 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 80120f6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80120fa:	0080      	lsls	r0, r0, #2
 80120fc:	f7fe f884 	bl	8010208 <GUI_ALLOC_AllocNoInit>
 8012100:	9011      	str	r0, [sp, #68]	; 0x44
 8012102:	b118      	cbz	r0, 801210c <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 8012104:	f7fd fe2c 	bl	800fd60 <GUI_ALLOC_LockH>
 8012108:	9019      	str	r0, [sp, #100]	; 0x64
 801210a:	e001      	b.n	8012110 <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 801210c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801210e:	9319      	str	r3, [sp, #100]	; 0x64
 8012110:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012112:	2b00      	cmp	r3, #0
 8012114:	f000 80a0 	beq.w	8012258 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8012118:	b23f      	sxth	r7, r7
 801211a:	007f      	lsls	r7, r7, #1
 801211c:	970e      	str	r7, [sp, #56]	; 0x38
 801211e:	00e7      	lsls	r7, r4, #3
 8012120:	9713      	str	r7, [sp, #76]	; 0x4c
 8012122:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012124:	970c      	str	r7, [sp, #48]	; 0x30
 8012126:	2c02      	cmp	r4, #2
 8012128:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801212c:	d004      	beq.n	8012138 <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 801212e:	2c04      	cmp	r4, #4
 8012130:	d007      	beq.n	8012142 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8012132:	2c01      	cmp	r4, #1
 8012134:	d114      	bne.n	8012160 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 8012136:	e004      	b.n	8012142 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8012138:	4630      	mov	r0, r6
 801213a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801213c:	4652      	mov	r2, sl
 801213e:	4623      	mov	r3, r4
 8012140:	e003      	b.n	801214a <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 8012142:	9919      	ldr	r1, [sp, #100]	; 0x64
 8012144:	4630      	mov	r0, r6
 8012146:	4652      	mov	r2, sl
 8012148:	2302      	movs	r3, #2
 801214a:	f8d9 7014 	ldr.w	r7, [r9, #20]
 801214e:	47b8      	blx	r7
 8012150:	692f      	ldr	r7, [r5, #16]
 8012152:	9819      	ldr	r0, [sp, #100]	; 0x64
 8012154:	4641      	mov	r1, r8
 8012156:	4652      	mov	r2, sl
 8012158:	4623      	mov	r3, r4
 801215a:	47b8      	blx	r7
 801215c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801215e:	443e      	add	r6, r7
 8012160:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8012162:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012164:	9104      	str	r1, [sp, #16]
 8012166:	2301      	movs	r3, #1
 8012168:	2200      	movs	r2, #0
 801216a:	f107 0801 	add.w	r8, r7, #1
 801216e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8012170:	9300      	str	r3, [sp, #0]
 8012172:	9301      	str	r3, [sp, #4]
 8012174:	9702      	str	r7, [sp, #8]
 8012176:	9203      	str	r2, [sp, #12]
 8012178:	9205      	str	r2, [sp, #20]
 801217a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801217c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801217e:	465a      	mov	r2, fp
 8012180:	f7fb fa34 	bl	800d5ec <LCD_DrawBitmap>
 8012184:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8012186:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012188:	fa00 f387 	sxtah	r3, r0, r7
 801218c:	4543      	cmp	r3, r8
 801218e:	d002      	beq.n	8012196 <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 8012190:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8012194:	e7c7      	b.n	8012126 <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 8012196:	a819      	add	r0, sp, #100	; 0x64
 8012198:	f7fd fdf0 	bl	800fd7c <GUI_ALLOC_UnlockH>
 801219c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801219e:	f7fd fe19 	bl	800fdd4 <GUI_ALLOC_Free>
 80121a2:	e059      	b.n	8012258 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 80121a4:	2001d510 	.word	0x2001d510
 80121a8:	200000d8 	.word	0x200000d8
 80121ac:	2c04      	cmp	r4, #4
 80121ae:	d041      	beq.n	8012234 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 80121b0:	2c01      	cmp	r4, #1
 80121b2:	d111      	bne.n	80121d8 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 80121b4:	464a      	mov	r2, r9
 80121b6:	4631      	mov	r1, r6
 80121b8:	f831 0b02 	ldrh.w	r0, [r1], #2
 80121bc:	910a      	str	r1, [sp, #40]	; 0x28
 80121be:	920b      	str	r2, [sp, #44]	; 0x2c
 80121c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121c2:	4798      	blx	r3
 80121c4:	47c0      	blx	r8
 80121c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80121c8:	f802 0b01 	strb.w	r0, [r2], #1
 80121cc:	eb09 000a 	add.w	r0, r9, sl
 80121d0:	4282      	cmp	r2, r0
 80121d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80121d4:	d1f0      	bne.n	80121b8 <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 80121d6:	443e      	add	r6, r7
 80121d8:	2301      	movs	r3, #1
 80121da:	9811      	ldr	r0, [sp, #68]	; 0x44
 80121dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80121de:	9300      	str	r3, [sp, #0]
 80121e0:	2200      	movs	r2, #0
 80121e2:	9301      	str	r3, [sp, #4]
 80121e4:	9002      	str	r0, [sp, #8]
 80121e6:	9203      	str	r2, [sp, #12]
 80121e8:	9104      	str	r1, [sp, #16]
 80121ea:	9205      	str	r2, [sp, #20]
 80121ec:	4629      	mov	r1, r5
 80121ee:	465a      	mov	r2, fp
 80121f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80121f2:	f7fb f9fb 	bl	800d5ec <LCD_DrawBitmap>
 80121f6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80121f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80121fa:	f105 0901 	add.w	r9, r5, #1
 80121fe:	fa02 f381 	sxtah	r3, r2, r1
 8012202:	454b      	cmp	r3, r9
 8012204:	d028      	beq.n	8012258 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8012206:	464d      	mov	r5, r9
 8012208:	2c02      	cmp	r4, #2
 801220a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 801220e:	d1cd      	bne.n	80121ac <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 8012210:	464b      	mov	r3, r9
 8012212:	4631      	mov	r1, r6
 8012214:	46d9      	mov	r9, fp
 8012216:	f831 0b02 	ldrh.w	r0, [r1], #2
 801221a:	910a      	str	r1, [sp, #40]	; 0x28
 801221c:	9309      	str	r3, [sp, #36]	; 0x24
 801221e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012220:	4790      	blx	r2
 8012222:	47c0      	blx	r8
 8012224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012226:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012228:	f823 0b02 	strh.w	r0, [r3], #2
 801222c:	f1b9 0901 	subs.w	r9, r9, #1
 8012230:	d1f1      	bne.n	8012216 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 8012232:	e7d0      	b.n	80121d6 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 8012234:	464b      	mov	r3, r9
 8012236:	4631      	mov	r1, r6
 8012238:	46d9      	mov	r9, fp
 801223a:	f831 0b02 	ldrh.w	r0, [r1], #2
 801223e:	910a      	str	r1, [sp, #40]	; 0x28
 8012240:	9309      	str	r3, [sp, #36]	; 0x24
 8012242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012244:	4790      	blx	r2
 8012246:	47c0      	blx	r8
 8012248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801224a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801224c:	f843 0b04 	str.w	r0, [r3], #4
 8012250:	f1b9 0901 	subs.w	r9, r9, #1
 8012254:	d1f1      	bne.n	801223a <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 8012256:	e7be      	b.n	80121d6 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 8012258:	a818      	add	r0, sp, #96	; 0x60
 801225a:	f7fd fd8f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 801225e:	a81a      	add	r0, sp, #104	; 0x68
 8012260:	f7fd fd8c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8012264:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012266:	f7fd fdb5 	bl	800fdd4 <GUI_ALLOC_Free>
 801226a:	b01d      	add	sp, #116	; 0x74
 801226c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012270 <GUI_MEMDEV__WriteToActiveAlpha>:
 8012270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012274:	b091      	sub	sp, #68	; 0x44
 8012276:	460e      	mov	r6, r1
 8012278:	4614      	mov	r4, r2
 801227a:	900d      	str	r0, [sp, #52]	; 0x34
 801227c:	f7fd fd70 	bl	800fd60 <GUI_ALLOC_LockH>
 8012280:	4602      	mov	r2, r0
 8012282:	a810      	add	r0, sp, #64	; 0x40
 8012284:	6813      	ldr	r3, [r2, #0]
 8012286:	4d5b      	ldr	r5, [pc, #364]	; (80123f4 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 8012288:	691b      	ldr	r3, [r3, #16]
 801228a:	f840 2d08 	str.w	r2, [r0, #-8]!
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	f8b2 b008 	ldrh.w	fp, [r2, #8]
 8012294:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 8012298:	9309      	str	r3, [sp, #36]	; 0x24
 801229a:	f7fd fd6f 	bl	800fd7c <GUI_ALLOC_UnlockH>
 801229e:	682b      	ldr	r3, [r5, #0]
 80122a0:	4f55      	ldr	r7, [pc, #340]	; (80123f8 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 80122a2:	7c5b      	ldrb	r3, [r3, #17]
 80122a4:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 80122a8:	68c3      	ldr	r3, [r0, #12]
 80122aa:	2108      	movs	r1, #8
 80122ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122ae:	4798      	blx	r3
 80122b0:	682b      	ldr	r3, [r5, #0]
 80122b2:	7c5b      	ldrb	r3, [r3, #17]
 80122b4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80122b8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80122bc:	2817      	cmp	r0, #23
 80122be:	bf88      	it	hi
 80122c0:	2020      	movhi	r0, #32
 80122c2:	9008      	str	r0, [sp, #32]
 80122c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80122c8:	f8d8 2000 	ldr.w	r2, [r8]
 80122cc:	910a      	str	r1, [sp, #40]	; 0x28
 80122ce:	2000      	movs	r0, #0
 80122d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80122d2:	f7fb fe69 	bl	800dfa8 <GUI__AllocAlphaBuffer>
 80122d6:	2800      	cmp	r0, #0
 80122d8:	f040 8089 	bne.w	80123ee <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80122dc:	682a      	ldr	r2, [r5, #0]
 80122de:	fa0f f78b 	sxth.w	r7, fp
 80122e2:	19f5      	adds	r5, r6, r7
 80122e4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80122e8:	3d01      	subs	r5, #1
 80122ea:	1aed      	subs	r5, r5, r3
 80122ec:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 80122f0:	2d00      	cmp	r5, #0
 80122f2:	bfcc      	ite	gt
 80122f4:	ebc5 0507 	rsbgt	r5, r5, r7
 80122f8:	463d      	movle	r5, r7
 80122fa:	42b3      	cmp	r3, r6
 80122fc:	bfc3      	ittte	gt
 80122fe:	ebc6 0103 	rsbgt	r1, r6, r3
 8012302:	ebc1 0505 	rsbgt	r5, r1, r5
 8012306:	461e      	movgt	r6, r3
 8012308:	2100      	movle	r1, #0
 801230a:	2d00      	cmp	r5, #0
 801230c:	dd6f      	ble.n	80123ee <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 801230e:	fa0f f389 	sxth.w	r3, r9
 8012312:	18e0      	adds	r0, r4, r3
 8012314:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 8012318:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801231c:	3801      	subs	r0, #1
 801231e:	ebcc 0000 	rsb	r0, ip, r0
 8012322:	2800      	cmp	r0, #0
 8012324:	bfc8      	it	gt
 8012326:	ebc0 0303 	rsbgt	r3, r0, r3
 801232a:	4294      	cmp	r4, r2
 801232c:	bfbd      	ittte	lt
 801232e:	ebc4 0a02 	rsblt	sl, r4, r2
 8012332:	ebca 0303 	rsblt	r3, sl, r3
 8012336:	4614      	movlt	r4, r2
 8012338:	f04f 0a00 	movge.w	sl, #0
 801233c:	2b00      	cmp	r3, #0
 801233e:	dd56      	ble.n	80123ee <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8012340:	fb07 1a0a 	mla	sl, r7, sl, r1
 8012344:	18e3      	adds	r3, r4, r3
 8012346:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801234a:	930c      	str	r3, [sp, #48]	; 0x30
 801234c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801234e:	f7f8 fe21 	bl	800af94 <GUI_MEMDEV_GetDataPtr>
 8012352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012354:	9300      	str	r3, [sp, #0]
 8012356:	ab0f      	add	r3, sp, #60	; 0x3c
 8012358:	eb00 020a 	add.w	r2, r0, sl
 801235c:	9301      	str	r3, [sp, #4]
 801235e:	4630      	mov	r0, r6
 8012360:	4621      	mov	r1, r4
 8012362:	462b      	mov	r3, r5
 8012364:	f7fb fd3a 	bl	800dddc <GUI__DoAlphaBlending>
 8012368:	4681      	mov	r9, r0
 801236a:	2800      	cmp	r0, #0
 801236c:	d03f      	beq.n	80123ee <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 801236e:	4b23      	ldr	r3, [pc, #140]	; (80123fc <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 8012370:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012372:	4299      	cmp	r1, r3
 8012374:	d01e      	beq.n	80123b4 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8012376:	4629      	mov	r1, r5
 8012378:	9a08      	ldr	r2, [sp, #32]
 801237a:	4643      	mov	r3, r8
 801237c:	f001 fcd3 	bl	8013d26 <GUI__CompactPixelIndicesEx>
 8012380:	b9c0      	cbnz	r0, 80123b4 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8012382:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8012386:	f1bc 0f00 	cmp.w	ip, #0
 801238a:	d006      	beq.n	801239a <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 801238c:	4648      	mov	r0, r9
 801238e:	4649      	mov	r1, r9
 8012390:	fa0f f28b 	sxth.w	r2, fp
 8012394:	2304      	movs	r3, #4
 8012396:	47e0      	blx	ip
 8012398:	e00c      	b.n	80123b4 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 801239a:	464a      	mov	r2, r9
 801239c:	463b      	mov	r3, r7
 801239e:	6810      	ldr	r0, [r2, #0]
 80123a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80123a2:	9206      	str	r2, [sp, #24]
 80123a4:	9307      	str	r3, [sp, #28]
 80123a6:	4788      	blx	r1
 80123a8:	9b07      	ldr	r3, [sp, #28]
 80123aa:	9a06      	ldr	r2, [sp, #24]
 80123ac:	3b01      	subs	r3, #1
 80123ae:	f842 0b04 	str.w	r0, [r2], #4
 80123b2:	d1f4      	bne.n	801239e <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 80123b4:	9a08      	ldr	r2, [sp, #32]
 80123b6:	9202      	str	r2, [sp, #8]
 80123b8:	2301      	movs	r3, #1
 80123ba:	2200      	movs	r2, #0
 80123bc:	f104 0c01 	add.w	ip, r4, #1
 80123c0:	9300      	str	r3, [sp, #0]
 80123c2:	9301      	str	r3, [sp, #4]
 80123c4:	9203      	str	r2, [sp, #12]
 80123c6:	9205      	str	r2, [sp, #20]
 80123c8:	f8cd 9010 	str.w	r9, [sp, #16]
 80123cc:	4630      	mov	r0, r6
 80123ce:	4621      	mov	r1, r4
 80123d0:	462a      	mov	r2, r5
 80123d2:	f8cd c01c 	str.w	ip, [sp, #28]
 80123d6:	f7fb f909 	bl	800d5ec <LCD_DrawBitmap>
 80123da:	2304      	movs	r3, #4
 80123dc:	fb1b aa03 	smlabb	sl, fp, r3, sl
 80123e0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80123e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123e6:	459c      	cmp	ip, r3
 80123e8:	d001      	beq.n	80123ee <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80123ea:	4664      	mov	r4, ip
 80123ec:	e7ae      	b.n	801234c <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 80123ee:	b011      	add	sp, #68	; 0x44
 80123f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f4:	200000d8 	.word	0x200000d8
 80123f8:	2001d510 	.word	0x2001d510
 80123fc:	080103a3 	.word	0x080103a3

08012400 <GUI_MEMDEV_WriteAt>:
 8012400:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012402:	460c      	mov	r4, r1
 8012404:	4615      	mov	r5, r2
 8012406:	4606      	mov	r6, r0
 8012408:	b330      	cbz	r0, 8012458 <GUI_MEMDEV_WriteAt+0x58>
 801240a:	f7fd fca9 	bl	800fd60 <GUI_ALLOC_LockH>
 801240e:	4a13      	ldr	r2, [pc, #76]	; (801245c <GUI_MEMDEV_WriteAt+0x5c>)
 8012410:	8943      	ldrh	r3, [r0, #10]
 8012412:	9001      	str	r0, [sp, #4]
 8012414:	4294      	cmp	r4, r2
 8012416:	8902      	ldrh	r2, [r0, #8]
 8012418:	bf04      	itt	eq
 801241a:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 801241e:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 8012422:	f8ad 4008 	strh.w	r4, [sp, #8]
 8012426:	3a01      	subs	r2, #1
 8012428:	3b01      	subs	r3, #1
 801242a:	4422      	add	r2, r4
 801242c:	442b      	add	r3, r5
 801242e:	a801      	add	r0, sp, #4
 8012430:	f8ad 200c 	strh.w	r2, [sp, #12]
 8012434:	f8ad 500a 	strh.w	r5, [sp, #10]
 8012438:	f8ad 300e 	strh.w	r3, [sp, #14]
 801243c:	f7fd fc9e 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8012440:	a802      	add	r0, sp, #8
 8012442:	f7f8 f9db 	bl	800a7fc <WM__InitIVRSearch>
 8012446:	b138      	cbz	r0, 8012458 <GUI_MEMDEV_WriteAt+0x58>
 8012448:	4630      	mov	r0, r6
 801244a:	4621      	mov	r1, r4
 801244c:	462a      	mov	r2, r5
 801244e:	f7f9 fb67 	bl	800bb20 <GUI_MEMDEV__WriteToActiveAt>
 8012452:	f7f8 f911 	bl	800a678 <WM__GetNextIVR>
 8012456:	e7f6      	b.n	8012446 <GUI_MEMDEV_WriteAt+0x46>
 8012458:	b004      	add	sp, #16
 801245a:	bd70      	pop	{r4, r5, r6, pc}
 801245c:	fffff001 	.word	0xfffff001

08012460 <GUI_MEMDEV_Write>:
 8012460:	4901      	ldr	r1, [pc, #4]	; (8012468 <GUI_MEMDEV_Write+0x8>)
 8012462:	460a      	mov	r2, r1
 8012464:	f7ff bfcc 	b.w	8012400 <GUI_MEMDEV_WriteAt>
 8012468:	fffff001 	.word	0xfffff001

0801246c <GUI_USAGE_BM_AddPixel>:
 801246c:	4603      	mov	r3, r0
 801246e:	b510      	push	{r4, lr}
 8012470:	f933 4b14 	ldrsh.w	r4, [r3], #20
 8012474:	1b09      	subs	r1, r1, r4
 8012476:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801247a:	6900      	ldr	r0, [r0, #16]
 801247c:	1b12      	subs	r2, r2, r4
 801247e:	fb00 3302 	mla	r3, r0, r2, r3
 8012482:	10c8      	asrs	r0, r1, #3
 8012484:	2280      	movs	r2, #128	; 0x80
 8012486:	f001 0107 	and.w	r1, r1, #7
 801248a:	fa42 f101 	asr.w	r1, r2, r1
 801248e:	5c1a      	ldrb	r2, [r3, r0]
 8012490:	4311      	orrs	r1, r2
 8012492:	5419      	strb	r1, [r3, r0]
 8012494:	bd10      	pop	{r4, pc}

08012496 <GUI_USAGE_BM_GetNextDirty>:
 8012496:	b570      	push	{r4, r5, r6, lr}
 8012498:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801249c:	680b      	ldr	r3, [r1, #0]
 801249e:	8886      	ldrh	r6, [r0, #4]
 80124a0:	42a2      	cmp	r2, r4
 80124a2:	da41      	bge.n	8012528 <GUI_USAGE_BM_GetNextDirty+0x92>
 80124a4:	b236      	sxth	r6, r6
 80124a6:	42b3      	cmp	r3, r6
 80124a8:	6904      	ldr	r4, [r0, #16]
 80124aa:	da3d      	bge.n	8012528 <GUI_USAGE_BM_GetNextDirty+0x92>
 80124ac:	3014      	adds	r0, #20
 80124ae:	fb04 0202 	mla	r2, r4, r2, r0
 80124b2:	10dd      	asrs	r5, r3, #3
 80124b4:	1e70      	subs	r0, r6, #1
 80124b6:	1954      	adds	r4, r2, r5
 80124b8:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 80124bc:	5d55      	ldrb	r5, [r2, r5]
 80124be:	f003 0207 	and.w	r2, r3, #7
 80124c2:	fa05 f202 	lsl.w	r2, r5, r2
 80124c6:	3401      	adds	r4, #1
 80124c8:	b2d2      	uxtb	r2, r2
 80124ca:	b93a      	cbnz	r2, 80124dc <GUI_USAGE_BM_GetNextDirty+0x46>
 80124cc:	b368      	cbz	r0, 801252a <GUI_USAGE_BM_GetNextDirty+0x94>
 80124ce:	3308      	adds	r3, #8
 80124d0:	f814 2b01 	ldrb.w	r2, [r4], #1
 80124d4:	3801      	subs	r0, #1
 80124d6:	f023 0307 	bic.w	r3, r3, #7
 80124da:	e7f6      	b.n	80124ca <GUI_USAGE_BM_GetNextDirty+0x34>
 80124dc:	0615      	lsls	r5, r2, #24
 80124de:	d403      	bmi.n	80124e8 <GUI_USAGE_BM_GetNextDirty+0x52>
 80124e0:	0052      	lsls	r2, r2, #1
 80124e2:	b2d2      	uxtb	r2, r2
 80124e4:	3301      	adds	r3, #1
 80124e6:	e7f9      	b.n	80124dc <GUI_USAGE_BM_GetNextDirty+0x46>
 80124e8:	2aff      	cmp	r2, #255	; 0xff
 80124ea:	461d      	mov	r5, r3
 80124ec:	d005      	beq.n	80124fa <GUI_USAGE_BM_GetNextDirty+0x64>
 80124ee:	0656      	lsls	r6, r2, #25
 80124f0:	d504      	bpl.n	80124fc <GUI_USAGE_BM_GetNextDirty+0x66>
 80124f2:	0052      	lsls	r2, r2, #1
 80124f4:	b2d2      	uxtb	r2, r2
 80124f6:	3301      	adds	r3, #1
 80124f8:	e7f9      	b.n	80124ee <GUI_USAGE_BM_GetNextDirty+0x58>
 80124fa:	3307      	adds	r3, #7
 80124fc:	f003 0207 	and.w	r2, r3, #7
 8012500:	2a07      	cmp	r2, #7
 8012502:	d10d      	bne.n	8012520 <GUI_USAGE_BM_GetNextDirty+0x8a>
 8012504:	3801      	subs	r0, #1
 8012506:	d40b      	bmi.n	8012520 <GUI_USAGE_BM_GetNextDirty+0x8a>
 8012508:	f814 2b01 	ldrb.w	r2, [r4], #1
 801250c:	2aff      	cmp	r2, #255	; 0xff
 801250e:	d101      	bne.n	8012514 <GUI_USAGE_BM_GetNextDirty+0x7e>
 8012510:	3308      	adds	r3, #8
 8012512:	e7f7      	b.n	8012504 <GUI_USAGE_BM_GetNextDirty+0x6e>
 8012514:	0610      	lsls	r0, r2, #24
 8012516:	d503      	bpl.n	8012520 <GUI_USAGE_BM_GetNextDirty+0x8a>
 8012518:	0052      	lsls	r2, r2, #1
 801251a:	b2d2      	uxtb	r2, r2
 801251c:	3301      	adds	r3, #1
 801251e:	e7f9      	b.n	8012514 <GUI_USAGE_BM_GetNextDirty+0x7e>
 8012520:	1b58      	subs	r0, r3, r5
 8012522:	600d      	str	r5, [r1, #0]
 8012524:	3001      	adds	r0, #1
 8012526:	bd70      	pop	{r4, r5, r6, pc}
 8012528:	2000      	movs	r0, #0
 801252a:	bd70      	pop	{r4, r5, r6, pc}

0801252c <_GUI_USAGE_BM_Delete>:
 801252c:	f7fd bc52 	b.w	800fdd4 <GUI_ALLOC_Free>

08012530 <GUI_USAGE_BM_Clear>:
 8012530:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012534:	6902      	ldr	r2, [r0, #16]
 8012536:	2100      	movs	r1, #0
 8012538:	3014      	adds	r0, #20
 801253a:	435a      	muls	r2, r3
 801253c:	f004 b9c4 	b.w	80168c8 <memset>

08012540 <GUI_USAGE_BM_AddHLine>:
 8012540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012542:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012546:	1b09      	subs	r1, r1, r4
 8012548:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801254c:	42a1      	cmp	r1, r4
 801254e:	da2f      	bge.n	80125b0 <GUI_USAGE_BM_AddHLine+0x70>
 8012550:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8012554:	440b      	add	r3, r1
 8012556:	f100 0414 	add.w	r4, r0, #20
 801255a:	3b01      	subs	r3, #1
 801255c:	6900      	ldr	r0, [r0, #16]
 801255e:	1b52      	subs	r2, r2, r5
 8012560:	43de      	mvns	r6, r3
 8012562:	fb00 4202 	mla	r2, r0, r2, r4
 8012566:	f001 0707 	and.w	r7, r1, #7
 801256a:	10cc      	asrs	r4, r1, #3
 801256c:	f006 0607 	and.w	r6, r6, #7
 8012570:	21ff      	movs	r1, #255	; 0xff
 8012572:	fa41 f707 	asr.w	r7, r1, r7
 8012576:	fa01 f606 	lsl.w	r6, r1, r6
 801257a:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 801257e:	eb02 0504 	add.w	r5, r2, r4
 8012582:	b2ff      	uxtb	r7, r7
 8012584:	b2f6      	uxtb	r6, r6
 8012586:	5d10      	ldrb	r0, [r2, r4]
 8012588:	d103      	bne.n	8012592 <GUI_USAGE_BM_AddHLine+0x52>
 801258a:	403e      	ands	r6, r7
 801258c:	4330      	orrs	r0, r6
 801258e:	5510      	strb	r0, [r2, r4]
 8012590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012592:	4338      	orrs	r0, r7
 8012594:	5510      	strb	r0, [r2, r4]
 8012596:	1e5c      	subs	r4, r3, #1
 8012598:	2c00      	cmp	r4, #0
 801259a:	f105 0501 	add.w	r5, r5, #1
 801259e:	dd04      	ble.n	80125aa <GUI_USAGE_BM_AddHLine+0x6a>
 80125a0:	4628      	mov	r0, r5
 80125a2:	4622      	mov	r2, r4
 80125a4:	f004 f990 	bl	80168c8 <memset>
 80125a8:	4425      	add	r5, r4
 80125aa:	782b      	ldrb	r3, [r5, #0]
 80125ac:	431e      	orrs	r6, r3
 80125ae:	702e      	strb	r6, [r5, #0]
 80125b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080125b4 <GUI_USAGE_BM_Create>:
 80125b4:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 80125b8:	f102 060f 	add.w	r6, r2, #15
 80125bc:	1136      	asrs	r6, r6, #4
 80125be:	0076      	lsls	r6, r6, #1
 80125c0:	4682      	mov	sl, r0
 80125c2:	fb06 f003 	mul.w	r0, r6, r3
 80125c6:	3014      	adds	r0, #20
 80125c8:	4689      	mov	r9, r1
 80125ca:	4690      	mov	r8, r2
 80125cc:	461f      	mov	r7, r3
 80125ce:	f7fd fe34 	bl	801023a <GUI_ALLOC_AllocZero>
 80125d2:	4683      	mov	fp, r0
 80125d4:	b198      	cbz	r0, 80125fe <GUI_USAGE_BM_Create+0x4a>
 80125d6:	f7fd fbc3 	bl	800fd60 <GUI_ALLOC_LockH>
 80125da:	4604      	mov	r4, r0
 80125dc:	4b0a      	ldr	r3, [pc, #40]	; (8012608 <GUI_USAGE_BM_Create+0x54>)
 80125de:	60a3      	str	r3, [r4, #8]
 80125e0:	a802      	add	r0, sp, #8
 80125e2:	2301      	movs	r3, #1
 80125e4:	f840 4d04 	str.w	r4, [r0, #-4]!
 80125e8:	f8a4 8004 	strh.w	r8, [r4, #4]
 80125ec:	f8a4 a000 	strh.w	sl, [r4]
 80125f0:	f8a4 9002 	strh.w	r9, [r4, #2]
 80125f4:	80e7      	strh	r7, [r4, #6]
 80125f6:	81a3      	strh	r3, [r4, #12]
 80125f8:	6126      	str	r6, [r4, #16]
 80125fa:	f7fd fbbf 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80125fe:	4658      	mov	r0, fp
 8012600:	b002      	add	sp, #8
 8012602:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 8012606:	bf00      	nop
 8012608:	0801a974 	.word	0x0801a974

0801260c <GUI_USAGE_DecUseCnt>:
 801260c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801260e:	4605      	mov	r5, r0
 8012610:	f7fd fba6 	bl	800fd60 <GUI_ALLOC_LockH>
 8012614:	4602      	mov	r2, r0
 8012616:	a802      	add	r0, sp, #8
 8012618:	8994      	ldrh	r4, [r2, #12]
 801261a:	f840 2d04 	str.w	r2, [r0, #-4]!
 801261e:	3c01      	subs	r4, #1
 8012620:	b2a4      	uxth	r4, r4
 8012622:	8194      	strh	r4, [r2, #12]
 8012624:	f7fd fbaa 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8012628:	b914      	cbnz	r4, 8012630 <GUI_USAGE_DecUseCnt+0x24>
 801262a:	4628      	mov	r0, r5
 801262c:	f7fd fbd2 	bl	800fdd4 <GUI_ALLOC_Free>
 8012630:	b003      	add	sp, #12
 8012632:	bd30      	pop	{r4, r5, pc}

08012634 <GUI_USAGE_AddRect>:
 8012634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012638:	4605      	mov	r5, r0
 801263a:	4688      	mov	r8, r1
 801263c:	4617      	mov	r7, r2
 801263e:	4699      	mov	r9, r3
 8012640:	68a8      	ldr	r0, [r5, #8]
 8012642:	464b      	mov	r3, r9
 8012644:	6846      	ldr	r6, [r0, #4]
 8012646:	4641      	mov	r1, r8
 8012648:	4628      	mov	r0, r5
 801264a:	1c54      	adds	r4, r2, #1
 801264c:	47b0      	blx	r6
 801264e:	9b08      	ldr	r3, [sp, #32]
 8012650:	443b      	add	r3, r7
 8012652:	42a3      	cmp	r3, r4
 8012654:	d001      	beq.n	801265a <GUI_USAGE_AddRect+0x26>
 8012656:	4622      	mov	r2, r4
 8012658:	e7f2      	b.n	8012640 <GUI_USAGE_AddRect+0xc>
 801265a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08012660 <GUI_MEMDEV_ReduceYSize>:
 8012660:	b513      	push	{r0, r1, r4, lr}
 8012662:	460c      	mov	r4, r1
 8012664:	b918      	cbnz	r0, 801266e <GUI_MEMDEV_ReduceYSize+0xe>
 8012666:	4b08      	ldr	r3, [pc, #32]	; (8012688 <GUI_MEMDEV_ReduceYSize+0x28>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801266c:	b150      	cbz	r0, 8012684 <GUI_MEMDEV_ReduceYSize+0x24>
 801266e:	f7fd fb77 	bl	800fd60 <GUI_ALLOC_LockH>
 8012672:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8012676:	9001      	str	r0, [sp, #4]
 8012678:	429c      	cmp	r4, r3
 801267a:	bfb8      	it	lt
 801267c:	8144      	strhlt	r4, [r0, #10]
 801267e:	a801      	add	r0, sp, #4
 8012680:	f7fd fb7c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8012684:	b002      	add	sp, #8
 8012686:	bd10      	pop	{r4, pc}
 8012688:	200000d8 	.word	0x200000d8

0801268c <GUI_MEMDEV_Clear>:
 801268c:	b513      	push	{r0, r1, r4, lr}
 801268e:	b918      	cbnz	r0, 8012698 <GUI_MEMDEV_Clear+0xc>
 8012690:	4b0d      	ldr	r3, [pc, #52]	; (80126c8 <GUI_MEMDEV_Clear+0x3c>)
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8012696:	b1a8      	cbz	r0, 80126c4 <GUI_MEMDEV_Clear+0x38>
 8012698:	f7fd fb62 	bl	800fd60 <GUI_ALLOC_LockH>
 801269c:	ab02      	add	r3, sp, #8
 801269e:	6944      	ldr	r4, [r0, #20]
 80126a0:	f843 0d08 	str.w	r0, [r3, #-8]!
 80126a4:	4668      	mov	r0, sp
 80126a6:	f7fd fb69 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80126aa:	b15c      	cbz	r4, 80126c4 <GUI_MEMDEV_Clear+0x38>
 80126ac:	4620      	mov	r0, r4
 80126ae:	f7fd fb57 	bl	800fd60 <GUI_ALLOC_LockH>
 80126b2:	ac02      	add	r4, sp, #8
 80126b4:	6883      	ldr	r3, [r0, #8]
 80126b6:	f844 0d04 	str.w	r0, [r4, #-4]!
 80126ba:	689b      	ldr	r3, [r3, #8]
 80126bc:	4798      	blx	r3
 80126be:	4620      	mov	r0, r4
 80126c0:	f7fd fb5c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80126c4:	b002      	add	sp, #8
 80126c6:	bd10      	pop	{r4, pc}
 80126c8:	200000d8 	.word	0x200000d8

080126cc <_GetDevData>:
 80126cc:	4802      	ldr	r0, [pc, #8]	; (80126d8 <_GetDevData+0xc>)
 80126ce:	2901      	cmp	r1, #1
 80126d0:	bf18      	it	ne
 80126d2:	2000      	movne	r0, #0
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop
 80126d8:	0801a9cc 	.word	0x0801a9cc

080126dc <_GetDevFunc>:
 80126dc:	4802      	ldr	r0, [pc, #8]	; (80126e8 <_GetDevFunc+0xc>)
 80126de:	2916      	cmp	r1, #22
 80126e0:	bf18      	it	ne
 80126e2:	2000      	movne	r0, #0
 80126e4:	4770      	bx	lr
 80126e6:	bf00      	nop
 80126e8:	08011b4d 	.word	0x08011b4d

080126ec <_SetOrg>:
 80126ec:	6800      	ldr	r0, [r0, #0]
 80126ee:	b508      	push	{r3, lr}
 80126f0:	b110      	cbz	r0, 80126f8 <_SetOrg+0xc>
 80126f2:	68c3      	ldr	r3, [r0, #12]
 80126f4:	6a1b      	ldr	r3, [r3, #32]
 80126f6:	4798      	blx	r3
 80126f8:	bd08      	pop	{r3, pc}

080126fa <_GetDevProp>:
 80126fa:	6800      	ldr	r0, [r0, #0]
 80126fc:	b508      	push	{r3, lr}
 80126fe:	b118      	cbz	r0, 8012708 <_GetDevProp+0xe>
 8012700:	68c3      	ldr	r3, [r0, #12]
 8012702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012704:	4798      	blx	r3
 8012706:	bd08      	pop	{r3, pc}
 8012708:	f04f 30ff 	mov.w	r0, #4294967295
 801270c:	bd08      	pop	{r3, pc}

0801270e <_GetRect>:
 801270e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012710:	6880      	ldr	r0, [r0, #8]
 8012712:	460c      	mov	r4, r1
 8012714:	f7fd fb24 	bl	800fd60 <GUI_ALLOC_LockH>
 8012718:	4603      	mov	r3, r0
 801271a:	a802      	add	r0, sp, #8
 801271c:	8899      	ldrh	r1, [r3, #4]
 801271e:	88da      	ldrh	r2, [r3, #6]
 8012720:	891d      	ldrh	r5, [r3, #8]
 8012722:	f840 3d04 	str.w	r3, [r0, #-4]!
 8012726:	895b      	ldrh	r3, [r3, #10]
 8012728:	8021      	strh	r1, [r4, #0]
 801272a:	8062      	strh	r2, [r4, #2]
 801272c:	4429      	add	r1, r5
 801272e:	441a      	add	r2, r3
 8012730:	3901      	subs	r1, #1
 8012732:	3a01      	subs	r2, #1
 8012734:	80a1      	strh	r1, [r4, #4]
 8012736:	80e2      	strh	r2, [r4, #6]
 8012738:	f7fd fb20 	bl	800fd7c <GUI_ALLOC_UnlockH>
 801273c:	b003      	add	sp, #12
 801273e:	bd30      	pop	{r4, r5, pc}

08012740 <_XY2PTR>:
 8012740:	4b0e      	ldr	r3, [pc, #56]	; (801277c <_XY2PTR+0x3c>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012746:	4605      	mov	r5, r0
 8012748:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801274a:	460e      	mov	r6, r1
 801274c:	f7fd fb08 	bl	800fd60 <GUI_ALLOC_LockH>
 8012750:	4603      	mov	r3, r0
 8012752:	a802      	add	r0, sp, #8
 8012754:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8012758:	f840 3d04 	str.w	r3, [r0, #-4]!
 801275c:	f103 0118 	add.w	r1, r3, #24
 8012760:	1b36      	subs	r6, r6, r4
 8012762:	68dc      	ldr	r4, [r3, #12]
 8012764:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012768:	fb04 1406 	mla	r4, r4, r6, r1
 801276c:	1aed      	subs	r5, r5, r3
 801276e:	f7fd fb05 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8012772:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8012776:	4620      	mov	r0, r4
 8012778:	b002      	add	sp, #8
 801277a:	bd70      	pop	{r4, r5, r6, pc}
 801277c:	200000d8 	.word	0x200000d8

08012780 <_GetPixelIndex>:
 8012780:	b508      	push	{r3, lr}
 8012782:	4608      	mov	r0, r1
 8012784:	4611      	mov	r1, r2
 8012786:	f7ff ffdb 	bl	8012740 <_XY2PTR>
 801278a:	8800      	ldrh	r0, [r0, #0]
 801278c:	bd08      	pop	{r3, pc}
	...

08012790 <_XorPixel>:
 8012790:	4b14      	ldr	r3, [pc, #80]	; (80127e4 <_XorPixel+0x54>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012796:	4607      	mov	r7, r0
 8012798:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801279a:	4615      	mov	r5, r2
 801279c:	460e      	mov	r6, r1
 801279e:	f7fd fadf 	bl	800fd60 <GUI_ALLOC_LockH>
 80127a2:	4629      	mov	r1, r5
 80127a4:	9000      	str	r0, [sp, #0]
 80127a6:	4630      	mov	r0, r6
 80127a8:	f7ff ffca 	bl	8012740 <_XY2PTR>
 80127ac:	693b      	ldr	r3, [r7, #16]
 80127ae:	4604      	mov	r4, r0
 80127b0:	689b      	ldr	r3, [r3, #8]
 80127b2:	4798      	blx	r3
 80127b4:	8823      	ldrh	r3, [r4, #0]
 80127b6:	4058      	eors	r0, r3
 80127b8:	9b00      	ldr	r3, [sp, #0]
 80127ba:	8020      	strh	r0, [r4, #0]
 80127bc:	6958      	ldr	r0, [r3, #20]
 80127be:	b160      	cbz	r0, 80127da <_XorPixel+0x4a>
 80127c0:	f7fd face 	bl	800fd60 <GUI_ALLOC_LockH>
 80127c4:	ac02      	add	r4, sp, #8
 80127c6:	6883      	ldr	r3, [r0, #8]
 80127c8:	f844 0d04 	str.w	r0, [r4, #-4]!
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	4631      	mov	r1, r6
 80127d0:	462a      	mov	r2, r5
 80127d2:	4798      	blx	r3
 80127d4:	4620      	mov	r0, r4
 80127d6:	f7fd fad1 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80127da:	4668      	mov	r0, sp
 80127dc:	f7fd face 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80127e0:	b003      	add	sp, #12
 80127e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127e4:	200000d8 	.word	0x200000d8

080127e8 <_SetPixelIndex>:
 80127e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80127ea:	461c      	mov	r4, r3
 80127ec:	4b10      	ldr	r3, [pc, #64]	; (8012830 <_SetPixelIndex+0x48>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80127f2:	460e      	mov	r6, r1
 80127f4:	4615      	mov	r5, r2
 80127f6:	f7fd fab3 	bl	800fd60 <GUI_ALLOC_LockH>
 80127fa:	4629      	mov	r1, r5
 80127fc:	9000      	str	r0, [sp, #0]
 80127fe:	4630      	mov	r0, r6
 8012800:	f7ff ff9e 	bl	8012740 <_XY2PTR>
 8012804:	9b00      	ldr	r3, [sp, #0]
 8012806:	8004      	strh	r4, [r0, #0]
 8012808:	6958      	ldr	r0, [r3, #20]
 801280a:	b160      	cbz	r0, 8012826 <_SetPixelIndex+0x3e>
 801280c:	f7fd faa8 	bl	800fd60 <GUI_ALLOC_LockH>
 8012810:	ac02      	add	r4, sp, #8
 8012812:	6883      	ldr	r3, [r0, #8]
 8012814:	f844 0d04 	str.w	r0, [r4, #-4]!
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	4631      	mov	r1, r6
 801281c:	462a      	mov	r2, r5
 801281e:	4798      	blx	r3
 8012820:	4620      	mov	r0, r4
 8012822:	f7fd faab 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8012826:	4668      	mov	r0, sp
 8012828:	f7fd faa8 	bl	800fd7c <GUI_ALLOC_UnlockH>
 801282c:	b002      	add	sp, #8
 801282e:	bd70      	pop	{r4, r5, r6, pc}
 8012830:	200000d8 	.word	0x200000d8

08012834 <_DrawVLine>:
 8012834:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012838:	4d2c      	ldr	r5, [pc, #176]	; (80128ec <_DrawVLine+0xb8>)
 801283a:	461e      	mov	r6, r3
 801283c:	682b      	ldr	r3, [r5, #0]
 801283e:	4681      	mov	r9, r0
 8012840:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8012842:	460f      	mov	r7, r1
 8012844:	4614      	mov	r4, r2
 8012846:	f7fd fa8b 	bl	800fd60 <GUI_ALLOC_LockH>
 801284a:	9000      	str	r0, [sp, #0]
 801284c:	6940      	ldr	r0, [r0, #20]
 801284e:	46aa      	mov	sl, r5
 8012850:	b108      	cbz	r0, 8012856 <_DrawVLine+0x22>
 8012852:	f7fd fa85 	bl	800fd60 <GUI_ALLOC_LockH>
 8012856:	9001      	str	r0, [sp, #4]
 8012858:	4621      	mov	r1, r4
 801285a:	4638      	mov	r0, r7
 801285c:	f7ff ff70 	bl	8012740 <_XY2PTR>
 8012860:	9b00      	ldr	r3, [sp, #0]
 8012862:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8012866:	f8da 3000 	ldr.w	r3, [sl]
 801286a:	7c1a      	ldrb	r2, [r3, #16]
 801286c:	07d2      	lsls	r2, r2, #31
 801286e:	4605      	mov	r5, r0
 8012870:	d51f      	bpl.n	80128b2 <_DrawVLine+0x7e>
 8012872:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012876:	689b      	ldr	r3, [r3, #8]
 8012878:	4798      	blx	r3
 801287a:	fa1f f880 	uxth.w	r8, r0
 801287e:	9801      	ldr	r0, [sp, #4]
 8012880:	b120      	cbz	r0, 801288c <_DrawVLine+0x58>
 8012882:	6883      	ldr	r3, [r0, #8]
 8012884:	4639      	mov	r1, r7
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	4622      	mov	r2, r4
 801288a:	4798      	blx	r3
 801288c:	882b      	ldrh	r3, [r5, #0]
 801288e:	ea88 0303 	eor.w	r3, r8, r3
 8012892:	802b      	strh	r3, [r5, #0]
 8012894:	9b00      	ldr	r3, [sp, #0]
 8012896:	3401      	adds	r4, #1
 8012898:	68db      	ldr	r3, [r3, #12]
 801289a:	42b4      	cmp	r4, r6
 801289c:	441d      	add	r5, r3
 801289e:	ddee      	ble.n	801287e <_DrawVLine+0x4a>
 80128a0:	4668      	mov	r0, sp
 80128a2:	f7fd fa6b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80128a6:	9b01      	ldr	r3, [sp, #4]
 80128a8:	b1eb      	cbz	r3, 80128e6 <_DrawVLine+0xb2>
 80128aa:	a801      	add	r0, sp, #4
 80128ac:	f7fd fa66 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80128b0:	e019      	b.n	80128e6 <_DrawVLine+0xb2>
 80128b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128b4:	f8d3 9000 	ldr.w	r9, [r3]
 80128b8:	9b01      	ldr	r3, [sp, #4]
 80128ba:	b163      	cbz	r3, 80128d6 <_DrawVLine+0xa2>
 80128bc:	9801      	ldr	r0, [sp, #4]
 80128be:	6883      	ldr	r3, [r0, #8]
 80128c0:	4622      	mov	r2, r4
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	4639      	mov	r1, r7
 80128c6:	3401      	adds	r4, #1
 80128c8:	4798      	blx	r3
 80128ca:	42b4      	cmp	r4, r6
 80128cc:	f8a5 9000 	strh.w	r9, [r5]
 80128d0:	4445      	add	r5, r8
 80128d2:	ddf3      	ble.n	80128bc <_DrawVLine+0x88>
 80128d4:	e7e4      	b.n	80128a0 <_DrawVLine+0x6c>
 80128d6:	1b34      	subs	r4, r6, r4
 80128d8:	3401      	adds	r4, #1
 80128da:	3c01      	subs	r4, #1
 80128dc:	f8a5 9000 	strh.w	r9, [r5]
 80128e0:	4445      	add	r5, r8
 80128e2:	d1fa      	bne.n	80128da <_DrawVLine+0xa6>
 80128e4:	e7dc      	b.n	80128a0 <_DrawVLine+0x6c>
 80128e6:	b002      	add	sp, #8
 80128e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128ec:	200000d8 	.word	0x200000d8

080128f0 <_FillRect>:
 80128f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128f4:	4f2a      	ldr	r7, [pc, #168]	; (80129a0 <_FillRect+0xb0>)
 80128f6:	4614      	mov	r4, r2
 80128f8:	683a      	ldr	r2, [r7, #0]
 80128fa:	4698      	mov	r8, r3
 80128fc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80128fe:	b087      	sub	sp, #28
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	9302      	str	r3, [sp, #8]
 8012904:	4682      	mov	sl, r0
 8012906:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8012908:	460e      	mov	r6, r1
 801290a:	f7fd fa29 	bl	800fd60 <GUI_ALLOC_LockH>
 801290e:	4621      	mov	r1, r4
 8012910:	9004      	str	r0, [sp, #16]
 8012912:	4630      	mov	r0, r6
 8012914:	f7ff ff14 	bl	8012740 <_XY2PTR>
 8012918:	9a04      	ldr	r2, [sp, #16]
 801291a:	4605      	mov	r5, r0
 801291c:	6950      	ldr	r0, [r2, #20]
 801291e:	68d3      	ldr	r3, [r2, #12]
 8012920:	9303      	str	r3, [sp, #12]
 8012922:	ebc6 0908 	rsb	r9, r6, r8
 8012926:	f109 0801 	add.w	r8, r9, #1
 801292a:	46bb      	mov	fp, r7
 801292c:	b180      	cbz	r0, 8012950 <_FillRect+0x60>
 801292e:	f7fd fa17 	bl	800fd60 <GUI_ALLOC_LockH>
 8012932:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012934:	af06      	add	r7, sp, #24
 8012936:	1b13      	subs	r3, r2, r4
 8012938:	f847 0d04 	str.w	r0, [r7, #-4]!
 801293c:	3301      	adds	r3, #1
 801293e:	9300      	str	r3, [sp, #0]
 8012940:	4631      	mov	r1, r6
 8012942:	4622      	mov	r2, r4
 8012944:	4643      	mov	r3, r8
 8012946:	f7ff fe75 	bl	8012634 <GUI_USAGE_AddRect>
 801294a:	4638      	mov	r0, r7
 801294c:	f7fd fa16 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8012950:	ea4f 0649 	mov.w	r6, r9, lsl #1
 8012954:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012956:	429c      	cmp	r4, r3
 8012958:	dc1c      	bgt.n	8012994 <_FillRect+0xa4>
 801295a:	f8db 3000 	ldr.w	r3, [fp]
 801295e:	7c1b      	ldrb	r3, [r3, #16]
 8012960:	07db      	lsls	r3, r3, #31
 8012962:	d50d      	bpl.n	8012980 <_FillRect+0x90>
 8012964:	f8da 3010 	ldr.w	r3, [sl, #16]
 8012968:	689b      	ldr	r3, [r3, #8]
 801296a:	4798      	blx	r3
 801296c:	19aa      	adds	r2, r5, r6
 801296e:	b280      	uxth	r0, r0
 8012970:	1eab      	subs	r3, r5, #2
 8012972:	8859      	ldrh	r1, [r3, #2]
 8012974:	4041      	eors	r1, r0
 8012976:	f823 1f02 	strh.w	r1, [r3, #2]!
 801297a:	4293      	cmp	r3, r2
 801297c:	d1f9      	bne.n	8012972 <_FillRect+0x82>
 801297e:	e005      	b.n	801298c <_FillRect+0x9c>
 8012980:	9b02      	ldr	r3, [sp, #8]
 8012982:	4628      	mov	r0, r5
 8012984:	b299      	uxth	r1, r3
 8012986:	4642      	mov	r2, r8
 8012988:	f7fb f807 	bl	800d99a <GUI__memset16>
 801298c:	9a03      	ldr	r2, [sp, #12]
 801298e:	3401      	adds	r4, #1
 8012990:	4415      	add	r5, r2
 8012992:	e7df      	b.n	8012954 <_FillRect+0x64>
 8012994:	a804      	add	r0, sp, #16
 8012996:	f7fd f9f1 	bl	800fd7c <GUI_ALLOC_UnlockH>
 801299a:	b007      	add	sp, #28
 801299c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129a0:	200000d8 	.word	0x200000d8

080129a4 <_DrawHLine>:
 80129a4:	b507      	push	{r0, r1, r2, lr}
 80129a6:	9200      	str	r2, [sp, #0]
 80129a8:	f7ff ffa2 	bl	80128f0 <_FillRect>
 80129ac:	b003      	add	sp, #12
 80129ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080129b4 <_DrawBitmap>:
 80129b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129b8:	4c8a      	ldr	r4, [pc, #552]	; (8012be4 <_DrawBitmap+0x230>)
 80129ba:	b093      	sub	sp, #76	; 0x4c
 80129bc:	469b      	mov	fp, r3
 80129be:	6823      	ldr	r3, [r4, #0]
 80129c0:	900d      	str	r0, [sp, #52]	; 0x34
 80129c2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80129c4:	9207      	str	r2, [sp, #28]
 80129c6:	460d      	mov	r5, r1
 80129c8:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 80129cc:	f7fd f9c8 	bl	800fd60 <GUI_ALLOC_LockH>
 80129d0:	9010      	str	r0, [sp, #64]	; 0x40
 80129d2:	6940      	ldr	r0, [r0, #20]
 80129d4:	b108      	cbz	r0, 80129da <_DrawBitmap+0x26>
 80129d6:	f7fd f9c3 	bl	800fd60 <GUI_ALLOC_LockH>
 80129da:	9011      	str	r0, [sp, #68]	; 0x44
 80129dc:	a812      	add	r0, sp, #72	; 0x48
 80129de:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 80129e2:	68db      	ldr	r3, [r3, #12]
 80129e4:	9308      	str	r3, [sp, #32]
 80129e6:	f7fd f9c9 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80129ea:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80129ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 80129ee:	442e      	add	r6, r5
 80129f0:	9604      	str	r6, [sp, #16]
 80129f2:	b150      	cbz	r0, 8012a0a <_DrawBitmap+0x56>
 80129f4:	6823      	ldr	r3, [r4, #0]
 80129f6:	7c1b      	ldrb	r3, [r3, #16]
 80129f8:	0799      	lsls	r1, r3, #30
 80129fa:	d106      	bne.n	8012a0a <_DrawBitmap+0x56>
 80129fc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80129fe:	9700      	str	r7, [sp, #0]
 8012a00:	4631      	mov	r1, r6
 8012a02:	9a07      	ldr	r2, [sp, #28]
 8012a04:	465b      	mov	r3, fp
 8012a06:	f7ff fe15 	bl	8012634 <GUI_USAGE_AddRect>
 8012a0a:	9804      	ldr	r0, [sp, #16]
 8012a0c:	9907      	ldr	r1, [sp, #28]
 8012a0e:	f7ff fe97 	bl	8012740 <_XY2PTR>
 8012a12:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012a14:	2e10      	cmp	r6, #16
 8012a16:	4604      	mov	r4, r0
 8012a18:	d139      	bne.n	8012a8e <_DrawBitmap+0xda>
 8012a1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012a1c:	b11b      	cbz	r3, 8012a26 <_DrawBitmap+0x72>
 8012a1e:	ea4f 064b 	mov.w	r6, fp, lsl #1
 8012a22:	2500      	movs	r5, #0
 8012a24:	e014      	b.n	8012a50 <_DrawBitmap+0x9c>
 8012a26:	4b70      	ldr	r3, [pc, #448]	; (8012be8 <_DrawBitmap+0x234>)
 8012a28:	681d      	ldr	r5, [r3, #0]
 8012a2a:	2d00      	cmp	r5, #0
 8012a2c:	d0f7      	beq.n	8012a1e <_DrawBitmap+0x6a>
 8012a2e:	9e08      	ldr	r6, [sp, #32]
 8012a30:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8012a32:	9600      	str	r6, [sp, #0]
 8012a34:	9701      	str	r7, [sp, #4]
 8012a36:	4651      	mov	r1, sl
 8012a38:	465a      	mov	r2, fp
 8012a3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012a3c:	47a8      	blx	r5
 8012a3e:	e345      	b.n	80130cc <_DrawBitmap+0x718>
 8012a40:	f1ba 0f00 	cmp.w	sl, #0
 8012a44:	d10a      	bne.n	8012a5c <_DrawBitmap+0xa8>
 8012a46:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8012a48:	44ba      	add	sl, r7
 8012a4a:	9f08      	ldr	r7, [sp, #32]
 8012a4c:	3501      	adds	r5, #1
 8012a4e:	443c      	add	r4, r7
 8012a50:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8012a52:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8012a56:	42bd      	cmp	r5, r7
 8012a58:	dbf2      	blt.n	8012a40 <_DrawBitmap+0x8c>
 8012a5a:	e013      	b.n	8012a84 <_DrawBitmap+0xd0>
 8012a5c:	2c00      	cmp	r4, #0
 8012a5e:	d0f2      	beq.n	8012a46 <_DrawBitmap+0x92>
 8012a60:	4620      	mov	r0, r4
 8012a62:	4651      	mov	r1, sl
 8012a64:	4632      	mov	r2, r6
 8012a66:	f003 ff07 	bl	8016878 <memcpy>
 8012a6a:	f1b8 0f00 	cmp.w	r8, #0
 8012a6e:	d0ea      	beq.n	8012a46 <_DrawBitmap+0x92>
 8012a70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012a74:	9a07      	ldr	r2, [sp, #28]
 8012a76:	685f      	ldr	r7, [r3, #4]
 8012a78:	9904      	ldr	r1, [sp, #16]
 8012a7a:	4640      	mov	r0, r8
 8012a7c:	442a      	add	r2, r5
 8012a7e:	465b      	mov	r3, fp
 8012a80:	47b8      	blx	r7
 8012a82:	e7e0      	b.n	8012a46 <_DrawBitmap+0x92>
 8012a84:	f1b8 0f00 	cmp.w	r8, #0
 8012a88:	f040 831d 	bne.w	80130c6 <_DrawBitmap+0x712>
 8012a8c:	e31e      	b.n	80130cc <_DrawBitmap+0x718>
 8012a8e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012a90:	2e17      	cmp	r6, #23
 8012a92:	dd38      	ble.n	8012b06 <_DrawBitmap+0x152>
 8012a94:	2600      	movs	r6, #0
 8012a96:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8012a98:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8012a9a:	42be      	cmp	r6, r7
 8012a9c:	f280 809d 	bge.w	8012bda <_DrawBitmap+0x226>
 8012aa0:	9f07      	ldr	r7, [sp, #28]
 8012aa2:	4437      	add	r7, r6
 8012aa4:	f1ba 0f00 	cmp.w	sl, #0
 8012aa8:	d027      	beq.n	8012afa <_DrawBitmap+0x146>
 8012aaa:	b334      	cbz	r4, 8012afa <_DrawBitmap+0x146>
 8012aac:	b13d      	cbz	r5, 8012abe <_DrawBitmap+0x10a>
 8012aae:	68ab      	ldr	r3, [r5, #8]
 8012ab0:	9904      	ldr	r1, [sp, #16]
 8012ab2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8012ab6:	4628      	mov	r0, r5
 8012ab8:	463a      	mov	r2, r7
 8012aba:	465b      	mov	r3, fp
 8012abc:	47e0      	blx	ip
 8012abe:	1ea3      	subs	r3, r4, #2
 8012ac0:	f1aa 0904 	sub.w	r9, sl, #4
 8012ac4:	9303      	str	r3, [sp, #12]
 8012ac6:	46d8      	mov	r8, fp
 8012ac8:	9b04      	ldr	r3, [sp, #16]
 8012aca:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012acc:	445b      	add	r3, fp
 8012ace:	ebc8 0103 	rsb	r1, r8, r3
 8012ad2:	6903      	ldr	r3, [r0, #16]
 8012ad4:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	9102      	str	r1, [sp, #8]
 8012adc:	4798      	blx	r3
 8012ade:	9b03      	ldr	r3, [sp, #12]
 8012ae0:	9902      	ldr	r1, [sp, #8]
 8012ae2:	f823 0f02 	strh.w	r0, [r3, #2]!
 8012ae6:	9303      	str	r3, [sp, #12]
 8012ae8:	b125      	cbz	r5, 8012af4 <_DrawBitmap+0x140>
 8012aea:	68ab      	ldr	r3, [r5, #8]
 8012aec:	4628      	mov	r0, r5
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	463a      	mov	r2, r7
 8012af2:	4798      	blx	r3
 8012af4:	f1b8 0801 	subs.w	r8, r8, #1
 8012af8:	d1e6      	bne.n	8012ac8 <_DrawBitmap+0x114>
 8012afa:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8012afc:	44ba      	add	sl, r7
 8012afe:	9f08      	ldr	r7, [sp, #32]
 8012b00:	3601      	adds	r6, #1
 8012b02:	443c      	add	r4, r7
 8012b04:	e7c7      	b.n	8012a96 <_DrawBitmap+0xe2>
 8012b06:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012b08:	2e08      	cmp	r6, #8
 8012b0a:	f100 0402 	add.w	r4, r0, #2
 8012b0e:	d16d      	bne.n	8012bec <_DrawBitmap+0x238>
 8012b10:	9e07      	ldr	r6, [sp, #28]
 8012b12:	9f07      	ldr	r7, [sp, #28]
 8012b14:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8012b16:	1bf3      	subs	r3, r6, r7
 8012b18:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8012b1a:	42bb      	cmp	r3, r7
 8012b1c:	f1a4 0002 	sub.w	r0, r4, #2
 8012b20:	da5b      	bge.n	8012bda <_DrawBitmap+0x226>
 8012b22:	4b30      	ldr	r3, [pc, #192]	; (8012be4 <_DrawBitmap+0x230>)
 8012b24:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	7c1b      	ldrb	r3, [r3, #16]
 8012b2a:	b367      	cbz	r7, 8012b86 <_DrawBitmap+0x1d2>
 8012b2c:	f013 0303 	ands.w	r3, r3, #3
 8012b30:	d004      	beq.n	8012b3c <_DrawBitmap+0x188>
 8012b32:	2b02      	cmp	r3, #2
 8012b34:	d14b      	bne.n	8012bce <_DrawBitmap+0x21a>
 8012b36:	46a0      	mov	r8, r4
 8012b38:	9f04      	ldr	r7, [sp, #16]
 8012b3a:	e01d      	b.n	8012b78 <_DrawBitmap+0x1c4>
 8012b3c:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8012b40:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8012b42:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8012b46:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	455b      	cmp	r3, fp
 8012b4e:	d1f5      	bne.n	8012b3c <_DrawBitmap+0x188>
 8012b50:	e03d      	b.n	8012bce <_DrawBitmap+0x21a>
 8012b52:	9921      	ldr	r1, [sp, #132]	; 0x84
 8012b54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012b58:	f828 3c02 	strh.w	r3, [r8, #-2]
 8012b5c:	b12d      	cbz	r5, 8012b6a <_DrawBitmap+0x1b6>
 8012b5e:	68ab      	ldr	r3, [r5, #8]
 8012b60:	4628      	mov	r0, r5
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	4639      	mov	r1, r7
 8012b66:	4632      	mov	r2, r6
 8012b68:	4798      	blx	r3
 8012b6a:	9b04      	ldr	r3, [sp, #16]
 8012b6c:	3701      	adds	r7, #1
 8012b6e:	445b      	add	r3, fp
 8012b70:	42bb      	cmp	r3, r7
 8012b72:	f108 0802 	add.w	r8, r8, #2
 8012b76:	d02a      	beq.n	8012bce <_DrawBitmap+0x21a>
 8012b78:	9804      	ldr	r0, [sp, #16]
 8012b7a:	ebc0 030a 	rsb	r3, r0, sl
 8012b7e:	5ddb      	ldrb	r3, [r3, r7]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d0f2      	beq.n	8012b6a <_DrawBitmap+0x1b6>
 8012b84:	e7e5      	b.n	8012b52 <_DrawBitmap+0x19e>
 8012b86:	f013 0303 	ands.w	r3, r3, #3
 8012b8a:	d004      	beq.n	8012b96 <_DrawBitmap+0x1e2>
 8012b8c:	2b02      	cmp	r3, #2
 8012b8e:	d11e      	bne.n	8012bce <_DrawBitmap+0x21a>
 8012b90:	46a0      	mov	r8, r4
 8012b92:	9f04      	ldr	r7, [sp, #16]
 8012b94:	e014      	b.n	8012bc0 <_DrawBitmap+0x20c>
 8012b96:	4651      	mov	r1, sl
 8012b98:	465a      	mov	r2, fp
 8012b9a:	f003 fe6d 	bl	8016878 <memcpy>
 8012b9e:	e016      	b.n	8012bce <_DrawBitmap+0x21a>
 8012ba0:	f828 3c02 	strh.w	r3, [r8, #-2]
 8012ba4:	b12d      	cbz	r5, 8012bb2 <_DrawBitmap+0x1fe>
 8012ba6:	68ab      	ldr	r3, [r5, #8]
 8012ba8:	4628      	mov	r0, r5
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	4639      	mov	r1, r7
 8012bae:	4632      	mov	r2, r6
 8012bb0:	4798      	blx	r3
 8012bb2:	9b04      	ldr	r3, [sp, #16]
 8012bb4:	3701      	adds	r7, #1
 8012bb6:	445b      	add	r3, fp
 8012bb8:	42bb      	cmp	r3, r7
 8012bba:	f108 0802 	add.w	r8, r8, #2
 8012bbe:	d006      	beq.n	8012bce <_DrawBitmap+0x21a>
 8012bc0:	9a04      	ldr	r2, [sp, #16]
 8012bc2:	ebc2 030a 	rsb	r3, r2, sl
 8012bc6:	5ddb      	ldrb	r3, [r3, r7]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d0f2      	beq.n	8012bb2 <_DrawBitmap+0x1fe>
 8012bcc:	e7e8      	b.n	8012ba0 <_DrawBitmap+0x1ec>
 8012bce:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8012bd0:	44ba      	add	sl, r7
 8012bd2:	9f08      	ldr	r7, [sp, #32]
 8012bd4:	3601      	adds	r6, #1
 8012bd6:	443c      	add	r4, r7
 8012bd8:	e79b      	b.n	8012b12 <_DrawBitmap+0x15e>
 8012bda:	2d00      	cmp	r5, #0
 8012bdc:	f040 8273 	bne.w	80130c6 <_DrawBitmap+0x712>
 8012be0:	e274      	b.n	80130cc <_DrawBitmap+0x718>
 8012be2:	bf00      	nop
 8012be4:	200000d8 	.word	0x200000d8
 8012be8:	2001d304 	.word	0x2001d304
 8012bec:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8012bee:	4bab      	ldr	r3, [pc, #684]	; (8012e9c <_DrawBitmap+0x4e8>)
 8012bf0:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8012bf2:	9409      	str	r4, [sp, #36]	; 0x24
 8012bf4:	2e00      	cmp	r6, #0
 8012bf6:	bf08      	it	eq
 8012bf8:	461e      	moveq	r6, r3
 8012bfa:	9621      	str	r6, [sp, #132]	; 0x84
 8012bfc:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8012bfe:	0076      	lsls	r6, r6, #1
 8012c00:	960e      	str	r6, [sp, #56]	; 0x38
 8012c02:	00bf      	lsls	r7, r7, #2
 8012c04:	9e07      	ldr	r6, [sp, #28]
 8012c06:	970f      	str	r7, [sp, #60]	; 0x3c
 8012c08:	9605      	str	r6, [sp, #20]
 8012c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c0c:	9e05      	ldr	r6, [sp, #20]
 8012c0e:	9f07      	ldr	r7, [sp, #28]
 8012c10:	1e9c      	subs	r4, r3, #2
 8012c12:	1bf3      	subs	r3, r6, r7
 8012c14:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8012c16:	42b3      	cmp	r3, r6
 8012c18:	f280 8253 	bge.w	80130c2 <_DrawBitmap+0x70e>
 8012c1c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8012c1e:	2f02      	cmp	r7, #2
 8012c20:	f000 80d9 	beq.w	8012dd6 <_DrawBitmap+0x422>
 8012c24:	2f04      	cmp	r7, #4
 8012c26:	f000 8178 	beq.w	8012f1a <_DrawBitmap+0x566>
 8012c2a:	2f01      	cmp	r7, #1
 8012c2c:	f040 823f 	bne.w	80130ae <_DrawBitmap+0x6fa>
 8012c30:	f8df 9270 	ldr.w	r9, [pc, #624]	; 8012ea4 <_DrawBitmap+0x4f0>
 8012c34:	f8d9 3000 	ldr.w	r3, [r9]
 8012c38:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8012c3a:	f7fd f891 	bl	800fd60 <GUI_ALLOC_LockH>
 8012c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8012c42:	4a97      	ldr	r2, [pc, #604]	; (8012ea0 <_DrawBitmap+0x4ec>)
 8012c44:	9010      	str	r0, [sp, #64]	; 0x40
 8012c46:	5cd5      	ldrb	r5, [r2, r3]
 8012c48:	f8d9 3000 	ldr.w	r3, [r9]
 8012c4c:	9820      	ldr	r0, [sp, #128]	; 0x80
 8012c4e:	7c1b      	ldrb	r3, [r3, #16]
 8012c50:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8012c52:	f003 0303 	and.w	r3, r3, #3
 8012c56:	2b02      	cmp	r3, #2
 8012c58:	465e      	mov	r6, fp
 8012c5a:	f1c0 0808 	rsb	r8, r0, #8
 8012c5e:	fa45 f500 	asr.w	r5, r5, r0
 8012c62:	d022      	beq.n	8012caa <_DrawBitmap+0x2f6>
 8012c64:	2b03      	cmp	r3, #3
 8012c66:	d062      	beq.n	8012d2e <_DrawBitmap+0x37a>
 8012c68:	2b01      	cmp	r3, #1
 8012c6a:	d060      	beq.n	8012d2e <_DrawBitmap+0x37a>
 8012c6c:	4652      	mov	r2, sl
 8012c6e:	4546      	cmp	r6, r8
 8012c70:	bf38      	it	cc
 8012c72:	46b0      	movcc	r8, r6
 8012c74:	ebc8 0606 	rsb	r6, r8, r6
 8012c78:	4643      	mov	r3, r8
 8012c7a:	4621      	mov	r1, r4
 8012c7c:	f005 0001 	and.w	r0, r5, #1
 8012c80:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8012c82:	3b01      	subs	r3, #1
 8012c84:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8012c88:	f821 0b02 	strh.w	r0, [r1], #2
 8012c8c:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8012c90:	d1f4      	bne.n	8012c7c <_DrawBitmap+0x2c8>
 8012c92:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8012c96:	2e00      	cmp	r6, #0
 8012c98:	f000 8099 	beq.w	8012dce <_DrawBitmap+0x41a>
 8012c9c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012ca0:	497f      	ldr	r1, [pc, #508]	; (8012ea0 <_DrawBitmap+0x4ec>)
 8012ca2:	f04f 0808 	mov.w	r8, #8
 8012ca6:	5ccd      	ldrb	r5, [r1, r3]
 8012ca8:	e7e1      	b.n	8012c6e <_DrawBitmap+0x2ba>
 8012caa:	9821      	ldr	r0, [sp, #132]	; 0x84
 8012cac:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8012cb0:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8012cb4:	f8cd a018 	str.w	sl, [sp, #24]
 8012cb8:	4546      	cmp	r6, r8
 8012cba:	bf38      	it	cc
 8012cbc:	46b0      	movcc	r8, r6
 8012cbe:	ebc8 0606 	rsb	r6, r8, r6
 8012cc2:	b32f      	cbz	r7, 8012d10 <_DrawBitmap+0x35c>
 8012cc4:	b91d      	cbnz	r5, 8012cce <_DrawBitmap+0x31a>
 8012cc6:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8012cca:	44c1      	add	r9, r8
 8012ccc:	e024      	b.n	8012d18 <_DrawBitmap+0x364>
 8012cce:	07ea      	lsls	r2, r5, #31
 8012cd0:	d50b      	bpl.n	8012cea <_DrawBitmap+0x336>
 8012cd2:	68bb      	ldr	r3, [r7, #8]
 8012cd4:	9a05      	ldr	r2, [sp, #20]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	f8cd c008 	str.w	ip, [sp, #8]
 8012cdc:	4638      	mov	r0, r7
 8012cde:	4649      	mov	r1, r9
 8012ce0:	4798      	blx	r3
 8012ce2:	f8dd c008 	ldr.w	ip, [sp, #8]
 8012ce6:	f8a4 c000 	strh.w	ip, [r4]
 8012cea:	f1b8 0801 	subs.w	r8, r8, #1
 8012cee:	f109 0901 	add.w	r9, r9, #1
 8012cf2:	f104 0402 	add.w	r4, r4, #2
 8012cf6:	d00f      	beq.n	8012d18 <_DrawBitmap+0x364>
 8012cf8:	086d      	lsrs	r5, r5, #1
 8012cfa:	e7e3      	b.n	8012cc4 <_DrawBitmap+0x310>
 8012cfc:	07eb      	lsls	r3, r5, #31
 8012cfe:	bf48      	it	mi
 8012d00:	f8a4 c000 	strhmi.w	ip, [r4]
 8012d04:	f1b8 0801 	subs.w	r8, r8, #1
 8012d08:	f104 0402 	add.w	r4, r4, #2
 8012d0c:	d004      	beq.n	8012d18 <_DrawBitmap+0x364>
 8012d0e:	086d      	lsrs	r5, r5, #1
 8012d10:	2d00      	cmp	r5, #0
 8012d12:	d1f3      	bne.n	8012cfc <_DrawBitmap+0x348>
 8012d14:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8012d18:	2e00      	cmp	r6, #0
 8012d1a:	d058      	beq.n	8012dce <_DrawBitmap+0x41a>
 8012d1c:	9906      	ldr	r1, [sp, #24]
 8012d1e:	4a60      	ldr	r2, [pc, #384]	; (8012ea0 <_DrawBitmap+0x4ec>)
 8012d20:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012d24:	9106      	str	r1, [sp, #24]
 8012d26:	5cd5      	ldrb	r5, [r2, r3]
 8012d28:	f04f 0808 	mov.w	r8, #8
 8012d2c:	e7c4      	b.n	8012cb8 <_DrawBitmap+0x304>
 8012d2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012d30:	6913      	ldr	r3, [r2, #16]
 8012d32:	689b      	ldr	r3, [r3, #8]
 8012d34:	4798      	blx	r3
 8012d36:	9b04      	ldr	r3, [sp, #16]
 8012d38:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d3a:	b280      	uxth	r0, r0
 8012d3c:	900a      	str	r0, [sp, #40]	; 0x28
 8012d3e:	f10a 0901 	add.w	r9, sl, #1
 8012d42:	4546      	cmp	r6, r8
 8012d44:	bf38      	it	cc
 8012d46:	46b0      	movcc	r8, r6
 8012d48:	ebc8 0606 	rsb	r6, r8, r6
 8012d4c:	1ca3      	adds	r3, r4, #2
 8012d4e:	b31f      	cbz	r7, 8012d98 <_DrawBitmap+0x3e4>
 8012d50:	f8cd 8018 	str.w	r8, [sp, #24]
 8012d54:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012d56:	9a06      	ldr	r2, [sp, #24]
 8012d58:	4440      	add	r0, r8
 8012d5a:	900c      	str	r0, [sp, #48]	; 0x30
 8012d5c:	1a81      	subs	r1, r0, r2
 8012d5e:	07e8      	lsls	r0, r5, #31
 8012d60:	d50d      	bpl.n	8012d7e <_DrawBitmap+0x3ca>
 8012d62:	68ba      	ldr	r2, [r7, #8]
 8012d64:	4638      	mov	r0, r7
 8012d66:	f8d2 c000 	ldr.w	ip, [r2]
 8012d6a:	9a05      	ldr	r2, [sp, #20]
 8012d6c:	9302      	str	r3, [sp, #8]
 8012d6e:	47e0      	blx	ip
 8012d70:	9b02      	ldr	r3, [sp, #8]
 8012d72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012d74:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8012d78:	4042      	eors	r2, r0
 8012d7a:	f823 2c02 	strh.w	r2, [r3, #-2]
 8012d7e:	9906      	ldr	r1, [sp, #24]
 8012d80:	3901      	subs	r1, #1
 8012d82:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8012d86:	f103 0302 	add.w	r3, r3, #2
 8012d8a:	9106      	str	r1, [sp, #24]
 8012d8c:	d1e2      	bne.n	8012d54 <_DrawBitmap+0x3a0>
 8012d8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d90:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d92:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8012d96:	e010      	b.n	8012dba <_DrawBitmap+0x406>
 8012d98:	4642      	mov	r2, r8
 8012d9a:	07e9      	lsls	r1, r5, #31
 8012d9c:	d505      	bpl.n	8012daa <_DrawBitmap+0x3f6>
 8012d9e:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 8012da2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012da4:	4041      	eors	r1, r0
 8012da6:	f823 1c02 	strh.w	r1, [r3, #-2]
 8012daa:	3a01      	subs	r2, #1
 8012dac:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8012db0:	f103 0302 	add.w	r3, r3, #2
 8012db4:	d1f1      	bne.n	8012d9a <_DrawBitmap+0x3e6>
 8012db6:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8012dba:	b146      	cbz	r6, 8012dce <_DrawBitmap+0x41a>
 8012dbc:	f899 3000 	ldrb.w	r3, [r9]
 8012dc0:	4a37      	ldr	r2, [pc, #220]	; (8012ea0 <_DrawBitmap+0x4ec>)
 8012dc2:	f109 0901 	add.w	r9, r9, #1
 8012dc6:	5cd5      	ldrb	r5, [r2, r3]
 8012dc8:	f04f 0808 	mov.w	r8, #8
 8012dcc:	e7b9      	b.n	8012d42 <_DrawBitmap+0x38e>
 8012dce:	a810      	add	r0, sp, #64	; 0x40
 8012dd0:	f7fc ffd4 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8012dd4:	e16b      	b.n	80130ae <_DrawBitmap+0x6fa>
 8012dd6:	4b33      	ldr	r3, [pc, #204]	; (8012ea4 <_DrawBitmap+0x4f0>)
 8012dd8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8012dde:	7c1b      	ldrb	r3, [r3, #16]
 8012de0:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8012de4:	f1c6 0504 	rsb	r5, r6, #4
 8012de8:	f89a 6000 	ldrb.w	r6, [sl]
 8012dec:	f003 0303 	and.w	r3, r3, #3
 8012df0:	40be      	lsls	r6, r7
 8012df2:	2b01      	cmp	r3, #1
 8012df4:	b2ed      	uxtb	r5, r5
 8012df6:	b2f6      	uxtb	r6, r6
 8012df8:	d06a      	beq.n	8012ed0 <_DrawBitmap+0x51c>
 8012dfa:	d308      	bcc.n	8012e0e <_DrawBitmap+0x45a>
 8012dfc:	2b02      	cmp	r3, #2
 8012dfe:	f040 8156 	bne.w	80130ae <_DrawBitmap+0x6fa>
 8012e02:	f8cd a018 	str.w	sl, [sp, #24]
 8012e06:	465f      	mov	r7, fp
 8012e08:	f8dd c010 	ldr.w	ip, [sp, #16]
 8012e0c:	e03e      	b.n	8012e8c <_DrawBitmap+0x4d8>
 8012e0e:	4652      	mov	r2, sl
 8012e10:	465b      	mov	r3, fp
 8012e12:	429d      	cmp	r5, r3
 8012e14:	bfc8      	it	gt
 8012e16:	b2dd      	uxtbgt	r5, r3
 8012e18:	1b5b      	subs	r3, r3, r5
 8012e1a:	4629      	mov	r1, r5
 8012e1c:	4620      	mov	r0, r4
 8012e1e:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 8012e22:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8012e24:	3901      	subs	r1, #1
 8012e26:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 8012e2a:	f820 cb02 	strh.w	ip, [r0], #2
 8012e2e:	00b6      	lsls	r6, r6, #2
 8012e30:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8012e34:	b2f6      	uxtb	r6, r6
 8012e36:	d1f2      	bne.n	8012e1e <_DrawBitmap+0x46a>
 8012e38:	3d01      	subs	r5, #1
 8012e3a:	b2ed      	uxtb	r5, r5
 8012e3c:	3501      	adds	r5, #1
 8012e3e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	f000 8133 	beq.w	80130ae <_DrawBitmap+0x6fa>
 8012e48:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8012e4c:	2504      	movs	r5, #4
 8012e4e:	e7e0      	b.n	8012e12 <_DrawBitmap+0x45e>
 8012e50:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8012e54:	eb08 010c 	add.w	r1, r8, ip
 8012e58:	d126      	bne.n	8012ea8 <_DrawBitmap+0x4f4>
 8012e5a:	f108 0801 	add.w	r8, r8, #1
 8012e5e:	fa5f f388 	uxtb.w	r3, r8
 8012e62:	00b6      	lsls	r6, r6, #2
 8012e64:	429d      	cmp	r5, r3
 8012e66:	b2f6      	uxtb	r6, r6
 8012e68:	d1f2      	bne.n	8012e50 <_DrawBitmap+0x49c>
 8012e6a:	3d01      	subs	r5, #1
 8012e6c:	b2ed      	uxtb	r5, r5
 8012e6e:	1c6b      	adds	r3, r5, #1
 8012e70:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012e74:	f10c 0301 	add.w	r3, ip, #1
 8012e78:	eb03 0c05 	add.w	ip, r3, r5
 8012e7c:	2f00      	cmp	r7, #0
 8012e7e:	f000 8116 	beq.w	80130ae <_DrawBitmap+0x6fa>
 8012e82:	9b06      	ldr	r3, [sp, #24]
 8012e84:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8012e88:	9306      	str	r3, [sp, #24]
 8012e8a:	2504      	movs	r5, #4
 8012e8c:	42bd      	cmp	r5, r7
 8012e8e:	bfc8      	it	gt
 8012e90:	b2fd      	uxtbgt	r5, r7
 8012e92:	1b7f      	subs	r7, r7, r5
 8012e94:	f04f 0800 	mov.w	r8, #0
 8012e98:	e7da      	b.n	8012e50 <_DrawBitmap+0x49c>
 8012e9a:	bf00      	nop
 8012e9c:	0801a98c 	.word	0x0801a98c
 8012ea0:	0801a7e4 	.word	0x0801a7e4
 8012ea4:	200000d8 	.word	0x200000d8
 8012ea8:	09b3      	lsrs	r3, r6, #6
 8012eaa:	9821      	ldr	r0, [sp, #132]	; 0x84
 8012eac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8012eb0:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 8012eb4:	f1b9 0f00 	cmp.w	r9, #0
 8012eb8:	d0cf      	beq.n	8012e5a <_DrawBitmap+0x4a6>
 8012eba:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012ebe:	9a05      	ldr	r2, [sp, #20]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	f8cd c008 	str.w	ip, [sp, #8]
 8012ec6:	4648      	mov	r0, r9
 8012ec8:	4798      	blx	r3
 8012eca:	f8dd c008 	ldr.w	ip, [sp, #8]
 8012ece:	e7c4      	b.n	8012e5a <_DrawBitmap+0x4a6>
 8012ed0:	4651      	mov	r1, sl
 8012ed2:	465b      	mov	r3, fp
 8012ed4:	429d      	cmp	r5, r3
 8012ed6:	bfc8      	it	gt
 8012ed8:	b2dd      	uxtbgt	r5, r3
 8012eda:	1b5b      	subs	r3, r3, r5
 8012edc:	1ca2      	adds	r2, r4, #2
 8012ede:	4628      	mov	r0, r5
 8012ee0:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8012ee4:	d005      	beq.n	8012ef2 <_DrawBitmap+0x53e>
 8012ee6:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 8012eea:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 8012eee:	f822 7c02 	strh.w	r7, [r2, #-2]
 8012ef2:	3801      	subs	r0, #1
 8012ef4:	00b6      	lsls	r6, r6, #2
 8012ef6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8012efa:	b2f6      	uxtb	r6, r6
 8012efc:	f102 0202 	add.w	r2, r2, #2
 8012f00:	d1ee      	bne.n	8012ee0 <_DrawBitmap+0x52c>
 8012f02:	3d01      	subs	r5, #1
 8012f04:	b2ed      	uxtb	r5, r5
 8012f06:	3501      	adds	r5, #1
 8012f08:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	f000 80ce 	beq.w	80130ae <_DrawBitmap+0x6fa>
 8012f12:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8012f16:	2504      	movs	r5, #4
 8012f18:	e7dc      	b.n	8012ed4 <_DrawBitmap+0x520>
 8012f1a:	4a6e      	ldr	r2, [pc, #440]	; (80130d4 <_DrawBitmap+0x720>)
 8012f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8012f20:	6812      	ldr	r2, [r2, #0]
 8012f22:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8012f24:	7c12      	ldrb	r2, [r2, #16]
 8012f26:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012f28:	f002 0203 	and.w	r2, r2, #3
 8012f2c:	40bb      	lsls	r3, r7
 8012f2e:	2a01      	cmp	r2, #1
 8012f30:	b2dd      	uxtb	r5, r3
 8012f32:	f000 8095 	beq.w	8013060 <_DrawBitmap+0x6ac>
 8012f36:	d302      	bcc.n	8012f3e <_DrawBitmap+0x58a>
 8012f38:	2a02      	cmp	r2, #2
 8012f3a:	d036      	beq.n	8012faa <_DrawBitmap+0x5f6>
 8012f3c:	e0b7      	b.n	80130ae <_DrawBitmap+0x6fa>
 8012f3e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8012f40:	b166      	cbz	r6, 8012f5c <_DrawBitmap+0x5a8>
 8012f42:	092d      	lsrs	r5, r5, #4
 8012f44:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8012f46:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8012f4a:	8023      	strh	r3, [r4, #0]
 8012f4c:	f10a 0201 	add.w	r2, sl, #1
 8012f50:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012f52:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8012f56:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012f5a:	e001      	b.n	8012f60 <_DrawBitmap+0x5ac>
 8012f5c:	465b      	mov	r3, fp
 8012f5e:	4652      	mov	r2, sl
 8012f60:	2b01      	cmp	r3, #1
 8012f62:	dd19      	ble.n	8012f98 <_DrawBitmap+0x5e4>
 8012f64:	1058      	asrs	r0, r3, #1
 8012f66:	1d21      	adds	r1, r4, #4
 8012f68:	f003 0301 	and.w	r3, r3, #1
 8012f6c:	eb02 0c00 	add.w	ip, r2, r0
 8012f70:	092f      	lsrs	r7, r5, #4
 8012f72:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8012f74:	f005 050f 	and.w	r5, r5, #15
 8012f78:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8012f7c:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8012f80:	f821 7c04 	strh.w	r7, [r1, #-4]
 8012f84:	f821 5c02 	strh.w	r5, [r1, #-2]
 8012f88:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8012f8c:	4562      	cmp	r2, ip
 8012f8e:	f101 0104 	add.w	r1, r1, #4
 8012f92:	d1ed      	bne.n	8012f70 <_DrawBitmap+0x5bc>
 8012f94:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	f000 8088 	beq.w	80130ae <_DrawBitmap+0x6fa>
 8012f9e:	092d      	lsrs	r5, r5, #4
 8012fa0:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8012fa2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8012fa6:	8023      	strh	r3, [r4, #0]
 8012fa8:	e081      	b.n	80130ae <_DrawBitmap+0x6fa>
 8012faa:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8012fac:	b1c7      	cbz	r7, 8012fe0 <_DrawBitmap+0x62c>
 8012fae:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8012fb2:	d00b      	beq.n	8012fcc <_DrawBitmap+0x618>
 8012fb4:	092d      	lsrs	r5, r5, #4
 8012fb6:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8012fb8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8012fbc:	8023      	strh	r3, [r4, #0]
 8012fbe:	b12e      	cbz	r6, 8012fcc <_DrawBitmap+0x618>
 8012fc0:	68b3      	ldr	r3, [r6, #8]
 8012fc2:	9904      	ldr	r1, [sp, #16]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	9a05      	ldr	r2, [sp, #20]
 8012fc8:	4630      	mov	r0, r6
 8012fca:	4798      	blx	r3
 8012fcc:	9804      	ldr	r0, [sp, #16]
 8012fce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012fd0:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8012fd4:	1c47      	adds	r7, r0, #1
 8012fd6:	f10b 39ff 	add.w	r9, fp, #4294967295
 8012fda:	f10a 0801 	add.w	r8, sl, #1
 8012fde:	e00f      	b.n	8013000 <_DrawBitmap+0x64c>
 8012fe0:	46d9      	mov	r9, fp
 8012fe2:	46d0      	mov	r8, sl
 8012fe4:	9f04      	ldr	r7, [sp, #16]
 8012fe6:	e00b      	b.n	8013000 <_DrawBitmap+0x64c>
 8012fe8:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8012fec:	d10c      	bne.n	8013008 <_DrawBitmap+0x654>
 8012fee:	f015 050f 	ands.w	r5, r5, #15
 8012ff2:	d117      	bne.n	8013024 <_DrawBitmap+0x670>
 8012ff4:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 8012ff8:	3404      	adds	r4, #4
 8012ffa:	3702      	adds	r7, #2
 8012ffc:	f1a9 0902 	sub.w	r9, r9, #2
 8013000:	f1b9 0f01 	cmp.w	r9, #1
 8013004:	dcf0      	bgt.n	8012fe8 <_DrawBitmap+0x634>
 8013006:	e01a      	b.n	801303e <_DrawBitmap+0x68a>
 8013008:	092b      	lsrs	r3, r5, #4
 801300a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801300c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013010:	8023      	strh	r3, [r4, #0]
 8013012:	2e00      	cmp	r6, #0
 8013014:	d0eb      	beq.n	8012fee <_DrawBitmap+0x63a>
 8013016:	68b3      	ldr	r3, [r6, #8]
 8013018:	9a05      	ldr	r2, [sp, #20]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	4630      	mov	r0, r6
 801301e:	4639      	mov	r1, r7
 8013020:	4798      	blx	r3
 8013022:	e7e4      	b.n	8012fee <_DrawBitmap+0x63a>
 8013024:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013026:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 801302a:	8063      	strh	r3, [r4, #2]
 801302c:	2e00      	cmp	r6, #0
 801302e:	d0e1      	beq.n	8012ff4 <_DrawBitmap+0x640>
 8013030:	68b3      	ldr	r3, [r6, #8]
 8013032:	9a05      	ldr	r2, [sp, #20]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	4630      	mov	r0, r6
 8013038:	1c79      	adds	r1, r7, #1
 801303a:	4798      	blx	r3
 801303c:	e7da      	b.n	8012ff4 <_DrawBitmap+0x640>
 801303e:	f1b9 0f00 	cmp.w	r9, #0
 8013042:	d034      	beq.n	80130ae <_DrawBitmap+0x6fa>
 8013044:	092d      	lsrs	r5, r5, #4
 8013046:	d032      	beq.n	80130ae <_DrawBitmap+0x6fa>
 8013048:	9821      	ldr	r0, [sp, #132]	; 0x84
 801304a:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 801304e:	8023      	strh	r3, [r4, #0]
 8013050:	b36e      	cbz	r6, 80130ae <_DrawBitmap+0x6fa>
 8013052:	68b3      	ldr	r3, [r6, #8]
 8013054:	9a05      	ldr	r2, [sp, #20]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	4630      	mov	r0, r6
 801305a:	4639      	mov	r1, r7
 801305c:	4798      	blx	r3
 801305e:	e026      	b.n	80130ae <_DrawBitmap+0x6fa>
 8013060:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013062:	f1c6 0302 	rsb	r3, r6, #2
 8013066:	b2db      	uxtb	r3, r3
 8013068:	4650      	mov	r0, sl
 801306a:	465a      	mov	r2, fp
 801306c:	4293      	cmp	r3, r2
 801306e:	bfc8      	it	gt
 8013070:	b2d3      	uxtbgt	r3, r2
 8013072:	1ad2      	subs	r2, r2, r3
 8013074:	1ca1      	adds	r1, r4, #2
 8013076:	461e      	mov	r6, r3
 8013078:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 801307c:	d005      	beq.n	801308a <_DrawBitmap+0x6d6>
 801307e:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 8013082:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 8013086:	f821 7c02 	strh.w	r7, [r1, #-2]
 801308a:	3e01      	subs	r6, #1
 801308c:	012d      	lsls	r5, r5, #4
 801308e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8013092:	b2ed      	uxtb	r5, r5
 8013094:	f101 0102 	add.w	r1, r1, #2
 8013098:	d1ee      	bne.n	8013078 <_DrawBitmap+0x6c4>
 801309a:	3b01      	subs	r3, #1
 801309c:	b2db      	uxtb	r3, r3
 801309e:	3301      	adds	r3, #1
 80130a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80130a4:	b11a      	cbz	r2, 80130ae <_DrawBitmap+0x6fa>
 80130a6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80130aa:	2302      	movs	r3, #2
 80130ac:	e7de      	b.n	801306c <_DrawBitmap+0x6b8>
 80130ae:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80130b0:	9b05      	ldr	r3, [sp, #20]
 80130b2:	9e08      	ldr	r6, [sp, #32]
 80130b4:	44ba      	add	sl, r7
 80130b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80130b8:	3301      	adds	r3, #1
 80130ba:	4437      	add	r7, r6
 80130bc:	9305      	str	r3, [sp, #20]
 80130be:	9709      	str	r7, [sp, #36]	; 0x24
 80130c0:	e5a3      	b.n	8012c0a <_DrawBitmap+0x256>
 80130c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80130c4:	b113      	cbz	r3, 80130cc <_DrawBitmap+0x718>
 80130c6:	a811      	add	r0, sp, #68	; 0x44
 80130c8:	f7fc fe58 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80130cc:	b013      	add	sp, #76	; 0x4c
 80130ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130d2:	bf00      	nop
 80130d4:	200000d8 	.word	0x200000d8

080130d8 <LCD_SelectLCD>:
 80130d8:	b510      	push	{r4, lr}
 80130da:	4b0d      	ldr	r3, [pc, #52]	; (8013110 <LCD_SelectLCD+0x38>)
 80130dc:	681a      	ldr	r2, [r3, #0]
 80130de:	7c51      	ldrb	r1, [r2, #17]
 80130e0:	4a0c      	ldr	r2, [pc, #48]	; (8013114 <LCD_SelectLCD+0x3c>)
 80130e2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80130e6:	461c      	mov	r4, r3
 80130e8:	b140      	cbz	r0, 80130fc <LCD_SelectLCD+0x24>
 80130ea:	68c3      	ldr	r3, [r0, #12]
 80130ec:	b113      	cbz	r3, 80130f4 <LCD_SelectLCD+0x1c>
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	2b04      	cmp	r3, #4
 80130f2:	d001      	beq.n	80130f8 <LCD_SelectLCD+0x20>
 80130f4:	6800      	ldr	r0, [r0, #0]
 80130f6:	e7f7      	b.n	80130e8 <LCD_SelectLCD+0x10>
 80130f8:	f7fc f854 	bl	800f1a4 <GUI_DEVICE_Unlink>
 80130fc:	6823      	ldr	r3, [r4, #0]
 80130fe:	2200      	movs	r2, #0
 8013100:	661a      	str	r2, [r3, #96]	; 0x60
 8013102:	f103 0208 	add.w	r2, r3, #8
 8013106:	615a      	str	r2, [r3, #20]
 8013108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801310c:	f7fa bb7a 	b.w	800d804 <LCD_SetClipRectMax>
 8013110:	200000d8 	.word	0x200000d8
 8013114:	2001d510 	.word	0x2001d510

08013118 <LCD_ReadRectEx>:
 8013118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801311c:	b087      	sub	sp, #28
 801311e:	4617      	mov	r7, r2
 8013120:	9304      	str	r3, [sp, #16]
 8013122:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013124:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8013126:	68da      	ldr	r2, [r3, #12]
 8013128:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801312a:	f8d2 8014 	ldr.w	r8, [r2, #20]
 801312e:	4606      	mov	r6, r0
 8013130:	460d      	mov	r5, r1
 8013132:	b973      	cbnz	r3, 8013152 <LCD_ReadRectEx+0x3a>
 8013134:	4b71      	ldr	r3, [pc, #452]	; (80132fc <LCD_ReadRectEx+0x1e4>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	7c58      	ldrb	r0, [r3, #17]
 801313a:	f7fa f815 	bl	800d168 <GUI_GetBitsPerPixelEx>
 801313e:	2808      	cmp	r0, #8
 8013140:	4682      	mov	sl, r0
 8013142:	dd15      	ble.n	8013170 <LCD_ReadRectEx+0x58>
 8013144:	2810      	cmp	r0, #16
 8013146:	bfcc      	ite	gt
 8013148:	f04f 0904 	movgt.w	r9, #4
 801314c:	f04f 0902 	movle.w	r9, #2
 8013150:	e010      	b.n	8013174 <LCD_ReadRectEx+0x5c>
 8013152:	a811      	add	r0, sp, #68	; 0x44
 8013154:	2101      	movs	r1, #1
 8013156:	4798      	blx	r3
 8013158:	4684      	mov	ip, r0
 801315a:	2800      	cmp	r0, #0
 801315c:	d0ea      	beq.n	8013134 <LCD_ReadRectEx+0x1c>
 801315e:	9b04      	ldr	r3, [sp, #16]
 8013160:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013162:	e88d 0018 	stmia.w	sp, {r3, r4}
 8013166:	4631      	mov	r1, r6
 8013168:	462a      	mov	r2, r5
 801316a:	463b      	mov	r3, r7
 801316c:	47e0      	blx	ip
 801316e:	e0c1      	b.n	80132f4 <LCD_ReadRectEx+0x1dc>
 8013170:	f04f 0901 	mov.w	r9, #1
 8013174:	f04f 0b00 	mov.w	fp, #0
 8013178:	9b04      	ldr	r3, [sp, #16]
 801317a:	429d      	cmp	r5, r3
 801317c:	f300 80ba 	bgt.w	80132f4 <LCD_ReadRectEx+0x1dc>
 8013180:	f1b9 0f02 	cmp.w	r9, #2
 8013184:	d009      	beq.n	801319a <LCD_ReadRectEx+0x82>
 8013186:	f1b9 0f04 	cmp.w	r9, #4
 801318a:	d004      	beq.n	8013196 <LCD_ReadRectEx+0x7e>
 801318c:	f1b9 0f01 	cmp.w	r9, #1
 8013190:	f040 80ae 	bne.w	80132f0 <LCD_ReadRectEx+0x1d8>
 8013194:	e003      	b.n	801319e <LCD_ReadRectEx+0x86>
 8013196:	46b4      	mov	ip, r6
 8013198:	e09b      	b.n	80132d2 <LCD_ReadRectEx+0x1ba>
 801319a:	46b4      	mov	ip, r6
 801319c:	e08a      	b.n	80132b4 <LCD_ReadRectEx+0x19c>
 801319e:	f10a 32ff 	add.w	r2, sl, #4294967295
 80131a2:	2a07      	cmp	r2, #7
 80131a4:	f200 80a4 	bhi.w	80132f0 <LCD_ReadRectEx+0x1d8>
 80131a8:	e8df f002 	tbb	[pc, r2]
 80131ac:	0606080a 	.word	0x0606080a
 80131b0:	04040404 	.word	0x04040404
 80131b4:	46b4      	mov	ip, r6
 80131b6:	e066      	b.n	8013286 <LCD_ReadRectEx+0x16e>
 80131b8:	46b4      	mov	ip, r6
 80131ba:	e047      	b.n	801324c <LCD_ReadRectEx+0x134>
 80131bc:	46b4      	mov	ip, r6
 80131be:	e022      	b.n	8013206 <LCD_ReadRectEx+0xee>
 80131c0:	46b4      	mov	ip, r6
 80131c2:	45bc      	cmp	ip, r7
 80131c4:	f300 8094 	bgt.w	80132f0 <LCD_ReadRectEx+0x1d8>
 80131c8:	4661      	mov	r1, ip
 80131ca:	462a      	mov	r2, r5
 80131cc:	f8cd c00c 	str.w	ip, [sp, #12]
 80131d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80131d2:	47c0      	blx	r8
 80131d4:	f1cb 0207 	rsb	r2, fp, #7
 80131d8:	fa00 f202 	lsl.w	r2, r0, r2
 80131dc:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80131e0:	7820      	ldrb	r0, [r4, #0]
 80131e2:	fa41 f10b 	asr.w	r1, r1, fp
 80131e6:	4001      	ands	r1, r0
 80131e8:	430a      	orrs	r2, r1
 80131ea:	7022      	strb	r2, [r4, #0]
 80131ec:	f10b 0301 	add.w	r3, fp, #1
 80131f0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80131f4:	f023 0207 	bic.w	r2, r3, #7
 80131f8:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 80131fc:	fa43 fb02 	asr.w	fp, r3, r2
 8013200:	f10c 0c01 	add.w	ip, ip, #1
 8013204:	e7dd      	b.n	80131c2 <LCD_ReadRectEx+0xaa>
 8013206:	45bc      	cmp	ip, r7
 8013208:	dc72      	bgt.n	80132f0 <LCD_ReadRectEx+0x1d8>
 801320a:	4661      	mov	r1, ip
 801320c:	462a      	mov	r2, r5
 801320e:	f8cd c00c 	str.w	ip, [sp, #12]
 8013212:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013214:	47c0      	blx	r8
 8013216:	ea4f 024b 	mov.w	r2, fp, lsl #1
 801321a:	f1c2 0106 	rsb	r1, r2, #6
 801321e:	fa00 f101 	lsl.w	r1, r0, r1
 8013222:	f64f 703f 	movw	r0, #65343	; 0xff3f
 8013226:	fa40 f202 	asr.w	r2, r0, r2
 801322a:	7820      	ldrb	r0, [r4, #0]
 801322c:	4002      	ands	r2, r0
 801322e:	4311      	orrs	r1, r2
 8013230:	7021      	strb	r1, [r4, #0]
 8013232:	f10b 0301 	add.w	r3, fp, #1
 8013236:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801323a:	f023 0203 	bic.w	r2, r3, #3
 801323e:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8013242:	fa43 fb02 	asr.w	fp, r3, r2
 8013246:	f10c 0c01 	add.w	ip, ip, #1
 801324a:	e7dc      	b.n	8013206 <LCD_ReadRectEx+0xee>
 801324c:	45bc      	cmp	ip, r7
 801324e:	dc4f      	bgt.n	80132f0 <LCD_ReadRectEx+0x1d8>
 8013250:	4661      	mov	r1, ip
 8013252:	462a      	mov	r2, r5
 8013254:	f8cd c00c 	str.w	ip, [sp, #12]
 8013258:	9811      	ldr	r0, [sp, #68]	; 0x44
 801325a:	47c0      	blx	r8
 801325c:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8013260:	f1c2 0104 	rsb	r1, r2, #4
 8013264:	fa00 f101 	lsl.w	r1, r0, r1
 8013268:	200f      	movs	r0, #15
 801326a:	fa00 f202 	lsl.w	r2, r0, r2
 801326e:	7820      	ldrb	r0, [r4, #0]
 8013270:	4002      	ands	r2, r0
 8013272:	4311      	orrs	r1, r2
 8013274:	7021      	strb	r1, [r4, #0]
 8013276:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801327a:	445c      	add	r4, fp
 801327c:	f10c 0c01 	add.w	ip, ip, #1
 8013280:	f08b 0b01 	eor.w	fp, fp, #1
 8013284:	e7e2      	b.n	801324c <LCD_ReadRectEx+0x134>
 8013286:	4273      	negs	r3, r6
 8013288:	1ba2      	subs	r2, r4, r6
 801328a:	45bc      	cmp	ip, r7
 801328c:	9305      	str	r3, [sp, #20]
 801328e:	4462      	add	r2, ip
 8013290:	dc0e      	bgt.n	80132b0 <LCD_ReadRectEx+0x198>
 8013292:	4661      	mov	r1, ip
 8013294:	462a      	mov	r2, r5
 8013296:	f8cd c00c 	str.w	ip, [sp, #12]
 801329a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801329c:	47c0      	blx	r8
 801329e:	9a05      	ldr	r2, [sp, #20]
 80132a0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80132a4:	4422      	add	r2, r4
 80132a6:	f802 000c 	strb.w	r0, [r2, ip]
 80132aa:	f10c 0c01 	add.w	ip, ip, #1
 80132ae:	e7ea      	b.n	8013286 <LCD_ReadRectEx+0x16e>
 80132b0:	4614      	mov	r4, r2
 80132b2:	e01d      	b.n	80132f0 <LCD_ReadRectEx+0x1d8>
 80132b4:	45bc      	cmp	ip, r7
 80132b6:	dc1b      	bgt.n	80132f0 <LCD_ReadRectEx+0x1d8>
 80132b8:	4661      	mov	r1, ip
 80132ba:	f8cd c00c 	str.w	ip, [sp, #12]
 80132be:	9811      	ldr	r0, [sp, #68]	; 0x44
 80132c0:	462a      	mov	r2, r5
 80132c2:	47c0      	blx	r8
 80132c4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80132c8:	f824 0b02 	strh.w	r0, [r4], #2
 80132cc:	f10c 0c01 	add.w	ip, ip, #1
 80132d0:	e7f0      	b.n	80132b4 <LCD_ReadRectEx+0x19c>
 80132d2:	45bc      	cmp	ip, r7
 80132d4:	dc0c      	bgt.n	80132f0 <LCD_ReadRectEx+0x1d8>
 80132d6:	4661      	mov	r1, ip
 80132d8:	f8cd c00c 	str.w	ip, [sp, #12]
 80132dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80132de:	462a      	mov	r2, r5
 80132e0:	47c0      	blx	r8
 80132e2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80132e6:	f844 0b04 	str.w	r0, [r4], #4
 80132ea:	f10c 0c01 	add.w	ip, ip, #1
 80132ee:	e7f0      	b.n	80132d2 <LCD_ReadRectEx+0x1ba>
 80132f0:	3501      	adds	r5, #1
 80132f2:	e741      	b.n	8013178 <LCD_ReadRectEx+0x60>
 80132f4:	b007      	add	sp, #28
 80132f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132fa:	bf00      	nop
 80132fc:	200000d8 	.word	0x200000d8

08013300 <GUI_ReadRectEx>:
 8013300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013302:	4d16      	ldr	r5, [pc, #88]	; (801335c <GUI_ReadRectEx+0x5c>)
 8013304:	9e05      	ldr	r6, [sp, #20]
 8013306:	682d      	ldr	r5, [r5, #0]
 8013308:	9c06      	ldr	r4, [sp, #24]
 801330a:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 801330e:	42b8      	cmp	r0, r7
 8013310:	bfb8      	it	lt
 8013312:	4638      	movlt	r0, r7
 8013314:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8013318:	42ba      	cmp	r2, r7
 801331a:	bfa8      	it	ge
 801331c:	463a      	movge	r2, r7
 801331e:	4282      	cmp	r2, r0
 8013320:	db1b      	blt.n	801335a <GUI_ReadRectEx+0x5a>
 8013322:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8013326:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 801332a:	42b9      	cmp	r1, r7
 801332c:	bfb8      	it	lt
 801332e:	4639      	movlt	r1, r7
 8013330:	42ab      	cmp	r3, r5
 8013332:	bfa8      	it	ge
 8013334:	462b      	movge	r3, r5
 8013336:	428b      	cmp	r3, r1
 8013338:	db0f      	blt.n	801335a <GUI_ReadRectEx+0x5a>
 801333a:	68e5      	ldr	r5, [r4, #12]
 801333c:	682d      	ldr	r5, [r5, #0]
 801333e:	f035 0704 	bics.w	r7, r5, #4
 8013342:	d105      	bne.n	8013350 <GUI_ReadRectEx+0x50>
 8013344:	9605      	str	r6, [sp, #20]
 8013346:	9406      	str	r4, [sp, #24]
 8013348:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801334c:	f7ff bee4 	b.w	8013118 <LCD_ReadRectEx>
 8013350:	6825      	ldr	r5, [r4, #0]
 8013352:	2d00      	cmp	r5, #0
 8013354:	d0f6      	beq.n	8013344 <GUI_ReadRectEx+0x44>
 8013356:	462c      	mov	r4, r5
 8013358:	e7ef      	b.n	801333a <GUI_ReadRectEx+0x3a>
 801335a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801335c:	200000d8 	.word	0x200000d8

08013360 <_OnExit>:
 8013360:	b510      	push	{r4, lr}
 8013362:	4c03      	ldr	r4, [pc, #12]	; (8013370 <_OnExit+0x10>)
 8013364:	6820      	ldr	r0, [r4, #0]
 8013366:	f7fc fce7 	bl	800fd38 <GUI_ALLOC_FreeFixedBlock>
 801336a:	2300      	movs	r3, #0
 801336c:	6023      	str	r3, [r4, #0]
 801336e:	bd10      	pop	{r4, pc}
 8013370:	2001d610 	.word	0x2001d610

08013374 <LCD_InitColors>:
 8013374:	b538      	push	{r3, r4, r5, lr}
 8013376:	4d09      	ldr	r5, [pc, #36]	; (801339c <LCD_InitColors+0x28>)
 8013378:	682c      	ldr	r4, [r5, #0]
 801337a:	b95c      	cbnz	r4, 8013394 <LCD_InitColors+0x20>
 801337c:	4b08      	ldr	r3, [pc, #32]	; (80133a0 <LCD_InitColors+0x2c>)
 801337e:	6818      	ldr	r0, [r3, #0]
 8013380:	0080      	lsls	r0, r0, #2
 8013382:	f7fc fe45 	bl	8010010 <GUI_ALLOC_GetFixedBlock>
 8013386:	6028      	str	r0, [r5, #0]
 8013388:	b130      	cbz	r0, 8013398 <LCD_InitColors+0x24>
 801338a:	4806      	ldr	r0, [pc, #24]	; (80133a4 <LCD_InitColors+0x30>)
 801338c:	4b06      	ldr	r3, [pc, #24]	; (80133a8 <LCD_InitColors+0x34>)
 801338e:	6003      	str	r3, [r0, #0]
 8013390:	f7fc f8d2 	bl	800f538 <GUI__RegisterExit>
 8013394:	2000      	movs	r0, #0
 8013396:	bd38      	pop	{r3, r4, r5, pc}
 8013398:	2001      	movs	r0, #1
 801339a:	bd38      	pop	{r3, r4, r5, pc}
 801339c:	2001d610 	.word	0x2001d610
 80133a0:	200001b8 	.word	0x200001b8
 80133a4:	2001d308 	.word	0x2001d308
 80133a8:	08013361 	.word	0x08013361

080133ac <LCD_GetpPalConvTableUncached>:
 80133ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133b0:	b320      	cbz	r0, 80133fc <LCD_GetpPalConvTableUncached+0x50>
 80133b2:	6885      	ldr	r5, [r0, #8]
 80133b4:	b1dd      	cbz	r5, 80133ee <LCD_GetpPalConvTableUncached+0x42>
 80133b6:	4e12      	ldr	r6, [pc, #72]	; (8013400 <LCD_GetpPalConvTableUncached+0x54>)
 80133b8:	6833      	ldr	r3, [r6, #0]
 80133ba:	b1db      	cbz	r3, 80133f4 <LCD_GetpPalConvTableUncached+0x48>
 80133bc:	6803      	ldr	r3, [r0, #0]
 80133be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80133c2:	dc1a      	bgt.n	80133fa <LCD_GetpPalConvTableUncached+0x4e>
 80133c4:	4a0f      	ldr	r2, [pc, #60]	; (8013404 <LCD_GetpPalConvTableUncached+0x58>)
 80133c6:	6812      	ldr	r2, [r2, #0]
 80133c8:	2400      	movs	r4, #0
 80133ca:	429a      	cmp	r2, r3
 80133cc:	bfb4      	ite	lt
 80133ce:	4690      	movlt	r8, r2
 80133d0:	4698      	movge	r8, r3
 80133d2:	4544      	cmp	r4, r8
 80133d4:	da08      	bge.n	80133e8 <LCD_GetpPalConvTableUncached+0x3c>
 80133d6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80133da:	6837      	ldr	r7, [r6, #0]
 80133dc:	f7fa fa6c 	bl	800d8b8 <LCD_Color2Index>
 80133e0:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 80133e4:	3401      	adds	r4, #1
 80133e6:	e7f4      	b.n	80133d2 <LCD_GetpPalConvTableUncached+0x26>
 80133e8:	6830      	ldr	r0, [r6, #0]
 80133ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ee:	4628      	mov	r0, r5
 80133f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133f4:	4618      	mov	r0, r3
 80133f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133fa:	2000      	movs	r0, #0
 80133fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013400:	2001d610 	.word	0x2001d610
 8013404:	200001b8 	.word	0x200001b8

08013408 <LCD_GetpPalConvTableBM>:
 8013408:	f7ff bfd0 	b.w	80133ac <LCD_GetpPalConvTableUncached>

0801340c <LCD_InitLUT>:
 801340c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013410:	f003 f971 	bl	80166f6 <LCD_GetNumLayers>
 8013414:	2400      	movs	r4, #0
 8013416:	4680      	mov	r8, r0
 8013418:	4544      	cmp	r4, r8
 801341a:	da2c      	bge.n	8013476 <LCD_InitLUT+0x6a>
 801341c:	4620      	mov	r0, r4
 801341e:	f7fb fe89 	bl	800f134 <GUI_DEVICE__GetpDriver>
 8013422:	b330      	cbz	r0, 8013472 <LCD_InitLUT+0x66>
 8013424:	4e15      	ldr	r6, [pc, #84]	; (801347c <LCD_InitLUT+0x70>)
 8013426:	6833      	ldr	r3, [r6, #0]
 8013428:	4620      	mov	r0, r4
 801342a:	f893 9011 	ldrb.w	r9, [r3, #17]
 801342e:	745c      	strb	r4, [r3, #17]
 8013430:	f7f9 fe7c 	bl	800d12c <LCD_GetBitsPerPixelEx>
 8013434:	2808      	cmp	r0, #8
 8013436:	dd03      	ble.n	8013440 <LCD_InitLUT+0x34>
 8013438:	6833      	ldr	r3, [r6, #0]
 801343a:	f883 9011 	strb.w	r9, [r3, #17]
 801343e:	e018      	b.n	8013472 <LCD_InitLUT+0x66>
 8013440:	4b0f      	ldr	r3, [pc, #60]	; (8013480 <LCD_InitLUT+0x74>)
 8013442:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013446:	691a      	ldr	r2, [r3, #16]
 8013448:	4b0e      	ldr	r3, [pc, #56]	; (8013484 <LCD_InitLUT+0x78>)
 801344a:	429a      	cmp	r2, r3
 801344c:	d0f4      	beq.n	8013438 <LCD_InitLUT+0x2c>
 801344e:	4620      	mov	r0, r4
 8013450:	f7f9 fe6f 	bl	800d132 <LCD_GetNumColorsEx>
 8013454:	2500      	movs	r5, #0
 8013456:	4682      	mov	sl, r0
 8013458:	4555      	cmp	r5, sl
 801345a:	daed      	bge.n	8013438 <LCD_InitLUT+0x2c>
 801345c:	b2ef      	uxtb	r7, r5
 801345e:	4638      	mov	r0, r7
 8013460:	f7fa fa3a 	bl	800d8d8 <LCD_Index2Color>
 8013464:	4639      	mov	r1, r7
 8013466:	4602      	mov	r2, r0
 8013468:	4620      	mov	r0, r4
 801346a:	f7f9 fe03 	bl	800d074 <LCD_SetLUTEntryEx>
 801346e:	3501      	adds	r5, #1
 8013470:	e7f2      	b.n	8013458 <LCD_InitLUT+0x4c>
 8013472:	3401      	adds	r4, #1
 8013474:	e7d0      	b.n	8013418 <LCD_InitLUT+0xc>
 8013476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801347a:	bf00      	nop
 801347c:	200000d8 	.word	0x200000d8
 8013480:	2001d510 	.word	0x2001d510
 8013484:	0801d758 	.word	0x0801d758

08013488 <LCD_AA_SetAndMask>:
 8013488:	4b02      	ldr	r3, [pc, #8]	; (8013494 <LCD_AA_SetAndMask+0xc>)
 801348a:	681a      	ldr	r2, [r3, #0]
 801348c:	6018      	str	r0, [r3, #0]
 801348e:	4610      	mov	r0, r2
 8013490:	4770      	bx	lr
 8013492:	bf00      	nop
 8013494:	200001bc 	.word	0x200001bc

08013498 <GUI__strcmp>:
 8013498:	b510      	push	{r4, lr}
 801349a:	4b09      	ldr	r3, [pc, #36]	; (80134c0 <GUI__strcmp+0x28>)
 801349c:	2800      	cmp	r0, #0
 801349e:	bf08      	it	eq
 80134a0:	4618      	moveq	r0, r3
 80134a2:	2900      	cmp	r1, #0
 80134a4:	bf08      	it	eq
 80134a6:	4619      	moveq	r1, r3
 80134a8:	2300      	movs	r3, #0
 80134aa:	5cc4      	ldrb	r4, [r0, r3]
 80134ac:	5cca      	ldrb	r2, [r1, r3]
 80134ae:	42a2      	cmp	r2, r4
 80134b0:	d104      	bne.n	80134bc <GUI__strcmp+0x24>
 80134b2:	3301      	adds	r3, #1
 80134b4:	2a00      	cmp	r2, #0
 80134b6:	d1f8      	bne.n	80134aa <GUI__strcmp+0x12>
 80134b8:	4610      	mov	r0, r2
 80134ba:	bd10      	pop	{r4, pc}
 80134bc:	2001      	movs	r0, #1
 80134be:	bd10      	pop	{r4, pc}
 80134c0:	0801d775 	.word	0x0801d775

080134c4 <GUI__strcmp_hp>:
 80134c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80134c6:	460d      	mov	r5, r1
 80134c8:	b160      	cbz	r0, 80134e4 <GUI__strcmp_hp+0x20>
 80134ca:	f7fc fc49 	bl	800fd60 <GUI_ALLOC_LockH>
 80134ce:	ac02      	add	r4, sp, #8
 80134d0:	4629      	mov	r1, r5
 80134d2:	f844 0d04 	str.w	r0, [r4, #-4]!
 80134d6:	f7ff ffdf 	bl	8013498 <GUI__strcmp>
 80134da:	4605      	mov	r5, r0
 80134dc:	4620      	mov	r0, r4
 80134de:	f7fc fc4d 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80134e2:	e000      	b.n	80134e6 <GUI__strcmp_hp+0x22>
 80134e4:	2501      	movs	r5, #1
 80134e6:	4628      	mov	r0, r5
 80134e8:	b003      	add	sp, #12
 80134ea:	bd30      	pop	{r4, r5, pc}

080134ec <_GetWordWrap>:
 80134ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80134f0:	2500      	movs	r5, #0
 80134f2:	9001      	str	r0, [sp, #4]
 80134f4:	468a      	mov	sl, r1
 80134f6:	4691      	mov	r9, r2
 80134f8:	46a8      	mov	r8, r5
 80134fa:	462e      	mov	r6, r5
 80134fc:	462c      	mov	r4, r5
 80134fe:	462f      	mov	r7, r5
 8013500:	a801      	add	r0, sp, #4
 8013502:	f000 fc21 	bl	8013d48 <GUI_UC__GetCharCodeInc>
 8013506:	2d00      	cmp	r5, #0
 8013508:	bf08      	it	eq
 801350a:	4605      	moveq	r5, r0
 801350c:	b108      	cbz	r0, 8013512 <_GetWordWrap+0x26>
 801350e:	280a      	cmp	r0, #10
 8013510:	d10b      	bne.n	801352a <_GetWordWrap+0x3e>
 8013512:	4626      	mov	r6, r4
 8013514:	2e00      	cmp	r6, #0
 8013516:	bf18      	it	ne
 8013518:	4634      	movne	r4, r6
 801351a:	f1b9 0f00 	cmp.w	r9, #0
 801351e:	d016      	beq.n	801354e <_GetWordWrap+0x62>
 8013520:	ebc8 0707 	rsb	r7, r8, r7
 8013524:	f8c9 7000 	str.w	r7, [r9]
 8013528:	e011      	b.n	801354e <_GetWordWrap+0x62>
 801352a:	2820      	cmp	r0, #32
 801352c:	d00d      	beq.n	801354a <_GetWordWrap+0x5e>
 801352e:	2d20      	cmp	r5, #32
 8013530:	bf04      	itt	eq
 8013532:	4626      	moveq	r6, r4
 8013534:	2500      	moveq	r5, #0
 8013536:	f7fc faff 	bl	800fb38 <GUI_GetCharDistX>
 801353a:	4407      	add	r7, r0
 801353c:	4557      	cmp	r7, sl
 801353e:	4680      	mov	r8, r0
 8013540:	dd01      	ble.n	8013546 <_GetWordWrap+0x5a>
 8013542:	2c00      	cmp	r4, #0
 8013544:	d1e6      	bne.n	8013514 <_GetWordWrap+0x28>
 8013546:	3401      	adds	r4, #1
 8013548:	e7da      	b.n	8013500 <_GetWordWrap+0x14>
 801354a:	4626      	mov	r6, r4
 801354c:	e7f3      	b.n	8013536 <_GetWordWrap+0x4a>
 801354e:	4620      	mov	r0, r4
 8013550:	b002      	add	sp, #8
 8013552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013556 <_GetCharWrap>:
 8013556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013558:	2400      	movs	r4, #0
 801355a:	9001      	str	r0, [sp, #4]
 801355c:	460e      	mov	r6, r1
 801355e:	4625      	mov	r5, r4
 8013560:	a801      	add	r0, sp, #4
 8013562:	f000 fbf1 	bl	8013d48 <GUI_UC__GetCharCodeInc>
 8013566:	4607      	mov	r7, r0
 8013568:	b148      	cbz	r0, 801357e <_GetCharWrap+0x28>
 801356a:	f7fc fae5 	bl	800fb38 <GUI_GetCharDistX>
 801356e:	4405      	add	r5, r0
 8013570:	b10c      	cbz	r4, 8013576 <_GetCharWrap+0x20>
 8013572:	42b5      	cmp	r5, r6
 8013574:	dc03      	bgt.n	801357e <_GetCharWrap+0x28>
 8013576:	2f0a      	cmp	r7, #10
 8013578:	d001      	beq.n	801357e <_GetCharWrap+0x28>
 801357a:	3401      	adds	r4, #1
 801357c:	e7f0      	b.n	8013560 <_GetCharWrap+0xa>
 801357e:	4620      	mov	r0, r4
 8013580:	b003      	add	sp, #12
 8013582:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013584 <_WrapGetNumCharsDisp>:
 8013584:	2a01      	cmp	r2, #1
 8013586:	b510      	push	{r4, lr}
 8013588:	d005      	beq.n	8013596 <_WrapGetNumCharsDisp+0x12>
 801358a:	2a02      	cmp	r2, #2
 801358c:	d108      	bne.n	80135a0 <_WrapGetNumCharsDisp+0x1c>
 801358e:	4b07      	ldr	r3, [pc, #28]	; (80135ac <_WrapGetNumCharsDisp+0x28>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	4798      	blx	r3
 8013594:	bd10      	pop	{r4, pc}
 8013596:	4a06      	ldr	r2, [pc, #24]	; (80135b0 <_WrapGetNumCharsDisp+0x2c>)
 8013598:	6814      	ldr	r4, [r2, #0]
 801359a:	461a      	mov	r2, r3
 801359c:	47a0      	blx	r4
 801359e:	bd10      	pop	{r4, pc}
 80135a0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80135a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135a8:	f7fc ba0c 	b.w	800f9c4 <GUI__GetLineNumChars>
 80135ac:	200001c0 	.word	0x200001c0
 80135b0:	200001c4 	.word	0x200001c4

080135b4 <GUI__WrapGetNumCharsDisp>:
 80135b4:	2300      	movs	r3, #0
 80135b6:	f7ff bfe5 	b.w	8013584 <_WrapGetNumCharsDisp>

080135ba <GUI__WrapGetNumCharsToNextLine>:
 80135ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135bc:	b085      	sub	sp, #20
 80135be:	ab03      	add	r3, sp, #12
 80135c0:	4617      	mov	r7, r2
 80135c2:	460e      	mov	r6, r1
 80135c4:	9001      	str	r0, [sp, #4]
 80135c6:	f7ff ffdd 	bl	8013584 <_WrapGetNumCharsDisp>
 80135ca:	9d01      	ldr	r5, [sp, #4]
 80135cc:	4604      	mov	r4, r0
 80135ce:	4621      	mov	r1, r4
 80135d0:	4628      	mov	r0, r5
 80135d2:	f000 fbcd 	bl	8013d70 <GUI_UC__NumChars2NumBytes>
 80135d6:	4428      	add	r0, r5
 80135d8:	ad04      	add	r5, sp, #16
 80135da:	f845 0d0c 	str.w	r0, [r5, #-12]!
 80135de:	4628      	mov	r0, r5
 80135e0:	f000 fbb2 	bl	8013d48 <GUI_UC__GetCharCodeInc>
 80135e4:	280a      	cmp	r0, #10
 80135e6:	d101      	bne.n	80135ec <GUI__WrapGetNumCharsToNextLine+0x32>
 80135e8:	3401      	adds	r4, #1
 80135ea:	e012      	b.n	8013612 <GUI__WrapGetNumCharsToNextLine+0x58>
 80135ec:	2f01      	cmp	r7, #1
 80135ee:	d110      	bne.n	8013612 <GUI__WrapGetNumCharsToNextLine+0x58>
 80135f0:	2820      	cmp	r0, #32
 80135f2:	d10e      	bne.n	8013612 <GUI__WrapGetNumCharsToNextLine+0x58>
 80135f4:	f7fc faa0 	bl	800fb38 <GUI_GetCharDistX>
 80135f8:	4607      	mov	r7, r0
 80135fa:	9b03      	ldr	r3, [sp, #12]
 80135fc:	429e      	cmp	r6, r3
 80135fe:	db08      	blt.n	8013612 <GUI__WrapGetNumCharsToNextLine+0x58>
 8013600:	443b      	add	r3, r7
 8013602:	4628      	mov	r0, r5
 8013604:	9303      	str	r3, [sp, #12]
 8013606:	f000 fb9f 	bl	8013d48 <GUI_UC__GetCharCodeInc>
 801360a:	2820      	cmp	r0, #32
 801360c:	f104 0401 	add.w	r4, r4, #1
 8013610:	d0f3      	beq.n	80135fa <GUI__WrapGetNumCharsToNextLine+0x40>
 8013612:	4620      	mov	r0, r4
 8013614:	b005      	add	sp, #20
 8013616:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013618 <GUI__WrapGetNumBytesToNextLine>:
 8013618:	b510      	push	{r4, lr}
 801361a:	4604      	mov	r4, r0
 801361c:	f7ff ffcd 	bl	80135ba <GUI__WrapGetNumCharsToNextLine>
 8013620:	4601      	mov	r1, r0
 8013622:	4620      	mov	r0, r4
 8013624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013628:	f000 bba2 	b.w	8013d70 <GUI_UC__NumChars2NumBytes>

0801362c <GUI__GetNumChars>:
 801362c:	b513      	push	{r0, r1, r4, lr}
 801362e:	9001      	str	r0, [sp, #4]
 8013630:	b130      	cbz	r0, 8013640 <GUI__GetNumChars+0x14>
 8013632:	2400      	movs	r4, #0
 8013634:	a801      	add	r0, sp, #4
 8013636:	f000 fb87 	bl	8013d48 <GUI_UC__GetCharCodeInc>
 801363a:	b110      	cbz	r0, 8013642 <GUI__GetNumChars+0x16>
 801363c:	3401      	adds	r4, #1
 801363e:	e7f9      	b.n	8013634 <GUI__GetNumChars+0x8>
 8013640:	4604      	mov	r4, r0
 8013642:	4620      	mov	r0, r4
 8013644:	b002      	add	sp, #8
 8013646:	bd10      	pop	{r4, pc}

08013648 <GUI__ExpandPixelIndicesEx>:
 8013648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801364c:	1e0c      	subs	r4, r1, #0
 801364e:	4605      	mov	r5, r0
 8013650:	f340 80b3 	ble.w	80137ba <GUI__ExpandPixelIndicesEx+0x172>
 8013654:	2a08      	cmp	r2, #8
 8013656:	685f      	ldr	r7, [r3, #4]
 8013658:	dd04      	ble.n	8013664 <GUI__ExpandPixelIndicesEx+0x1c>
 801365a:	2a10      	cmp	r2, #16
 801365c:	f340 8098 	ble.w	8013790 <GUI__ExpandPixelIndicesEx+0x148>
 8013660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013664:	3a01      	subs	r2, #1
 8013666:	2a07      	cmp	r2, #7
 8013668:	f200 80a7 	bhi.w	80137ba <GUI__ExpandPixelIndicesEx+0x172>
 801366c:	e8df f002 	tbb	[pc, r2]
 8013670:	58a52d04 	.word	0x58a52d04
 8013674:	83a5a5a5 	.word	0x83a5a5a5
 8013678:	1e66      	subs	r6, r4, #1
 801367a:	10f2      	asrs	r2, r6, #3
 801367c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8013680:	3b01      	subs	r3, #1
 8013682:	eb05 0802 	add.w	r8, r5, r2
 8013686:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 801368a:	f006 0607 	and.w	r6, r6, #7
 801368e:	f815 a002 	ldrb.w	sl, [r5, r2]
 8013692:	2580      	movs	r5, #128	; 0x80
 8013694:	4135      	asrs	r5, r6
 8013696:	f108 38ff 	add.w	r8, r8, #4294967295
 801369a:	b2ed      	uxtb	r5, r5
 801369c:	f1c6 0307 	rsb	r3, r6, #7
 80136a0:	ea0a 0005 	and.w	r0, sl, r5
 80136a4:	4118      	asrs	r0, r3
 80136a6:	47b8      	blx	r7
 80136a8:	f849 0904 	str.w	r0, [r9], #-4
 80136ac:	b936      	cbnz	r6, 80136bc <GUI__ExpandPixelIndicesEx+0x74>
 80136ae:	f898 a000 	ldrb.w	sl, [r8]
 80136b2:	2501      	movs	r5, #1
 80136b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80136b8:	2607      	movs	r6, #7
 80136ba:	e002      	b.n	80136c2 <GUI__ExpandPixelIndicesEx+0x7a>
 80136bc:	006d      	lsls	r5, r5, #1
 80136be:	3e01      	subs	r6, #1
 80136c0:	b2ed      	uxtb	r5, r5
 80136c2:	3c01      	subs	r4, #1
 80136c4:	d1ea      	bne.n	801369c <GUI__ExpandPixelIndicesEx+0x54>
 80136c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136ca:	1e66      	subs	r6, r4, #1
 80136cc:	10b2      	asrs	r2, r6, #2
 80136ce:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80136d2:	3b01      	subs	r3, #1
 80136d4:	f006 0603 	and.w	r6, r6, #3
 80136d8:	eb05 0802 	add.w	r8, r5, r2
 80136dc:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80136e0:	f815 a002 	ldrb.w	sl, [r5, r2]
 80136e4:	0073      	lsls	r3, r6, #1
 80136e6:	25c0      	movs	r5, #192	; 0xc0
 80136e8:	411d      	asrs	r5, r3
 80136ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80136ee:	b2ed      	uxtb	r5, r5
 80136f0:	0073      	lsls	r3, r6, #1
 80136f2:	f1c3 0306 	rsb	r3, r3, #6
 80136f6:	ea0a 0005 	and.w	r0, sl, r5
 80136fa:	4118      	asrs	r0, r3
 80136fc:	47b8      	blx	r7
 80136fe:	f849 0904 	str.w	r0, [r9], #-4
 8013702:	b936      	cbnz	r6, 8013712 <GUI__ExpandPixelIndicesEx+0xca>
 8013704:	2503      	movs	r5, #3
 8013706:	f898 a000 	ldrb.w	sl, [r8]
 801370a:	462e      	mov	r6, r5
 801370c:	f108 38ff 	add.w	r8, r8, #4294967295
 8013710:	e002      	b.n	8013718 <GUI__ExpandPixelIndicesEx+0xd0>
 8013712:	00ad      	lsls	r5, r5, #2
 8013714:	3e01      	subs	r6, #1
 8013716:	b2ed      	uxtb	r5, r5
 8013718:	3c01      	subs	r4, #1
 801371a:	d1e9      	bne.n	80136f0 <GUI__ExpandPixelIndicesEx+0xa8>
 801371c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013720:	1e66      	subs	r6, r4, #1
 8013722:	1072      	asrs	r2, r6, #1
 8013724:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8013728:	3b01      	subs	r3, #1
 801372a:	f006 0601 	and.w	r6, r6, #1
 801372e:	eb05 0802 	add.w	r8, r5, r2
 8013732:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8013736:	f815 a002 	ldrb.w	sl, [r5, r2]
 801373a:	00b3      	lsls	r3, r6, #2
 801373c:	25f0      	movs	r5, #240	; 0xf0
 801373e:	411d      	asrs	r5, r3
 8013740:	f108 38ff 	add.w	r8, r8, #4294967295
 8013744:	b2ed      	uxtb	r5, r5
 8013746:	00b3      	lsls	r3, r6, #2
 8013748:	f1c3 0304 	rsb	r3, r3, #4
 801374c:	ea0a 0005 	and.w	r0, sl, r5
 8013750:	4118      	asrs	r0, r3
 8013752:	47b8      	blx	r7
 8013754:	f849 0904 	str.w	r0, [r9], #-4
 8013758:	b936      	cbnz	r6, 8013768 <GUI__ExpandPixelIndicesEx+0x120>
 801375a:	f898 a000 	ldrb.w	sl, [r8]
 801375e:	250f      	movs	r5, #15
 8013760:	f108 38ff 	add.w	r8, r8, #4294967295
 8013764:	2601      	movs	r6, #1
 8013766:	e002      	b.n	801376e <GUI__ExpandPixelIndicesEx+0x126>
 8013768:	012d      	lsls	r5, r5, #4
 801376a:	b2ed      	uxtb	r5, r5
 801376c:	2600      	movs	r6, #0
 801376e:	3c01      	subs	r4, #1
 8013770:	d1e9      	bne.n	8013746 <GUI__ExpandPixelIndicesEx+0xfe>
 8013772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013776:	192e      	adds	r6, r5, r4
 8013778:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801377c:	1b34      	subs	r4, r6, r4
 801377e:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8013782:	47b8      	blx	r7
 8013784:	42a6      	cmp	r6, r4
 8013786:	f845 0d04 	str.w	r0, [r5, #-4]!
 801378a:	d1f8      	bne.n	801377e <GUI__ExpandPixelIndicesEx+0x136>
 801378c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013790:	695e      	ldr	r6, [r3, #20]
 8013792:	b12e      	cbz	r6, 80137a0 <GUI__ExpandPixelIndicesEx+0x158>
 8013794:	4629      	mov	r1, r5
 8013796:	4622      	mov	r2, r4
 8013798:	2302      	movs	r3, #2
 801379a:	47b0      	blx	r6
 801379c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137a0:	0064      	lsls	r4, r4, #1
 80137a2:	4425      	add	r5, r4
 80137a4:	192e      	adds	r6, r5, r4
 80137a6:	1b2c      	subs	r4, r5, r4
 80137a8:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 80137ac:	47b8      	blx	r7
 80137ae:	42a5      	cmp	r5, r4
 80137b0:	f846 0d04 	str.w	r0, [r6, #-4]!
 80137b4:	d1f8      	bne.n	80137a8 <GUI__ExpandPixelIndicesEx+0x160>
 80137b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080137be <_GetTwinArcPara>:
 80137be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137c2:	fb01 f901 	mul.w	r9, r1, r1
 80137c6:	1e47      	subs	r7, r0, #1
 80137c8:	4604      	mov	r4, r0
 80137ca:	4340      	muls	r0, r0
 80137cc:	ebc9 0000 	rsb	r0, r9, r0
 80137d0:	460d      	mov	r5, r1
 80137d2:	4692      	mov	sl, r2
 80137d4:	4698      	mov	r8, r3
 80137d6:	9e08      	ldr	r6, [sp, #32]
 80137d8:	f002 ffac 	bl	8016734 <GUI__sqrt32>
 80137dc:	42bd      	cmp	r5, r7
 80137de:	f8ca 0000 	str.w	r0, [sl]
 80137e2:	da10      	bge.n	8013806 <_GetTwinArcPara+0x48>
 80137e4:	fb07 f007 	mul.w	r0, r7, r7
 80137e8:	ebc9 0000 	rsb	r0, r9, r0
 80137ec:	f002 ffa2 	bl	8016734 <GUI__sqrt32>
 80137f0:	3c02      	subs	r4, #2
 80137f2:	42a5      	cmp	r5, r4
 80137f4:	f8c8 0000 	str.w	r0, [r8]
 80137f8:	da03      	bge.n	8013802 <_GetTwinArcPara+0x44>
 80137fa:	3801      	subs	r0, #1
 80137fc:	6030      	str	r0, [r6, #0]
 80137fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013802:	2300      	movs	r3, #0
 8013804:	e002      	b.n	801380c <_GetTwinArcPara+0x4e>
 8013806:	2300      	movs	r3, #0
 8013808:	f8c8 3000 	str.w	r3, [r8]
 801380c:	6033      	str	r3, [r6, #0]
 801380e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08013814 <GUI__DrawTwinArc4>:
 8013814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013818:	4d76      	ldr	r5, [pc, #472]	; (80139f4 <GUI__DrawTwinArc4+0x1e0>)
 801381a:	682d      	ldr	r5, [r5, #0]
 801381c:	6cee      	ldr	r6, [r5, #76]	; 0x4c
 801381e:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8013820:	b08f      	sub	sp, #60	; 0x3c
 8013822:	4430      	add	r0, r6
 8013824:	4439      	add	r1, r7
 8013826:	9005      	str	r0, [sp, #20]
 8013828:	4416      	add	r6, r2
 801382a:	441f      	add	r7, r3
 801382c:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8013830:	a80c      	add	r0, sp, #48	; 0x30
 8013832:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8013834:	9106      	str	r1, [sp, #24]
 8013836:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 801383a:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 801383e:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
 8013842:	f7f6 ffdb 	bl	800a7fc <WM__InitIVRSearch>
 8013846:	2800      	cmp	r0, #0
 8013848:	f000 80d0 	beq.w	80139ec <GUI__DrawTwinArc4+0x1d8>
 801384c:	2c00      	cmp	r4, #0
 801384e:	dc02      	bgt.n	8013856 <GUI__DrawTwinArc4+0x42>
 8013850:	f7f6 ff12 	bl	800a678 <WM__GetNextIVR>
 8013854:	e7f7      	b.n	8013846 <GUI__DrawTwinArc4+0x32>
 8013856:	9819      	ldr	r0, [sp, #100]	; 0x64
 8013858:	f7fb f96e 	bl	800eb38 <GUI_SetColor>
 801385c:	9b06      	ldr	r3, [sp, #24]
 801385e:	4423      	add	r3, r4
 8013860:	9307      	str	r3, [sp, #28]
 8013862:	9b06      	ldr	r3, [sp, #24]
 8013864:	1e65      	subs	r5, r4, #1
 8013866:	f103 0801 	add.w	r8, r3, #1
 801386a:	2d00      	cmp	r5, #0
 801386c:	d037      	beq.n	80138de <GUI__DrawTwinArc4+0xca>
 801386e:	ab0b      	add	r3, sp, #44	; 0x2c
 8013870:	4629      	mov	r1, r5
 8013872:	9300      	str	r3, [sp, #0]
 8013874:	4620      	mov	r0, r4
 8013876:	aa09      	add	r2, sp, #36	; 0x24
 8013878:	ab0a      	add	r3, sp, #40	; 0x28
 801387a:	f7ff ffa0 	bl	80137be <_GetTwinArcPara>
 801387e:	9b05      	ldr	r3, [sp, #20]
 8013880:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013884:	4423      	add	r3, r4
 8013886:	ebc1 0c03 	rsb	ip, r1, r3
 801388a:	ebc4 0b06 	rsb	fp, r4, r6
 801388e:	1a9b      	subs	r3, r3, r2
 8013890:	3b01      	subs	r3, #1
 8013892:	eb0b 0901 	add.w	r9, fp, r1
 8013896:	4493      	add	fp, r2
 8013898:	4660      	mov	r0, ip
 801389a:	461a      	mov	r2, r3
 801389c:	4641      	mov	r1, r8
 801389e:	f10b 0b01 	add.w	fp, fp, #1
 80138a2:	9303      	str	r3, [sp, #12]
 80138a4:	f8cd c010 	str.w	ip, [sp, #16]
 80138a8:	f7f9 fd4c 	bl	800d344 <LCD_DrawHLine>
 80138ac:	4641      	mov	r1, r8
 80138ae:	4658      	mov	r0, fp
 80138b0:	464a      	mov	r2, r9
 80138b2:	f7f9 fd47 	bl	800d344 <LCD_DrawHLine>
 80138b6:	ebc4 0a07 	rsb	sl, r4, r7
 80138ba:	f8dd c010 	ldr.w	ip, [sp, #16]
 80138be:	9b03      	ldr	r3, [sp, #12]
 80138c0:	44aa      	add	sl, r5
 80138c2:	4660      	mov	r0, ip
 80138c4:	461a      	mov	r2, r3
 80138c6:	4651      	mov	r1, sl
 80138c8:	f7f9 fd3c 	bl	800d344 <LCD_DrawHLine>
 80138cc:	4658      	mov	r0, fp
 80138ce:	4651      	mov	r1, sl
 80138d0:	464a      	mov	r2, r9
 80138d2:	f7f9 fd37 	bl	800d344 <LCD_DrawHLine>
 80138d6:	3d01      	subs	r5, #1
 80138d8:	f108 0801 	add.w	r8, r8, #1
 80138dc:	e7c5      	b.n	801386a <GUI__DrawTwinArc4+0x56>
 80138de:	2c01      	cmp	r4, #1
 80138e0:	d0b6      	beq.n	8013850 <GUI__DrawTwinArc4+0x3c>
 80138e2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80138e4:	f7fb f928 	bl	800eb38 <GUI_SetColor>
 80138e8:	9b07      	ldr	r3, [sp, #28]
 80138ea:	f1c4 0802 	rsb	r8, r4, #2
 80138ee:	1ea5      	subs	r5, r4, #2
 80138f0:	4498      	add	r8, r3
 80138f2:	2d00      	cmp	r5, #0
 80138f4:	d037      	beq.n	8013966 <GUI__DrawTwinArc4+0x152>
 80138f6:	ab0b      	add	r3, sp, #44	; 0x2c
 80138f8:	4629      	mov	r1, r5
 80138fa:	9300      	str	r3, [sp, #0]
 80138fc:	4620      	mov	r0, r4
 80138fe:	aa09      	add	r2, sp, #36	; 0x24
 8013900:	ab0a      	add	r3, sp, #40	; 0x28
 8013902:	f7ff ff5c 	bl	80137be <_GetTwinArcPara>
 8013906:	9b05      	ldr	r3, [sp, #20]
 8013908:	990a      	ldr	r1, [sp, #40]	; 0x28
 801390a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801390c:	4423      	add	r3, r4
 801390e:	ebc1 0c03 	rsb	ip, r1, r3
 8013912:	ebc4 0b06 	rsb	fp, r4, r6
 8013916:	1a9b      	subs	r3, r3, r2
 8013918:	3b01      	subs	r3, #1
 801391a:	eb0b 0901 	add.w	r9, fp, r1
 801391e:	4493      	add	fp, r2
 8013920:	4660      	mov	r0, ip
 8013922:	461a      	mov	r2, r3
 8013924:	4641      	mov	r1, r8
 8013926:	f10b 0b01 	add.w	fp, fp, #1
 801392a:	9303      	str	r3, [sp, #12]
 801392c:	f8cd c010 	str.w	ip, [sp, #16]
 8013930:	f7f9 fd08 	bl	800d344 <LCD_DrawHLine>
 8013934:	4641      	mov	r1, r8
 8013936:	4658      	mov	r0, fp
 8013938:	464a      	mov	r2, r9
 801393a:	f7f9 fd03 	bl	800d344 <LCD_DrawHLine>
 801393e:	ebc4 0a07 	rsb	sl, r4, r7
 8013942:	f8dd c010 	ldr.w	ip, [sp, #16]
 8013946:	9b03      	ldr	r3, [sp, #12]
 8013948:	44aa      	add	sl, r5
 801394a:	4660      	mov	r0, ip
 801394c:	461a      	mov	r2, r3
 801394e:	4651      	mov	r1, sl
 8013950:	f7f9 fcf8 	bl	800d344 <LCD_DrawHLine>
 8013954:	4658      	mov	r0, fp
 8013956:	4651      	mov	r1, sl
 8013958:	464a      	mov	r2, r9
 801395a:	f7f9 fcf3 	bl	800d344 <LCD_DrawHLine>
 801395e:	3d01      	subs	r5, #1
 8013960:	f108 0801 	add.w	r8, r8, #1
 8013964:	e7c5      	b.n	80138f2 <GUI__DrawTwinArc4+0xde>
 8013966:	2c02      	cmp	r4, #2
 8013968:	f43f af72 	beq.w	8013850 <GUI__DrawTwinArc4+0x3c>
 801396c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801396e:	f7fb f8e3 	bl	800eb38 <GUI_SetColor>
 8013972:	9b07      	ldr	r3, [sp, #28]
 8013974:	f1c4 0803 	rsb	r8, r4, #3
 8013978:	1ee5      	subs	r5, r4, #3
 801397a:	4498      	add	r8, r3
 801397c:	2d00      	cmp	r5, #0
 801397e:	f43f af67 	beq.w	8013850 <GUI__DrawTwinArc4+0x3c>
 8013982:	ab0b      	add	r3, sp, #44	; 0x2c
 8013984:	4629      	mov	r1, r5
 8013986:	9300      	str	r3, [sp, #0]
 8013988:	4620      	mov	r0, r4
 801398a:	aa09      	add	r2, sp, #36	; 0x24
 801398c:	ab0a      	add	r3, sp, #40	; 0x28
 801398e:	f7ff ff16 	bl	80137be <_GetTwinArcPara>
 8013992:	9b05      	ldr	r3, [sp, #20]
 8013994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013996:	4423      	add	r3, r4
 8013998:	ebc2 0c03 	rsb	ip, r2, r3
 801399c:	ebc4 0b06 	rsb	fp, r4, r6
 80139a0:	3b01      	subs	r3, #1
 80139a2:	eb0b 0902 	add.w	r9, fp, r2
 80139a6:	4660      	mov	r0, ip
 80139a8:	461a      	mov	r2, r3
 80139aa:	4641      	mov	r1, r8
 80139ac:	f10b 0b01 	add.w	fp, fp, #1
 80139b0:	9303      	str	r3, [sp, #12]
 80139b2:	f8cd c010 	str.w	ip, [sp, #16]
 80139b6:	f7f9 fcc5 	bl	800d344 <LCD_DrawHLine>
 80139ba:	4641      	mov	r1, r8
 80139bc:	4658      	mov	r0, fp
 80139be:	464a      	mov	r2, r9
 80139c0:	f7f9 fcc0 	bl	800d344 <LCD_DrawHLine>
 80139c4:	ebc4 0a07 	rsb	sl, r4, r7
 80139c8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80139cc:	9b03      	ldr	r3, [sp, #12]
 80139ce:	44aa      	add	sl, r5
 80139d0:	4660      	mov	r0, ip
 80139d2:	461a      	mov	r2, r3
 80139d4:	4651      	mov	r1, sl
 80139d6:	f7f9 fcb5 	bl	800d344 <LCD_DrawHLine>
 80139da:	4658      	mov	r0, fp
 80139dc:	4651      	mov	r1, sl
 80139de:	464a      	mov	r2, r9
 80139e0:	f7f9 fcb0 	bl	800d344 <LCD_DrawHLine>
 80139e4:	3d01      	subs	r5, #1
 80139e6:	f108 0801 	add.w	r8, r8, #1
 80139ea:	e7c7      	b.n	801397c <GUI__DrawTwinArc4+0x168>
 80139ec:	b00f      	add	sp, #60	; 0x3c
 80139ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139f2:	bf00      	nop
 80139f4:	200000d8 	.word	0x200000d8

080139f8 <GUI__DivideRound32>:
 80139f8:	b149      	cbz	r1, 8013a0e <GUI__DivideRound32+0x16>
 80139fa:	2800      	cmp	r0, #0
 80139fc:	ea4f 0361 	mov.w	r3, r1, asr #1
 8013a00:	bfb4      	ite	lt
 8013a02:	ebc3 0000 	rsblt	r0, r3, r0
 8013a06:	18c0      	addge	r0, r0, r3
 8013a08:	fb90 f0f1 	sdiv	r0, r0, r1
 8013a0c:	4770      	bx	lr
 8013a0e:	4608      	mov	r0, r1
 8013a10:	4770      	bx	lr

08013a12 <GUI__CompactPixelIndices>:
 8013a12:	2a08      	cmp	r2, #8
 8013a14:	b510      	push	{r4, lr}
 8013a16:	dd0e      	ble.n	8013a36 <GUI__CompactPixelIndices+0x24>
 8013a18:	2a10      	cmp	r2, #16
 8013a1a:	dc0a      	bgt.n	8013a32 <GUI__CompactPixelIndices+0x20>
 8013a1c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8013a20:	4603      	mov	r3, r0
 8013a22:	f850 2b04 	ldr.w	r2, [r0], #4
 8013a26:	f823 2b02 	strh.w	r2, [r3], #2
 8013a2a:	428b      	cmp	r3, r1
 8013a2c:	d1f9      	bne.n	8013a22 <GUI__CompactPixelIndices+0x10>
 8013a2e:	2001      	movs	r0, #1
 8013a30:	bd10      	pop	{r4, pc}
 8013a32:	2000      	movs	r0, #0
 8013a34:	bd10      	pop	{r4, pc}
 8013a36:	2a02      	cmp	r2, #2
 8013a38:	d06d      	beq.n	8013b16 <GUI__CompactPixelIndices+0x104>
 8013a3a:	2a04      	cmp	r2, #4
 8013a3c:	d054      	beq.n	8013ae8 <GUI__CompactPixelIndices+0xd6>
 8013a3e:	2a01      	cmp	r2, #1
 8013a40:	f040 8095 	bne.w	8013b6e <GUI__CompactPixelIndices+0x15c>
 8013a44:	4604      	mov	r4, r0
 8013a46:	6803      	ldr	r3, [r0, #0]
 8013a48:	2901      	cmp	r1, #1
 8013a4a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8013a4e:	b2db      	uxtb	r3, r3
 8013a50:	d047      	beq.n	8013ae2 <GUI__CompactPixelIndices+0xd0>
 8013a52:	6842      	ldr	r2, [r0, #4]
 8013a54:	2902      	cmp	r1, #2
 8013a56:	f002 0201 	and.w	r2, r2, #1
 8013a5a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8013a5e:	d102      	bne.n	8013a66 <GUI__CompactPixelIndices+0x54>
 8013a60:	f100 0208 	add.w	r2, r0, #8
 8013a64:	e03e      	b.n	8013ae4 <GUI__CompactPixelIndices+0xd2>
 8013a66:	6882      	ldr	r2, [r0, #8]
 8013a68:	2903      	cmp	r1, #3
 8013a6a:	f002 0201 	and.w	r2, r2, #1
 8013a6e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8013a72:	d102      	bne.n	8013a7a <GUI__CompactPixelIndices+0x68>
 8013a74:	f100 020c 	add.w	r2, r0, #12
 8013a78:	e034      	b.n	8013ae4 <GUI__CompactPixelIndices+0xd2>
 8013a7a:	68c2      	ldr	r2, [r0, #12]
 8013a7c:	2904      	cmp	r1, #4
 8013a7e:	f002 0201 	and.w	r2, r2, #1
 8013a82:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8013a86:	d102      	bne.n	8013a8e <GUI__CompactPixelIndices+0x7c>
 8013a88:	f100 0210 	add.w	r2, r0, #16
 8013a8c:	e02a      	b.n	8013ae4 <GUI__CompactPixelIndices+0xd2>
 8013a8e:	6902      	ldr	r2, [r0, #16]
 8013a90:	2905      	cmp	r1, #5
 8013a92:	f002 0201 	and.w	r2, r2, #1
 8013a96:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8013a9a:	d102      	bne.n	8013aa2 <GUI__CompactPixelIndices+0x90>
 8013a9c:	f100 0214 	add.w	r2, r0, #20
 8013aa0:	e020      	b.n	8013ae4 <GUI__CompactPixelIndices+0xd2>
 8013aa2:	6942      	ldr	r2, [r0, #20]
 8013aa4:	2906      	cmp	r1, #6
 8013aa6:	f002 0201 	and.w	r2, r2, #1
 8013aaa:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8013aae:	d102      	bne.n	8013ab6 <GUI__CompactPixelIndices+0xa4>
 8013ab0:	f100 0218 	add.w	r2, r0, #24
 8013ab4:	e016      	b.n	8013ae4 <GUI__CompactPixelIndices+0xd2>
 8013ab6:	6982      	ldr	r2, [r0, #24]
 8013ab8:	3907      	subs	r1, #7
 8013aba:	f002 0201 	and.w	r2, r2, #1
 8013abe:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8013ac2:	d102      	bne.n	8013aca <GUI__CompactPixelIndices+0xb8>
 8013ac4:	f100 021c 	add.w	r2, r0, #28
 8013ac8:	e005      	b.n	8013ad6 <GUI__CompactPixelIndices+0xc4>
 8013aca:	f100 0220 	add.w	r2, r0, #32
 8013ace:	69c0      	ldr	r0, [r0, #28]
 8013ad0:	f000 0001 	and.w	r0, r0, #1
 8013ad4:	4303      	orrs	r3, r0
 8013ad6:	f804 3b01 	strb.w	r3, [r4], #1
 8013ada:	2900      	cmp	r1, #0
 8013adc:	d0a7      	beq.n	8013a2e <GUI__CompactPixelIndices+0x1c>
 8013ade:	4610      	mov	r0, r2
 8013ae0:	e7b1      	b.n	8013a46 <GUI__CompactPixelIndices+0x34>
 8013ae2:	1d02      	adds	r2, r0, #4
 8013ae4:	2100      	movs	r1, #0
 8013ae6:	e7f6      	b.n	8013ad6 <GUI__CompactPixelIndices+0xc4>
 8013ae8:	4602      	mov	r2, r0
 8013aea:	6803      	ldr	r3, [r0, #0]
 8013aec:	2901      	cmp	r1, #1
 8013aee:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8013af2:	b2db      	uxtb	r3, r3
 8013af4:	d102      	bne.n	8013afc <GUI__CompactPixelIndices+0xea>
 8013af6:	1d04      	adds	r4, r0, #4
 8013af8:	2100      	movs	r1, #0
 8013afa:	e006      	b.n	8013b0a <GUI__CompactPixelIndices+0xf8>
 8013afc:	f100 0408 	add.w	r4, r0, #8
 8013b00:	6840      	ldr	r0, [r0, #4]
 8013b02:	f000 000f 	and.w	r0, r0, #15
 8013b06:	4303      	orrs	r3, r0
 8013b08:	3902      	subs	r1, #2
 8013b0a:	f802 3b01 	strb.w	r3, [r2], #1
 8013b0e:	2900      	cmp	r1, #0
 8013b10:	d08d      	beq.n	8013a2e <GUI__CompactPixelIndices+0x1c>
 8013b12:	4620      	mov	r0, r4
 8013b14:	e7e9      	b.n	8013aea <GUI__CompactPixelIndices+0xd8>
 8013b16:	4604      	mov	r4, r0
 8013b18:	6803      	ldr	r3, [r0, #0]
 8013b1a:	2901      	cmp	r1, #1
 8013b1c:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8013b20:	b2db      	uxtb	r3, r3
 8013b22:	d021      	beq.n	8013b68 <GUI__CompactPixelIndices+0x156>
 8013b24:	6842      	ldr	r2, [r0, #4]
 8013b26:	2902      	cmp	r1, #2
 8013b28:	f002 0203 	and.w	r2, r2, #3
 8013b2c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8013b30:	d102      	bne.n	8013b38 <GUI__CompactPixelIndices+0x126>
 8013b32:	f100 0208 	add.w	r2, r0, #8
 8013b36:	e018      	b.n	8013b6a <GUI__CompactPixelIndices+0x158>
 8013b38:	6882      	ldr	r2, [r0, #8]
 8013b3a:	2903      	cmp	r1, #3
 8013b3c:	f002 0203 	and.w	r2, r2, #3
 8013b40:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8013b44:	d102      	bne.n	8013b4c <GUI__CompactPixelIndices+0x13a>
 8013b46:	f100 020c 	add.w	r2, r0, #12
 8013b4a:	e00e      	b.n	8013b6a <GUI__CompactPixelIndices+0x158>
 8013b4c:	f100 0210 	add.w	r2, r0, #16
 8013b50:	68c0      	ldr	r0, [r0, #12]
 8013b52:	f000 0003 	and.w	r0, r0, #3
 8013b56:	4303      	orrs	r3, r0
 8013b58:	3904      	subs	r1, #4
 8013b5a:	f804 3b01 	strb.w	r3, [r4], #1
 8013b5e:	2900      	cmp	r1, #0
 8013b60:	f43f af65 	beq.w	8013a2e <GUI__CompactPixelIndices+0x1c>
 8013b64:	4610      	mov	r0, r2
 8013b66:	e7d7      	b.n	8013b18 <GUI__CompactPixelIndices+0x106>
 8013b68:	1d02      	adds	r2, r0, #4
 8013b6a:	2100      	movs	r1, #0
 8013b6c:	e7f5      	b.n	8013b5a <GUI__CompactPixelIndices+0x148>
 8013b6e:	2300      	movs	r3, #0
 8013b70:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8013b74:	54c2      	strb	r2, [r0, r3]
 8013b76:	3301      	adds	r3, #1
 8013b78:	428b      	cmp	r3, r1
 8013b7a:	d1f9      	bne.n	8013b70 <GUI__CompactPixelIndices+0x15e>
 8013b7c:	e757      	b.n	8013a2e <GUI__CompactPixelIndices+0x1c>

08013b7e <GUI__ConvertColor2Index>:
 8013b7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b82:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013b86:	681e      	ldr	r6, [r3, #0]
 8013b88:	f1b8 0f00 	cmp.w	r8, #0
 8013b8c:	bf08      	it	eq
 8013b8e:	4680      	moveq	r8, r0
 8013b90:	2a08      	cmp	r2, #8
 8013b92:	4604      	mov	r4, r0
 8013b94:	460d      	mov	r5, r1
 8013b96:	dd05      	ble.n	8013ba4 <GUI__ConvertColor2Index+0x26>
 8013b98:	2a10      	cmp	r2, #16
 8013b9a:	f340 80b6 	ble.w	8013d0a <GUI__ConvertColor2Index+0x18c>
 8013b9e:	2000      	movs	r0, #0
 8013ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ba4:	3a01      	subs	r2, #1
 8013ba6:	2a07      	cmp	r2, #7
 8013ba8:	f200 80a4 	bhi.w	8013cf4 <GUI__ConvertColor2Index+0x176>
 8013bac:	e8df f002 	tbb	[pc, r2]
 8013bb0:	87a26111 	.word	0x87a26111
 8013bb4:	92a2a2a2 	.word	0x92a2a2a2
 8013bb8:	69e0      	ldr	r0, [r4, #28]
 8013bba:	47b0      	blx	r6
 8013bbc:	4338      	orrs	r0, r7
 8013bbe:	f104 0920 	add.w	r9, r4, #32
 8013bc2:	b2c7      	uxtb	r7, r0
 8013bc4:	3d08      	subs	r5, #8
 8013bc6:	f808 7b01 	strb.w	r7, [r8], #1
 8013bca:	2d00      	cmp	r5, #0
 8013bcc:	f000 8092 	beq.w	8013cf4 <GUI__ConvertColor2Index+0x176>
 8013bd0:	464c      	mov	r4, r9
 8013bd2:	6820      	ldr	r0, [r4, #0]
 8013bd4:	47b0      	blx	r6
 8013bd6:	2d01      	cmp	r5, #1
 8013bd8:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8013bdc:	b2c7      	uxtb	r7, r0
 8013bde:	f000 808c 	beq.w	8013cfa <GUI__ConvertColor2Index+0x17c>
 8013be2:	6860      	ldr	r0, [r4, #4]
 8013be4:	47b0      	blx	r6
 8013be6:	2d02      	cmp	r5, #2
 8013be8:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 8013bec:	b2c7      	uxtb	r7, r0
 8013bee:	d102      	bne.n	8013bf6 <GUI__ConvertColor2Index+0x78>
 8013bf0:	f104 0908 	add.w	r9, r4, #8
 8013bf4:	e083      	b.n	8013cfe <GUI__ConvertColor2Index+0x180>
 8013bf6:	68a0      	ldr	r0, [r4, #8]
 8013bf8:	47b0      	blx	r6
 8013bfa:	2d03      	cmp	r5, #3
 8013bfc:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 8013c00:	b2c7      	uxtb	r7, r0
 8013c02:	d102      	bne.n	8013c0a <GUI__ConvertColor2Index+0x8c>
 8013c04:	f104 090c 	add.w	r9, r4, #12
 8013c08:	e079      	b.n	8013cfe <GUI__ConvertColor2Index+0x180>
 8013c0a:	68e0      	ldr	r0, [r4, #12]
 8013c0c:	47b0      	blx	r6
 8013c0e:	2d04      	cmp	r5, #4
 8013c10:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8013c14:	b2c7      	uxtb	r7, r0
 8013c16:	d102      	bne.n	8013c1e <GUI__ConvertColor2Index+0xa0>
 8013c18:	f104 0910 	add.w	r9, r4, #16
 8013c1c:	e06f      	b.n	8013cfe <GUI__ConvertColor2Index+0x180>
 8013c1e:	6920      	ldr	r0, [r4, #16]
 8013c20:	47b0      	blx	r6
 8013c22:	2d05      	cmp	r5, #5
 8013c24:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8013c28:	b2c7      	uxtb	r7, r0
 8013c2a:	d102      	bne.n	8013c32 <GUI__ConvertColor2Index+0xb4>
 8013c2c:	f104 0914 	add.w	r9, r4, #20
 8013c30:	e065      	b.n	8013cfe <GUI__ConvertColor2Index+0x180>
 8013c32:	6960      	ldr	r0, [r4, #20]
 8013c34:	47b0      	blx	r6
 8013c36:	2d06      	cmp	r5, #6
 8013c38:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8013c3c:	b2c7      	uxtb	r7, r0
 8013c3e:	d102      	bne.n	8013c46 <GUI__ConvertColor2Index+0xc8>
 8013c40:	f104 0918 	add.w	r9, r4, #24
 8013c44:	e05b      	b.n	8013cfe <GUI__ConvertColor2Index+0x180>
 8013c46:	69a0      	ldr	r0, [r4, #24]
 8013c48:	47b0      	blx	r6
 8013c4a:	2d07      	cmp	r5, #7
 8013c4c:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 8013c50:	b2c7      	uxtb	r7, r0
 8013c52:	d1b1      	bne.n	8013bb8 <GUI__ConvertColor2Index+0x3a>
 8013c54:	f104 091c 	add.w	r9, r4, #28
 8013c58:	e051      	b.n	8013cfe <GUI__ConvertColor2Index+0x180>
 8013c5a:	68e0      	ldr	r0, [r4, #12]
 8013c5c:	47b0      	blx	r6
 8013c5e:	4338      	orrs	r0, r7
 8013c60:	f104 0910 	add.w	r9, r4, #16
 8013c64:	b2c7      	uxtb	r7, r0
 8013c66:	3d04      	subs	r5, #4
 8013c68:	f808 7b01 	strb.w	r7, [r8], #1
 8013c6c:	2d00      	cmp	r5, #0
 8013c6e:	d041      	beq.n	8013cf4 <GUI__ConvertColor2Index+0x176>
 8013c70:	464c      	mov	r4, r9
 8013c72:	6820      	ldr	r0, [r4, #0]
 8013c74:	47b0      	blx	r6
 8013c76:	2d01      	cmp	r5, #1
 8013c78:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8013c7c:	b2c7      	uxtb	r7, r0
 8013c7e:	d040      	beq.n	8013d02 <GUI__ConvertColor2Index+0x184>
 8013c80:	6860      	ldr	r0, [r4, #4]
 8013c82:	47b0      	blx	r6
 8013c84:	2d02      	cmp	r5, #2
 8013c86:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8013c8a:	b2c7      	uxtb	r7, r0
 8013c8c:	d102      	bne.n	8013c94 <GUI__ConvertColor2Index+0x116>
 8013c8e:	f104 0908 	add.w	r9, r4, #8
 8013c92:	e038      	b.n	8013d06 <GUI__ConvertColor2Index+0x188>
 8013c94:	68a0      	ldr	r0, [r4, #8]
 8013c96:	47b0      	blx	r6
 8013c98:	2d03      	cmp	r5, #3
 8013c9a:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8013c9e:	b2c7      	uxtb	r7, r0
 8013ca0:	d1db      	bne.n	8013c5a <GUI__ConvertColor2Index+0xdc>
 8013ca2:	f104 090c 	add.w	r9, r4, #12
 8013ca6:	e02e      	b.n	8013d06 <GUI__ConvertColor2Index+0x188>
 8013ca8:	6860      	ldr	r0, [r4, #4]
 8013caa:	47b0      	blx	r6
 8013cac:	4338      	orrs	r0, r7
 8013cae:	f104 0908 	add.w	r9, r4, #8
 8013cb2:	b2c7      	uxtb	r7, r0
 8013cb4:	3d02      	subs	r5, #2
 8013cb6:	f808 7b01 	strb.w	r7, [r8], #1
 8013cba:	b1dd      	cbz	r5, 8013cf4 <GUI__ConvertColor2Index+0x176>
 8013cbc:	464c      	mov	r4, r9
 8013cbe:	6820      	ldr	r0, [r4, #0]
 8013cc0:	47b0      	blx	r6
 8013cc2:	2d01      	cmp	r5, #1
 8013cc4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8013cc8:	b2c7      	uxtb	r7, r0
 8013cca:	d1ed      	bne.n	8013ca8 <GUI__ConvertColor2Index+0x12a>
 8013ccc:	f104 0904 	add.w	r9, r4, #4
 8013cd0:	2500      	movs	r5, #0
 8013cd2:	e7f0      	b.n	8013cb6 <GUI__ConvertColor2Index+0x138>
 8013cd4:	691f      	ldr	r7, [r3, #16]
 8013cd6:	b12f      	cbz	r7, 8013ce4 <GUI__ConvertColor2Index+0x166>
 8013cd8:	4620      	mov	r0, r4
 8013cda:	4641      	mov	r1, r8
 8013cdc:	462a      	mov	r2, r5
 8013cde:	2301      	movs	r3, #1
 8013ce0:	47b8      	blx	r7
 8013ce2:	e007      	b.n	8013cf4 <GUI__ConvertColor2Index+0x176>
 8013ce4:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8013ce8:	47b0      	blx	r6
 8013cea:	f808 0007 	strb.w	r0, [r8, r7]
 8013cee:	3701      	adds	r7, #1
 8013cf0:	42bd      	cmp	r5, r7
 8013cf2:	d1f7      	bne.n	8013ce4 <GUI__ConvertColor2Index+0x166>
 8013cf4:	2001      	movs	r0, #1
 8013cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cfa:	f104 0904 	add.w	r9, r4, #4
 8013cfe:	2500      	movs	r5, #0
 8013d00:	e761      	b.n	8013bc6 <GUI__ConvertColor2Index+0x48>
 8013d02:	f104 0904 	add.w	r9, r4, #4
 8013d06:	2500      	movs	r5, #0
 8013d08:	e7ae      	b.n	8013c68 <GUI__ConvertColor2Index+0xea>
 8013d0a:	691f      	ldr	r7, [r3, #16]
 8013d0c:	b11f      	cbz	r7, 8013d16 <GUI__ConvertColor2Index+0x198>
 8013d0e:	4641      	mov	r1, r8
 8013d10:	462a      	mov	r2, r5
 8013d12:	2302      	movs	r3, #2
 8013d14:	e7e4      	b.n	8013ce0 <GUI__ConvertColor2Index+0x162>
 8013d16:	f854 0b04 	ldr.w	r0, [r4], #4
 8013d1a:	47b0      	blx	r6
 8013d1c:	3d01      	subs	r5, #1
 8013d1e:	f828 0b02 	strh.w	r0, [r8], #2
 8013d22:	d1f8      	bne.n	8013d16 <GUI__ConvertColor2Index+0x198>
 8013d24:	e7e6      	b.n	8013cf4 <GUI__ConvertColor2Index+0x176>

08013d26 <GUI__CompactPixelIndicesEx>:
 8013d26:	b513      	push	{r0, r1, r4, lr}
 8013d28:	2400      	movs	r4, #0
 8013d2a:	9400      	str	r4, [sp, #0]
 8013d2c:	f7ff ff27 	bl	8013b7e <GUI__ConvertColor2Index>
 8013d30:	b002      	add	sp, #8
 8013d32:	bd10      	pop	{r4, pc}

08013d34 <_GetCharCode>:
 8013d34:	7800      	ldrb	r0, [r0, #0]
 8013d36:	4770      	bx	lr

08013d38 <_GetCharSize>:
 8013d38:	2001      	movs	r0, #1
 8013d3a:	4770      	bx	lr

08013d3c <_CalcSizeOfChar>:
 8013d3c:	2001      	movs	r0, #1
 8013d3e:	4770      	bx	lr

08013d40 <_Encode>:
 8013d40:	7001      	strb	r1, [r0, #0]
 8013d42:	2001      	movs	r0, #1
 8013d44:	4770      	bx	lr
	...

08013d48 <GUI_UC__GetCharCodeInc>:
 8013d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d4a:	4e08      	ldr	r6, [pc, #32]	; (8013d6c <GUI_UC__GetCharCodeInc+0x24>)
 8013d4c:	6804      	ldr	r4, [r0, #0]
 8013d4e:	6833      	ldr	r3, [r6, #0]
 8013d50:	4605      	mov	r5, r0
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	4620      	mov	r0, r4
 8013d56:	4798      	blx	r3
 8013d58:	6833      	ldr	r3, [r6, #0]
 8013d5a:	4607      	mov	r7, r0
 8013d5c:	685b      	ldr	r3, [r3, #4]
 8013d5e:	4620      	mov	r0, r4
 8013d60:	4798      	blx	r3
 8013d62:	4420      	add	r0, r4
 8013d64:	6028      	str	r0, [r5, #0]
 8013d66:	4638      	mov	r0, r7
 8013d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d6a:	bf00      	nop
 8013d6c:	2001d508 	.word	0x2001d508

08013d70 <GUI_UC__NumChars2NumBytes>:
 8013d70:	b570      	push	{r4, r5, r6, lr}
 8013d72:	4604      	mov	r4, r0
 8013d74:	460e      	mov	r6, r1
 8013d76:	2500      	movs	r5, #0
 8013d78:	b146      	cbz	r6, 8013d8c <GUI_UC__NumChars2NumBytes+0x1c>
 8013d7a:	4b05      	ldr	r3, [pc, #20]	; (8013d90 <GUI_UC__NumChars2NumBytes+0x20>)
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	4620      	mov	r0, r4
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	4798      	blx	r3
 8013d84:	3e01      	subs	r6, #1
 8013d86:	4404      	add	r4, r0
 8013d88:	4405      	add	r5, r0
 8013d8a:	e7f5      	b.n	8013d78 <GUI_UC__NumChars2NumBytes+0x8>
 8013d8c:	4628      	mov	r0, r5
 8013d8e:	bd70      	pop	{r4, r5, r6, pc}
 8013d90:	2001d508 	.word	0x2001d508

08013d94 <GUI_TOUCH_GetLayer>:
 8013d94:	4b01      	ldr	r3, [pc, #4]	; (8013d9c <GUI_TOUCH_GetLayer+0x8>)
 8013d96:	7a58      	ldrb	r0, [r3, #9]
 8013d98:	4770      	bx	lr
 8013d9a:	bf00      	nop
 8013d9c:	2001d310 	.word	0x2001d310

08013da0 <GUI_SetTextAlign>:
 8013da0:	4b03      	ldr	r3, [pc, #12]	; (8013db0 <GUI_SetTextAlign+0x10>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8013da8:	8598      	strh	r0, [r3, #44]	; 0x2c
 8013daa:	4610      	mov	r0, r2
 8013dac:	4770      	bx	lr
 8013dae:	bf00      	nop
 8013db0:	200000d8 	.word	0x200000d8

08013db4 <GUI_SetOrg>:
 8013db4:	460a      	mov	r2, r1
 8013db6:	4908      	ldr	r1, [pc, #32]	; (8013dd8 <GUI_SetOrg+0x24>)
 8013db8:	b510      	push	{r4, lr}
 8013dba:	8008      	strh	r0, [r1, #0]
 8013dbc:	4907      	ldr	r1, [pc, #28]	; (8013ddc <GUI_SetOrg+0x28>)
 8013dbe:	800a      	strh	r2, [r1, #0]
 8013dc0:	4907      	ldr	r1, [pc, #28]	; (8013de0 <GUI_SetOrg+0x2c>)
 8013dc2:	6809      	ldr	r1, [r1, #0]
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	7c48      	ldrb	r0, [r1, #17]
 8013dc8:	4906      	ldr	r1, [pc, #24]	; (8013de4 <GUI_SetOrg+0x30>)
 8013dca:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8013dce:	68c1      	ldr	r1, [r0, #12]
 8013dd0:	6a0c      	ldr	r4, [r1, #32]
 8013dd2:	4619      	mov	r1, r3
 8013dd4:	47a0      	blx	r4
 8013dd6:	bd10      	pop	{r4, pc}
 8013dd8:	2001d4f8 	.word	0x2001d4f8
 8013ddc:	2001d4ec 	.word	0x2001d4ec
 8013de0:	200000d8 	.word	0x200000d8
 8013de4:	2001d510 	.word	0x2001d510

08013de8 <GUI_SetLineStyle>:
 8013de8:	4b02      	ldr	r3, [pc, #8]	; (8013df4 <GUI_SetLineStyle+0xc>)
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	7e9a      	ldrb	r2, [r3, #26]
 8013dee:	7698      	strb	r0, [r3, #26]
 8013df0:	4610      	mov	r0, r2
 8013df2:	4770      	bx	lr
 8013df4:	200000d8 	.word	0x200000d8

08013df8 <_GetClipRect>:
 8013df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013dfc:	8a01      	ldrh	r1, [r0, #16]
 8013dfe:	8984      	ldrh	r4, [r0, #12]
 8013e00:	89c7      	ldrh	r7, [r0, #14]
 8013e02:	8a45      	ldrh	r5, [r0, #18]
 8013e04:	6802      	ldr	r2, [r0, #0]
 8013e06:	4603      	mov	r3, r0
 8013e08:	6940      	ldr	r0, [r0, #20]
 8013e0a:	fa0f f984 	sxth.w	r9, r4
 8013e0e:	fa0f fc87 	sxth.w	ip, r7
 8013e12:	fa0f f881 	sxth.w	r8, r1
 8013e16:	b22e      	sxth	r6, r5
 8013e18:	b9e8      	cbnz	r0, 8013e56 <_GetClipRect+0x5e>
 8013e1a:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8013e1e:	4286      	cmp	r6, r0
 8013e20:	db64      	blt.n	8013eec <_GetClipRect+0xf4>
 8013e22:	f9b2 a000 	ldrsh.w	sl, [r2]
 8013e26:	45d0      	cmp	r8, sl
 8013e28:	db60      	blt.n	8013eec <_GetClipRect+0xf4>
 8013e2a:	f9b2 a006 	ldrsh.w	sl, [r2, #6]
 8013e2e:	45d4      	cmp	ip, sl
 8013e30:	dc5c      	bgt.n	8013eec <_GetClipRect+0xf4>
 8013e32:	f9b2 a004 	ldrsh.w	sl, [r2, #4]
 8013e36:	45d1      	cmp	r9, sl
 8013e38:	dc58      	bgt.n	8013eec <_GetClipRect+0xf4>
 8013e3a:	4584      	cmp	ip, r0
 8013e3c:	da09      	bge.n	8013e52 <_GetClipRect+0x5a>
 8013e3e:	80df      	strh	r7, [r3, #6]
 8013e40:	8852      	ldrh	r2, [r2, #2]
 8013e42:	809c      	strh	r4, [r3, #4]
 8013e44:	3a01      	subs	r2, #1
 8013e46:	2001      	movs	r0, #1
 8013e48:	815a      	strh	r2, [r3, #10]
 8013e4a:	8119      	strh	r1, [r3, #8]
 8013e4c:	6158      	str	r0, [r3, #20]
 8013e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e52:	2001      	movs	r0, #1
 8013e54:	6158      	str	r0, [r3, #20]
 8013e56:	6958      	ldr	r0, [r3, #20]
 8013e58:	2801      	cmp	r0, #1
 8013e5a:	d119      	bne.n	8013e90 <_GetClipRect+0x98>
 8013e5c:	f9b2 a000 	ldrsh.w	sl, [r2]
 8013e60:	45d1      	cmp	r9, sl
 8013e62:	da13      	bge.n	8013e8c <_GetClipRect+0x94>
 8013e64:	809c      	strh	r4, [r3, #4]
 8013e66:	8811      	ldrh	r1, [r2, #0]
 8013e68:	3901      	subs	r1, #1
 8013e6a:	8119      	strh	r1, [r3, #8]
 8013e6c:	8851      	ldrh	r1, [r2, #2]
 8013e6e:	88d2      	ldrh	r2, [r2, #6]
 8013e70:	b20c      	sxth	r4, r1
 8013e72:	45a4      	cmp	ip, r4
 8013e74:	bfb8      	it	lt
 8013e76:	460f      	movlt	r7, r1
 8013e78:	b211      	sxth	r1, r2
 8013e7a:	428e      	cmp	r6, r1
 8013e7c:	bfc8      	it	gt
 8013e7e:	4615      	movgt	r5, r2
 8013e80:	2202      	movs	r2, #2
 8013e82:	80df      	strh	r7, [r3, #6]
 8013e84:	815d      	strh	r5, [r3, #10]
 8013e86:	615a      	str	r2, [r3, #20]
 8013e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e8c:	2002      	movs	r0, #2
 8013e8e:	6158      	str	r0, [r3, #20]
 8013e90:	6958      	ldr	r0, [r3, #20]
 8013e92:	2802      	cmp	r0, #2
 8013e94:	d117      	bne.n	8013ec6 <_GetClipRect+0xce>
 8013e96:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8013e9a:	4580      	cmp	r8, r0
 8013e9c:	dd11      	ble.n	8013ec2 <_GetClipRect+0xca>
 8013e9e:	8119      	strh	r1, [r3, #8]
 8013ea0:	8891      	ldrh	r1, [r2, #4]
 8013ea2:	3101      	adds	r1, #1
 8013ea4:	8099      	strh	r1, [r3, #4]
 8013ea6:	8851      	ldrh	r1, [r2, #2]
 8013ea8:	88d2      	ldrh	r2, [r2, #6]
 8013eaa:	b208      	sxth	r0, r1
 8013eac:	4584      	cmp	ip, r0
 8013eae:	bfb8      	it	lt
 8013eb0:	460f      	movlt	r7, r1
 8013eb2:	b211      	sxth	r1, r2
 8013eb4:	428e      	cmp	r6, r1
 8013eb6:	bfc8      	it	gt
 8013eb8:	4615      	movgt	r5, r2
 8013eba:	80df      	strh	r7, [r3, #6]
 8013ebc:	815d      	strh	r5, [r3, #10]
 8013ebe:	2203      	movs	r2, #3
 8013ec0:	e00e      	b.n	8013ee0 <_GetClipRect+0xe8>
 8013ec2:	2003      	movs	r0, #3
 8013ec4:	6158      	str	r0, [r3, #20]
 8013ec6:	6958      	ldr	r0, [r3, #20]
 8013ec8:	2803      	cmp	r0, #3
 8013eca:	d10f      	bne.n	8013eec <_GetClipRect+0xf4>
 8013ecc:	88d2      	ldrh	r2, [r2, #6]
 8013ece:	b210      	sxth	r0, r2
 8013ed0:	4286      	cmp	r6, r0
 8013ed2:	dd09      	ble.n	8013ee8 <_GetClipRect+0xf0>
 8013ed4:	3201      	adds	r2, #1
 8013ed6:	80da      	strh	r2, [r3, #6]
 8013ed8:	815d      	strh	r5, [r3, #10]
 8013eda:	809c      	strh	r4, [r3, #4]
 8013edc:	8119      	strh	r1, [r3, #8]
 8013ede:	2204      	movs	r2, #4
 8013ee0:	615a      	str	r2, [r3, #20]
 8013ee2:	2001      	movs	r0, #1
 8013ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ee8:	2204      	movs	r2, #4
 8013eea:	615a      	str	r2, [r3, #20]
 8013eec:	2000      	movs	r0, #0
 8013eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013ef2 <_GetClipParam>:
 8013ef2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ef6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013ef8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013efa:	f9b6 8002 	ldrsh.w	r8, [r6, #2]
 8013efe:	60a1      	str	r1, [r4, #8]
 8013f00:	eb01 0903 	add.w	r9, r1, r3
 8013f04:	ebc1 0108 	rsb	r1, r1, r8
 8013f08:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8013f0c:	9d07      	ldr	r5, [sp, #28]
 8013f0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8013f10:	6060      	str	r0, [r4, #4]
 8013f12:	2900      	cmp	r1, #0
 8013f14:	60e2      	str	r2, [r4, #12]
 8013f16:	6123      	str	r3, [r4, #16]
 8013f18:	f8c4 c014 	str.w	ip, [r4, #20]
 8013f1c:	f109 39ff 	add.w	r9, r9, #4294967295
 8013f20:	6021      	str	r1, [r4, #0]
 8013f22:	dd0c      	ble.n	8013f3e <_GetClipParam+0x4c>
 8013f24:	1a5b      	subs	r3, r3, r1
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	6123      	str	r3, [r4, #16]
 8013f2a:	dc02      	bgt.n	8013f32 <_GetClipParam+0x40>
 8013f2c:	2001      	movs	r0, #1
 8013f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f32:	9b08      	ldr	r3, [sp, #32]
 8013f34:	f8c4 8008 	str.w	r8, [r4, #8]
 8013f38:	fb03 c101 	mla	r1, r3, r1, ip
 8013f3c:	6161      	str	r1, [r4, #20]
 8013f3e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013f42:	ebc3 0309 	rsb	r3, r3, r9
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	6023      	str	r3, [r4, #0]
 8013f4a:	dc0a      	bgt.n	8013f62 <_GetClipParam+0x70>
 8013f4c:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8013f50:	1883      	adds	r3, r0, r2
 8013f52:	3b01      	subs	r3, #1
 8013f54:	1a5b      	subs	r3, r3, r1
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	6023      	str	r3, [r4, #0]
 8013f5a:	dd08      	ble.n	8013f6e <_GetClipParam+0x7c>
 8013f5c:	1ad2      	subs	r2, r2, r3
 8013f5e:	60e2      	str	r2, [r4, #12]
 8013f60:	e005      	b.n	8013f6e <_GetClipParam+0x7c>
 8013f62:	6921      	ldr	r1, [r4, #16]
 8013f64:	1acb      	subs	r3, r1, r3
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	6123      	str	r3, [r4, #16]
 8013f6a:	dcef      	bgt.n	8013f4c <_GetClipParam+0x5a>
 8013f6c:	e7de      	b.n	8013f2c <_GetClipParam+0x3a>
 8013f6e:	f9b6 2000 	ldrsh.w	r2, [r6]
 8013f72:	6027      	str	r7, [r4, #0]
 8013f74:	4290      	cmp	r0, r2
 8013f76:	da43      	bge.n	8014000 <_GetClipParam+0x10e>
 8013f78:	68e6      	ldr	r6, [r4, #12]
 8013f7a:	1a13      	subs	r3, r2, r0
 8013f7c:	443e      	add	r6, r7
 8013f7e:	1af6      	subs	r6, r6, r3
 8013f80:	2d08      	cmp	r5, #8
 8013f82:	6023      	str	r3, [r4, #0]
 8013f84:	60e6      	str	r6, [r4, #12]
 8013f86:	d031      	beq.n	8013fec <_GetClipParam+0xfa>
 8013f88:	dc10      	bgt.n	8013fac <_GetClipParam+0xba>
 8013f8a:	2d02      	cmp	r5, #2
 8013f8c:	d018      	beq.n	8013fc0 <_GetClipParam+0xce>
 8013f8e:	2d04      	cmp	r5, #4
 8013f90:	d021      	beq.n	8013fd6 <_GetClipParam+0xe4>
 8013f92:	2d01      	cmp	r5, #1
 8013f94:	d134      	bne.n	8014000 <_GetClipParam+0x10e>
 8013f96:	6962      	ldr	r2, [r4, #20]
 8013f98:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8013f9c:	6162      	str	r2, [r4, #20]
 8013f9e:	f023 0207 	bic.w	r2, r3, #7
 8013fa2:	4410      	add	r0, r2
 8013fa4:	6060      	str	r0, [r4, #4]
 8013fa6:	f003 0307 	and.w	r3, r3, #7
 8013faa:	e028      	b.n	8013ffe <_GetClipParam+0x10c>
 8013fac:	2d18      	cmp	r5, #24
 8013fae:	d020      	beq.n	8013ff2 <_GetClipParam+0x100>
 8013fb0:	2d20      	cmp	r5, #32
 8013fb2:	d01e      	beq.n	8013ff2 <_GetClipParam+0x100>
 8013fb4:	2d10      	cmp	r5, #16
 8013fb6:	d123      	bne.n	8014000 <_GetClipParam+0x10e>
 8013fb8:	6960      	ldr	r0, [r4, #20]
 8013fba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013fbe:	e01b      	b.n	8013ff8 <_GetClipParam+0x106>
 8013fc0:	6962      	ldr	r2, [r4, #20]
 8013fc2:	eb02 0293 	add.w	r2, r2, r3, lsr #2
 8013fc6:	6162      	str	r2, [r4, #20]
 8013fc8:	f023 0203 	bic.w	r2, r3, #3
 8013fcc:	4410      	add	r0, r2
 8013fce:	6060      	str	r0, [r4, #4]
 8013fd0:	f003 0303 	and.w	r3, r3, #3
 8013fd4:	e013      	b.n	8013ffe <_GetClipParam+0x10c>
 8013fd6:	6962      	ldr	r2, [r4, #20]
 8013fd8:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8013fdc:	6162      	str	r2, [r4, #20]
 8013fde:	f023 0201 	bic.w	r2, r3, #1
 8013fe2:	4410      	add	r0, r2
 8013fe4:	6060      	str	r0, [r4, #4]
 8013fe6:	f003 0301 	and.w	r3, r3, #1
 8013fea:	e008      	b.n	8013ffe <_GetClipParam+0x10c>
 8013fec:	6960      	ldr	r0, [r4, #20]
 8013fee:	4403      	add	r3, r0
 8013ff0:	e002      	b.n	8013ff8 <_GetClipParam+0x106>
 8013ff2:	6960      	ldr	r0, [r4, #20]
 8013ff4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8013ff8:	6163      	str	r3, [r4, #20]
 8013ffa:	6062      	str	r2, [r4, #4]
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	6023      	str	r3, [r4, #0]
 8014000:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014004:	4413      	add	r3, r2
 8014006:	68e2      	ldr	r2, [r4, #12]
 8014008:	441a      	add	r2, r3
 801400a:	428a      	cmp	r2, r1
 801400c:	dd02      	ble.n	8014014 <_GetClipParam+0x122>
 801400e:	1acb      	subs	r3, r1, r3
 8014010:	3301      	adds	r3, #1
 8014012:	60e3      	str	r3, [r4, #12]
 8014014:	68e0      	ldr	r0, [r4, #12]
 8014016:	2800      	cmp	r0, #0
 8014018:	bfcc      	ite	gt
 801401a:	2000      	movgt	r0, #0
 801401c:	2001      	movle	r0, #1
 801401e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014022 <_GetDevData>:
 8014022:	2000      	movs	r0, #0
 8014024:	4770      	bx	lr

08014026 <_SetOrg>:
 8014026:	6800      	ldr	r0, [r0, #0]
 8014028:	b508      	push	{r3, lr}
 801402a:	b110      	cbz	r0, 8014032 <_SetOrg+0xc>
 801402c:	68c3      	ldr	r3, [r0, #12]
 801402e:	6a1b      	ldr	r3, [r3, #32]
 8014030:	4798      	blx	r3
 8014032:	bd08      	pop	{r3, pc}

08014034 <_GetDevFunc>:
 8014034:	b507      	push	{r0, r1, r2, lr}
 8014036:	6803      	ldr	r3, [r0, #0]
 8014038:	9301      	str	r3, [sp, #4]
 801403a:	b90b      	cbnz	r3, 8014040 <_GetDevFunc+0xc>
 801403c:	2000      	movs	r0, #0
 801403e:	e007      	b.n	8014050 <_GetDevFunc+0x1c>
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	9301      	str	r3, [sp, #4]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d0f9      	beq.n	801403c <_GetDevFunc+0x8>
 8014048:	68db      	ldr	r3, [r3, #12]
 801404a:	a801      	add	r0, sp, #4
 801404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801404e:	4798      	blx	r3
 8014050:	b003      	add	sp, #12
 8014052:	f85d fb04 	ldr.w	pc, [sp], #4

08014056 <_GetDevProp>:
 8014056:	6800      	ldr	r0, [r0, #0]
 8014058:	b508      	push	{r3, lr}
 801405a:	b110      	cbz	r0, 8014062 <_GetDevProp+0xc>
 801405c:	68c3      	ldr	r3, [r0, #12]
 801405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014060:	4798      	blx	r3
 8014062:	bd08      	pop	{r3, pc}

08014064 <_GetRect>:
 8014064:	6800      	ldr	r0, [r0, #0]
 8014066:	b508      	push	{r3, lr}
 8014068:	b110      	cbz	r0, 8014070 <_GetRect+0xc>
 801406a:	68c3      	ldr	r3, [r0, #12]
 801406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801406e:	4798      	blx	r3
 8014070:	bd08      	pop	{r3, pc}

08014072 <_PixelExists>:
 8014072:	b538      	push	{r3, r4, r5, lr}
 8014074:	460d      	mov	r5, r1
 8014076:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801407a:	6953      	ldr	r3, [r2, #20]
 801407c:	4288      	cmp	r0, r1
 801407e:	4614      	mov	r4, r2
 8014080:	db17      	blt.n	80140b2 <_PixelExists+0x40>
 8014082:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8014086:	4295      	cmp	r5, r2
 8014088:	db13      	blt.n	80140b2 <_PixelExists+0x40>
 801408a:	1a41      	subs	r1, r0, r1
 801408c:	8818      	ldrh	r0, [r3, #0]
 801408e:	4281      	cmp	r1, r0
 8014090:	da0f      	bge.n	80140b2 <_PixelExists+0x40>
 8014092:	8858      	ldrh	r0, [r3, #2]
 8014094:	1aaa      	subs	r2, r5, r2
 8014096:	4282      	cmp	r2, r0
 8014098:	da0b      	bge.n	80140b2 <_PixelExists+0x40>
 801409a:	4618      	mov	r0, r3
 801409c:	f001 fc6f 	bl	801597e <GUI_GetBitmapPixelIndex>
 80140a0:	68e3      	ldr	r3, [r4, #12]
 80140a2:	b10b      	cbz	r3, 80140a8 <_PixelExists+0x36>
 80140a4:	3000      	adds	r0, #0
 80140a6:	e001      	b.n	80140ac <_PixelExists+0x3a>
 80140a8:	0e00      	lsrs	r0, r0, #24
 80140aa:	38ff      	subs	r0, #255	; 0xff
 80140ac:	bf18      	it	ne
 80140ae:	2001      	movne	r0, #1
 80140b0:	bd38      	pop	{r3, r4, r5, pc}
 80140b2:	2000      	movs	r0, #0
 80140b4:	bd38      	pop	{r3, r4, r5, pc}

080140b6 <_GetPixelIndex>:
 80140b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80140ba:	4606      	mov	r6, r0
 80140bc:	6880      	ldr	r0, [r0, #8]
 80140be:	460d      	mov	r5, r1
 80140c0:	4614      	mov	r4, r2
 80140c2:	f7fb fe4d 	bl	800fd60 <GUI_ALLOC_LockH>
 80140c6:	4621      	mov	r1, r4
 80140c8:	4602      	mov	r2, r0
 80140ca:	9001      	str	r0, [sp, #4]
 80140cc:	f8b0 8008 	ldrh.w	r8, [r0, #8]
 80140d0:	8887      	ldrh	r7, [r0, #4]
 80140d2:	6836      	ldr	r6, [r6, #0]
 80140d4:	4628      	mov	r0, r5
 80140d6:	f7ff ffcc 	bl	8014072 <_PixelExists>
 80140da:	b198      	cbz	r0, 8014104 <_GetPixelIndex+0x4e>
 80140dc:	9b01      	ldr	r3, [sp, #4]
 80140de:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 80140e2:	f103 0220 	add.w	r2, r3, #32
 80140e6:	fa0f f888 	sxth.w	r8, r8
 80140ea:	b23f      	sxth	r7, r7
 80140ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80140f0:	ebc7 0708 	rsb	r7, r7, r8
 80140f4:	1a64      	subs	r4, r4, r1
 80140f6:	fb07 4404 	mla	r4, r7, r4, r4
 80140fa:	1aed      	subs	r5, r5, r3
 80140fc:	442c      	add	r4, r5
 80140fe:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8014102:	e006      	b.n	8014112 <_GetPixelIndex+0x5c>
 8014104:	68f3      	ldr	r3, [r6, #12]
 8014106:	4622      	mov	r2, r4
 8014108:	695b      	ldr	r3, [r3, #20]
 801410a:	4630      	mov	r0, r6
 801410c:	4629      	mov	r1, r5
 801410e:	4798      	blx	r3
 8014110:	4604      	mov	r4, r0
 8014112:	a801      	add	r0, sp, #4
 8014114:	f7fb fe32 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8014118:	4620      	mov	r0, r4
 801411a:	b002      	add	sp, #8
 801411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014120 <_XorPixel>:
 8014120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014124:	4606      	mov	r6, r0
 8014126:	6880      	ldr	r0, [r0, #8]
 8014128:	460d      	mov	r5, r1
 801412a:	4614      	mov	r4, r2
 801412c:	f7fb fe18 	bl	800fd60 <GUI_ALLOC_LockH>
 8014130:	4621      	mov	r1, r4
 8014132:	4602      	mov	r2, r0
 8014134:	9001      	str	r0, [sp, #4]
 8014136:	f8b0 8008 	ldrh.w	r8, [r0, #8]
 801413a:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 801413e:	6836      	ldr	r6, [r6, #0]
 8014140:	4628      	mov	r0, r5
 8014142:	f7ff ff96 	bl	8014072 <_PixelExists>
 8014146:	2800      	cmp	r0, #0
 8014148:	d04f      	beq.n	80141ea <_XorPixel+0xca>
 801414a:	9b01      	ldr	r3, [sp, #4]
 801414c:	fa0f f888 	sxth.w	r8, r8
 8014150:	fa0f f989 	sxth.w	r9, r9
 8014154:	ebc9 0908 	rsb	r9, r9, r8
 8014158:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801415c:	f103 0720 	add.w	r7, r3, #32
 8014160:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014164:	ebc8 0804 	rsb	r8, r8, r4
 8014168:	1aeb      	subs	r3, r5, r3
 801416a:	fb09 8808 	mla	r8, r9, r8, r8
 801416e:	4498      	add	r8, r3
 8014170:	6933      	ldr	r3, [r6, #16]
 8014172:	689b      	ldr	r3, [r3, #8]
 8014174:	4798      	blx	r3
 8014176:	f857 3028 	ldr.w	r3, [r7, r8, lsl #2]
 801417a:	4058      	eors	r0, r3
 801417c:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 8014180:	9b01      	ldr	r3, [sp, #4]
 8014182:	68da      	ldr	r2, [r3, #12]
 8014184:	2a00      	cmp	r2, #0
 8014186:	d136      	bne.n	80141f6 <_XorPixel+0xd6>
 8014188:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801418c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8014190:	6958      	ldr	r0, [r3, #20]
 8014192:	1a69      	subs	r1, r5, r1
 8014194:	1aa2      	subs	r2, r4, r2
 8014196:	f001 fbf2 	bl	801597e <GUI_GetBitmapPixelIndex>
 801419a:	ea5f 6b10 	movs.w	fp, r0, lsr #24
 801419e:	4681      	mov	r9, r0
 80141a0:	d029      	beq.n	80141f6 <_XorPixel+0xd6>
 80141a2:	9b01      	ldr	r3, [sp, #4]
 80141a4:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8014204 <_XorPixel+0xe4>
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	f857 0028 	ldr.w	r0, [r7, r8, lsl #2]
 80141ae:	699b      	ldr	r3, [r3, #24]
 80141b0:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80141b4:	691b      	ldr	r3, [r3, #16]
 80141b6:	685b      	ldr	r3, [r3, #4]
 80141b8:	4798      	blx	r3
 80141ba:	ea6f 020b 	mvn.w	r2, fp
 80141be:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
 80141c2:	b2d2      	uxtb	r2, r2
 80141c4:	4648      	mov	r0, r9
 80141c6:	f7f9 fd55 	bl	800dc74 <GUI__MixColors>
 80141ca:	9b01      	ldr	r3, [sp, #4]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	699b      	ldr	r3, [r3, #24]
 80141d0:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80141d4:	691b      	ldr	r3, [r3, #16]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	4798      	blx	r3
 80141da:	68f2      	ldr	r2, [r6, #12]
 80141dc:	4603      	mov	r3, r0
 80141de:	6997      	ldr	r7, [r2, #24]
 80141e0:	4630      	mov	r0, r6
 80141e2:	4629      	mov	r1, r5
 80141e4:	4622      	mov	r2, r4
 80141e6:	47b8      	blx	r7
 80141e8:	e005      	b.n	80141f6 <_XorPixel+0xd6>
 80141ea:	68f3      	ldr	r3, [r6, #12]
 80141ec:	4630      	mov	r0, r6
 80141ee:	69db      	ldr	r3, [r3, #28]
 80141f0:	4629      	mov	r1, r5
 80141f2:	4622      	mov	r2, r4
 80141f4:	4798      	blx	r3
 80141f6:	a801      	add	r0, sp, #4
 80141f8:	f7fb fdc0 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80141fc:	b003      	add	sp, #12
 80141fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014202:	bf00      	nop
 8014204:	2001d510 	.word	0x2001d510

08014208 <_SetPixelIndex>:
 8014208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801420c:	4606      	mov	r6, r0
 801420e:	6880      	ldr	r0, [r0, #8]
 8014210:	460d      	mov	r5, r1
 8014212:	4614      	mov	r4, r2
 8014214:	461f      	mov	r7, r3
 8014216:	f7fb fda3 	bl	800fd60 <GUI_ALLOC_LockH>
 801421a:	4621      	mov	r1, r4
 801421c:	4602      	mov	r2, r0
 801421e:	9001      	str	r0, [sp, #4]
 8014220:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 8014224:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8014228:	6836      	ldr	r6, [r6, #0]
 801422a:	4628      	mov	r0, r5
 801422c:	f7ff ff21 	bl	8014072 <_PixelExists>
 8014230:	2800      	cmp	r0, #0
 8014232:	d042      	beq.n	80142ba <_SetPixelIndex+0xb2>
 8014234:	9a01      	ldr	r2, [sp, #4]
 8014236:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801423a:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 801423e:	fa0f f989 	sxth.w	r9, r9
 8014242:	fa0f f888 	sxth.w	r8, r8
 8014246:	ebc8 0809 	rsb	r8, r8, r9
 801424a:	1ae3      	subs	r3, r4, r3
 801424c:	fb08 3303 	mla	r3, r8, r3, r3
 8014250:	1a28      	subs	r0, r5, r0
 8014252:	4403      	add	r3, r0
 8014254:	f102 0120 	add.w	r1, r2, #32
 8014258:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 801425c:	68d3      	ldr	r3, [r2, #12]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d133      	bne.n	80142ca <_SetPixelIndex+0xc2>
 8014262:	6813      	ldr	r3, [r2, #0]
 8014264:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80142d8 <_SetPixelIndex+0xd0>
 8014268:	699b      	ldr	r3, [r3, #24]
 801426a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801426e:	691b      	ldr	r3, [r3, #16]
 8014270:	4638      	mov	r0, r7
 8014272:	685b      	ldr	r3, [r3, #4]
 8014274:	4798      	blx	r3
 8014276:	9b01      	ldr	r3, [sp, #4]
 8014278:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801427c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8014280:	4607      	mov	r7, r0
 8014282:	1aa2      	subs	r2, r4, r2
 8014284:	6958      	ldr	r0, [r3, #20]
 8014286:	1a69      	subs	r1, r5, r1
 8014288:	f001 fb79 	bl	801597e <GUI_GetBitmapPixelIndex>
 801428c:	0e02      	lsrs	r2, r0, #24
 801428e:	d01c      	beq.n	80142ca <_SetPixelIndex+0xc2>
 8014290:	43d2      	mvns	r2, r2
 8014292:	4639      	mov	r1, r7
 8014294:	b2d2      	uxtb	r2, r2
 8014296:	f7f9 fced 	bl	800dc74 <GUI__MixColors>
 801429a:	9b01      	ldr	r3, [sp, #4]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	699b      	ldr	r3, [r3, #24]
 80142a0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80142a4:	691b      	ldr	r3, [r3, #16]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	4798      	blx	r3
 80142aa:	68f2      	ldr	r2, [r6, #12]
 80142ac:	4603      	mov	r3, r0
 80142ae:	6997      	ldr	r7, [r2, #24]
 80142b0:	4630      	mov	r0, r6
 80142b2:	4629      	mov	r1, r5
 80142b4:	4622      	mov	r2, r4
 80142b6:	47b8      	blx	r7
 80142b8:	e007      	b.n	80142ca <_SetPixelIndex+0xc2>
 80142ba:	68f3      	ldr	r3, [r6, #12]
 80142bc:	4630      	mov	r0, r6
 80142be:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80142c2:	4629      	mov	r1, r5
 80142c4:	4622      	mov	r2, r4
 80142c6:	463b      	mov	r3, r7
 80142c8:	47e0      	blx	ip
 80142ca:	a801      	add	r0, sp, #4
 80142cc:	f7fb fd56 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80142d0:	b003      	add	sp, #12
 80142d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142d6:	bf00      	nop
 80142d8:	2001d510 	.word	0x2001d510

080142dc <_FillRect>:
 80142dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142e0:	4604      	mov	r4, r0
 80142e2:	b08d      	sub	sp, #52	; 0x34
 80142e4:	4688      	mov	r8, r1
 80142e6:	4616      	mov	r6, r2
 80142e8:	2100      	movs	r1, #0
 80142ea:	2218      	movs	r2, #24
 80142ec:	a806      	add	r0, sp, #24
 80142ee:	461d      	mov	r5, r3
 80142f0:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 80142f4:	f002 fae8 	bl	80168c8 <memset>
 80142f8:	68a0      	ldr	r0, [r4, #8]
 80142fa:	f7fb fd31 	bl	800fd60 <GUI_ALLOC_LockH>
 80142fe:	f8b0 b008 	ldrh.w	fp, [r0, #8]
 8014302:	f8b0 a004 	ldrh.w	sl, [r0, #4]
 8014306:	9003      	str	r0, [sp, #12]
 8014308:	1d01      	adds	r1, r0, #4
 801430a:	6947      	ldr	r7, [r0, #20]
 801430c:	9106      	str	r1, [sp, #24]
 801430e:	a809      	add	r0, sp, #36	; 0x24
 8014310:	6824      	ldr	r4, [r4, #0]
 8014312:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
 8014316:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801431a:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 801431e:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8014322:	f7fa fc6b 	bl	800ebfc <GUI_RectsIntersect>
 8014326:	2800      	cmp	r0, #0
 8014328:	f000 80bc 	beq.w	80144a4 <_FillRect+0x1c8>
 801432c:	a806      	add	r0, sp, #24
 801432e:	f7ff fd63 	bl	8013df8 <_GetClipRect>
 8014332:	b168      	cbz	r0, 8014350 <_FillRect+0x74>
 8014334:	68e0      	ldr	r0, [r4, #12]
 8014336:	f9bd 5022 	ldrsh.w	r5, [sp, #34]	; 0x22
 801433a:	9500      	str	r5, [sp, #0]
 801433c:	6905      	ldr	r5, [r0, #16]
 801433e:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8014342:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8014346:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801434a:	4620      	mov	r0, r4
 801434c:	47a8      	blx	r5
 801434e:	e7ed      	b.n	801432c <_FillRect+0x50>
 8014350:	9a06      	ldr	r2, [sp, #24]
 8014352:	6810      	ldr	r0, [r2, #0]
 8014354:	6851      	ldr	r1, [r2, #4]
 8014356:	ab04      	add	r3, sp, #16
 8014358:	c303      	stmia	r3!, {r0, r1}
 801435a:	a804      	add	r0, sp, #16
 801435c:	a909      	add	r1, sp, #36	; 0x24
 801435e:	f7fa fc4d 	bl	800ebfc <GUI_RectsIntersect>
 8014362:	2800      	cmp	r0, #0
 8014364:	f000 80a7 	beq.w	80144b6 <_FillRect+0x1da>
 8014368:	a909      	add	r1, sp, #36	; 0x24
 801436a:	a804      	add	r0, sp, #16
 801436c:	f7f9 fc64 	bl	800dc38 <GUI__IntersectRect>
 8014370:	4a54      	ldr	r2, [pc, #336]	; (80144c4 <_FillRect+0x1e8>)
 8014372:	6813      	ldr	r3, [r2, #0]
 8014374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014376:	f8d3 8000 	ldr.w	r8, [r3]
 801437a:	9b03      	ldr	r3, [sp, #12]
 801437c:	fa0f fb8b 	sxth.w	fp, fp
 8014380:	fa0f fa8a 	sxth.w	sl, sl
 8014384:	68d9      	ldr	r1, [r3, #12]
 8014386:	ebca 0a0b 	rsb	sl, sl, fp
 801438a:	f10a 0a01 	add.w	sl, sl, #1
 801438e:	4691      	mov	r9, r2
 8014390:	b3a1      	cbz	r1, 80143fc <_FillRect+0x120>
 8014392:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 8014396:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801439a:	429d      	cmp	r5, r3
 801439c:	f300 808b 	bgt.w	80144b6 <_FillRect+0x1da>
 80143a0:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 80143a4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80143a8:	429e      	cmp	r6, r3
 80143aa:	dc25      	bgt.n	80143f8 <_FillRect+0x11c>
 80143ac:	9b03      	ldr	r3, [sp, #12]
 80143ae:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80143b2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80143b6:	4638      	mov	r0, r7
 80143b8:	1a71      	subs	r1, r6, r1
 80143ba:	1aaa      	subs	r2, r5, r2
 80143bc:	f001 fadf 	bl	801597e <GUI_GetBitmapPixelIndex>
 80143c0:	b168      	cbz	r0, 80143de <_FillRect+0x102>
 80143c2:	9b03      	ldr	r3, [sp, #12]
 80143c4:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 80143c8:	f103 0220 	add.w	r2, r3, #32
 80143cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80143d0:	1a69      	subs	r1, r5, r1
 80143d2:	1af3      	subs	r3, r6, r3
 80143d4:	fb01 330a 	mla	r3, r1, sl, r3
 80143d8:	f842 8023 	str.w	r8, [r2, r3, lsl #2]
 80143dc:	e00a      	b.n	80143f4 <_FillRect+0x118>
 80143de:	f8d9 2000 	ldr.w	r2, [r9]
 80143e2:	68e1      	ldr	r1, [r4, #12]
 80143e4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80143e6:	f8d1 c018 	ldr.w	ip, [r1, #24]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	4620      	mov	r0, r4
 80143ee:	4631      	mov	r1, r6
 80143f0:	462a      	mov	r2, r5
 80143f2:	47e0      	blx	ip
 80143f4:	3601      	adds	r6, #1
 80143f6:	e7d5      	b.n	80143a4 <_FillRect+0xc8>
 80143f8:	3501      	adds	r5, #1
 80143fa:	e7cc      	b.n	8014396 <_FillRect+0xba>
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	4e32      	ldr	r6, [pc, #200]	; (80144c8 <_FillRect+0x1ec>)
 8014400:	699b      	ldr	r3, [r3, #24]
 8014402:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014406:	691b      	ldr	r3, [r3, #16]
 8014408:	4640      	mov	r0, r8
 801440a:	685b      	ldr	r3, [r3, #4]
 801440c:	4798      	blx	r3
 801440e:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 8014412:	4681      	mov	r9, r0
 8014414:	46b3      	mov	fp, r6
 8014416:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801441a:	429d      	cmp	r5, r3
 801441c:	dc4b      	bgt.n	80144b6 <_FillRect+0x1da>
 801441e:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8014422:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8014426:	429e      	cmp	r6, r3
 8014428:	dc3a      	bgt.n	80144a0 <_FillRect+0x1c4>
 801442a:	9b03      	ldr	r3, [sp, #12]
 801442c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8014430:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8014434:	4638      	mov	r0, r7
 8014436:	1aaa      	subs	r2, r5, r2
 8014438:	1a71      	subs	r1, r6, r1
 801443a:	f001 faa0 	bl	801597e <GUI_GetBitmapPixelIndex>
 801443e:	0e02      	lsrs	r2, r0, #24
 8014440:	2aff      	cmp	r2, #255	; 0xff
 8014442:	d023      	beq.n	801448c <_FillRect+0x1b0>
 8014444:	9b03      	ldr	r3, [sp, #12]
 8014446:	f9b3 e006 	ldrsh.w	lr, [r3, #6]
 801444a:	f103 0120 	add.w	r1, r3, #32
 801444e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014452:	ebce 0e05 	rsb	lr, lr, r5
 8014456:	1af3      	subs	r3, r6, r3
 8014458:	fb0e 330a 	mla	r3, lr, sl, r3
 801445c:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
 8014460:	b1e2      	cbz	r2, 801449c <_FillRect+0x1c0>
 8014462:	43d2      	mvns	r2, r2
 8014464:	4649      	mov	r1, r9
 8014466:	b2d2      	uxtb	r2, r2
 8014468:	f7f9 fc04 	bl	800dc74 <GUI__MixColors>
 801446c:	9b03      	ldr	r3, [sp, #12]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	699b      	ldr	r3, [r3, #24]
 8014472:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8014476:	691b      	ldr	r3, [r3, #16]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	4798      	blx	r3
 801447c:	68e2      	ldr	r2, [r4, #12]
 801447e:	4603      	mov	r3, r0
 8014480:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8014484:	4620      	mov	r0, r4
 8014486:	4631      	mov	r1, r6
 8014488:	462a      	mov	r2, r5
 801448a:	e006      	b.n	801449a <_FillRect+0x1be>
 801448c:	68e3      	ldr	r3, [r4, #12]
 801448e:	4620      	mov	r0, r4
 8014490:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8014494:	4631      	mov	r1, r6
 8014496:	462a      	mov	r2, r5
 8014498:	4643      	mov	r3, r8
 801449a:	47e0      	blx	ip
 801449c:	3601      	adds	r6, #1
 801449e:	e7c0      	b.n	8014422 <_FillRect+0x146>
 80144a0:	3501      	adds	r5, #1
 80144a2:	e7b8      	b.n	8014416 <_FillRect+0x13a>
 80144a4:	68e3      	ldr	r3, [r4, #12]
 80144a6:	f8cd 9000 	str.w	r9, [sp]
 80144aa:	691f      	ldr	r7, [r3, #16]
 80144ac:	4620      	mov	r0, r4
 80144ae:	4641      	mov	r1, r8
 80144b0:	4632      	mov	r2, r6
 80144b2:	462b      	mov	r3, r5
 80144b4:	47b8      	blx	r7
 80144b6:	a803      	add	r0, sp, #12
 80144b8:	f7fb fc60 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80144bc:	b00d      	add	sp, #52	; 0x34
 80144be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144c2:	bf00      	nop
 80144c4:	200000d8 	.word	0x200000d8
 80144c8:	2001d510 	.word	0x2001d510

080144cc <_DrawVLine>:
 80144cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144d0:	4604      	mov	r4, r0
 80144d2:	b08b      	sub	sp, #44	; 0x2c
 80144d4:	460d      	mov	r5, r1
 80144d6:	4692      	mov	sl, r2
 80144d8:	2100      	movs	r1, #0
 80144da:	2218      	movs	r2, #24
 80144dc:	a804      	add	r0, sp, #16
 80144de:	461e      	mov	r6, r3
 80144e0:	f002 f9f2 	bl	80168c8 <memset>
 80144e4:	68a0      	ldr	r0, [r4, #8]
 80144e6:	f7fb fc3b 	bl	800fd60 <GUI_ALLOC_LockH>
 80144ea:	b2ab      	uxth	r3, r5
 80144ec:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 80144f0:	8887      	ldrh	r7, [r0, #4]
 80144f2:	9001      	str	r0, [sp, #4]
 80144f4:	1d01      	adds	r1, r0, #4
 80144f6:	f8d0 8014 	ldr.w	r8, [r0, #20]
 80144fa:	9104      	str	r1, [sp, #16]
 80144fc:	a807      	add	r0, sp, #28
 80144fe:	6824      	ldr	r4, [r4, #0]
 8014500:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014504:	f8ad a01e 	strh.w	sl, [sp, #30]
 8014508:	f8ad 3020 	strh.w	r3, [sp, #32]
 801450c:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 8014510:	f7fa fb74 	bl	800ebfc <GUI_RectsIntersect>
 8014514:	2800      	cmp	r0, #0
 8014516:	f000 80a2 	beq.w	801465e <_DrawVLine+0x192>
 801451a:	a804      	add	r0, sp, #16
 801451c:	f7ff fc6c 	bl	8013df8 <_GetClipRect>
 8014520:	b150      	cbz	r0, 8014538 <_DrawVLine+0x6c>
 8014522:	68e3      	ldr	r3, [r4, #12]
 8014524:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8014528:	68de      	ldr	r6, [r3, #12]
 801452a:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 801452e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8014532:	4620      	mov	r0, r4
 8014534:	47b0      	blx	r6
 8014536:	e7f0      	b.n	801451a <_DrawVLine+0x4e>
 8014538:	9a04      	ldr	r2, [sp, #16]
 801453a:	6810      	ldr	r0, [r2, #0]
 801453c:	6851      	ldr	r1, [r2, #4]
 801453e:	ab02      	add	r3, sp, #8
 8014540:	c303      	stmia	r3!, {r0, r1}
 8014542:	a802      	add	r0, sp, #8
 8014544:	a907      	add	r1, sp, #28
 8014546:	f7fa fb59 	bl	800ebfc <GUI_RectsIntersect>
 801454a:	2800      	cmp	r0, #0
 801454c:	f000 808e 	beq.w	801466c <_DrawVLine+0x1a0>
 8014550:	a802      	add	r0, sp, #8
 8014552:	a907      	add	r1, sp, #28
 8014554:	f7f9 fb70 	bl	800dc38 <GUI__IntersectRect>
 8014558:	4b47      	ldr	r3, [pc, #284]	; (8014678 <_DrawVLine+0x1ac>)
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801455e:	b23f      	sxth	r7, r7
 8014560:	fa0f f989 	sxth.w	r9, r9
 8014564:	ebc7 0909 	rsb	r9, r7, r9
 8014568:	681f      	ldr	r7, [r3, #0]
 801456a:	9b01      	ldr	r3, [sp, #4]
 801456c:	68da      	ldr	r2, [r3, #12]
 801456e:	f109 0901 	add.w	r9, r9, #1
 8014572:	b342      	cbz	r2, 80145c6 <_DrawVLine+0xfa>
 8014574:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 8014578:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801457c:	429e      	cmp	r6, r3
 801457e:	dc75      	bgt.n	801466c <_DrawVLine+0x1a0>
 8014580:	9b01      	ldr	r3, [sp, #4]
 8014582:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8014586:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801458a:	4640      	mov	r0, r8
 801458c:	1a69      	subs	r1, r5, r1
 801458e:	1ab2      	subs	r2, r6, r2
 8014590:	f001 f9f5 	bl	801597e <GUI_GetBitmapPixelIndex>
 8014594:	b168      	cbz	r0, 80145b2 <_DrawVLine+0xe6>
 8014596:	9b01      	ldr	r3, [sp, #4]
 8014598:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 801459c:	f103 0220 	add.w	r2, r3, #32
 80145a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80145a4:	1a71      	subs	r1, r6, r1
 80145a6:	1aeb      	subs	r3, r5, r3
 80145a8:	fb01 3309 	mla	r3, r1, r9, r3
 80145ac:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
 80145b0:	e007      	b.n	80145c2 <_DrawVLine+0xf6>
 80145b2:	68e3      	ldr	r3, [r4, #12]
 80145b4:	4620      	mov	r0, r4
 80145b6:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80145ba:	4629      	mov	r1, r5
 80145bc:	4632      	mov	r2, r6
 80145be:	463b      	mov	r3, r7
 80145c0:	47e0      	blx	ip
 80145c2:	3601      	adds	r6, #1
 80145c4:	e7d8      	b.n	8014578 <_DrawVLine+0xac>
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 801467c <_DrawVLine+0x1b0>
 80145cc:	699b      	ldr	r3, [r3, #24]
 80145ce:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 80145d2:	691b      	ldr	r3, [r3, #16]
 80145d4:	4638      	mov	r0, r7
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	4798      	blx	r3
 80145da:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 80145de:	4682      	mov	sl, r0
 80145e0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80145e4:	429e      	cmp	r6, r3
 80145e6:	dc41      	bgt.n	801466c <_DrawVLine+0x1a0>
 80145e8:	9b01      	ldr	r3, [sp, #4]
 80145ea:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80145ee:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80145f2:	4640      	mov	r0, r8
 80145f4:	1ab2      	subs	r2, r6, r2
 80145f6:	1a69      	subs	r1, r5, r1
 80145f8:	f001 f9c1 	bl	801597e <GUI_GetBitmapPixelIndex>
 80145fc:	0e02      	lsrs	r2, r0, #24
 80145fe:	2aff      	cmp	r2, #255	; 0xff
 8014600:	d023      	beq.n	801464a <_DrawVLine+0x17e>
 8014602:	9b01      	ldr	r3, [sp, #4]
 8014604:	f9b3 e006 	ldrsh.w	lr, [r3, #6]
 8014608:	f103 0120 	add.w	r1, r3, #32
 801460c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014610:	ebce 0e06 	rsb	lr, lr, r6
 8014614:	1aeb      	subs	r3, r5, r3
 8014616:	fb0e 3309 	mla	r3, lr, r9, r3
 801461a:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 801461e:	b1e2      	cbz	r2, 801465a <_DrawVLine+0x18e>
 8014620:	43d2      	mvns	r2, r2
 8014622:	4651      	mov	r1, sl
 8014624:	b2d2      	uxtb	r2, r2
 8014626:	f7f9 fb25 	bl	800dc74 <GUI__MixColors>
 801462a:	9b01      	ldr	r3, [sp, #4]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	699b      	ldr	r3, [r3, #24]
 8014630:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8014634:	691b      	ldr	r3, [r3, #16]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	4798      	blx	r3
 801463a:	68e2      	ldr	r2, [r4, #12]
 801463c:	4603      	mov	r3, r0
 801463e:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8014642:	4620      	mov	r0, r4
 8014644:	4629      	mov	r1, r5
 8014646:	4632      	mov	r2, r6
 8014648:	e006      	b.n	8014658 <_DrawVLine+0x18c>
 801464a:	68e3      	ldr	r3, [r4, #12]
 801464c:	4620      	mov	r0, r4
 801464e:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8014652:	4629      	mov	r1, r5
 8014654:	4632      	mov	r2, r6
 8014656:	463b      	mov	r3, r7
 8014658:	47e0      	blx	ip
 801465a:	3601      	adds	r6, #1
 801465c:	e7c0      	b.n	80145e0 <_DrawVLine+0x114>
 801465e:	68e3      	ldr	r3, [r4, #12]
 8014660:	4620      	mov	r0, r4
 8014662:	68df      	ldr	r7, [r3, #12]
 8014664:	4629      	mov	r1, r5
 8014666:	4652      	mov	r2, sl
 8014668:	4633      	mov	r3, r6
 801466a:	47b8      	blx	r7
 801466c:	a801      	add	r0, sp, #4
 801466e:	f7fb fb85 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8014672:	b00b      	add	sp, #44	; 0x2c
 8014674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014678:	200000d8 	.word	0x200000d8
 801467c:	2001d510 	.word	0x2001d510

08014680 <_DrawHLine>:
 8014680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014684:	4604      	mov	r4, r0
 8014686:	b08b      	sub	sp, #44	; 0x2c
 8014688:	468a      	mov	sl, r1
 801468a:	4615      	mov	r5, r2
 801468c:	2100      	movs	r1, #0
 801468e:	2218      	movs	r2, #24
 8014690:	a804      	add	r0, sp, #16
 8014692:	461e      	mov	r6, r3
 8014694:	f002 f918 	bl	80168c8 <memset>
 8014698:	68a0      	ldr	r0, [r4, #8]
 801469a:	f7fb fb61 	bl	800fd60 <GUI_ALLOC_LockH>
 801469e:	b2ab      	uxth	r3, r5
 80146a0:	f8b0 9008 	ldrh.w	r9, [r0, #8]
 80146a4:	8887      	ldrh	r7, [r0, #4]
 80146a6:	9001      	str	r0, [sp, #4]
 80146a8:	1d01      	adds	r1, r0, #4
 80146aa:	f8d0 8014 	ldr.w	r8, [r0, #20]
 80146ae:	9104      	str	r1, [sp, #16]
 80146b0:	a807      	add	r0, sp, #28
 80146b2:	6824      	ldr	r4, [r4, #0]
 80146b4:	f8ad a01c 	strh.w	sl, [sp, #28]
 80146b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80146bc:	f8ad 6020 	strh.w	r6, [sp, #32]
 80146c0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80146c4:	f7fa fa9a 	bl	800ebfc <GUI_RectsIntersect>
 80146c8:	2800      	cmp	r0, #0
 80146ca:	f000 80ab 	beq.w	8014824 <_DrawHLine+0x1a4>
 80146ce:	a804      	add	r0, sp, #16
 80146d0:	f7ff fb92 	bl	8013df8 <_GetClipRect>
 80146d4:	b150      	cbz	r0, 80146ec <_DrawHLine+0x6c>
 80146d6:	68e3      	ldr	r3, [r4, #12]
 80146d8:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 80146dc:	689e      	ldr	r6, [r3, #8]
 80146de:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80146e2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80146e6:	4620      	mov	r0, r4
 80146e8:	47b0      	blx	r6
 80146ea:	e7f0      	b.n	80146ce <_DrawHLine+0x4e>
 80146ec:	9a04      	ldr	r2, [sp, #16]
 80146ee:	6810      	ldr	r0, [r2, #0]
 80146f0:	6851      	ldr	r1, [r2, #4]
 80146f2:	ab02      	add	r3, sp, #8
 80146f4:	c303      	stmia	r3!, {r0, r1}
 80146f6:	a802      	add	r0, sp, #8
 80146f8:	a907      	add	r1, sp, #28
 80146fa:	f7fa fa7f 	bl	800ebfc <GUI_RectsIntersect>
 80146fe:	2800      	cmp	r0, #0
 8014700:	f000 8097 	beq.w	8014832 <_DrawHLine+0x1b2>
 8014704:	a907      	add	r1, sp, #28
 8014706:	a802      	add	r0, sp, #8
 8014708:	f7f9 fa96 	bl	800dc38 <GUI__IntersectRect>
 801470c:	4a4c      	ldr	r2, [pc, #304]	; (8014840 <_DrawHLine+0x1c0>)
 801470e:	6813      	ldr	r3, [r2, #0]
 8014710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014712:	b23f      	sxth	r7, r7
 8014714:	fa0f f989 	sxth.w	r9, r9
 8014718:	ebc7 0909 	rsb	r9, r7, r9
 801471c:	681f      	ldr	r7, [r3, #0]
 801471e:	9b01      	ldr	r3, [sp, #4]
 8014720:	68d9      	ldr	r1, [r3, #12]
 8014722:	f109 0901 	add.w	r9, r9, #1
 8014726:	4692      	mov	sl, r2
 8014728:	b381      	cbz	r1, 801478c <_DrawHLine+0x10c>
 801472a:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
 801472e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014732:	429e      	cmp	r6, r3
 8014734:	dc7d      	bgt.n	8014832 <_DrawHLine+0x1b2>
 8014736:	9b01      	ldr	r3, [sp, #4]
 8014738:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801473c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8014740:	4640      	mov	r0, r8
 8014742:	1a71      	subs	r1, r6, r1
 8014744:	1aaa      	subs	r2, r5, r2
 8014746:	f001 f91a 	bl	801597e <GUI_GetBitmapPixelIndex>
 801474a:	b198      	cbz	r0, 8014774 <_DrawHLine+0xf4>
 801474c:	9b01      	ldr	r3, [sp, #4]
 801474e:	f9bd 700a 	ldrsh.w	r7, [sp, #10]
 8014752:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8014756:	f8da 2000 	ldr.w	r2, [sl]
 801475a:	1a3f      	subs	r7, r7, r0
 801475c:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8014760:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8014762:	1a30      	subs	r0, r6, r0
 8014764:	f103 0120 	add.w	r1, r3, #32
 8014768:	fb07 0309 	mla	r3, r7, r9, r0
 801476c:	6812      	ldr	r2, [r2, #0]
 801476e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014772:	e009      	b.n	8014788 <_DrawHLine+0x108>
 8014774:	f8da 2000 	ldr.w	r2, [sl]
 8014778:	68e1      	ldr	r1, [r4, #12]
 801477a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 801477c:	698f      	ldr	r7, [r1, #24]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	4620      	mov	r0, r4
 8014782:	4631      	mov	r1, r6
 8014784:	462a      	mov	r2, r5
 8014786:	47b8      	blx	r7
 8014788:	3601      	adds	r6, #1
 801478a:	e7d0      	b.n	801472e <_DrawHLine+0xae>
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8014844 <_DrawHLine+0x1c4>
 8014792:	699b      	ldr	r3, [r3, #24]
 8014794:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8014798:	691b      	ldr	r3, [r3, #16]
 801479a:	4638      	mov	r0, r7
 801479c:	685b      	ldr	r3, [r3, #4]
 801479e:	4798      	blx	r3
 80147a0:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
 80147a4:	4682      	mov	sl, r0
 80147a6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80147aa:	429e      	cmp	r6, r3
 80147ac:	dc41      	bgt.n	8014832 <_DrawHLine+0x1b2>
 80147ae:	9b01      	ldr	r3, [sp, #4]
 80147b0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80147b4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80147b8:	4640      	mov	r0, r8
 80147ba:	1aaa      	subs	r2, r5, r2
 80147bc:	1a71      	subs	r1, r6, r1
 80147be:	f001 f8de 	bl	801597e <GUI_GetBitmapPixelIndex>
 80147c2:	0e02      	lsrs	r2, r0, #24
 80147c4:	2aff      	cmp	r2, #255	; 0xff
 80147c6:	d023      	beq.n	8014810 <_DrawHLine+0x190>
 80147c8:	9b01      	ldr	r3, [sp, #4]
 80147ca:	f9b3 e006 	ldrsh.w	lr, [r3, #6]
 80147ce:	f103 0120 	add.w	r1, r3, #32
 80147d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80147d6:	ebce 0e05 	rsb	lr, lr, r5
 80147da:	1af3      	subs	r3, r6, r3
 80147dc:	fb0e 3309 	mla	r3, lr, r9, r3
 80147e0:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 80147e4:	b1e2      	cbz	r2, 8014820 <_DrawHLine+0x1a0>
 80147e6:	43d2      	mvns	r2, r2
 80147e8:	4651      	mov	r1, sl
 80147ea:	b2d2      	uxtb	r2, r2
 80147ec:	f7f9 fa42 	bl	800dc74 <GUI__MixColors>
 80147f0:	9b01      	ldr	r3, [sp, #4]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	699b      	ldr	r3, [r3, #24]
 80147f6:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 80147fa:	691b      	ldr	r3, [r3, #16]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	4798      	blx	r3
 8014800:	68e2      	ldr	r2, [r4, #12]
 8014802:	4603      	mov	r3, r0
 8014804:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8014808:	4620      	mov	r0, r4
 801480a:	4631      	mov	r1, r6
 801480c:	462a      	mov	r2, r5
 801480e:	e006      	b.n	801481e <_DrawHLine+0x19e>
 8014810:	68e3      	ldr	r3, [r4, #12]
 8014812:	4620      	mov	r0, r4
 8014814:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8014818:	4631      	mov	r1, r6
 801481a:	462a      	mov	r2, r5
 801481c:	463b      	mov	r3, r7
 801481e:	47e0      	blx	ip
 8014820:	3601      	adds	r6, #1
 8014822:	e7c0      	b.n	80147a6 <_DrawHLine+0x126>
 8014824:	68e3      	ldr	r3, [r4, #12]
 8014826:	4620      	mov	r0, r4
 8014828:	689f      	ldr	r7, [r3, #8]
 801482a:	4651      	mov	r1, sl
 801482c:	462a      	mov	r2, r5
 801482e:	4633      	mov	r3, r6
 8014830:	47b8      	blx	r7
 8014832:	a801      	add	r0, sp, #4
 8014834:	f7fb faa2 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8014838:	b00b      	add	sp, #44	; 0x2c
 801483a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801483e:	bf00      	nop
 8014840:	200000d8 	.word	0x200000d8
 8014844:	2001d510 	.word	0x2001d510

08014848 <_DrawBitmap>:
 8014848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801484c:	4604      	mov	r4, r0
 801484e:	b09b      	sub	sp, #108	; 0x6c
 8014850:	4617      	mov	r7, r2
 8014852:	4689      	mov	r9, r1
 8014854:	2218      	movs	r2, #24
 8014856:	2100      	movs	r1, #0
 8014858:	a80e      	add	r0, sp, #56	; 0x38
 801485a:	4698      	mov	r8, r3
 801485c:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
 8014860:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8014862:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8014864:	f002 f830 	bl	80168c8 <memset>
 8014868:	68a0      	ldr	r0, [r4, #8]
 801486a:	f7fb fa79 	bl	800fd60 <GUI_ALLOC_LockH>
 801486e:	8883      	ldrh	r3, [r0, #4]
 8014870:	9309      	str	r3, [sp, #36]	; 0x24
 8014872:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014874:	8902      	ldrh	r2, [r0, #8]
 8014876:	9208      	str	r2, [sp, #32]
 8014878:	444b      	add	r3, r9
 801487a:	6942      	ldr	r2, [r0, #20]
 801487c:	9207      	str	r2, [sp, #28]
 801487e:	b29b      	uxth	r3, r3
 8014880:	f108 32ff 	add.w	r2, r8, #4294967295
 8014884:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8014888:	4413      	add	r3, r2
 801488a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 801488e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8014892:	1d01      	adds	r1, r0, #4
 8014894:	900b      	str	r0, [sp, #44]	; 0x2c
 8014896:	443b      	add	r3, r7
 8014898:	a811      	add	r0, sp, #68	; 0x44
 801489a:	910e      	str	r1, [sp, #56]	; 0x38
 801489c:	6824      	ldr	r4, [r4, #0]
 801489e:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
 80148a2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80148a6:	f7fa f9a9 	bl	800ebfc <GUI_RectsIntersect>
 80148aa:	2800      	cmp	r0, #0
 80148ac:	f000 81aa 	beq.w	8014c04 <_DrawBitmap+0x3bc>
 80148b0:	a80e      	add	r0, sp, #56	; 0x38
 80148b2:	f7ff faa1 	bl	8013df8 <_GetClipRect>
 80148b6:	2800      	cmp	r0, #0
 80148b8:	d024      	beq.n	8014904 <_DrawBitmap+0xbc>
 80148ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80148bc:	9301      	str	r3, [sp, #4]
 80148be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80148c0:	9303      	str	r3, [sp, #12]
 80148c2:	ab0f      	add	r3, sp, #60	; 0x3c
 80148c4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80148c6:	9304      	str	r3, [sp, #16]
 80148c8:	ab14      	add	r3, sp, #80	; 0x50
 80148ca:	9202      	str	r2, [sp, #8]
 80148cc:	9305      	str	r3, [sp, #20]
 80148ce:	9600      	str	r6, [sp, #0]
 80148d0:	4648      	mov	r0, r9
 80148d2:	4639      	mov	r1, r7
 80148d4:	4642      	mov	r2, r8
 80148d6:	465b      	mov	r3, fp
 80148d8:	f7ff fb0b 	bl	8013ef2 <_GetClipParam>
 80148dc:	2800      	cmp	r0, #0
 80148de:	d1e7      	bne.n	80148b0 <_DrawBitmap+0x68>
 80148e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80148e2:	68e2      	ldr	r2, [r4, #12]
 80148e4:	9505      	str	r5, [sp, #20]
 80148e6:	e88d 0048 	stmia.w	sp, {r3, r6}
 80148ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80148ec:	9302      	str	r3, [sp, #8]
 80148ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80148f0:	9303      	str	r3, [sp, #12]
 80148f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80148f4:	9304      	str	r3, [sp, #16]
 80148f6:	a915      	add	r1, sp, #84	; 0x54
 80148f8:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80148fc:	4620      	mov	r0, r4
 80148fe:	c90e      	ldmia	r1, {r1, r2, r3}
 8014900:	47e0      	blx	ip
 8014902:	e7d5      	b.n	80148b0 <_DrawBitmap+0x68>
 8014904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014906:	6810      	ldr	r0, [r2, #0]
 8014908:	6851      	ldr	r1, [r2, #4]
 801490a:	ab0c      	add	r3, sp, #48	; 0x30
 801490c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8014910:	c303      	stmia	r3!, {r0, r1}
 8014912:	4650      	mov	r0, sl
 8014914:	a911      	add	r1, sp, #68	; 0x44
 8014916:	f7fa f971 	bl	800ebfc <GUI_RectsIntersect>
 801491a:	2800      	cmp	r0, #0
 801491c:	f000 8183 	beq.w	8014c26 <_DrawBitmap+0x3de>
 8014920:	4650      	mov	r0, sl
 8014922:	a911      	add	r1, sp, #68	; 0x44
 8014924:	f7f9 f988 	bl	800dc38 <GUI__IntersectRect>
 8014928:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801492a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801492c:	9201      	str	r2, [sp, #4]
 801492e:	9302      	str	r3, [sp, #8]
 8014930:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8014932:	9203      	str	r2, [sp, #12]
 8014934:	ab14      	add	r3, sp, #80	; 0x50
 8014936:	9305      	str	r3, [sp, #20]
 8014938:	9600      	str	r6, [sp, #0]
 801493a:	f8cd a010 	str.w	sl, [sp, #16]
 801493e:	4648      	mov	r0, r9
 8014940:	4639      	mov	r1, r7
 8014942:	4642      	mov	r2, r8
 8014944:	465b      	mov	r3, fp
 8014946:	f7ff fad4 	bl	8013ef2 <_GetClipParam>
 801494a:	2800      	cmp	r0, #0
 801494c:	f040 816b 	bne.w	8014c26 <_DrawBitmap+0x3de>
 8014950:	9b08      	ldr	r3, [sp, #32]
 8014952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014954:	fa0f fb83 	sxth.w	fp, r3
 8014958:	b213      	sxth	r3, r2
 801495a:	ebc3 0b0b 	rsb	fp, r3, fp
 801495e:	6923      	ldr	r3, [r4, #16]
 8014960:	689b      	ldr	r3, [r3, #8]
 8014962:	4798      	blx	r3
 8014964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014966:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	; 0x32
 801496a:	68db      	ldr	r3, [r3, #12]
 801496c:	f10b 0b01 	add.w	fp, fp, #1
 8014970:	4682      	mov	sl, r0
 8014972:	2b00      	cmp	r3, #0
 8014974:	f000 8092 	beq.w	8014a9c <_DrawBitmap+0x254>
 8014978:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801497c:	429f      	cmp	r7, r3
 801497e:	f300 8152 	bgt.w	8014c26 <_DrawBitmap+0x3de>
 8014982:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8014986:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801498a:	4598      	cmp	r8, r3
 801498c:	f300 8084 	bgt.w	8014a98 <_DrawBitmap+0x250>
 8014990:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014992:	9926      	ldr	r1, [sp, #152]	; 0x98
 8014994:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014996:	1afb      	subs	r3, r7, r3
 8014998:	9300      	str	r3, [sp, #0]
 801499a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801499c:	4630      	mov	r0, r6
 801499e:	ebc3 0308 	rsb	r3, r3, r8
 80149a2:	f000 ffaa 	bl	80158fa <GUI_GetBitmapPixelIndexEx>
 80149a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80149a8:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80149ac:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80149b0:	4603      	mov	r3, r0
 80149b2:	ebc1 0108 	rsb	r1, r1, r8
 80149b6:	9807      	ldr	r0, [sp, #28]
 80149b8:	9306      	str	r3, [sp, #24]
 80149ba:	1aba      	subs	r2, r7, r2
 80149bc:	f000 ffdf 	bl	801597e <GUI_GetBitmapPixelIndex>
 80149c0:	f8df e274 	ldr.w	lr, [pc, #628]	; 8014c38 <_DrawBitmap+0x3f0>
 80149c4:	9b06      	ldr	r3, [sp, #24]
 80149c6:	b358      	cbz	r0, 8014a20 <_DrawBitmap+0x1d8>
 80149c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80149ca:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80149ce:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80149d2:	f100 0220 	add.w	r2, r0, #32
 80149d6:	f8de 0000 	ldr.w	r0, [lr]
 80149da:	7c00      	ldrb	r0, [r0, #16]
 80149dc:	ebcc 0c07 	rsb	ip, ip, r7
 80149e0:	ebc1 0108 	rsb	r1, r1, r8
 80149e4:	fb0c 110b 	mla	r1, ip, fp, r1
 80149e8:	f000 0003 	and.w	r0, r0, #3
 80149ec:	b14d      	cbz	r5, 8014a02 <_DrawBitmap+0x1ba>
 80149ee:	2802      	cmp	r0, #2
 80149f0:	d002      	beq.n	80149f8 <_DrawBitmap+0x1b0>
 80149f2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80149f6:	e006      	b.n	8014a06 <_DrawBitmap+0x1be>
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d04a      	beq.n	8014a92 <_DrawBitmap+0x24a>
 80149fc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8014a00:	e00b      	b.n	8014a1a <_DrawBitmap+0x1d2>
 8014a02:	2802      	cmp	r0, #2
 8014a04:	d004      	beq.n	8014a10 <_DrawBitmap+0x1c8>
 8014a06:	2803      	cmp	r0, #3
 8014a08:	d005      	beq.n	8014a16 <_DrawBitmap+0x1ce>
 8014a0a:	2801      	cmp	r0, #1
 8014a0c:	d105      	bne.n	8014a1a <_DrawBitmap+0x1d2>
 8014a0e:	e002      	b.n	8014a16 <_DrawBitmap+0x1ce>
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d03e      	beq.n	8014a92 <_DrawBitmap+0x24a>
 8014a14:	e001      	b.n	8014a1a <_DrawBitmap+0x1d2>
 8014a16:	ea83 030a 	eor.w	r3, r3, sl
 8014a1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014a1e:	e038      	b.n	8014a92 <_DrawBitmap+0x24a>
 8014a20:	f8de 2000 	ldr.w	r2, [lr]
 8014a24:	7c12      	ldrb	r2, [r2, #16]
 8014a26:	f002 0203 	and.w	r2, r2, #3
 8014a2a:	b1d5      	cbz	r5, 8014a62 <_DrawBitmap+0x21a>
 8014a2c:	2a02      	cmp	r2, #2
 8014a2e:	d007      	beq.n	8014a40 <_DrawBitmap+0x1f8>
 8014a30:	2a03      	cmp	r2, #3
 8014a32:	68e1      	ldr	r1, [r4, #12]
 8014a34:	d00e      	beq.n	8014a54 <_DrawBitmap+0x20c>
 8014a36:	2a01      	cmp	r2, #1
 8014a38:	d00c      	beq.n	8014a54 <_DrawBitmap+0x20c>
 8014a3a:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8014a3e:	e003      	b.n	8014a48 <_DrawBitmap+0x200>
 8014a40:	b33b      	cbz	r3, 8014a92 <_DrawBitmap+0x24a>
 8014a42:	68e2      	ldr	r2, [r4, #12]
 8014a44:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8014a48:	4620      	mov	r0, r4
 8014a4a:	4641      	mov	r1, r8
 8014a4c:	463a      	mov	r2, r7
 8014a4e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8014a52:	e01d      	b.n	8014a90 <_DrawBitmap+0x248>
 8014a54:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8014a58:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8014a5c:	4620      	mov	r0, r4
 8014a5e:	4641      	mov	r1, r8
 8014a60:	e013      	b.n	8014a8a <_DrawBitmap+0x242>
 8014a62:	2a02      	cmp	r2, #2
 8014a64:	d009      	beq.n	8014a7a <_DrawBitmap+0x232>
 8014a66:	68e1      	ldr	r1, [r4, #12]
 8014a68:	2a03      	cmp	r2, #3
 8014a6a:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8014a6e:	4620      	mov	r0, r4
 8014a70:	4641      	mov	r1, r8
 8014a72:	d00a      	beq.n	8014a8a <_DrawBitmap+0x242>
 8014a74:	2a01      	cmp	r2, #1
 8014a76:	d106      	bne.n	8014a86 <_DrawBitmap+0x23e>
 8014a78:	e007      	b.n	8014a8a <_DrawBitmap+0x242>
 8014a7a:	b153      	cbz	r3, 8014a92 <_DrawBitmap+0x24a>
 8014a7c:	68e2      	ldr	r2, [r4, #12]
 8014a7e:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8014a82:	4620      	mov	r0, r4
 8014a84:	4641      	mov	r1, r8
 8014a86:	463a      	mov	r2, r7
 8014a88:	e002      	b.n	8014a90 <_DrawBitmap+0x248>
 8014a8a:	463a      	mov	r2, r7
 8014a8c:	ea83 030a 	eor.w	r3, r3, sl
 8014a90:	47e0      	blx	ip
 8014a92:	f108 0801 	add.w	r8, r8, #1
 8014a96:	e776      	b.n	8014986 <_DrawBitmap+0x13e>
 8014a98:	3701      	adds	r7, #1
 8014a9a:	e76d      	b.n	8014978 <_DrawBitmap+0x130>
 8014a9c:	4699      	mov	r9, r3
 8014a9e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8014aa2:	429f      	cmp	r7, r3
 8014aa4:	f300 80bf 	bgt.w	8014c26 <_DrawBitmap+0x3de>
 8014aa8:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8014aac:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8014ab0:	4598      	cmp	r8, r3
 8014ab2:	f300 80a5 	bgt.w	8014c00 <_DrawBitmap+0x3b8>
 8014ab6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014ab8:	9926      	ldr	r1, [sp, #152]	; 0x98
 8014aba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014abc:	1afb      	subs	r3, r7, r3
 8014abe:	9300      	str	r3, [sp, #0]
 8014ac0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ac2:	4630      	mov	r0, r6
 8014ac4:	ebc3 0308 	rsb	r3, r3, r8
 8014ac8:	f000 ff17 	bl	80158fa <GUI_GetBitmapPixelIndexEx>
 8014acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014ace:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8014ad2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	1aba      	subs	r2, r7, r2
 8014ada:	9807      	ldr	r0, [sp, #28]
 8014adc:	9306      	str	r3, [sp, #24]
 8014ade:	ebc1 0108 	rsb	r1, r1, r8
 8014ae2:	f000 ff4c 	bl	801597e <GUI_GetBitmapPixelIndex>
 8014ae6:	0e02      	lsrs	r2, r0, #24
 8014ae8:	2aff      	cmp	r2, #255	; 0xff
 8014aea:	9b06      	ldr	r3, [sp, #24]
 8014aec:	d04c      	beq.n	8014b88 <_DrawBitmap+0x340>
 8014aee:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8014af2:	f9bc e006 	ldrsh.w	lr, [ip, #6]
 8014af6:	f10c 0120 	add.w	r1, ip, #32
 8014afa:	f9bc c004 	ldrsh.w	ip, [ip, #4]
 8014afe:	ebce 0e07 	rsb	lr, lr, r7
 8014b02:	ebcc 0c08 	rsb	ip, ip, r8
 8014b06:	fb0e ce0b 	mla	lr, lr, fp, ip
 8014b0a:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8014c38 <_DrawBitmap+0x3f0>
 8014b0e:	f8dc c000 	ldr.w	ip, [ip]
 8014b12:	f89c c010 	ldrb.w	ip, [ip, #16]
 8014b16:	f00c 0c03 	and.w	ip, ip, #3
 8014b1a:	b185      	cbz	r5, 8014b3e <_DrawBitmap+0x2f6>
 8014b1c:	f1bc 0f02 	cmp.w	ip, #2
 8014b20:	d006      	beq.n	8014b30 <_DrawBitmap+0x2e8>
 8014b22:	f1bc 0f03 	cmp.w	ip, #3
 8014b26:	d007      	beq.n	8014b38 <_DrawBitmap+0x2f0>
 8014b28:	f1bc 0f01 	cmp.w	ip, #1
 8014b2c:	d101      	bne.n	8014b32 <_DrawBitmap+0x2ea>
 8014b2e:	e003      	b.n	8014b38 <_DrawBitmap+0x2f0>
 8014b30:	b1c3      	cbz	r3, 8014b64 <_DrawBitmap+0x31c>
 8014b32:	f855 9023 	ldr.w	r9, [r5, r3, lsl #2]
 8014b36:	e013      	b.n	8014b60 <_DrawBitmap+0x318>
 8014b38:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8014b3c:	e00e      	b.n	8014b5c <_DrawBitmap+0x314>
 8014b3e:	f1bc 0f02 	cmp.w	ip, #2
 8014b42:	d006      	beq.n	8014b52 <_DrawBitmap+0x30a>
 8014b44:	f1bc 0f03 	cmp.w	ip, #3
 8014b48:	d008      	beq.n	8014b5c <_DrawBitmap+0x314>
 8014b4a:	f1bc 0f01 	cmp.w	ip, #1
 8014b4e:	d101      	bne.n	8014b54 <_DrawBitmap+0x30c>
 8014b50:	e004      	b.n	8014b5c <_DrawBitmap+0x314>
 8014b52:	b13b      	cbz	r3, 8014b64 <_DrawBitmap+0x31c>
 8014b54:	f841 302e 	str.w	r3, [r1, lr, lsl #2]
 8014b58:	4699      	mov	r9, r3
 8014b5a:	e003      	b.n	8014b64 <_DrawBitmap+0x31c>
 8014b5c:	ea83 090a 	eor.w	r9, r3, sl
 8014b60:	f841 902e 	str.w	r9, [r1, lr, lsl #2]
 8014b64:	2a00      	cmp	r2, #0
 8014b66:	d048      	beq.n	8014bfa <_DrawBitmap+0x3b2>
 8014b68:	43d2      	mvns	r2, r2
 8014b6a:	4649      	mov	r1, r9
 8014b6c:	b2d2      	uxtb	r2, r2
 8014b6e:	f7f9 f881 	bl	800dc74 <GUI__MixColors>
 8014b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	699a      	ldr	r2, [r3, #24]
 8014b78:	4b2e      	ldr	r3, [pc, #184]	; (8014c34 <_DrawBitmap+0x3ec>)
 8014b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b7e:	691b      	ldr	r3, [r3, #16]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	4798      	blx	r3
 8014b84:	4603      	mov	r3, r0
 8014b86:	e02d      	b.n	8014be4 <_DrawBitmap+0x39c>
 8014b88:	4a2b      	ldr	r2, [pc, #172]	; (8014c38 <_DrawBitmap+0x3f0>)
 8014b8a:	6812      	ldr	r2, [r2, #0]
 8014b8c:	7c12      	ldrb	r2, [r2, #16]
 8014b8e:	f002 0203 	and.w	r2, r2, #3
 8014b92:	b1d5      	cbz	r5, 8014bca <_DrawBitmap+0x382>
 8014b94:	2a02      	cmp	r2, #2
 8014b96:	d007      	beq.n	8014ba8 <_DrawBitmap+0x360>
 8014b98:	2a03      	cmp	r2, #3
 8014b9a:	68e1      	ldr	r1, [r4, #12]
 8014b9c:	d00e      	beq.n	8014bbc <_DrawBitmap+0x374>
 8014b9e:	2a01      	cmp	r2, #1
 8014ba0:	d00c      	beq.n	8014bbc <_DrawBitmap+0x374>
 8014ba2:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8014ba6:	e003      	b.n	8014bb0 <_DrawBitmap+0x368>
 8014ba8:	b33b      	cbz	r3, 8014bfa <_DrawBitmap+0x3b2>
 8014baa:	68e2      	ldr	r2, [r4, #12]
 8014bac:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8014bb0:	4620      	mov	r0, r4
 8014bb2:	4641      	mov	r1, r8
 8014bb4:	463a      	mov	r2, r7
 8014bb6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8014bba:	e01d      	b.n	8014bf8 <_DrawBitmap+0x3b0>
 8014bbc:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8014bc0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	4641      	mov	r1, r8
 8014bc8:	e013      	b.n	8014bf2 <_DrawBitmap+0x3aa>
 8014bca:	2a02      	cmp	r2, #2
 8014bcc:	d009      	beq.n	8014be2 <_DrawBitmap+0x39a>
 8014bce:	68e1      	ldr	r1, [r4, #12]
 8014bd0:	2a03      	cmp	r2, #3
 8014bd2:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8014bd6:	4620      	mov	r0, r4
 8014bd8:	4641      	mov	r1, r8
 8014bda:	d00a      	beq.n	8014bf2 <_DrawBitmap+0x3aa>
 8014bdc:	2a01      	cmp	r2, #1
 8014bde:	d106      	bne.n	8014bee <_DrawBitmap+0x3a6>
 8014be0:	e007      	b.n	8014bf2 <_DrawBitmap+0x3aa>
 8014be2:	b153      	cbz	r3, 8014bfa <_DrawBitmap+0x3b2>
 8014be4:	68e2      	ldr	r2, [r4, #12]
 8014be6:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8014bea:	4620      	mov	r0, r4
 8014bec:	4641      	mov	r1, r8
 8014bee:	463a      	mov	r2, r7
 8014bf0:	e002      	b.n	8014bf8 <_DrawBitmap+0x3b0>
 8014bf2:	463a      	mov	r2, r7
 8014bf4:	ea83 030a 	eor.w	r3, r3, sl
 8014bf8:	47e0      	blx	ip
 8014bfa:	f108 0801 	add.w	r8, r8, #1
 8014bfe:	e755      	b.n	8014aac <_DrawBitmap+0x264>
 8014c00:	3701      	adds	r7, #1
 8014c02:	e74c      	b.n	8014a9e <_DrawBitmap+0x256>
 8014c04:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014c06:	68e3      	ldr	r3, [r4, #12]
 8014c08:	9202      	str	r2, [sp, #8]
 8014c0a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8014c0c:	9203      	str	r2, [sp, #12]
 8014c0e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8014c10:	9204      	str	r2, [sp, #16]
 8014c12:	f8cd b000 	str.w	fp, [sp]
 8014c16:	9601      	str	r6, [sp, #4]
 8014c18:	9505      	str	r5, [sp, #20]
 8014c1a:	685d      	ldr	r5, [r3, #4]
 8014c1c:	4620      	mov	r0, r4
 8014c1e:	4649      	mov	r1, r9
 8014c20:	463a      	mov	r2, r7
 8014c22:	4643      	mov	r3, r8
 8014c24:	47a8      	blx	r5
 8014c26:	a80b      	add	r0, sp, #44	; 0x2c
 8014c28:	f7fb f8a8 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8014c2c:	b01b      	add	sp, #108	; 0x6c
 8014c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c32:	bf00      	nop
 8014c34:	2001d510 	.word	0x2001d510
 8014c38:	200000d8 	.word	0x200000d8

08014c3c <_Link>:
 8014c3c:	b513      	push	{r0, r1, r4, lr}
 8014c3e:	f7fb f88f 	bl	800fd60 <GUI_ALLOC_LockH>
 8014c42:	ac02      	add	r4, sp, #8
 8014c44:	f844 0d04 	str.w	r0, [r4, #-4]!
 8014c48:	6800      	ldr	r0, [r0, #0]
 8014c4a:	f7fa fac1 	bl	800f1d0 <GUI_DEVICE_Link>
 8014c4e:	4620      	mov	r0, r4
 8014c50:	f7fb f894 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8014c54:	b002      	add	sp, #8
 8014c56:	bd10      	pop	{r4, pc}

08014c58 <_CreateBuffer>:
 8014c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c5a:	6943      	ldr	r3, [r0, #20]
 8014c5c:	4605      	mov	r5, r0
 8014c5e:	8818      	ldrh	r0, [r3, #0]
 8014c60:	300d      	adds	r0, #13
 8014c62:	0080      	lsls	r0, r0, #2
 8014c64:	460e      	mov	r6, r1
 8014c66:	f7fb facf 	bl	8010208 <GUI_ALLOC_AllocNoInit>
 8014c6a:	4607      	mov	r7, r0
 8014c6c:	b908      	cbnz	r0, 8014c72 <_CreateBuffer+0x1a>
 8014c6e:	2000      	movs	r0, #0
 8014c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c72:	f7fb f875 	bl	800fd60 <GUI_ALLOC_LockH>
 8014c76:	682b      	ldr	r3, [r5, #0]
 8014c78:	4604      	mov	r4, r0
 8014c7a:	6998      	ldr	r0, [r3, #24]
 8014c7c:	f7fa fa5a 	bl	800f134 <GUI_DEVICE__GetpDriver>
 8014c80:	2800      	cmp	r0, #0
 8014c82:	d0f4      	beq.n	8014c6e <_CreateBuffer+0x16>
 8014c84:	68c3      	ldr	r3, [r0, #12]
 8014c86:	2108      	movs	r1, #8
 8014c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c8a:	4798      	blx	r3
 8014c8c:	2802      	cmp	r0, #2
 8014c8e:	dd0b      	ble.n	8014ca8 <_CreateBuffer+0x50>
 8014c90:	2804      	cmp	r0, #4
 8014c92:	dd06      	ble.n	8014ca2 <_CreateBuffer+0x4a>
 8014c94:	2808      	cmp	r0, #8
 8014c96:	dd06      	ble.n	8014ca6 <_CreateBuffer+0x4e>
 8014c98:	2811      	cmp	r0, #17
 8014c9a:	bfb4      	ite	lt
 8014c9c:	2010      	movlt	r0, #16
 8014c9e:	2020      	movge	r0, #32
 8014ca0:	e002      	b.n	8014ca8 <_CreateBuffer+0x50>
 8014ca2:	2004      	movs	r0, #4
 8014ca4:	e000      	b.n	8014ca8 <_CreateBuffer+0x50>
 8014ca6:	2008      	movs	r0, #8
 8014ca8:	2808      	cmp	r0, #8
 8014caa:	61a0      	str	r0, [r4, #24]
 8014cac:	dd04      	ble.n	8014cb8 <_CreateBuffer+0x60>
 8014cae:	2810      	cmp	r0, #16
 8014cb0:	bfcc      	ite	gt
 8014cb2:	2304      	movgt	r3, #4
 8014cb4:	2302      	movle	r3, #2
 8014cb6:	e000      	b.n	8014cba <_CreateBuffer+0x62>
 8014cb8:	2301      	movs	r3, #1
 8014cba:	696a      	ldr	r2, [r5, #20]
 8014cbc:	6123      	str	r3, [r4, #16]
 8014cbe:	8812      	ldrh	r2, [r2, #0]
 8014cc0:	61e2      	str	r2, [r4, #28]
 8014cc2:	4353      	muls	r3, r2
 8014cc4:	6163      	str	r3, [r4, #20]
 8014cc6:	f7fb f9f5 	bl	80100b4 <GUI_ALLOC_GetMaxSize>
 8014cca:	6963      	ldr	r3, [r4, #20]
 8014ccc:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 8014cd0:	4283      	cmp	r3, r0
 8014cd2:	f04f 0200 	mov.w	r2, #0
 8014cd6:	bfc8      	it	gt
 8014cd8:	6160      	strgt	r0, [r4, #20]
 8014cda:	2e01      	cmp	r6, #1
 8014cdc:	60e2      	str	r2, [r4, #12]
 8014cde:	bf18      	it	ne
 8014ce0:	69e2      	ldrne	r2, [r4, #28]
 8014ce2:	60a7      	str	r7, [r4, #8]
 8014ce4:	bf18      	it	ne
 8014ce6:	f102 4280 	addne.w	r2, r2, #1073741824	; 0x40000000
 8014cea:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8014cee:	bf18      	it	ne
 8014cf0:	f102 32ff 	addne.w	r2, r2, #4294967295
 8014cf4:	6023      	str	r3, [r4, #0]
 8014cf6:	bf18      	it	ne
 8014cf8:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 8014cfc:	6063      	str	r3, [r4, #4]
 8014cfe:	4620      	mov	r0, r4
 8014d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014d02 <_Unlink>:
 8014d02:	b513      	push	{r0, r1, r4, lr}
 8014d04:	f7fb f82c 	bl	800fd60 <GUI_ALLOC_LockH>
 8014d08:	ac02      	add	r4, sp, #8
 8014d0a:	f844 0d04 	str.w	r0, [r4, #-4]!
 8014d0e:	6800      	ldr	r0, [r0, #0]
 8014d10:	f7fa fa48 	bl	800f1a4 <GUI_DEVICE_Unlink>
 8014d14:	4620      	mov	r0, r4
 8014d16:	f7fb f831 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8014d1a:	b002      	add	sp, #8
 8014d1c:	bd10      	pop	{r4, pc}

08014d1e <_GetBkIndex.isra.0>:
 8014d1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d22:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8014d26:	4540      	cmp	r0, r8
 8014d28:	4606      	mov	r6, r0
 8014d2a:	460d      	mov	r5, r1
 8014d2c:	4691      	mov	r9, r2
 8014d2e:	461c      	mov	r4, r3
 8014d30:	da04      	bge.n	8014d3c <_GetBkIndex.isra.0+0x1e>
 8014d32:	f8d9 0000 	ldr.w	r0, [r9]
 8014d36:	bb28      	cbnz	r0, 8014d84 <_GetBkIndex.isra.0+0x66>
 8014d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014d40:	4298      	cmp	r0, r3
 8014d42:	dcf6      	bgt.n	8014d32 <_GetBkIndex.isra.0+0x14>
 8014d44:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 8014d48:	42b9      	cmp	r1, r7
 8014d4a:	dbf2      	blt.n	8014d32 <_GetBkIndex.isra.0+0x14>
 8014d4c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014d50:	4299      	cmp	r1, r3
 8014d52:	dcee      	bgt.n	8014d32 <_GetBkIndex.isra.0+0x14>
 8014d54:	ebc8 0800 	rsb	r8, r8, r0
 8014d58:	1bcf      	subs	r7, r1, r7
 8014d5a:	6960      	ldr	r0, [r4, #20]
 8014d5c:	4641      	mov	r1, r8
 8014d5e:	463a      	mov	r2, r7
 8014d60:	f000 fe0d 	bl	801597e <GUI_GetBitmapPixelIndex>
 8014d64:	2800      	cmp	r0, #0
 8014d66:	d0e4      	beq.n	8014d32 <_GetBkIndex.isra.0+0x14>
 8014d68:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8014d6c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014d70:	1a8a      	subs	r2, r1, r2
 8014d72:	fb02 7707 	mla	r7, r2, r7, r7
 8014d76:	f104 0320 	add.w	r3, r4, #32
 8014d7a:	44b8      	add	r8, r7
 8014d7c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d84:	68c3      	ldr	r3, [r0, #12]
 8014d86:	4631      	mov	r1, r6
 8014d88:	695b      	ldr	r3, [r3, #20]
 8014d8a:	462a      	mov	r2, r5
 8014d8c:	4798      	blx	r3
 8014d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014d92 <_GetBkIndexAlpha.isra.2>:
 8014d92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d96:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8014d9a:	42b0      	cmp	r0, r6
 8014d9c:	4680      	mov	r8, r0
 8014d9e:	460f      	mov	r7, r1
 8014da0:	4691      	mov	r9, r2
 8014da2:	461d      	mov	r5, r3
 8014da4:	db14      	blt.n	8014dd0 <_GetBkIndexAlpha.isra.2+0x3e>
 8014da6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014daa:	4298      	cmp	r0, r3
 8014dac:	dc10      	bgt.n	8014dd0 <_GetBkIndexAlpha.isra.2+0x3e>
 8014dae:	f9b5 4006 	ldrsh.w	r4, [r5, #6]
 8014db2:	42a1      	cmp	r1, r4
 8014db4:	db0c      	blt.n	8014dd0 <_GetBkIndexAlpha.isra.2+0x3e>
 8014db6:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8014dba:	4299      	cmp	r1, r3
 8014dbc:	dc08      	bgt.n	8014dd0 <_GetBkIndexAlpha.isra.2+0x3e>
 8014dbe:	1b86      	subs	r6, r0, r6
 8014dc0:	6968      	ldr	r0, [r5, #20]
 8014dc2:	1b0c      	subs	r4, r1, r4
 8014dc4:	b130      	cbz	r0, 8014dd4 <_GetBkIndexAlpha.isra.2+0x42>
 8014dc6:	4631      	mov	r1, r6
 8014dc8:	4622      	mov	r2, r4
 8014dca:	f000 fdd8 	bl	801597e <GUI_GetBitmapPixelIndex>
 8014dce:	e003      	b.n	8014dd8 <_GetBkIndexAlpha.isra.2+0x46>
 8014dd0:	2400      	movs	r4, #0
 8014dd2:	4626      	mov	r6, r4
 8014dd4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8014dd8:	0e00      	lsrs	r0, r0, #24
 8014dda:	28ff      	cmp	r0, #255	; 0xff
 8014ddc:	d109      	bne.n	8014df2 <_GetBkIndexAlpha.isra.2+0x60>
 8014dde:	f8d9 0000 	ldr.w	r0, [r9]
 8014de2:	b190      	cbz	r0, 8014e0a <_GetBkIndexAlpha.isra.2+0x78>
 8014de4:	68c3      	ldr	r3, [r0, #12]
 8014de6:	4641      	mov	r1, r8
 8014de8:	695b      	ldr	r3, [r3, #20]
 8014dea:	463a      	mov	r2, r7
 8014dec:	4798      	blx	r3
 8014dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014df2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014df6:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014dfa:	1a8a      	subs	r2, r1, r2
 8014dfc:	fb02 4404 	mla	r4, r2, r4, r4
 8014e00:	f105 0320 	add.w	r3, r5, #32
 8014e04:	4426      	add	r6, r4
 8014e06:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08014e10 <_DoColorConversion.isra.3>:
 8014e10:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8014e14:	4681      	mov	r9, r0
 8014e16:	460e      	mov	r6, r1
 8014e18:	f7fa ffa2 	bl	800fd60 <GUI_ALLOC_LockH>
 8014e1c:	ad02      	add	r5, sp, #8
 8014e1e:	68c4      	ldr	r4, [r0, #12]
 8014e20:	6803      	ldr	r3, [r0, #0]
 8014e22:	f845 0d08 	str.w	r0, [r5, #-8]!
 8014e26:	4668      	mov	r0, sp
 8014e28:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8014e2c:	f7fa ffa6 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8014e30:	b114      	cbz	r4, 8014e38 <_DoColorConversion.isra.3+0x28>
 8014e32:	4620      	mov	r0, r4
 8014e34:	f7fa ffce 	bl	800fdd4 <GUI_ALLOC_Free>
 8014e38:	6833      	ldr	r3, [r6, #0]
 8014e3a:	6818      	ldr	r0, [r3, #0]
 8014e3c:	0080      	lsls	r0, r0, #2
 8014e3e:	f7fb f9fc 	bl	801023a <GUI_ALLOC_AllocZero>
 8014e42:	4680      	mov	r8, r0
 8014e44:	b318      	cbz	r0, 8014e8e <_DoColorConversion.isra.3+0x7e>
 8014e46:	f7fa ff8b 	bl	800fd60 <GUI_ALLOC_LockH>
 8014e4a:	2400      	movs	r4, #0
 8014e4c:	4607      	mov	r7, r0
 8014e4e:	9001      	str	r0, [sp, #4]
 8014e50:	6833      	ldr	r3, [r6, #0]
 8014e52:	681a      	ldr	r2, [r3, #0]
 8014e54:	4294      	cmp	r4, r2
 8014e56:	da0c      	bge.n	8014e72 <_DoColorConversion.isra.3+0x62>
 8014e58:	4a0f      	ldr	r2, [pc, #60]	; (8014e98 <_DoColorConversion.isra.3+0x88>)
 8014e5a:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
 8014e5e:	6911      	ldr	r1, [r2, #16]
 8014e60:	689a      	ldr	r2, [r3, #8]
 8014e62:	680b      	ldr	r3, [r1, #0]
 8014e64:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8014e68:	4798      	blx	r3
 8014e6a:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8014e6e:	3401      	adds	r4, #1
 8014e70:	e7ee      	b.n	8014e50 <_DoColorConversion.isra.3+0x40>
 8014e72:	a801      	add	r0, sp, #4
 8014e74:	f7fa ff82 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8014e78:	4648      	mov	r0, r9
 8014e7a:	f7fa ff71 	bl	800fd60 <GUI_ALLOC_LockH>
 8014e7e:	9000      	str	r0, [sp, #0]
 8014e80:	f8c0 800c 	str.w	r8, [r0, #12]
 8014e84:	4668      	mov	r0, sp
 8014e86:	f7fa ff79 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8014e8a:	2000      	movs	r0, #0
 8014e8c:	e000      	b.n	8014e90 <_DoColorConversion.isra.3+0x80>
 8014e8e:	2001      	movs	r0, #1
 8014e90:	b002      	add	sp, #8
 8014e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e96:	bf00      	nop
 8014e98:	2001d510 	.word	0x2001d510

08014e9c <_GetDeviceRect>:
 8014e9c:	b538      	push	{r3, r4, r5, lr}
 8014e9e:	4a0c      	ldr	r2, [pc, #48]	; (8014ed0 <_GetDeviceRect+0x34>)
 8014ea0:	6983      	ldr	r3, [r0, #24]
 8014ea2:	56d2      	ldrsb	r2, [r2, r3]
 8014ea4:	2a01      	cmp	r2, #1
 8014ea6:	4605      	mov	r5, r0
 8014ea8:	460c      	mov	r4, r1
 8014eaa:	dd0d      	ble.n	8014ec8 <_GetDeviceRect+0x2c>
 8014eac:	2200      	movs	r2, #0
 8014eae:	804a      	strh	r2, [r1, #2]
 8014eb0:	800a      	strh	r2, [r1, #0]
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	f7f8 f92e 	bl	800d114 <LCD_GetXSizeEx>
 8014eb8:	3801      	subs	r0, #1
 8014eba:	80a0      	strh	r0, [r4, #4]
 8014ebc:	69a8      	ldr	r0, [r5, #24]
 8014ebe:	f7f8 f92c 	bl	800d11a <LCD_GetYSizeEx>
 8014ec2:	3801      	subs	r0, #1
 8014ec4:	80e0      	strh	r0, [r4, #6]
 8014ec6:	bd38      	pop	{r3, r4, r5, pc}
 8014ec8:	68c3      	ldr	r3, [r0, #12]
 8014eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ecc:	4798      	blx	r3
 8014ece:	bd38      	pop	{r3, r4, r5, pc}
 8014ed0:	2001d4e0 	.word	0x2001d4e0

08014ed4 <_FlushBuffer.isra.5>:
 8014ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ed6:	460c      	mov	r4, r1
 8014ed8:	68c9      	ldr	r1, [r1, #12]
 8014eda:	b087      	sub	sp, #28
 8014edc:	2900      	cmp	r1, #0
 8014ede:	d030      	beq.n	8014f42 <_FlushBuffer.isra.5+0x6e>
 8014ee0:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8014ee4:	6822      	ldr	r2, [r4, #0]
 8014ee6:	2b01      	cmp	r3, #1
 8014ee8:	d103      	bne.n	8014ef2 <_FlushBuffer.isra.5+0x1e>
 8014eea:	4615      	mov	r5, r2
 8014eec:	6062      	str	r2, [r4, #4]
 8014eee:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8014ef0:	e009      	b.n	8014f06 <_FlushBuffer.isra.5+0x32>
 8014ef2:	69e3      	ldr	r3, [r4, #28]
 8014ef4:	6865      	ldr	r5, [r4, #4]
 8014ef6:	6a27      	ldr	r7, [r4, #32]
 8014ef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014efc:	3b01      	subs	r3, #1
 8014efe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014f02:	3504      	adds	r5, #4
 8014f04:	6063      	str	r3, [r4, #4]
 8014f06:	6806      	ldr	r6, [r0, #0]
 8014f08:	b1b6      	cbz	r6, 8014f38 <_FlushBuffer.isra.5+0x64>
 8014f0a:	69a2      	ldr	r2, [r4, #24]
 8014f0c:	4628      	mov	r0, r5
 8014f0e:	f7fe fd80 	bl	8013a12 <GUI__CompactPixelIndices>
 8014f12:	2301      	movs	r3, #1
 8014f14:	68f2      	ldr	r2, [r6, #12]
 8014f16:	9300      	str	r3, [sp, #0]
 8014f18:	69a3      	ldr	r3, [r4, #24]
 8014f1a:	9301      	str	r3, [sp, #4]
 8014f1c:	9503      	str	r5, [sp, #12]
 8014f1e:	6963      	ldr	r3, [r4, #20]
 8014f20:	9302      	str	r3, [sp, #8]
 8014f22:	2500      	movs	r5, #0
 8014f24:	9504      	str	r5, [sp, #16]
 8014f26:	9505      	str	r5, [sp, #20]
 8014f28:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8014f2c:	68e3      	ldr	r3, [r4, #12]
 8014f2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014f30:	4630      	mov	r0, r6
 8014f32:	4639      	mov	r1, r7
 8014f34:	47e0      	blx	ip
 8014f36:	e000      	b.n	8014f3a <_FlushBuffer.isra.5+0x66>
 8014f38:	2501      	movs	r5, #1
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	60e3      	str	r3, [r4, #12]
 8014f3e:	b2e8      	uxtb	r0, r5
 8014f40:	e000      	b.n	8014f44 <_FlushBuffer.isra.5+0x70>
 8014f42:	4608      	mov	r0, r1
 8014f44:	b007      	add	sp, #28
 8014f46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014f48 <_SetBkIndexBuffered>:
 8014f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f4a:	9c06      	ldr	r4, [sp, #24]
 8014f4c:	460d      	mov	r5, r1
 8014f4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014f50:	428d      	cmp	r5, r1
 8014f52:	4606      	mov	r6, r0
 8014f54:	4617      	mov	r7, r2
 8014f56:	d105      	bne.n	8014f64 <_SetBkIndexBuffered+0x1c>
 8014f58:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8014f5c:	6a21      	ldr	r1, [r4, #32]
 8014f5e:	4411      	add	r1, r2
 8014f60:	4288      	cmp	r0, r1
 8014f62:	d003      	beq.n	8014f6c <_SetBkIndexBuffered+0x24>
 8014f64:	4618      	mov	r0, r3
 8014f66:	4621      	mov	r1, r4
 8014f68:	f7ff ffb4 	bl	8014ed4 <_FlushBuffer.isra.5>
 8014f6c:	6863      	ldr	r3, [r4, #4]
 8014f6e:	601f      	str	r7, [r3, #0]
 8014f70:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8014f74:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014f78:	6063      	str	r3, [r4, #4]
 8014f7a:	68e3      	ldr	r3, [r4, #12]
 8014f7c:	b90b      	cbnz	r3, 8014f82 <_SetBkIndexBuffered+0x3a>
 8014f7e:	62a6      	str	r6, [r4, #40]	; 0x28
 8014f80:	62e5      	str	r5, [r4, #44]	; 0x2c
 8014f82:	3301      	adds	r3, #1
 8014f84:	60e3      	str	r3, [r4, #12]
 8014f86:	6226      	str	r6, [r4, #32]
 8014f88:	6265      	str	r5, [r4, #36]	; 0x24
 8014f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014f8c <_ReleaseBuffer.isra.6>:
 8014f8c:	b513      	push	{r0, r1, r4, lr}
 8014f8e:	9101      	str	r1, [sp, #4]
 8014f90:	f7ff ffa0 	bl	8014ed4 <_FlushBuffer.isra.5>
 8014f94:	a802      	add	r0, sp, #8
 8014f96:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8014f9a:	6894      	ldr	r4, [r2, #8]
 8014f9c:	f7fa feee 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8014fa0:	4620      	mov	r0, r4
 8014fa2:	f7fa ff17 	bl	800fdd4 <GUI_ALLOC_Free>
 8014fa6:	b002      	add	sp, #8
 8014fa8:	bd10      	pop	{r4, pc}
	...

08014fac <_Undraw>:
 8014fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fb0:	b08b      	sub	sp, #44	; 0x2c
 8014fb2:	f7fa fed5 	bl	800fd60 <GUI_ALLOC_LockH>
 8014fb6:	4a38      	ldr	r2, [pc, #224]	; (8015098 <_Undraw+0xec>)
 8014fb8:	f8d0 8000 	ldr.w	r8, [r0]
 8014fbc:	6813      	ldr	r3, [r2, #0]
 8014fbe:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8014fc2:	7c5d      	ldrb	r5, [r3, #17]
 8014fc4:	9005      	str	r0, [sp, #20]
 8014fc6:	42ae      	cmp	r6, r5
 8014fc8:	bf18      	it	ne
 8014fca:	745e      	strbne	r6, [r3, #17]
 8014fcc:	f100 0220 	add.w	r2, r0, #32
 8014fd0:	f8d0 9014 	ldr.w	r9, [r0, #20]
 8014fd4:	9203      	str	r2, [sp, #12]
 8014fd6:	3004      	adds	r0, #4
 8014fd8:	c803      	ldmia	r0, {r0, r1}
 8014fda:	ac06      	add	r4, sp, #24
 8014fdc:	e884 0003 	stmia.w	r4, {r0, r1}
 8014fe0:	4640      	mov	r0, r8
 8014fe2:	a908      	add	r1, sp, #32
 8014fe4:	f7ff ff5a 	bl	8014e9c <_GetDeviceRect>
 8014fe8:	4620      	mov	r0, r4
 8014fea:	a908      	add	r1, sp, #32
 8014fec:	f7f8 fe24 	bl	800dc38 <GUI__IntersectRect>
 8014ff0:	9805      	ldr	r0, [sp, #20]
 8014ff2:	2101      	movs	r1, #1
 8014ff4:	f7ff fe30 	bl	8014c58 <_CreateBuffer>
 8014ff8:	4607      	mov	r7, r0
 8014ffa:	2800      	cmp	r0, #0
 8014ffc:	d03a      	beq.n	8015074 <_Undraw+0xc8>
 8014ffe:	f9bd 401a 	ldrsh.w	r4, [sp, #26]
 8015002:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015006:	429c      	cmp	r4, r3
 8015008:	9b05      	ldr	r3, [sp, #20]
 801500a:	dc2f      	bgt.n	801506c <_Undraw+0xc0>
 801500c:	f9b3 a006 	ldrsh.w	sl, [r3, #6]
 8015010:	f9bd b018 	ldrsh.w	fp, [sp, #24]
 8015014:	ebca 0a04 	rsb	sl, sl, r4
 8015018:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801501c:	459b      	cmp	fp, r3
 801501e:	dc23      	bgt.n	8015068 <_Undraw+0xbc>
 8015020:	9b05      	ldr	r3, [sp, #20]
 8015022:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015026:	ebc3 030b 	rsb	r3, r3, fp
 801502a:	4619      	mov	r1, r3
 801502c:	4652      	mov	r2, sl
 801502e:	4648      	mov	r0, r9
 8015030:	9302      	str	r3, [sp, #8]
 8015032:	f000 fca4 	bl	801597e <GUI_GetBitmapPixelIndex>
 8015036:	9a05      	ldr	r2, [sp, #20]
 8015038:	9b02      	ldr	r3, [sp, #8]
 801503a:	68d2      	ldr	r2, [r2, #12]
 801503c:	b10a      	cbz	r2, 8015042 <_Undraw+0x96>
 801503e:	b918      	cbnz	r0, 8015048 <_Undraw+0x9c>
 8015040:	e00f      	b.n	8015062 <_Undraw+0xb6>
 8015042:	0e00      	lsrs	r0, r0, #24
 8015044:	28ff      	cmp	r0, #255	; 0xff
 8015046:	d00c      	beq.n	8015062 <_Undraw+0xb6>
 8015048:	f8b9 2000 	ldrh.w	r2, [r9]
 801504c:	9700      	str	r7, [sp, #0]
 801504e:	fb02 320a 	mla	r2, r2, sl, r3
 8015052:	9b03      	ldr	r3, [sp, #12]
 8015054:	4658      	mov	r0, fp
 8015056:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801505a:	4621      	mov	r1, r4
 801505c:	4643      	mov	r3, r8
 801505e:	f7ff ff73 	bl	8014f48 <_SetBkIndexBuffered>
 8015062:	f10b 0b01 	add.w	fp, fp, #1
 8015066:	e7d7      	b.n	8015018 <_Undraw+0x6c>
 8015068:	3401      	adds	r4, #1
 801506a:	e7ca      	b.n	8015002 <_Undraw+0x56>
 801506c:	6818      	ldr	r0, [r3, #0]
 801506e:	4639      	mov	r1, r7
 8015070:	f7ff ff8c 	bl	8014f8c <_ReleaseBuffer.isra.6>
 8015074:	9a05      	ldr	r2, [sp, #20]
 8015076:	6993      	ldr	r3, [r2, #24]
 8015078:	b113      	cbz	r3, 8015080 <_Undraw+0xd4>
 801507a:	69d0      	ldr	r0, [r2, #28]
 801507c:	2101      	movs	r1, #1
 801507e:	4798      	blx	r3
 8015080:	a805      	add	r0, sp, #20
 8015082:	f7fa fe7b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8015086:	42ae      	cmp	r6, r5
 8015088:	d002      	beq.n	8015090 <_Undraw+0xe4>
 801508a:	4a03      	ldr	r2, [pc, #12]	; (8015098 <_Undraw+0xec>)
 801508c:	6813      	ldr	r3, [r2, #0]
 801508e:	745d      	strb	r5, [r3, #17]
 8015090:	b00b      	add	sp, #44	; 0x2c
 8015092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015096:	bf00      	nop
 8015098:	200000d8 	.word	0x200000d8

0801509c <_SpriteDraw>:
 801509c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150a0:	b091      	sub	sp, #68	; 0x44
 80150a2:	f7fa fe5d 	bl	800fd60 <GUI_ALLOC_LockH>
 80150a6:	69c3      	ldr	r3, [r0, #28]
 80150a8:	9309      	str	r3, [sp, #36]	; 0x24
 80150aa:	4b75      	ldr	r3, [pc, #468]	; (8015280 <_SpriteDraw+0x1e4>)
 80150ac:	6805      	ldr	r5, [r0, #0]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	6982      	ldr	r2, [r0, #24]
 80150b2:	69af      	ldr	r7, [r5, #24]
 80150b4:	9206      	str	r2, [sp, #24]
 80150b6:	7c5a      	ldrb	r2, [r3, #17]
 80150b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80150ba:	4297      	cmp	r7, r2
 80150bc:	bf18      	it	ne
 80150be:	745f      	strbne	r7, [r3, #17]
 80150c0:	2101      	movs	r1, #1
 80150c2:	4604      	mov	r4, r0
 80150c4:	9204      	str	r2, [sp, #16]
 80150c6:	f8d0 8014 	ldr.w	r8, [r0, #20]
 80150ca:	f7ff fdc5 	bl	8014c58 <_CreateBuffer>
 80150ce:	4681      	mov	r9, r0
 80150d0:	2800      	cmp	r0, #0
 80150d2:	f000 80c1 	beq.w	8015258 <_SpriteDraw+0x1bc>
 80150d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150d8:	2200      	movs	r2, #0
 80150da:	615a      	str	r2, [r3, #20]
 80150dc:	3304      	adds	r3, #4
 80150de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80150e2:	3420      	adds	r4, #32
 80150e4:	9407      	str	r4, [sp, #28]
 80150e6:	ac0c      	add	r4, sp, #48	; 0x30
 80150e8:	e884 0003 	stmia.w	r4, {r0, r1}
 80150ec:	4628      	mov	r0, r5
 80150ee:	a90e      	add	r1, sp, #56	; 0x38
 80150f0:	f7ff fed4 	bl	8014e9c <_GetDeviceRect>
 80150f4:	4620      	mov	r0, r4
 80150f6:	a90e      	add	r1, sp, #56	; 0x38
 80150f8:	f7f8 fd9e 	bl	800dc38 <GUI__IntersectRect>
 80150fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150fe:	68d8      	ldr	r0, [r3, #12]
 8015100:	2800      	cmp	r0, #0
 8015102:	d046      	beq.n	8015192 <_SpriteDraw+0xf6>
 8015104:	f7fa fe2c 	bl	800fd60 <GUI_ALLOC_LockH>
 8015108:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 801510c:	900e      	str	r0, [sp, #56]	; 0x38
 801510e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8015112:	429c      	cmp	r4, r3
 8015114:	dc39      	bgt.n	801518a <_SpriteDraw+0xee>
 8015116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015118:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
 801511c:	f9b3 a006 	ldrsh.w	sl, [r3, #6]
 8015120:	ebca 0a04 	rsb	sl, sl, r4
 8015124:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8015128:	429e      	cmp	r6, r3
 801512a:	dc2c      	bgt.n	8015186 <_SpriteDraw+0xea>
 801512c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801512e:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 8015132:	ebcc 0c06 	rsb	ip, ip, r6
 8015136:	4661      	mov	r1, ip
 8015138:	4640      	mov	r0, r8
 801513a:	4652      	mov	r2, sl
 801513c:	f8cd c00c 	str.w	ip, [sp, #12]
 8015140:	f000 fc1d 	bl	801597e <GUI_GetBitmapPixelIndex>
 8015144:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015148:	4683      	mov	fp, r0
 801514a:	b1d0      	cbz	r0, 8015182 <_SpriteDraw+0xe6>
 801514c:	f8b8 3000 	ldrh.w	r3, [r8]
 8015150:	4621      	mov	r1, r4
 8015152:	fb03 cc0a 	mla	ip, r3, sl, ip
 8015156:	462a      	mov	r2, r5
 8015158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801515a:	f8cd c00c 	str.w	ip, [sp, #12]
 801515e:	4630      	mov	r0, r6
 8015160:	f7ff fddd 	bl	8014d1e <_GetBkIndex.isra.0>
 8015164:	9b07      	ldr	r3, [sp, #28]
 8015166:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801516a:	f843 002c 	str.w	r0, [r3, ip, lsl #2]
 801516e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015170:	f8cd 9000 	str.w	r9, [sp]
 8015174:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
 8015178:	4630      	mov	r0, r6
 801517a:	4621      	mov	r1, r4
 801517c:	462b      	mov	r3, r5
 801517e:	f7ff fee3 	bl	8014f48 <_SetBkIndexBuffered>
 8015182:	3601      	adds	r6, #1
 8015184:	e7ce      	b.n	8015124 <_SpriteDraw+0x88>
 8015186:	3401      	adds	r4, #1
 8015188:	e7c1      	b.n	801510e <_SpriteDraw+0x72>
 801518a:	a80e      	add	r0, sp, #56	; 0x38
 801518c:	f7fa fdf6 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8015190:	e05d      	b.n	801524e <_SpriteDraw+0x1b2>
 8015192:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8015196:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801519a:	429c      	cmp	r4, r3
 801519c:	dc57      	bgt.n	801524e <_SpriteDraw+0x1b2>
 801519e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151a0:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
 80151a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80151a8:	1ae3      	subs	r3, r4, r3
 80151aa:	9308      	str	r3, [sp, #32]
 80151ac:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80151b0:	429e      	cmp	r6, r3
 80151b2:	dc4a      	bgt.n	801524a <_SpriteDraw+0x1ae>
 80151b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151b6:	9a08      	ldr	r2, [sp, #32]
 80151b8:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 80151bc:	ebcc 0a06 	rsb	sl, ip, r6
 80151c0:	4640      	mov	r0, r8
 80151c2:	4651      	mov	r1, sl
 80151c4:	f000 fbdb 	bl	801597e <GUI_GetBitmapPixelIndex>
 80151c8:	0e02      	lsrs	r2, r0, #24
 80151ca:	2aff      	cmp	r2, #255	; 0xff
 80151cc:	4683      	mov	fp, r0
 80151ce:	9205      	str	r2, [sp, #20]
 80151d0:	d039      	beq.n	8015246 <_SpriteDraw+0x1aa>
 80151d2:	f8b8 3000 	ldrh.w	r3, [r8]
 80151d6:	9a08      	ldr	r2, [sp, #32]
 80151d8:	4630      	mov	r0, r6
 80151da:	fb03 aa02 	mla	sl, r3, r2, sl
 80151de:	4621      	mov	r1, r4
 80151e0:	462a      	mov	r2, r5
 80151e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151e4:	f7ff fdd5 	bl	8014d92 <_GetBkIndexAlpha.isra.2>
 80151e8:	9b07      	ldr	r3, [sp, #28]
 80151ea:	9a05      	ldr	r2, [sp, #20]
 80151ec:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 80151f0:	f8df a090 	ldr.w	sl, [pc, #144]	; 8015284 <_SpriteDraw+0x1e8>
 80151f4:	b1c2      	cbz	r2, 8015228 <_SpriteDraw+0x18c>
 80151f6:	4621      	mov	r1, r4
 80151f8:	462a      	mov	r2, r5
 80151fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151fc:	4630      	mov	r0, r6
 80151fe:	f7ff fdc8 	bl	8014d92 <_GetBkIndexAlpha.isra.2>
 8015202:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 8015206:	691b      	ldr	r3, [r3, #16]
 8015208:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	4798      	blx	r3
 8015210:	9b05      	ldr	r3, [sp, #20]
 8015212:	43da      	mvns	r2, r3
 8015214:	4601      	mov	r1, r0
 8015216:	b2d2      	uxtb	r2, r2
 8015218:	4658      	mov	r0, fp
 801521a:	f7f8 fd2b 	bl	800dc74 <GUI__MixColors>
 801521e:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 8015222:	691b      	ldr	r3, [r3, #16]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	e005      	b.n	8015234 <_SpriteDraw+0x198>
 8015228:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 801522c:	691b      	ldr	r3, [r3, #16]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
 8015234:	4798      	blx	r3
 8015236:	f8cd 9000 	str.w	r9, [sp]
 801523a:	4602      	mov	r2, r0
 801523c:	4621      	mov	r1, r4
 801523e:	4630      	mov	r0, r6
 8015240:	462b      	mov	r3, r5
 8015242:	f7ff fe81 	bl	8014f48 <_SetBkIndexBuffered>
 8015246:	3601      	adds	r6, #1
 8015248:	e7b0      	b.n	80151ac <_SpriteDraw+0x110>
 801524a:	3401      	adds	r4, #1
 801524c:	e7a3      	b.n	8015196 <_SpriteDraw+0xfa>
 801524e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015250:	4649      	mov	r1, r9
 8015252:	6818      	ldr	r0, [r3, #0]
 8015254:	f7ff fe9a 	bl	8014f8c <_ReleaseBuffer.isra.6>
 8015258:	9a04      	ldr	r2, [sp, #16]
 801525a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801525c:	4297      	cmp	r7, r2
 801525e:	f8c3 8014 	str.w	r8, [r3, #20]
 8015262:	d002      	beq.n	801526a <_SpriteDraw+0x1ce>
 8015264:	4b06      	ldr	r3, [pc, #24]	; (8015280 <_SpriteDraw+0x1e4>)
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	745a      	strb	r2, [r3, #17]
 801526a:	a80b      	add	r0, sp, #44	; 0x2c
 801526c:	f7fa fd86 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8015270:	9b06      	ldr	r3, [sp, #24]
 8015272:	b113      	cbz	r3, 801527a <_SpriteDraw+0x1de>
 8015274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015276:	2100      	movs	r1, #0
 8015278:	4798      	blx	r3
 801527a:	b011      	add	sp, #68	; 0x44
 801527c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015280:	200000d8 	.word	0x200000d8
 8015284:	2001d510 	.word	0x2001d510

08015288 <GUI_SPRITE__CreateEx>:
 8015288:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801528c:	4604      	mov	r4, r0
 801528e:	8800      	ldrh	r0, [r0, #0]
 8015290:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8015294:	4689      	mov	r9, r1
 8015296:	4690      	mov	r8, r2
 8015298:	2800      	cmp	r0, #0
 801529a:	d04f      	beq.n	801533c <GUI_SPRITE__CreateEx+0xb4>
 801529c:	8860      	ldrh	r0, [r4, #2]
 801529e:	2800      	cmp	r0, #0
 80152a0:	d04c      	beq.n	801533c <GUI_SPRITE__CreateEx+0xb4>
 80152a2:	68e0      	ldr	r0, [r4, #12]
 80152a4:	b110      	cbz	r0, 80152ac <GUI_SPRITE__CreateEx+0x24>
 80152a6:	6880      	ldr	r0, [r0, #8]
 80152a8:	b918      	cbnz	r0, 80152b2 <GUI_SPRITE__CreateEx+0x2a>
 80152aa:	e047      	b.n	801533c <GUI_SPRITE__CreateEx+0xb4>
 80152ac:	88e2      	ldrh	r2, [r4, #6]
 80152ae:	2a20      	cmp	r2, #32
 80152b0:	d144      	bne.n	801533c <GUI_SPRITE__CreateEx+0xb4>
 80152b2:	4824      	ldr	r0, [pc, #144]	; (8015344 <GUI_SPRITE__CreateEx+0xbc>)
 80152b4:	2100      	movs	r1, #0
 80152b6:	f007 0201 	and.w	r2, r7, #1
 80152ba:	f7f9 ff4d 	bl	800f158 <GUI_DEVICE_Create>
 80152be:	4606      	mov	r6, r0
 80152c0:	b908      	cbnz	r0, 80152c6 <GUI_SPRITE__CreateEx+0x3e>
 80152c2:	2000      	movs	r0, #0
 80152c4:	e03a      	b.n	801533c <GUI_SPRITE__CreateEx+0xb4>
 80152c6:	8823      	ldrh	r3, [r4, #0]
 80152c8:	8860      	ldrh	r0, [r4, #2]
 80152ca:	4358      	muls	r0, r3
 80152cc:	0080      	lsls	r0, r0, #2
 80152ce:	3020      	adds	r0, #32
 80152d0:	f7fa ffb3 	bl	801023a <GUI_ALLOC_AllocZero>
 80152d4:	4605      	mov	r5, r0
 80152d6:	b918      	cbnz	r0, 80152e0 <GUI_SPRITE__CreateEx+0x58>
 80152d8:	4630      	mov	r0, r6
 80152da:	f7f9 ff3b 	bl	800f154 <GUI_DEVICE_Delete>
 80152de:	e02c      	b.n	801533a <GUI_SPRITE__CreateEx+0xb2>
 80152e0:	60b0      	str	r0, [r6, #8]
 80152e2:	f7fa fd3d 	bl	800fd60 <GUI_ALLOC_LockH>
 80152e6:	8822      	ldrh	r2, [r4, #0]
 80152e8:	4603      	mov	r3, r0
 80152ea:	3a01      	subs	r2, #1
 80152ec:	f8a3 9004 	strh.w	r9, [r3, #4]
 80152f0:	4491      	add	r9, r2
 80152f2:	8862      	ldrh	r2, [r4, #2]
 80152f4:	f8a3 8006 	strh.w	r8, [r3, #6]
 80152f8:	a802      	add	r0, sp, #8
 80152fa:	3a01      	subs	r2, #1
 80152fc:	4490      	add	r8, r2
 80152fe:	f840 3d04 	str.w	r3, [r0, #-4]!
 8015302:	821f      	strh	r7, [r3, #16]
 8015304:	615c      	str	r4, [r3, #20]
 8015306:	f8a3 9008 	strh.w	r9, [r3, #8]
 801530a:	f8a3 800a 	strh.w	r8, [r3, #10]
 801530e:	601e      	str	r6, [r3, #0]
 8015310:	f7fa fd34 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8015314:	68e3      	ldr	r3, [r4, #12]
 8015316:	b943      	cbnz	r3, 801532a <GUI_SPRITE__CreateEx+0xa2>
 8015318:	07bb      	lsls	r3, r7, #30
 801531a:	4628      	mov	r0, r5
 801531c:	d50e      	bpl.n	801533c <GUI_SPRITE__CreateEx+0xb4>
 801531e:	f7ff fc8d 	bl	8014c3c <_Link>
 8015322:	4628      	mov	r0, r5
 8015324:	f7ff feba 	bl	801509c <_SpriteDraw>
 8015328:	e007      	b.n	801533a <GUI_SPRITE__CreateEx+0xb2>
 801532a:	4628      	mov	r0, r5
 801532c:	f104 010c 	add.w	r1, r4, #12
 8015330:	f7ff fd6e 	bl	8014e10 <_DoColorConversion.isra.3>
 8015334:	2800      	cmp	r0, #0
 8015336:	d0ef      	beq.n	8015318 <GUI_SPRITE__CreateEx+0x90>
 8015338:	e7c3      	b.n	80152c2 <GUI_SPRITE__CreateEx+0x3a>
 801533a:	4628      	mov	r0, r5
 801533c:	b003      	add	sp, #12
 801533e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015342:	bf00      	nop
 8015344:	0801d6b4 	.word	0x0801d6b4

08015348 <GUI_SPRITE_Delete>:
 8015348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801534a:	4604      	mov	r4, r0
 801534c:	b1d8      	cbz	r0, 8015386 <GUI_SPRITE_Delete+0x3e>
 801534e:	f7ff fe2d 	bl	8014fac <_Undraw>
 8015352:	4620      	mov	r0, r4
 8015354:	f7ff fcd5 	bl	8014d02 <_Unlink>
 8015358:	4620      	mov	r0, r4
 801535a:	f7fa fd01 	bl	800fd60 <GUI_ALLOC_LockH>
 801535e:	9001      	str	r0, [sp, #4]
 8015360:	6800      	ldr	r0, [r0, #0]
 8015362:	f7fa fce9 	bl	800fd38 <GUI_ALLOC_FreeFixedBlock>
 8015366:	9b01      	ldr	r3, [sp, #4]
 8015368:	ad02      	add	r5, sp, #8
 801536a:	68d8      	ldr	r0, [r3, #12]
 801536c:	f7fa fd32 	bl	800fdd4 <GUI_ALLOC_Free>
 8015370:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015374:	69d8      	ldr	r0, [r3, #28]
 8015376:	f7fa fd2d 	bl	800fdd4 <GUI_ALLOC_Free>
 801537a:	4628      	mov	r0, r5
 801537c:	f7fa fcfe 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8015380:	4620      	mov	r0, r4
 8015382:	f7fa fd27 	bl	800fdd4 <GUI_ALLOC_Free>
 8015386:	b003      	add	sp, #12
 8015388:	bd30      	pop	{r4, r5, pc}
	...

0801538c <GUI_SPRITE_SetPosition>:
 801538c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015390:	b0a7      	sub	sp, #156	; 0x9c
 8015392:	9116      	str	r1, [sp, #88]	; 0x58
 8015394:	9217      	str	r2, [sp, #92]	; 0x5c
 8015396:	2800      	cmp	r0, #0
 8015398:	f000 8275 	beq.w	8015886 <GUI_SPRITE_SetPosition+0x4fa>
 801539c:	f7fa fce0 	bl	800fd60 <GUI_ALLOC_LockH>
 80153a0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80153a2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80153a6:	6801      	ldr	r1, [r0, #0]
 80153a8:	9023      	str	r0, [sp, #140]	; 0x8c
 80153aa:	429a      	cmp	r2, r3
 80153ac:	9106      	str	r1, [sp, #24]
 80153ae:	d106      	bne.n	80153be <GUI_SPRITE_SetPosition+0x32>
 80153b0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80153b4:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80153b8:	459e      	cmp	lr, r3
 80153ba:	f000 8239 	beq.w	8015830 <GUI_SPRITE_SetPosition+0x4a4>
 80153be:	2000      	movs	r0, #0
 80153c0:	f7f6 fcc0 	bl	800bd44 <GUI_MEMDEV_Select>
 80153c4:	4ba0      	ldr	r3, [pc, #640]	; (8015648 <GUI_SPRITE_SetPosition+0x2bc>)
 80153c6:	9906      	ldr	r1, [sp, #24]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	6989      	ldr	r1, [r1, #24]
 80153cc:	7c5a      	ldrb	r2, [r3, #17]
 80153ce:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80153d0:	9108      	str	r1, [sp, #32]
 80153d2:	4291      	cmp	r1, r2
 80153d4:	bf18      	it	ne
 80153d6:	7459      	strbne	r1, [r3, #17]
 80153d8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80153dc:	9310      	str	r3, [sp, #64]	; 0x40
 80153de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80153e2:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80153e6:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 80153ea:	921a      	str	r2, [sp, #104]	; 0x68
 80153ec:	ebce 0303 	rsb	r3, lr, r3
 80153f0:	1c59      	adds	r1, r3, #1
 80153f2:	9307      	str	r3, [sp, #28]
 80153f4:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80153f8:	901f      	str	r0, [sp, #124]	; 0x7c
 80153fa:	1b9b      	subs	r3, r3, r6
 80153fc:	1c5a      	adds	r2, r3, #1
 80153fe:	930e      	str	r3, [sp, #56]	; 0x38
 8015400:	8a2b      	ldrh	r3, [r5, #16]
 8015402:	910d      	str	r1, [sp, #52]	; 0x34
 8015404:	079b      	lsls	r3, r3, #30
 8015406:	921e      	str	r2, [sp, #120]	; 0x78
 8015408:	f140 81f7 	bpl.w	80157fa <GUI_SPRITE_SetPosition+0x46e>
 801540c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801540e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015410:	696b      	ldr	r3, [r5, #20]
 8015412:	9311      	str	r3, [sp, #68]	; 0x44
 8015414:	ebce 0a01 	rsb	sl, lr, r1
 8015418:	f1ba 0f00 	cmp.w	sl, #0
 801541c:	ebc6 0902 	rsb	r9, r6, r2
 8015420:	dc0c      	bgt.n	801543c <GUI_SPRITE_SetPosition+0xb0>
 8015422:	9b07      	ldr	r3, [sp, #28]
 8015424:	930a      	str	r3, [sp, #40]	; 0x28
 8015426:	469e      	mov	lr, r3
 8015428:	f04f 32ff 	mov.w	r2, #4294967295
 801542c:	44d6      	add	lr, sl
 801542e:	2100      	movs	r1, #0
 8015430:	f8cd e01c 	str.w	lr, [sp, #28]
 8015434:	911c      	str	r1, [sp, #112]	; 0x70
 8015436:	9214      	str	r2, [sp, #80]	; 0x50
 8015438:	9204      	str	r2, [sp, #16]
 801543a:	e009      	b.n	8015450 <GUI_SPRITE_SetPosition+0xc4>
 801543c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801543e:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 8015442:	f04f 0e01 	mov.w	lr, #1
 8015446:	2100      	movs	r1, #0
 8015448:	9314      	str	r3, [sp, #80]	; 0x50
 801544a:	f8cd e010 	str.w	lr, [sp, #16]
 801544e:	910a      	str	r1, [sp, #40]	; 0x28
 8015450:	f1b9 0f00 	cmp.w	r9, #0
 8015454:	dc0c      	bgt.n	8015470 <GUI_SPRITE_SetPosition+0xe4>
 8015456:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015458:	4622      	mov	r2, r4
 801545a:	f04f 3eff 	mov.w	lr, #4294967295
 801545e:	444a      	add	r2, r9
 8015460:	2300      	movs	r3, #0
 8015462:	920e      	str	r2, [sp, #56]	; 0x38
 8015464:	931b      	str	r3, [sp, #108]	; 0x6c
 8015466:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 801546a:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801546e:	e006      	b.n	801547e <GUI_SPRITE_SetPosition+0xf2>
 8015470:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015472:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 8015476:	2301      	movs	r3, #1
 8015478:	9215      	str	r2, [sp, #84]	; 0x54
 801547a:	9309      	str	r3, [sp, #36]	; 0x24
 801547c:	2400      	movs	r4, #0
 801547e:	9806      	ldr	r0, [sp, #24]
 8015480:	a924      	add	r1, sp, #144	; 0x90
 8015482:	f7ff fd0b 	bl	8014e9c <_GetDeviceRect>
 8015486:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8015488:	9904      	ldr	r1, [sp, #16]
 801548a:	f7ff fbe5 	bl	8014c58 <_CreateBuffer>
 801548e:	9012      	str	r0, [sp, #72]	; 0x48
 8015490:	2800      	cmp	r0, #0
 8015492:	f000 81b2 	beq.w	80157fa <GUI_SPRITE_SetPosition+0x46e>
 8015496:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8015498:	9904      	ldr	r1, [sp, #16]
 801549a:	f7ff fbdd 	bl	8014c58 <_CreateBuffer>
 801549e:	9013      	str	r0, [sp, #76]	; 0x4c
 80154a0:	2800      	cmp	r0, #0
 80154a2:	f000 81a5 	beq.w	80157f0 <GUI_SPRITE_SetPosition+0x464>
 80154a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80154a8:	68d8      	ldr	r0, [r3, #12]
 80154aa:	4426      	add	r6, r4
 80154ac:	b990      	cbnz	r0, 80154d4 <GUI_SPRITE_SetPosition+0x148>
 80154ae:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 80154b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80154b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154b6:	9019      	str	r0, [sp, #100]	; 0x64
 80154b8:	ea4f 038e 	mov.w	r3, lr, lsl #2
 80154bc:	434b      	muls	r3, r1
 80154be:	9321      	str	r3, [sp, #132]	; 0x84
 80154c0:	fb0e 2304 	mla	r3, lr, r4, r2
 80154c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80154c8:	930c      	str	r3, [sp, #48]	; 0x30
 80154ca:	9b04      	ldr	r3, [sp, #16]
 80154cc:	009b      	lsls	r3, r3, #2
 80154ce:	444e      	add	r6, r9
 80154d0:	9320      	str	r3, [sp, #128]	; 0x80
 80154d2:	e0db      	b.n	801568c <GUI_SPRITE_SetPosition+0x300>
 80154d4:	f7fa fc44 	bl	800fd60 <GUI_ALLOC_LockH>
 80154d8:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 80154dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80154de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154e0:	9022      	str	r0, [sp, #136]	; 0x88
 80154e2:	ea4f 038e 	mov.w	r3, lr, lsl #2
 80154e6:	434b      	muls	r3, r1
 80154e8:	9319      	str	r3, [sp, #100]	; 0x64
 80154ea:	fb0e 2304 	mla	r3, lr, r4, r2
 80154ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80154f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80154f4:	9b04      	ldr	r3, [sp, #16]
 80154f6:	009b      	lsls	r3, r3, #2
 80154f8:	444e      	add	r6, r9
 80154fa:	931d      	str	r3, [sp, #116]	; 0x74
 80154fc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80154fe:	428c      	cmp	r4, r1
 8015500:	f000 809e 	beq.w	8015640 <GUI_SPRITE_SetPosition+0x2b4>
 8015504:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8015508:	4574      	cmp	r4, lr
 801550a:	db05      	blt.n	8015518 <GUI_SPRITE_SetPosition+0x18c>
 801550c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801550e:	428c      	cmp	r4, r1
 8015510:	bfcc      	ite	gt
 8015512:	2300      	movgt	r3, #0
 8015514:	2301      	movle	r3, #1
 8015516:	e000      	b.n	801551a <GUI_SPRITE_SetPosition+0x18e>
 8015518:	2300      	movs	r3, #0
 801551a:	b2db      	uxtb	r3, r3
 801551c:	9318      	str	r3, [sp, #96]	; 0x60
 801551e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8015520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015522:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015524:	9105      	str	r1, [sp, #20]
 8015526:	ebc9 0206 	rsb	r2, r9, r6
 801552a:	441f      	add	r7, r3
 801552c:	920c      	str	r2, [sp, #48]	; 0x30
 801552e:	4457      	add	r7, sl
 8015530:	461d      	mov	r5, r3
 8015532:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015534:	428d      	cmp	r5, r1
 8015536:	d07a      	beq.n	801562e <GUI_SPRITE_SetPosition+0x2a2>
 8015538:	9811      	ldr	r0, [sp, #68]	; 0x44
 801553a:	4629      	mov	r1, r5
 801553c:	4622      	mov	r2, r4
 801553e:	f000 fa1e 	bl	801597e <GUI_GetBitmapPixelIndex>
 8015542:	900f      	str	r0, [sp, #60]	; 0x3c
 8015544:	2800      	cmp	r0, #0
 8015546:	d069      	beq.n	801561c <GUI_SPRITE_SetPosition+0x290>
 8015548:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801554a:	4295      	cmp	r5, r2
 801554c:	ebca 0c07 	rsb	ip, sl, r7
 8015550:	db07      	blt.n	8015562 <GUI_SPRITE_SetPosition+0x1d6>
 8015552:	9b07      	ldr	r3, [sp, #28]
 8015554:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8015558:	429d      	cmp	r5, r3
 801555a:	bfc8      	it	gt
 801555c:	f04f 0b00 	movgt.w	fp, #0
 8015560:	e001      	b.n	8015566 <GUI_SPRITE_SetPosition+0x1da>
 8015562:	f04f 0b00 	mov.w	fp, #0
 8015566:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801556a:	429f      	cmp	r7, r3
 801556c:	fa5f fb8b 	uxtb.w	fp, fp
 8015570:	db17      	blt.n	80155a2 <GUI_SPRITE_SetPosition+0x216>
 8015572:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8015576:	429e      	cmp	r6, r3
 8015578:	db13      	blt.n	80155a2 <GUI_SPRITE_SetPosition+0x216>
 801557a:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801557e:	429f      	cmp	r7, r3
 8015580:	dc0f      	bgt.n	80155a2 <GUI_SPRITE_SetPosition+0x216>
 8015582:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8015586:	429e      	cmp	r6, r3
 8015588:	dc0b      	bgt.n	80155a2 <GUI_SPRITE_SetPosition+0x216>
 801558a:	4638      	mov	r0, r7
 801558c:	4631      	mov	r1, r6
 801558e:	9a06      	ldr	r2, [sp, #24]
 8015590:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015592:	f8cd c00c 	str.w	ip, [sp, #12]
 8015596:	f7ff fbc2 	bl	8014d1e <_GetBkIndex.isra.0>
 801559a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801559e:	4680      	mov	r8, r0
 80155a0:	e001      	b.n	80155a6 <GUI_SPRITE_SetPosition+0x21a>
 80155a2:	f04f 0800 	mov.w	r8, #0
 80155a6:	f1bb 0f00 	cmp.w	fp, #0
 80155aa:	d00d      	beq.n	80155c8 <GUI_SPRITE_SetPosition+0x23c>
 80155ac:	ebb5 010a 	subs.w	r1, r5, sl
 80155b0:	d415      	bmi.n	80155de <GUI_SPRITE_SetPosition+0x252>
 80155b2:	ebb4 0209 	subs.w	r2, r4, r9
 80155b6:	d412      	bmi.n	80155de <GUI_SPRITE_SetPosition+0x252>
 80155b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80155ba:	f8cd c00c 	str.w	ip, [sp, #12]
 80155be:	f000 f9de 	bl	801597e <GUI_GetBitmapPixelIndex>
 80155c2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80155c6:	b950      	cbnz	r0, 80155de <GUI_SPRITE_SetPosition+0x252>
 80155c8:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80155cc:	459c      	cmp	ip, r3
 80155ce:	db06      	blt.n	80155de <GUI_SPRITE_SetPosition+0x252>
 80155d0:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80155d4:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80155d8:	459e      	cmp	lr, r3
 80155da:	f280 812d 	bge.w	8015838 <GUI_SPRITE_SetPosition+0x4ac>
 80155de:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80155e2:	429f      	cmp	r7, r3
 80155e4:	db17      	blt.n	8015616 <GUI_SPRITE_SetPosition+0x28a>
 80155e6:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80155ea:	429e      	cmp	r6, r3
 80155ec:	db13      	blt.n	8015616 <GUI_SPRITE_SetPosition+0x28a>
 80155ee:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80155f2:	429f      	cmp	r7, r3
 80155f4:	dc0f      	bgt.n	8015616 <GUI_SPRITE_SetPosition+0x28a>
 80155f6:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80155fa:	429e      	cmp	r6, r3
 80155fc:	dc0b      	bgt.n	8015616 <GUI_SPRITE_SetPosition+0x28a>
 80155fe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015600:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015602:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 8015606:	9100      	str	r1, [sp, #0]
 8015608:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 801560c:	9b06      	ldr	r3, [sp, #24]
 801560e:	4638      	mov	r0, r7
 8015610:	4631      	mov	r1, r6
 8015612:	f7ff fc99 	bl	8014f48 <_SetBkIndexBuffered>
 8015616:	9905      	ldr	r1, [sp, #20]
 8015618:	f8c1 8020 	str.w	r8, [r1, #32]
 801561c:	9b05      	ldr	r3, [sp, #20]
 801561e:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 8015622:	9a04      	ldr	r2, [sp, #16]
 8015624:	4473      	add	r3, lr
 8015626:	4415      	add	r5, r2
 8015628:	9305      	str	r3, [sp, #20]
 801562a:	4417      	add	r7, r2
 801562c:	e781      	b.n	8015532 <GUI_SPRITE_SetPosition+0x1a6>
 801562e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015630:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 8015634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015636:	4473      	add	r3, lr
 8015638:	4414      	add	r4, r2
 801563a:	930b      	str	r3, [sp, #44]	; 0x2c
 801563c:	4416      	add	r6, r2
 801563e:	e75d      	b.n	80154fc <GUI_SPRITE_SetPosition+0x170>
 8015640:	a822      	add	r0, sp, #136	; 0x88
 8015642:	f7fa fb9b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8015646:	e0ce      	b.n	80157e6 <GUI_SPRITE_SetPosition+0x45a>
 8015648:	200000d8 	.word	0x200000d8
 801564c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801564e:	4294      	cmp	r4, r2
 8015650:	db20      	blt.n	8015694 <GUI_SPRITE_SetPosition+0x308>
 8015652:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8015656:	4574      	cmp	r4, lr
 8015658:	bfcc      	ite	gt
 801565a:	2300      	movgt	r3, #0
 801565c:	2301      	movle	r3, #1
 801565e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015660:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8015662:	b2db      	uxtb	r3, r3
 8015664:	931d      	str	r3, [sp, #116]	; 0x74
 8015666:	ebc9 0106 	rsb	r1, r9, r6
 801566a:	4417      	add	r7, r2
 801566c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801566e:	910f      	str	r1, [sp, #60]	; 0x3c
 8015670:	4457      	add	r7, sl
 8015672:	9305      	str	r3, [sp, #20]
 8015674:	4615      	mov	r5, r2
 8015676:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015678:	428d      	cmp	r5, r1
 801567a:	d10d      	bne.n	8015698 <GUI_SPRITE_SetPosition+0x30c>
 801567c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801567e:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 8015682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015684:	4473      	add	r3, lr
 8015686:	4414      	add	r4, r2
 8015688:	930c      	str	r3, [sp, #48]	; 0x30
 801568a:	4416      	add	r6, r2
 801568c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801568e:	428c      	cmp	r4, r1
 8015690:	d1dc      	bne.n	801564c <GUI_SPRITE_SetPosition+0x2c0>
 8015692:	e0a8      	b.n	80157e6 <GUI_SPRITE_SetPosition+0x45a>
 8015694:	2300      	movs	r3, #0
 8015696:	e7e2      	b.n	801565e <GUI_SPRITE_SetPosition+0x2d2>
 8015698:	4629      	mov	r1, r5
 801569a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801569c:	4622      	mov	r2, r4
 801569e:	f000 f96e 	bl	801597e <GUI_GetBitmapPixelIndex>
 80156a2:	0e01      	lsrs	r1, r0, #24
 80156a4:	29ff      	cmp	r1, #255	; 0xff
 80156a6:	9018      	str	r0, [sp, #96]	; 0x60
 80156a8:	910b      	str	r1, [sp, #44]	; 0x2c
 80156aa:	f000 8093 	beq.w	80157d4 <GUI_SPRITE_SetPosition+0x448>
 80156ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80156b0:	4295      	cmp	r5, r2
 80156b2:	ebca 0c07 	rsb	ip, sl, r7
 80156b6:	db07      	blt.n	80156c8 <GUI_SPRITE_SetPosition+0x33c>
 80156b8:	9b07      	ldr	r3, [sp, #28]
 80156ba:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 80156be:	429d      	cmp	r5, r3
 80156c0:	bfc8      	it	gt
 80156c2:	f04f 0b00 	movgt.w	fp, #0
 80156c6:	e001      	b.n	80156cc <GUI_SPRITE_SetPosition+0x340>
 80156c8:	f04f 0b00 	mov.w	fp, #0
 80156cc:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80156d0:	429f      	cmp	r7, r3
 80156d2:	fa5f fb8b 	uxtb.w	fp, fp
 80156d6:	db22      	blt.n	801571e <GUI_SPRITE_SetPosition+0x392>
 80156d8:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80156dc:	429e      	cmp	r6, r3
 80156de:	db1e      	blt.n	801571e <GUI_SPRITE_SetPosition+0x392>
 80156e0:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80156e4:	429f      	cmp	r7, r3
 80156e6:	dc1a      	bgt.n	801571e <GUI_SPRITE_SetPosition+0x392>
 80156e8:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80156ec:	429e      	cmp	r6, r3
 80156ee:	dc16      	bgt.n	801571e <GUI_SPRITE_SetPosition+0x392>
 80156f0:	4631      	mov	r1, r6
 80156f2:	9a06      	ldr	r2, [sp, #24]
 80156f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80156f6:	f8cd c00c 	str.w	ip, [sp, #12]
 80156fa:	4638      	mov	r0, r7
 80156fc:	f7ff fb49 	bl	8014d92 <_GetBkIndexAlpha.isra.2>
 8015700:	f8dd e020 	ldr.w	lr, [sp, #32]
 8015704:	4b61      	ldr	r3, [pc, #388]	; (801588c <GUI_SPRITE_SetPosition+0x500>)
 8015706:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 801570a:	691b      	ldr	r3, [r3, #16]
 801570c:	4680      	mov	r8, r0
 801570e:	685b      	ldr	r3, [r3, #4]
 8015710:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8015714:	4798      	blx	r3
 8015716:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801571a:	9019      	str	r0, [sp, #100]	; 0x64
 801571c:	e001      	b.n	8015722 <GUI_SPRITE_SetPosition+0x396>
 801571e:	f04f 0800 	mov.w	r8, #0
 8015722:	f1bb 0f00 	cmp.w	fp, #0
 8015726:	d00f      	beq.n	8015748 <GUI_SPRITE_SetPosition+0x3bc>
 8015728:	ebb5 010a 	subs.w	r1, r5, sl
 801572c:	d416      	bmi.n	801575c <GUI_SPRITE_SetPosition+0x3d0>
 801572e:	ebb4 0209 	subs.w	r2, r4, r9
 8015732:	d413      	bmi.n	801575c <GUI_SPRITE_SetPosition+0x3d0>
 8015734:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015736:	f8cd c00c 	str.w	ip, [sp, #12]
 801573a:	f000 f920 	bl	801597e <GUI_GetBitmapPixelIndex>
 801573e:	0e00      	lsrs	r0, r0, #24
 8015740:	28ff      	cmp	r0, #255	; 0xff
 8015742:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015746:	d109      	bne.n	801575c <GUI_SPRITE_SetPosition+0x3d0>
 8015748:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801574c:	459c      	cmp	ip, r3
 801574e:	db05      	blt.n	801575c <GUI_SPRITE_SetPosition+0x3d0>
 8015750:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8015754:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015756:	4299      	cmp	r1, r3
 8015758:	f280 8082 	bge.w	8015860 <GUI_SPRITE_SetPosition+0x4d4>
 801575c:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8015760:	429f      	cmp	r7, r3
 8015762:	db34      	blt.n	80157ce <GUI_SPRITE_SetPosition+0x442>
 8015764:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8015768:	429e      	cmp	r6, r3
 801576a:	db30      	blt.n	80157ce <GUI_SPRITE_SetPosition+0x442>
 801576c:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8015770:	429f      	cmp	r7, r3
 8015772:	dc2c      	bgt.n	80157ce <GUI_SPRITE_SetPosition+0x442>
 8015774:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8015778:	429e      	cmp	r6, r3
 801577a:	dc28      	bgt.n	80157ce <GUI_SPRITE_SetPosition+0x442>
 801577c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8015780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015782:	f8df b108 	ldr.w	fp, [pc, #264]	; 801588c <GUI_SPRITE_SetPosition+0x500>
 8015786:	f02e 407f 	bic.w	r0, lr, #4278190080	; 0xff000000
 801578a:	b191      	cbz	r1, 80157b2 <GUI_SPRITE_SetPosition+0x426>
 801578c:	9a08      	ldr	r2, [sp, #32]
 801578e:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
 8015792:	691b      	ldr	r3, [r3, #16]
 8015794:	685b      	ldr	r3, [r3, #4]
 8015796:	4798      	blx	r3
 8015798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801579a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801579c:	43da      	mvns	r2, r3
 801579e:	b2d2      	uxtb	r2, r2
 80157a0:	f7f8 fa68 	bl	800dc74 <GUI__MixColors>
 80157a4:	f8dd e020 	ldr.w	lr, [sp, #32]
 80157a8:	f85b 302e 	ldr.w	r3, [fp, lr, lsl #2]
 80157ac:	691b      	ldr	r3, [r3, #16]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	e004      	b.n	80157bc <GUI_SPRITE_SetPosition+0x430>
 80157b2:	9908      	ldr	r1, [sp, #32]
 80157b4:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 80157b8:	691b      	ldr	r3, [r3, #16]
 80157ba:	685b      	ldr	r3, [r3, #4]
 80157bc:	4798      	blx	r3
 80157be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80157c0:	9300      	str	r3, [sp, #0]
 80157c2:	4602      	mov	r2, r0
 80157c4:	4631      	mov	r1, r6
 80157c6:	4638      	mov	r0, r7
 80157c8:	9b06      	ldr	r3, [sp, #24]
 80157ca:	f7ff fbbd 	bl	8014f48 <_SetBkIndexBuffered>
 80157ce:	9905      	ldr	r1, [sp, #20]
 80157d0:	f8c1 8020 	str.w	r8, [r1, #32]
 80157d4:	9b05      	ldr	r3, [sp, #20]
 80157d6:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 80157da:	9a04      	ldr	r2, [sp, #16]
 80157dc:	4473      	add	r3, lr
 80157de:	4415      	add	r5, r2
 80157e0:	9305      	str	r3, [sp, #20]
 80157e2:	4417      	add	r7, r2
 80157e4:	e747      	b.n	8015676 <GUI_SPRITE_SetPosition+0x2ea>
 80157e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80157e8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80157ea:	6818      	ldr	r0, [r3, #0]
 80157ec:	f7ff fbce 	bl	8014f8c <_ReleaseBuffer.isra.6>
 80157f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80157f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80157f4:	6818      	ldr	r0, [r3, #0]
 80157f6:	f7ff fbc9 	bl	8014f8c <_ReleaseBuffer.isra.6>
 80157fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80157fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80157fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015800:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8015804:	809a      	strh	r2, [r3, #4]
 8015806:	440a      	add	r2, r1
 8015808:	3a01      	subs	r2, #1
 801580a:	f8a3 e006 	strh.w	lr, [r3, #6]
 801580e:	811a      	strh	r2, [r3, #8]
 8015810:	f10e 32ff 	add.w	r2, lr, #4294967295
 8015814:	f8dd e078 	ldr.w	lr, [sp, #120]	; 0x78
 8015818:	9908      	ldr	r1, [sp, #32]
 801581a:	4472      	add	r2, lr
 801581c:	815a      	strh	r2, [r3, #10]
 801581e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015820:	4291      	cmp	r1, r2
 8015822:	d002      	beq.n	801582a <GUI_SPRITE_SetPosition+0x49e>
 8015824:	4b1a      	ldr	r3, [pc, #104]	; (8015890 <GUI_SPRITE_SetPosition+0x504>)
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	745a      	strb	r2, [r3, #17]
 801582a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801582c:	f7f6 fa8a 	bl	800bd44 <GUI_MEMDEV_Select>
 8015830:	a823      	add	r0, sp, #140	; 0x8c
 8015832:	f7fa faa3 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8015836:	e026      	b.n	8015886 <GUI_SPRITE_SetPosition+0x4fa>
 8015838:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801583c:	459c      	cmp	ip, r3
 801583e:	f73f aece 	bgt.w	80155de <GUI_SPRITE_SetPosition+0x252>
 8015842:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8015846:	459e      	cmp	lr, r3
 8015848:	f73f aec9 	bgt.w	80155de <GUI_SPRITE_SetPosition+0x252>
 801584c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801584e:	9b05      	ldr	r3, [sp, #20]
 8015850:	9100      	str	r1, [sp, #0]
 8015852:	6a1a      	ldr	r2, [r3, #32]
 8015854:	9b06      	ldr	r3, [sp, #24]
 8015856:	4660      	mov	r0, ip
 8015858:	4671      	mov	r1, lr
 801585a:	f7ff fb75 	bl	8014f48 <_SetBkIndexBuffered>
 801585e:	e6be      	b.n	80155de <GUI_SPRITE_SetPosition+0x252>
 8015860:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8015864:	459c      	cmp	ip, r3
 8015866:	f73f af79 	bgt.w	801575c <GUI_SPRITE_SetPosition+0x3d0>
 801586a:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801586e:	4299      	cmp	r1, r3
 8015870:	f73f af74 	bgt.w	801575c <GUI_SPRITE_SetPosition+0x3d0>
 8015874:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015876:	9b05      	ldr	r3, [sp, #20]
 8015878:	9200      	str	r2, [sp, #0]
 801587a:	6a1a      	ldr	r2, [r3, #32]
 801587c:	9b06      	ldr	r3, [sp, #24]
 801587e:	4660      	mov	r0, ip
 8015880:	f7ff fb62 	bl	8014f48 <_SetBkIndexBuffered>
 8015884:	e76a      	b.n	801575c <GUI_SPRITE_SetPosition+0x3d0>
 8015886:	b027      	add	sp, #156	; 0x9c
 8015888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801588c:	2001d510 	.word	0x2001d510
 8015890:	200000d8 	.word	0x200000d8

08015894 <GUI_SPRITE_Show>:
 8015894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015896:	4605      	mov	r5, r0
 8015898:	b1d8      	cbz	r0, 80158d2 <GUI_SPRITE_Show+0x3e>
 801589a:	f7fa fa61 	bl	800fd60 <GUI_ALLOC_LockH>
 801589e:	8a03      	ldrh	r3, [r0, #16]
 80158a0:	ac02      	add	r4, sp, #8
 80158a2:	079b      	lsls	r3, r3, #30
 80158a4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80158a8:	d410      	bmi.n	80158cc <GUI_SPRITE_Show+0x38>
 80158aa:	4628      	mov	r0, r5
 80158ac:	f7ff f9c6 	bl	8014c3c <_Link>
 80158b0:	4620      	mov	r0, r4
 80158b2:	f7fa fa63 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80158b6:	4628      	mov	r0, r5
 80158b8:	f7ff fbf0 	bl	801509c <_SpriteDraw>
 80158bc:	4628      	mov	r0, r5
 80158be:	f7fa fa4f 	bl	800fd60 <GUI_ALLOC_LockH>
 80158c2:	8a03      	ldrh	r3, [r0, #16]
 80158c4:	9001      	str	r0, [sp, #4]
 80158c6:	f043 0302 	orr.w	r3, r3, #2
 80158ca:	8203      	strh	r3, [r0, #16]
 80158cc:	4620      	mov	r0, r4
 80158ce:	f7fa fa55 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80158d2:	b003      	add	sp, #12
 80158d4:	bd30      	pop	{r4, r5, pc}

080158d6 <GUI_GetBkColor>:
 80158d6:	b508      	push	{r3, lr}
 80158d8:	f000 ff1c 	bl	8016714 <LCD_GetBkColorIndex>
 80158dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80158e0:	f7f7 bffa 	b.w	800d8d8 <LCD_Index2Color>

080158e4 <GUI_GetColor>:
 80158e4:	b508      	push	{r3, lr}
 80158e6:	f000 ff1d 	bl	8016724 <LCD_GetColorIndex>
 80158ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80158ee:	f7f7 bff3 	b.w	800d8d8 <LCD_Index2Color>

080158f2 <GUI_GetClientRect>:
 80158f2:	b108      	cbz	r0, 80158f8 <GUI_GetClientRect+0x6>
 80158f4:	f7f4 b82c 	b.w	8009950 <WM_GetClientRect>
 80158f8:	4770      	bx	lr

080158fa <GUI_GetBitmapPixelIndexEx>:
 80158fa:	b510      	push	{r4, lr}
 80158fc:	2804      	cmp	r0, #4
 80158fe:	9c02      	ldr	r4, [sp, #8]
 8015900:	d025      	beq.n	801594e <GUI_GetBitmapPixelIndexEx+0x54>
 8015902:	dc0f      	bgt.n	8015924 <GUI_GetBitmapPixelIndexEx+0x2a>
 8015904:	2801      	cmp	r0, #1
 8015906:	d017      	beq.n	8015938 <GUI_GetBitmapPixelIndexEx+0x3e>
 8015908:	2802      	cmp	r0, #2
 801590a:	d136      	bne.n	801597a <GUI_GetBitmapPixelIndexEx+0x80>
 801590c:	0898      	lsrs	r0, r3, #2
 801590e:	fb04 2101 	mla	r1, r4, r1, r2
 8015912:	ea6f 0343 	mvn.w	r3, r3, lsl #1
 8015916:	5c08      	ldrb	r0, [r1, r0]
 8015918:	f003 0306 	and.w	r3, r3, #6
 801591c:	40d8      	lsrs	r0, r3
 801591e:	f000 0003 	and.w	r0, r0, #3
 8015922:	bd10      	pop	{r4, pc}
 8015924:	2810      	cmp	r0, #16
 8015926:	d01c      	beq.n	8015962 <GUI_GetBitmapPixelIndexEx+0x68>
 8015928:	2820      	cmp	r0, #32
 801592a:	d020      	beq.n	801596e <GUI_GetBitmapPixelIndexEx+0x74>
 801592c:	2808      	cmp	r0, #8
 801592e:	d124      	bne.n	801597a <GUI_GetBitmapPixelIndexEx+0x80>
 8015930:	fb04 2101 	mla	r1, r4, r1, r2
 8015934:	5cc8      	ldrb	r0, [r1, r3]
 8015936:	bd10      	pop	{r4, pc}
 8015938:	08d8      	lsrs	r0, r3, #3
 801593a:	fb04 2101 	mla	r1, r4, r1, r2
 801593e:	43db      	mvns	r3, r3
 8015940:	5c08      	ldrb	r0, [r1, r0]
 8015942:	f003 0307 	and.w	r3, r3, #7
 8015946:	40d8      	lsrs	r0, r3
 8015948:	f000 0001 	and.w	r0, r0, #1
 801594c:	bd10      	pop	{r4, pc}
 801594e:	0858      	lsrs	r0, r3, #1
 8015950:	fb04 2101 	mla	r1, r4, r1, r2
 8015954:	07db      	lsls	r3, r3, #31
 8015956:	5c08      	ldrb	r0, [r1, r0]
 8015958:	bf4c      	ite	mi
 801595a:	f000 000f 	andmi.w	r0, r0, #15
 801595e:	0900      	lsrpl	r0, r0, #4
 8015960:	bd10      	pop	{r4, pc}
 8015962:	1049      	asrs	r1, r1, #1
 8015964:	fb04 3301 	mla	r3, r4, r1, r3
 8015968:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 801596c:	bd10      	pop	{r4, pc}
 801596e:	1089      	asrs	r1, r1, #2
 8015970:	fb04 3301 	mla	r3, r4, r1, r3
 8015974:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015978:	bd10      	pop	{r4, pc}
 801597a:	2000      	movs	r0, #0
 801597c:	bd10      	pop	{r4, pc}

0801597e <GUI_GetBitmapPixelIndex>:
 801597e:	b513      	push	{r0, r1, r4, lr}
 8015980:	460b      	mov	r3, r1
 8015982:	4604      	mov	r4, r0
 8015984:	b130      	cbz	r0, 8015994 <GUI_GetBitmapPixelIndex+0x16>
 8015986:	88c0      	ldrh	r0, [r0, #6]
 8015988:	88a1      	ldrh	r1, [r4, #4]
 801598a:	9200      	str	r2, [sp, #0]
 801598c:	68a2      	ldr	r2, [r4, #8]
 801598e:	f7ff ffb4 	bl	80158fa <GUI_GetBitmapPixelIndexEx>
 8015992:	e7ff      	b.n	8015994 <GUI_GetBitmapPixelIndex+0x16>
 8015994:	b002      	add	sp, #8
 8015996:	bd10      	pop	{r4, pc}

08015998 <_DrawGradient>:
 8015998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801599c:	b091      	sub	sp, #68	; 0x44
 801599e:	4605      	mov	r5, r0
 80159a0:	4689      	mov	r9, r1
 80159a2:	981c      	ldr	r0, [sp, #112]	; 0x70
 80159a4:	991d      	ldr	r1, [sp, #116]	; 0x74
 80159a6:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 80159aa:	9002      	str	r0, [sp, #8]
 80159ac:	4614      	mov	r4, r2
 80159ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80159b0:	9200      	str	r2, [sp, #0]
 80159b2:	461e      	mov	r6, r3
 80159b4:	9101      	str	r1, [sp, #4]
 80159b6:	f7ff ff95 	bl	80158e4 <GUI_GetColor>
 80159ba:	9a00      	ldr	r2, [sp, #0]
 80159bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80159be:	4542      	cmp	r2, r8
 80159c0:	d109      	bne.n	80159d6 <_DrawGradient+0x3e>
 80159c2:	4610      	mov	r0, r2
 80159c4:	f7f7 ffd8 	bl	800d978 <LCD_SetColor>
 80159c8:	9a01      	ldr	r2, [sp, #4]
 80159ca:	b112      	cbz	r2, 80159d2 <_DrawGradient+0x3a>
 80159cc:	4628      	mov	r0, r5
 80159ce:	4649      	mov	r1, r9
 80159d0:	e0b5      	b.n	8015b3e <_DrawGradient+0x1a6>
 80159d2:	4648      	mov	r0, r9
 80159d4:	e0b9      	b.n	8015b4a <_DrawGradient+0x1b2>
 80159d6:	fa5f fc82 	uxtb.w	ip, r2
 80159da:	f8cd c018 	str.w	ip, [sp, #24]
 80159de:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 80159e2:	f8cd c01c 	str.w	ip, [sp, #28]
 80159e6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80159ea:	f8cd c020 	str.w	ip, [sp, #32]
 80159ee:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80159f2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80159f6:	f8dd c018 	ldr.w	ip, [sp, #24]
 80159fa:	fa5f f388 	uxtb.w	r3, r8
 80159fe:	ebcc 0303 	rsb	r3, ip, r3
 8015a02:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8015a06:	930d      	str	r3, [sp, #52]	; 0x34
 8015a08:	f3c8 2307 	ubfx	r3, r8, #8, #8
 8015a0c:	ebcc 0303 	rsb	r3, ip, r3
 8015a10:	f8dd c020 	ldr.w	ip, [sp, #32]
 8015a14:	930c      	str	r3, [sp, #48]	; 0x30
 8015a16:	f3c8 4307 	ubfx	r3, r8, #16, #8
 8015a1a:	ebcc 0303 	rsb	r3, ip, r3
 8015a1e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8015a22:	930e      	str	r3, [sp, #56]	; 0x38
 8015a24:	ebcc 6818 	rsb	r8, ip, r8, lsr #24
 8015a28:	ebb6 0709 	subs.w	r7, r6, r9
 8015a2c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8015a30:	f04f 0800 	mov.w	r8, #0
 8015a34:	bf08      	it	eq
 8015a36:	2701      	moveq	r7, #1
 8015a38:	f109 33ff 	add.w	r3, r9, #4294967295
 8015a3c:	f8cd 8010 	str.w	r8, [sp, #16]
 8015a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a44:	f8cd 8014 	str.w	r8, [sp, #20]
 8015a48:	f04f 0a01 	mov.w	sl, #1
 8015a4c:	f103 0b01 	add.w	fp, r3, #1
 8015a50:	45b3      	cmp	fp, r6
 8015a52:	dc68      	bgt.n	8015b26 <_DrawGradient+0x18e>
 8015a54:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8015a58:	fb98 f1f7 	sdiv	r1, r8, r7
 8015a5c:	4461      	add	r1, ip
 8015a5e:	f8dd c010 	ldr.w	ip, [sp, #16]
 8015a62:	fb9c f0f7 	sdiv	r0, ip, r7
 8015a66:	f8dd c020 	ldr.w	ip, [sp, #32]
 8015a6a:	4460      	add	r0, ip
 8015a6c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015a70:	fb9c fef7 	sdiv	lr, ip, r7
 8015a74:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8015a78:	b2c0      	uxtb	r0, r0
 8015a7a:	44e6      	add	lr, ip
 8015a7c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8015a80:	0400      	lsls	r0, r0, #16
 8015a82:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8015a86:	fb9c f1f7 	sdiv	r1, ip, r7
 8015a8a:	f8dd c018 	ldr.w	ip, [sp, #24]
 8015a8e:	4461      	add	r1, ip
 8015a90:	fa5f fe8e 	uxtb.w	lr, lr
 8015a94:	b2c9      	uxtb	r1, r1
 8015a96:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 8015a9a:	4301      	orrs	r1, r0
 8015a9c:	45cb      	cmp	fp, r9
 8015a9e:	910a      	str	r1, [sp, #40]	; 0x28
 8015aa0:	dd26      	ble.n	8015af0 <_DrawGradient+0x158>
 8015aa2:	4291      	cmp	r1, r2
 8015aa4:	d102      	bne.n	8015aac <_DrawGradient+0x114>
 8015aa6:	f10a 0a01 	add.w	sl, sl, #1
 8015aaa:	e021      	b.n	8015af0 <_DrawGradient+0x158>
 8015aac:	4610      	mov	r0, r2
 8015aae:	9300      	str	r3, [sp, #0]
 8015ab0:	f7f7 ff62 	bl	800d978 <LCD_SetColor>
 8015ab4:	f1ba 0f01 	cmp.w	sl, #1
 8015ab8:	9b00      	ldr	r3, [sp, #0]
 8015aba:	d00f      	beq.n	8015adc <_DrawGradient+0x144>
 8015abc:	9801      	ldr	r0, [sp, #4]
 8015abe:	ebca 010b 	rsb	r1, sl, fp
 8015ac2:	b110      	cbz	r0, 8015aca <_DrawGradient+0x132>
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	4622      	mov	r2, r4
 8015ac8:	e003      	b.n	8015ad2 <_DrawGradient+0x13a>
 8015aca:	4608      	mov	r0, r1
 8015acc:	461a      	mov	r2, r3
 8015ace:	4629      	mov	r1, r5
 8015ad0:	4623      	mov	r3, r4
 8015ad2:	f7f7 fc83 	bl	800d3dc <LCD_FillRect>
 8015ad6:	f04f 0a01 	mov.w	sl, #1
 8015ada:	e009      	b.n	8015af0 <_DrawGradient+0x158>
 8015adc:	9901      	ldr	r1, [sp, #4]
 8015ade:	b111      	cbz	r1, 8015ae6 <_DrawGradient+0x14e>
 8015ae0:	4628      	mov	r0, r5
 8015ae2:	4619      	mov	r1, r3
 8015ae4:	e001      	b.n	8015aea <_DrawGradient+0x152>
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	4629      	mov	r1, r5
 8015aea:	4622      	mov	r2, r4
 8015aec:	9b02      	ldr	r3, [sp, #8]
 8015aee:	4798      	blx	r3
 8015af0:	f8dd c014 	ldr.w	ip, [sp, #20]
 8015af4:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8015af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015afa:	44f4      	add	ip, lr
 8015afc:	f8cd c014 	str.w	ip, [sp, #20]
 8015b00:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8015b04:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015b08:	44f4      	add	ip, lr
 8015b0a:	f8cd c00c 	str.w	ip, [sp, #12]
 8015b0e:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8015b12:	f8dd c010 	ldr.w	ip, [sp, #16]
 8015b16:	44f4      	add	ip, lr
 8015b18:	f8cd c010 	str.w	ip, [sp, #16]
 8015b1c:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8015b20:	465b      	mov	r3, fp
 8015b22:	44e0      	add	r8, ip
 8015b24:	e792      	b.n	8015a4c <_DrawGradient+0xb4>
 8015b26:	4610      	mov	r0, r2
 8015b28:	f7f7 ff26 	bl	800d978 <LCD_SetColor>
 8015b2c:	f1ba 0f01 	cmp.w	sl, #1
 8015b30:	d00f      	beq.n	8015b52 <_DrawGradient+0x1ba>
 8015b32:	9801      	ldr	r0, [sp, #4]
 8015b34:	ebca 0106 	rsb	r1, sl, r6
 8015b38:	b130      	cbz	r0, 8015b48 <_DrawGradient+0x1b0>
 8015b3a:	4628      	mov	r0, r5
 8015b3c:	3101      	adds	r1, #1
 8015b3e:	4622      	mov	r2, r4
 8015b40:	4633      	mov	r3, r6
 8015b42:	f7f7 fc4b 	bl	800d3dc <LCD_FillRect>
 8015b46:	e00e      	b.n	8015b66 <_DrawGradient+0x1ce>
 8015b48:	1c48      	adds	r0, r1, #1
 8015b4a:	4629      	mov	r1, r5
 8015b4c:	4632      	mov	r2, r6
 8015b4e:	4623      	mov	r3, r4
 8015b50:	e7f7      	b.n	8015b42 <_DrawGradient+0x1aa>
 8015b52:	9901      	ldr	r1, [sp, #4]
 8015b54:	b111      	cbz	r1, 8015b5c <_DrawGradient+0x1c4>
 8015b56:	4628      	mov	r0, r5
 8015b58:	4631      	mov	r1, r6
 8015b5a:	e001      	b.n	8015b60 <_DrawGradient+0x1c8>
 8015b5c:	4630      	mov	r0, r6
 8015b5e:	4629      	mov	r1, r5
 8015b60:	4622      	mov	r2, r4
 8015b62:	9b02      	ldr	r3, [sp, #8]
 8015b64:	4798      	blx	r3
 8015b66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015b68:	b011      	add	sp, #68	; 0x44
 8015b6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b6e:	f7f7 bf03 	b.w	800d978 <LCD_SetColor>
	...

08015b74 <GUI_DrawGradientV>:
 8015b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b78:	4c15      	ldr	r4, [pc, #84]	; (8015bd0 <GUI_DrawGradientV+0x5c>)
 8015b7a:	6824      	ldr	r4, [r4, #0]
 8015b7c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8015b7e:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8015b80:	b087      	sub	sp, #28
 8015b82:	eb00 0905 	add.w	r9, r0, r5
 8015b86:	eb01 0804 	add.w	r8, r1, r4
 8015b8a:	4415      	add	r5, r2
 8015b8c:	441c      	add	r4, r3
 8015b8e:	a804      	add	r0, sp, #16
 8015b90:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8015b92:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8015b94:	f8ad 9010 	strh.w	r9, [sp, #16]
 8015b98:	f8ad 5014 	strh.w	r5, [sp, #20]
 8015b9c:	f8ad 8012 	strh.w	r8, [sp, #18]
 8015ba0:	f8ad 4016 	strh.w	r4, [sp, #22]
 8015ba4:	f7f4 fe2a 	bl	800a7fc <WM__InitIVRSearch>
 8015ba8:	b170      	cbz	r0, 8015bc8 <GUI_DrawGradientV+0x54>
 8015baa:	4b0a      	ldr	r3, [pc, #40]	; (8015bd4 <GUI_DrawGradientV+0x60>)
 8015bac:	9302      	str	r3, [sp, #8]
 8015bae:	2301      	movs	r3, #1
 8015bb0:	9303      	str	r3, [sp, #12]
 8015bb2:	4648      	mov	r0, r9
 8015bb4:	4641      	mov	r1, r8
 8015bb6:	462a      	mov	r2, r5
 8015bb8:	4623      	mov	r3, r4
 8015bba:	9700      	str	r7, [sp, #0]
 8015bbc:	9601      	str	r6, [sp, #4]
 8015bbe:	f7ff feeb 	bl	8015998 <_DrawGradient>
 8015bc2:	f7f4 fd59 	bl	800a678 <WM__GetNextIVR>
 8015bc6:	e7ef      	b.n	8015ba8 <GUI_DrawGradientV+0x34>
 8015bc8:	b007      	add	sp, #28
 8015bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bce:	bf00      	nop
 8015bd0:	200000d8 	.word	0x200000d8
 8015bd4:	0800d345 	.word	0x0800d345

08015bd8 <GUI_DrawGradientH>:
 8015bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bdc:	4c15      	ldr	r4, [pc, #84]	; (8015c34 <GUI_DrawGradientH+0x5c>)
 8015bde:	6825      	ldr	r5, [r4, #0]
 8015be0:	6cec      	ldr	r4, [r5, #76]	; 0x4c
 8015be2:	6d2d      	ldr	r5, [r5, #80]	; 0x50
 8015be4:	b087      	sub	sp, #28
 8015be6:	eb00 0804 	add.w	r8, r0, r4
 8015bea:	eb01 0905 	add.w	r9, r1, r5
 8015bee:	4414      	add	r4, r2
 8015bf0:	441d      	add	r5, r3
 8015bf2:	a804      	add	r0, sp, #16
 8015bf4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8015bf6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8015bf8:	f8ad 8010 	strh.w	r8, [sp, #16]
 8015bfc:	f8ad 4014 	strh.w	r4, [sp, #20]
 8015c00:	f8ad 9012 	strh.w	r9, [sp, #18]
 8015c04:	f8ad 5016 	strh.w	r5, [sp, #22]
 8015c08:	f7f4 fdf8 	bl	800a7fc <WM__InitIVRSearch>
 8015c0c:	b170      	cbz	r0, 8015c2c <GUI_DrawGradientH+0x54>
 8015c0e:	4b0a      	ldr	r3, [pc, #40]	; (8015c38 <GUI_DrawGradientH+0x60>)
 8015c10:	9302      	str	r3, [sp, #8]
 8015c12:	2300      	movs	r3, #0
 8015c14:	9303      	str	r3, [sp, #12]
 8015c16:	4648      	mov	r0, r9
 8015c18:	4641      	mov	r1, r8
 8015c1a:	462a      	mov	r2, r5
 8015c1c:	4623      	mov	r3, r4
 8015c1e:	9700      	str	r7, [sp, #0]
 8015c20:	9601      	str	r6, [sp, #4]
 8015c22:	f7ff feb9 	bl	8015998 <_DrawGradient>
 8015c26:	f7f4 fd27 	bl	800a678 <WM__GetNextIVR>
 8015c2a:	e7ef      	b.n	8015c0c <GUI_DrawGradientH+0x34>
 8015c2c:	b007      	add	sp, #28
 8015c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c32:	bf00      	nop
 8015c34:	200000d8 	.word	0x200000d8
 8015c38:	0800d391 	.word	0x0800d391

08015c3c <GL_DrawBitmap>:
 8015c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c40:	68c6      	ldr	r6, [r0, #12]
 8015c42:	b087      	sub	sp, #28
 8015c44:	4604      	mov	r4, r0
 8015c46:	2000      	movs	r0, #0
 8015c48:	4688      	mov	r8, r1
 8015c4a:	4617      	mov	r7, r2
 8015c4c:	f7f8 ff50 	bl	800eaf0 <GUI_SetDrawMode>
 8015c50:	4605      	mov	r5, r0
 8015c52:	b126      	cbz	r6, 8015c5e <GL_DrawBitmap+0x22>
 8015c54:	7933      	ldrb	r3, [r6, #4]
 8015c56:	b113      	cbz	r3, 8015c5e <GL_DrawBitmap+0x22>
 8015c58:	f040 0002 	orr.w	r0, r0, #2
 8015c5c:	e001      	b.n	8015c62 <GL_DrawBitmap+0x26>
 8015c5e:	f025 0002 	bic.w	r0, r5, #2
 8015c62:	f7f8 ff45 	bl	800eaf0 <GUI_SetDrawMode>
 8015c66:	6921      	ldr	r1, [r4, #16]
 8015c68:	b169      	cbz	r1, 8015c86 <GL_DrawBitmap+0x4a>
 8015c6a:	68a0      	ldr	r0, [r4, #8]
 8015c6c:	8822      	ldrh	r2, [r4, #0]
 8015c6e:	8863      	ldrh	r3, [r4, #2]
 8015c70:	9000      	str	r0, [sp, #0]
 8015c72:	68e0      	ldr	r0, [r4, #12]
 8015c74:	9001      	str	r0, [sp, #4]
 8015c76:	2001      	movs	r0, #1
 8015c78:	9002      	str	r0, [sp, #8]
 8015c7a:	9003      	str	r0, [sp, #12]
 8015c7c:	680c      	ldr	r4, [r1, #0]
 8015c7e:	4640      	mov	r0, r8
 8015c80:	4639      	mov	r1, r7
 8015c82:	47a0      	blx	r4
 8015c84:	e020      	b.n	8015cc8 <GL_DrawBitmap+0x8c>
 8015c86:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8015cd8 <GL_DrawBitmap+0x9c>
 8015c8a:	4a12      	ldr	r2, [pc, #72]	; (8015cd4 <GL_DrawBitmap+0x98>)
 8015c8c:	f8d9 3000 	ldr.w	r3, [r9]
 8015c90:	6816      	ldr	r6, [r2, #0]
 8015c92:	68e0      	ldr	r0, [r4, #12]
 8015c94:	7c5a      	ldrb	r2, [r3, #17]
 8015c96:	4621      	mov	r1, r4
 8015c98:	47b0      	blx	r6
 8015c9a:	88e1      	ldrh	r1, [r4, #6]
 8015c9c:	4606      	mov	r6, r0
 8015c9e:	b920      	cbnz	r0, 8015caa <GL_DrawBitmap+0x6e>
 8015ca0:	2901      	cmp	r1, #1
 8015ca2:	bf04      	itt	eq
 8015ca4:	f8d9 3000 	ldreq.w	r3, [r9]
 8015ca8:	6b9e      	ldreq	r6, [r3, #56]	; 0x38
 8015caa:	2001      	movs	r0, #1
 8015cac:	8822      	ldrh	r2, [r4, #0]
 8015cae:	8863      	ldrh	r3, [r4, #2]
 8015cb0:	9000      	str	r0, [sp, #0]
 8015cb2:	9001      	str	r0, [sp, #4]
 8015cb4:	9102      	str	r1, [sp, #8]
 8015cb6:	88a1      	ldrh	r1, [r4, #4]
 8015cb8:	9103      	str	r1, [sp, #12]
 8015cba:	68a1      	ldr	r1, [r4, #8]
 8015cbc:	9104      	str	r1, [sp, #16]
 8015cbe:	9605      	str	r6, [sp, #20]
 8015cc0:	4640      	mov	r0, r8
 8015cc2:	4639      	mov	r1, r7
 8015cc4:	f7f7 fc92 	bl	800d5ec <LCD_DrawBitmap>
 8015cc8:	4628      	mov	r0, r5
 8015cca:	b007      	add	sp, #28
 8015ccc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015cd0:	f7f8 bf0e 	b.w	800eaf0 <GUI_SetDrawMode>
 8015cd4:	200000e0 	.word	0x200000e0
 8015cd8:	200000d8 	.word	0x200000d8

08015cdc <GUI_DrawBitmap>:
 8015cdc:	4b11      	ldr	r3, [pc, #68]	; (8015d24 <GUI_DrawBitmap+0x48>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ce2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8015ce4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8015ce6:	8803      	ldrh	r3, [r0, #0]
 8015ce8:	440e      	add	r6, r1
 8015cea:	3b01      	subs	r3, #1
 8015cec:	4433      	add	r3, r6
 8015cee:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015cf2:	8843      	ldrh	r3, [r0, #2]
 8015cf4:	f8ad 6000 	strh.w	r6, [sp]
 8015cf8:	4415      	add	r5, r2
 8015cfa:	3b01      	subs	r3, #1
 8015cfc:	4604      	mov	r4, r0
 8015cfe:	442b      	add	r3, r5
 8015d00:	4668      	mov	r0, sp
 8015d02:	f8ad 5002 	strh.w	r5, [sp, #2]
 8015d06:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015d0a:	f7f4 fd77 	bl	800a7fc <WM__InitIVRSearch>
 8015d0e:	b138      	cbz	r0, 8015d20 <GUI_DrawBitmap+0x44>
 8015d10:	4620      	mov	r0, r4
 8015d12:	4631      	mov	r1, r6
 8015d14:	462a      	mov	r2, r5
 8015d16:	f7ff ff91 	bl	8015c3c <GL_DrawBitmap>
 8015d1a:	f7f4 fcad 	bl	800a678 <WM__GetNextIVR>
 8015d1e:	e7f6      	b.n	8015d0e <GUI_DrawBitmap+0x32>
 8015d20:	b002      	add	sp, #8
 8015d22:	bd70      	pop	{r4, r5, r6, pc}
 8015d24:	200000d8 	.word	0x200000d8

08015d28 <GUI__DispStringInRect>:
 8015d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d2c:	b087      	sub	sp, #28
 8015d2e:	460c      	mov	r4, r1
 8015d30:	9001      	str	r0, [sp, #4]
 8015d32:	4691      	mov	r9, r2
 8015d34:	461d      	mov	r5, r3
 8015d36:	f7f9 fef7 	bl	800fb28 <GUI_GetFontDistY>
 8015d3a:	9f01      	ldr	r7, [sp, #4]
 8015d3c:	4680      	mov	r8, r0
 8015d3e:	b124      	cbz	r4, 8015d4a <GUI__DispStringInRect+0x22>
 8015d40:	6820      	ldr	r0, [r4, #0]
 8015d42:	6861      	ldr	r1, [r4, #4]
 8015d44:	ab04      	add	r3, sp, #16
 8015d46:	c303      	stmia	r3!, {r0, r1}
 8015d48:	e002      	b.n	8015d50 <GUI__DispStringInRect+0x28>
 8015d4a:	a804      	add	r0, sp, #16
 8015d4c:	f7ff fdd1 	bl	80158f2 <GUI_GetClientRect>
 8015d50:	f019 0a0c 	ands.w	sl, r9, #12
 8015d54:	d002      	beq.n	8015d5c <GUI__DispStringInRect+0x34>
 8015d56:	462c      	mov	r4, r5
 8015d58:	2600      	movs	r6, #0
 8015d5a:	e016      	b.n	8015d8a <GUI__DispStringInRect+0x62>
 8015d5c:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 8015d60:	e032      	b.n	8015dc8 <GUI__DispStringInRect+0xa0>
 8015d62:	4621      	mov	r1, r4
 8015d64:	9801      	ldr	r0, [sp, #4]
 8015d66:	f7f9 fe2d 	bl	800f9c4 <GUI__GetLineNumChars>
 8015d6a:	f8dd b004 	ldr.w	fp, [sp, #4]
 8015d6e:	4601      	mov	r1, r0
 8015d70:	1a24      	subs	r4, r4, r0
 8015d72:	4658      	mov	r0, fp
 8015d74:	f7fd fffc 	bl	8013d70 <GUI_UC__NumChars2NumBytes>
 8015d78:	eb0b 0300 	add.w	r3, fp, r0
 8015d7c:	a806      	add	r0, sp, #24
 8015d7e:	3601      	adds	r6, #1
 8015d80:	f840 3d14 	str.w	r3, [r0, #-20]!
 8015d84:	f000 fce9 	bl	801675a <GUI__HandleEOLine>
 8015d88:	b908      	cbnz	r0, 8015d8e <GUI__DispStringInRect+0x66>
 8015d8a:	2c00      	cmp	r4, #0
 8015d8c:	d1e9      	bne.n	8015d62 <GUI__DispStringInRect+0x3a>
 8015d8e:	f1ba 0f08 	cmp.w	sl, #8
 8015d92:	d005      	beq.n	8015da0 <GUI__DispStringInRect+0x78>
 8015d94:	f1ba 0f0c 	cmp.w	sl, #12
 8015d98:	d008      	beq.n	8015dac <GUI__DispStringInRect+0x84>
 8015d9a:	f1ba 0f04 	cmp.w	sl, #4
 8015d9e:	d112      	bne.n	8015dc6 <GUI__DispStringInRect+0x9e>
 8015da0:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8015da4:	fb08 4416 	mls	r4, r8, r6, r4
 8015da8:	3401      	adds	r4, #1
 8015daa:	e00d      	b.n	8015dc8 <GUI__DispStringInRect+0xa0>
 8015dac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8015db0:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8015db4:	1ae4      	subs	r4, r4, r3
 8015db6:	3401      	adds	r4, #1
 8015db8:	fb08 4416 	mls	r4, r8, r6, r4
 8015dbc:	2202      	movs	r2, #2
 8015dbe:	fb94 f4f2 	sdiv	r4, r4, r2
 8015dc2:	441c      	add	r4, r3
 8015dc4:	e000      	b.n	8015dc8 <GUI__DispStringInRect+0xa0>
 8015dc6:	2400      	movs	r4, #0
 8015dc8:	9701      	str	r7, [sp, #4]
 8015dca:	2600      	movs	r6, #0
 8015dcc:	2d00      	cmp	r5, #0
 8015dce:	d04b      	beq.n	8015e68 <GUI__DispStringInRect+0x140>
 8015dd0:	4629      	mov	r1, r5
 8015dd2:	9801      	ldr	r0, [sp, #4]
 8015dd4:	f7f9 fdf6 	bl	800f9c4 <GUI__GetLineNumChars>
 8015dd8:	4607      	mov	r7, r0
 8015dda:	1a2d      	subs	r5, r5, r0
 8015ddc:	4639      	mov	r1, r7
 8015dde:	9801      	ldr	r0, [sp, #4]
 8015de0:	f7f9 fe1e 	bl	800fa20 <GUI__GetLineDistX>
 8015de4:	f009 0303 	and.w	r3, r9, #3
 8015de8:	2b01      	cmp	r3, #1
 8015dea:	d00f      	beq.n	8015e0c <GUI__DispStringInRect+0xe4>
 8015dec:	2b02      	cmp	r3, #2
 8015dee:	d003      	beq.n	8015df8 <GUI__DispStringInRect+0xd0>
 8015df0:	b983      	cbnz	r3, 8015e14 <GUI__DispStringInRect+0xec>
 8015df2:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8015df6:	e00d      	b.n	8015e14 <GUI__DispStringInRect+0xec>
 8015df8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8015dfc:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8015e00:	1ab6      	subs	r6, r6, r2
 8015e02:	1a36      	subs	r6, r6, r0
 8015e04:	fb96 f6f3 	sdiv	r6, r6, r3
 8015e08:	4416      	add	r6, r2
 8015e0a:	e003      	b.n	8015e14 <GUI__DispStringInRect+0xec>
 8015e0c:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8015e10:	1a36      	subs	r6, r6, r0
 8015e12:	3601      	adds	r6, #1
 8015e14:	4b16      	ldr	r3, [pc, #88]	; (8015e70 <GUI__DispStringInRect+0x148>)
 8015e16:	6819      	ldr	r1, [r3, #0]
 8015e18:	3801      	subs	r0, #1
 8015e1a:	b2a3      	uxth	r3, r4
 8015e1c:	b2b2      	uxth	r2, r6
 8015e1e:	848b      	strh	r3, [r1, #36]	; 0x24
 8015e20:	4430      	add	r0, r6
 8015e22:	f8ad 300a 	strh.w	r3, [sp, #10]
 8015e26:	f108 33ff 	add.w	r3, r8, #4294967295
 8015e2a:	4423      	add	r3, r4
 8015e2c:	844a      	strh	r2, [r1, #34]	; 0x22
 8015e2e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8015e32:	4639      	mov	r1, r7
 8015e34:	aa02      	add	r2, sp, #8
 8015e36:	f8ad 000c 	strh.w	r0, [sp, #12]
 8015e3a:	9801      	ldr	r0, [sp, #4]
 8015e3c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015e40:	f7f9 fe1e 	bl	800fa80 <GUI__DispLine>
 8015e44:	f8dd a004 	ldr.w	sl, [sp, #4]
 8015e48:	4639      	mov	r1, r7
 8015e4a:	4650      	mov	r0, sl
 8015e4c:	f7fd ff90 	bl	8013d70 <GUI_UC__NumChars2NumBytes>
 8015e50:	af06      	add	r7, sp, #24
 8015e52:	4450      	add	r0, sl
 8015e54:	f847 0d14 	str.w	r0, [r7, #-20]!
 8015e58:	f7f9 fe66 	bl	800fb28 <GUI_GetFontDistY>
 8015e5c:	4404      	add	r4, r0
 8015e5e:	4638      	mov	r0, r7
 8015e60:	f000 fc7b 	bl	801675a <GUI__HandleEOLine>
 8015e64:	2800      	cmp	r0, #0
 8015e66:	d0b1      	beq.n	8015dcc <GUI__DispStringInRect+0xa4>
 8015e68:	b007      	add	sp, #28
 8015e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e6e:	bf00      	nop
 8015e70:	200000d8 	.word	0x200000d8

08015e74 <GUI_DispStringInRectMax>:
 8015e74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015e78:	460c      	mov	r4, r1
 8015e7a:	4690      	mov	r8, r2
 8015e7c:	461f      	mov	r7, r3
 8015e7e:	4606      	mov	r6, r0
 8015e80:	b1c0      	cbz	r0, 8015eb4 <GUI_DispStringInRectMax+0x40>
 8015e82:	b169      	cbz	r1, 8015ea0 <GUI_DispStringInRectMax+0x2c>
 8015e84:	4608      	mov	r0, r1
 8015e86:	f7fb fcf1 	bl	801186c <WM_SetUserClipRect>
 8015e8a:	4605      	mov	r5, r0
 8015e8c:	b148      	cbz	r0, 8015ea2 <GUI_DispStringInRectMax+0x2e>
 8015e8e:	4668      	mov	r0, sp
 8015e90:	4621      	mov	r1, r4
 8015e92:	462a      	mov	r2, r5
 8015e94:	f7f7 fe9e 	bl	800dbd4 <GUI__IntersectRects>
 8015e98:	4668      	mov	r0, sp
 8015e9a:	f7fb fce7 	bl	801186c <WM_SetUserClipRect>
 8015e9e:	e000      	b.n	8015ea2 <GUI_DispStringInRectMax+0x2e>
 8015ea0:	460d      	mov	r5, r1
 8015ea2:	4630      	mov	r0, r6
 8015ea4:	4621      	mov	r1, r4
 8015ea6:	4642      	mov	r2, r8
 8015ea8:	463b      	mov	r3, r7
 8015eaa:	f7ff ff3d 	bl	8015d28 <GUI__DispStringInRect>
 8015eae:	4628      	mov	r0, r5
 8015eb0:	f7fb fcdc 	bl	801186c <WM_SetUserClipRect>
 8015eb4:	b002      	add	sp, #8
 8015eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015eba <GUI_DispStringInRect>:
 8015eba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015ebe:	f7ff bfd9 	b.w	8015e74 <GUI_DispStringInRectMax>
	...

08015ec4 <GUI_DrawRect>:
 8015ec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015ec8:	4c1e      	ldr	r4, [pc, #120]	; (8015f44 <GUI_DrawRect+0x80>)
 8015eca:	f8d4 e000 	ldr.w	lr, [r4]
 8015ece:	f8de 404c 	ldr.w	r4, [lr, #76]	; 0x4c
 8015ed2:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
 8015ed6:	1905      	adds	r5, r0, r4
 8015ed8:	4414      	add	r4, r2
 8015eda:	f89e 2018 	ldrb.w	r2, [lr, #24]
 8015ede:	3a01      	subs	r2, #1
 8015ee0:	b292      	uxth	r2, r2
 8015ee2:	198f      	adds	r7, r1, r6
 8015ee4:	441e      	add	r6, r3
 8015ee6:	1aab      	subs	r3, r5, r2
 8015ee8:	f8ad 3000 	strh.w	r3, [sp]
 8015eec:	1913      	adds	r3, r2, r4
 8015eee:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015ef2:	4668      	mov	r0, sp
 8015ef4:	1abb      	subs	r3, r7, r2
 8015ef6:	4432      	add	r2, r6
 8015ef8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015efc:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015f00:	f7f4 fc7c 	bl	800a7fc <WM__InitIVRSearch>
 8015f04:	b1d0      	cbz	r0, 8015f3c <GUI_DrawRect+0x78>
 8015f06:	4628      	mov	r0, r5
 8015f08:	4639      	mov	r1, r7
 8015f0a:	4622      	mov	r2, r4
 8015f0c:	f7f7 fa1a 	bl	800d344 <LCD_DrawHLine>
 8015f10:	f107 0901 	add.w	r9, r7, #1
 8015f14:	4628      	mov	r0, r5
 8015f16:	4631      	mov	r1, r6
 8015f18:	4622      	mov	r2, r4
 8015f1a:	f106 38ff 	add.w	r8, r6, #4294967295
 8015f1e:	f7f7 fa11 	bl	800d344 <LCD_DrawHLine>
 8015f22:	4628      	mov	r0, r5
 8015f24:	4649      	mov	r1, r9
 8015f26:	4642      	mov	r2, r8
 8015f28:	f7f7 fa32 	bl	800d390 <LCD_DrawVLine>
 8015f2c:	4620      	mov	r0, r4
 8015f2e:	4649      	mov	r1, r9
 8015f30:	4642      	mov	r2, r8
 8015f32:	f7f7 fa2d 	bl	800d390 <LCD_DrawVLine>
 8015f36:	f7f4 fb9f 	bl	800a678 <WM__GetNextIVR>
 8015f3a:	e7e3      	b.n	8015f04 <GUI_DrawRect+0x40>
 8015f3c:	b003      	add	sp, #12
 8015f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f42:	bf00      	nop
 8015f44:	200000d8 	.word	0x200000d8

08015f48 <_GetIndexMask_0>:
 8015f48:	b508      	push	{r3, lr}
 8015f4a:	f7f7 f905 	bl	800d158 <LCD_GetNumColors>
 8015f4e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8015f52:	d010      	beq.n	8015f76 <_GetIndexMask_0+0x2e>
 8015f54:	287f      	cmp	r0, #127	; 0x7f
 8015f56:	d810      	bhi.n	8015f7a <_GetIndexMask_0+0x32>
 8015f58:	283f      	cmp	r0, #63	; 0x3f
 8015f5a:	d810      	bhi.n	8015f7e <_GetIndexMask_0+0x36>
 8015f5c:	281f      	cmp	r0, #31
 8015f5e:	d810      	bhi.n	8015f82 <_GetIndexMask_0+0x3a>
 8015f60:	280f      	cmp	r0, #15
 8015f62:	d810      	bhi.n	8015f86 <_GetIndexMask_0+0x3e>
 8015f64:	2807      	cmp	r0, #7
 8015f66:	d810      	bhi.n	8015f8a <_GetIndexMask_0+0x42>
 8015f68:	2803      	cmp	r0, #3
 8015f6a:	d810      	bhi.n	8015f8e <_GetIndexMask_0+0x46>
 8015f6c:	2801      	cmp	r0, #1
 8015f6e:	bf94      	ite	ls
 8015f70:	2000      	movls	r0, #0
 8015f72:	2001      	movhi	r0, #1
 8015f74:	e00c      	b.n	8015f90 <_GetIndexMask_0+0x48>
 8015f76:	2008      	movs	r0, #8
 8015f78:	e00a      	b.n	8015f90 <_GetIndexMask_0+0x48>
 8015f7a:	2007      	movs	r0, #7
 8015f7c:	e008      	b.n	8015f90 <_GetIndexMask_0+0x48>
 8015f7e:	2006      	movs	r0, #6
 8015f80:	e006      	b.n	8015f90 <_GetIndexMask_0+0x48>
 8015f82:	2005      	movs	r0, #5
 8015f84:	e004      	b.n	8015f90 <_GetIndexMask_0+0x48>
 8015f86:	2004      	movs	r0, #4
 8015f88:	e002      	b.n	8015f90 <_GetIndexMask_0+0x48>
 8015f8a:	2003      	movs	r0, #3
 8015f8c:	e000      	b.n	8015f90 <_GetIndexMask_0+0x48>
 8015f8e:	2002      	movs	r0, #2
 8015f90:	2301      	movs	r3, #1
 8015f92:	fa03 f000 	lsl.w	r0, r3, r0
 8015f96:	3801      	subs	r0, #1
 8015f98:	bd08      	pop	{r3, pc}

08015f9a <_Index2Color_0>:
 8015f9a:	b538      	push	{r3, r4, r5, lr}
 8015f9c:	4604      	mov	r4, r0
 8015f9e:	f7f7 f8db 	bl	800d158 <LCD_GetNumColors>
 8015fa2:	4605      	mov	r5, r0
 8015fa4:	f7f7 f8f6 	bl	800d194 <LCD_GetPalette>
 8015fa8:	42ac      	cmp	r4, r5
 8015faa:	d203      	bcs.n	8015fb4 <_Index2Color_0+0x1a>
 8015fac:	b118      	cbz	r0, 8015fb6 <_Index2Color_0+0x1c>
 8015fae:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015fb2:	bd38      	pop	{r3, r4, r5, pc}
 8015fb4:	2000      	movs	r0, #0
 8015fb6:	bd38      	pop	{r3, r4, r5, pc}

08015fb8 <_Color2Index_0>:
 8015fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fbc:	4681      	mov	r9, r0
 8015fbe:	f7f7 f8cb 	bl	800d158 <LCD_GetNumColors>
 8015fc2:	4680      	mov	r8, r0
 8015fc4:	f7f7 f8e6 	bl	800d194 <LCD_GetPalette>
 8015fc8:	4606      	mov	r6, r0
 8015fca:	b1d8      	cbz	r0, 8016004 <_Color2Index_0+0x4c>
 8015fcc:	2300      	movs	r3, #0
 8015fce:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8015fd2:	4591      	cmp	r9, r2
 8015fd4:	d01a      	beq.n	801600c <_Color2Index_0+0x54>
 8015fd6:	3301      	adds	r3, #1
 8015fd8:	4543      	cmp	r3, r8
 8015fda:	dbf8      	blt.n	8015fce <_Color2Index_0+0x16>
 8015fdc:	2500      	movs	r5, #0
 8015fde:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8015fe2:	462c      	mov	r4, r5
 8015fe4:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8015fe8:	4648      	mov	r0, r9
 8015fea:	f000 fbe5 	bl	80167b8 <GUI_CalcColorDist>
 8015fee:	42b8      	cmp	r0, r7
 8015ff0:	bf38      	it	cc
 8015ff2:	4625      	movcc	r5, r4
 8015ff4:	f104 0401 	add.w	r4, r4, #1
 8015ff8:	bf28      	it	cs
 8015ffa:	4638      	movcs	r0, r7
 8015ffc:	4544      	cmp	r4, r8
 8015ffe:	da02      	bge.n	8016006 <_Color2Index_0+0x4e>
 8016000:	4607      	mov	r7, r0
 8016002:	e7ef      	b.n	8015fe4 <_Color2Index_0+0x2c>
 8016004:	4605      	mov	r5, r0
 8016006:	4628      	mov	r0, r5
 8016008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801600c:	4618      	mov	r0, r3
 801600e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016012 <_GetArrowPara>:
 8016012:	b510      	push	{r4, lr}
 8016014:	b121      	cbz	r1, 8016020 <_GetArrowPara+0xe>
 8016016:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801601a:	f9b0 1000 	ldrsh.w	r1, [r0]
 801601e:	e003      	b.n	8016028 <_GetArrowPara+0x16>
 8016020:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8016024:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016028:	1a61      	subs	r1, r4, r1
 801602a:	3101      	adds	r1, #1
 801602c:	1f0c      	subs	r4, r1, #4
 801602e:	2003      	movs	r0, #3
 8016030:	fb94 f0f0 	sdiv	r0, r4, r0
 8016034:	6010      	str	r0, [r2, #0]
 8016036:	1a08      	subs	r0, r1, r0
 8016038:	eba1 0160 	sub.w	r1, r1, r0, asr #1
 801603c:	3901      	subs	r1, #1
 801603e:	6019      	str	r1, [r3, #0]
 8016040:	bd10      	pop	{r4, pc}

08016042 <_DrawGraspH>:
 8016042:	b570      	push	{r4, r5, r6, lr}
 8016044:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016048:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801604c:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8016050:	441e      	add	r6, r3
 8016052:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016056:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8016058:	1b5c      	subs	r4, r3, r5
 801605a:	3403      	adds	r4, #3
 801605c:	10a4      	asrs	r4, r4, #2
 801605e:	4425      	add	r5, r4
 8016060:	1076      	asrs	r6, r6, #1
 8016062:	1b1c      	subs	r4, r3, r4
 8016064:	f7f8 fd68 	bl	800eb38 <GUI_SetColor>
 8016068:	4630      	mov	r0, r6
 801606a:	4629      	mov	r1, r5
 801606c:	4622      	mov	r2, r4
 801606e:	f7f8 ff6d 	bl	800ef4c <GUI_DrawVLine>
 8016072:	1cb0      	adds	r0, r6, #2
 8016074:	4629      	mov	r1, r5
 8016076:	4622      	mov	r2, r4
 8016078:	f7f8 ff68 	bl	800ef4c <GUI_DrawVLine>
 801607c:	1d30      	adds	r0, r6, #4
 801607e:	4629      	mov	r1, r5
 8016080:	4622      	mov	r2, r4
 8016082:	f7f8 ff63 	bl	800ef4c <GUI_DrawVLine>
 8016086:	1eb0      	subs	r0, r6, #2
 8016088:	4629      	mov	r1, r5
 801608a:	4622      	mov	r2, r4
 801608c:	f7f8 ff5e 	bl	800ef4c <GUI_DrawVLine>
 8016090:	1f30      	subs	r0, r6, #4
 8016092:	4629      	mov	r1, r5
 8016094:	4622      	mov	r2, r4
 8016096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801609a:	f7f8 bf57 	b.w	800ef4c <GUI_DrawVLine>

0801609e <_DrawGraspV>:
 801609e:	b570      	push	{r4, r5, r6, lr}
 80160a0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80160a4:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 80160a8:	f9b0 5000 	ldrsh.w	r5, [r0]
 80160ac:	441e      	add	r6, r3
 80160ae:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80160b2:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80160b4:	1b5c      	subs	r4, r3, r5
 80160b6:	3403      	adds	r4, #3
 80160b8:	10a4      	asrs	r4, r4, #2
 80160ba:	4425      	add	r5, r4
 80160bc:	1076      	asrs	r6, r6, #1
 80160be:	1b1c      	subs	r4, r3, r4
 80160c0:	f7f8 fd3a 	bl	800eb38 <GUI_SetColor>
 80160c4:	4630      	mov	r0, r6
 80160c6:	4629      	mov	r1, r5
 80160c8:	4622      	mov	r2, r4
 80160ca:	f7f8 ff61 	bl	800ef90 <GUI_DrawHLine>
 80160ce:	1cb0      	adds	r0, r6, #2
 80160d0:	4629      	mov	r1, r5
 80160d2:	4622      	mov	r2, r4
 80160d4:	f7f8 ff5c 	bl	800ef90 <GUI_DrawHLine>
 80160d8:	1d30      	adds	r0, r6, #4
 80160da:	4629      	mov	r1, r5
 80160dc:	4622      	mov	r2, r4
 80160de:	f7f8 ff57 	bl	800ef90 <GUI_DrawHLine>
 80160e2:	1eb0      	subs	r0, r6, #2
 80160e4:	4629      	mov	r1, r5
 80160e6:	4622      	mov	r2, r4
 80160e8:	f7f8 ff52 	bl	800ef90 <GUI_DrawHLine>
 80160ec:	1f30      	subs	r0, r6, #4
 80160ee:	4629      	mov	r1, r5
 80160f0:	4622      	mov	r2, r4
 80160f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160f6:	f7f8 bf4b 	b.w	800ef90 <GUI_DrawHLine>

080160fa <_DrawFrame>:
 80160fa:	b538      	push	{r3, r4, r5, lr}
 80160fc:	4604      	mov	r4, r0
 80160fe:	6808      	ldr	r0, [r1, #0]
 8016100:	460d      	mov	r5, r1
 8016102:	f7f8 fd19 	bl	800eb38 <GUI_SetColor>
 8016106:	f9b4 1000 	ldrsh.w	r1, [r4]
 801610a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801610e:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8016112:	3101      	adds	r1, #1
 8016114:	3a01      	subs	r2, #1
 8016116:	f7f8 ff3b 	bl	800ef90 <GUI_DrawHLine>
 801611a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801611e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016122:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8016126:	3101      	adds	r1, #1
 8016128:	3a01      	subs	r2, #1
 801612a:	f7f8 ff31 	bl	800ef90 <GUI_DrawHLine>
 801612e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016132:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016136:	f9b4 0000 	ldrsh.w	r0, [r4]
 801613a:	3101      	adds	r1, #1
 801613c:	3a01      	subs	r2, #1
 801613e:	f7f8 ff05 	bl	800ef4c <GUI_DrawVLine>
 8016142:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016146:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801614a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801614e:	3101      	adds	r1, #1
 8016150:	3a01      	subs	r2, #1
 8016152:	f7f8 fefb 	bl	800ef4c <GUI_DrawVLine>
 8016156:	6868      	ldr	r0, [r5, #4]
 8016158:	f7f8 fcee 	bl	800eb38 <GUI_SetColor>
 801615c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8016160:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016164:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016168:	3001      	adds	r0, #1
 801616a:	3101      	adds	r1, #1
 801616c:	3a01      	subs	r2, #1
 801616e:	f7f8 ff0f 	bl	800ef90 <GUI_DrawHLine>
 8016172:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8016176:	f9b4 1000 	ldrsh.w	r1, [r4]
 801617a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801617e:	3801      	subs	r0, #1
 8016180:	3101      	adds	r1, #1
 8016182:	3a01      	subs	r2, #1
 8016184:	f7f8 ff04 	bl	800ef90 <GUI_DrawHLine>
 8016188:	f9b4 0000 	ldrsh.w	r0, [r4]
 801618c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016190:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016194:	3001      	adds	r0, #1
 8016196:	3102      	adds	r1, #2
 8016198:	3a02      	subs	r2, #2
 801619a:	f7f8 fed7 	bl	800ef4c <GUI_DrawVLine>
 801619e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80161a2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80161a6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80161aa:	3102      	adds	r1, #2
 80161ac:	3a02      	subs	r2, #2
 80161ae:	3801      	subs	r0, #1
 80161b0:	f7f8 fecc 	bl	800ef4c <GUI_DrawVLine>
 80161b4:	68a8      	ldr	r0, [r5, #8]
 80161b6:	f7f8 fcbf 	bl	800eb38 <GUI_SetColor>
 80161ba:	f9b4 0000 	ldrsh.w	r0, [r4]
 80161be:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80161c2:	f000 fad7 	bl	8016774 <GUI_DrawPixel>
 80161c6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80161ca:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80161ce:	f000 fad1 	bl	8016774 <GUI_DrawPixel>
 80161d2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80161d6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80161da:	f000 facb 	bl	8016774 <GUI_DrawPixel>
 80161de:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80161e2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80161e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80161ea:	f000 bac3 	b.w	8016774 <GUI_DrawPixel>

080161ee <_DrawBackgroundH>:
 80161ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80161f0:	4604      	mov	r4, r0
 80161f2:	460d      	mov	r5, r1
 80161f4:	f7ff ff81 	bl	80160fa <_DrawFrame>
 80161f8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80161fc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016200:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016204:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016208:	68ee      	ldr	r6, [r5, #12]
 801620a:	9600      	str	r6, [sp, #0]
 801620c:	440b      	add	r3, r1
 801620e:	692e      	ldr	r6, [r5, #16]
 8016210:	9601      	str	r6, [sp, #4]
 8016212:	3002      	adds	r0, #2
 8016214:	3102      	adds	r1, #2
 8016216:	3a02      	subs	r2, #2
 8016218:	105b      	asrs	r3, r3, #1
 801621a:	f7ff fcab 	bl	8015b74 <GUI_DrawGradientV>
 801621e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016222:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016226:	f9b4 0000 	ldrsh.w	r0, [r4]
 801622a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801622e:	696c      	ldr	r4, [r5, #20]
 8016230:	9400      	str	r4, [sp, #0]
 8016232:	4419      	add	r1, r3
 8016234:	69ac      	ldr	r4, [r5, #24]
 8016236:	9401      	str	r4, [sp, #4]
 8016238:	1049      	asrs	r1, r1, #1
 801623a:	3002      	adds	r0, #2
 801623c:	3101      	adds	r1, #1
 801623e:	3a02      	subs	r2, #2
 8016240:	3b02      	subs	r3, #2
 8016242:	f7ff fc97 	bl	8015b74 <GUI_DrawGradientV>
 8016246:	b002      	add	sp, #8
 8016248:	bd70      	pop	{r4, r5, r6, pc}

0801624a <_DrawBackgroundV>:
 801624a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801624c:	4604      	mov	r4, r0
 801624e:	460d      	mov	r5, r1
 8016250:	f7ff ff53 	bl	80160fa <_DrawFrame>
 8016254:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016258:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801625c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016260:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016264:	68ee      	ldr	r6, [r5, #12]
 8016266:	9600      	str	r6, [sp, #0]
 8016268:	4402      	add	r2, r0
 801626a:	692e      	ldr	r6, [r5, #16]
 801626c:	9601      	str	r6, [sp, #4]
 801626e:	3002      	adds	r0, #2
 8016270:	3102      	adds	r1, #2
 8016272:	1052      	asrs	r2, r2, #1
 8016274:	3b02      	subs	r3, #2
 8016276:	f7ff fcaf 	bl	8015bd8 <GUI_DrawGradientH>
 801627a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801627e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016282:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016286:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801628a:	696c      	ldr	r4, [r5, #20]
 801628c:	9400      	str	r4, [sp, #0]
 801628e:	4410      	add	r0, r2
 8016290:	69ac      	ldr	r4, [r5, #24]
 8016292:	9401      	str	r4, [sp, #4]
 8016294:	1040      	asrs	r0, r0, #1
 8016296:	3001      	adds	r0, #1
 8016298:	3102      	adds	r1, #2
 801629a:	3a02      	subs	r2, #2
 801629c:	3b02      	subs	r3, #2
 801629e:	f7ff fc9b 	bl	8015bd8 <GUI_DrawGradientH>
 80162a2:	b002      	add	sp, #8
 80162a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080162a8 <SCROLLBAR_DrawSkinFlex>:
 80162a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162ac:	4604      	mov	r4, r0
 80162ae:	b08b      	sub	sp, #44	; 0x2c
 80162b0:	6800      	ldr	r0, [r0, #0]
 80162b2:	f7f9 fd55 	bl	800fd60 <GUI_ALLOC_LockH>
 80162b6:	4607      	mov	r7, r0
 80162b8:	a80a      	add	r0, sp, #40	; 0x28
 80162ba:	ae06      	add	r6, sp, #24
 80162bc:	f840 7d1c 	str.w	r7, [r0, #-28]!
 80162c0:	f7f9 fd5c 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80162c4:	6923      	ldr	r3, [r4, #16]
 80162c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80162ca:	6963      	ldr	r3, [r4, #20]
 80162cc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80162d0:	69a3      	ldr	r3, [r4, #24]
 80162d2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80162d6:	69e3      	ldr	r3, [r4, #28]
 80162d8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80162dc:	6a25      	ldr	r5, [r4, #32]
 80162de:	e896 0003 	ldmia.w	r6, {r0, r1}
 80162e2:	682b      	ldr	r3, [r5, #0]
 80162e4:	f10d 0820 	add.w	r8, sp, #32
 80162e8:	e888 0003 	stmia.w	r8, {r0, r1}
 80162ec:	b153      	cbz	r3, 8016304 <SCROLLBAR_DrawSkinFlex+0x5c>
 80162ee:	4638      	mov	r0, r7
 80162f0:	4631      	mov	r1, r6
 80162f2:	4632      	mov	r2, r6
 80162f4:	f7f0 fb71 	bl	80069da <WIDGET__RotateRect90>
 80162f8:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8016438 <SCROLLBAR_DrawSkinFlex+0x190>
 80162fc:	f8df c13c 	ldr.w	ip, [pc, #316]	; 801643c <SCROLLBAR_DrawSkinFlex+0x194>
 8016300:	4b49      	ldr	r3, [pc, #292]	; (8016428 <SCROLLBAR_DrawSkinFlex+0x180>)
 8016302:	e004      	b.n	801630e <SCROLLBAR_DrawSkinFlex+0x66>
 8016304:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8016440 <SCROLLBAR_DrawSkinFlex+0x198>
 8016308:	f8df c138 	ldr.w	ip, [pc, #312]	; 8016444 <SCROLLBAR_DrawSkinFlex+0x19c>
 801630c:	4b47      	ldr	r3, [pc, #284]	; (801642c <SCROLLBAR_DrawSkinFlex+0x184>)
 801630e:	6862      	ldr	r2, [r4, #4]
 8016310:	3a08      	subs	r2, #8
 8016312:	2a11      	cmp	r2, #17
 8016314:	f200 8083 	bhi.w	801641e <SCROLLBAR_DrawSkinFlex+0x176>
 8016318:	e8df f002 	tbb	[pc, r2]
 801631c:	81815f13 	.word	0x81815f13
 8016320:	81818134 	.word	0x81818134
 8016324:	43813434 	.word	0x43813434
 8016328:	81818181 	.word	0x81818181
 801632c:	0981      	.short	0x0981
 801632e:	682b      	ldr	r3, [r5, #0]
 8016330:	b113      	cbz	r3, 8016338 <SCROLLBAR_DrawSkinFlex+0x90>
 8016332:	69a0      	ldr	r0, [r4, #24]
 8016334:	6923      	ldr	r3, [r4, #16]
 8016336:	e001      	b.n	801633c <SCROLLBAR_DrawSkinFlex+0x94>
 8016338:	69e0      	ldr	r0, [r4, #28]
 801633a:	6963      	ldr	r3, [r4, #20]
 801633c:	1ac0      	subs	r0, r0, r3
 801633e:	3001      	adds	r0, #1
 8016340:	e06e      	b.n	8016420 <SCROLLBAR_DrawSkinFlex+0x178>
 8016342:	686a      	ldr	r2, [r5, #4]
 8016344:	493a      	ldr	r1, [pc, #232]	; (8016430 <SCROLLBAR_DrawSkinFlex+0x188>)
 8016346:	4c3b      	ldr	r4, [pc, #236]	; (8016434 <SCROLLBAR_DrawSkinFlex+0x18c>)
 8016348:	2a02      	cmp	r2, #2
 801634a:	bf08      	it	eq
 801634c:	460c      	moveq	r4, r1
 801634e:	4630      	mov	r0, r6
 8016350:	4621      	mov	r1, r4
 8016352:	4798      	blx	r3
 8016354:	6829      	ldr	r1, [r5, #0]
 8016356:	aa04      	add	r2, sp, #16
 8016358:	ab05      	add	r3, sp, #20
 801635a:	4640      	mov	r0, r8
 801635c:	f7ff fe59 	bl	8016012 <_GetArrowPara>
 8016360:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016362:	f7f8 fbe9 	bl	800eb38 <GUI_SetColor>
 8016366:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801636a:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 801636e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8016372:	1ad2      	subs	r2, r2, r3
 8016374:	f04f 33ff 	mov.w	r3, #4294967295
 8016378:	9300      	str	r3, [sp, #0]
 801637a:	9b05      	ldr	r3, [sp, #20]
 801637c:	3201      	adds	r2, #1
 801637e:	4638      	mov	r0, r7
 8016380:	4419      	add	r1, r3
 8016382:	e048      	b.n	8016416 <SCROLLBAR_DrawSkinFlex+0x16e>
 8016384:	4c2b      	ldr	r4, [pc, #172]	; (8016434 <SCROLLBAR_DrawSkinFlex+0x18c>)
 8016386:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 801638a:	69e5      	ldr	r5, [r4, #28]
 801638c:	9500      	str	r5, [sp, #0]
 801638e:	6a24      	ldr	r4, [r4, #32]
 8016390:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8016394:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8016398:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801639c:	9401      	str	r4, [sp, #4]
 801639e:	47e0      	blx	ip
 80163a0:	e03d      	b.n	801641e <SCROLLBAR_DrawSkinFlex+0x176>
 80163a2:	686a      	ldr	r2, [r5, #4]
 80163a4:	4922      	ldr	r1, [pc, #136]	; (8016430 <SCROLLBAR_DrawSkinFlex+0x188>)
 80163a6:	4c23      	ldr	r4, [pc, #140]	; (8016434 <SCROLLBAR_DrawSkinFlex+0x18c>)
 80163a8:	2a03      	cmp	r2, #3
 80163aa:	bf08      	it	eq
 80163ac:	460c      	moveq	r4, r1
 80163ae:	4630      	mov	r0, r6
 80163b0:	4621      	mov	r1, r4
 80163b2:	4798      	blx	r3
 80163b4:	682b      	ldr	r3, [r5, #0]
 80163b6:	b123      	cbz	r3, 80163c2 <SCROLLBAR_DrawSkinFlex+0x11a>
 80163b8:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 80163bc:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80163c0:	e003      	b.n	80163ca <SCROLLBAR_DrawSkinFlex+0x122>
 80163c2:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80163c6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80163ca:	1ad3      	subs	r3, r2, r3
 80163cc:	3301      	adds	r3, #1
 80163ce:	2b0e      	cmp	r3, #14
 80163d0:	dd25      	ble.n	801641e <SCROLLBAR_DrawSkinFlex+0x176>
 80163d2:	4630      	mov	r0, r6
 80163d4:	4621      	mov	r1, r4
 80163d6:	47c8      	blx	r9
 80163d8:	e021      	b.n	801641e <SCROLLBAR_DrawSkinFlex+0x176>
 80163da:	686a      	ldr	r2, [r5, #4]
 80163dc:	4914      	ldr	r1, [pc, #80]	; (8016430 <SCROLLBAR_DrawSkinFlex+0x188>)
 80163de:	4c15      	ldr	r4, [pc, #84]	; (8016434 <SCROLLBAR_DrawSkinFlex+0x18c>)
 80163e0:	2a01      	cmp	r2, #1
 80163e2:	bf08      	it	eq
 80163e4:	460c      	moveq	r4, r1
 80163e6:	4630      	mov	r0, r6
 80163e8:	4621      	mov	r1, r4
 80163ea:	4798      	blx	r3
 80163ec:	6829      	ldr	r1, [r5, #0]
 80163ee:	aa04      	add	r2, sp, #16
 80163f0:	ab05      	add	r3, sp, #20
 80163f2:	4640      	mov	r0, r8
 80163f4:	f7ff fe0d 	bl	8016012 <_GetArrowPara>
 80163f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80163fa:	f7f8 fb9d 	bl	800eb38 <GUI_SetColor>
 80163fe:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016402:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8016406:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 801640a:	1ad2      	subs	r2, r2, r3
 801640c:	2301      	movs	r3, #1
 801640e:	9300      	str	r3, [sp, #0]
 8016410:	9b05      	ldr	r3, [sp, #20]
 8016412:	4638      	mov	r0, r7
 8016414:	1ac9      	subs	r1, r1, r3
 8016416:	1052      	asrs	r2, r2, #1
 8016418:	9b04      	ldr	r3, [sp, #16]
 801641a:	f7f0 fc0e 	bl	8006c3a <WIDGET__DrawTriangle>
 801641e:	2000      	movs	r0, #0
 8016420:	b00b      	add	sp, #44	; 0x2c
 8016422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016426:	bf00      	nop
 8016428:	0801624b 	.word	0x0801624b
 801642c:	080161ef 	.word	0x080161ef
 8016430:	200001c8 	.word	0x200001c8
 8016434:	200001f4 	.word	0x200001f4
 8016438:	0801609f 	.word	0x0801609f
 801643c:	08015bd9 	.word	0x08015bd9
 8016440:	08016043 	.word	0x08016043
 8016444:	08015b75 	.word	0x08015b75

08016448 <_Create>:
 8016448:	b530      	push	{r4, r5, lr}
 801644a:	b08d      	sub	sp, #52	; 0x34
 801644c:	4605      	mov	r5, r0
 801644e:	f7f9 fc87 	bl	800fd60 <GUI_ALLOC_LockH>
 8016452:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8016454:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8016456:	9000      	str	r0, [sp, #0]
 8016458:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801645c:	9301      	str	r3, [sp, #4]
 801645e:	4b07      	ldr	r3, [pc, #28]	; (801647c <_Create+0x34>)
 8016460:	6483      	str	r3, [r0, #72]	; 0x48
 8016462:	4668      	mov	r0, sp
 8016464:	f7f9 fc8a 	bl	800fd7c <GUI_ALLOC_UnlockH>
 8016468:	2300      	movs	r3, #0
 801646a:	9304      	str	r3, [sp, #16]
 801646c:	ab01      	add	r3, sp, #4
 801646e:	9503      	str	r5, [sp, #12]
 8016470:	930b      	str	r3, [sp, #44]	; 0x2c
 8016472:	a803      	add	r0, sp, #12
 8016474:	47a0      	blx	r4
 8016476:	b00d      	add	sp, #52	; 0x34
 8016478:	bd30      	pop	{r4, r5, pc}
 801647a:	bf00      	nop
 801647c:	08016481 	.word	0x08016481

08016480 <_CalcPositions>:
 8016480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016484:	b090      	sub	sp, #64	; 0x40
 8016486:	4605      	mov	r5, r0
 8016488:	460c      	mov	r4, r1
 801648a:	f7f9 fc69 	bl	800fd60 <GUI_ALLOC_LockH>
 801648e:	4603      	mov	r3, r0
 8016490:	9000      	str	r0, [sp, #0]
 8016492:	c803      	ldmia	r0, {r0, r1}
 8016494:	ae03      	add	r6, sp, #12
 8016496:	e886 0003 	stmia.w	r6, {r0, r1}
 801649a:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801649c:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80164a0:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80164a4:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80164a8:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80164ac:	920e      	str	r2, [sp, #56]	; 0x38
 80164ae:	f000 0008 	and.w	r0, r0, #8
 80164b2:	2800      	cmp	r0, #0
 80164b4:	bf0c      	ite	eq
 80164b6:	4608      	moveq	r0, r1
 80164b8:	4610      	movne	r0, r2
 80164ba:	61a0      	str	r0, [r4, #24]
 80164bc:	bf0c      	ite	eq
 80164be:	2000      	moveq	r0, #0
 80164c0:	2001      	movne	r0, #1
 80164c2:	aa01      	add	r2, sp, #4
 80164c4:	9001      	str	r0, [sp, #4]
 80164c6:	2019      	movs	r0, #25
 80164c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164ca:	9008      	str	r0, [sp, #32]
 80164cc:	9507      	str	r5, [sp, #28]
 80164ce:	920f      	str	r2, [sp, #60]	; 0x3c
 80164d0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80164d4:	970c      	str	r7, [sp, #48]	; 0x30
 80164d6:	910d      	str	r1, [sp, #52]	; 0x34
 80164d8:	a807      	add	r0, sp, #28
 80164da:	4798      	blx	r3
 80164dc:	9b00      	ldr	r3, [sp, #0]
 80164de:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80164e2:	2aff      	cmp	r2, #255	; 0xff
 80164e4:	4605      	mov	r5, r0
 80164e6:	d111      	bne.n	801650c <_CalcPositions+0x8c>
 80164e8:	6998      	ldr	r0, [r3, #24]
 80164ea:	f7f3 f942 	bl	8009772 <WM_GetScrollbarV>
 80164ee:	b168      	cbz	r0, 801650c <_CalcPositions+0x8c>
 80164f0:	a905      	add	r1, sp, #20
 80164f2:	f7fb fa55 	bl	80119a0 <WM_GetWindowRectEx>
 80164f6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80164fa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80164fe:	429a      	cmp	r2, r3
 8016500:	d104      	bne.n	801650c <_CalcPositions+0x8c>
 8016502:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8016506:	3b01      	subs	r3, #1
 8016508:	f8ad 3010 	strh.w	r3, [sp, #16]
 801650c:	9b00      	ldr	r3, [sp, #0]
 801650e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8016512:	2afe      	cmp	r2, #254	; 0xfe
 8016514:	d111      	bne.n	801653a <_CalcPositions+0xba>
 8016516:	6998      	ldr	r0, [r3, #24]
 8016518:	f7f3 f926 	bl	8009768 <WM_GetScrollbarH>
 801651c:	b168      	cbz	r0, 801653a <_CalcPositions+0xba>
 801651e:	a905      	add	r1, sp, #20
 8016520:	f7fb fa3e 	bl	80119a0 <WM_GetWindowRectEx>
 8016524:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8016528:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801652c:	429a      	cmp	r2, r3
 801652e:	d104      	bne.n	801653a <_CalcPositions+0xba>
 8016530:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016534:	3b01      	subs	r3, #1
 8016536:	f8ad 3012 	strh.w	r3, [sp, #18]
 801653a:	427a      	negs	r2, r7
 801653c:	4630      	mov	r0, r6
 801653e:	f1c8 0100 	rsb	r1, r8, #0
 8016542:	f7f8 fc5f 	bl	800ee04 <GUI_MoveRect>
 8016546:	9800      	ldr	r0, [sp, #0]
 8016548:	4631      	mov	r1, r6
 801654a:	f7f9 ffbb 	bl	80104c4 <SCROLLBAR__Rect2VRect>
 801654e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016552:	f9bd a010 	ldrsh.w	sl, [sp, #16]
 8016556:	9b00      	ldr	r3, [sp, #0]
 8016558:	ebc2 0a0a 	rsb	sl, r2, sl
 801655c:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 8016560:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8016562:	f10a 0601 	add.w	r6, sl, #1
 8016566:	eba6 0645 	sub.w	r6, r6, r5, lsl #1
 801656a:	4649      	mov	r1, r9
 801656c:	4370      	muls	r0, r6
 801656e:	f7fd fa43 	bl	80139f8 <GUI__DivideRound32>
 8016572:	4b17      	ldr	r3, [pc, #92]	; (80165d0 <_CalcPositions+0x150>)
 8016574:	f8c4 a014 	str.w	sl, [r4, #20]
 8016578:	f9b3 3000 	ldrsh.w	r3, [r3]
 801657c:	1c5a      	adds	r2, r3, #1
 801657e:	4282      	cmp	r2, r0
 8016580:	bfa8      	it	ge
 8016582:	1c98      	addge	r0, r3, #2
 8016584:	42b0      	cmp	r0, r6
 8016586:	bfb4      	ite	lt
 8016588:	4607      	movlt	r7, r0
 801658a:	4637      	movge	r7, r6
 801658c:	ebc7 0806 	rsb	r8, r7, r6
 8016590:	442e      	add	r6, r5
 8016592:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016596:	6126      	str	r6, [r4, #16]
 8016598:	ae10      	add	r6, sp, #64	; 0x40
 801659a:	6023      	str	r3, [r4, #0]
 801659c:	1e6b      	subs	r3, r5, #1
 801659e:	6063      	str	r3, [r4, #4]
 80165a0:	f856 3d40 	ldr.w	r3, [r6, #-64]!
 80165a4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80165a6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80165a8:	fb00 f008 	mul.w	r0, r0, r8
 80165ac:	ebc1 0109 	rsb	r1, r1, r9
 80165b0:	f7fd fa22 	bl	80139f8 <GUI__DivideRound32>
 80165b4:	4428      	add	r0, r5
 80165b6:	19c5      	adds	r5, r0, r7
 80165b8:	3d01      	subs	r5, #1
 80165ba:	60a0      	str	r0, [r4, #8]
 80165bc:	60e5      	str	r5, [r4, #12]
 80165be:	f8c4 801c 	str.w	r8, [r4, #28]
 80165c2:	6227      	str	r7, [r4, #32]
 80165c4:	4668      	mov	r0, sp
 80165c6:	f7f9 fbd9 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80165ca:	b010      	add	sp, #64	; 0x40
 80165cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165d0:	200000fe 	.word	0x200000fe

080165d4 <_Paint>:
 80165d4:	b570      	push	{r4, r5, r6, lr}
 80165d6:	b098      	sub	sp, #96	; 0x60
 80165d8:	4606      	mov	r6, r0
 80165da:	f7f9 fbc1 	bl	800fd60 <GUI_ALLOC_LockH>
 80165de:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80165e0:	9305      	str	r3, [sp, #20]
 80165e2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80165e4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80165e6:	9001      	str	r0, [sp, #4]
 80165e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80165ec:	a906      	add	r1, sp, #24
 80165ee:	4605      	mov	r5, r0
 80165f0:	4630      	mov	r0, r6
 80165f2:	9304      	str	r3, [sp, #16]
 80165f4:	f7ff ff44 	bl	8016480 <_CalcPositions>
 80165f8:	a801      	add	r0, sp, #4
 80165fa:	f7f9 fbbf 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80165fe:	a902      	add	r1, sp, #8
 8016600:	4628      	mov	r0, r5
 8016602:	f7f0 f9fc 	bl	80069fe <WIDGET__GetClientRect>
 8016606:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801660a:	9314      	str	r3, [sp, #80]	; 0x50
 801660c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016610:	9316      	str	r3, [sp, #88]	; 0x58
 8016612:	ab04      	add	r3, sp, #16
 8016614:	9317      	str	r3, [sp, #92]	; 0x5c
 8016616:	2308      	movs	r3, #8
 8016618:	9310      	str	r3, [sp, #64]	; 0x40
 801661a:	9b06      	ldr	r3, [sp, #24]
 801661c:	9313      	str	r3, [sp, #76]	; 0x4c
 801661e:	9b07      	ldr	r3, [sp, #28]
 8016620:	9315      	str	r3, [sp, #84]	; 0x54
 8016622:	960f      	str	r6, [sp, #60]	; 0x3c
 8016624:	a80f      	add	r0, sp, #60	; 0x3c
 8016626:	47a0      	blx	r4
 8016628:	2310      	movs	r3, #16
 801662a:	9310      	str	r3, [sp, #64]	; 0x40
 801662c:	9b07      	ldr	r3, [sp, #28]
 801662e:	3301      	adds	r3, #1
 8016630:	9313      	str	r3, [sp, #76]	; 0x4c
 8016632:	9b08      	ldr	r3, [sp, #32]
 8016634:	3b01      	subs	r3, #1
 8016636:	9315      	str	r3, [sp, #84]	; 0x54
 8016638:	a80f      	add	r0, sp, #60	; 0x3c
 801663a:	47a0      	blx	r4
 801663c:	2311      	movs	r3, #17
 801663e:	9310      	str	r3, [sp, #64]	; 0x40
 8016640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016642:	3301      	adds	r3, #1
 8016644:	9313      	str	r3, [sp, #76]	; 0x4c
 8016646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016648:	3b01      	subs	r3, #1
 801664a:	9315      	str	r3, [sp, #84]	; 0x54
 801664c:	a80f      	add	r0, sp, #60	; 0x3c
 801664e:	47a0      	blx	r4
 8016650:	2313      	movs	r3, #19
 8016652:	9310      	str	r3, [sp, #64]	; 0x40
 8016654:	9b08      	ldr	r3, [sp, #32]
 8016656:	9313      	str	r3, [sp, #76]	; 0x4c
 8016658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801665a:	9315      	str	r3, [sp, #84]	; 0x54
 801665c:	a80f      	add	r0, sp, #60	; 0x3c
 801665e:	47a0      	blx	r4
 8016660:	2309      	movs	r3, #9
 8016662:	9310      	str	r3, [sp, #64]	; 0x40
 8016664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016666:	9313      	str	r3, [sp, #76]	; 0x4c
 8016668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801666a:	9315      	str	r3, [sp, #84]	; 0x54
 801666c:	a80f      	add	r0, sp, #60	; 0x3c
 801666e:	47a0      	blx	r4
 8016670:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016674:	429a      	cmp	r2, r3
 8016676:	d006      	beq.n	8016686 <_Paint+0xb2>
 8016678:	210c      	movs	r1, #12
 801667a:	3201      	adds	r2, #1
 801667c:	9110      	str	r1, [sp, #64]	; 0x40
 801667e:	9213      	str	r2, [sp, #76]	; 0x4c
 8016680:	9315      	str	r3, [sp, #84]	; 0x54
 8016682:	a80f      	add	r0, sp, #60	; 0x3c
 8016684:	47a0      	blx	r4
 8016686:	b018      	add	sp, #96	; 0x60
 8016688:	bd70      	pop	{r4, r5, r6, pc}

0801668a <WM__SendMessageIfEnabled>:
 801668a:	b538      	push	{r3, r4, r5, lr}
 801668c:	4604      	mov	r4, r0
 801668e:	460d      	mov	r5, r1
 8016690:	f7fa fdd0 	bl	8011234 <WM__IsEnabled>
 8016694:	b128      	cbz	r0, 80166a2 <WM__SendMessageIfEnabled+0x18>
 8016696:	4620      	mov	r0, r4
 8016698:	4629      	mov	r1, r5
 801669a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801669e:	f7f2 bcd5 	b.w	800904c <WM__SendMessage>
 80166a2:	bd38      	pop	{r3, r4, r5, pc}

080166a4 <WM__IsChild>:
 80166a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80166a6:	460d      	mov	r5, r1
 80166a8:	4604      	mov	r4, r0
 80166aa:	b160      	cbz	r0, 80166c6 <WM__IsChild+0x22>
 80166ac:	f7f9 fb58 	bl	800fd60 <GUI_ALLOC_LockH>
 80166b0:	9001      	str	r0, [sp, #4]
 80166b2:	b120      	cbz	r0, 80166be <WM__IsChild+0x1a>
 80166b4:	6984      	ldr	r4, [r0, #24]
 80166b6:	1b63      	subs	r3, r4, r5
 80166b8:	425c      	negs	r4, r3
 80166ba:	415c      	adcs	r4, r3
 80166bc:	e000      	b.n	80166c0 <WM__IsChild+0x1c>
 80166be:	4604      	mov	r4, r0
 80166c0:	a801      	add	r0, sp, #4
 80166c2:	f7f9 fb5b 	bl	800fd7c <GUI_ALLOC_UnlockH>
 80166c6:	4620      	mov	r0, r4
 80166c8:	b003      	add	sp, #12
 80166ca:	bd30      	pop	{r4, r5, pc}

080166cc <WM__ForEachDesc>:
 80166cc:	b570      	push	{r4, r5, r6, lr}
 80166ce:	460d      	mov	r5, r1
 80166d0:	4616      	mov	r6, r2
 80166d2:	f7f9 fb3b 	bl	800fd4c <GUI_ALLOC_h2p>
 80166d6:	69c4      	ldr	r4, [r0, #28]
 80166d8:	b164      	cbz	r4, 80166f4 <WM__ForEachDesc+0x28>
 80166da:	4620      	mov	r0, r4
 80166dc:	4631      	mov	r1, r6
 80166de:	47a8      	blx	r5
 80166e0:	4620      	mov	r0, r4
 80166e2:	4629      	mov	r1, r5
 80166e4:	4632      	mov	r2, r6
 80166e6:	f7ff fff1 	bl	80166cc <WM__ForEachDesc>
 80166ea:	4620      	mov	r0, r4
 80166ec:	f7f9 fb2e 	bl	800fd4c <GUI_ALLOC_h2p>
 80166f0:	6a04      	ldr	r4, [r0, #32]
 80166f2:	e7f1      	b.n	80166d8 <WM__ForEachDesc+0xc>
 80166f4:	bd70      	pop	{r4, r5, r6, pc}

080166f6 <LCD_GetNumLayers>:
 80166f6:	b510      	push	{r4, lr}
 80166f8:	2000      	movs	r0, #0
 80166fa:	f7f8 fd1b 	bl	800f134 <GUI_DEVICE__GetpDriver>
 80166fe:	1c04      	adds	r4, r0, #0
 8016700:	f04f 0001 	mov.w	r0, #1
 8016704:	bf18      	it	ne
 8016706:	2401      	movne	r4, #1
 8016708:	f7f8 fd14 	bl	800f134 <GUI_DEVICE__GetpDriver>
 801670c:	b100      	cbz	r0, 8016710 <LCD_GetNumLayers+0x1a>
 801670e:	3401      	adds	r4, #1
 8016710:	4620      	mov	r0, r4
 8016712:	bd10      	pop	{r4, pc}

08016714 <LCD_GetBkColorIndex>:
 8016714:	4b02      	ldr	r3, [pc, #8]	; (8016720 <LCD_GetBkColorIndex+0xc>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801671a:	6818      	ldr	r0, [r3, #0]
 801671c:	4770      	bx	lr
 801671e:	bf00      	nop
 8016720:	200000d8 	.word	0x200000d8

08016724 <LCD_GetColorIndex>:
 8016724:	4b02      	ldr	r3, [pc, #8]	; (8016730 <LCD_GetColorIndex+0xc>)
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801672a:	6818      	ldr	r0, [r3, #0]
 801672c:	4770      	bx	lr
 801672e:	bf00      	nop
 8016730:	200000d8 	.word	0x200000d8

08016734 <GUI__sqrt32>:
 8016734:	b510      	push	{r4, lr}
 8016736:	2110      	movs	r1, #16
 8016738:	2300      	movs	r3, #0
 801673a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801673e:	189c      	adds	r4, r3, r2
 8016740:	4284      	cmp	r4, r0
 8016742:	bf9c      	itt	ls
 8016744:	18a3      	addls	r3, r4, r2
 8016746:	ebc4 0000 	rsbls	r0, r4, r0
 801674a:	3901      	subs	r1, #1
 801674c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8016750:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016754:	d1f3      	bne.n	801673e <GUI__sqrt32+0xa>
 8016756:	4618      	mov	r0, r3
 8016758:	bd10      	pop	{r4, pc}

0801675a <GUI__HandleEOLine>:
 801675a:	6803      	ldr	r3, [r0, #0]
 801675c:	781a      	ldrb	r2, [r3, #0]
 801675e:	b122      	cbz	r2, 801676a <GUI__HandleEOLine+0x10>
 8016760:	2a0a      	cmp	r2, #10
 8016762:	d104      	bne.n	801676e <GUI__HandleEOLine+0x14>
 8016764:	3301      	adds	r3, #1
 8016766:	6003      	str	r3, [r0, #0]
 8016768:	e001      	b.n	801676e <GUI__HandleEOLine+0x14>
 801676a:	2001      	movs	r0, #1
 801676c:	4770      	bx	lr
 801676e:	2000      	movs	r0, #0
 8016770:	4770      	bx	lr
	...

08016774 <GUI_DrawPixel>:
 8016774:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016776:	4e0f      	ldr	r6, [pc, #60]	; (80167b4 <GUI_DrawPixel+0x40>)
 8016778:	6833      	ldr	r3, [r6, #0]
 801677a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801677c:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 801677e:	4405      	add	r5, r0
 8016780:	b2ab      	uxth	r3, r5
 8016782:	440c      	add	r4, r1
 8016784:	f8ad 3004 	strh.w	r3, [sp, #4]
 8016788:	f8ad 3000 	strh.w	r3, [sp]
 801678c:	4668      	mov	r0, sp
 801678e:	b2a3      	uxth	r3, r4
 8016790:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016794:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016798:	f7f4 f830 	bl	800a7fc <WM__InitIVRSearch>
 801679c:	b140      	cbz	r0, 80167b0 <GUI_DrawPixel+0x3c>
 801679e:	6833      	ldr	r3, [r6, #0]
 80167a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80167a2:	4628      	mov	r0, r5
 80167a4:	685b      	ldr	r3, [r3, #4]
 80167a6:	4621      	mov	r1, r4
 80167a8:	4798      	blx	r3
 80167aa:	f7f3 ff65 	bl	800a678 <WM__GetNextIVR>
 80167ae:	e7f5      	b.n	801679c <GUI_DrawPixel+0x28>
 80167b0:	b002      	add	sp, #8
 80167b2:	bd70      	pop	{r4, r5, r6, pc}
 80167b4:	200000d8 	.word	0x200000d8

080167b8 <GUI_CalcColorDist>:
 80167b8:	b2cb      	uxtb	r3, r1
 80167ba:	b2c2      	uxtb	r2, r0
 80167bc:	1ad2      	subs	r2, r2, r3
 80167be:	b292      	uxth	r2, r2
 80167c0:	b293      	uxth	r3, r2
 80167c2:	b530      	push	{r4, r5, lr}
 80167c4:	041c      	lsls	r4, r3, #16
 80167c6:	bf48      	it	mi
 80167c8:	4253      	negmi	r3, r2
 80167ca:	f3c1 2507 	ubfx	r5, r1, #8, #8
 80167ce:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80167d2:	ebc5 0202 	rsb	r2, r5, r2
 80167d6:	bf48      	it	mi
 80167d8:	b29b      	uxthmi	r3, r3
 80167da:	b292      	uxth	r2, r2
 80167dc:	0c09      	lsrs	r1, r1, #16
 80167de:	fb13 f403 	smulbb	r4, r3, r3
 80167e2:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 80167e6:	b293      	uxth	r3, r2
 80167e8:	041d      	lsls	r5, r3, #16
 80167ea:	b289      	uxth	r1, r1
 80167ec:	b288      	uxth	r0, r1
 80167ee:	bf44      	itt	mi
 80167f0:	4253      	negmi	r3, r2
 80167f2:	b29b      	uxthmi	r3, r3
 80167f4:	0402      	lsls	r2, r0, #16
 80167f6:	bf48      	it	mi
 80167f8:	4248      	negmi	r0, r1
 80167fa:	fb13 4303 	smlabb	r3, r3, r3, r4
 80167fe:	bf48      	it	mi
 8016800:	b280      	uxthmi	r0, r0
 8016802:	fb00 3000 	mla	r0, r0, r0, r3
 8016806:	bd30      	pop	{r4, r5, pc}

08016808 <__errno>:
 8016808:	4b01      	ldr	r3, [pc, #4]	; (8016810 <__errno+0x8>)
 801680a:	6818      	ldr	r0, [r3, #0]
 801680c:	4770      	bx	lr
 801680e:	bf00      	nop
 8016810:	2000022c 	.word	0x2000022c

08016814 <__libc_init_array>:
 8016814:	b570      	push	{r4, r5, r6, lr}
 8016816:	4d0d      	ldr	r5, [pc, #52]	; (801684c <__libc_init_array+0x38>)
 8016818:	4c0d      	ldr	r4, [pc, #52]	; (8016850 <__libc_init_array+0x3c>)
 801681a:	1b64      	subs	r4, r4, r5
 801681c:	10a4      	asrs	r4, r4, #2
 801681e:	2600      	movs	r6, #0
 8016820:	42a6      	cmp	r6, r4
 8016822:	d109      	bne.n	8016838 <__libc_init_array+0x24>
 8016824:	4d0b      	ldr	r5, [pc, #44]	; (8016854 <__libc_init_array+0x40>)
 8016826:	4c0c      	ldr	r4, [pc, #48]	; (8016858 <__libc_init_array+0x44>)
 8016828:	f000 fc64 	bl	80170f4 <_init>
 801682c:	1b64      	subs	r4, r4, r5
 801682e:	10a4      	asrs	r4, r4, #2
 8016830:	2600      	movs	r6, #0
 8016832:	42a6      	cmp	r6, r4
 8016834:	d105      	bne.n	8016842 <__libc_init_array+0x2e>
 8016836:	bd70      	pop	{r4, r5, r6, pc}
 8016838:	f855 3b04 	ldr.w	r3, [r5], #4
 801683c:	4798      	blx	r3
 801683e:	3601      	adds	r6, #1
 8016840:	e7ee      	b.n	8016820 <__libc_init_array+0xc>
 8016842:	f855 3b04 	ldr.w	r3, [r5], #4
 8016846:	4798      	blx	r3
 8016848:	3601      	adds	r6, #1
 801684a:	e7f2      	b.n	8016832 <__libc_init_array+0x1e>
 801684c:	0801d7ac 	.word	0x0801d7ac
 8016850:	0801d7ac 	.word	0x0801d7ac
 8016854:	0801d7ac 	.word	0x0801d7ac
 8016858:	0801d7b0 	.word	0x0801d7b0

0801685c <memcmp>:
 801685c:	b530      	push	{r4, r5, lr}
 801685e:	3901      	subs	r1, #1
 8016860:	2400      	movs	r4, #0
 8016862:	42a2      	cmp	r2, r4
 8016864:	d101      	bne.n	801686a <memcmp+0xe>
 8016866:	2000      	movs	r0, #0
 8016868:	e005      	b.n	8016876 <memcmp+0x1a>
 801686a:	5d03      	ldrb	r3, [r0, r4]
 801686c:	3401      	adds	r4, #1
 801686e:	5d0d      	ldrb	r5, [r1, r4]
 8016870:	42ab      	cmp	r3, r5
 8016872:	d0f6      	beq.n	8016862 <memcmp+0x6>
 8016874:	1b58      	subs	r0, r3, r5
 8016876:	bd30      	pop	{r4, r5, pc}

08016878 <memcpy>:
 8016878:	440a      	add	r2, r1
 801687a:	4291      	cmp	r1, r2
 801687c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016880:	d100      	bne.n	8016884 <memcpy+0xc>
 8016882:	4770      	bx	lr
 8016884:	b510      	push	{r4, lr}
 8016886:	f811 4b01 	ldrb.w	r4, [r1], #1
 801688a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801688e:	4291      	cmp	r1, r2
 8016890:	d1f9      	bne.n	8016886 <memcpy+0xe>
 8016892:	bd10      	pop	{r4, pc}

08016894 <memmove>:
 8016894:	4288      	cmp	r0, r1
 8016896:	b510      	push	{r4, lr}
 8016898:	eb01 0402 	add.w	r4, r1, r2
 801689c:	d902      	bls.n	80168a4 <memmove+0x10>
 801689e:	4284      	cmp	r4, r0
 80168a0:	4623      	mov	r3, r4
 80168a2:	d807      	bhi.n	80168b4 <memmove+0x20>
 80168a4:	1e43      	subs	r3, r0, #1
 80168a6:	42a1      	cmp	r1, r4
 80168a8:	d008      	beq.n	80168bc <memmove+0x28>
 80168aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80168ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80168b2:	e7f8      	b.n	80168a6 <memmove+0x12>
 80168b4:	4402      	add	r2, r0
 80168b6:	4601      	mov	r1, r0
 80168b8:	428a      	cmp	r2, r1
 80168ba:	d100      	bne.n	80168be <memmove+0x2a>
 80168bc:	bd10      	pop	{r4, pc}
 80168be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80168c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80168c6:	e7f7      	b.n	80168b8 <memmove+0x24>

080168c8 <memset>:
 80168c8:	4402      	add	r2, r0
 80168ca:	4603      	mov	r3, r0
 80168cc:	4293      	cmp	r3, r2
 80168ce:	d100      	bne.n	80168d2 <memset+0xa>
 80168d0:	4770      	bx	lr
 80168d2:	f803 1b01 	strb.w	r1, [r3], #1
 80168d6:	e7f9      	b.n	80168cc <memset+0x4>

080168d8 <siprintf>:
 80168d8:	b40e      	push	{r1, r2, r3}
 80168da:	b500      	push	{lr}
 80168dc:	b09c      	sub	sp, #112	; 0x70
 80168de:	ab1d      	add	r3, sp, #116	; 0x74
 80168e0:	9002      	str	r0, [sp, #8]
 80168e2:	9006      	str	r0, [sp, #24]
 80168e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80168e8:	4809      	ldr	r0, [pc, #36]	; (8016910 <siprintf+0x38>)
 80168ea:	9107      	str	r1, [sp, #28]
 80168ec:	9104      	str	r1, [sp, #16]
 80168ee:	4909      	ldr	r1, [pc, #36]	; (8016914 <siprintf+0x3c>)
 80168f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80168f4:	9105      	str	r1, [sp, #20]
 80168f6:	6800      	ldr	r0, [r0, #0]
 80168f8:	9301      	str	r3, [sp, #4]
 80168fa:	a902      	add	r1, sp, #8
 80168fc:	f000 f870 	bl	80169e0 <_svfiprintf_r>
 8016900:	9b02      	ldr	r3, [sp, #8]
 8016902:	2200      	movs	r2, #0
 8016904:	701a      	strb	r2, [r3, #0]
 8016906:	b01c      	add	sp, #112	; 0x70
 8016908:	f85d eb04 	ldr.w	lr, [sp], #4
 801690c:	b003      	add	sp, #12
 801690e:	4770      	bx	lr
 8016910:	2000022c 	.word	0x2000022c
 8016914:	ffff0208 	.word	0xffff0208

08016918 <strcpy>:
 8016918:	4603      	mov	r3, r0
 801691a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801691e:	f803 2b01 	strb.w	r2, [r3], #1
 8016922:	2a00      	cmp	r2, #0
 8016924:	d1f9      	bne.n	801691a <strcpy+0x2>
 8016926:	4770      	bx	lr

08016928 <__ssputs_r>:
 8016928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801692c:	688e      	ldr	r6, [r1, #8]
 801692e:	429e      	cmp	r6, r3
 8016930:	4682      	mov	sl, r0
 8016932:	460c      	mov	r4, r1
 8016934:	4690      	mov	r8, r2
 8016936:	461f      	mov	r7, r3
 8016938:	d838      	bhi.n	80169ac <__ssputs_r+0x84>
 801693a:	898a      	ldrh	r2, [r1, #12]
 801693c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016940:	d032      	beq.n	80169a8 <__ssputs_r+0x80>
 8016942:	6825      	ldr	r5, [r4, #0]
 8016944:	6909      	ldr	r1, [r1, #16]
 8016946:	eba5 0901 	sub.w	r9, r5, r1
 801694a:	6965      	ldr	r5, [r4, #20]
 801694c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016950:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016954:	3301      	adds	r3, #1
 8016956:	444b      	add	r3, r9
 8016958:	106d      	asrs	r5, r5, #1
 801695a:	429d      	cmp	r5, r3
 801695c:	bf38      	it	cc
 801695e:	461d      	movcc	r5, r3
 8016960:	0553      	lsls	r3, r2, #21
 8016962:	d531      	bpl.n	80169c8 <__ssputs_r+0xa0>
 8016964:	4629      	mov	r1, r5
 8016966:	f000 fb1f 	bl	8016fa8 <_malloc_r>
 801696a:	4606      	mov	r6, r0
 801696c:	b950      	cbnz	r0, 8016984 <__ssputs_r+0x5c>
 801696e:	230c      	movs	r3, #12
 8016970:	f8ca 3000 	str.w	r3, [sl]
 8016974:	89a3      	ldrh	r3, [r4, #12]
 8016976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801697a:	81a3      	strh	r3, [r4, #12]
 801697c:	f04f 30ff 	mov.w	r0, #4294967295
 8016980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016984:	6921      	ldr	r1, [r4, #16]
 8016986:	464a      	mov	r2, r9
 8016988:	f7ff ff76 	bl	8016878 <memcpy>
 801698c:	89a3      	ldrh	r3, [r4, #12]
 801698e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016996:	81a3      	strh	r3, [r4, #12]
 8016998:	6126      	str	r6, [r4, #16]
 801699a:	6165      	str	r5, [r4, #20]
 801699c:	444e      	add	r6, r9
 801699e:	eba5 0509 	sub.w	r5, r5, r9
 80169a2:	6026      	str	r6, [r4, #0]
 80169a4:	60a5      	str	r5, [r4, #8]
 80169a6:	463e      	mov	r6, r7
 80169a8:	42be      	cmp	r6, r7
 80169aa:	d900      	bls.n	80169ae <__ssputs_r+0x86>
 80169ac:	463e      	mov	r6, r7
 80169ae:	4632      	mov	r2, r6
 80169b0:	6820      	ldr	r0, [r4, #0]
 80169b2:	4641      	mov	r1, r8
 80169b4:	f7ff ff6e 	bl	8016894 <memmove>
 80169b8:	68a3      	ldr	r3, [r4, #8]
 80169ba:	6822      	ldr	r2, [r4, #0]
 80169bc:	1b9b      	subs	r3, r3, r6
 80169be:	4432      	add	r2, r6
 80169c0:	60a3      	str	r3, [r4, #8]
 80169c2:	6022      	str	r2, [r4, #0]
 80169c4:	2000      	movs	r0, #0
 80169c6:	e7db      	b.n	8016980 <__ssputs_r+0x58>
 80169c8:	462a      	mov	r2, r5
 80169ca:	f000 fb47 	bl	801705c <_realloc_r>
 80169ce:	4606      	mov	r6, r0
 80169d0:	2800      	cmp	r0, #0
 80169d2:	d1e1      	bne.n	8016998 <__ssputs_r+0x70>
 80169d4:	6921      	ldr	r1, [r4, #16]
 80169d6:	4650      	mov	r0, sl
 80169d8:	f000 fa96 	bl	8016f08 <_free_r>
 80169dc:	e7c7      	b.n	801696e <__ssputs_r+0x46>
	...

080169e0 <_svfiprintf_r>:
 80169e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169e4:	4698      	mov	r8, r3
 80169e6:	898b      	ldrh	r3, [r1, #12]
 80169e8:	061b      	lsls	r3, r3, #24
 80169ea:	b09d      	sub	sp, #116	; 0x74
 80169ec:	4607      	mov	r7, r0
 80169ee:	460d      	mov	r5, r1
 80169f0:	4614      	mov	r4, r2
 80169f2:	d50e      	bpl.n	8016a12 <_svfiprintf_r+0x32>
 80169f4:	690b      	ldr	r3, [r1, #16]
 80169f6:	b963      	cbnz	r3, 8016a12 <_svfiprintf_r+0x32>
 80169f8:	2140      	movs	r1, #64	; 0x40
 80169fa:	f000 fad5 	bl	8016fa8 <_malloc_r>
 80169fe:	6028      	str	r0, [r5, #0]
 8016a00:	6128      	str	r0, [r5, #16]
 8016a02:	b920      	cbnz	r0, 8016a0e <_svfiprintf_r+0x2e>
 8016a04:	230c      	movs	r3, #12
 8016a06:	603b      	str	r3, [r7, #0]
 8016a08:	f04f 30ff 	mov.w	r0, #4294967295
 8016a0c:	e0d1      	b.n	8016bb2 <_svfiprintf_r+0x1d2>
 8016a0e:	2340      	movs	r3, #64	; 0x40
 8016a10:	616b      	str	r3, [r5, #20]
 8016a12:	2300      	movs	r3, #0
 8016a14:	9309      	str	r3, [sp, #36]	; 0x24
 8016a16:	2320      	movs	r3, #32
 8016a18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a20:	2330      	movs	r3, #48	; 0x30
 8016a22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016bcc <_svfiprintf_r+0x1ec>
 8016a26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a2a:	f04f 0901 	mov.w	r9, #1
 8016a2e:	4623      	mov	r3, r4
 8016a30:	469a      	mov	sl, r3
 8016a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a36:	b10a      	cbz	r2, 8016a3c <_svfiprintf_r+0x5c>
 8016a38:	2a25      	cmp	r2, #37	; 0x25
 8016a3a:	d1f9      	bne.n	8016a30 <_svfiprintf_r+0x50>
 8016a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8016a40:	d00b      	beq.n	8016a5a <_svfiprintf_r+0x7a>
 8016a42:	465b      	mov	r3, fp
 8016a44:	4622      	mov	r2, r4
 8016a46:	4629      	mov	r1, r5
 8016a48:	4638      	mov	r0, r7
 8016a4a:	f7ff ff6d 	bl	8016928 <__ssputs_r>
 8016a4e:	3001      	adds	r0, #1
 8016a50:	f000 80aa 	beq.w	8016ba8 <_svfiprintf_r+0x1c8>
 8016a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a56:	445a      	add	r2, fp
 8016a58:	9209      	str	r2, [sp, #36]	; 0x24
 8016a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	f000 80a2 	beq.w	8016ba8 <_svfiprintf_r+0x1c8>
 8016a64:	2300      	movs	r3, #0
 8016a66:	f04f 32ff 	mov.w	r2, #4294967295
 8016a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a6e:	f10a 0a01 	add.w	sl, sl, #1
 8016a72:	9304      	str	r3, [sp, #16]
 8016a74:	9307      	str	r3, [sp, #28]
 8016a76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a7a:	931a      	str	r3, [sp, #104]	; 0x68
 8016a7c:	4654      	mov	r4, sl
 8016a7e:	2205      	movs	r2, #5
 8016a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a84:	4851      	ldr	r0, [pc, #324]	; (8016bcc <_svfiprintf_r+0x1ec>)
 8016a86:	f7e9 fbcb 	bl	8000220 <memchr>
 8016a8a:	9a04      	ldr	r2, [sp, #16]
 8016a8c:	b9d8      	cbnz	r0, 8016ac6 <_svfiprintf_r+0xe6>
 8016a8e:	06d0      	lsls	r0, r2, #27
 8016a90:	bf44      	itt	mi
 8016a92:	2320      	movmi	r3, #32
 8016a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a98:	0711      	lsls	r1, r2, #28
 8016a9a:	bf44      	itt	mi
 8016a9c:	232b      	movmi	r3, #43	; 0x2b
 8016a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8016aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8016aa8:	d015      	beq.n	8016ad6 <_svfiprintf_r+0xf6>
 8016aaa:	9a07      	ldr	r2, [sp, #28]
 8016aac:	4654      	mov	r4, sl
 8016aae:	2000      	movs	r0, #0
 8016ab0:	f04f 0c0a 	mov.w	ip, #10
 8016ab4:	4621      	mov	r1, r4
 8016ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016aba:	3b30      	subs	r3, #48	; 0x30
 8016abc:	2b09      	cmp	r3, #9
 8016abe:	d94e      	bls.n	8016b5e <_svfiprintf_r+0x17e>
 8016ac0:	b1b0      	cbz	r0, 8016af0 <_svfiprintf_r+0x110>
 8016ac2:	9207      	str	r2, [sp, #28]
 8016ac4:	e014      	b.n	8016af0 <_svfiprintf_r+0x110>
 8016ac6:	eba0 0308 	sub.w	r3, r0, r8
 8016aca:	fa09 f303 	lsl.w	r3, r9, r3
 8016ace:	4313      	orrs	r3, r2
 8016ad0:	9304      	str	r3, [sp, #16]
 8016ad2:	46a2      	mov	sl, r4
 8016ad4:	e7d2      	b.n	8016a7c <_svfiprintf_r+0x9c>
 8016ad6:	9b03      	ldr	r3, [sp, #12]
 8016ad8:	1d19      	adds	r1, r3, #4
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	9103      	str	r1, [sp, #12]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	bfbb      	ittet	lt
 8016ae2:	425b      	neglt	r3, r3
 8016ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8016ae8:	9307      	strge	r3, [sp, #28]
 8016aea:	9307      	strlt	r3, [sp, #28]
 8016aec:	bfb8      	it	lt
 8016aee:	9204      	strlt	r2, [sp, #16]
 8016af0:	7823      	ldrb	r3, [r4, #0]
 8016af2:	2b2e      	cmp	r3, #46	; 0x2e
 8016af4:	d10c      	bne.n	8016b10 <_svfiprintf_r+0x130>
 8016af6:	7863      	ldrb	r3, [r4, #1]
 8016af8:	2b2a      	cmp	r3, #42	; 0x2a
 8016afa:	d135      	bne.n	8016b68 <_svfiprintf_r+0x188>
 8016afc:	9b03      	ldr	r3, [sp, #12]
 8016afe:	1d1a      	adds	r2, r3, #4
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	9203      	str	r2, [sp, #12]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	bfb8      	it	lt
 8016b08:	f04f 33ff 	movlt.w	r3, #4294967295
 8016b0c:	3402      	adds	r4, #2
 8016b0e:	9305      	str	r3, [sp, #20]
 8016b10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016bdc <_svfiprintf_r+0x1fc>
 8016b14:	7821      	ldrb	r1, [r4, #0]
 8016b16:	2203      	movs	r2, #3
 8016b18:	4650      	mov	r0, sl
 8016b1a:	f7e9 fb81 	bl	8000220 <memchr>
 8016b1e:	b140      	cbz	r0, 8016b32 <_svfiprintf_r+0x152>
 8016b20:	2340      	movs	r3, #64	; 0x40
 8016b22:	eba0 000a 	sub.w	r0, r0, sl
 8016b26:	fa03 f000 	lsl.w	r0, r3, r0
 8016b2a:	9b04      	ldr	r3, [sp, #16]
 8016b2c:	4303      	orrs	r3, r0
 8016b2e:	3401      	adds	r4, #1
 8016b30:	9304      	str	r3, [sp, #16]
 8016b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b36:	4826      	ldr	r0, [pc, #152]	; (8016bd0 <_svfiprintf_r+0x1f0>)
 8016b38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b3c:	2206      	movs	r2, #6
 8016b3e:	f7e9 fb6f 	bl	8000220 <memchr>
 8016b42:	2800      	cmp	r0, #0
 8016b44:	d038      	beq.n	8016bb8 <_svfiprintf_r+0x1d8>
 8016b46:	4b23      	ldr	r3, [pc, #140]	; (8016bd4 <_svfiprintf_r+0x1f4>)
 8016b48:	bb1b      	cbnz	r3, 8016b92 <_svfiprintf_r+0x1b2>
 8016b4a:	9b03      	ldr	r3, [sp, #12]
 8016b4c:	3307      	adds	r3, #7
 8016b4e:	f023 0307 	bic.w	r3, r3, #7
 8016b52:	3308      	adds	r3, #8
 8016b54:	9303      	str	r3, [sp, #12]
 8016b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b58:	4433      	add	r3, r6
 8016b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8016b5c:	e767      	b.n	8016a2e <_svfiprintf_r+0x4e>
 8016b5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b62:	460c      	mov	r4, r1
 8016b64:	2001      	movs	r0, #1
 8016b66:	e7a5      	b.n	8016ab4 <_svfiprintf_r+0xd4>
 8016b68:	2300      	movs	r3, #0
 8016b6a:	3401      	adds	r4, #1
 8016b6c:	9305      	str	r3, [sp, #20]
 8016b6e:	4619      	mov	r1, r3
 8016b70:	f04f 0c0a 	mov.w	ip, #10
 8016b74:	4620      	mov	r0, r4
 8016b76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b7a:	3a30      	subs	r2, #48	; 0x30
 8016b7c:	2a09      	cmp	r2, #9
 8016b7e:	d903      	bls.n	8016b88 <_svfiprintf_r+0x1a8>
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d0c5      	beq.n	8016b10 <_svfiprintf_r+0x130>
 8016b84:	9105      	str	r1, [sp, #20]
 8016b86:	e7c3      	b.n	8016b10 <_svfiprintf_r+0x130>
 8016b88:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b8c:	4604      	mov	r4, r0
 8016b8e:	2301      	movs	r3, #1
 8016b90:	e7f0      	b.n	8016b74 <_svfiprintf_r+0x194>
 8016b92:	ab03      	add	r3, sp, #12
 8016b94:	9300      	str	r3, [sp, #0]
 8016b96:	462a      	mov	r2, r5
 8016b98:	4b0f      	ldr	r3, [pc, #60]	; (8016bd8 <_svfiprintf_r+0x1f8>)
 8016b9a:	a904      	add	r1, sp, #16
 8016b9c:	4638      	mov	r0, r7
 8016b9e:	f3af 8000 	nop.w
 8016ba2:	1c42      	adds	r2, r0, #1
 8016ba4:	4606      	mov	r6, r0
 8016ba6:	d1d6      	bne.n	8016b56 <_svfiprintf_r+0x176>
 8016ba8:	89ab      	ldrh	r3, [r5, #12]
 8016baa:	065b      	lsls	r3, r3, #25
 8016bac:	f53f af2c 	bmi.w	8016a08 <_svfiprintf_r+0x28>
 8016bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016bb2:	b01d      	add	sp, #116	; 0x74
 8016bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bb8:	ab03      	add	r3, sp, #12
 8016bba:	9300      	str	r3, [sp, #0]
 8016bbc:	462a      	mov	r2, r5
 8016bbe:	4b06      	ldr	r3, [pc, #24]	; (8016bd8 <_svfiprintf_r+0x1f8>)
 8016bc0:	a904      	add	r1, sp, #16
 8016bc2:	4638      	mov	r0, r7
 8016bc4:	f000 f87a 	bl	8016cbc <_printf_i>
 8016bc8:	e7eb      	b.n	8016ba2 <_svfiprintf_r+0x1c2>
 8016bca:	bf00      	nop
 8016bcc:	0801d770 	.word	0x0801d770
 8016bd0:	0801d77a 	.word	0x0801d77a
 8016bd4:	00000000 	.word	0x00000000
 8016bd8:	08016929 	.word	0x08016929
 8016bdc:	0801d776 	.word	0x0801d776

08016be0 <_printf_common>:
 8016be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016be4:	4616      	mov	r6, r2
 8016be6:	4699      	mov	r9, r3
 8016be8:	688a      	ldr	r2, [r1, #8]
 8016bea:	690b      	ldr	r3, [r1, #16]
 8016bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016bf0:	4293      	cmp	r3, r2
 8016bf2:	bfb8      	it	lt
 8016bf4:	4613      	movlt	r3, r2
 8016bf6:	6033      	str	r3, [r6, #0]
 8016bf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016bfc:	4607      	mov	r7, r0
 8016bfe:	460c      	mov	r4, r1
 8016c00:	b10a      	cbz	r2, 8016c06 <_printf_common+0x26>
 8016c02:	3301      	adds	r3, #1
 8016c04:	6033      	str	r3, [r6, #0]
 8016c06:	6823      	ldr	r3, [r4, #0]
 8016c08:	0699      	lsls	r1, r3, #26
 8016c0a:	bf42      	ittt	mi
 8016c0c:	6833      	ldrmi	r3, [r6, #0]
 8016c0e:	3302      	addmi	r3, #2
 8016c10:	6033      	strmi	r3, [r6, #0]
 8016c12:	6825      	ldr	r5, [r4, #0]
 8016c14:	f015 0506 	ands.w	r5, r5, #6
 8016c18:	d106      	bne.n	8016c28 <_printf_common+0x48>
 8016c1a:	f104 0a19 	add.w	sl, r4, #25
 8016c1e:	68e3      	ldr	r3, [r4, #12]
 8016c20:	6832      	ldr	r2, [r6, #0]
 8016c22:	1a9b      	subs	r3, r3, r2
 8016c24:	42ab      	cmp	r3, r5
 8016c26:	dc26      	bgt.n	8016c76 <_printf_common+0x96>
 8016c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016c2c:	1e13      	subs	r3, r2, #0
 8016c2e:	6822      	ldr	r2, [r4, #0]
 8016c30:	bf18      	it	ne
 8016c32:	2301      	movne	r3, #1
 8016c34:	0692      	lsls	r2, r2, #26
 8016c36:	d42b      	bmi.n	8016c90 <_printf_common+0xb0>
 8016c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c3c:	4649      	mov	r1, r9
 8016c3e:	4638      	mov	r0, r7
 8016c40:	47c0      	blx	r8
 8016c42:	3001      	adds	r0, #1
 8016c44:	d01e      	beq.n	8016c84 <_printf_common+0xa4>
 8016c46:	6823      	ldr	r3, [r4, #0]
 8016c48:	68e5      	ldr	r5, [r4, #12]
 8016c4a:	6832      	ldr	r2, [r6, #0]
 8016c4c:	f003 0306 	and.w	r3, r3, #6
 8016c50:	2b04      	cmp	r3, #4
 8016c52:	bf08      	it	eq
 8016c54:	1aad      	subeq	r5, r5, r2
 8016c56:	68a3      	ldr	r3, [r4, #8]
 8016c58:	6922      	ldr	r2, [r4, #16]
 8016c5a:	bf0c      	ite	eq
 8016c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016c60:	2500      	movne	r5, #0
 8016c62:	4293      	cmp	r3, r2
 8016c64:	bfc4      	itt	gt
 8016c66:	1a9b      	subgt	r3, r3, r2
 8016c68:	18ed      	addgt	r5, r5, r3
 8016c6a:	2600      	movs	r6, #0
 8016c6c:	341a      	adds	r4, #26
 8016c6e:	42b5      	cmp	r5, r6
 8016c70:	d11a      	bne.n	8016ca8 <_printf_common+0xc8>
 8016c72:	2000      	movs	r0, #0
 8016c74:	e008      	b.n	8016c88 <_printf_common+0xa8>
 8016c76:	2301      	movs	r3, #1
 8016c78:	4652      	mov	r2, sl
 8016c7a:	4649      	mov	r1, r9
 8016c7c:	4638      	mov	r0, r7
 8016c7e:	47c0      	blx	r8
 8016c80:	3001      	adds	r0, #1
 8016c82:	d103      	bne.n	8016c8c <_printf_common+0xac>
 8016c84:	f04f 30ff 	mov.w	r0, #4294967295
 8016c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c8c:	3501      	adds	r5, #1
 8016c8e:	e7c6      	b.n	8016c1e <_printf_common+0x3e>
 8016c90:	18e1      	adds	r1, r4, r3
 8016c92:	1c5a      	adds	r2, r3, #1
 8016c94:	2030      	movs	r0, #48	; 0x30
 8016c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016c9a:	4422      	add	r2, r4
 8016c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016ca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016ca4:	3302      	adds	r3, #2
 8016ca6:	e7c7      	b.n	8016c38 <_printf_common+0x58>
 8016ca8:	2301      	movs	r3, #1
 8016caa:	4622      	mov	r2, r4
 8016cac:	4649      	mov	r1, r9
 8016cae:	4638      	mov	r0, r7
 8016cb0:	47c0      	blx	r8
 8016cb2:	3001      	adds	r0, #1
 8016cb4:	d0e6      	beq.n	8016c84 <_printf_common+0xa4>
 8016cb6:	3601      	adds	r6, #1
 8016cb8:	e7d9      	b.n	8016c6e <_printf_common+0x8e>
	...

08016cbc <_printf_i>:
 8016cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016cc0:	460c      	mov	r4, r1
 8016cc2:	4691      	mov	r9, r2
 8016cc4:	7e27      	ldrb	r7, [r4, #24]
 8016cc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016cc8:	2f78      	cmp	r7, #120	; 0x78
 8016cca:	4680      	mov	r8, r0
 8016ccc:	469a      	mov	sl, r3
 8016cce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016cd2:	d807      	bhi.n	8016ce4 <_printf_i+0x28>
 8016cd4:	2f62      	cmp	r7, #98	; 0x62
 8016cd6:	d80a      	bhi.n	8016cee <_printf_i+0x32>
 8016cd8:	2f00      	cmp	r7, #0
 8016cda:	f000 80d8 	beq.w	8016e8e <_printf_i+0x1d2>
 8016cde:	2f58      	cmp	r7, #88	; 0x58
 8016ce0:	f000 80a3 	beq.w	8016e2a <_printf_i+0x16e>
 8016ce4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016cec:	e03a      	b.n	8016d64 <_printf_i+0xa8>
 8016cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016cf2:	2b15      	cmp	r3, #21
 8016cf4:	d8f6      	bhi.n	8016ce4 <_printf_i+0x28>
 8016cf6:	a001      	add	r0, pc, #4	; (adr r0, 8016cfc <_printf_i+0x40>)
 8016cf8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016cfc:	08016d55 	.word	0x08016d55
 8016d00:	08016d69 	.word	0x08016d69
 8016d04:	08016ce5 	.word	0x08016ce5
 8016d08:	08016ce5 	.word	0x08016ce5
 8016d0c:	08016ce5 	.word	0x08016ce5
 8016d10:	08016ce5 	.word	0x08016ce5
 8016d14:	08016d69 	.word	0x08016d69
 8016d18:	08016ce5 	.word	0x08016ce5
 8016d1c:	08016ce5 	.word	0x08016ce5
 8016d20:	08016ce5 	.word	0x08016ce5
 8016d24:	08016ce5 	.word	0x08016ce5
 8016d28:	08016e75 	.word	0x08016e75
 8016d2c:	08016d99 	.word	0x08016d99
 8016d30:	08016e57 	.word	0x08016e57
 8016d34:	08016ce5 	.word	0x08016ce5
 8016d38:	08016ce5 	.word	0x08016ce5
 8016d3c:	08016e97 	.word	0x08016e97
 8016d40:	08016ce5 	.word	0x08016ce5
 8016d44:	08016d99 	.word	0x08016d99
 8016d48:	08016ce5 	.word	0x08016ce5
 8016d4c:	08016ce5 	.word	0x08016ce5
 8016d50:	08016e5f 	.word	0x08016e5f
 8016d54:	680b      	ldr	r3, [r1, #0]
 8016d56:	1d1a      	adds	r2, r3, #4
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	600a      	str	r2, [r1, #0]
 8016d5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016d64:	2301      	movs	r3, #1
 8016d66:	e0a3      	b.n	8016eb0 <_printf_i+0x1f4>
 8016d68:	6825      	ldr	r5, [r4, #0]
 8016d6a:	6808      	ldr	r0, [r1, #0]
 8016d6c:	062e      	lsls	r6, r5, #24
 8016d6e:	f100 0304 	add.w	r3, r0, #4
 8016d72:	d50a      	bpl.n	8016d8a <_printf_i+0xce>
 8016d74:	6805      	ldr	r5, [r0, #0]
 8016d76:	600b      	str	r3, [r1, #0]
 8016d78:	2d00      	cmp	r5, #0
 8016d7a:	da03      	bge.n	8016d84 <_printf_i+0xc8>
 8016d7c:	232d      	movs	r3, #45	; 0x2d
 8016d7e:	426d      	negs	r5, r5
 8016d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016d84:	485e      	ldr	r0, [pc, #376]	; (8016f00 <_printf_i+0x244>)
 8016d86:	230a      	movs	r3, #10
 8016d88:	e019      	b.n	8016dbe <_printf_i+0x102>
 8016d8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016d8e:	6805      	ldr	r5, [r0, #0]
 8016d90:	600b      	str	r3, [r1, #0]
 8016d92:	bf18      	it	ne
 8016d94:	b22d      	sxthne	r5, r5
 8016d96:	e7ef      	b.n	8016d78 <_printf_i+0xbc>
 8016d98:	680b      	ldr	r3, [r1, #0]
 8016d9a:	6825      	ldr	r5, [r4, #0]
 8016d9c:	1d18      	adds	r0, r3, #4
 8016d9e:	6008      	str	r0, [r1, #0]
 8016da0:	0628      	lsls	r0, r5, #24
 8016da2:	d501      	bpl.n	8016da8 <_printf_i+0xec>
 8016da4:	681d      	ldr	r5, [r3, #0]
 8016da6:	e002      	b.n	8016dae <_printf_i+0xf2>
 8016da8:	0669      	lsls	r1, r5, #25
 8016daa:	d5fb      	bpl.n	8016da4 <_printf_i+0xe8>
 8016dac:	881d      	ldrh	r5, [r3, #0]
 8016dae:	4854      	ldr	r0, [pc, #336]	; (8016f00 <_printf_i+0x244>)
 8016db0:	2f6f      	cmp	r7, #111	; 0x6f
 8016db2:	bf0c      	ite	eq
 8016db4:	2308      	moveq	r3, #8
 8016db6:	230a      	movne	r3, #10
 8016db8:	2100      	movs	r1, #0
 8016dba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016dbe:	6866      	ldr	r6, [r4, #4]
 8016dc0:	60a6      	str	r6, [r4, #8]
 8016dc2:	2e00      	cmp	r6, #0
 8016dc4:	bfa2      	ittt	ge
 8016dc6:	6821      	ldrge	r1, [r4, #0]
 8016dc8:	f021 0104 	bicge.w	r1, r1, #4
 8016dcc:	6021      	strge	r1, [r4, #0]
 8016dce:	b90d      	cbnz	r5, 8016dd4 <_printf_i+0x118>
 8016dd0:	2e00      	cmp	r6, #0
 8016dd2:	d04d      	beq.n	8016e70 <_printf_i+0x1b4>
 8016dd4:	4616      	mov	r6, r2
 8016dd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8016dda:	fb03 5711 	mls	r7, r3, r1, r5
 8016dde:	5dc7      	ldrb	r7, [r0, r7]
 8016de0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016de4:	462f      	mov	r7, r5
 8016de6:	42bb      	cmp	r3, r7
 8016de8:	460d      	mov	r5, r1
 8016dea:	d9f4      	bls.n	8016dd6 <_printf_i+0x11a>
 8016dec:	2b08      	cmp	r3, #8
 8016dee:	d10b      	bne.n	8016e08 <_printf_i+0x14c>
 8016df0:	6823      	ldr	r3, [r4, #0]
 8016df2:	07df      	lsls	r7, r3, #31
 8016df4:	d508      	bpl.n	8016e08 <_printf_i+0x14c>
 8016df6:	6923      	ldr	r3, [r4, #16]
 8016df8:	6861      	ldr	r1, [r4, #4]
 8016dfa:	4299      	cmp	r1, r3
 8016dfc:	bfde      	ittt	le
 8016dfe:	2330      	movle	r3, #48	; 0x30
 8016e00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016e04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016e08:	1b92      	subs	r2, r2, r6
 8016e0a:	6122      	str	r2, [r4, #16]
 8016e0c:	f8cd a000 	str.w	sl, [sp]
 8016e10:	464b      	mov	r3, r9
 8016e12:	aa03      	add	r2, sp, #12
 8016e14:	4621      	mov	r1, r4
 8016e16:	4640      	mov	r0, r8
 8016e18:	f7ff fee2 	bl	8016be0 <_printf_common>
 8016e1c:	3001      	adds	r0, #1
 8016e1e:	d14c      	bne.n	8016eba <_printf_i+0x1fe>
 8016e20:	f04f 30ff 	mov.w	r0, #4294967295
 8016e24:	b004      	add	sp, #16
 8016e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e2a:	4835      	ldr	r0, [pc, #212]	; (8016f00 <_printf_i+0x244>)
 8016e2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016e30:	6823      	ldr	r3, [r4, #0]
 8016e32:	680e      	ldr	r6, [r1, #0]
 8016e34:	061f      	lsls	r7, r3, #24
 8016e36:	f856 5b04 	ldr.w	r5, [r6], #4
 8016e3a:	600e      	str	r6, [r1, #0]
 8016e3c:	d514      	bpl.n	8016e68 <_printf_i+0x1ac>
 8016e3e:	07d9      	lsls	r1, r3, #31
 8016e40:	bf44      	itt	mi
 8016e42:	f043 0320 	orrmi.w	r3, r3, #32
 8016e46:	6023      	strmi	r3, [r4, #0]
 8016e48:	b91d      	cbnz	r5, 8016e52 <_printf_i+0x196>
 8016e4a:	6823      	ldr	r3, [r4, #0]
 8016e4c:	f023 0320 	bic.w	r3, r3, #32
 8016e50:	6023      	str	r3, [r4, #0]
 8016e52:	2310      	movs	r3, #16
 8016e54:	e7b0      	b.n	8016db8 <_printf_i+0xfc>
 8016e56:	6823      	ldr	r3, [r4, #0]
 8016e58:	f043 0320 	orr.w	r3, r3, #32
 8016e5c:	6023      	str	r3, [r4, #0]
 8016e5e:	2378      	movs	r3, #120	; 0x78
 8016e60:	4828      	ldr	r0, [pc, #160]	; (8016f04 <_printf_i+0x248>)
 8016e62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016e66:	e7e3      	b.n	8016e30 <_printf_i+0x174>
 8016e68:	065e      	lsls	r6, r3, #25
 8016e6a:	bf48      	it	mi
 8016e6c:	b2ad      	uxthmi	r5, r5
 8016e6e:	e7e6      	b.n	8016e3e <_printf_i+0x182>
 8016e70:	4616      	mov	r6, r2
 8016e72:	e7bb      	b.n	8016dec <_printf_i+0x130>
 8016e74:	680b      	ldr	r3, [r1, #0]
 8016e76:	6826      	ldr	r6, [r4, #0]
 8016e78:	6960      	ldr	r0, [r4, #20]
 8016e7a:	1d1d      	adds	r5, r3, #4
 8016e7c:	600d      	str	r5, [r1, #0]
 8016e7e:	0635      	lsls	r5, r6, #24
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	d501      	bpl.n	8016e88 <_printf_i+0x1cc>
 8016e84:	6018      	str	r0, [r3, #0]
 8016e86:	e002      	b.n	8016e8e <_printf_i+0x1d2>
 8016e88:	0671      	lsls	r1, r6, #25
 8016e8a:	d5fb      	bpl.n	8016e84 <_printf_i+0x1c8>
 8016e8c:	8018      	strh	r0, [r3, #0]
 8016e8e:	2300      	movs	r3, #0
 8016e90:	6123      	str	r3, [r4, #16]
 8016e92:	4616      	mov	r6, r2
 8016e94:	e7ba      	b.n	8016e0c <_printf_i+0x150>
 8016e96:	680b      	ldr	r3, [r1, #0]
 8016e98:	1d1a      	adds	r2, r3, #4
 8016e9a:	600a      	str	r2, [r1, #0]
 8016e9c:	681e      	ldr	r6, [r3, #0]
 8016e9e:	6862      	ldr	r2, [r4, #4]
 8016ea0:	2100      	movs	r1, #0
 8016ea2:	4630      	mov	r0, r6
 8016ea4:	f7e9 f9bc 	bl	8000220 <memchr>
 8016ea8:	b108      	cbz	r0, 8016eae <_printf_i+0x1f2>
 8016eaa:	1b80      	subs	r0, r0, r6
 8016eac:	6060      	str	r0, [r4, #4]
 8016eae:	6863      	ldr	r3, [r4, #4]
 8016eb0:	6123      	str	r3, [r4, #16]
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016eb8:	e7a8      	b.n	8016e0c <_printf_i+0x150>
 8016eba:	6923      	ldr	r3, [r4, #16]
 8016ebc:	4632      	mov	r2, r6
 8016ebe:	4649      	mov	r1, r9
 8016ec0:	4640      	mov	r0, r8
 8016ec2:	47d0      	blx	sl
 8016ec4:	3001      	adds	r0, #1
 8016ec6:	d0ab      	beq.n	8016e20 <_printf_i+0x164>
 8016ec8:	6823      	ldr	r3, [r4, #0]
 8016eca:	079b      	lsls	r3, r3, #30
 8016ecc:	d413      	bmi.n	8016ef6 <_printf_i+0x23a>
 8016ece:	68e0      	ldr	r0, [r4, #12]
 8016ed0:	9b03      	ldr	r3, [sp, #12]
 8016ed2:	4298      	cmp	r0, r3
 8016ed4:	bfb8      	it	lt
 8016ed6:	4618      	movlt	r0, r3
 8016ed8:	e7a4      	b.n	8016e24 <_printf_i+0x168>
 8016eda:	2301      	movs	r3, #1
 8016edc:	4632      	mov	r2, r6
 8016ede:	4649      	mov	r1, r9
 8016ee0:	4640      	mov	r0, r8
 8016ee2:	47d0      	blx	sl
 8016ee4:	3001      	adds	r0, #1
 8016ee6:	d09b      	beq.n	8016e20 <_printf_i+0x164>
 8016ee8:	3501      	adds	r5, #1
 8016eea:	68e3      	ldr	r3, [r4, #12]
 8016eec:	9903      	ldr	r1, [sp, #12]
 8016eee:	1a5b      	subs	r3, r3, r1
 8016ef0:	42ab      	cmp	r3, r5
 8016ef2:	dcf2      	bgt.n	8016eda <_printf_i+0x21e>
 8016ef4:	e7eb      	b.n	8016ece <_printf_i+0x212>
 8016ef6:	2500      	movs	r5, #0
 8016ef8:	f104 0619 	add.w	r6, r4, #25
 8016efc:	e7f5      	b.n	8016eea <_printf_i+0x22e>
 8016efe:	bf00      	nop
 8016f00:	0801d781 	.word	0x0801d781
 8016f04:	0801d792 	.word	0x0801d792

08016f08 <_free_r>:
 8016f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f0a:	2900      	cmp	r1, #0
 8016f0c:	d048      	beq.n	8016fa0 <_free_r+0x98>
 8016f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f12:	9001      	str	r0, [sp, #4]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	f1a1 0404 	sub.w	r4, r1, #4
 8016f1a:	bfb8      	it	lt
 8016f1c:	18e4      	addlt	r4, r4, r3
 8016f1e:	f000 f8d3 	bl	80170c8 <__malloc_lock>
 8016f22:	4a20      	ldr	r2, [pc, #128]	; (8016fa4 <_free_r+0x9c>)
 8016f24:	9801      	ldr	r0, [sp, #4]
 8016f26:	6813      	ldr	r3, [r2, #0]
 8016f28:	4615      	mov	r5, r2
 8016f2a:	b933      	cbnz	r3, 8016f3a <_free_r+0x32>
 8016f2c:	6063      	str	r3, [r4, #4]
 8016f2e:	6014      	str	r4, [r2, #0]
 8016f30:	b003      	add	sp, #12
 8016f32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f36:	f000 b8cd 	b.w	80170d4 <__malloc_unlock>
 8016f3a:	42a3      	cmp	r3, r4
 8016f3c:	d90b      	bls.n	8016f56 <_free_r+0x4e>
 8016f3e:	6821      	ldr	r1, [r4, #0]
 8016f40:	1862      	adds	r2, r4, r1
 8016f42:	4293      	cmp	r3, r2
 8016f44:	bf04      	itt	eq
 8016f46:	681a      	ldreq	r2, [r3, #0]
 8016f48:	685b      	ldreq	r3, [r3, #4]
 8016f4a:	6063      	str	r3, [r4, #4]
 8016f4c:	bf04      	itt	eq
 8016f4e:	1852      	addeq	r2, r2, r1
 8016f50:	6022      	streq	r2, [r4, #0]
 8016f52:	602c      	str	r4, [r5, #0]
 8016f54:	e7ec      	b.n	8016f30 <_free_r+0x28>
 8016f56:	461a      	mov	r2, r3
 8016f58:	685b      	ldr	r3, [r3, #4]
 8016f5a:	b10b      	cbz	r3, 8016f60 <_free_r+0x58>
 8016f5c:	42a3      	cmp	r3, r4
 8016f5e:	d9fa      	bls.n	8016f56 <_free_r+0x4e>
 8016f60:	6811      	ldr	r1, [r2, #0]
 8016f62:	1855      	adds	r5, r2, r1
 8016f64:	42a5      	cmp	r5, r4
 8016f66:	d10b      	bne.n	8016f80 <_free_r+0x78>
 8016f68:	6824      	ldr	r4, [r4, #0]
 8016f6a:	4421      	add	r1, r4
 8016f6c:	1854      	adds	r4, r2, r1
 8016f6e:	42a3      	cmp	r3, r4
 8016f70:	6011      	str	r1, [r2, #0]
 8016f72:	d1dd      	bne.n	8016f30 <_free_r+0x28>
 8016f74:	681c      	ldr	r4, [r3, #0]
 8016f76:	685b      	ldr	r3, [r3, #4]
 8016f78:	6053      	str	r3, [r2, #4]
 8016f7a:	4421      	add	r1, r4
 8016f7c:	6011      	str	r1, [r2, #0]
 8016f7e:	e7d7      	b.n	8016f30 <_free_r+0x28>
 8016f80:	d902      	bls.n	8016f88 <_free_r+0x80>
 8016f82:	230c      	movs	r3, #12
 8016f84:	6003      	str	r3, [r0, #0]
 8016f86:	e7d3      	b.n	8016f30 <_free_r+0x28>
 8016f88:	6825      	ldr	r5, [r4, #0]
 8016f8a:	1961      	adds	r1, r4, r5
 8016f8c:	428b      	cmp	r3, r1
 8016f8e:	bf04      	itt	eq
 8016f90:	6819      	ldreq	r1, [r3, #0]
 8016f92:	685b      	ldreq	r3, [r3, #4]
 8016f94:	6063      	str	r3, [r4, #4]
 8016f96:	bf04      	itt	eq
 8016f98:	1949      	addeq	r1, r1, r5
 8016f9a:	6021      	streq	r1, [r4, #0]
 8016f9c:	6054      	str	r4, [r2, #4]
 8016f9e:	e7c7      	b.n	8016f30 <_free_r+0x28>
 8016fa0:	b003      	add	sp, #12
 8016fa2:	bd30      	pop	{r4, r5, pc}
 8016fa4:	2001d31c 	.word	0x2001d31c

08016fa8 <_malloc_r>:
 8016fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016faa:	1ccd      	adds	r5, r1, #3
 8016fac:	f025 0503 	bic.w	r5, r5, #3
 8016fb0:	3508      	adds	r5, #8
 8016fb2:	2d0c      	cmp	r5, #12
 8016fb4:	bf38      	it	cc
 8016fb6:	250c      	movcc	r5, #12
 8016fb8:	2d00      	cmp	r5, #0
 8016fba:	4606      	mov	r6, r0
 8016fbc:	db01      	blt.n	8016fc2 <_malloc_r+0x1a>
 8016fbe:	42a9      	cmp	r1, r5
 8016fc0:	d903      	bls.n	8016fca <_malloc_r+0x22>
 8016fc2:	230c      	movs	r3, #12
 8016fc4:	6033      	str	r3, [r6, #0]
 8016fc6:	2000      	movs	r0, #0
 8016fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fca:	f000 f87d 	bl	80170c8 <__malloc_lock>
 8016fce:	4921      	ldr	r1, [pc, #132]	; (8017054 <_malloc_r+0xac>)
 8016fd0:	680a      	ldr	r2, [r1, #0]
 8016fd2:	4614      	mov	r4, r2
 8016fd4:	b99c      	cbnz	r4, 8016ffe <_malloc_r+0x56>
 8016fd6:	4f20      	ldr	r7, [pc, #128]	; (8017058 <_malloc_r+0xb0>)
 8016fd8:	683b      	ldr	r3, [r7, #0]
 8016fda:	b923      	cbnz	r3, 8016fe6 <_malloc_r+0x3e>
 8016fdc:	4621      	mov	r1, r4
 8016fde:	4630      	mov	r0, r6
 8016fe0:	f000 f862 	bl	80170a8 <_sbrk_r>
 8016fe4:	6038      	str	r0, [r7, #0]
 8016fe6:	4629      	mov	r1, r5
 8016fe8:	4630      	mov	r0, r6
 8016fea:	f000 f85d 	bl	80170a8 <_sbrk_r>
 8016fee:	1c43      	adds	r3, r0, #1
 8016ff0:	d123      	bne.n	801703a <_malloc_r+0x92>
 8016ff2:	230c      	movs	r3, #12
 8016ff4:	6033      	str	r3, [r6, #0]
 8016ff6:	4630      	mov	r0, r6
 8016ff8:	f000 f86c 	bl	80170d4 <__malloc_unlock>
 8016ffc:	e7e3      	b.n	8016fc6 <_malloc_r+0x1e>
 8016ffe:	6823      	ldr	r3, [r4, #0]
 8017000:	1b5b      	subs	r3, r3, r5
 8017002:	d417      	bmi.n	8017034 <_malloc_r+0x8c>
 8017004:	2b0b      	cmp	r3, #11
 8017006:	d903      	bls.n	8017010 <_malloc_r+0x68>
 8017008:	6023      	str	r3, [r4, #0]
 801700a:	441c      	add	r4, r3
 801700c:	6025      	str	r5, [r4, #0]
 801700e:	e004      	b.n	801701a <_malloc_r+0x72>
 8017010:	6863      	ldr	r3, [r4, #4]
 8017012:	42a2      	cmp	r2, r4
 8017014:	bf0c      	ite	eq
 8017016:	600b      	streq	r3, [r1, #0]
 8017018:	6053      	strne	r3, [r2, #4]
 801701a:	4630      	mov	r0, r6
 801701c:	f000 f85a 	bl	80170d4 <__malloc_unlock>
 8017020:	f104 000b 	add.w	r0, r4, #11
 8017024:	1d23      	adds	r3, r4, #4
 8017026:	f020 0007 	bic.w	r0, r0, #7
 801702a:	1ac2      	subs	r2, r0, r3
 801702c:	d0cc      	beq.n	8016fc8 <_malloc_r+0x20>
 801702e:	1a1b      	subs	r3, r3, r0
 8017030:	50a3      	str	r3, [r4, r2]
 8017032:	e7c9      	b.n	8016fc8 <_malloc_r+0x20>
 8017034:	4622      	mov	r2, r4
 8017036:	6864      	ldr	r4, [r4, #4]
 8017038:	e7cc      	b.n	8016fd4 <_malloc_r+0x2c>
 801703a:	1cc4      	adds	r4, r0, #3
 801703c:	f024 0403 	bic.w	r4, r4, #3
 8017040:	42a0      	cmp	r0, r4
 8017042:	d0e3      	beq.n	801700c <_malloc_r+0x64>
 8017044:	1a21      	subs	r1, r4, r0
 8017046:	4630      	mov	r0, r6
 8017048:	f000 f82e 	bl	80170a8 <_sbrk_r>
 801704c:	3001      	adds	r0, #1
 801704e:	d1dd      	bne.n	801700c <_malloc_r+0x64>
 8017050:	e7cf      	b.n	8016ff2 <_malloc_r+0x4a>
 8017052:	bf00      	nop
 8017054:	2001d31c 	.word	0x2001d31c
 8017058:	2001d320 	.word	0x2001d320

0801705c <_realloc_r>:
 801705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801705e:	4607      	mov	r7, r0
 8017060:	4614      	mov	r4, r2
 8017062:	460e      	mov	r6, r1
 8017064:	b921      	cbnz	r1, 8017070 <_realloc_r+0x14>
 8017066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801706a:	4611      	mov	r1, r2
 801706c:	f7ff bf9c 	b.w	8016fa8 <_malloc_r>
 8017070:	b922      	cbnz	r2, 801707c <_realloc_r+0x20>
 8017072:	f7ff ff49 	bl	8016f08 <_free_r>
 8017076:	4625      	mov	r5, r4
 8017078:	4628      	mov	r0, r5
 801707a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801707c:	f000 f830 	bl	80170e0 <_malloc_usable_size_r>
 8017080:	42a0      	cmp	r0, r4
 8017082:	d20f      	bcs.n	80170a4 <_realloc_r+0x48>
 8017084:	4621      	mov	r1, r4
 8017086:	4638      	mov	r0, r7
 8017088:	f7ff ff8e 	bl	8016fa8 <_malloc_r>
 801708c:	4605      	mov	r5, r0
 801708e:	2800      	cmp	r0, #0
 8017090:	d0f2      	beq.n	8017078 <_realloc_r+0x1c>
 8017092:	4631      	mov	r1, r6
 8017094:	4622      	mov	r2, r4
 8017096:	f7ff fbef 	bl	8016878 <memcpy>
 801709a:	4631      	mov	r1, r6
 801709c:	4638      	mov	r0, r7
 801709e:	f7ff ff33 	bl	8016f08 <_free_r>
 80170a2:	e7e9      	b.n	8017078 <_realloc_r+0x1c>
 80170a4:	4635      	mov	r5, r6
 80170a6:	e7e7      	b.n	8017078 <_realloc_r+0x1c>

080170a8 <_sbrk_r>:
 80170a8:	b538      	push	{r3, r4, r5, lr}
 80170aa:	4d06      	ldr	r5, [pc, #24]	; (80170c4 <_sbrk_r+0x1c>)
 80170ac:	2300      	movs	r3, #0
 80170ae:	4604      	mov	r4, r0
 80170b0:	4608      	mov	r0, r1
 80170b2:	602b      	str	r3, [r5, #0]
 80170b4:	f7ea fc8c 	bl	80019d0 <_sbrk>
 80170b8:	1c43      	adds	r3, r0, #1
 80170ba:	d102      	bne.n	80170c2 <_sbrk_r+0x1a>
 80170bc:	682b      	ldr	r3, [r5, #0]
 80170be:	b103      	cbz	r3, 80170c2 <_sbrk_r+0x1a>
 80170c0:	6023      	str	r3, [r4, #0]
 80170c2:	bd38      	pop	{r3, r4, r5, pc}
 80170c4:	2001d614 	.word	0x2001d614

080170c8 <__malloc_lock>:
 80170c8:	4801      	ldr	r0, [pc, #4]	; (80170d0 <__malloc_lock+0x8>)
 80170ca:	f000 b811 	b.w	80170f0 <__retarget_lock_acquire_recursive>
 80170ce:	bf00      	nop
 80170d0:	2001d61c 	.word	0x2001d61c

080170d4 <__malloc_unlock>:
 80170d4:	4801      	ldr	r0, [pc, #4]	; (80170dc <__malloc_unlock+0x8>)
 80170d6:	f000 b80c 	b.w	80170f2 <__retarget_lock_release_recursive>
 80170da:	bf00      	nop
 80170dc:	2001d61c 	.word	0x2001d61c

080170e0 <_malloc_usable_size_r>:
 80170e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170e4:	1f18      	subs	r0, r3, #4
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	bfbc      	itt	lt
 80170ea:	580b      	ldrlt	r3, [r1, r0]
 80170ec:	18c0      	addlt	r0, r0, r3
 80170ee:	4770      	bx	lr

080170f0 <__retarget_lock_acquire_recursive>:
 80170f0:	4770      	bx	lr

080170f2 <__retarget_lock_release_recursive>:
 80170f2:	4770      	bx	lr

080170f4 <_init>:
 80170f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170f6:	bf00      	nop
 80170f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170fa:	bc08      	pop	{r3}
 80170fc:	469e      	mov	lr, r3
 80170fe:	4770      	bx	lr

08017100 <_fini>:
 8017100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017102:	bf00      	nop
 8017104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017106:	bc08      	pop	{r3}
 8017108:	469e      	mov	lr, r3
 801710a:	4770      	bx	lr
